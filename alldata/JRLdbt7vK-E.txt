actually I feel like playing games today do you like gaming Sean yeah I do you know many computer scientists like me got into computers in the first place because we do like games and and we think like okay I'm gonna go to university I'm gonna learn how to program and in no time I will be able to do a very very cool game with visual graphics and stuff like that really that's the case but what I want to do in this video today is to show you that with a little bit of knowledge of programming and using a library you can do something very cool in Python that's actually what I want to do I want to start off actually showing the end result of this video no it's actually not the video but I'm gonna show you again here to start with that my students implement it recently so this is again you can say zombie apocalypse but they actually give you a bit of instructions to begin with so that's my friend towards them showing how the game works that's myself as well and I'm gonna start playing oh and actually pretty bad but I want to get this one because you will say this one is super fun boom I love my job this is an example of what you can do with Pi game which is the library I'm gonna be using today but it's not beginning I'm gonna be implementing actually so my game is when I it's gonna be way easier because we don't have time to implement that kind of game but that was done actually by a group of three people working for a month worth of time on the game for from people that didn't have any experience programming before so it's actually pretty cool isn't it yeah yeah very good what we're gonna be doing today is to play a very classic game that everybody knows in computer science which is the phone game actually my very good friend Steve already showed this game and actually use this game as a good example to show what object-oriented programming is right so we're gonna actually rely on the concept of object-oriented programming for for this game so I want to show you very quickly what the game is all about so I'm gonna draw here how the screen will look like so basically the idea is that normally have a bubble about and you're gonna have a bow and typically you're gonna have actually a 2 players game in which you have another puddle on the other side and the idea is to is push this bomb through so you win right so that's the main thing but today I want to play a slightly different game I want to play a squash version of pong because I don't have anyone else to play with so I'm gonna remove this and what I want to do is to basically draw three walls here and the game that I want to implement today with this library is basically this in which this ball will go around then will return back and I have to try to catch it and not lose it right so that's the main game I want to implement to start with maybe later on we we add more functionality right so to do so as I said I want to use object-oriented programming and I want to use also a library what is a library gonna start off with that a library is no more than a collection of code that someone else is actually implemented before rotate and allows us to use it on their behalf so those libraries are typically based on object-oriented programming and they have multiple classes multiple functions that we can just simply import and news and that library that we're gonna be using is the one that we use in in our course it is just one more library in Python that allows you to play games it allows you to put nice stuff on the window and paint stuff on your computer and also put some sounds is it the best library if you ask me Sean well who knows right it is relatively stable but if you try what we're going to be doing this video if you try to do this on a Mac maybe you kind of disagree with me on that one yeah but if you use Linux like I'm doing here everything will be fine so you know what I mean right so you should be using Linux if you want to anyways so this is a very good library that allows you to do quite a few stuff and and we're gonna be using object-oriented programming how so basically on the scenario that you have you're gonna have a few things that are let's say fixed right so you have the green walls and then you have the bubble and the bow and these two objects will be actually be moving on the screen and actually will be interacting with each other right I'm interacting with the scenario that we have here so the bow will have to collide at some point with the walls and then returning back to the bubble right so this is why we want to use object-oriented programming because that allows me and allows us basically to create data types that have some sort of function so basically we're gonna have a ball and that ball is gonna be able to be shown somewhere in the screen and to update its position all around right and the same thing with the public and the paddle actually I want to control it with my mouse so I want to be able to move and update that position of the paddle so I want you to think of how the computer will be understanding the game so basically the computer understand about pixels and what we're gonna be doing today is just painting we're gonna be painting all the way so we're gonna paint first as display and and then it understands coordinate pick a pixel so this point here it's actually coordinate zero zero if this is actually the X and this is the y-axis right so what is this position it's the total of X and the total of why isn't it so it depends how big our court is let's say it's I'd know 500 comma 300 something like that something like that exactly so what I'm going to do actually is to be a good programmer and I will actually define that with a variable width and height right so and then the actual number it will depend on on this right so on the values that we give to that and actually this should be with and high minus 1 of course right because we start counting from 0 so that's the coordinate so the way we're gonna be working with PI going off with any other library whenever we want to draw something on the screen you need to tell it ok you need to go to this point and draw that pixel right so that's what we're gonna be doing today the bowl what do you think are the main important attributes of that of that object what do you think is the main thing well surely when it hits something it has to rebound or balance or something so we need to control collision right that's something very cool very important we're gonna be doing that manually here but with actually with pygame there is already some stuff that can control collision and help you doing that without doing it manually but what do you think are the main attributes so we have this object that will be represented somewhere on the screen so what we need to know about that bomb is coordinates x and y right so that's gonna be attributes and what is the functionality of that ball is to move around without colliding with anything right and whenever it collides just have to return so these are the attributes and the functions and maybe there is something more that we miss which is how big we want this ball to be right and that depends a bit on how we're gonna be implementing this on pygame the way that we are going to implement this is with Cellcom and for that you need to define the radius right so if I were to define this with object-oriented programming if we have to define what the ball is I'm gonna represent that in here I'm gonna need coordinate x and y and I'm gonna need definitely the radius what about the color definitely that could be something that we can put in as well the color could be there if you want to and this too variable could be if you want to what we call class variables a class variable will be always the same value for all the balls that we draw right sir actually I'm gonna draw just one single ball but I might actually end up drawing two different bubbles right in different positions so these are the attributes right what do you think we can do with the ball let's say we want just to show it right so we're gonna have functionality to show it and we need to be able to update the position to make it move right so I'm going to call it update that's why I call it in my code I'm gonna be doing later on okay so do we need anything else you think if you want to start getting fancy into fancy versions of pong maybe but I can't seem you need to hide it in to play harder ha ha ha we will see where we do that yes we're going to be doing that when we update yeah that's actually a very good point um there is something else for that we will come back to this in a minute right so what do you think we need for the button so we've been out similar isn't it I mean apart from it's probably not going to be round so it won't take radius it'll need like a cortex my kind of size as well but what do I need for that so what I need for that is basically width and the height of that particular puddle so it has nothing to do with the height and the width of my screen right it's something just specific for the puddle right so that's gonna be a class variable for for a problem what do we need for my game for for my game initially I stole you that I'm gonna be playing this squash version of it in which I only have one paddle so the x-coordinate will remain actually fixed but the y is the one I'm gonna be moving especially with the mouse if possible yes so we could if we want to just simply represent Y I could put it here should we put X initially I'm not gonna be bothered because I just want to do this game right so for now I'm gonna say no maybe later on I will change my mind in terms of functionality of that particular object basically we want to do the same thing we want to show it and to update the position whenever we want to right the only difference is going to be how I implement that update the ball will be moving automatically the problem will be controlled by the mouse or the keyboard so it needs to be linked to the krafla control rod so more exactly so here we have now the ball and the paddle what we think is initially a good definition of how to represent these two objects right so as I mentioned before what we're gonna be doing whenever we play when whenever we implement again on on a computer is basically drawing stuff so I want you to help me a bit of thinking what are the different pixels to draw the walls and to draw the paddle initially and and let's try to compute and calculate what the what the coordinates of the different parts of the game are right so in this screen that you see on my iPad right now we said here it's gonna be 0 0 for this coordinate and I want to know how do we draw this wall it's gonna depend a lot on what the library offers you but I can tell you I can anticipate that already which is going to be basically a function that allows you to draw a rectangle right and then you need to tell it the coordinate in which the rectangle will begin and then you need to tell it how big is the rectangle you need to define width and height of that rectangle so basically we need to tell this we know from 0 0 2 with ya but then we need to tell here what is this size for the wall right so what we have here is this width or the border of the wall right so we need to define that as well so that's gonna be another variable in our program so we need to define how big we want the walls to be and they should be all of them the same so what do you thing is the ordinates of this point then highlighting here in red I think we're gonna be going so X is the first coordinate right so maybe it's 1,000 comma 5 or something like that it depends on the screen resolution right yes so this is a guess because you want to do it for the resolution of your screen right but so what I want to do is to do it always relative right so we want to do that on a variable that then we set up depending on the size of your screen so what you could do is to use the variable width for that so you say that the coordinate of that is gonna be the with the maximum width and then this number five value gave me five pixels for the border so it is basically a variable that we call border and now we're gonna store there the pixels that we want to use for them that could be ten five thirty then we can play with that whenever the implementation itself right so the point is this coordinate is in here all right what is the position of the paddle aha this one is probably the most difficult one well it's it's not quite at that so far across is it so it's the width minus a bit let's say I want to draw the battle yes next to the border of the screen let's say right so this is gonna be my button here so again if you start drawing the paddle from a top left like we did the rectangle you've just got to take into account half the size of the paddle as well there you go so we we understand the position of the paddle like this point here in the center right but this is not quite how you actually draw it whenever we want to implement that we need to use what the library actually offers you and the way we're gonna have to draw this it's a bit annoying because we need to tell this coordinate here on the top left corner is what Piegan or we'll use to draw this rectangle here and then we need to say this is here the width and this is the height of our paddle so then you need to compute this coordinate first to tell it and then you say what is the width and what is the height so this is half of the total height minus half of the paddles hi and then that's four for the Y position and for the x position is yes with the total width minus the width of our paddle right so it's a bit tricky you need to make a bit of thinking whenever you're drawing a program right so you need to think carefully okay these are the tools that I have that the library provides me and then I need to come up with the position and how we're going to be moving it so as you can see it's actually not that straightforward to do again right so basically that's what I wanted to show you here in this first video in which basically we just draw what the game will look like we have kind of defined what the ball object will be in half and what the paddle object will be and we'll have might not be exactly the final version of it we will see that whenever we start implementing it there are a few tricks that I want to tell you but that's gonna be in our next video in which we actually go hands-on and we're gonna be implementing the game live programming on Python yeah start off by importing the library right so if you're going to be using this you need to install the library in your computer right but whenever you have done that you need to import PI again and the very very first thing that you need to program in this is the code we write and how it modifies the data we think rather