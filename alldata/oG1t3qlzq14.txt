hello and welcome today we're going to be 
looking at what exactly happens when you do an   operation such as addition on two numpy arrays 
of different shapes by the end of this video   you're going to understand why in this case 
you should expect a three by three array   and you're going to understand where those 
numbers come from and you're going to understand   what you would need to do differently 
if you actually wanted to just   add number by number zero plus 
three one plus four two plus five so what is array broadcasting array 
broadcasting is a way to do element-wise   operations on arrays of possibly different 
but compatible shapes for example in this   case i have a matrix with two rows and three 
columns and i have a single row of three numbers   in this case it's pretty clear that i can simply 
add this row one two three to the top row and the   bottom row when i add it to the top row i get 1 3 
5 and when i add it to the bottom row i get 4 6 8.   similarly if i added a column 1 2 instead of a row 
then i would just add that column to each column   this idea works with any kind of element-wise 
operation that you would want to do on arrays   so you can think plus minus times exponentiation 
taking the minimum or maximum element-wise or lots   of other different functions if you're not sure 
whether a certain function uses this kind of array   broadcasting just search for the word broadcast 
in its numpy documentation before we can go on to   decide what it would actually mean to add these 
two different arrays in a more general context   first we have to understand what it means for 
the shapes of these two things to be compatible   obviously i can add one two three as a row 
but would i be able to add 1 2 3 4 as a row   well no that doesn't really make sense and it's 
kind of obvious why but it's still hard to explain   so here are the rules for determining if 
the shapes of two arrays are compatible   it might look like a lot at first but stick 
with me i promise we're going to do a lot of   examples and once you see a few examples 
the rules are going to be crystal clear   first off if one of the arrays 
has more dimensions than the other   then when you look at their shapes you should 
right align them and imagine prepending ones   to the shorter one so if you had an array which 
is just three numbers then you could just as well   think about it as a one by three array or a one by 
one by three array or a one by one by one by three   array it doesn't matter how many ones you prepend 
to the front of the shape that doesn't change that   there's just three numbers in there the next rule 
is that if an axis has just a single element in it   then you can repeat or broadcast that axis to the 
length of the other vector's axis all remaining   axes must have the same lengths so using these 
rules we'll be able to compute whether arrays are   compatible and if so what the broadcasted shape 
the results of the broadcasted operation will be   again these look a little complex but once 
you see the examples it'll clear right up so here's the first example we start with an x 
that we assume has shape two by three of course   something with the exact same shape must be 
compatible so in this case another two by   three array would be compatible but there are 
definitely other things that are compatible   so we could have a two by one array and we 
see that that's compatible because the twos   match and then one can match with anything 
so the one matches with the three that's okay   similarly a one can match with a two and a three 
can match with the three those are compatible and   whenever you see something that's shorter than the 
other one you prepend ones until they're the same   length so you should imagine that it looks like 
this in which case it's the same as the previous   thing the one matches with the two and the three 
with the three so in that way if i have an array   of just three elements that still matches with a 
two by three array in this case the broadcasted   shape is going to be two by three now what are 
some examples of things that are not compatible well a three by two is not compatible because a 
three doesn't match a two and also a two doesn't   match a three we are not allowed to reorder 
the axes when checking for compatibility   in this last example you might think that it would 
be compatible because it's like a two by one but   not so the rule is always to prepend ones so if 
i do that i add one at the beginning not the end   in that case i would have something 
that looks like one by two   the one matches with the two but the two does not 
match with the three so they're not compatible   if you wanted to do 2 comma 1 
instead you would just have to   reshape y using the dot reshape method 
let's look at another set of examples in this case we have 4 dimensions and we see 
that all of the following things are compatible   in every case we follow the same rules again 
though in this case we cannot append a one to   make it compatible we always prepend ones so far 
we've only seen examples where the resulting shape   is the same as one of the original shapes let's 
look at an example where that is not the case in this example we have quite different 
looking shapes but they are in fact compatible   you can see in this case that i've already right 
aligned them and that they match up every entry   either is the same number or has a one in the 
column and then of course i would just prepend   ones in this space but i'll leave that out so the 
way that we're getting the common shape is to take   either the common number in this case 17 or one 
or if only one of the numbers is 1 then take the   number that's not that so we would take 17 here 
1 here 11 here 7 here 5 here and then 3 2 and 1.   so now you should be able to tell just by 
looking at the shapes of the two arrays   whether they're compatible and if so what the 
resulting shape should be but i still haven't told   you how to actually add two things of different 
shapes to do that all we have to do is imagine a   for loop the idea is that for any dimension where 
you used a one to match a different dimension   then instead of looping over that variable just 
use index 0 because that's the only valid index   in this case i have a 3x3 and a 3x1 so we check 
that the shapes are compatible 3 matches with 1   and three matches with three the 
resultant shape should be three by three   i then create an empty array of that shape and 
i'm going to use nested for loops to fill in   the values of course actually using these for 
loops would be a bad idea because for loops in   python are extremely slow but to understand what 
value numpy is actually computing when you do this   this is what you should be thinking of 
okay so in order to fill out the ijth entry   of our output array just think that you want 
to do element-wise addition but when it's not   possible fill things in in the best possible 
way x has shape 3 3 so it makes sense to give   i and j as indices to the x array y on the 
other hand was 3 by 1. so it makes sense   to pass in the i index which goes from zero 
to two but i can't pass in the j index here   because that axis only has one 
element it only has one valid index   so just use it if i go ahead and run the code we 
see that the output is the same as what numpy gave   let's take a look at another example this 
example shows how to think about it when you had   one array that didn't have as 
many dimensions as the other   and the rule here is just omit the variables 
whenever you prepended ones to the dimension   in this case i have x which is a two by 
three by three which is essentially it's   two three by three matrices there's one 
and there's the other and i have a single   three element array we right align the dimensions 
and we can tell that they're compatible three   three three matches one and two matches one and 
the resultant shape is two by three by three this time i have three nested loops 
because the shape is three dimensional   to figure out what goes in the ijk spot of the 
output array we just look at what to do for each   element x has no problem because it has shape 
two by three by three but with y there's only   one dimension so what to do with the first two 
dimensions well since they were pretended to be   length 1 anyway all we were going to do is plug 
in 0s there so let's just omit them the way that   i know to plug in k here instead of i or j is that 
i'm thinking of this column as corresponding to i   this column as corresponding to j and this column 
as corresponding to k so you can see that for y i   have enough dimensions to plug in the index again 
when i run the code you can see that the output of   the numpy calculation is identical to 
the output created using the for loops in this final example let's look back at the one 
that we started with on the title slide we had a   three by one array and a one by three array 
this highlights the fact that you can have   ones in either of the arrays not just one of 
them by now we can calculate the compatible shape   three matches with one and three matches with 
one so the resultant shape will be three by three   so we create an empty array of that 
shape and loop over the two dimensions   the output at i j is computed as follows   the first dimension corresponds to i and we know 
that in that dimension x has the same shape as the   output so it makes sense to plug in the index 
i there but for j x only has one thing in it   so let's just use the only valid index 0. on 
the other hand for y it is the i dimension   that only has one valid index so we plug in zero 
but for the j dimension we can plug in the index j so now we see where this three by three answer 
comes from and you can check that our answer is   the same as the numpy one so now can you tell 
what would you do if you wanted to just add   zero and three one and four and two and five 
well the answer is you would just reshape one   of them you could either reshape this one 
to one by three or this one to three by one   or both of them just to a three element array well 
i hope this video helped you understand a little   bit better about what numpy array broadcasting 
is and why it gives you the answers that it does   if you're looking to test your skills 
a little bit here's an exercise for you   suppose you have a thousand images that are 32 by 
32 pixels and each image has three color channels   so it's your standard red green and blue pixel 
values from 0 to 255. so every pixel has a red   value a green value and a blue value now suppose 
you have all this image data stored in a single   array of size n c w h here n is your 1000 images 
c is the three channels w is the width and   h is the height so my question for you is what 
array y would you multiply by to scale every red   pixel by 2 every green pixel by 3 and every blue 
pixel by four if you want to check your answer   check out the github link in the description 
which has the source code for this notebook   thanks for watching don't forget 
to like comment and subscribe