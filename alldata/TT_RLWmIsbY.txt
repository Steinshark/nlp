honestly the reality is I forget solid principles all the time what they all mean so let's look at the solid principles and then I'm going to explain why I'm triggered and I'm going to die on the inside okay here we go the solid principles are the five principles of object-oriented class design okay so I feel like I've already reached all the information I need to know okay because we all know that I don't do objectoriented or functional programming I do functional programming and object-oriented at the same time F poop everybody's favorite new it's honestly when it first came out it was so hot it's kind of cooled off a little bit since it came out not going to lie to you it's cooled off a little bit not nearly as steamy as it once was but we're working on it okay uh let's see these five principles help us understand the need for certain design patterns in software architecture and general so I believe that it is a topic that every developer should learn this article will teach you everything you need to know how let's see to know to apply solid principles to your projects we will start by taking a look into the history of this term good that's what I need then we are going to get into the nitty-gritty details and that's why or uh oh okay so this is why I have something called this I just makeup words um I have makeup word itis uh the wise in the house of each principle by creating a class design and improving it step by step so grab a cup of coffee or tea and let's jump in the background the solid principles were first introduced by the famous computer scientist Robert J Martin AKA Uncle Bob in his paper 2000 but the solid acronym was introduced later by Michael feathers what a what a lovely name the name is Michael feathers you wouldn't understand how silk my silk blouses are um anyways Uncle Bob is also the author of best-selling books clean code and cleaned architecture and one of the participants in the agile Alliance feather the name's feather Michael feathers uh therefore it is not surprise it is not a surprise that all these concepts of clean coat object-oriented architecture and design patterns are somehow connected and complimentary to each other they all serve the same purpose to cre are to create understandable readable and testable code that many developers can collaboratively work on that's a good principle I mean honestly like this is a good North Star I do agree like this is the North Star you should have we should all have that right base paint Dev thank you for that let's look at each of the uh each principle one by one following the solid acronym single responsibility principle the open close principle the Lov substitution principle the interface segregation principle the dep dependency inversion principle solid I'm glad they didn't choose AR C because they could have chose Ary right I mean it's right there it's right there right in the name all right anyways the single responsibility principle states that clashes should do one thing and therefore should have only one single reason to change or all ttts oh yeah it could just be a bunch of t's we could have had the 5T T5 T5 stack anybody who wants the T5 stack all right to State this principle more technically only one potential change database logic logic or logging logic and so on in the software specification should be able to affect the specification of the class uh this means that if a class is a data container like a book class or a student class and it has some uh feels regarding that entity it should only change if we change the data model I also assume this means like some of the logic around the data model like you can imagine you could imagine the following the single responsibility principle is important first of all because many uh different teams can work on the same project and edit the same class for different reasons this could lead to in uh incompatible modules so I always have kind of like I generally have like a kind of a problem if you will with this so let me just let me just open up this this this hot this hot mess that I have of a codebase so you'll notice this little guy right here now you're probably thinking that can't be that hard to do that right well actually to create this little square and to do this it takes a lot of it takes aot lot of effort to make this coloring work okay it actually took it it took an unusual amount of effort I must say not simple right um but to make it done we broke it up into a couple different kind of if you will modules classes however you want to call them they're actually they are actually uh tables in Lua uh so I have something that opens Windows uh that creates a new display cache and new color set so in some sense I did kind of create the single principal kind of idea that this thing just does the displaying this thing just does the color setting right and so you kind of have to apply them one at a time right uh because if you if you try to update the display cach it actually wipes out the uh extended marks and therefore you actually de you actually like decolor that spot and so it makes sense this is a good way to do things you could have easily done this with rxjs yes absolutely uh window opening and creation is like its own set of just things right it's just a bunch of code around creating and opening and listing and attaching and closing windows and all that kind of fun stuff okay apparently I don't even have this as a I'm not even using this function oops but you get the idea right you get the idea and so it's like do I disagree with Sol like uh single responsibility not really I'm just way more willing to be a little bit Loosey Goosey do you know what I mean uh so when I go back to uh app it opens up Windows it closes Windows it also takes in commands from the TCP pipe and determines what to do should we render should we partial render should we close should we open up a window and then alerts everybody else of commands we also alert people of renders after we get done on rendering or partial rendering so it's kind of like one of these things where I would argue that this isn't following the single principal logic right it's not very yeah it's not very solid because it's actually really doing two things right it's not only listening and processing commands from the TCP it also is interacting with the UI now we could make this we could pull that out we could do all that it just takes a lot more effort to do that so instead what I thought was a little bit nicer I I just simply uh oh my goodness I forgot I I I I I removed all my stuff I just created a quick little fake TCP thing that I could hand in that I could read a bunch of data from a file and then just pipe in what's in that file into a TCP thing and call that a day right for me that was nicer to test it just is it just is right and I could make it so that any single any single one of my outputs could be then piped into a file and I can just replay the experience from the server over and over again better experience I just don't think um I don't think you always have to follow this principle I think there's sometimes that it makes a lot of sense and again I break it all the time I I literally break this all the time for the purpose of just making something easy very simple thing this display cache only does stuff about cash right it doesn't do anything until I do this right render into I actually now this is where I break the idea of single responsibility and now actually instead of just being the cash I'll actually have the cash do the most optimized render into the window like into Vim this is totally breaking single responsibility here I'm okay with that like I'm actually I'm actually super happy about that it just it it is it makes life a thousand times easier to do this well yeah right so I'm happy sorry I had to remove those to those are from some debugging yesterday uh anyways so there you go that's kind of like my thoughts on these things which is again this is why I don't adhere to the the solid principle because I often find that in real good programming you have two choices choice number one solid is for programming you don't need it for scripting oh okay okay okay so so like so like g game engines are definitely I I get that yeah yeah yeah I mean I'm kind of script kiding this one out you know what I mean you're right the man's right today I learned scripting isn't programming today I learned making a cash rendering interface on the front of a real-time asky engine is just scripting I didn't know that I I mean I I honestly I had I had no idea personally but I mean I get it I kind of am I think I I think I fall more under the jackass category than even the script Kitty category okay just mostly an um anyway so this is my big problem with uh single responsibility is that you have two kind of trade-offs you get to make when you do this one you abstract and abstract and abstract and invert control really dependency inversion is kind of like this really falls into single responsibility principle uh you either have to like invert your dependencies or B you break some of these so that you can have locality of behavior and so I choose locality of behavior often more than I choose really nice programming and so this is a very good example right this my cash being going from a cash item into a rendering item just brought this locality of behavior really really close so I can do I can understand EX exactly what it does without like a ton of thought without a ton of hopping around and so I really really really really like that idea and sometimes I just feel like you have to do that same with the appen it this thing that's processing TCP commands probably don't need that but it's just it it creates such a tight locality of behavior that it just makes it really simple to kind of work with and so I think that you got to learn how to break that principle to get things done and the other the other side of it is that you just have to abstract right you either have to choose abstraction or potential uh or or you're going to have to do you have to choose either abstraction or locality behavior and sometimes locality Behavior makes things harder to test they make them more brittle so you kind of have to know when to abstract when not to abstract and so it's kind of a fun it's it's it there that's why I hate giving like direct or required principles because anytime you do something like that you by necessity make things harder for people it's almost like you should tell people hey go out there and just build it and they will go out there and they'll do locality of behavior and they'll do abstraction and they'll go on both sides and they'll just have this really difficult time because the first time you build something you build just horseshit like you just build bad programming and that's okay that's like that's that's step one to becoming a good programmer is building bad programs so then what's the next thing you got to do you build it another one and another one and another one and you do that for like 10 years and you'll then slowly start developing kind of like a uh an intuition into when you're supposed to break things Miami killed your voice yeah for those that don't know I was in react Miami and I had to do like a live stream and talk to like lots of people and then then there was like parties and they kept making the music loud and I really I I hate loud music for that exact reason and so I lost my voice and I'm just it's starting to come back anyways so uh so single single uh responsibility principle I don't necessarily shoot for it it's not that I don't think it's bad I just don't I don't make it a requirement because if I do that I'm going to be I'm going to be by necessity abstracting my code further and further and further right because I would have like the best I'd say the best one would be this render in two I would need some way to emit out a new data class that represents a set of changes that need to be done and then I have to have something that takes those set of changes and applies it to the window right I'd have to like just add a little little bit more just add a little bit more logic but that's just one more place in which it's going to break one more place to be wrong one more place I'm going to need the test anyways uh common pitfalls and anti patterns in this section we'll look at some common mistakes uh that violate the single uh PR responsibility principle and we'll talk about some ways to fix them we'll look at code uh for a simple bookstore invoice program as an example okay we have string name blah blah blah so we have like uh we have a a little data class right we just have an object and now let's look at uh this is kind of a for me these are always a really I mean this is very Java esque though writing of code right you can't just write an object you can't write an object you have to like write that kind of object uh this is a simple book class uh with some Fields nothing fancy I'm not making uh Fields private so you don't need to deal with Getters and Setters it' be crazy to do that now let's uh let's create the invoice class which will contain the logic for creating an invoice and calculating the total price all right we do in here we have a private book an invoice that's kind of wild that you have an invoice for a single book I'm just throwing that out there you know invoices sometimes have more than one thing on them we have book quantity oh it's just book in a quantity crazy what happen if you have more than one book uh anyways you have this discount rate taxes okay calculate total calculate total does all this stuff okay print invoice fantastic save to file let's go now this is what they're going to definitely be upset about this one is my guess uh here's some let's see uh here let's see is our invoice class it contains some Fields about three methods calculate total print invoice save file you should give yourself a second to think about what is wrong with this class design before reading the next paragraph um I actually think there's nothing wrong with this I mean this is probably not I'm not sure if this is how I would design it but this is good enough to me besides for the fact that you can only order one book and multiples of that one book little wild but besides for that I don't care about the rest of this indentation little poor yeah I'd argue that you probably you should get better indentation right let's see the first violation is the print invoice method which contains our printing logic remember how I talked about the whole remember render into you know what I mean uh which contains our printing uh Logic the uh single responsibility states that our class should only have one single respon uh reason to change and that reason should uh be change in the invoice calculation for our class so this is where I just fundamentally disagree um I don't think you need to do more than that I think it's just fine to have these kind of things on here like I I don't think you're buying or losing anything it just depends on the size and the complexity of what you're doing right like at some point you may not want that right and the problem is you can't you you lose this in these smaller examples but if this was producing HTML I'd probably want it produced elsewhere right I'd want it inside like a template because I'd want something in which I can kind of control from the outside absolutely but if I'm just making a two app would I change it up to have it printed right here very potential right very very potential right presumably you'd want to inject system out as an input like do see again but that's assuming that you want to that see this is the problem with one of the problems I have generally with with solid is that you should test everything right I have a general rule of thumb which is I test things I don't think I can get right on first try or are easily screwed up by somebody that doesn't have the like the understanding of it should you test calculate total that seems like a good place to be very easy simple love the new voice shut up uh very simple right I just wanted to be Thor so I just figured I'd go out and hurt my voice um very very simple to get this one wrong very simple for someone to come along and get it wrong anyways so okay we fix all these things because now what they want is invoice printer right you have to create a printer to invoice print which again may not be the worst idea because if you do this um if you do if you do do this you can you can you know you can pass things around it can be useful depending on the depth of your program and so you kind of have to like determine how much do you wish to have now this now see I told you they pull out sa file to now this on the other hand now you're starting to get to the point where maybe maybe not not not sure right maybe you should have maybe you can make this completely different right uh maybe you want to save this as jesson and so you just want a jesson encoder I already hate it already the problem is is that anytime you want to see where something has changed you have to hop all over the place and that's like my big contention which is locality of behavior so for me to understand how this thing works I can almost understand how the whole thing works within a single screen right we can understand every part of what's going to happen in the interactions this on the other hand I have to go find this I have to go jump to it I have to go like because it's not going to be contained within the invoice it's going to be contained somewhere else I have to be able to look at this one and go find the exact same thing like I have to go look at it but isn't that limited to smallest systems that's if you have a it's not limited to the size of the system see that's the problem is that's one of those classic like oopsy daisies people make this is not a system level thing it's a variety level problem now if I have to print Tu aoui print in vim and print to a file and print to just standard out with no uh tuy can we all agree that maybe we're going to want an abstraction on the print level yeah we would we would want we we would want an abstraction given to the print uh uh on that level if I need to create also HTML for an HTM X endpoint yeah we're going to probably want some VAR differences between them but that's different right that's very very different then you you're going to have to use interfaces you're going to want some way to kind of abstract it out that's just different and that's okay but if you only need to do one kind of printing like why are you planning on more printings like until you can prove to me so I typically I like uh Go's kind of uh Go's argument of this which is you abstract when you realize the abstraction I think that that is the better one so in other words or or or they say it this way you abstract when you discover the abstraction you don't abstract before you start you you abstract when you need it like when it's time why ises that go specifically it's just it's just one of the montras of go right because go is such a simple language it kind of forces you to um it kind of forces you to like think in very simple terms and so typically whenever you see people that write a lot of solid they start out with interfaces they start out with these these like these ideas whereas I I would say don't start off with interfaces go pure concrete until you need an interface all right open close principle this one uh requires that classes should be open for extension close to modification modification means that uh means changing the code of an existing class and extension means adding new functionality so what U this principle wants to say is we should be able to add new functionality without touching the existing code for the class this is because whatever uh whenever we modify the existing code we are taking risk of creating potential bugs well I mean adding new features you're also creating risks I'm not I'm not convinced that there's any less or more risk in that statement we should uh avoid touching the tested and reliable mostly production code if possible I mean but you add new code you you do have the exact same chance for bucks uh but how are you going to add uh new functionality without touching the class you may ask it is usually done with the help of interfaces and Abstract classes see you reach for abstraction first in this more regression risk probably yeah but then you just have more new bug risk right like you're not changing the equation if I have to add if I have to add you know a chunk of code and this intersects some level of existing code right I'm not convinced that more intersection or less intersection makes this more or likely for bugs right like if I just have to add this if I going to write a bug I'm going to write a bug there's no there's no there's no avoiding that that idea all right let's say our boss comes in and says he wants invoices to be save to databases so we search uh them easily we think uh we think okay this is an easy peasy boss yeah again I probably wouldn't even save them to file honestly I wouldn't save these to file just to begin with because I think saving to file is I mean we be the point of doing this right you have to be able to ask yourself why you'd want to do this to me this is like a test harness code you'd want to pull out and you'd only want to be able to like load up a database from file really would you if you're using squeal light you can just have your database as a file and bada bing bada boom you already have a golden we don't call them bugs we call them unexpected features yeah fortnite rocket riding was an unexpected feature uh let's see so a lazy developer uh or let's see let's see so as the lazy but clever developer for the bookstore we see a design problem and decide to refactor the code to obey the principle save invoice invoice interface save there you go so you again I'm not actually I don't actually disagree with this idea that you have to go through and you have to make uh with this like this is fine this is this is literally just the this is so if you for those that are wondering this is literally just the strategy pattern right strategy pattern is pretty much in every single language in every single way and it's very very simple all you do is have an interface with concrete implementations right fantastic right we all use this in in one way or another right there you go bada bing bada boom beautiful beautiful now our persistence logic is it is easily extendable and if our boss asks us to add another database we have two different types of databases like my sill and mongodb we can easily do that true but then now you start getting into this thing right P persistence manager that takes in an invoice persistence and a book persistence and now you start having these like aggregations of super super classes and you have to ask yourself why why are you doing all this what's the purpose right what is the purpose of adding this much classes to do that the purpose is Gillette the best a man can get yeah uh lascav substitution principle the lascav uh I've read this I always forget what this stands for uh states that the subclasses should be suitable or uh sub substitutable for their base classes this means that given that class B is a subass of Class A we should be able to pass an object of Class B to any method that expects an object of Class A and any method that should not give so I I generally just think that uh inheritance inheritance makes things hard to think about the problem with this is that anytime you have the hammer of inheritance you often have it overused it's extremely difficult to use inheritance well and I typically find that I can't use it well I want to be able to use it well every time I use it I regret using it every time you have the hammer of inheritance you end up getting nailed like I I'm sure there's some really great things for inheritance and I know some people talk about some versions of game programming inheritance is often used and it's really really great I just can never seem to get there can we stop pretending that o is hard can we just stop pretending that o is hard no one's pretending that the base idea of O is hard it's that if you have a large implementation of oo can become quite the most annoying ASP thing you've ever worked with because then you start getting into these huge problems with base class and extended classes and then you end up changing both of them to make things continue to work out forcing things work together is just a complete pain in the ass there are better ways to go about a problem and I actually have a really great example I'm just going to have to redo the example I'm going to have to think uh really hard about it uh but uh Netflix uh skunk no it's not Skunk Works it's um I knew a Skunk Works see I was I was saying the word Skunk Works I knew it was in there so great great example of something is is implementing this I've implemented this man do people want to implement things with objects uh with or with classes so much better to go flat objects and go with mutating uh mutating functions so so much better all right so anyways all right let's so lisov I'm not I'm just generally not a fan of lisof I find everything that lisof says to do is implying that you want a lot of inheritance and I just always find inheritance just no matter what ends up being just an emotionally painful experience you know what I mean because you every single time every single time every gosh dang single time right it's just it's just very painful this is going to be squares and rectangles which again this this example is entirely too simple of course oh squares and rectangles squares is just enforcing something right here right it just enforces that width and height are the same and then blah blah blah blah uh and that's that right okay super simple I get it you can do all that fantastic super super simple ex example and but that doesn't mean it's actually simple right it doesn't mean it's actually simple it doesn't actually become simple now I know that like some people are going to be like well have you used a Java standard Library like they have really great lists and all that yeah it's like okay but it's really not that okay when you start looking behind the things and you're just like wow this is this is not that great this really isn't great fake legs confirmed yeah I know fake legs confirmed we are actually going to name the podcast not hack and stash but no legs in stash uh but he didn't like the name okay uh interes uh interface segregation principle segregation means keeping things separate and the interface segregation principle is about separating the interfaces the principle states that many client specific interfaces are better than one general purpose interface this is actually a pretty good principle this is also in go which is keep your interfaces as thin as possible don't go don't like don't make it a lot right make it as small as possible right and so the bigger your interface is the more things that have to implement it the more specific your interface is which means the more the less useful your your things is so we're going to you know we can go through this right which is you could you could imagine that you could like capacity doesn't have to be related to some things right so that's like why IO writer and IO reader are so nice it's just a singular method and so implementing an IO writer is really simple you don't have to worry about like closing you don't have to worry about all the other things that probably do go with like file handle operations or with TCP endpoints or with your own bespoke you know uh what's it called uh your own bespoken coding algorithm you don't have to worry about any of that because it's just like here's a really thin tiny interface just Implement that so it's very very good so I agree with that one uh I typically agree with this one so not the eye of ins solid is pretty good I'm a classic eye enjoyer okay uh dependency inversion principle the dependency inversion principle state that our classes should depend upon interfaces or abstract classes instead of concrete classes and functions um this is also fairish go typically in go you return structs you receive interfaces typical like that's considered like a pretty good rule of thumb and so this one is not necessarily bad the dependency in version principle states that clashes depend upon interfaces yeah again I think that uh you know return structs receive interfaces very very good when you return interfaces that's a rarity in go you know every time that I've done that I've never really voiced it that well as they do and go go but it's always been kind of this intuition that that always can be really really really annoying right it's good for testing exactly that's why interfaces are considered better is because you can easily just hand in something that adheres to the interface um that's why something like structural typing can also be really nice just because you just you you you don't you can just implement the interface without like explicitly stating it so like Java you have to say what you implement whereas in go you just Implement and if you happen to structurally match you're good which I think is really nice uh if the ocp states the goal of O architecture the dip States the primary mechanism what's the ocp what's that one again Which principle is ocp what's the O in solid I think it's the one I hated open Clos principle yeah open close principle I hated that one that's like my least favorite one um uh the two principles are indeed related and we have applied this pattern before while we were discussing the open close principle we want uh our classes to be open to extension so we have to reorganize our dependencies uh to depend on interfaces instead of concrete classes our persistence manager depends uh on uh invoice persistence instead of the classes that Implement that interface the big problem with this is that you always know that an invoice persistence then the the persistence manager then needs to become abstract after a little bit of time because the persistence manager needs to be able to manage persistence a bunch of objects so then you literally have just three four layers of abstraction to save like three separate items you know that once they add a third one you have this entire experience of like okay well now we're getting too many little too many little you know uh properties we need like an array of these things so that we can abstract on it and they all need to do this and man it is just like it just keeps growing it's this ever growing uh abstraction which just takes much much longer for you to understand why something is I'm not even against abstraction when it's good conclusion in this article we started with the history of solid principles yes oh you're telling me what have we already learned okay no what's the conclusion tell me the conclusion you know what I am not a fan of saying what you're going to say say it saying what you said like I'm not a fan of that I think the conclusion should just be give give give me the meat and give it to me raw I want to thank you for taking the time to read this I suggest keep the principles when designing writing okay so here I think this should be the conclusion right here I suggest keeping these principles in mind while designing writing and refactoring your code so that your code will be much more clean extendable and testable I think that you also abstract for the idea of extension before you need extension at all and then guess what I think that you're a sad sad sad sad person okay so like my brain so just to be fair just to tell you where I'm going in my head so we've been designing this nice little game engine and I realized something okay I realized something very very uh important shall we say um I can take a little game engine and the difference between say rendering it in neovim and rendering it just say in charm with SSH it's not that much right we can actually do that I'm just going to have to make a small front end that takes in an SSH connection and writes it out to the SSH string it's actually not that hard should I pre-art planning for that to happen no I'm not going to I'm going to write the thing and do the thing you know what I can also do I can also use HTM X and serers side events right server events and actually get that thing where I actually open up a connection leave it open and send down events and I could have the exact same experience you'll be able to watch our tower defense game in the browser via HTM X or I could even upgrade it from server events into websocket events not hard to do but that's all watchable and it's all doable with the little game engine we're building but here's the kicker I'm not trying to just immediately interface out fully knowing where I was going I I did not try to make it that abstract and I think that's good I think that's a good way to go I knew in abstraction might be needed but I did not start with the abstraction instead I started with the concrete nature of it and will move on why not because when you start abstracting you start making decisions for the what the problem should be not what the problem is what the problem should be and that is truly like one of the greatest evils of software and so I refuse to abstract to what I think I need I will instead build the thing I know I need then build the thing I think I know I need next and go what's the abstraction between these two things put them together and love it and be happy with it because guess what if you can make one really good one and then you can make a second one that's really good I guarantee you by the time you've made that one and two adding the third abstraction will not actually be all that hard because you're like we've done it we've made it I've already figured it out because I needed that renderer anyway so now I have this nice little rendering layer and now I'm really now I can write the renderer that works for HTML as much as it works for charm tues right the name is the primen