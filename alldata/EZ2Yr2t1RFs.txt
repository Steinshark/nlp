so right now as you're watching this people much dumber than you are learning to code and getting Filthy Rich with their coding skills seriously one of the biggest things many of us tell ourselves is that coding is only for smart people you need to have high IQ you need to be good at mats to become a great programmer and to make money with it and this could not be more false and this is not just a coding thing either like some of the richest friends I know are literally dumb as bricks okay maybe they're not idiot but in many ways I see almost no correlation with IQ and how much money people make now sure if your goal is to become a cuttingedge computer scientist or like a competitive programmer or something like that then sure being smart is probably going to help you the thing about making money with coding which most of us are here to do is really not about your intelligence you see making money with code is just about being able to write code that produces value so here are five counterintuitive ways why it might actually help you to be more dumb when you're coding and how doing what smart people tend to do can actually hurt you and I can tell some of these things from personal experience because when I was at school I used to be the smart kid I did really well at school right but when it comes to learning coding I struggled for a long time because I was approaching it like a smart person would rather than doing what a dumb person might do that would have actually got better results much much faster so let's get into the first reason a dumb programmer who builds something will be more successful than a smart programmer who just studies and never gets his hand dirty so this took me a very long time to learn like way longer than it should have programming is not a science programming is a trade computer science is a science and sure programming is in certain ways based on computer science right but programming itself is a trade it is a craft it is a skill that you use to build something when you approach programming as a scientist you're actually priming your brain to learn programming in a completely the wrong way because when you study things like at school like physics chemistry or computer science way you approaching them is by trying to learn theoretical topics you're trying to learn the theory of how some algorithms work you're trying to learn the theory of how your computer is architecture and things like this and don't get me wrong all of these are super interesting things and in the early days of this channel I also talked a lot about learning computer science as well but what took me a while to understand and I'm lucky I Now understand this is that learning programming and learning computer science are almost entirely different topics when you're learning programming sure it's useful to know the foundations of computer science or the basics of computer architecture but beyond that it will actually not help you be a better programming because programming is simply about having a grasp of the fundamental logic of how programming works and combine then with other people's code through libraries and modules and by using Frameworks to build actual real things or to build projects essentially I was just speaking to a friend of mine who has a computer science degree and he was telling me just how little his computer science degree actually helped him actually program many people who go through these degrees they come out with all this theoretical knowledge but they don't come out with any knowledge about how to actually build something real they can't even build a basic website from start to finish so if you want to learn programming fast it's much better for you to approach it like a dump person who just picks up some Basics and who's too bored to like learn about the complicated details and just starts building things and learns the rest as they go the more I program the more I tend to program like a dumb person where I just take the laziest approach possible which is getting stuff from jbt and like that's how we literally coded an entire startup so the first reason is that programming is a trade not a science the second way that being dumb can actually help you is that what small people tend to do is that because they want to like engage their brains they want to build something cool something complex something sophisticated because that like engages their intellectual curiosity what they intend to do is write code that is very complex that looks very sophisticated using all these complicated techniques and all these kind of things but what I've actually learned now programming in the real world for like two and a half years is that most of the time it's better to write simple code like like when you write simple code the code will be easy to read number one so when you go back to it later which you will end up doing if you a serious project it will be easier for you to understand what you did in the first place number two it will take you less time to code up that thing because you not trying to do something too complicated number three the thing with programming in the real world is that most of the things you build won't actually be end up being used at all so for example for our startup we build so many features so many things that we might have spent like two weeks on them but then at the end we just ended up scrapping them because they didn't really work at the end of the day so given that like 90% of the code that you write won't actually end up being used in the first place you might as well start with very simple code and then only if that code ends up being really important then you can go out making more complex then you can go and optimize it and all these kind of things but what smart people tend to do is they want to make things perfect right from the start by making things very complex when actually in many cases it's better to just start very simple by very simple code that just works like the MVP approach of coding this is how dumb people tend to do it and in fact it will probably make you a better and more efficient programmer a lot of time so the next thing so there's a quote that I remember and I'm sort of paraphrasing this you aren't willing to risk anything you won't win anything and this is related to risk tolerance and how this difference between dumb and smart people now I'm actually a super risk adverse person and I've taken me a long time to figure out why that is but a lot of it is that at school I was very successful I was always like getting good grades and like everyone tended to have very high expectations a for me so when it comes to doing anything in my life I sort of have this fear of failure because I know everyone expects me to do really well so that actually leads me to take much less risks than if you imagine someone who perhaps doesn't have these expectations they'll be more likely and more willing to take on risks and the thing is that if you're risk averse you can do well in life but to do really well in life you sort of need to be willing to take risk and this is another thing that's taking me a long time to learn to just be willing to take chances like for example I left my full-time job to pursue this YouTube business as well as my tech startup full-time and it was an absolutely terrifying decision it was the kind of decision where if it goes wrong A lot of people are going to be very disappointed in me or at least that's how I felt like but it's only once I took that leap once I took that risk that I really started to do well in life now of course things things could also go wrong and that is exactly why many smart people or people who sort of have these expectations are very risk adverse so they don't end up up making as much money they don't end up getting the real returns because the real returns always go to those people who are willing to take risks if you're willing to do that over time you'll probably end up getting much higher returns because you're willing to take chances that people who are more risk averse that tend to be like what conventionally smart people are are not willing to take this also leads us to the next reason of perfectionism so another quote that I like is perfect is the enemy of progress or the death of progress or something like that and this is especially a bane of many programmers what many programmers or like smart people who get into coding tend to feel like is that or I need to learn everything before I do something or I'm not good enough yet to apply for jobs I need to build this project that is super complex I need to have all this knowledge so I can be totally ready for interviews and like the thing with programming is that you're never really ready if there's anything that I've learned is that you'll never learn everything about programming there's always more Frameworks coming out always more Concepts you can learn about languages like python is my main language I still don't know all of the details about python like how crazy is that so what many people do is they get into this Loop of like feeling they need to be perfect before they can try when actually what you should do and probably what a perhaps a conventionally dumber person would do is to try before they think they're ready because they are like too lazy to even study everything so they just end up applying like and hoping for the best and if you do that enough times you probably find that you'll be more successful than someone who just tries to be perfect and hence never even ends up trying in the school system what you rewarded for is perfection when you're doing a test at school like you're expected to get everything right right you can directly see how being imperfect is like lowering your rates and things like that but the real shame about the system is that in the real world it doesn't usually work like that you don't usually need to be perfect you almost never need to be perfect like the videos I make on this channel are not perfect by any means it's probably mistake when we release our startup like of course it could be better but if you try to make everything perfect you'll never end up trying and that is the death of progress and this brings us to the last point so the thing about the most successful people I know in life that they all have one thing in common the one thing they have in common is that they have all sort of forged their own path so in life the school system and the system that we all go through is sort of like a factory it's a factory that is making us all be the same and in the big picture that is probably smart from a societal perspective like we just make everyone as similar as possible it's easier to control us is easier to make us into obedient employees to make us follow the rules and things like this and that can get you an okay life that can get you a normal life but if you really want to do well if you really want to get rich what you will have to do at some point is be willing to be different from what we're conditioned to be to stand out from the crowd this can mean starting the business instead of just sticking at your job forever and by the way I always say you should start with getting a job if you're looking to get into Tech it's the best way to learn you can start earning while you're learning and while having time to build something else on the side but if you really want to do well unless you happen to work for the absolute best companies if you really want to be exceptional you want to be working on something else on the side which requires you to not stick to the system to craft your own path at some point but smart people will do is they will just stick to the system because the system rewards the smart person kind Behavior where you study really hard you do really well a test and that reinforces them to keep behaving as if we're told to do in the system and this can also apply to you if you're just looking to work a 9-to-5 job your entire life many Studies have shown that if you want to maximize your income in your career you want to be switching jobs every 2 years and that sort of requires you to go against the grain because when you're in the system of Any Given company they are all incentivized to keep you there to keep you just content with what you have and not have you look elsewhere for perhaps better pay at different companies but really the biggest pay Rises will come not from promotions within your company but going against the grain and jumping Shi to different companies every now and then and this is how you can really build your income throughout your career when it comes to learning the code you can follow the system and go to a university get a computer science degree that's going to take you like four year and put you like hundred of thousands of dollars in depth or you can go online learn the code with an online boot camp like my courses down below if you want or even just watch YouTube videos and go build something and you're going to learn the code in like a few months or like six months or something like that and start earning and get your first job much faster than you could have if you just stucked the system so I'm not saying that the system doesn't work you can't get a decent life with it but usually again the real returns go to those who are willing to sort of reject the system at least a little bit in like strategic ways to do certain things differently to what most people do usually the kind of people who tradition Ally smart are more likely to just stick to the system so now that you hopefully believe that literally anyone can make it with coding and making money with coding is very different from writing the best code or writing the most complex code or being the smartest programmer or anything like that a very realistic goal that anyone should be able to set in their career no matter where you're from is $110,000 a month that can come from a job it can come from a business it can come from all kinds of different ways and so if you now want to learn how to do that and what is the fastest path to get there you can watch this video right where where we continue from this to give you the four different ways that you can use coding to make $10,000 a month even if you don't have a degree or any previous experience so go watch that video next