time to do some more coding and this time we're going to go down the neovim L rabbit hole and explore that cuz I've recently got really into neovim as my main editor all because I saw someone at a conference using neovim as part of their talk the talk wasn't on neovim but they were looking for a file on their laptop and they opened up neovim and they did something like this and the thing that caught my eye was not the file browser but the speed with which they could preview the files as they flipped through and I thought that's cool how on Earth is vim running that fast I've never seen an editor preview files and syntax highlight them that quickly what is this Witchcraft and it turns out it's a combination of neovim and Telescope which is the file browsing window you're seeing and telescopes really easy to extend so let's have some fun with that the thing I want to do is write a Docker browser for neovim and the great thing about this is not only is it fair easy because we can piggyback most of the code off of telescope's code base but it'll pretty much work for any command line tool that can spit out Json so you can reuse this recipe for all kinds of command browsery things but Docker is the one we're going with today I've got myself an empty directory and we're going to set ourselves up for creating a neovim extension by saying let's create a directory called lure subdirectory called telescope Docker and inside that we will edit a file called a nit DOL so the way you do a module in lure neovim world is you create an object called M doesn't have to be called M but by convention it's called M for module and you return it and then in the middle your job is to stick I don't know uh interesting functions onto M and then when they get returned the user can invoke them that's all it takes that's all it takes and then when that module gets returned a user will be able to say something like M show Docker images and it will run let's just check that's going to work so I'm going to print hello when you call that function and I'm going to leave that in just for development time so that when I write this file and then Source it it will instantly run my one function and show that things are working as I'd hope okay so all I have to do is write and source and I get to see my changes that's going to quickly drive me insane so before we get really stuck in let me add a quick key binding I'm going to map my local leader key followed by W to write this file carriage return Source this file carriage return and with that if I do lead a w it resources the whole thing and runs it that's going to save me a lot of development time okay that lets us get stuck in with actually writing a telescope plugin so I'm going to start by importing the pickers from telescope. Pickers and if I change this function to create a new picker I'm going to give it some configuration options which we'll go into and then I'm going to call find on that new object and that will pop up a telescope picker with hopefully all the things I've configured inside great how do I configure that um it's takes two options the first is when you invoke a function from telescope you get passed in some options and you can look at them decide what to do with them play around with them override them etc etc and then you're expected to just pass them through once you're ready uh we're not going to do anything with them in this video so I'm just going to pass them through and where it gets interesting for us is this second thing which configures how our picker actually works so a simple one consist of a finder something that finds the entri to display and a sorter which both sorts and filters them as the user types things to narrow down our sorter is actually pretty easy the user expected to pre-configure a sorter in their config when they first installed telescope and we are expected unless we've got a really good reason to just reuse that so we want to have a look at the config and say give me the generic sorter that they've set up pass those options through and that's a sort of happy where do we get the config from we get it from telescope. config Dov values and then a finder the simplest possible finder it comes from finders do new table and that also gets some configuration options let me import that finder and a new table you can just give it a table of things to display in the simplest possible case so let's say yes no magic eight ball maybe uh perhaps that should work and make sure I'm closing that off correctly if I run that what do I get yeah there you go that is your absolute Bare Bones telescope plugin cool okay that is a basic telescope setup the first thing I want to change is at the moment I'm just dealing with a list of strings I'd like to deal with something much richer that has metadata in individual Fields so instead of just calling new table with a list I'm going to call it with an object that gets some results like that I'm going to change these results to from a string to a more structured object so let's say the name is that same string and then there's a value which can be an array uh something like that okay so that's more complicated if I run it suddenly disappears because if you've got something more complicated than a string you need to teach telescope how to display it as a string with something called an entry maker which is a function which is going to take each individual entry in that list and display and return um an object that teaches telescope how to display it so you get that entry and you say what do I display I'm going to display the entry. name and the other thing you need is a sorting filtering key which is often exactly the same as what the user sees displayed but not always as we will see later for now our sorting filtering key called ordinal will be exactly the same entry. name that looks right let's see if that works yeah so far doesn't look more interesting but by the time we write the preview for the right hand side you'll see that we're getting more structured data so let's get stuck into that I will import the previewers module from telescope. previewers and then I'll go down there and add in a previewer which comes from the previewers module and it's a new buffer preview uh I want which is something that's going to give me a temporary buffer to write some stuff to and I'm going to write my interesting data to how do you configure a new buffer previewer the first thing the easy thing is you give it a title and the title can be Docker images something uh no it's an individual entry so let's call it Docker image details right and the second is you need a function with which C is called Define preview and that takes a self object and the individual entry from our results list and it's this function's job to grab hold of the buffer that we've been given from our new buffer previewer and write something interesting into it so let's start with the simplest possible case for that we will call Vim do api. envm buff there it is buff set lines with the buffer number which from spelunking the code base I found out is under self. state. buffer where do we want to write the data in between the lines zero and zero so right at the top are we being lenient or strict about that range I honestly don't care for this case so uh we can say true or false and then we need a list of lines to stick in so hello uh everyone yeah that'll do right hope hopefully with a bit of luck that will work yeah hello everyone on the right there okay so let's make this preview a bit more fancy before we get into the actual Docker command because I'm going to be glad I did by the time we get to the complexities of docker's data structures instead of doing fixed characters let's just preview that entry that we've got from the results list first so if I call Vim do inspect on that entry I should get something interesting let me run that error replacement string item contains new lines yes that's because Vim inspect gives you a pretty printed version of the entry with new line characters in and Vim buff set lines doesn't like that so I will need to call something like Vim dosit to split that up into individual lines breaking on the new line character something like that that I'm getting some kind of com type checking error cannot assign list of strings to string yes okay so Vim split returns a list and now I've got a nested list in here so I could delete the outer list but for now I think I'll do Vim table flatten if I wrap that up so that's going to flatten the list into a single list and if I run that that yeah okay that's working so I get the display the index from the table and the ordinal right you can see how we'd be able to generate some more structured data and display a preview of it before we move on you may notice that we are missing we've got the display the index and the ordinal but we're missing this um value array that's because we should have added one more thing to our entry maker which is something that passes the raw value across untouched precisely for this reason for the later viewing in the previewer so I'm going to do that I'm just going to pass an extra value which is just the untouched entry and if I rerun that now I've got my value in there I could probably get rid of this outer stuff why don't I um why don't I change the entry to entry. Value that's what I want okay so I got some text and the data itself shall I do one more thing before we move on yeah I'm going to indulge in one more fun thing um I found this recently so in previewers do utils there is this very useful utility called highlight so I do utils do highlighter I call it with that same buffer number and I tell it what file format I'd like my preview buffer to be and if I say markdown and then I add in some markdown here so um triple back primes lure and then close those triple back primes there and if I've got that right yeah now we get syntax highlighting and I can have a lot of fun with that once um we start adding in the docker details so that'll be cool right time to deal with Docker so instead of calling new table which just creates a static table we are going to do new async job and that takes a slightly different set of options still takes the same entry maker but instead of static results you want to give it a command generator and that is a function which is going to return the command line arguments you want easy so we will return a list of arguments Docker will have to be the first one that's the command followed by the flags is it images I think it is format Json something like that um I'm missing out a comma will that work no hasn't worked yet doesn't surprise me but you see it's got 13 out of 13 displaying so we've definitely got some data coming back from that command we're just not displaying it right let's have a quick look at debugging this CU it's all gone too well so far so I'm going to say let's get a logger from require plenary do log if you've installed telescope plenary is a dependency so you'll have that too log uh plenary dolog new and I will say log. level equals debug and then down here we're getting some entries we're getting 13 entries so why don't we log. debug that entry and see we've got if I run that still nothing on there but if I call colon messages and go to the bottom yeah okay so we are getting these strings back from Docker we're in business that's a string formatted as Jason so no wonder entry. name isn't there because you can't call name on a string and expect something sensible so why don't I say local variable passed is vim doj as. decode built-in Json decoder on the entry and we will log oh let's log both paed let's have a look at that still doesn't show anything but messages will there you go more structured object there is an ID there's a repository there's a tag let's use repository instead of name so entry. reposit there and there now if I run it still doesn't work because I've done entry instead of paed there we go yeah there we go a Docker browser that's not bad that's not bad should we tidy it up a bit yeah let's get rid of hello everyone and why don't we instead of saying hello everyone why don't we start with the ID there so we will do um this is markdown so title of entry. value. might do it yeah there you go obviously your highlighting will vary depending on how you've configured markdown in your editor but that's the basics what else can we do with this um let me show you what ordinal actually does because that's a bit mysterious at first so so oh we need a nil check yeah Jason decoding might return nil so let's be good citizens and say if paed actually returns something then display it yeah okay um ordinal ordinal is it's like this C string here but it can be a bit more complex so if I wanted to search among the tags as well but not display the tag in this main preview if I said ordinal was pa. repository colon. tag if I do that it looks exactly the same but now I can search for things with the tag latest and they don't display but they're secretly being searched through and that's the point of ordinal you can search something slightly richer than what you're displaying good I think that's fun I think that's a fairly easy way to get a structured data browser built straight into your editor and I think if you have a look at this apart from some formatting code which is specific the only thing that really makes this a Docker image browser is this command generator here if I called a different Docker function I'd be able to create another previewer that did other stuff and I think you can pretty quickly see how we could refactor this into a number of different Pickers that would show all the different data that Docker walls feed you I think you can also see that as long as you've got a command line tool that can spit its results out as Json you could do a telescope picker for anything that supports fairly easily so I'm going to leave the docker side of this to one side for now and leave adding features as an exercise to the reader I think there's one more fun thing we can add that really shows you the ease with which you can create these Pickers which is if I call this and I select Alpine and hit return the default behavior of telescope is to try and open Alpine as a new buffer which is not really what I want I'd like to do something fancier than that so let's add in that code I'll go back here I'm going to need two more modules to make this work I'm going to need actions uh like that and I'll also need action state from telescope. actions and telescope. action State and I'll go down here and add in another key to my Pickers configuration that says attach mappings so I want to attach different key maps to do different things with a function that gets the prompt buffer number which will come in handy does some stuff maybe adds new actions maybe replaces default actions and eventually returns true to say it's happy to continue right what actions do I want to attach I'd like to say take the actions get me the default and replace it so replace the default when you hit return thing with a new function of my choosing uh what does that need to do it needs to say before we do anything else let's capture the user's selection from uh action state do get selected entry and why don't we just log that to the screen selected selection that might be interesting for now so I'll run that I'll select Alpine and nothing happens which is good CU I've replaced the default action what did I get in messages I got selected and it's my entry so display value in there okay uh the other thing I don't like is I should probably close this existing window when I select so let's say actions. close the prompt buffer so I select Alpine yeah and that closes now I can do something interesting with that selection so what I'd like to do is create a command that Vim is going to run and that command will be edit a pretend buffer this is a nice feature in Vim you can say edit a terminal and it's normally you would give it a shell there and say edit term. bash and you get a bash terminal instead I'm going to say edit a Docker terminal cool Docker with the command run uh an interactive TTY terminal and selection. value. Report repository should give us the name of the image that looks all right I've missed a comma I think before I actually try and run that I'm going to debug that too let's go command so let's run that select Alpine ah and you can see that down there let's go edit term Docker run it Alpine yes so let's call that as a Vim command and hopefully if I run that and choose Alpine invalid key one yes I'm giving Vim do command a table I should be giving it a string so I'm going to have to call Vim do function. jooin though that list with um spaces let's try that Alpine look at that I've got my Docker image running in vim and I can prove that by calling you name minus a I'm on OSX it thinks it's Linux because I'm really running a terminal attached to an Alpine Docker image inside near of and I think that's a lot of fun hopefully you do too and I think you could take that in loads of different directions as I said you could run more Docker image commands you could run more Docker commands you could run anything that spits out Json and you can start replacing the actions with whatever you fancy doing but for now that will do hopefully you've enjoyed this and you've learned something I'll stick the code up on GitHub and I might extend a bit more as we go in the meantime if you like this please click like if lots of people like it we'll do more of them tell me what You' like to see if you want to learn more about neovim I recently did a podcast interview with TJ Dev dedicated to NE of him and that was a lot of fun and very interesting a link to that should be showing up somewhere in the browser window right now make sure you're subscribed for the next episode and I'll see you soon thanks for watching