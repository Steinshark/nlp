this week's episode of developer voices kind of unifies a few of the biggest reasons that people get into programming in the first place you've got a love of learning new things you've got the fun of solving puzzles and Technical challenges and you've also got the very real need to find a good job I've always considered that we're very lucky in this profession that we can combine those three things fairly successfully so this week we're going to take a peek into the world of competitive coding solving algorithmic challenges against the clock you can do it solo you can do it as a team sport and while you're definitely going to pick up a few very useful tips for gaming programming interviews we're mostly talking about the game for the game's sake how can we play with computers how can we play better and where's the most fun to be had joining me to discuss it is a veteran of the competitive coding world and these days a coach to younger teams Matisse ML and I think by the end of this he'll have you convinced that he could Ace any programming interview that's based on algorithmic tests that that's probably not the right way to interview new candidates but we're gonna carry on doing it anyway and most of all that if we focus too much on coding to get the job we'll be missing out on a whole lot of fun so let's get into it I'm your host Chris Jenkins this is developer voices and today's voice is mati samel [Music] with me today coming live from France it's Matisse ml Matisse how you doing I'm doing great how about you I'm very well yes enjoying the warm weather we seem to be unusually having on the continent yeah same we have a lot of heat right now but I think it's more bearable than yours yeah we over in England we Buckle quickly under the hot weather but enough weather um I I got you I got you in because you've got such a varied CV there are like a million and one things we could talk about we're going to get onto the actual topic but you've been like head of cyber security for capgemini you've done talks on Quantum Computing you've um give me your history and try and give me a unifying thread of what you're interested in yes um well the unifying thread I think is pretty simple is I'm very Tech curious so anything that yeah that makes me think wow this this is an interesting topic I just get into it and sometimes I make it into a job but um yeah I've always been fond of anything especially related to competition I'm like I'm not doing that like to beat others and show myself that I'm better than others but um just the fact that I have you know this Spirit of competition and uh actually playfulness and so um yeah I worked in AI my first my first job was in in AI then I moved to um cyber security yes that's one thing I've been exploring for a long time since I was in high school I think and um now I'm more on the I'd say technical Recruitment and competitive programming sites um which is also competitive programming I think we're going to talk about that into more detail but uh uh I've been enjoying that for like 10 years I'd say I can see I can say like a competitive thing in in AI especially like game based air As Natural competition there cyber security is kind of uh uh geek's War between two different sides but the the world I really have no experience of even though it's obviously competitive is uh competitive coding yeah so other than you know um those algorithms you were supposed to learn at University do those really fast that's that's the whole of my knowledge of it to take me through what it's what it's what it's like to be on a competitive coding team so um competitive programming if um I think the most um common experience people will have will be um in some websites like code Wars code forces code in-game I work for coding game by the way but I enjoy a lot of our competitors as well um and also you have Advent of code which by some people is played competitively uh like myself I enjoy doing that as fast as I can um so yeah the the principle is really simple actually it's the format varies but um you have maybe two or five or 12 hours to solve a set of problems as fast as you can and as many problems as you can so usually you will have like gradually increasing difficulties and um yeah you you are ranked based on the time and the number of problems you solve basically Advent of code I know right as like the thing I love about that is the programming puzzles right and sometimes it takes me most of the day to finally crack it and then you look at the leaderboard and there's somebody who got up at 3am and cracked it within two minutes yeah I I am one of those people how do you become a person like I'm I'm not sure I'm ever going to get up at 3am and do knapsack algorithms in three minutes but if I wanted to would I get to that level um I'd say it's uh I'm not really sure actually how how you like really get into that I'm um just the idea of um you know getting the best out of what I can do and really trying trying my best to yeah to crack one puzzle as fast as I can and get really get my brains going um is one thing that keeps me going in the kind of training even though I don't really consider um anything I do being training it's more like I play and over time I get better at doing that um so you know there's not really like two phases like one competition and one practice where I just do um so something really specific over and over but um how do you get um into that I think it's just like oh I played that it felt good I mean let's do another one next week or something and that's uh that's it you just keep playing the game over and over and eventually get better yeah that's that's about it well you at some point you don't and it will usually come very fast you'll realize that you need to have like Theory and you need to read some stuff and like read some books or papers or whatever to actually get what you need and learn what you need but it's mostly practicing and so mostly playing and it's it's also a very good thing because I I don't think I would have like The Willpower to do like 12 hours of practicing before any contest or anything uh so my training is just more competing which is uh very efficient for me because I I really love competing and not really training I guess you're not trying to get to the very top of the podium you just love being in the game yeah that's that's about it and over time you'll after doing like sorry after doing like all of them you'll get better innovatively so even not even if I'm not trying I'll I'll get better and better rankings and so that's that's also very satisfying to to get that what's it what's the actual experience like because I my my impression of these things is you read a puzzle and it's dressed up in some fancy way but eventually the penny drops and you realize oh this is the a star algorithm and then you try and remember how to implement a star and is it like that yeah that's it depends some I'd say the easier competitions are like this so they disguise an algorithm that's exactly as it's designed like in any book or something so you just need to find which which one to apply to whatever problem you need but for more advanced stuff it's more like okay this um right it's really it really depends but it's usually a way of applying a family of algorithms and you need to actually create your own algorithm so I'm not really sure I have an easy example but one one very classic one is dynamic programming which is basically one way of modeling mathematically an a problem and this modeling is really not standard uh based on different problems the way of um like actually Computing the solution based on the formulas you create yeah it's it's easy it's always the same but creating those and um actually cracking that's that little thing that allows you to detect what exactly you need to do is is actually the heart of the problem and usually it's on the more difficult side in when when you're playing easier competitions it's either algorithms so usually it's pretty simple algorithms like Yeah you mentioned like uh graph path search or a shortest path and things like this or it's uh something we call speed coding which is very very simple exercises that only need implementation basically so the a good example for that would be like the first 5 to 10 days of Advent of code which usually you don't need to know a lot of algorithms to solve yeah yeah you you can sort of mentally Brute Force those ones right and then they gradually ramp up the difficulty to where you need to be up to speed with some of the latest papers sometimes yeah that's that's about it yes and so sometimes you immediately know what you need to know what you need to do and this is what you actually Implement so sometimes it's it's pretty complicated I've I've had like speed coding exercises with like a hundred lines of python for example it doesn't mean that it's very like easy to do and very fast but the algorithm it's pretty simple and you could do that by hand and some other times yes you need to like identify actually the algorithm that's hiding behind that and this requires a bit more knowledge and oftentimes if you are competing it also requires knowing a few tricks to code them faster so for example for Advent of code in the last like three editions I've played I haven't coded a single graph algorithm because I'm using libraries I'm I'm so I'm defining my graphs I'm using network X in Python which is super efficient for that and yeah I'm just modeling my stuff and let the algorithms code it by other people better than me do the job so you'll these days you're going into event of code which for those that don't know is like 25 24 daily programming puzzles leading up to Christmas all right these days you're going into that with your pre-prepared and tailored Library I I have a template it's it's not that big it's like 50 lines long but it does um three very important things it's so I have in the first lines of the code I have Imports of the most common stuff and I have a few defined functions for example one that uh parses a list of numbers that are so I I give that function a string uh containing numbers separated by spaces and it gives me back a list containing these integers um so this this kind of easy functions also like I Define constants for for example the four directions so up right down and left so with the Deltas uh in each Direction stuff like this that's I'm pretty sure I'm gonna have to use in that competition so this is the first thing um pre pre-imported and prepared code also I have um a part with my cookie my session cookie on the website which allows me to do download the problem statement uh no not really the problem statement because I read it on the web but download automatically the input for that day yeah put that in a string and then I can process this process it instantly instead of doing what everybody normal does which is downloading the inputs you're doing that in a file opening the file reading that's it it loses you even if you code fast this can lose you a minute and a minute is like way too much in that way and that's an easy gain of uh time other people do way more extreme stuff to gain like five seconds I don't go to these lengths but uh yeah I think I'm pretty optimized and of course the third part of my template does the submitting of the result and so I automated it to that degree sorry you've automated it to that degree just yeah everything that's done every day or that's I have to do frequently I have it prepared so I can so I don't lose time actually doing the implementation of whatever I need to do you have a similar thing for like so there's the ICPC which is the big International coding contest can you one in there with your pre-prepared library um um yes and no so the ICPC has much different rules so first of all it's a student only okay um so I used to play I have played uh twice in the ICPC Regional qualifiers it's not really that impressive because it's open to everybody uh the first time I played actually was uh absolutely terrible uh we weren't prepared we got the news that we our team had their spots we got the news five days before and it was in another country so we it was a lot of stuff to prepare even on Logistics so we weren't really prepared and in the team we were two French guys and one German guy so language barrier um I was coding in Python my fellow French friend was coding in C plus plus and the German guy was in Java so yeah that's a lot of incompatibility and inefficiencies especially combined with not training a lot but yeah as I mentioned uh it's played in teams of three yeah I think it's yeah it's pretty much the only no no it's not the only but it's it's one of the rare competitions where you play in teams another classic example would be a Google hash code which rest in peace because it's it's been shut down by Google but yeah there's not a lot of competitive programming played in teams this one is also very specific because you have five hours to solve between 12 and 15 problems and you don't have internet access and you only have one computer okay um GPT though right but but one thing you're allowed and the only external resource that you're allowed to have is one notebook that's I think you're allowed 25 pages of whatever you want so usually you will have most of the classic algorithms that you're not like coding by heart so a few like string matching algorithms that you use in very specific cases and stuff like this yeah um it's actually you don't you usually don't really need this notebook it's only for safety I've used it once it was for a convex Hull algorithm which I think we would have gotten but uh it's there's much more comfort in having that prepared in your notebook some themes some teams will um have their template and copy that at the beginning of the contest because you start on a computer that's uh basically brand new like it's a there's a fresh new install so you don't have any files and you are only allowed to touch the computer when the contest starts so it's basically you have to choose um either you start coding immediately or you have someone start implementing your whole um template so like 300 lines of prepared functions and stuff to get faster later right but usually the teams will not do that I instantly thinking I would lose a lot of time to just setting up my favorite editor yeah it's uh so first yeah you're you're allowed to ask for any specific IDE you want in that content which is good but usually it's even um even in that case we usually use very simple stuff like Sublime Text or vs code because um there's three teammates and it's not really common to have all three teammates use the same IDE in their daily life so usually we pick the more simple and common stuff so yeah that's that's it but yeah you have a practice uh day before so you you have you have a shorter contest on the day before which is um two hours and you are in the same condition so you have like your notebook you have um the same blank computer that allows you to understand how to get started also make a few submissions on the on the judge website to make sure that everything's working and stuff and so the and this is the only part of the contest where the contestants are allowed to chat with their coaches on the real contest we are in another building so there is actually like a coach on court yeah for the first day and now nowadays I'm a coach so I'm not a student anymore so I've been coaching my former team uh so it's well former team actually it's my my University where I I gradu graduated from I coach them still so the team changes basically every year because once people graduate they can't be in the team anymore and so yeah it's it's uh very nice to have like fresh blood people to work with and teach them how to get better it's also very frustrating because sometimes you lose like a great element uh one of the the best students graduates or goes into academic exchange because we we have a lot of Erasmus exchange programs right and so they leave oftentimes it they leave for the last year so actually we we have a student empty till fourth year and all the fifth year students leave to go to go abroad and sometimes compete in their own universities you know this is off topic but I'm thinking of all those like Disney movies where a coach comes in and coaches the team to great success and they've got loads of those for every sport right and this is a missing Gap in the Disney stockpile yeah we should make a movie about competitive programming I think yeah yeah it's got all those feel good success stories you want yeah on the very nice uh audience but I think it will work I love Niche audiences we live in them right okay so but okay how does this actually play out if you've got a team of three you said it was 12 to 15 questions three people sit down and they don't they're not even using the same programming language what do you do do you race through the list of questions and the Java guy says I'll have that one and that one and that one so well um first of all having three different languages is not really a good idea in a team it was just because we made our team last minute uh usually we will try to have people on the same language and also people speaking the same language because we also have incoming exchange students and so usually we'll have one team that speaks only in English um and so you so the problems are given to you in in random order so you don't know which ones are easier so the first step is to actually read through all of them and find out which one or two are the easiest so we call them ad hoc problems which um will be the ones you really need to start coding first because there's also a time element basically your score is you are ranked the team is ranked based on the number of problems they solved so usually the most like the bulk of the competition solves between two and five problems when you start getting into six seven eight nine it's really like the top 20 or something so most of the teams will not solve half the problems and um you really need to get started fast because it's um yeah the rule is pretty weird to explain but there's in case of a tie so for example other teams that solved four problems uh they will be ranked based on a Time penalty which is basically you take the sum of the times of submissions of the problems so you have solved one problem after five minutes another after 20 minutes that's a 25 minute penalty and so you you have to get fast especially on the first problems and you have to submit them in the first minutes so the first part is actually searching very fast so you split usually 12 problems uh three people it's perfect you have four problems each and uh you try to find the easiest problem in the problem set basically yeah and one person will actually get started coding on that and submitting that as fast as as they can usually it takes the first correct submission takes maybe one or two minutes max so from from the gate opening yes jeez okay that's really far I mean they must be going a break next speed do you get people drilling their typing speed as well yeah there's um a war up yeah I I've known some people who've like who warmed up actually before their contest they do like typing stuff they're only typing words I think they they should do that with code but um just to get their fingers warm I I don't really do that kind of exercises I think same it's like a lot of effort to gain like six seconds or something it's I'm not really into that but some some people really need also to get in in that spirit so like um get focused and stuff so so how far up the rankings did you get with this obviously very into it but fairly casual attitude um so in the European qualifiers with uh uh my my best uh so in the European Championship basically um which in the southwest of Europe is towards work so s-w-e-r-c which is a qualifier for the World Finals the World Finals there's like 100 teams in in Southwestern Europe we'll usually have like three or four of these spots uh many of those come from Russia many of the world finalists but um in the European qualifiers my uh the Euro last year I played uh there were I think 120 teams and we ended up 24th so pretty happy with the result and well I've um it's been like five years now um but this year I've been also playing Advent of code competitively the thing is um they get released at midnight eastern time in the US which is 6 a.m here in France and um I'm not waking up waking up at 6 a.m every morning that's not something I'm doing in December so um I cannot compete on the global on the global leaderboards because to avoid um cheating and stuff they time everybody starting from the release of the problem which is perfectly normal uh but yeah I can't compete because people usually completed in like 5 to 15 minutes usually most of the days um so I cannot play it whenever I wake up so what I'm what I've been doing was having like a virtual timer which is a Chrome extension that times the moment between the moment I open a problem statement until the moment I finally solve the problem and so it allows me to basically know my ranking if I were playing at 6am every day right um and yeah this year I've been uh pretty successful I I'm pretty sure if I was in the top 100 uh let me search I I think I have my actual virtual ranking um because these are I've I mean I've played Advent of code seriously some years casually others and but then then Spades of the top ranked players just astonish me yeah there are people solving it before I've finished reading the problem statement I just checked if I were playing uh normally I would have been 46 on the global leaderboard really this recent year yeah he's a huge number of competitors for Advent of code yeah I've been uh let me check my best ranking was I think yeah one one day I was the 14th globally from French the 14th took me yeah took me six minutes uh to solve both parts um if if you want to compete with me at home it was on day 18 day 18 of 22. yeah oh sorry it took me eight minutes that's six minutes between Parts one and two okay I'm gonna link to that particular problem in the show notes if you have a look at that as a listener I'm sure you'll see quite how fast that is because they get harder and harder as the as the clock goes on so day 18 is a lot harder right um well that one I think it must have been very easy because day 19 took me an hour and 19 minutes very easy as relative depending on your skill set this is huge fun but weirdly for you it seems to have translated into a spot in your career right yeah I've been um so yeah there's not a lot of work in uh competitive programming or cyber security for that matter because I've been I've been enjoying that a lot in the past as well there's not really a lot of um work I mean people want you to build websites or apps to make money they don't want you to like yeah great you've been 50th place and the Advent of course wow that's well we are really gonna earn money from that right yeah so yeah it's um but I've managed to find some interesting stuff so for a competitive programming my current job I kind of do that I also now I'm an independent consultant and so I do work with one of the biggest providers of coding contests in Europe which is called isograd and they what especially in France they make like most of the big competitions and so now I'm um I I create the problems and I proofread those from other uh redactors so yeah I I'm kind of on the other side I was first a participant then a coach and now I'm actually in the creators um actually also participated in um finals of Google code Jam as a volunteer because I was interning at Google the first year code Jam was in Dublin and I was there in in Dublin and when they requested for volunteers I was of course I was in so that was also a nice experience um and also in cyber security as well I though there weren't any jobs in competitive cyber security so I made mine I went to so I I we were in charge of uh so with my other freelancer with my brother we were in charge of organizing a big contest for capgemini in France and we met the director of cyber security and we were like let's do more stuff together and so I actually ended up working there for two years and one of my jobs was to create the first semi-professional CTF team so competitive cyber security teams uh so I had seven people in the team plus me um who were basically paid one day a week to train and compete in public events to yeah to basically get the name of the company out and be like uh it's also good employer branding because now students because it's played a lot by students um they realize okay this is a good team I I kind of want to play with them they are good I want to work there and so we actually got a few few candidates coming from that source and we were also paid to have fun and travel Europe so it was very nice nice work if you can get it yeah but yeah okay so that's always getting into the like those sponsored Esports teams uh I'm I don't think we're uh it's it's a bit pessimistic but we we've been trying for years to have like um something that looks good visually for competitive technical competitions it's very hard to do because video games or even maybe chats or go or whatever competitive thing you can see online or on TV hmm it's very visual you can understand not really like with a deep level of analysis but understand who's winning and who's not and it's very active and you have like this action in competitive programming the basically the thing you can have is watching watching a screencast of the teams or the or of the players which is interesting if you are into that and you can understand what they're doing yeah but they're like they'll be playing in in other languages and stuff so even people of my level I can't really understand what they're doing if they're coding in C plus for example right yeah and so the basically the only thing you you have left would be their leaderboard so the leaderboard went once a problem is submitted or something you see the update and you see oh congrats they moved there and that's basically it but it's super boring to watch actually there's a there's like one update per minute uh especially at the end of the contest so in in the European championships the first I think more than half the problems more than half the submissions happen in the first hour uh and so the rest the next four hours it's the pace uh goes down and down and until like every team is basically stuck stuck um so we've tried to find ways to make this watchable and interesting but yeah we haven't cracked the code yet does have an idea please get in touch and we're we're gonna be rich but for now my solution is to let people gamble on it if enough people gamble on it then someone will figure out a way to televise it yeah true but there is like there's one player you would always gamble on and you would always win really yeah is um his nickname is a tourists so he's the best player in the world by far really every every contest he plays he he wins basically he's won like six Google code jams in a row he's won yeah okay every he's I think he's won the World Championships twice the reason being he um that you cannot play more than twice in the World Finals so he won twice and the following year actually he went back and um so he wasn't allowed to compete but he went back to stream the contest uh so I think he was a coach or something and so he live streams himself solving the contest with his two friends which are also very good and he made a like much better performance than any of the teams and so this guy he's uh yeah he's basically Invincible in in competitive programming right also in um so I I practice a lot on code forces which um resembles a lot um the setup of um world championships and European championships and usually you have like 10 to 20 000 people playing each contest so there's like contests twice a week or something which lasts two hours and this guy um if he doesn't finish first he will actually go down in ranking uh so there's like kind of an ELO system and he if I like the chest ranking thing yeah yeah if he finishes second out of 20 000 people he will actually lose points so that's how far a piece well maybe now it has changed I I've not heard of him you know in a while but uh uh yeah it is um and he used to be excellent I'm sure it's still the same today maybe he's retired yeah wow so I mean it sounds like you're saying you're not going to get to that level any day soon or no one is and I'm certainly not but I do enjoy these kind of coding puzzles have you got any tips for me to get from like I can do I can do them in the day too I can knock them out quickly um so I have two things um one is if you want to get better at thinking of a solution fast and implementing that as quickly as you can and the other tip would be on how to expand your horizons and broaden your knowledge to be able to solve more problems um so to do this kind of fast solving things and get better at speed coding would be Clash of code which is a game mode on coding game so again I work for coding game and I've been a user a happy user for six years now um and um we have these formats which um you have a 15 so you have a room with eight people uh it's eight real people there's a lot of people playing so you'll usually wait not more than like 30 seconds before the room fills up there's people of every levels we don't really match people with uh similar skill and that's also to allow people to progress learning from people better than them okay um and so this you have a 15-minute problem um usually if it's like a a simple one it usually takes not more than like two minutes for the best players to solve it um and yeah you have a very simple it's it's very much like Adventure code um you can code in any language you want and the goal so we have three goals but mostly is be the fastest we also have like more formats which is make the shortest code so here you have actually to learn other languages that's why I actually started learning Ruby a while ago because Ruby is more efficient at code golf so at short code and also we have one one other mode which is also fastest so you need to do the fastest code but you don't have the problem statement you only have the test cases so input and expected output and you have to kind of guess what you need to do so usually it's like processing numbers and finding like the right formula like you add a plus b and you multiply by C or something it's but it also gets your your brain going but most of the time you'll you'll find um fastest problems so you a normal problem that you have to solve as fast as possible and this is good to actually set your brain in a mode that makes you think about a solution instantly as uh while you're parsing the problem you're already getting the solution and you can start coding um as fast as you can and um this is also very very helpful for coding interviews I've uh yeah my my story is always that I've uh played this so Clash of code and coding game for a week straight before my Google interviews and then I asked them so I got the internship there um and um yeah this this is um so to to really gets good at speed coding and solving more simple problems uh this is a very very good way because also you can read after the after the 15 minutes ends you can read your competitors codes and you can often discuss we have a Discord as well and that it's it's a very open Community there's not a lot of actually like very strong competition and oh I hate my opponent and stuff we're all friends in that world and it's it's actually not really competing I I should rather say playing it's really yeah and so for for my second piece of advice to how to get better at actually more complex algorithms but it also works actually for the the more simple stuff but what the better players do to improve is called up solving so you play a contest so usually it's on code forces uh the the more so we have a lot of others but code forces I think is the main one you play a contest it lasts two hours you have six problems also and usually you so it's in divisions so if you're like between that and that ranking you will play in this range of problems so actually there's like per competition you have like 12 problems but you only see six of them depending on the kind of the window depends on where you are ranked because you're not gonna ask uh like world-class player to solve the very easiest problem right and for the the more beginner we're only gonna show them the easiest six problems and it's usually more than enough to get you stuck right it's it's you already start a bit on a more difficult problem so usually you can solve like maybe three out of the six and the thing is after the event so you have read usually one or two problems above what you actually managed to do and these uh these two problems you are gonna read the solution so uh it's usually published in the form of an editory also the author of the problem will publish just a few lines to explain the solution you also have the code but you not really have to read it the most important thing is read the solution understand it because it's much easier to come up with to read a solution than to come up with a solution to Any Given problem and so what you do is you make sure you understand that and then you go back to your editor you code the solution as you understood it and make sure that you manage to solve that and so you submit after the event and you you check that your solution implemented was correct and that means you'll learn something at that point and you learned how to go just a bit above your level and so by doing that over and over it will teach you a lot and a lot especially patterns that come back often and then sometimes you see like okay there's a list I have to count whatever and you're like okay I know this is a permutation problem I know about permutation signatures or something that I didn't know about so they said that and that and it allows you to really strengthen your skill sets in algorithms yeah yeah gradually like continually just finding out where the edge of your personal knowledge envelope is and stepping beyond that it seems to me those two tips kind of split into um like speed coding right it's kind of tell me if you think this is true but it's kind of the speed coding it's only really useful for gaming job interviews which in my opinion aren't great interview techniques for figuring out how good you'd actually be at the job the other side the second tip is actually going to expand your toolkit for programming in the real world um I'd say yes and no um first of all because you are saying the only useful skill is the one I don't enjoy I'm more of a speed Corner actually so but no actually yes I completely agree with the fact that it's an easy way to kind of cheat coding interviews I'm I'm not a good developer I'm aware of that I'm a I would say I'm a great speed coder but I'm not a good developer in general uh yeah because I can get any job I want if they only test for um simple problem solving which is 99 of interviews um but on the other hand it also playing competitive programming and it's uh and speech coding especially it's not useless um in the way that it will teach you a lot of things about your own language and making you more comfortable with coding so I for example I don't need to check any documentation for if if I'm coding something in Python all the built-ins I know them by heart the arguments and stuff so I don't need to go check that it makes also more sense in my head like when I need to implement a function that does something pretty simple I don't need to think really hard about it I kind of know the best way to do that um in terms of efficiency and stuff um but yeah that's that's true that it's more like a game than than any other thing if if you do that in in with the only intent to be a better programmer I would say just do other stuff code your own site projects it's you're gonna progress much faster but if you're like having fun um that's that's more like it and yeah it's I I don't consider that a way of really improving a lot compared to the the time you spent on that it's more of um finding your boundaries and uh playing very hard stuff and like by seeing your head for two hours on a given problem and then having it done on you in your sleep uh it happens to me a lot I ah yeah when I was practicing for the European championships I used to often dream about algorithm problems that I kind of made up in my head and during my my dream and in my dream I was like oh this is a very hard problem it's very interesting and uh and I wake up and I'm like oh no the problem actually is interesting but it's very easy to solve but yeah it's it's pretty funny to yeah you know fine um find a way of again I mean it's like playing sports actually it's yeah if you want to be a pro in that there's like the 100 people that are pro in that in the world maybe and that's that's it but if you if you want just that for fun and to do something that you're good at already well that's that's a good thing yeah yeah not every single thing in the universe has to be about productivity right yes exactly well okay that's that sounds one other thing I was going to ask you because I mean I found an advent of code I keep coming back to Advent of code because that's my reference point for this I found it a lot of um I'm okay at it I'm not great I but I do it for fun sometimes I do it to like exercise a new language they want to learn because it's a force and function a lot of people will actually do that to learn a new language use you solve a few puzzles in that first to make that easier on yourself because coding like a several thousand line projects from scratch on a new language it's gonna be very painful and you are going to regret the choices you made at the very beginning and stuff whereas you solve puzzles your code is like 20 lines you throw it away at the end and when you throw it away once you know you get all the test cases passing and you get better after that but you're not like haunted by the mistakes of the past and when when you were starting um to learn so and that's also a good way to have like Atomic problems that you don't need like very specific stuff to do so for example if you're building your side project you're gonna spend most of the time trying to figure out okay I'm going to use like this framework and so I need this to make the connections between my database and the code and stuff so it's mostly like configuration and figuring out which libraries are used and stuff yeah whereas you solve simple puzzles and small competitions you're gonna have the only the distillate of that and you're gonna have pure code pure um it's uh yeah pure functional I wouldn't say uh it's it's a confusing term but yeah that's uh isolated into a specific the nice thing about that too is side projects they're almost infinite if they go well they keep growing it's nice to have something that occasionally has a definite end yes and I'm doing only that basically I I have a very few side projects actually but um yeah when I'm bored or something I just I can just go on any website that I enjoy and say okay today I'm going to move up in ranking because also I enjoy solo playing which is not truly competitive which um one two examples so coding game we have that like a XP system you solve a problem you get like that amount of XP and then you've got levels um one website that really has mastered this I think is code Wars which you have like problems with q and so it's like belts that you move up and so sometimes I'm like yeah I'm going to move like half a level up today and so I set up my mind off on a few problems that would allow me to do that and just having this kind of satisfaction and it really shows you okay now you are better than you were before coming here and this is this is really satisfying as well yeah that's my favorite kind of competition competing with the version of me that didn't make the effort true yeah you know yeah absolutely so um are those your top recommendations where I should because the thing about Advent of code it's great but it's only one month a year and it's the busiest month of the year which has destroyed my Christmases once or twice you can play the archive you can play the archive where would you go for the most fun oh um where I have the most fun well I would say um coding game but it's not a sponsored uh episode uh I I really enjoyed the the website and everything it has to offer um especially Clash of code which is my favorite format of all the website we have also um a very unique format which is um AI competition so basically you have like um board game um any any kind of game usually we take inspiration from actual board games or we just make our own it's a small video game that's on the window on the left and you have to code an AI that drives itself and tries to win the game against another Ai and we have uh twice a year a big competition on that and we also have if you want to solo practice we have like a hundred of those if so there's like chess if you want to learn how a chess AI is made you you won't beat stockfish of course but it's fun to learn how different kind of ai's work and stuff okay so this is my where usually where I go for fun and for more hardcore um competitive programming code forces would be my my recommendation okay UI is um debatable it's a bit weird but uh yeah it's uh it's the content is extremely good okay I'm gonna go and check them out I've been wanting to sharpen some of my gleam programming skills so I might head there and I'm going to log in anonymously because I didn't want anyone listening to see my times yeah that works on that note Matisse thank you very much for joining us thank you for having me thank you Matisse I'll put links to all the sites that he mentioned into the show notes so if you want to go and play with one of those coding challenge sites that's the place to look we've also got a few back episodes of this podcast covering new and interesting languages like gleam and kotlin and Gren and some others so if you want a new language to pair with your new programming challenge site that could be the right place to look all we need now is a sommelier to choose the right wine to pair with them that'd be awesome another day perhaps as ever if you've enjoyed this episode please take a moment to like and rate and share and subscribe and while I'm thinking about it someone told me yesterday that we weren't on Amazon podcasts which I didn't know about but we are now I fixed it and we're there now so this podcast should be available on all the platforms that you like but if there's a favorite one that's missing please do let me know my contact details are always in the show notes and with that I think it's time for us to all run off and play until next week I've been your host Chris Jenkins this has been developer voices with Matisse ml thanks for listening foreign [Music]