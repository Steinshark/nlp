today I want to take a closer look at the two most popular programming languages in the world PHP and Visual Basic just kidding I mean JavaScript and python I've worked with both of these languages extensively though even more with typescript and JavaScript actually and they're quite different but in my opinion these differences are actually the result of a core philosophical difference between the two languages and it's important that you know what that is so you have a better understanding of where these languages are coming from so I'll cover that at the end of the video but let's first talk about the intention of these languages because the use cases are very different now JavaScript was created in 1995 by Brandon Ike while he was an engineer at Netscape language was conceived to make web pages interactive by allowing for client-side scripts today it's not limited to client side anymore it's also used on the server thanks to node.js python is actually an older language than JavaScript it was conceived in the late 1980s by fellow deutschmen Guido farossum and was intended to be a simple readable and efficient high level language python syntax is simple and readable using white space indentation to delimit code blocks rather than curly braces or keywords which took me a while to get used to it doesn't require semicolons to end statements JavaScript on the other hand follows more of AC Java style syntax there are also differences in how object-oriented programming Works in these languages JavaScript has a so-called prototype based system which is a style of object-oriented programming where Behavior reuse inheritance is forms via process of reusing existing objects that serve as a sort of prototype and there are some syntactical sugar in JavaScript so that you can actually write class name but under the hood this actually uses the Prototype system so we do have classes in JavaScript but they might not always work as you think they will especially when you deal with static members now python uses more traditional class-based inheritance but syntax can look quite complicated with the class initializer being a donor method and there's no way to directly Define instance variables unless you're using data classes which rely on you defining class level variables and that then generate instance variables which feels like a hack sometimes now in Python you can completely override how classes work which invites all sorts of shady patterns and yes that also includes mixins in my opinion I think they're not necessary I've never encountered a situation where mixins actually led to a better design and careful use of inheritance and compass position but more about that in all the time now how quickly can you get started well python runs on its own you install it on your machine you write a script and you don't you can run it it has lots of functionality that is completely built in most simple scripts you don't need to install any dependencies at all to run JavaScript or typescript you need a browser though you can technically run it with just node.js and an HTML page that loads the JavaScript code and the test server that runs on localhost and you may need to change browser security settings to actually be able to view page and you might need to install browser extensions to get a good developer experience even though debugging is still going to be held and if you use typescript you need a build tool to compile it into JavaScript and you're going to need node.js since vanilla JavaScript is really limited and want to know modules to be able to build something useful and probably a framework like next year has to handle server-side rendering and react or any of the other framework flavors of the month because you definitely don't want to directly write HTML code since there are too many issues between browsers or you can access the file system either why do we even bother well once you've done all of that it's relatively easy to then deploy your app to the cloud where it will also run without any issues except of course you want to run into course issues and you need to make sure your security arrows are up to Snuff ah but there's one big Advantage unlike python web developers are not bombarded with snarky comments that they should start programming in a real programming language instead of a toy well here's what I have to say about that that's just your opinion man you know that's just like your opinion man anyway this difference does make sense JavaScript is intended to work in the browser and in the client server architecture and it has evolved a lot while at the same time it had to ensure a high level of compatibility so it makes sense that it's more complicated than python which is more focused on automation quick script writing by the way if you're interested in learning more about software architecture I'm working on a new course that covers everything you need to know it's going to help you make the right architectural decision so you get results quicker and they're going to be a ton of examples with a focus on being practical click the link below to learn more and to pre-register for free in terms of multi-threading neither python or JavaScript is really a champion at this python does support it but we have the global interpreter log The Guild that only lets one thread executed at a time now python is quite good though for tasks that are data processing or i o bounds and they can run concurrently especially with recent improvements in the async I package and the async or weight syntax that was added in Python 3.5 it can also use multiple processors which is nice for data processing JavaScript on the other hand runs on a single thread doing one thing at a time but it's smart it can delegate us to the system so it doesn't get stuck waiting and it can move on to the next next task and just like python it supports concurrency JavaScript also has something called Web workers for background tasks and this all makes it quite lightweight and efficient it's perfect for data intensive real-time applications that run across devices and typically need to interact with lots of different apis about the type system I like types A lot I regularly talk about them on my channel and in My Weekly Newsletter which by the way contains a lot of other news in the python world as well if you want to join for free go to my website now JavaScript is a dynamically typed language this means that you don't have to tell JavaScript during variable declaration what type of value the variable will hold the type is going to be automatically determined while the code is being processed if you first assign a number to a variable and then you can later assign a string tool variable you won't get any error so here's an example of what that looks like and this Dynamic typing is useful for tasks that are common in JavaScript like pulling in different data types from web forms and transforming them it provides flexibility but they can also lead to runtime errors if the expected and actual type do not match and this flexibility with types and values can also lead to confusion for the developer because some default conversions in JavaScript are actually pretty weird python is like JavaScript dynamically type but it's also strongly typed while Dynamic typing means that you don't need to declare the type of data a variable is going to hold strong typing means that the type of value in a variable doesn't automatically change so python won't implicitly convert one data type to another unless that conversion is completely unambiguous for example if you want to convert from a literal int value to a float value so here's an example of what that looks like however python 3.5 introduced type annotations which allow developers to specify the expected type of variables or function arguments and Python's strong typing helps prevent bugs that can be caused by unexpected type conversions it's Dynamic typing keeps the language easy to write and read while these type annotations can improve code readability in robustness particularly in larger code bases now the difference in typing systems between JavaScript and python is actually tied to the use cases and philosophies javascript's Dynamic typing system allows for flexibility ease of views when dealing with different data types on the web while Python's typing system with the optional type annotations reflects its emphasis on readability and robustness and this is particularly helpful in domains where python is often used such as data science and machine learning where it's important that you have an explicit understanding and handling of data about these type annotations JavaScript doesn't allow you to specify what type something is I'm guessing that wasn't deemed very useful for simply animating some HTML buttons it also makes sense because it's quite common in web development that variables hold different types of data depending on what the user does or what kind of data the server returns however if you want to develop a full-fledged web application not having these types is a recipe for disaster and this is also why typescript has become so popular typescript is a superset of JavaScript that adds static types to the language with typescript you can write type annotations and the typescript compiler will check the types at compile time when you compile the code to JavaScript helping you catch common errors before they run now python didn't originally have type annotations but I find it's a really helpful tool to increase the code readability and catch potential errors here's an example of what type annotations in Python looks like in this example we expect the argument name to be of a type string and we expect the function to return a string as well typescript types are definitely way more advanced than what python offers and type checking in typescript is way more complete I regularly get all kinds of weird type errors with python and pylons especially if you start using more exotic things like generic types and let's also be honest Python's callable syntax is also impossible to read and much prefer the arrow syntax in typescript and typescript has true interfaces which are types only as opposed to protocols in Python which are sort of an in-between thing that either defines what a type should adhere to like an interface but you can also create a subclass of it or add instance variables just like a regular class with typescript types I feel safe that work really well with python honestly it's not fully there yet I think all of this boils down to a philosophical difference between these two languages python focuses on being easy and flexible for the developer but hard for the user developing a python script is easy but deploying it to users is hard they need to deal with installing the right version of python dependencies Etc JavaScript focuses on things being easy and flexible for the user you open your browser type URL and you're Off to the Races it's also going to do whatever to just at least do something instead of crashing with an error but for developers it's really hard to set up everything debug your code make sure it works on a variety of devices typescript helps with some of these things but it also introduces more complexity because then you have to first compile to JavaScript so do you agree with me did I miss anything important in discussing the difference between JavaScript and python let me know in the comments one thing that I haven't covered in this video is Python's object model if you want to use Python effectively it's important that you know more about it so you can benefit from all the possibilities in this video I cover that in detail thanks for watching and see you soon