all right so my name is threaten mikov and I helped create the Hermes JavaScript engine at meta so I can tell that there are at least two three users of Hermes in the audience uh can you make some noise so I can hear you I need the supports we explored the Hermes engine at Netflix for a little bit it's pretty exciting we went with V8 but I'm still curious what it would have been like going with Hermes anyways for two people you guys are really loud I have to say anyway last time I was here I was really pleasantly surprised about the reaction to my talk after my talk a couple of people approached me to tell me that the talk was very technical but okay so let's hope we can live up to this standard once more I like it I want to start by telling you a little story this is the sad Fable of John native in his slow cold by the way is anyone noticing the back the backdrop to this guy it's like he's in a rave concert going on behind him I feel like whatever's going on behind him I can't tell if it's this part of the screen down here or if they just have the craziest background of all time DJ herpes I know it looks wild back there Joe was sad because he hit he was having performance problems in his react native app the startup was very fast because we've all had performance problems but there was occasional UI stutter when scrolling very long lists when using complex animations oh and Computing crypto hashes or mining a bit of Bitcoin in pure JavaScript problems that we all have had obviously Joe who was a very you know making jokes at conferences is really hard and I genuinely appreciate the attempt to get out there and to make it happen because you know what sometimes no matter how hard you make a joke people just aren't they're just not they're not joining in and it's a little bit emotional okay very passionate try it and tried doing a 50-hour coding Marathon he swore he drank gallons of coffee he profiled he optimized his code he reloaded over and over but ultimately he was faced with the fundamental limit of interpreter performance he could not make his JavaScript any faster it was beyond his control deadly tired with the crash Spirit but boiling anger to a Joe was considering making his final move of total desperation trying to rewrite some of his code in C plus plus but then he wondered what if I could leverage type information to generate efficient native code ahead of time I would still be writing JavaScript I would be in control of performance not the here is interpreter which is actually great but let's I could optimize as much as I need could I do that Joe wondered and the answer to that is yes yes you can Joe you can do all of those things and more you realize like how much better things can get if you can just have type information like what you can do in a programming language is vastly different when you can just just have it in there as part of our cross-platform vision we really want to unleash JS developers like Joel and give them access to the unchecked power that native code has to offer optionally if Joe really wanted he can even carefully perform unsafe operations potentially not only creating harmless web JavaScript crashes but also devastating native crashes just as C plus plus developers regularly do it's a good time look at him he's so happy he doesn't know what he's getting into but seriously he will mostly get tons of performance and on that highly optimistic note I am excited to introduce the next version of Hermes which we have been working on for some time now code named static Hermes some of you may have already heard some speculation about it very excited it was not meant to be a secret it was on GitHub since day one but we didn't really want to talk about it because there was nothing to show well now finally there is something to show and we are eager to share it with you the main innovation of static Hermes as you have guessed already is optional ahead of time compilation of JavaScript to native code this is just so cool like I I just this is just my favorite this is my favoritest thing right here right there do you see this thing that just goes on right here this Top Line is so good like a met like think about think about like cold start times in no they they're they're slow especially when you're running on a single thread right A lot of these a lot of you know a lot of these serverless things it's not like they're giving them maximum resources you're getting a shared resource and whenever you start up node right like even if you just do the most world's most basic thing if you just do a node uh a trace GC uh e-console log uh hello right oh I didn't get anything oh that's nice uh but if you import anything right I mean we're talking about like barely import anything you will just you'll cause so many Trace GCS I thought you'd get a trace do you see this is a little disappointing you didn't get a trace GC for this one but you'll GC multiple times and on these like single core little running ephemeral processes it's a stop the world GC right it is a stop the world GC and it completely destroys stuff and so I know it's very anticlimactic you know and so like you could you could imagine how much you could potentially do by having your stuff compiled and more tight and being able to just have finer control over what's going on I would love to see more of that I know GC isn't GC is going to be present in either of these but it could be a vastly different type of performance and what goes on um I love it it brings us close to our goal of combining the predictability and high performance of C with JavaScript usability and no that's why that's the last slide said natively compiled JS is completely safe by default exactly as interpreted JS so there will not be native crashes for job oh well that's cool to be clear native compilation is not for your entire app even though that is possible you need to decide which parts of your code need to be optimized to the Max and only they get compiled to Native ahead of time the rest continues to use Hermes bytecode and if you want to learn Hermes by code I recommend a great talk by radic react native field 2023 you will find it on YouTube in a couple of weeks now the really big change here is that in order to I wonder how true this is C performance with jsu's ability like what what exactly are they saying I I don't know I I would love to see some sort of like Channel I know strong sauce I know whenever I see someone say C like your biggest dead giveaway that people are saying something stupid is when they say it's faster than C then the next one is when they say it's a dynamic language that's as fast as C or it's a bytecode language that's as fast as C you're just like well you know what you're saying is largely offensive I don't believe you I'm not going to believe you sorry fully exploit native performance static Hermes relies on sound types now even if you don't know what sound types are what's a little after remember these words and we'll really delve into that a little bit deeper in a few slides I see someone say e e equals m m c squared so it didn't didn't someone tweet just recently E equals m c squared plus a i as if it was some sort of revolutionary thing you think twitch chat is dumb okay I just want you to remember this if you think twitch chat is dumb go on Twitter whole new world out there okay whole new whole new world out there this point I want to make a big disclaimer uh we are seeing encouraging results from static Hermes but it is still very much a work in progress okay it's not ready right now it is not suitable for anyone besides the most extreme hackers in enthusiasts like radic it is still not easy to use and many things are broken if you tried it which you can because it is on GitHub you might get disappointed okay but rest assured we are working on it and it is getting better all the time some of the Hermes team is here with me in Black native for you and they are submitting this as we speak so it is improving at this very second with all that said we really wanted to share it early with the rack native community and to get your feedback we also want to thank our partner in this Amazon by the way how how different is react native from react who here programs in both anybody anybody honestly pretty different very different me pretty different okay I only use preact oh okay tough guy 50 similar I mean I'm like 97 similar to an ape so 50 similar means nothing to me okay I don't even know what that means I don't I don't even know what that's supposed to mean at this point 22 better because internally we added flow support did I just hold on did I just typescript support to static armies we also want to thank our partner in this Amazon typescript support to study Hermes because internally we added flow support Amazon users react native in many of its apps and it has been supporting us in going like native over the past few years okay so this is a brief overview of the topics that we'll cover in this presentation yeah Amazon doing non-evil things okay it's it's weird I I okay W on the board for Amazon flow yep vomit I've never actually used flow I am curious about flow you know what I mean I've never used flow why would anyone use flow Has anyone used flow flow's good flow's great one w a thousand L's flow is better flow has sound types oh interesting flow has sound types how does it do that does it have some sort of runtime component is that what it does because like how do you have a sound type it has speakers oh you're you're a funny guy huh you're a funny guy aren't you okay forget you guys but I will try to fit everything in the remaining yeah sound types what are those and how does it have it so first we'll start with explaining why it is difficult to compile JavaScript to Native then we'll explain what sound typing is and we'll look into an example of actual native compilation so you can get a few shut up finally we'll talk about something that became possible with static Hermes and that is zero cost ffi first we'll look at an example which reads an sqlite database entirely in JavaScript without C plus plus or C this Hermes have does Hermes have his hand run time Hermes like node yes yes no sounds like it yes no why do I keep asking you guys things why do I keep asking you guys things okay what what is my problem wow somehow this became less helpful I'll just have to go places a little bit more detailed example of one simple native code which is get them 50 likely first let's stage let's set the stage a little bit here why do we need static Hermes isn't regular Hermes good enough well as an interpreter Hermes is pretty good and we actually do have plans to make it about twice faster which is a topic for a whole another talk but ultimately that's a lot faster there is only so much performance that you can get from an interpreter and that isn't always enough one way for people to exceed that level of performance is to write extensions in C plus just as Poor Joe was going to yeah that's how it can be quite difficult to write and to maintain so instead we want to take advantage of react native developers familiarity with typed JavaScript and compile type JavaScript to Native ahead of time I know I'm repeating myself a little bit you know this is about compilation to Native a valid question to ask here is what makes compiling GS to Native so difficult in the first place well the answer is easy to see in the example like this one yeah we have a function it takes two parameters but we don't know their types so all possible types string array number regular expression whatever and combinations between them need to be supported the result is that if you wanted to compile this to Native you either would get a binary explosion you effectively get free generics you get a generic you get you get a generic of T and uh V and U and you get both of them and then they just explode to every type that'd be fun huh that'd be kind of nice all type combinations or you would just get interpreted like performance which defeats the purpose of native combination compilation uh there are interesting Solutions in the Academia that I would like to acknowledge specifically the excellent hope C compiler by Manuel Serrano but unfortunately it doesn't really meet our needs since it compiles every function twice and relies on heuristics so performance is not guaranteed and predictable we are not rolling it out though for the future okay then we already said that we want to use type annotations can they help unfortunately not by themselves because type annotations in typescript and flow are unsound the typescript community right now are in shambles they're completely in shambles right now it's not it's type safe just shambled right now you shook there's that word again sound and sound what does it mean unsound means that these type of notations cannot guarantee that the actual types at runtime are correct but they are what we say here how so you might ask well here's a very simple example we have this function annotated with number we imagine doing all this annotation just to not actually have types always with two array elements unfortunately these array elements are out of range so instead of calling the function with number and number we're calling it with two values of undefined so as you can see we have Vulcan the type Checkers it is true typescript has only ever talked about a code organization has nothing to do with actual types it's it's supposed to be that it gives you the feeling of doing the right thing and likely cures most your bugs uh and and as I'm sure you know there are many similar ways to break the type Checkers and this is not a bug in typescript or flow uh it is just that given JavaScript semantics this problem cannot be solved statically at compile time correct it is a very difficult problem here is how static Hermes addresses this problem in this specific example on the left we have regular Hermes executing this code oh nice you get actually like hard as we can hardly recall undefined on the right we have static Hermes now rather than call the function with undefined it throws a range exception when we try to answer the not in range dude welcome to Java one point oh there you go all you script kitties have you ever heard of Rangers they're a lot of fun they're a lot of fun okay modifies some JavaScript semantics in order to enable efficient sound typing at runtime in other words at runtime the types of values are guaranteed to match the type annotations which in turn allows us to compile that Source very efficiently the new semantics are opt-in on a granular level and you can use them only where you need them plus the new code can coexist in interop and finally as I mentioned both typescript and flow are supported this is super curious to me because I mean you still can cheat at some point in typescript to convert an object to a number and then how does this all like I I wonder what all the errors are and what is that are we breaking JavaScript we can't arbitrarily change how the language Works can we well consider this we are simply enforcing the behavior that the user declared they wanted when they hold the type of notation when they wrote that X is of type number they certainly did not intend for X to occasionally be of type undefined that wouldn't make sense so technically the program we had there was incorrect we just called the bug at runtime instead of silently ignoring it so we are strengthening the typescript in flow type systems I wonder if the static Generation all this allows for something like uh number or undefined and allows for like that more uh like still loosey-goosey feeling of JavaScript while having still like this increased performance of pre-compilation I'm very curious about that because that would be you know that would be Dynamite right that would be a genuinely Dynamite item yeah a nullable effectively you'd get a nullable uh it would be pretty cool uh so so if you use Hermes and you use protobufs instead of uh instead of Json you correctly organize oh my goodness all of your code into modules hierarchy and you don't spam but none of this [ __ ] functions all over the place and then you can do basic modern programming in JS yes you've now officially caught up again 1995 was a hell of a year it was a hell of a year for programming Java came out JavaScript came out they announced together null was included in JavaScript because it needed to interrupt with Java I mean it was a good it was a good year it was a genuinely Good Year super information Highway we don't necessarily view that is breaking JavaScript but regardless of these philosophical arguments it is all opt-in so if you don't like it you don't have to use it but if you do use it it will make your code both faster and more correct so we we would like you to use it I like this idea we have talked a lot about this in theory now so it's time to finally look at concrete examples by the way this is the most confusing meme still to my lifetime I genuinely have no idea how to interpret this meme it's just like you put the most confusing image of all time and you just put words on top of it and somehow it makes me chuckle I don't even get it it's Darth Vader caring about his water quality obviously I know but it doesn't make any I don't I I'm still I still struggle I didn't understand what compilation to native means for performance and what it looks like it's ironic for example we have chosen is some of you may be familiar with it it's a part of a well-known computer language benchmarks game okay it is a math heavy Benchmark do you think it's like the three body problem famous novel by the way by the way citing that I read hey just so you know I read I I read not a big deal with many property accesses when we started compiling it wow it was the same performance as Hermes and that is 550 milliseconds but now as you can see hell of a difference it is 10 times faster when compiled natively so that is that is not pretty shabby plus we're certain that there is more Headroom we can probably get to 20 times faster than Harvest 20 times [Applause] something like V8 as well in this comparison just so you can see um like another engine so you have something to compare to because it's Hermes against itself meaning that it just got a lot faster has it caught up to standard JavaScript expectation speed or has it exceeded JavaScript expectation speed I would have loved to see something outside of just Hermione comparison you know just toss it no toss it and Bun somewhere else just so you can understand what you're looking at you know [Music] [Applause] okay so we have this very nice performance Improvement but what does the compiled code look like let's examine this loop from inbody.js how did it be the three body problem series is coming to coming in January 2024 to Netflix by the way oh gosh they have another opportunity to ruin a really great book damn you come so fast well this is how before starting Hermes deal with dozens of instructions executed for every line of this Loop by The Interpreter with static Hermes it is much better and by the way I'm really happy to bring some low level assembler to this JavaScript conference in the next slide let's put the native interact native here we are if you don't know r64 assembler don't worry I think you'll still get the idea the first thing to see is how if you assemble instructions we have for the first two lines of the loop we have six instructions and most importantly most of these instructions are very cheap the entire calculation the two multiplications in the two apps what's an F my life advanced mode on two dimensions is this some sort of sim Deez Nuts type operation going on here what's this F my life going on right here it's divorce papers it looks like it's doing two operations at once multiply and add floating multiply lastly add that all performed in parallel by a single instruction which is marked with a divorce which is really impressive and trust me this is very fast and it is quite exciting for compiler Developers this is the rest of the loop again very few instructions well why is that one so again you don't need to understand the details of this but you can see how small the output is and rest assured this is indeed very fast it is achieving performance close to C much faster than Hermes I'd love it I'd love to see again saying those phrases I really wish they could have just tossed tossed a quick into God bolt and done a quick little look-see and see like what what does that look like what is the equivalent 03 awesome you know compiler version of this and and look at that even done with it it will become even faster but it'd be interesting when we hopefully would have shipped this now a little a few more benchmarks we can see the results of other benchmarks that we have created they are in the static Hermes Repository they are not as impressive but it's still not bad one of them is like five times faster and we again we are still working on making them better I mean this is all good I love the performance increase next thing I want to talk about is zero cost ffi which I suspect might be even more exciting for some of you come on Zig um very serious slide I don't know I shouldn't have used chat GPT for this presentation let's keep moving so early on when we started implementing sound typing we got an unexpected benefit we realized that sound types unlock the possibility of very efficient native platform integration yes we can call native platform functions with practically no cost just as if we were a c program this enables us if we wanted to implement platform Integrations entirely in JavaScript without the need for resorting to C plus at all that is incredible and the reason I can foresee some of the the reasons why that is so dang incredible because especially with the moving Target like a phone where the platform does make changes from time to time what does ffi stand for fast Fourier intercourse um with the platform moving like various things change on the platform pretty regularly and so being able to have a bridge methods written in JavaScript means that you can do like JavaScript operations and actually have like a platform normalization layer and it effectively gets to run at almost native speed like that that that's super cool that's like super super cool so what problem are we really solving here first 20 billion dollars sweating amount of code in order to implement and wrap a single call to a native platform API furthermore those wrappers which use JSI can become expensive when they're invoked very frequently we can give JavaScript developers another option the zero cost ffi information is literally that zero cost it performs no conversions no allocations no interactions it is exactly as cheap as performing a regular Library code in C plus we have measured that the call Overhead is between 15 and 80 times not percent 80 times lower than JSI native function wow that's that's pretty dang good even I mean I know it's all self-referential speed up points that they keep doing right they're only referring to Hermes as what they've actually made faster but nonetheless I mean making stuff faster within your own platform by huge Leaps and Bounds like that's really good like that's genuinely an awesome thing especially native calls like that where you can really get deep on it I like it however we have to be careful as we all know native functions can be unsafe and dangerous we have made it very cheap to call them but that doesn't mean that they should be called irresponsibly to ensure that we have introduced a distinction between safe and unsafe code this is very similar to another very popular system software language I'll let you guess which one it is unsafe code sections trust that the developer knows what they are doing hopefully Joe knows we'll see and interacting with whoopsies I just accidentally I tried the plus I just I just messed that up he's talking about rust okay the rust mentioned let's go patience on the other hand disallow unsafe operations so you cannot accidentally call a native function from there so you have to be very really deliberate when interacting I skipped something I'm not sure what happened here you cannot deal with it just deal with it by the way squeal light is still so good for those that don't know why squeal light is so good I just want to let you know something you can take squealite and you can point it to a file and it works I want you just to take a second and think about how many cool integration tests you could have written by Simply Having golden database files and you just write the database file once save it as the file and then that's the thing you test against now you can actually like just test and have actual database like working and the database is perfectly set up and all you have to do is just like CP that file into a directory run it call it good you're like yeah that's exactly the thing we wanted to to work I know actual data like actual data squeal light is really cool if I I wanted to give you a taste of what is possible you can do Ram only first example ramrod me uh but the problem about Ram only is I I don't know how this I don't know how the environment's set up first so that's why I just like the file thing right you can really do some cool stuff foreign first as you can see we need to declare some native apis these are the apis exported by sqlite now I did not write this by hand it was generated by our tool which takes a c header and generates JavaScript Bindings that we can use and this is the JavaScript source that opens the database queries it oh gosh guys I know there's a lot of JavaScript engineers in here um this this is raw docking squeal okay squail form a boy I know this is this this is very hard to see there's not even an orm or at least a squeal Builder okay I get it I get that this is really hard to look at and you probably feel very scared okay you're probably you're literally going to Prisma chat and chatting with a live representative right now just to feel better about yourself I I understand but trust me it's okay we can do this it's just it's just it's just an example okay it's okay where's my [ __ ] ose brings the result and this is it this is the entire Source there's no C plus plus this is it runs sqlite and it actually does work I was actually planning to do this in a live demo but I got discouraged after I saw what Microsoft did yesterday I couldn't compare with that so here's a screenshot that's pretty funny you can see you can see this is invoking static Hermits to compile the demo on the Mac OS imagine big whatever what whatever whatever Microsoft did ruined the guy this is such a good presentation I would love to see whatever this is yeah I'm just showing you the output it is a true wait is the thing called shermis what the hell sure means is shermis the compiler is sure me is to compile for Hermes please tell me that's real macro is binary and we're running it okay I don't know how I didn't see that so as you can see you could even use static Hermes if you wanted to to hide native applications for Mac OS or Linux or Windows oh my goodness but although we do not recommend it but I find it amusing that it is possible JavaScript devs don't even raw dog JavaScript imagine looking at squeal yeah I can imagine that okay this second example will be a little bit more boring but I hope it will allow you to understand a little bit more what is going on here we have deliberately chosen a very simple native API for demonstration purposes it is the C get end function average an environment variable by name uh think process.n in node.js again observe that this is all JavaScript there is no C plus plus JSI or anything like that here and we're not going to spend a lot of time on this but let's quickly go over what is happening first this is the external declaration that we're going to call this is telling static Hermes of the C function that we want to call we're converting the name of the variable that we want to take from a JavaScript string to a C string okay here we are calling the native function okay then we're converting the result to a JavaScript string what's that 2048 is 2048 like the max value are we just did he just did he literally just go over a quick 2 to the 11. just just allowing a 2 to the 11 hang out like that buff size I know but that's what I mean you can't just you can't just gloss over the fact that you're I don't know how I feel about people playing with buffers and thinking about stir end copy in JavaScript okay it makes me feel a little nervous all of a sudden freeing the temporary buffer that we needed then you got to free it I know this is a simple very logical although you should only do this in libraries you should not do this in product code obviously and here I would like us to examine a little bit external variable uh the external function call and I promise you this is actually the end there's not a lot more first we have a place where we can put options things like calling convention platform depend on things it is an object open-ended where we can use it to add functionality this is where we specify the name of the Native function we're importing we describe the types of its parameters like you can just say C Point describe the return type that's nice and this is just a throwaway body that we need to populate in order to make the types I want to know Microsoft did I know I do too since this is an external function but it's still passing to the to typescript and flow we just throw a dummy exception so that it doesn't complain that we're not returning a result so yeah this is it for questions or suggestions I'm highly encouraging you to use the discussions tab I really want to play around with this I really want to play out and play around with some shermis right I think shermis is really exciting I love this idea like I said I I've been super excited about all of this um I I really do think that this is the much more interesting version right of of a run time than anything else I think I feel like this is the first real iteration in JavaScript in any sort of way in app just in years upon years obviously v8's like this slow iteration where they said hey we could make a better engine hey we're gonna add in jit jit was really important and then really some of their different uh garbage collection stuff really made a big a big difference but this I think is like the next big step which is like well we have to kind of get out of this interpreted world if you actually want to see it move fast now you're actually starting to get into speeds that are probably a lot a lot a lot better and so this to me is just extremely exciting love the idea awesome presentation shermis for everybody did bun just get toasted I don't know but the name