uh today's live stream on LinkedIn is with Greg law from undo thank you for coming Greg um I'm looking forward to your presentation about time travel debugging let's take it away excellent thanks Jen thanks for having me um yeah so actually if anybody's got any questions yet do you you know fire them off during the talk I'm quite happy actually always happiest if we you know take a little bit of a uh a tour around and do it kind of in an interactive style um so yeah questions are good right that's uh let's crack on so uh this chapter sir Morris Wilkes I think he has as good a claim as anybody to being the world's first professional programmer right the first person to write code on what you'd recognize as a computer of stored memory Pro stored stored program computer uh and which is doing it to do a real thing right rather than just like prove this prototype machine actually worked it was actually solving a real problem so I think as I say good claims anybody to be the world's first programmer and he says in his Memoirs that he remembers that moment when he realized that a good part of the remainder of my life was going to be spent finding errors in my own programs and I that resonates with me I've got to say I think of a lot of people at that moment when you start programming you kind of get bitten by and bitten by the bug just to use some confusing terminology but uh and and you realize it's just it's really hard to get it worked now did it work now of course the term debugging bugs and debugging hadn't been invented at this point this was invented by uh Grace Hopper when uh when she found in the back of her machine an actual bug a moth that was causing them that was the cause of the failure that they were investigating actually that story is not quite true so uh I like I never pass up the opportunity to be a pendant and uh it it turns out that debugging predates that by a long way and actually you can see here on the right is a copy of the a picture of the log book where that instance happened and you can see underneath where the moth is sticky taped into the logbook you can see underneath it says first actual case of a bug being found right so um that doesn't make sense right first actual case of a bug that doesn't make sense unless it's already a term and this is a basically a joke it's humor right and in fact that um debugging goes goes back um at least 50 years before it turns up in Edison's log books um and he's debugging his his uh his inventions um but I think it really became popularized with computer programming because it's just such a such a big part of programming right I mean if you think about it just for a moment how how many lines of code do you think would you back yourself to write and and and have it work you know have it work first time um you know 10 maybe if it's quite simple and you and and you really think 20 and maybe maybe you're a better programmer than I am but I I you know in my experience 10 lines of code it doesn't work first time in practice right and even also actually I think how many lines of code can you change and have it work first time I actually I think that number is less than one um you know it just just it's really debugging dominates in fact programming is sometimes said there's two parts to programming there's bugging and debugging there's writing the code typing the code in and making it work so computer's hard debugging is just this this that completely dominate software development but we don't really talk about it very much right it's kind of accepted it's a bit of a dirty secret perhaps um and um you know we just kind of get on with it um but another another good quote here from this is from uh another very smart man Brian kernaghan says you probably heard this is quite a well-known quote it says everyone knows that debugging is twice as hard as writing a program in the first place so if you're as clever as you can be when you write it how will you ever debug it now really saying here is you know keep it simple give yourself you know margin for error um don't try and be as smart as you can be well I think there's an interesting corollary to this right if you take this as true and I think it is true then what this means is that debugability is the limiting factor in software development right so whatever your metric for good is in your program maybe it's how fast it runs or how extensible it is or how quickly you can write it or how small small it is whatever your metrics for good then if you make if the program is twice as debuggable then it can be twice as good right because it's this it's this limiting factor so I think we don't spend nearly enough time you know thinking about this and investing in tooling and skills and and everything to make us to make us better in practice you know if you think about how do we debug most of the time right um you know given that if you know most of programmers time is spent debugging what are they doing well maybe um we can we got you know pretty cool tools these days like the dynamic Checkers like valgrind or the sanitizers um you know very handy and sometimes very useful right but I'm not talking here about how how often do you how often do you run this like inside your Ci or something maybe you've got some Checkers in your in your CI pipeline that's good practice we certainly do it undo um and very useful they are too but I'm talking about debugging I'm talking about my program's got a problem it's not doing what I wanted it to do and I'm trying to figure out why okay and in that process yeah you know maybe I suspect some stack Overflow or something and I'm going to run it through valgrind and see if I get uh see if it gives me some a clue but for most people not very often right this is this is like you know [Music] um I think you'd measure this in like a few times per year tops most people actually I suspect it's a few times you know per decade or something right so so very useful but not used that much now debuggers GDB or Visual Studio whatever your favorite debugger is um I think get used more frequently but still actually infrequently I think for most people um once a month maybe if that right few times a year um it depends some people use them as a matter of course but most people I think in my experience most of all turn to debugger relatively infrequently what do programmers do every single day I add more print tests right we add printf we run again we get some more information and you know this really hasn't developed either you know from the first programs that were were being written or indeed from the first time we programmed right if you can remember back when you first started programming and it didn't do what you wanted it to do you know yeah you start adding print tests and that's what most of us do most of the time and why why is that I think there's a couple of reasons for it and one actually slightly um uh uh provocatively perhaps I think there's an element of laziness to this right at the printer if I recompile I run it again okay get a bit more information now I have to add another but not enough so but I've got a clue so I had another printf and another printf and uh I can kind of feel good about myself and not I'm yeah I'm working hard right um I'm not slacking off I'm working hard but I'm not really thinking hard I'm just in this kind of going through the motions almost and and I think um uh it's kind of it's kind of the programmer's equivalent of just reading email right people you can just read your email and feel like you're being efficient but actually you're not really doing anything print Hefty plugin can be like that I think but I don't think that's the whole story right I think there are the reasons why printf debugging is uh so popular and I think a large part of it actually is when we're debugging it's really what it's a process of trying to think and figure out how did that happen right um I don't mean like how did that happen or how did that happen I mean I mean I had some expectations of what my program was going to do when when it ran right and at some point reality diverged from those expectations and I got a different result maybe I've got an assertion failure maybe you know it crashed with a Segway maybe it gave me bad results or ran too slowly it's not just the program didn't behave in the way that I expected and the process of debugging of course is thinking back from where I observe the difference back to where is the root cause where does it where does reality diverge from my expectations of course uh usually it's more like that um and it can be that you go through a very kind of circuitous circuitous route if I can say that to uh uh you know to track back in some unexpected ways and this is really part of what makes debugging hard right often the bug itself happens a relatively long time might be just milliseconds but a long time in Computer World the the bug between the bug and you noticing this is why assertions are very useful right because they basically they they reduce that window and they're reduced that time the longer you have to think back in time um the harder it is but printf is good right because printf tells you what happened it's exactly what it's doing the debugger doesn't do that right I mean and the dynamic Checker not really either I mean Dynamic Checker sort of says okay this set of I've got a hand kind of set of bad things and none of them happened right or maybe yeah one of my set fixed set of bad things happened here but it doesn't tell me what the program did right in the way that printf does and even the debugger not really very usefully I think you can sometimes I think you can think of the debugger as um I I sometimes think of it as a bit like the these the the film The cinematography style that got popularized I think by the by the first Matrix film where you know that everything freezes and then the camera kind of pans around 360 degrees and you can see you know the bullet kind of in mid-air as it's flying through the air from different angles that's what a debugger does it lets you lets you freeze time and let you look at you know anything any piece of your program State you can look from any angle of what's going on and you can maybe step forwards you know one frame very slow motion or you can just run forwards again at full speed but it doesn't tell you what happened right it tells you what's happening so princess kind of good but obviously printf is the limitations of printf are pretty obvious uh in particular you know usually you don't print what you need you're printing out you're necessarily printing out a tiny fraction of everything that the program has done right the computer's issuing billions of instructions every second even if you're pregnant with being very noisy and printing you know 100 messages a thousand messages a second it's still a tiny fraction of what's going on right so you have to get pretty lucky or be pretty smart for what you need to be in that log so what we want is Both Worlds we want the view of what happened and we want the ability to see everything to move that camera around 360 Degrees look at any angle any piece of state and that's uh that's what we're going to get to so billions of instructions a second we're looking for that you know the ultimate needle in a haystack challenge what we want is the equivalent of a metal detector to help us and that's what time travel debugging is right it gives us the ability to wind the wind the tape back to any point in the program's execution literally any line of code that executed and C any piece of State this here you probably recognize this is from HG Wells is the time machine or the film of and unlike many of the later time travel sci-fi uh stories which I'm kind of interested in what happens if I can go back in history and change time in in the time machine he's more kind of passive right he's an observer um and what's going on and that's what we're talking about here so we're not talking about the ability to go back in time and change something and run forward on a new on a new timeline because that you know that famously you know there are paradoxes when you try and do that right and everything gets very complicated and uh uh it's actually not what you want what you want is to be able to know how did that happen so being able to go back in time and observe is exactly what you want and exactly what time travel debugger gives you so let's show you what this looks like in practice I'm going to show a couple of uh examples let me try and get a text message to some whoopsie I didn't do what I wanted I've got a text nice and big um from Leonard catova um like what languages do we could you use with those tools we are presenting yeah I mean I think time travel time travel debugging is is uh I think it's an idea whose time has come and it's available right I mean there's a quite a few languages that uh that are supported so C plus absolutely and that's kind of you know the the context of this Meetup right and uh C and assembly code anything actually the GDB can debug um can be time travel debugged so rust Fortran Ada um and there's also uh uh time triple debugging solutions for Java uh for um c-sharp on the Windows platform and for um um and and even um for JavaScript so the front end you know web applications so there's a number of different languages now that have support for time travel debugging not everything but you know chances are there's something out there that will work for you um I'll give it I've got a slide later on where I'll give a brief uh taxonomy of those again so so um that should hopefully make it a bit clearer but let's do a little little demo of this then right so I've got here a programs uh about little bubble sort program and uh it looks like this right it's just it's a classic bubble sort implementation and uh the main function gets just takes an array uh puts random data in it and then sorts it and that's it and this is the program here it doesn't print anything on the screen just get some random data and sort it but look at that there's a bug there's a a uh there's an intermittent bug here actually this failed pretty early on it usually takes a few more goes than that but okay I've got an intermittent bug and uh it's created a core file so let's have a look what's that course file so that's this one here so what do we do we load that up into GDB right and um and what do we do when we load a core file into 2db almost always the first thing you do when you load a core file into GDB is you ask for a batteries because what you want to know is what happened how did I get here right sometimes you get that kind of experience okay my back Trace is garbage I I do have debug information in this so I know I do but I've got a I've got a a smashed stack um now that obviously is a thing that can happen um more often when you get a Core file and you get a back Trace the back phrase works but it doesn't contain the information that you need because it's a tiny sliver you know it's a tiny sliver of of uh of breadcrumbs of what the program did you so you can see it you know perhaps a dozen functions that it's been through but it doesn't tell me it doesn't tell me everything that happened so if I'm lucky I load my core file back Trace oh yeah look I didn't you know check that pointer for null or something um but uh but usually it's from you know if I'm usually the best I'll get is a clue and often I just get well that doesn't make any sense that's that phrase looks like either impossible that should never happen or looks fine um but the snap but the core files everything about what the core file is here so the core file is a snapshot of the program State all the states with threads and the registers and everything but a snapshot of the program State at the point it crashed at the point it terminated right um if I get a recording a time travel recording it's like that except it's got that full program state for all of history so let's try and do that so I'm going to use here a tool called um RR uh RR stands for record and replay um and uh it's an open source tool it's packaged with most of uh most distributions these days so it's probably there on your system and I can record it like that um oh well I haven't um we've rebooted my machine since I last gave this demo so it does rely on the performance counter as being available so uh we have to set um so what we're going to do let's set uh uh Echo one to sudo t that's that's just um my password I think I want to miss that again oh it's hard to do your password when someone's watching isn't it right okay so this so I've now set up the system so that it's um uh uh got the necessarily um precise performance counters that RR depends on so we have let's have another go um and don't look at that it failed first time but um it usually doesn't right so uh but that one did fail first time I ran it so it's saving its execution Trace there so RR Replay that okay and what that does is give now this gives me look I'm an underscore starter so I'm right at the beginning of that program's execution and it's a recording of of everything that happened so I'm just going to continue this to the end okay and here we are when we've got our SEC fault and if I go back Grace yeah this you know okay slightly different batteries but still messed up so just like before um but I've now got time travel so what I'm able to do is reverse step I okay so step I in GDB steps you forward one instruction reverse step I steps you back one instruction okay um I just need to do that that's when the segment fee was received so I just need to do that once again and here I am now I've got a back race I'm only actually only at Main I'm going to go layout source so we can see a little bit more easily what's going on uh so yeah so look I'm at the return from Maine this is kind of I suppose vaguely what you'd expect right if I've if I've ruined the stack um let's look at the uh let's look at the disassembly code uh here so uh oh that wasn't a very good view I'm just gonna go back into that disassembly so here's my main function and here's you can see from GDB um here I am this is the uh little arrow here talking about this instruction I am indeed at the ret instruction so ret on x86 it will take what the stack pointer points to and Branch to that right so it's a full descending stack so if I print there are smarter ways to do this but this will do uh if I print the stack pointer um sorry Sprint what's at the stack pointer that's what's at the top of the stack so if I were to try to look at that memory that's where we're returning to yeah it's Boga to dress right I'm trying to return to it looks like it might be hex or some ASCII or something that rather than the pointer whatever it is it's not a valid address uh so right so I've got garbage on my stack right someone's written into my stack and and uh I need to know like when did that happen now this is a very very small program just for demo purposes but um uh I'm sure you've been there before with a more real program and it's really hard to know um but what I can do here is uh so stack pointer is that so if I put a watch point and uh I'm gonna watch the top of the stack I'm going to watch that address okay um now watch Point something's called Data breakpoint What it lets you just run the program until data changes which is it's a niche feature can be useful sometimes with time travel debugging this is like a killer feature right because you might be one step ahead of me or behind me here what I'm going to do is not continue until the data changes I'm going to reverse I'm going to I'm going to run backwards until the data changes and that will be the line of code that Rose recently wrote to my stack right that's what I care about so reverse continue gosh right I've gone back in time I've gone back here look what's going on we're writing into this array that's writing into my array on the stack so that's not like super surprising uh we're writing into the ice element I is 35 that is kind of surprising because array is only 32 elements long and of course the bug here is that I've got percent uh percent size of um which is of course uh bites the size of the ram bytes not the size of their own elements so I'm just I'm just writing over the end of the array um and that happens to be on my stack and uh so when I return I'm returning to to garbage so tiny little program you could probably just stare at the lines of code for five minutes and and spot this um but you can see hopefully how that will be very very useful in much larger programs with much more real kind of bugs and I think an important point to make is uh most of these time travel Technologies do scale uh so um I mean RR was basically invented to debug Firefox um and um you know it does work on on programs of that scale um you know our own stuff live recorder we we work on with programs that are sometimes terabytes literally terabytes of working set and literally days of runtime in extremists right and and um yeah modern time travel um uh debuggers do do scale the Microsoft time travel debugger is used extensively by Microsoft by the core teams by like the SQL Server team and um The Office Team and and people like that so and you can see hopefully how that's very very useful I want to show you um one more uh demo now that's still a bit of a toy program but uh it is um uh could give you a sense of how it could be usefully integrated into uh into the workflow so um I'm going to switch to okay right uh so Greg yeah so one uh question like is like time travel debugging as a package comes that with GDB automatically or is are the tool you just showed do you need to install that RR is a separate tool there is some time travel debugging in GDB automatically um but it's um it's really good only for very small programs it's very very slow and it's not super well maintained so the thing called process record so I could just start GDB normally and I'll show you very quickly um so if you start PDP normally um like this start and I can enter this command record and then once I've done record I can do that and I Can Go reverse down okay um yeah so so um you can just do that um yeah you can just do that but um it's very slow and um not super well maintained so if you do any some Modern like evx type instructions which libsy will do it'll stop at that point so you really probably want RR um or uh uh or life recorder or one of our sort of separate tools time travel debugging is built into the Microsoft win dgb um in dbg product um so it's a bit more kind of standard there okay um all right so so this this is a pull request on our actually on our internal GitHub at undo that I made and like every pull request I made uh I have a make it has some failures so so I can't run more I can't write more than a few lines of code without creating a bug as discussed this one was deliberate but um so when Paul made a pull request it kicked off some tests to Jenkins as normally happens right this is all pretty standard so some of those tests failed I can click through here and um I can look at the best results and um here we have the log of that test failure so this is like very normal right I mean the details are different but but the but the concept probably you're you're familiar with so here's the program here's some logs oh look here's an assertion failure um and um then there's some more stuff and there's back traces and but you know what I'm not going to go through all of this because I can tell you there's not any there's not enough information here to root cause this box sometimes when I get a failure and Jenkins I can look in the log and I get enough information to to record the bug at that point but that is the not the common case right um but what we have here in this and this uh Jenkins is this thing called Observatory so I'm going to just follow that link and uh this has got a bunch of artifacts some of these are recordings so here's a recording of that test that failed so click on that it's going to launch it up um what it's going to do is it's going to do quite a lot of work behind the scenes it's going to provision a machine get the replay session on that machine and it's going to get the right version of The Source Code you know the the the that you know Git Version that was associated with that run it's going to get any artifacts from from their logs things like that and critic is going to load up this recording and this will just take me uh a few seconds and it's going to dump me in there so just by that single click 30 seconds the system goes off and does what it needs to do to get everything together so that I don't need to do what you normally need to do when investigating a desk failure which is the first thing you generally need to do is try and reproduce it well I don't need to reproduce anything here I'm just I've just dived straight into the recording so here I am um so an exception has occurred because you know this assertion has failed so it's saying square root cash is zero and the correct value is 15 so hence the assertion has failed this by the way if you you might notice this is um this is vs code this is a vs code interface running in the browser um so I've got my call stack here on the left actually what this shows me is this is a multi-threaded program lots of threads uh thread number 10 is the one where the assertion has fired and actually you can see here from the call stack so vs code is kind of um nice and puts you at the at the last line of code last line where you have debug information for the source code but it's actually deep inside the C library because that's what happens when an assertion fails why don't you go end up inside a board and then inside raise so um that's fine we've recorded all of that we can record down to the instruction level so I'm going to hit this button here this uh reverse step out kind of uh uncalled button and watch the watch the stack as I do this and it's kind of like popping up the stack well you're probably thinking so what because you can always do that in even in a core file right but it's not the same as popping up the stack in a core file because it's really unwinding the execution all my globals and everything else go back to what they were it's not a guess about where I've been that's really is here as I saw in the last demo I can do that when I don't have a um but anyway reverse back into my code here and we can see we've got um all the data here and I'm going to do so this is like super cool here right so I've got my reverse step just like the step buttons that you're probably familiar with this has got a reverse tab when I click this we're going to go back one line right exactly one line and by the way watch the data up here in the top left because that will change as well so right they've also have gone back a line and only one piece of data changed at one variable change because that's anyone that that got changed yeah that's where it correct um now what's going on so let's just have a big more look at what's going on so it's got this cash calculator I've passed it in number of 255 and it's returned zero and it what it was supposed to return is is square root correct it's supposed to return 15. supposed to return a square root right the square root of 255 is not zero so cash calculates return the wrong thing I need to know why did that happen right now you know this is a nice little example of where the core file that information is gone I can't go back I can't Traverse the cool tree right other than just going directly up but this is time travel so I can here so here I go so I'm going to hit this button here we're going to reverse step into Cash calculate so we can see why did it do what it did okay so here we are look it's returning this is how cash calculate returns it returns in the cache Returns the ith entry in the cache I is 90. um so I can have a look at that what's the 90th entry in the cache tells me the square root of 255 is zero so my cash is in a bad state and that's why that's why it's returned the wrong answer and so now I need to find out um yeah why why how did that happen well it's a threaded program and I can see here I've got a lock and so yeah that's suspicious isn't it I mean that doesn't look obviously wrong but maybe there's a problem so what I'm going to do is back up uh back back back to there so this is just before this line of code executed so at this point the structure is locked right still it's telling me the square root of 255 is zero so yeah it doesn't look like anything obviously wrong with threads um so well you know what I'm going to do is I'm just going to get that next off the screen so um we've got a command here available in obviously called last which is a little bit like a contraction of a concatenation of what's point and reverse continue but I can go back to it's a little bit more convenient so I want to know when did that entry in the cache change so if I just go last gcash 90 it goes back in time to when that line when that cat was updated right it's the line of code that most recently wrote into my cache um and uh so right so okay I'm writing square root adjacent and number adjacent into the cache I'm actually Midway through updating the cache right because at the beginning of this line 45 so I can just go forward uh align that the cache is updated yeah that's the bad data right and if I step back to before that cache was updated okay so here the cache contains good data right the square root with integers of 40 is 6. if I step forwards this is kind of like you know Action Replay watching sports on the TV watch the data watch the data here as I step this forward step step that's it that's the corruption being happening right there writing into the cache um what's uh so what's what gives why is it writing garbage was writing number adjacent which is negative one and it's square root which is nonsense because you can't take the square root of negative one so Y is a number adjacent negative one that's not what I expected well I can just do ignore the numbers on the screen there that's uh a bug we need to fix but anyway so I can do uh last number of data to find out widest number of data contain negative one okay it's here it's being set number minus one and number uh here I can see is zero right so cash calculator got called they did the right thing got called within a parameter an argument of zero it returns zero but it updated the cache and it updated one entry either side on the basis some kind of locality of reference and so one of them was negative one and was garbage and my program didn't notice for quite a long time later uh and and when it tripped over the bad result and the assertion fired so again A Small Program just suitable for a demo but this is actually a canned demo of a real world um a nice case study of time travel debugging where one of our customers Cadence the chip design software people they have very complex software very long run times and uh one of their one of their customers was experiencing a problem where the soft Cadence's software was crashing one run in 300 after about eight hours of execution and uh this is just a nightmare and every time it did crash it crashed in a different way it was a major problem for that Customer because it sort of was disrupting their flow I mean it meant they couldn't you know tape out their chip and you know phone wouldn't hit the shelves in time for Christmas or whatever so um Cadence had their software Engineers on site with that customer for three months trying to get to the bottom of it right naked looking at core files every time they could load up a call file there was a negative one where there should have been a pointer but it was always in a different place there was just nothing to to to go on they couldn't find out where this minus one was being written into the in into their data and so that's when they turned to uh time travel debugging and they ran it with live recorder just set it up actually over the weekend actually won a bunch of machines just running again and again because took eight hours and only failed one running 300. but when I came in on Monday a couple of them had failed and so they took one of those recordings put a watch point on that negative one just like I did here reverse back and they had it nailed in three hours so they went from three months to three hours actually they went from infinite time so we're getting nowhere after three months to three hours so that's a nice example of the power of time travel debugging but I think if you integrate it with your CI as I've just showed here um yeah that's perhaps less uh high profile examples but if you routinely turning you know an afternoon debug session into 10 minutes and you just keep doing that the kind of compounding value of that is uh I think in some ways even more significant than those um amazing sort of months or years down to hours cases foreign so uh that's those are the demos that I wanted to show let me go back to some slides over there here aren't I um and uh yeah um that's a question yeah so are there any similar tools like RR but for bare metal systems so like do you have customers to use your system on embedded or like you know right right so that so so there are for bare metal um but now you need because you don't have kind of the um the layers of os and everything else to help you you need to you need the hardware to help you here so um Green Hills have a product called time machine and louder back have um their debugger which will work with if you're your system has to support it so you need an arm chip with the embedded Trace macro cell and there may be others I don't know about other designs but um if it's arm it needs something better Trace macro cell and I think you need to have the I don't know the details of this so it's not my field but you need to have sort of I don't know the JTAG sort of appropriately um you know that you can get at and things but if you've got everything that you need um you can then get the loud back debugger or the or the time machine debugger from and uh um and time travel debug at the at the hardware level yeah yeah and then and it's very good by the way and it runs you know like pretty much full speed and uh you get full kind of visibility so um there are different flavors of it so depending on which exactly which kind of uh uh embedded um Trace macro cell you have I think you don't necessarily get the data but if you've got the kind of top of the range ones you do get the data as well as the program counter information foreign can we use this tool on other custom Linux distributions yeah yeah so um uh so so I showed two tools when I showed RR and I showed live recorder which is my own company's tool um RR is a little bit more kind of it has requirements about uh has to have access particularly to the performance counters it needs SE comp and um a few other things of the kernel so so it does have quite kind of strict requirements but if all those are there then um you know and and you've got a suitable CPU and so you need an Intel um or one of the very recent AMD CPUs that supports performance counters with the appropriate with the appropriate kind of precision but if you've got all that then then yeah it'll work um our own product live recorder is a little bit less kind of uh fussy about where it runs um because it's a it's a it's it doesn't rely on on those Hardware features so or in any advanced kernel features so that will run on most and even quite cut down kernels um and then the other really nice thing is you can take these recordings um and uh and and replay them on a completely different system um uh uh you know you can take it on a customized embedded Linux and replay it on your Ubuntu running on your laptop for example um uh so yeah I talked about these earlier to the earlier question the different kind of flavors that are available so um we just saw a live recorder in the demo there um and we saw RR as well I showed very briefly GDP process record I talked a bit about Microsoft time travel debugging um Solutions and also there's a company called rev debug it does Java for Windows and I mentioned replay.io as well um for that sort of front end um uh JavaScript time travel debugging um I'm just going to go on to just talk a little bit well just before I do that actually yes so so time travel debugging is I think that's kind of the terminology that that everyone's kind of converging on this so the concepts here are kind of new and um you know everyone's been kind of settling on what to call it so over the last few years people put in reversible debugging by directional debugging replay debugging in the world is kind of standardizing on time travel debugging is the right term for this they're all basically the same thing um so let me just talk a couple of minutes about how how we implemented this and how tools like RR and Microsoft TD and others actually work because it's quite and I think quite interesting um you know technical challenge right so we as I said earlier debugging is about what happened so I'm going to step back in time right but another way of saying perhaps slightly more precise way of asking what happened is what was the previous state I've got my program you know like I've got I've stopped my program inside the debugger and I want to know what the previous state of it was like a previous instruction or line of code that executed so how do I go how do I do that how do I go back to the previous state well there's two ways that you can do this right one is I can just save the previous date so then I can restore it um now clearly I'm not going to like save the entire program state for every single instruction that executes because that would just be enormous and completely impractical but I could just save the Delta right which is a very common technique sort of MPEG style I'm just going to change what what what change between this store what change between this instruction and the previous instruction and then I can reconstruct those previous dates by going and applying those changes that I've saved kind of in reverse and that's actually that's what GDB process record does um it's still really slow and consumes loads of memory because you've just be back to this thing that the computer's doing billions of things every second so if I'm saving even though I'm just saving you know this registered update or every instruction um I mean something's going to change every instruction right otherwise think about it otherwise I'm in an infinite Loop just branching back to my to myself so something's going to change every instruction so that's going to be four bytes I mean at least several bits um every introduction so billions you know gigabytes gigabytes of data saved per second of execution and um and also uh it goes really slowly because it's just a lot of work to do between every single instruction so saving it is it works but um it doesn't scale really is the problem um so better to recompute it right I want to work out what my previous state was trouble is I can't just apply logic in reverse that doesn't work right if we've got a statement like this that's a reversible statement if I know if I've just executed that statement and a contains 42 and I know that the previous state a contained 41 right but that's not a reversible statement if I've just executed that statement and a and b both contain 42 I have no idea what a was before right that information like doesn't exist in the universe anymore but what we can do because we can't run a computer programs backwards but what we can do is Rerun them we can run them again and try and make it make sure that it does the same thing the next time I run it right so we use this kind of snapshot and replay technique so when in the demos I'm going back a line of code what actually is happening is it's going back to a snapshot and playing it forward to just you know right before where it previously was um and that gives me the illusion of stepping back through time um and so and this works because computers are naturally deterministic things right if I take a program and give it the same starting State and give it the same inputs as it runs it will always do the same thing this is why random numbers are difficult to generate right um because the catch is that the programs that are computers are deterministic except when they're not except when I've got any kind of the cat I just said that throw away statement I've got to feed it the same set of inputs as it runs and so that might be input to the network it might be from the user it might be timing things there are other non-deterministic stimuli particularly around threads and thread scheduling that's particularly challenging might be reading from shared memory and there's some instructions that are non-deterministic and if I add two numbers together and then the same two numbers I always get the same result if I do a read the timestamp counter I get a different result each time any kind of system call my life could get a different result um in fact if I could predict the results of a system call based on what my program stage was then it probably shouldn't be a system called right should be a library function so I've got these certain things which are a real minority they're like 0.001 or something of the instructions most of the instructions of the program executes are you know add these two numbers together move this thing over here jump over there and they're all completely deterministic um but just the very very few that are not we need to store those in an event log and then we can replay them and as we do so we can guarantee the program follows exactly the same exactly the same path and uh uh that's really that's the trick to this this is how how most of these tools uh work some variation uh on that so we need to store all these non-deterministic events um which uh how many there are will depend entirely on what your program is doing if you're calculating pi to a billion decimal places then there'll be very few external events that you need to store in the event log um if you're reading you know uncompressed high definition video then there's going to be a lot so it depends to tell you what the program is doing but typically the recordings that get generated kind of just a rough kind of rule of thumb typically it's like a few a few megabytes per second of recording so it's pretty efficient right these recordings tend to be on the order of where I don't mean one to ten one to 100 gigabytes is is probably the normal range I see them much smaller I see them much larger um but that's kind of typical kind of range so they're quite you know you're probably not going to put these as an email attachment and send them but they're pretty manageable pretty manageable things um just a quick plug for my GDP watch Point um tutorial a whole bunch of like five minute one minute um uh videos on little tricks and tips with just regular um GDB so hopefully that's useful for at least some of you any any more questions yeah that'd be a good question if there's any more questions I don't see any more questions in the chat right now but let's give people some time to type um thank you Greg what's a great presentation thank you very much and so um yeah so if you have any questions type them in the chat and otherwise Greg is available on LinkedIn um and probably if you'll post later questions into the chat back if you if you actually watch the video uh and mentioned Greg Greg probably will come around and answer your question on LinkedIn um and so far I don't see any new questions in the chat so that was an awesome presentation and life demo not easy to do uh thanks for doing and um there's anything else yeah no it was good thank you for um thank you for letting me talk about this stuff and um and there were some nice questions as we as we went as well yeah one thing um one person asked about uh courses online um and that might be a good question like does Undo have courses or like you know video series and Etc like where you learn more about this yeah yeah so we do as you can see here undo.io resources GDP watch Point um so there's a bunch of stuff there um that's on regular GDB a whole bunch of trading materials on um on time travel debugging as well um so yeah there's a bunch of stuff on the website and um we do also do training um to companies of you know sort of in-person in-person training sessions as well so if you're interested in that then um uh probably the best things you can just email um uh to sales at undo.io and um there'll be they'll they'll connect you with the right person okay um there's right now a question in the chat how effective would it be an empty and I think empty is Moody threading uh very um yeah I mean the demo the second demo I gave that was a multi-threaded program right it wasn't a much really bug but it was it wasn't really program um one of the main use cases for this is diagnosing difficult race conditions right the the thing that makes the thing that makes bugs difficult uh is well there's there's I think it's two axes for Difficulty says how long is it between the bug itself and me noticing recession failing or whatever um on one axis and on the other axis it's sort of how repeatable is it does it always fail in the same way or does it fail in different way each time and when you get a kind of combination of those things long time between the bug and the kind of notification of the failure and it's non-deterministic it's non-repeatable then those are really really hard to debug right this is where print I mean printf really lets you down here because you know yeah it gives you a few of what one run of the program did but you had any print tests and the program does something different um and so time travel debugging is super useful yeah that's really where it's most powerful where the bugs are the hardest and race conditions are a very that's kind of true of almost all race conditions right they're almost always non-repeatable and you usually don't notice something's gone wrong until sometime afterwards so um yeah time so diagnosing race conditions is like one of the main use cases for time travel debugging I would say and one question I was just wondering about your writing a time travel debugger have you used your own like your own time travel debugger when when writing your time travel all the time absolutely yeah yeah so um uh yeah a big fan of the dog food right and um I showed you that was the second demo I did that was actually our internal CI system and um and you could see you know we've been automatically generating recordings when tests fail um so that our Engineers can uh step through so yeah it can might slightly make your mind you know to sort of can be a bit of a bit of a head because you sort of I'm I'm debugging the debugger but yeah you know it happens happens all the time and and in fact we even have this is less common but sometimes sometimes we've found um that uh so so I our own code is actually quite a good test case right it's quite it does a lot of stuff shared memory and it's asynchronous and there's multi-threading going on and um uh generally it's a very good kind of test case workload for our own software right so it took us some time took us quite a few years before uh the technology was Advanced enough that we could eat our own dog food it was one of the because kind of one of the last programs that we could record because it just does everything and um at that point it was you know that that was um um you know that was that kind of um uh just massive improvement in our internal productivity when we could we could we could debug our own stuff and we occasionally have had you occasionally get a problem where um uh we've got probably another thing so we record so we so we record live recorder and the recording of live recorder goes wrong for some different way like this happens much less often these days thankfully but but still a very occasionally can happen so there have been occasions where I've got a recording of live recorder that's recording live recorder um I've never had to go more than three levels of three levels of recursion but uh you know in theory you can you could keep going okay that was an interesting story um and with that I think we're through and uh great matter for the next meeting at the Four Points so um thank you for your attention thank you for coming and um thank you for uh you know just making this possible uh kind of you know the first time we're actually live on LinkedIn was a guest uh thank you Greg excuse me so um so if you have any more questions like this post them right under the chat and Andrew probably will take care of that um and with that we're going to enter the live stream thank you to undo thank you to Greg and all the others in the chat thanks again thanks everyone