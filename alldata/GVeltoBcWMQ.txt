hey the single language productivity myth by the way I'm actually extremely excited about this this uh by the way what is this AI nonsense dude would you use like would you use like chat gpt2 to generate this article what kind of what kind of image is this I mean look at the figures damn this man is see Nom um but real talk um this is like really really really I think this is a super interesting topic because this has been one of the biggest debates that's been going on which is the reason why you choose typescript from both the front end to the back end is that you have this productivity gain um so I'm just trying to give like the I'm trying to give first the case for a single language productivity and so that means if you say you have a function called validate user input right depending on what it doesn't matter what form it is you could actually have validate user input that hands you back out the errors you're able to take those errors and then you're able to apply them both to your front end and give nice validation errors on the front end and then on the back end you actually share that logic so you don't accidentally have this Oopsy Daisy where you have one side validation that is really good and one side validation that's really bad or incorrect okay so that is like the defining kind of argument for why you want one language is the ability to share types and logic between the application on the front and back end does that make sense by the way this is what I always tell you if you cannot understand why someone would W would make an argument you first need to understand the argument itself okay full stack type safety is nice okay so again full I forgot I forgot to turn off alerts full full uh full stack type safety and one language don't aren't aren't the same thing okay you can have full type stack safety or full stack type safety and be in two different languages okay that's just a that's just a madeup problem that you've made up when whenever you think about these things okay I'm sorry I'm not trying to be rude but that's a madeup problem okay all right uh and what I mean by madeup problem is that there is other encodings that code Type information into it it's easier though again you've made that up you've made that up it's really not no real talk why is it not have you heard of Proto Buffs have you heard of Captain Proto have you heard of flat buffers have you heard of any of these other uh encoding schemes that include type safety on top of transfer protocols grpc have you heard of any of those things because if you do then you'd realize that type safety and type information can be contained at the request level uh or at the at the various levels so thus you do not need to have the same language on both sides okay message pack uh doesn't that also I'm not sure if message pack does but uh I haven't played enough with message pack message pack is Jan plus you know what I mean and so I use JS do for type safety yeah there you go anyways so when I read these kind of things it feels much more crappy to use uh these workarounds that is my general Point see I don't think it's a workaround what workaround are you talking about you're adding actual encoding safety meaning that when you request something from your back end you actually have encoded safety you're actually enforcing it at an encoding level to be something whereas when you do this and you just simply have JavaScript says it's this type you're not actually doing you're doing a runtime validation something like uh uh what's it called what's Zod there you go Zod is a runtime workaround for the fact that you do not have encodings Okay full stack development and full tax stack type safety existed before typescript these aren't some New Concept that only just recently happened okay how do en codings work they're just binary encodings with typing information inside of it so just imagine the fact like when you transfer down Jon you transfer Down video title video description D D D D D D D D D D D in a binary world you just have those values inlined and then you have like a type enum at the type that says this type is this and so then it can understand and parse through that thing really easily does that make sense it just makes it so that there is like it's just like imagine if you were programming in c and you took a struct and looked at it in memory now imagine if in front of that struct you put a bite that says what type of struct it is that way you could actually read through memory and understand which every struct is without having to pre-type it effectively or without having to like do some sort of weird guess typing you could actually have something that just returns it out right that would be like the idea okay yeah pickle yeah pickle for uh what's it called python I'm not sure if pickle does it but okay awesome uh why do that when Json is better Jon isn't better Jon is just simply an encoding in fact what people often will use is they wrap Proto Buffs over Jon they'll use Jon as their transport medium so that they can look at the request and understand what's happening but they have Proto Buffs doing the back and forth transferring so you actually get the types out you get real types out defined as opposed to just jesson and you saying this jesson is this type and then you don't have to do runtime validation because it's already been validated at a protocol level not at a runtime level so these things do exist they completely exist and like using something like TS prototype is super super easy or CS protuff is actually super duper easy it's shockingly easy just become a college professor at this point yeah but but the problem with the college professor is that college professors are largely abstracted from the world whereas I have plenty of I I I work in the real world in which we use protuff to tr transfer stuff because Proto Buffs are superior when you're transferring between many different languages if you want real full types like full stack safety from all the way from your store all the way to your front end you're going to need to use something okay because often databases are not they're sitting on their own thing and you're if you really need to get efficient you're going to have to write services around very very unique things and they're they may not be written in your little typescript language okay your nice little type like a lot of us don't have the ability to afford 1 Gigabyte per process because we want to use a simple language that gives us type safety I'm just saying okay so now that you understand why I would argue for it which is that it gives you the full stack type safety you get to write in one single language one single language is a huge value I I totally buy the one single language per stack idea because that way you don't have to have any sort of head knowledge or you don't have to have any sort of context transfer between two different languages as somebody who writes a lot in multiple languages I do not think it's hard at all but nonetheless saying the argument you only have to have one language to be able to write either front end or back end you have the same libraries that you can share between front end and or and backend you have the ability to share validation between the front end and the back end you have the ability to Define types in one language from the front end to the back end like these are all very positive things so there you go this is the singage language productivity myth that we're going to address can merco merco be able to help us understand let's find out all right it's great because you can use the same language on the front end and the back end I don't think it's great actually all right all right this is a pretty common assumption in the JavaScript world it is that's why notice that when I talked about all this I talked about it in perspective of typescript because this is a typescript JavaScript take you typically don't see this in any other language you gain productivity because you can use the same language on the front end and the back end but why exactly how are you gaining productivity I just add the word ing how do you gain productivity how much and and how much some common arguments and baked in assumptions are you only have to learn a single language you can share code between frontend and back end you get type safety between backend and front end easier development okay there we go like I L I feel pre read maybe or prehard this argument 10,000 times okay rust mentioned was rust mentioned in here maybe uh I let's see it's hard to disagree with any of these in theory again oh deployment oh easier deployment okay so I did misread okay I did misread and I am sorry I would just like to say sorry to everybody in my lifetime um all right it's hard to disagree with these the uh with this in theory all these being equal everyone should choose to write a front end and backend in the same language but they uh but all else is not equal okay okay why the arguments uh in any real project you already have uh you already use more like seven languages HTML CSS JavaScript typescript Tailwind squeal Prisma Vite okay some of these are not languages this is just now you're just getting crazy is Vite considered a language I don't think so is Prisma considered a language no squeal is Tailwind is not a language typescript and I mean typescript is like typescript is Sparkles on top of JavaScript CS s HTML is HTML language now you're trying to trigger me is this over turning into a fist fight here uh yaml I don't think yaml is considered a language uh due to the fact I know it has the word language in there and a bunch of dumb people will be like well actually it says the word markup language so therefore it's a language that's not how languages work a programming language contains logic okay you have to be able to do logic in it okay I hate to be the person to bust your balls but you can't just call everything a language okay language not a language um serverless versus server I'm not even sure how that's a language okay I'm not sure what's going on here versell that's a company Docker one could argue that that anyways uh8 config.js files this is hilarious okay that's funny maybe he goofed up on this one okay he did Scare quotes languages so maybe that's what he's saying he's scare quoting the languages so okay article busted you switch between so many languages tools and systems constantly one more is not going to kill your productivity I don't like this as a general argument for it okay I don't like that as a general argument for this just one more won't kill you well I would argue that's the whole point of you trying not to do this is that you have one less right uh versel the language uh knowing frontend JavaScript gives you almost no Advantage once you want to create a server that takes in a request and responds back with Chon this is okay now that that's a great argument this is a great argument right here right which is just because you know one thing doesn't mean knowing the language somehow gives you an automatic W right just because you understand how to color a box using style properties on an element doesn't mean you understand how to do a request response with a server right now you may be feel you may feel more comfortable because you already know the syntax but a lot of syntaxes a lot I mean most languages are C based that you're going to run into in the professional world so you're already going to have like a general just understanding to begin with right um let's see if you want to learn uh that you have to learn squeal how to model your tables entities Prisma omm how to authenticate on the server how long how to run how to run long running expensive stuff in the background how do you even route incoming requests how do you respond back with Json how do you respond with the 404 when you respond with let's see when do you respond with the 404 how do you do middleware how do you accept a file upload and sore it somewhere how do you generate an open aapi definition what even is that what the f is this course thing where do I host it how do you set up your pipelines and deploy automatically these this is actually quite fantastic this is like the the plight of the new programmer this is the plight of the new programmer because a lot of us have a lot of these things baked into our head and they just seem normal but imagine just like coming into this for the first time I it's been so long since I've had to experience this jolt we didn't even have middleware when I started okay middleware wasn't even a thing that word didn't even exist when I started web programming okay programmers dude I barely understand cores okay okay I barely understand it all I know is when something goes wrong and its cores I know I'll be Googling so what is middleware middleware is between the client and the server it's this thing that's on the server that does stuff to your request before your request is handled and sometimes it's also between your server and the client okay doing stuff it's a man in the middle but it's not like a man in the middle to attack it's a man in the middle that helps you gather your stuff right it can do stuff it's a filter is a nice example a filter a real example if I'm going to just be real and give you guys like a good information a good middleware would be like say you're writing a uh a server and you have authentication authentication could be a middleware is this request authenticated no it's not okay I'm going to put that information in there next middleware is this route require authentication it does we're going to have to respond with whatever type of one you need to do I forget which 400 is the you're not authenticated you need to suck it uh method but whatever one that is okay middleware is the thing that happens before your actual one 403 401 I forget which one it is I'd have to just go look up unauthorized right unauthorized which one's 403 403 is unauthorized people saying 401 for no what is unauthorized uh unauthorized uh unauthorized HTTP code 401 unauthorized that's the one you'd want to use you wouldn't want to use a four 403 is forbidden I don't think forbidden is the one you want 401 the unauthorized is probably the one you're looking for right this one's specifically stating the intent I mean really if I were you I'd probably use 418 uh HTTP code okay this one is probably the best one to respond with in all situations when you don't know what's happening just hit him with the 418 okay naturally just the best okay it just is what's wrong I don't know you're a teapot or I'm a teapot I'm a Honeypot uh imagine having to figure out all these for the first time in a node app versus a c app I'm not sure which one's worse as I haven't developed a c app in a long time no matter how experienced you are in front end JavaScript you gain basically Nothing by choosing node over C over go over Django I know I call Django because it's fun because it triggers people shut up uh I mean I guess I kind of gave away the game uh Django uh knowing react does not significantly improve your speed in learning or implementing any of these this is actually a really good this is a very very good observation okay cuz he's absolutely right just because you know react it literally gives you nothing when you're trying to figure out cores you gain understanding of syntax yeah but like how much different is Go versus JavaScript I mean you're you're really not there's almost no difference like there's a little bit of a difference but it's like syntax is nothing syntax is a really dumb argument unless if we're talking about uh like functional programming functional programming actually has such a different syntax mapped also onto a different idea that it makes it really really hard to reason about the first time you go through it right it means a lot for a beginner sort of everything means a lot for a beginner right like you're like hey guy who's ever made who's only made a hello world react app let's talk about file uploads right like that's a lot that's I mean you're going to be spending more time learning about file uploads than you are about the language the language is like incidental to the thing that's happening okay uh you can share code between front and back and so this is probably the most common argument I hear for so I I I'm I'm curious about this uh this argument I actually kind of liked this argument which is in general most of the things you need to learn are uh difficult and aren't really language dependent okay okay argument but it doesn't really say why you shouldn't or should uh yeah and you probably let's see and you probably shouldn't oh really I have seen this on uh on the JavaScript and on the net side it's an amazing in theory it just doesn't really work out in reality what happens most of the time is that one class tries to do too much this is especially apparent in the case of entity classes that also describe the shape of database tables okay we have a post class which creates post table via our om then we have a get post one endpoint which returns post naturally of course we also display Post in the front end and look and look at that we have a perfect class that uh for that post oh now wait this slug property on the post can never be empty on the database level let's add an attribute when you create a post via post post endpoint we want to make sure that the author is always filled so we add some validation with an attribute oh we also need to tell the user so let's add a client side attribute too somehow with internalization or internationalization of course this goes out of control every single time most people have caught onto the difference uh dto uh or model classes by now clean code priest got it I mean this does happen this does happen if you try to share you can't share everything uh I mean this is I I will say there is one really nice reason I mean one thing I really like about rust in this particular case is that you have the into right or you have from from SL into and so you're able to like transfer between these two types of objects really easily now obviously this doesn't really help you in the front end I'm not a huge fan of WM in the front end honestly as of right now it's not really great and so I do love that idea of being able to just like into this type now transfer this type down and I would love the idea of being able to share that code a bunch of int I mean rust is a bunch of int uh why don't I like wasm it's just harder to bug you know it's a lot easier uh in is great yeah in is great uh Proto buff basically uh and into cross language it is Proto Buffs is great Pro Proto Buffs effectively solves this problem because you have something that you need to create to be encoded to send down and it gets rid of all this kind of like database stuff in betwix I actually think it's a it's a pretty great solution to it it's the same thing you have to do to Json if you're just doing Json down and blah blah blah blah uh these three let's see uh these three levels of system don't map one to one and if you try to make it work which sadly you can you'll find yourself drowning in complexity you get type safety between the front end and back end this is not really uh a big deal with modern tools like open API and Swagger I have type safety between my aspet core back end and my nextjs front end to I just have to generate a client from my automatically generated open API contract with one command Shazam and now uh and now I call my type safe endpoints like this Shazam easier deployment honestly yeah it is definitely an EAS let's see it's definitely is easier to deploy a singular nextjs app than a nextjs app plus a backend server in C go or even JavaScript however figuring it out shouldn't cost you any more than a day uh yeah I mean obviously that scales with the complexity of the actual service you're doing and all that and I would argue by the time you actually get to the point of any sort of scaling complexity you've already have at least one person working on it parttime so maybe this becomes less of a thing uh but I do I mean I don't agree with the time frame Anytime by the way anytime I read something that someone's like it just takes like a day I just go it's going to take like at least a week okay that's called my internal programmer I just know that it's full of crap okay anytime I hear something's going to take a day I just assume a week we call it we call it we call it good okay so that's how I looked at it is that this is not a huge task it's not like it's going to take one person a year it's a small task it's not too hard I do generally agree it's probably not all that bad to do some of these things okay it's much easier though to not have to do it and he says that right there honestly yeah easier deployment it's easier to deploy a singular item than it is to deploy multiple this article is going that L route I actually like I mean I like the things that it's saying like type type safety it we've already had this in multiple different ways right you can choose a whole different set of different ways to do uh uh what's it called type safety this isn't a somehow a singular item and then even does this look that bam I got it right I like this like this I think this is honestly a really great argument for why you don't like like people think that it it can only happen one way now is it easier sure it probably is easier in the end to just never have to think about that absolutely but that doesn't mean uh could have been made a way better argument though yeah sure uh not exactly the hardest position to hold it's i i i on your team that things can be done better I just like that I like where it's going though okay we use things as jumping off points they don't have to be perfect so how to choose then if none of these arguments hold how do you pick your back end look into actual look at the actual programming language look at the ecosystem see how it feels to write C versus JavaScript versus python this is a I love this see how it feels cuz honestly the thing that may turn you away at first may become the thing you like the most okay super strange but this happens I can remember absolutely hating snake case and now all of a sudden snake case is kind of the thing I want to use everywhere right cotlin feels the best people love cining these nuts I don't know what it is this is how you write a a query that gets the newest post from an RSS feed to sub uh to subscribe to Prisma JavaScript await find many posts all this kind of crap blah blah blah blah uh EF core c now this is probably not fair potentially I'm not sure if this is a fair comparison but this is interesting nonetheless because I I'm not like a huge C guy so I have no idea but isn't this just in general isn't this interesting to look that if you use different languages and different things you can get different feels to how these things work um I like to look at these pure squeal select from where exists inner table order by publish limit right EF is great yeah link is that link is that what that is effectively using link some lazy loading implied but pretty good yeah which is good how does knowing how to create react context to share data between multiple components help you here I mean I actually really love this argument this is I think the best argument of the article right the C stuff is interesting because you mess up that link and your wear claws cannot turn into squeal you're going to do Full Table scan yes dangerous but I mean that's also I mean that's also things with any omm like item anytime you stop doing squeal and you start doing some sort of wrapper you may accidentally full scan a table just because you're not good at it right you can skill issue yourself pretty easily on any of these things it's it's truly skill like it's it's definitionally skill issues right uh I've been converting people to live view and then getting DMS thanking me and they wish they would have tried it sooner yeah shy right like honestly I am so interested again I'm in my go phase right now maybe 2025 will be my Elixir phase I'm not saying no to omm's I most certainly don't say no to om I know a lot of people love OMS and there's nothing about that uh but I you know like I'm just probably I'd probably rather use squeal until I think an omm's going to give me drastically better experience right like have you have you looked at squeal C squeal C is pretty good right it's pretty dang good no so this isn't a skill issue argument for why I use one one language versus the other some languages are better at certain tasks that's just that some languages are just better like if you like I can if you've never done string processing or iterators in Rust versus JavaScript then you wouldn't know the difference if you've never done curring in O camel versus JavaScript you wouldn't know the difference but when you do something else in a different language you'll see that some languages have a distinct advantage over other languages they just do like you just you just have to specify it in a completely different way and it makes way more sense it just does right you know it's just it's just interesting uh let's see all right anyways this was not a cherry-picked example this was my first query I picked up uh from my RSS feed aggregator sample repository easier when I was copying the code to create these blogs in MDX files from the Shad CN taxonomy repository I saw this code and I couldn't believe it compare date post all post filter post publish uh okay so we're going to first filter to make sure this thing exists then we're going to sort all these things okay this probably looks like normal JavaScript Mains in no Universe should sorting an array by one field on an object be a thre line two parameter operation that also requires an additional library for working with dates it's just funny uh I know you can write it in one line but one uh of your little uh tools called prettier won't let you there you go right got him this is where uh let's see so this I assume this would be something a little bit this is a different language I'm not even sure what language this is which one is VAR is this looks like JavaScript but old JavaScript this is how you get started with accepting HP request and Responding back with Jon and JS uh go and C okay CP okay sorry I mean you could have oh yeah I should have known capital letters I should have known the capital letters right there I should have known um this is how you get started with accepting HTP requests and Responding back with Jan and JS go and C hello hello world hello let's see handle Funk so this would be go hello world these aren't these aren't really equivalent right these aren't equivalent this one is Jon this one is not Jon this one is not Jon right they're not quite equivalent right right respond back with jesson and JS it didn't go right here right uh the language and Frameworks all consider uh on this type of syntax go and C come up with syntax sugar whereas JavaScript just can't other languages are not as scary as you think their programming languages are let's see their programming languages are superior their standard libraries are superior their ecosystems are superior for doing backend work this is a fair it's a fair statement go is really really good at what it offers right what it offers is shockingly good people keep asking for the article uh the go one's not even responding yes it is you may not realize it but notice that it respon it has a response writer and you're doing a file print F which takes in a handle and prints to it okay and so this is actually responding to the request using the formatter this is one of the cool Parts about go is that you have the format library and then you have a bunch of these different files for doing like printing to Strings printing to files printing to uh the the console right skill issues detected that was a skill issue detection yes in productivity you think you lose by writing C instead of JavaScript is more than made up by the ecosystem uh the tools and the language you will be better let's see you will be a better programmer with more clear understanding of the difference between client and server this might be obvious for more experienced people but I remember starting my first job doing web forms in aspnet the first couple months I just didn't have the concept of client and server just uh because everything is just there I just changed this bit of logic and then it did what I needed it to do where does it run I don't even have an understanding to think of the uh question yet beginners doing nextjs or react server components will 100% run into the same issue I me I think this is a it's both like this is both a blessing and a curse can we agree to that like what I mean by a blessing and a curse is that when you're first starting off it's nice to not have to know everything like the less you have to know the faster you can get up to speed but that also means that you you lose some of your ability to think through everything low skill ceiling versus low skill floor yeah like the the initial like I I think this is this can be both a good thing and a bad thing right every time I've done anything where some magic happens behind the scene and I discover it later on sometimes I wish this would have happened earlier you know what I mean I wish but it's not quite there um hold on Yo Knox what are you doing dog Knox what are you doing Knox what are you doing okay come on calm down he just thinks go is better than rust he could think it's better than rust for many many reasons okay come on calm down KNX what are you doing what are you doing make a make an intelligent argument dog KNX like make an argument don't just insult people this doesn't work so I'm going to give you a timeout okay you're going to go think about it okay I think that's like a day no it's not a day it's not even close I thought it was 6,000 minutes okay that's not a day you're going to go think about it for a second okay KNX I'll ban you absolutely all right uh by the way just so you know when you say ban me if you ask to be unbanned I won't unban you just so you know you're just banned forever okay two hours you got a 2-hour timeout anyways awesome what if I asked uh for a bon me uh people are strange people are strange democracy it's time to spread democracy all right here we go this is why let's see okay anyways we'll keep on going all right final thoughts JavaScript ecosystem is amazing for building front ends jsx is awesome Tailwind is awesome instant visual feedback when you save is awesome all meta Frameworks like nextjs and spelt with their magic reactivity the server side rendering static caching and routing gives you an insane amount of power for very little investment all of these are facts I think it's so cool like when I watch people do stuff with versell and nextjs and all that it like is tantalizing to think maybe I could like all of that so quickly but then you know I also remember I just don't want to do JavaScript libraries like tanack uh query or Shad CN or next o work great the landing pages I can just steal from GitHub that come with perfect responsive and little animations are great absolutely great right incredible Engineers have made JavaScript on the server bearable uh but that's it that's all it is and all it will ever be it is they I mean to be real everyone who has created all these things they are incredible Engineers they are incredible Engineers that have taken a language that is really rough and done quite a bit I'm very impressed with it in general JavaScript on the server does not compare to any of the real languages uh so typically when you say things like this this just turns people off uh because people get really offended when you don't call JavaScript a real language so I think it's better to say JavaScript on the server does not compare to any languages designed for the server right like go is designed for the server right I I don't call this gatekeeping okay this is not gatekeeping okay it's not gatekeeping it's just this is the problem is is I hate the term ter Gaye keeping because honestly if someone calls JavaScript not a real languages and your feelings get so hurt that you feel discouraged from programming then stop programming okay you got to grow [ __ ] backbone okay life is going to be rough it's going to be mean people are going to cheat you people are going to be absolutely awful to you you really truly have to be able to grow a backbone and just simply let these things slide off okay don't let someone insult your favorite library and then get hurt okay who cares if someone goes to me and says go is for idiot I don't care fine think of me as an idiot like what why do I need to win your respect I don't need to I don't need it I haven't needed it and it's not something I need to do if I worry myself with every last person that has insulted me can you imagine what it would be like can you imagine how miserable I'd be if I went onto Reddit and searched up my name it would be awful the amount of [ __ ] talking that happens is just terrible I'm not going to do it I'm just not going to do it I'm not going to accept this term gatekeeping in this kind of sense okay gatekeeping would be if this guy worked at a job and said hey do you work on JavaScript do you like JavaScript on the back end and then silently locked the door on you and no matter how smart you were completely tried to destroy you that's gatekeeping saying JavaScript sucks is not gatekeeping okay that's called insulting JavaScript there's a huge difference and you should know the difference between the two okay because he does not have a gate in which he is keeping okay it requires a gate to be kept for gatekeeping to happen Okay this a there's no gate here okay this is like chesterton's fence more than anything else walk around the fence if you don't like it okay are you okay this I'm just trying to clarify these terms because people use these terms so wrong they are attempting to gate keep what gate are they keeping there's no gate someone's saying don't use JavaScript on the internet for the backend contains no gate Hodor Hodor okay they're they're just yelling Hodor the gate is a lie there is a gate there's no gate to be kept you have to have a gate to keep for it to be called gatekeeping how is this how is this happening what has happened to your guys's vocabulary okay okay just remember no matter what happens no matter what somebody says to you you don't have to listen now maybe it's good to listen okay maybe you should hear them out but you don't have to listen I know this is crazy I know this is hard somebody's opinion can't hurt you okay if someone thinks javascripts bad for the server stop caring okay go right you know what you should do in fact if you don't like the opinion this is what I want you to do I want you to go and create a hundred servers right now in JavaScript really show it to them really just stick it right back at him then go tweet about it and go love it and go show how easy it is and guess what if your opinion's better and people like your opinion more they will do your opinion and they won't do this other person's opinion okay okay why do you think I use go and other things instead of just going with the flow cuz I don't think JavaScript is a great thing in fact I would say right now if anything using your guys' definition right now every person is gatekeeping for JavaScript okay Twitter is filled like how many times have you read on Twitter that if you do not teach somebody react in JavaScript you are trying to destroy their career okay like that's literally said on I can tell you who says that in fact right they say this kind of crap like like in no not Theo not Theo the Theo does not say these kind of things because that is it's it's that is too one-dimensional and stupid there's like other there's like literally other fields out there other than web programming server lless is great yeah it is and you don't even have to write JavaScript for it you can write it in a lot of different things um I know this is wild I know this is wild Theo thinks it I don't think Theo thinks it here here's a here's a here here's a good here's here's like a good thing to do by the way don't assume how somebody else thinks now if Theo says it then you can say Theo says this but don't be like well you know I've seen Theo tweet that he likes JavaScript so he probably hates people that don't use JavaScript right like maybe he doesn't maybe he just likes JavaScript you know like I don't know sometimes a cigar is just a cigar you know what I mean like sorry Freud we're not going into we're not getting into these things all right I'm not sure uh you but let's see you seem to think uh that I think gatekeeping uh gatekeeper is a horrible person no I mean we all gate we all gatekeep every person I don't think gatekeeping is bad you just have to define a good gate okay let me tell you what I mean by that when you hire somebody do you want to hire somebody that's talented at programming or someone who knows nothing answer's pretty obvious that's called gatekeeping you are lit gatekeeping but you have a gate that you've specified right there is gatekeeping that is healthy and good and everybody does there is gatekeeping that is bad that people do that is dumb right if someone if I'm in an interview uh that's gatekeeping bad bad uh oh real world real world you are gatekeeping the definition of gatekeeping no I'm not I'm actually just doing actual I'm just I'm just telling you what words mean I know this is hard I know words are hard and I'm sure you guys are struggling with lots of words okay whoa two Chats on the screen man this is getting meta this is hilarious I'm I know this is crazy this is actually crazy this always every time this happens I think about how like how bad we've become at explaining things or how like okay how about this one instead of arguing over the definition of gatekeeping or not gatekeeping all these kind of things can we at least all recognize something that's happening right now which is we all have different ideas in our head when we use the same word having no gatekeeping is a type of gatekeeping of course it is right we we're all having different ideas of what this thing means and this is leading to massive differences no we don't no we don't you don't even understand it oh really wow okay I guess I was I guess I was just wrong there Gaye keeping is bad gay keeping is not bad gatekeeping is literally not bad gatekeeping is literally what you're doing like everyone does it everybody does it dude you gate like Harvard gatekeep based on test scores oh my goodness no oh my goodness I can't believe a college I can't believe a college gatee keeps they should let it everybody how rude are they you know people overuse the term so it just means nothing anyways anyways whatever let's agree that to never use that term again yeah can we just not use that term again yeah I'm not gatekeeping but gatekeeping is not only explaining uh at listening too wait what I'm not even sure you I feel like I missed like the other half of that sense you're gaslighting me into you're gaslighting me into thinking gatekeeping is hot doging yep there we go we gatee kept the gatekeep term okay there we go all right anyways how about we how about hey how about we spread some democracy do you guys want to spread some democracy sounds like arguing semantics no they they they have vast not even joining I'm telling Thor asking Thor if he wants to do this because we just got done having a 40 minute discussion on something I don't want to have a 40-minute discussion for hey the name the name is I really did like the ending to this article which was like notice the ending to this article gosh I've now lost it this like this whole thing these are all awesome with awesome people like that's the reality is nextjs felt uh tanack Shad CN next off jsx like these are all I mean I can't believe people made these things I completely impressed by them right I think that is a very good starting point anyways we need to stop with it depends and you or use what you're familiar with advice yes it does depend but only for real languages not for server side JavaScript this is where he falls off the wheel this this is where he falls off a little bit on where he was going okay I was we were really we were really working here we were really working on something and then he just fell right off the cliff we won't win against JavaScript industrial complex marketing Engine with it depends or use what you're comfortable with I genuinely feel sorry for people who got tricked into writing JavaScript on the server I've seen what it does to people I seen some [ __ ] man uh just try it pick a backend language and see out feels I I think this is great advice just pick a back pick a language designed for the back end and try it out this is great this is great advice now now after you try it out and you become familiar with it and you're pretty good at it and you don't like it at least you can talk about it you know what I mean if you're learning you're never failing yeah that's actually a great take I think this is good just try it minimally try it try go honestly if you're coming from JavaScript try go you can try rust a lot of you are going to spend a lot of time using rust and never getting anything out of it that's my my only real worry about using rust is that most of you will use rust to the point point where you are like incapable of actually building anything great and then you find that it's stupid and then you quit right and so yeah or just go try boot. boot. prime boot. prime ashad boot. prime are you interested becoming a black inder boot. Dev does Python and go by the way L take JavaScript devs shouldn't use rust what why not if you're going to hit me with an L take with an L take you got to L you got to you got to mansplain your L take to me right now right now they'll rewrite everything again that's the point of rust that's gatekeeping called [Laughter] it but real talk like that is literally the point of learning a new language is to rewrite things that were written incorrectly that is why like es build that is why s swc that is why vit test that's why all these languages are popping up going yeah we really did a bad idea of writing everything in JavaScript let's unwrite some JavaScript parts and get the get the speed up that we need some gates are worth keeping though this true ask yourself why the gate exists and once you understand why it exists then you can take it down the name is the primagen