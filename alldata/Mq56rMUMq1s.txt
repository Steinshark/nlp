hi everyone last episode we just got this editor window popping up so what I'd like to do now is get the gradient texture drawn in here so let's go to the gradient editor script and in here we're going to need a reference to the current gradient so I'll make a custom gradient variable here called just gradient and then also going to make a public method for setting the gradient so this will take in custom gradient and we can just say this dot gradient is equal to the supplied gradient okay so in the gradient drawer where we're getting the window we can hold a reference to that window just by saying gradient editor I'll call this window is equal to the results of the get window method and then we can say window set gradient and pass in the gradient object all right so let's save that go back to the gradient editor and in here to begin drawing on the window we're going to need a on GUI method and I want to first of all define the rectangle that we'll use for drawing the gradient texture so I'll create a rectangle call this maybe gradient preview rect is equal to a new rectangle and this is relative to the top left corner of our editor window so zero comma zero would be starting at the top left but I don't want it to be right up against the corner I want to have some sort of border so let me quickly define a constant int call this border size I can set that to maybe 10 and I'll use this here border size from a border size then for the width we can use position dot width so position just holds the position and size of our window and I want to subtract from this border size multiplied by 2 and then we can just pick some height so I'll go with say 25 and now that we've got this rectangle we can simply say GUI or draw texture and pass in the gradient preview rectangle and for the texture itself will go gradient get texture and will pass in the width of our preview rectangle but cast to an integer like so all right let's save that go into unity and once it's finished it's compiling I'll click over here and we can see our gradient texture showing up all right now if you want to be able to start adding in new colors to the gradient we're going to need to do a little bit more work on the custom gradient script so let's head over there I'm going to start by creating a public struct called a color key and each color key needs to know two things it needs to know its color of course and it needs to know its time and so time I'm just using in the same sense that we use it up here where zero is the start of the gradient and one is the end of the gradient now what this color key struck to be serialized so let's add the system dot serializable attribute and I want these two private variables to be serialized as well so we can add the serialize field attribute to both of these okay now I want other classes to be able to get but not set and the values of these two variables so ideally I'd like to make these public and read-only but unfortunately unity doesn't serialize read-only variables and another thing that how we might think to do is to use automatic properties so here we could say get and private set and that'd be pretty good as well but it runs into the same problem unity doesn't serialize these auto properties and so we'd find that the value of this variable keeps getting lost in the editor instead we'll just have to write out a separate properties for both of these so I'll create public color property first of all just called color with a capital C and I'll have a guest block where it returns the value of the color variable but of course no set block all right and then I'll just do the same thing for time it's a public float time get and this returns the time variable okay yeah we also need a constructor to initialize these two variables so just press command I and just generate a constructor for those two like so okay the custom gradient is going to want a list of color keys so that's great list of type color key I'll just call this keys and I'll set it straight away to a new list of color hues and we want this to be serialized so I'll use the serialized field attribute here as well all right now the gradient editor needs to be able to get keys from this private keys list so that it can display controls for them so let's create a public method returning a color key and I'll just call this get key and it takes in an int I for the index of the key that we only fetch as well simply return keys with an index of I then we'll see need to know how many keys are in the keys list so I'll just make a public int num keys and this will just return keys count we then also need to be able to add new keys so let's create a public method add key this can just take in a color and a time and we'll start by constructing a new color key object so I'll just call this the new key set it equal to a new key passing in the supplied color and time now we want the keys list to be sorted based on the time of each of the keys so the keys with a lower time should be at the start of the list so we're not just going to add this new key on to the end of the list rather we're going to loop through all of the keys currently in the list so for and I equals 0 I less than key store count will say if the new key has a time lower than the time of the key that were currently looking at then we can just insert the new key into the list at that index so Keys dot insert index of I and pass in the new key and at that point we can just return to exit the method now of course if the new key has a time that is greater than the times of all of the other keys in the list then this will never run so at the end we're just going to add the key on to the end of the list okay let's now you have to work on the evaluate method so I'm going to start off just by saying that if there are no keys in the keys list so if keys dot count is equal to zero then this could return color dot white as a sort of default but otherwise we want to start by figuring out which two keys this time value lies between so I'm going to create a color key variable called key left and by default I'll just assign this to the first key in the keys list and I'll also create a color key key right and by default I'll set that to the last key in the keys list now we're going to have a loop from I equals 0 to I less than key store count minus 1 and the reason for the minus 1 is just that at each iteration we're going to be looking ahead one key so in here I'll say if keys with an index of I has a time that is less than or equal to the supply time and keys with an index of I plus 1 there's a time that is greater than or equal to the supply time that means that the supplied time is sandwiched between these two keys so we know that those are our left and right keys so we can set key left equal to keys with an index of I and key right two keys with an index of I plus 1 and at that point since we found our two keys we can just break out of the loop okay now the color that we return is going to be a blend between the left key color and the right key color with the strength of each keys color of course depending on how close the time value is to that keys time so let's create a float here called blend time and I'm going to set this equal to math F inverse Allah from key left dot time to key right dot I'm passing in the supplied time value so blend time will be zero if time is equal to the left key time and it will go all the way up to one if time is equal to the right key time so now that we've got that we can simply return color dot lap from key left and color to key right dot color using our blend time all right so to test this out we're going to need the ability to add keys in our gradient editor so let me save this and head over to the gradient editor script and in the on GUI method I want to detect when the user left clicks in the window so I'm just going to create event GUI event is equal to event dot current and and down at the bottom here I'll say if GUI event type is equal to event type dot mouse down and I'll make sure this is a left mouse press by saying GUI event dot button is equal to zero then first of all we want to pick a color for our key so for the moment to miss guru make this a random color by saying color random color is equal to a new color and I'll just pass in random dot value for the red green and blue components then we want to figure out the time value for our new key based on where the user presses on the window so that's quite float key time is equal to math F dot inverse slap between the start of the gradient preview rectangle so preview rectangle X and the end of that rectangle which is great in preview rect and dot X Max and then we'll pass in the x coordinate of the Mouse with gooey event Mouse position dot X so if the mouse is at the left edge of the preview rectangle our key time will be 0 going up to 1 if it's at the right edge all right so we cannot just say gradient dot add key passing in our random color and our key time we would of course like to be able to see these keys in the editor so let me create a constant float key width I'll set that to 10 and a constant float key height shall set to maybe double that then over here I'm going to loop through all of the keys in the gradient by saying for int I equals 0 I less than gradient dot num keys and then I can get custom gradient dot color key call a key is equal to gradient dot get key with an index of I now I want to define a rectangle for the current key that I'm drawing so I'll call this the kee-rect set this equal to a new rectangle now it's exposition is going to be gradient preview rectangle and dot X plus a gradient preview rectangle dot width x key dot time so you can imagine if the key time is zero then the position of this key will be at the start of the preview rectangle and if the time is 1 then it will be at the end of the preview rectangle all right so that makes sense I also want to subtract from this half of the key width just so that the key is centered at that point then for the Y position I want this to be just a little bit the bottom of the gradient preview so I'll say gradient preview rect dot y Max Plus border size all right then for the width and height I'll just pass in my key width and my key height I'll then just say editor GUI dot draw rectangle we want to draw the EQ rectangle and I want to draw it with a color of key dot color ok let's save that and see if this is all working so wait for this to compile and then I'll open this up and if we click anywhere in the window we should be adding in a key but currently it's not updating immediately here and that's just because we aren't forcing it to repaint the window whenever we click so after I've added a key here I'm just going to say repaint which is a method in the editor window class so with that change I'll save go back to unity once again wait for this to compile and then I go to my other gradients here and should be able to click in and see this add he's immediately so that looks very nice of course currently we can't do anything like actually change the color of a key or move a keys position once we've added it but that is all stuff for the next episode so I hope you'll join me next episode to do all of that fun stuff and until then Cheers