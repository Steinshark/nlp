I feel compelled to do a coding demo today because we recently had an episode with Oscar Wickstrom on property testing and while it's fresh in my mind I can't resist doing a quick demo for you because there are two things I really like about property testing that I think I can demonstrate the first is it's much more thorough at testing software than human beings are it's much more thorough than I am and I like that I like giving work to a computer when it's better at the work than I am the other is that property testing has a terrific return on investment in the places where it's a good fit it does so much work for so little effort you know the bang for buck is fantastic and I think I can show that to you so my number one use case of property testing is serialization I've often got some data that I'm sending back and forth over a network probably as Jason and I would like to be certain that whatever I write out I can read back so I'm going to do a demo of that with property tests so have a look here we'll start with a fresh directory and I'm going to use one of my favorite languages for this called Pure script it's one of those languages that compiles to JavaScript it's a very nicely designed language it's got a great type system and it works really well in the browser and on the back end so it's kind of become my go-to full stack language which is great I can write one language for both sides but it does mean a lot of Json wrangling so this is a really useful technique so let's get started uh you can skip in the chapter markers if you don't want to see the whole thing but let me install some packages first so if I do mpm install at development time I want pure script I want pure script language server which will give me LSP support and I want my favorite code format pery and then I need the build tool for Pure script which is called spago I assume because it's the Australian for spaghetti I'm not quite sure why it's called spago but if I download those that should give me the environment I need to write P script and I'm going to say spago and knit for a new project and that gives me a base P script project now I need some P script libraries I want to install my favorite testing Library which is called spec I want to do property testing so I'll need spec quick check for that and I will also need simple Json which is my favorite Json serialization library and one more I think I'll get debug I think we're going to end up using the debugging tool so I can show you some extra stuff under the hood that should be enough if I do spago test that will compile all my libraries down and with a bit of luck y you should add some tests yes I really should but the tests I don't have succeeded great okay so some coding why don't I leave the test Suite running in the background like that and have a look at the two default pure script libraries I've been given okay the one on the left is my main the one on the right is my test so I'm going to take everything out of Main and Define a new type called user and the user type is going to have a name which will be a string and an age which will be an INT let's get one more primitive in let's have gender which everyone knows is a number there we go so that's the type I would like to serialize and reliably read back let's have a look in my unit tests I want to describe a test Suite that says Json round trips always work um and then I want to say uh we're testing main user in real code I tighten up some of these labels but for the demo that is fine my test is going to look like this I'm going to say it's the property testing Library why don't you go away and give me a user which has the type user that I've already defined on the left I'm not going to tell you how to do it just go away and generate me a random user and then with that user I ought to be able to say no matter what user you give me if I write that user out as Json and then I read that back as Jason the thing I get back should be exactly equal to the original user right that's the definition of proper serialization so how do we make that actually work that's the shape I need to do a bit of tightening before this will actually execute so the first thing is that describes a test Suite to actually run it there's some magic words you need to say to run the test Suite this is in the documentation for the spec Library say launch a uh run spec with a console reporter uh like that that should do it and then the other thing is writing Jason always produces a string reading Jason could say well I couldn't read it there was a serialization error so I need to say either this was like successfully decoded as a user or it was an error message right I need to do something like that it's going to come back wrapped in some kind of error or not structure and the name for that in pure script is write so I need to wrap it in a right constructure which you can read as like okay or success that's pure script syntax going to try and go light on that so we can see the shape of things with that I'll just do the code formatter over it and let's just see see if we can get this to compile and I'm probably going to go through an import dance here let me race through that hopefully it won't take too long if it does I'll fast forward but if you're hearing this it didn't take too long and uh I think it's nice to see the entire process so let me just import all of these uh yep almost there as we go through this can kind of see how the abstract syntax tree is constructed yeah there we go okay so that test compiles I just take out that warning let's have a look at the test Suite Json roundtrips always work main user one test passed it works but I don't think on its own that's very convincing so let me do this I said we probably want to use the debugging Library if I do import debugs spy this is a very useful P script function I can wrap this right Json call and I can change this so it says take the user write it as Json but before you do anything else let's just have a peak let's have a cheeky peek at the raw Json if I write that then the test case runs and it's much more convincing I think you can see here we're generating loads of different unit test cases all practically for free we've got name we've got genders we've got ages we've got those Corner cases like empty names or negative ages or utf16 characters in the name or unprintable characters in the name all sorts of stuff and it's just testing I think it's testing about a 100 it's tunable I think it's a 100 out of the box a 100 different users randomly generated and checked that they serialize in both directions that's a pretty good test that's a lot of work for four I'm going to call that four lines of actual test code that's cool but I think we can go further I think we can go further with this so let me come along a couple of weeks later in this project and say actually we need a new field on users we're going to keep track of whether someone's an adult and I'm going to add in a Boolean how much work do I need to do to bring my test Suite back up to spec if I write this file absolutely none I get all the generation of the new kind of user and all the serialization tests absolutely for free I think that's cool but we can go even further than that so if I now Define a new type called uh let's say department and a department consists of a title for the Department which is a primitive string and some members of the department which is an array of user so we've got all the things in here we've got primitive string a collection of a custom type and now I'll go over here I'll copy and paste that user test and I will say change all the users for Department y so I got four new testing lines I could abstract this out into a helper function I won't for this video I won't yet but in real code I probably would now if I write that and make sure I've imported Department uh and make sure I've written both files so I can import Department there we go now look at that I've got Department tests too and they all serialize nicely and I'm starting to get random things like emojis in there and uh what else have we got and interesting things like the edge case where there are no members or lots of members or one member or exotic characters in the title all all that stuff completely for free and I can keep rerunning it and get more test cases and it's fast it's generating loads of different data and checking that they all will serialize successfully that makes me a lot more confident than a handful of handwritten unit tests I like that uh let's just do one more thing to drive the point home so I am going to now come along and say users were more complicated than we think gender isn't a number it's much more complex than that it's a complex time Ty and a complex type as you will know contains a real part and an imaginary part and so I've now made the subtype more complex I don't have any testing for that will I once again get all my updated tests for free yes I will and there we go gender is now a real number and an imaginary number and it's all mixed in there all for free all vastly more complicated and vastly more thorough unit tests than I would ever write by hand and that to me is the magic of property testing a little bit of test code that pulls a lot of weight and sometimes the maintenance of it is cheap and it's often completely free I think that's compelling and that's all I wanted to show you if you liked it click like if lots of you like it then we'll do more coding videos and if you'd like to know how you can take the idea of property testing much much further in much more hairy situations as I say we did a deep dive interview with Oscar Wickstrom recently there'll be a link to that showing up somewhere on screen now and he goes into some really nice strategies for property testing so I'll leave you with him thanks for listening