what can German industrial design principles from the 1970s tell us about modern software development that's a weird question but the answer is a lot more than you might think a while back I read a really interesting article about derer Rams he's a German industrial designer he's best known for his work at Brown you know the Shaving equipment and also for his 10 principles for good design by the way did you know that the kids of D rums and the kids of Albert Einstein together created the band Ramstein you probably didn't know that because it's complete nonsense anyway why should we care about principles that were aimed at physical products like radios and shaving equipment well it turns out that these principles are actually Universal and they can serve as a valuable framework for dealing with any type of design questions in fact you see the effects of his 10 principles in many modern designs including uh Apple devices as well as Furniture now I'm not an industrial designer myself but when I read the article it got me thinking about how these principles apply to software design and development so today I want to walk you through these 10 principles and how they can help you write better software I'm not really going to show lots of code examples in this particular video it's more of an ideas type of video now next to these principles there are a lot of other things to look at when you want to improve your coding skills and one thing that I found really helps is to look at other people's code doing code reviews if you want learn how to do this check out my free code diagnosis Workshop where I teach you the most important things to look at you can sign up for free at iron. code diagnosis in the workshop I take a closer look at some existing libraries you might even use some of these in your own projects this Workshop shows you a three Factor framework you can apply right away to train your code diagnosis skills so iron. Cod diagnosis the link is also in description now let's dive into German industrial design sorry the first principle is that good design is innovative now technological development of course always offers new opportunities for Innovative design especially if you're dealing with Hardware devices but actually this also holds through for software design Innovation and software can manifest itself as new features better algorithms or even a completely new way of doing something like for example integrating AI into your application or you could decide to use new features in Python that were not available before one thing you have to make sure of though is that that Innovation doesn't complicate things but actually makes the software more useful and intuitive so don't think hey we have decorators let's use them all over the place no use them where it actually Mak sense and makes the software more useful and that also leads me to the second principle which is that good design makes a product useful people buy a product to use it so it has to satisfy certain criteria other otherwise people won't buy it and that's in part functional but there's also Aesthetics and uh psychological aspects to a product being useful or not if you look at software applications it means that a well-designed application should solve a problem effectively it should have the features that are needed to solve the problem but at the same time it shouldn't be so complicated that the user is completely overwhelmed and you see this happening in a lot of longstanding tools that you get things like uh feature creep but also uh a bad example of this is websites that may look beautiful but at the same time are very hard to use because you simply can't find the information anymore due to all the animations and the onepage shifts that are uh completely confusing and if you're looking at code and design an example of this is that you may have functions with lots of parameters that allow you to do a billion different things but because of that your code becomes really hard to use because you have to set all these parameters so making software useful is not about adding tons and tons of features it's about keeping things simple a third principle is that good design is aesthetic so a product can have a certain aesthetic quality and it makes us want to use it and you can also apply that to software right if you have really beautifully written code that has nice type annotations and is really really straightforward and intuitive to use you might find the code beautiful and you will be more inclined to use it I know for me that plays a big role in how I decide which libraries and Frameworks I decide to use I definitely have a soft spot for Aesthetics of code and I think it's really important part of design to take it into account when you're writing Cod like hey is this actually beautiful do I enjoy working with this code because that makes me want to use it more and beautiful code is not some sort of magic it can simply be well structured clean nicely decoupled code that doesn't do too many different things code that's consistent using the same style everywhere the fourth principle is that good design makes a product understandable it should clarify the structure of the product and almost make the product talk being self-explanatory if you're thinking about software then you need to make sure that your software is self-explanatory that the user interface communicates clearly what you can do with it without you needing a manual so in code itself that might mean good documentation code comment so that the software is understandable to developers but also things like uh decent naming of variables functions modules organizing your modules logically so things are easy to find uh provide tutorials to developers that are using your library those kinds of things the fifth principle is that good design is unobtrusive products they fulfill a purpose they're like a tool they're not a decoration or works of arts for you to enjoy the idea is that design is neutral and restrain not on foreground so that the users can use the tool as they like it and for software that's the same we want to develop a tool that helps the user rather than that imposes a particular way of doing things so it should be flexible enough to accommodate users with various needs and in a sense that speaks against Frameworks that are extremely opinionated and want you to do things in this very particular way now I'm not against that in a sense that I think that tools like Fast API also have a specific way of using it and that makes a lot of sense but it also still allows for a lot of flexibility whereas a framework like d Jango for example really is pretty uh restrictive in the way that you're supposed to use it and if you don't use it in that particular Jango way then you're going to run into a lot of trouble in the end though that's always a careful balance between making the tool easy to use but not impose a two particular way of doing things principle six is that good design is honest so you present your product it should really do what you say that it does it shouldn't manipulate you and make promises that you can't keep and the same holds of course for software uh where you also promise things uh related to Features performance uh the benefits that it has other things related to honesty and software development are transparency about what data you're using how you're using the data and are you sharing that with third parties and are you open about the functionality that your software actually offers principle seven is that good design is longlasting we don't want things to be fashionable and then within a few months we can't use that anymore now I think in some domains especially JavaScript and web development we see aspects of things being fashionable you know one uh front end framework being replaced within a few months with something else and uh the whole hype train that often goes around it and today many products really don't follow this design principle all that well with phones that last just a couple of years and then you have to replace them again right but with software in particular you need to think about how you can design it in a way that at least the core of your software is stable and doesn't need to change all that much using things like design principles and architecture to make sure that that core is easy to maintain that'll last a long time the eighth principle is that good design looks at the details so you want to make sure that when you design something that you take care of all the details because that makes a lot of difference and in software applications this also really important because it makes a significant difference in the user experience and this can be small things like really optimizing the flows in the user interface but you can also do a larger thing like taking care of data Integrity in your database another more General thing that's also related to this is that you actually spend time simplifying your code and that may seem like a waste of time because the code works so why should I spend time improving and simplifying it but I've noticed that when I spend a bit of time doing that that the code becomes lot easier to reuse and I have to spend in the future much less time refactoring it and it also trains me in automatically coming up with better Solutions over time because I've already spent the time simplifying the code and learning how to do things better so that definitely pays off I'm wondering how much time do you actually spend ref factoring and simplifying your code let me know in the comments have you tried to really take that to the next level it's actually a really interesting exercise what I've noticed i' I've done this a couple of times to just really dive in deep and just simplify and simplify and simplify I noticed that it's ends up at a point where I'm making more just sideways movements I'm making changes in the code but it doesn't really improve all that much anymore and when you reach that point it's really interesting because it's very Zen like to be in that state where you're like okay well this is as good as it gets and that doesn't happen often when you're coding so it's I can highly recommend you doing that it's a really good exercise principle nine is that good design is environmentally friendly and that your design actually makes a contribution to the preservation of the environment so what does that mean in terms of software uh do we uh I don't know need to plant virtual trees or something no uh we should focus instead on making sure your software is efficient in terms of your system uh resources minimizing your carbon footprint and that's not just in software you can also extend that to other practices in your company like how you deal with uh renewable energy for servers and things like that last principle is that good design is as little design as possible it's basically the uh industrial design version of the kiss principle keep it simple stupid don't design more than you need need software should be simple and straightforward you avoid unnecessary features or embellishments that don't really have a practical purpose less but better to give you a concrete example of this I've been working for a while on learn tail which is an AI quiz generator so you can just type some text based in a URL even a YouTube video and then it's going to create a quiz about that topic automatically if you want to try this for free by the way you can just go to learn.com and try it out now we spent a lot of time optimizing or improving the user interface I'm quite sure it's not perfect but we we spend a lot of time removing things that W necessary to come up with an interface that only has the most crucial elements only the things that you actually need and nothing else so really keep it simple stupid I hope you enjoyed this video if you did give the like as that helps me reach more people here on YouTube now these 10 industrial design principles are sort of universal but they're also more software design focused principles such as solid and grasp if you want to learn more about those you should definitely watch this video next thanks for watching and take care