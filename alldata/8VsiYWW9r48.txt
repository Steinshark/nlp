so I wanted to talk about how I learned how the fundamentals of computers sort of fit together how computers work really um there's a sort of a mental model that I picked up in the 80s that has stuck with me for now 40 odd years and even now when I sit down and try and solve computer problems especially performance and sort of very sort of techy things I still kind of mentally picture the things that I picked up from a book in 1985 is that book was an Usborne computer book for the Z8 and the 6502 which were the two main CPUs in the computers of the day if you'd had a spectrum or a BBC micro or Commodore 64 or an Apple 2 then those were the CPUs you had they little 8bit CPUs very simple but the really cool thing about this is is that the stuff that you learn to program an 8bit controller works today when I'm sitting down with a 64-bit whizbang server in a data center right there the same thing under the hood nothing has changed that much since then and so what I would like to do is kind of explain how a computer program works from that very basic uh point of view each of the individual steps that it does and U more importantly sort of introduce you to the concepts that I still picture when I'm thinking about how computers work and this scales from this really simple explanation all the way up to the most um recent developments in Branch prediction and caches and out of order execution that modern computers do so it's great but we'll start with really simple things the book by Osborne they've made the PDFs available so you too can download they sort of like totally anthropomorph the computer and they sort of explain the computer in terms of a set of robots that live inside the computer and they have things that they can do and uh somehow the operation of these robots caused interesting things to happen in the outside world I will point this down at a piece of paper give you difficulty editing so these robots that live inside the computer so here's my little robot I have sort of extended what the asborn books described for my own sort of purposes here so for this video this robot is a got very simple things he's got a little Abacus and he can do very simple sums on the Abacus and that's my attempt at drawing an abacus and he's got a single piece of paper which he can write one number on so this is going to have the number 10 on say when he's told to do something he can use the Abacus along with another number and he can add or subtract from that number and then he will update that number and there's only literally one number that can live on this piece of paper so if we added 10 to this his piece of paper would now have 20 on it and so this is where he's going to kind of store the one and only thing he can work on at a time and we call this the accumulator because we're accumulating the results of what the little robot's doing in this piece of paper now there's not much you can do with one piece of paper as I'm sure you can appreciate so the robot can also go to the ram so the robot in this instance represents the CPU of the computer and then the ram which is the memory of the computer is represented in my mental model there we are we're going to draw it as a set of pigeon holes so it's a huge huge array of pigeon holes and each of these pigeon holes is labeled so we've got 0 1 2 3 4 5 6 7 8 9 10 whatever so thousands and thousands and thousands now I say thousands and thousands it was thousands and thousands in 1984 you know your spectrum had 14 8,000 of them and the BBC micro had 32,000 of them or if you were portion had the the extended ones 128,000 of them modern computers have billions upon billions of them so this is the ram so the megabytes and the gigabytes of your memory are these little pigeon holes but it's much easier to think about them as pigeon holes than anything else and so what we can put into each of these pigeon holes is one of these pieces of paper with a number on it so each of these pigeon holes can have a little piece of paper with a number written on it and the robot can do two things with this he can take his piece of paper to cell and write copy the number down so we can take number 20 and you can write it up in here number 20 in cell zero and pigeon hold zero or he can go to a cell and copy down whatever numberers in there let's say he's going to cell one and there's a five in he can run up to cell one take the five and copy it into his little accumulator and then come back to his Abacus but that's all he can do he can't remember three numbers or five numbers or 100 numbers every time he has to go to a pigeon hole to do anything somewhat meaningful now there is one other thing that the robot has got in repertoire he's got a little label which I'm going to represent actually with a label here and this is this is like a little Index this is like a little thumbnail or a thumbtack that he can apply to one of these pigeon holes to say hey um this is where I am if I'm in the middle of doing a whole bunch of operations then this is the point where I'm going to come back to before so just with some very very simple operations and I'm going to write down the list of operations let me put that somewhere where we can still see it the robot can he can go to a pigeon hole I'm going to call that loading so that's loading a number from a pigeon hole into the accumulator so he can load a number and he can load from a pigeon hole and when I load it from a pigeon hole I'm going to put a little at sign to say this is the uh pigeon hole number that I'm going to load from he can also just write down a particular number if you want to put like the number seven not the contents of pigeon hole 7even but just the actual number seven we can just load seven and I'm going to use a little hash there to mean this is the number seven as opposed to the address of seven and this would be like load at 10 to say load at the address 10 he can also load up wherever the index pointer is pointing at so I'm just going to say a special thing that says load at index and that says wherever that little pink index marker is go and read the number that's inside that pigeon hole that particular pigeon hole all right and then similarly we want to be able to write back to this pigeon hole we need to make changes to it so we can say store and we can either store at a particular address so store at like pigeon hole 7 or we can store at where the index is we can also add subtract multiply for the purposes of this little demonstration I'm just going to write down one of the things that we're going to do and I'm going to say we can add and again you could like add a particular number so like add seven and that means add the number seven to whatever's on your piece of paper and replace it with that we could also add with the contents of one of those pigeon holes so this would mean let's do 13 this would mean go to pigeon hole 13 note down the number temporarily and then add it to the Abacus and write that number down so if you've got 10 in the accumulator and you go to sell 13 and that had number seven in it you'd add the 10 and the seven and your new accumulated value would be 17 and then we've got a couple of other operations that we need in order to do something slightly interesting so we can increment the index that means move it along to the next box in the array of boxes we can also decrement the index which obviously means to move it the other way and and then finally we can jump or go to an earlier place in our program because what we're going to do with these uh instructions that we have available to us is we're going to build a little program and that's like a recipe and we want to be able to go back to an earlier step to to do this a sequence of steps over and over again so this would be jumped to some spot okay so what can we do with this simple steps that the robot can do we would like to put them together so I'm going to use this to write out a program to Output the Fibonacci sequence of numbers which is if you remember one and one and then you add the two previous numbers to those numbers to get the next one so 1 + 1 is two 1 + 2 is 3 2 + 3 is 5 3 + 5 is 8 and then I'm not going to test my own mental arithmetic at under under the gun to check that but I think it's 13 and as I was explaining that to you that's kind of the way that the computer would do it too right I said I wrote down one and one I know the first two Fibonacci numbers are one and one and then for every subsequent number I said go back and add the previous two numbers together and then write that next one out now we've got nowhere to write in the robots running around the computer world but what I can do is I can put them in subsequent pigeon holes in my memory so that's what we're going to do so how might we start this out um well the first thing I want to do is I want to put the two ones in the first two Loc in the pigeon holes and so how am I going to do that I'm going to say step one load the number one into the accumulator and so our robot in fact I can write here's my little accumulator I've got a little piece of paper here so I might as well pretend to be the robot um I'm going to write the number one here that's step one fantastic uh the next thing I'm going to do is I'm going to store so step two store that at address zero I'm going to say the zeroth pigeon hole computer people love to start at zero as I'm sure you're very well aware it's never caused any problems at all um starting at zero instead of one we're going to store that in the zeroth location and then we're also going to store it in the oneth location it is all zeros and ones um I'm going to get one more piece of paper we'll come back to that one of course I'm going to have to raid the place where paper lives in any household which is the printer drawer so I'm going to make a new empty memory array of pigeon holes and so after having done these first three operations I would have put one in my accumulator oops I'm holding this the wrong way around and I would have put it in cells zero and one so one would go in here and one would go in here fantastic okay so far so we've done the first two numbers of the Fibonacci sequence nobody is that excited right now what we would like to do is start keeping track of this uh of a process we can repeat over and over and over again as to make the next uh number what I'd like to do is use the index register this little purple pink thing to take a note of where we are in the sequence I'm going to start by saying let's put it at the beginning of the boxes so the fourth thing I'm going to do is I'm going to say load the index oops I realized I didn't write down that that's something the Lo the robot can do but we're going to say put the index at cell zero okay now we're into a bit that we are going to do over and over and over again step five we're going to load the number that's at the index which obviously we know what it is at this point because we've just put one in there but to have a sort of General thing we can do over and over again we we're we're going to do the same step over and over again so we load out the index that's going to read the number one into our accumulator Well turns out it was already there we're going to increment you load blitzes out whatever else was there doesn't it into the accumulated that's right so we would have thrown away the one and then we would have load back in a new new one a fresh shiny one from our collection I know yeah oh I love the smell of a fresh one um and then we're going to increment the index and incrementing the index moves it along to the next cell then we're going to say well add to the accumulator using our Abacus add whatever is at the new place where the index is well again in this instance we're going to go to the we'll run off to the the cell it's a one in there and we're going to replace this one with the sum of those two which is two hooray okay we're getting somewhere uh step eight we're going to increment the index one more time because now we want to put this result this new Fibonacci number we're going to put it in the next cell so we're going to move the index over to index 2 which is currently empty and then step nine we're going to store at wherever the index is pointing so now we'll put the number two over here in our pigeon hole and I think we can see where this is going now what we need to do is we need to set it up ready for the next step right we need to um set ourselves up so that we're ready to go round the the loop again to do this over and over again and so what we need to do is put the index at the beginning of the pair of two numbers that we want to add together and in order to do that we need to move it back one so in Step 10 we're going to decrement the index so now he's pointing at one and then finally we're exactly ready to do the next Fibonacci number so in in Step 11 we're going to say go to or jump what did I say I said jump didn't I jump to step uh five step five so I'm going to put a little draw line under here and you can sort of see where we are so then if we were to carry on which I'll do very quickly we would uh load at the index we put one in our accumulator move the index along one we get two add whatever's the the index now to this to get our three move the index forward again to uh get ourselves into an empty cell write the number three in here and move the the index back and off we go forever and so now we have an infinite sequence of Fibonacci numbers uh and a program that never ends which is a whole other problem but that's cool right we've just used very very simple very very simple uh instructions that the robot can do um and we've been able to build a Fibonacci program so that's cool and all but there's one other kind of really nice thing that you can sort of get from this understanding of how a computer might work first of all you know putting numbers in boxes first well it sounds very abstract which it is numbers in boxes are not that exciting so two things one there can be another piece of circuitry or another sort of robot if you like that that makes some of these pigeon holes connected to in in modern day the brightness of LEDs or LCD pixels on a screen and so you could imagine if we had some set of pigeon holes like from say pigeon hole a million to a pigeon hole 1,500,000 each of those corresponds to a pixel on a on a monitor and now suddenly by writing numbers to boxes we're making pictures happen somewhere so that's one sort of observation and back in the day certainly on the BBC micro um there were ways of getting the TV screen to display so that you could write say the number 65 which just happens to correspond to a capital A in ASI and a capital A would appear somewhere on the screen on the BBC micro now when you're 10 years old that's an earth shattering moment when you realize that literally changing numbers inside the memory of your computer to make something cool and interesting happen on your screen so that's awesome and we can definitely dig into that some other time but what I would like to do is sort of show you how this little program that we wrote which you know we've written on paper how I might be able to teach the computer this program because at the moment I've just said there is a program maybe this is all the robot can do which is a very boring robot and certainly doesn't play Elite or Exile or any of the cool games that I used to play so let's go back to my list of all of the instructions noting now that that we're missing one which was the load the index so here is the list of all the things the robot can do and I'm going to number these instructions I'm going to say this is instruction zero this is instruction one 2 3 4 5 6 7 8 9 and 10 so we've got 11 because again we started at zero uh 11 different things that the robot can do and so I could actually encode the whole program as a sequence of numbers so let's try doing that here is my my program just make sure I can see them so I'm going to sort of draw a new area of screen I couldn't find green fan field field feed paper for the life of me during lockdown I was posting it to people but it I bear it's it's there are people who will sell it on Etsy for any amount of money uh it's ridiculous but anyway with so our program I'm going to make it into a sequence of numbers so load number one is the first step of our program so this is a load of an actual number load hash which is in our case is instruction number one so the first number in our sequence that is going to represent our entire program is one and then we actually need the number one so I'm going to say one is the next number and the the robot will know having read a one that let load whatever the next number is into the accumulator so one means load and then the one is the one that it's going to load into the accumulator I'm going to write these on different uh lines just to kind of keep some track of it and obviously you can see how this is going once I start doing it the next instruction is store at zero now store at is instruction number three so we're going to say three Z and then we want to store at one which is going to be three 1 and so on you could imagine taking each of these high level high level operations that the robot can do and encoding it as a sequence of numbers now this this is the machine code that the computer the CPU deep down even today actually executes it's all it can do so you've seen any number of like programs like python or C or uh you know you're using Excel or whatever to write programs in ultimately the only thing the computer can do the only thing the CPU at the bottom of it can do is understand a sequence of numbers just as I've described here obviously a little bit more complicated than just the 10 instructions I've got but actually not as not that much more complicated because once you've got a few of these things you can build any program you like where are we going to put this machine code right this is this is fantastic this is a way of explaining the to the computer what I want it to do but can I feed it into the side of the computer I don't know what to do well if only we had a massive array of empty boxes that I could put a sequence of numbers into so that's exactly what we're going to do what we would do is we would take our let's find a our original thing here we just go and find a spare set of boxes let's say this is box 1000 and I would write the sequence of numbers in that we've got from assembling as this is called the assembly code this is the human readable form of what we're asking the computer to do into the machine understandable form of just a sequence of numbers so in box a th we'd have 1, one we'd have 1 3 0 3 1 etc etc etc and then when we get to the jump if you remember we said jump the end of this program would be go to step five well step five doesn't make any sense to a computer now but what we can do is we can say which pigeon hole for it to go back to so by by the time we get to this this would be about you know I'm I'm not going to bother assembling the whole thing here otherwise we' be here forever uh 10,2 let's say is the jump jump is instruction number n and then in the next box we'd have to put what number box we need to go to and let's say it was you know 106 something like this so this would jump to 106 and we're going to ignore the fact that in these types of computers you can't put the number 10,6 in a pigeon ho um that's for another day but this was a watershed moment for me as a kid as I realized that everything could be expressed very simply and from those very simple things you can build anything and of course as a kid or you're interested in is building video games and moreover just the right sequence of numbers is actually how the computer works and um once you kind of got your head around that you kind of understand a lot of things like for example if we were to actually run our Fibonacci program now after the thousandth Fibonacci number it would start overwriting box 1,000 which is unfortunately the program we're actually running and I think we could see what would happen with that eventually the robot would write over its own program and something UNT would happen we haven't said what would happen if the robot read you know number 11 or 14 you know in modern processes that would be a crash and you would see something horrific happen and hopefully your operating system would say you know oh there's been a fault of sorts this the screen would certainly Go a different color on my computer yes that's right yeah yeah so definitely whenever things have crashed and you see all this kind of nonsense um stuff appearing all over the top of the screen that's because the the the processor the robot's going AR and has written over the pigeon holes that actually correspond to the picture you're looking at which is amazing because we can shoot Rays out and we can do thing what's important here is that when you shoot the Rays out here executor from this and then we will see that we are generating a thousand around numbers here we were very lucky there's no failure