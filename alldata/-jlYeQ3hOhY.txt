why is HTTP 3 eating the world let's find out uh the hypertext transfer protocol uh is a Cornerstone of the Internet it's Cornerstone of HDMX too HDMX mentioned it put a check mark in the mention already helping to load web pages stream videos and fetch data to your favorite apps last year a new version of the protocol H tip3 was standardized by the internet engineering task force imagine if you you were a part of this task force I want to be a part of that task force okay it sounds exciting I want to be on any kind of task force the organization in charge of defining internet technology since then HTTP 3 uh and the related quick protocol have seen rapid uptake on the public web the exact numbers depend on the source and measurement methodology with HTTP 3 support ranging from 19 to 50 plus% of web servers uh worldwide that's insane so the big difference is for those that don't know uh the big difference is between HTTP 3 and http2 HTTP 3 exists kind of in both in two different layers right so it that's what makes it so confusing and hard to implement is that you you have uh the TLs side of things like in the protocol itself which is usually a little bit different so for something like TCP it just transfers structured data right so it transfers structured data then you'd have some sort of Tsing whatever layer and then you have some sort of HTTP layer which then chunks it into the appropriate thing and goes here you go whereas with quick it now runs over UDP which means that you have to do like this kind of weird around it's just a little different it's kind of exciting because you do a chunk on the outside then send it to potentially the tlsc side and then back up into the HTTP side just as a little bit different it's UDP it's kind of exciting UDP no UDP okay here he goes H3 adoption grows rapidly all right look at that thing just just just launch Holy Cow it's only been a year or two years and this thing is just flying up that's pretty cool hb1 it's shocking how much HTT uh http1 is still going on that is a lot of H tit1 what is this one version two version two is kind of annoying it's really that server priority that really just makes me upset H pack is the greatest it's the killer feature it's the best feature of http2 is hpack it truly is uh because these new Pro Protocols are heavily used by large companies such as Google and meta we can safely say that a large chunk of the current internet traffic already being used are uses hp3 today in fact the blog post you are reading right now was probably loaded over HTTP 3 okay nice in this series we'll provide some context on what problems HTTP 3 solves and how it performs why it's seen such Swift adoption and what limitations it is still working to overcome HTTP 3 equals the web 3 no no no no it's just unfortunate that that they name they're named very similar you know don't don't put them don't put them together H titty P yeah I don't know how saying the phrase HTTP is so hard but HTTP just sounds so much easier to say so why do we need HTTP 3 well a network protocol describes how data is communicated between two entities on the network typically the user's device and a web server as there are many different companies building software for the web the protocol needs to be standardized so that the software can be interoperable that is they can all understand each other because they follow the same rules yeah hopefully they're going to show a big difference between uh TCP and UDP because that's where a huge amount of awesome here's me talking about that whole like TLS problem right see it goes from TCP TLS http2 whereas this one's like you go UDP you do this whole quick thing but then you have like this like you have to do alpine blah blah whatever negotiation goes on here and then it goes up here which is just kind of wild it's just a different experience right it's just a different experience anyways so this is good in practice we don't use a single protocol but a combination of several at the same time each with its own responsibilities and rules this uh is to make things flexible and reusable you can still use the exact same HTP logic regardless if you're using Wi-Fi cable 4G or 5G that which makes sense right that's the physical layer um all right and many of the original protocols for the internet were standardized in the ' 80s and 90s meaning that they were built with the goals and restrictions of those decades in mind while some of these protocols have stood the test of time others have started to show their age most problems have been solved by workarounds and clever tricks however it is clear something would have to change this is especially true for the transport control protocol which ensures your data is reliable reliably gets across the internet yeah you don't do TCP you do TCP in UDP think about that for a second okay I I think the general rule of thumb is that most packets make it so why act everything like that's probably the simplest way to explain why it makes such a big difference from UDP to TCP because UDP is just like a fire forget right you just send information and that's it whereas TCP requires you to act all the things and all that uh a drop packet can be a bad though well of course a drop packet can be bad but that's what the TCP in UDP does is that when there is uh when there is a dropped packet you Knack you Knack the packet a negative acknowledgement I did not get this one can you please resend that so it's like an inversion so instead of being like an act like I did receive one I did receive two I did receive three instead it's like I didn't receive three can you please resend that one that's pretty much one of the big wins right it's the same thing with for R rtmp that's TCP though there's a lot more axe though you get AXS as opposed to ax uh HP 1 and two rely on TCP to successfully do their job before a client and server can exchange HTP response and request request and response anyways uh they must established a TCP connection over time there has been many efforts to update the TCP and resolve some of its inefficiencies TCP still loads web pages as if they are single files instead of a collection of hundreds of individual files some of these updates have been successful but most of the more impactful ones for example TCP multipath and TCP fast open took nearly a decade to be practical practically usable on the public uh internet I don't know what fast open and multipath is is fast open just reestablishing or reusing uh connections cuz I know there's like a there's like a a single trip SSL type stuff where they can kind of fast P fast fast path some of it uh the main challenge with implementing changes to TCP is thousands of devices on the internet all have their own implementation of the TCP protocol these include phones laptops and servers as well as routers firewalls load balancers and other types of middle boxes as such if we want to update TCP we have to wait for a significant portion of all these devices to update their implementation which in practice can take years yeah you pretty much are waiting for those devices to get replaced with newer ones so HTTP 3 is bun yes bun recently said something which was kind of silly which they said uh because Twitter wanted to improve their performance and so bun suggested that the easiest way to improve their performance is to use bun which a I don't even think if I'm not mistaken it's written in a jvm uh technology and and jvm is currently much faster than bun you would You' actually you'd actually have to un you'd have to lose some of the performance to get down into the bun category I mean I'm not saying right in Scala is like a w okay I'm not saying Scala W time okay I'm just saying jvm is typically known to be a touch faster anyways the the problem let's see this became a problem to the point that most practical Way Forward was to replace TCP with something entirely new this replacement is the quick protocol uh though many still jokingly refer to it as TCP 2.0 this nickname is appropriate because quick includes many of the same highlevel features of TCP but with a couple crucial changes all right all right Scola mentioned let's go uh the main change is that quick heavily integrates with the transport layer security protocol TLS is responsible for encrypting sensitive data on the web it's the thing that provides the S secure in htps HTTPS with TCP TLS only encrypts the actual HTTP data this is true uh with quick TLS also encrypts large parts of the quick protocol itself this means that metadata such as packet number and connection uh close signals which were visible too and changeable by all middle boxes in TCP are now only available to the client and server and quick this is super cool by the way this is kind of like a really cool feature of being a part of your own little uh stack in the TCP area right and this makes sense so here you go here's like a really good example of it all right so you still get the UDP payload stuff which I forget how many bites are associated with the UDP header how many are does anyone know off the top of their head good reading Prime I'm trying I'm like practicing my reading skills like I'm up to like a sixth grade I assume it's 20 but I think that's TCP the same thing uh TCP needs a quick dick Dickens A cider no one's drinking apple cider right now I can't remember like that okay that's fair so this this is a perfect example right because you still need the the TCP payload right the thing that controls the headers and then you have all the other stuff with HP data and all that in there which has the source Port destination sequence act blah blah blah blah options this one just has the sorts uh Source destination check some I don't know what this is and then all of this is beautifully my guess is mostly encrypted yeah oh cool this part's encrypted and this part's encrypted but you don't have the mac and part of the connection ID okay that's kind of cool though I wonder what why only some of the flags I wonder these flags must be some sort of public flagging like hey this is Ben TLS that way you know it's TLS I think maybe I don't know interesting though no we're not going straight to the Asal thing furthermore because quick is more extensively encrypted uh it will be much easier than it was for TCP to change it or to add new features we only need to update the clients and the servers as the middle boxes can't decrypt the metadata anyways this is this is a big feature right here you don't need that because UDP is going to be the same so you're now actually doing a protocol on UDP so the middle boxes don't really they don't don't really care cuz the server is the one that has to Knack back and get the data so they don't really you know it makes it so it's way easier to update yeah this makes quick a future proof protocol that will allow us to more quickly solve new challenges of course this extra encryption is good for General security and privacy of the new protocol too while TCP plus TLs are perfect for securing sensitive personal data such as credit cards or email content they can still be vulnerable to complex privacy attacks which have become ever more practical to execute due to recent advancements in AI by further encrypting this type of metadata quick is more resilient to sophisticated threat actors okay that's a positive o look at this thing this is exciting I I want to look at this one because that's more of what I'm curious about quick also has many other security related features including defense against distributed denial of service attacks with features such as amplification prevention and retry packets finally quick is uh also includes a large amount of efficiency and performance improvements compared to TCP including a faster connection handshake the removal of head Aline blocking problem better packet loss C detection recovery and a way to deal with users switching networks oh nice okay let's look at this guy all right hold on so we got the client talks to the server server sends back to the client we do two black lines and then we do a red line yeah okay there's two connection I forget I forget what these two were that are required this is an Alpine request I know that I think you can actually I think you can reduce this into a single round trip I know there's some techniques to reduce this into some roundtrip territory Let's see we didn't need htb3 what we needed was quick okay okay TLS 13 allows for zero rtt I don't know about single uh the oh okay yeah I I've never I've never programmed or like I've never worked on the TLs layer itself uh I've done a little bit with it but not enough to really like I did like a fake Alpine thing for something at one point or I I had an if condition for Alpine and then ignored it for hp2 I've never actually done any of those things uh who needs security anyways nobody does initially they uh there were attempts to keep http2 and make minimal adjustments so we could also ensure quick in the lower layers after all that's the whole point of uh having those different cooperating and reusable protocols however it became clear that quick was just different enough from TCP to make HTTP 2 incompatible as such the decision was to make a new version of HTTP just for quick which eventually became HTP 3 I wish they would have talked a little bit about hpack qack because that's where the that's so the big reason why are those things cool you're probably asking what does it why why is that neat here I'll I'll tell you why those things are kind of cool I'm going to go from memory and I haven't thought about it in a long time so if I have some details slightly wrong I'm sorry it's just a part of things like you know that if you send your cookies up right now what ends up happening is that you're going to have you know cookie or uh you know you know field one right like header header one right header one it's going to be a bunch of data you're going to have header two it's going to be a bunch of data you're going to have header three it's going to be a bunch of data and so how qack or how uh how what's it called called how hpac Works which I don't know uh qac but effectively once you send up a header it takes that Header information and goes okay I've seen this since we've seen this once before what we're going to do is we're actually going to take this and I'm going to go all right call this one number one right and so it's going to call it number one and then it's going to go hey this one I'm going to call this one number two and then I want you to send this one up as number three so that means the next time I make a uh a request what I'm going to effectively send up will look like something like this right I'll have uh header one one header 2 two header 3 three and so you just send up like a bite or however much information so you know like think about how big your cookie is right your cookie can be really big it could be lots of information so every single HTTP one request is a lot of information whereas this one keeps a keeps the server and the client in sync on what these numbers mean and so then if the client drops something it has to let people know you have to set the same size of cash on both sides so as new ones come in and old ones get pushed out that's what happened so think of like effectively think of an lru my cookie is bigger than yours okay you don't need to flex your cookie side cookie size okay you don't need to do that all right hp3 is almost identical to hp2 they mainly differ in the technical implementations of the feature on top of quick or TCP also uh quick just requires tons of programming hp2 is stateful yes so I assume quick is also stateful yeah I wonder I wonder what the what what Q Pack's like uh let's see however because hp3 can also use all of uh Quick's new features uh it is expected to become more performant when loading web pages and streaming videos in practice it's es uh it's especially this aspect that has led to h3's Rapid adoption in my next post I'll go over let's see more detail on the common connectivity problems you'll likely experience and how quick can reduce calls and videos from cutting out when your mobile devices changes uh from using Wi-Fi to cellular connectivity okay nice nice UDP uh let's see in UDP connections don't exist yes they're stateless yeah maybe quick protocol has connections it well well it it has the same like it's no different than rtmp right rtmp RTP all those ones run also over UDP so it's the exact same concept right you effectively have a stateless connection to it and then usually you also have something like a control plane a control plane would be like a websocket connection as well and you do some like basic talking to the control plane to ensure that you also have uh your UDP side of things your your uh video and audio and all that crap that goes with it it it does have a connection field but that's the connection number so the connection number has various ways so that way you can send down a bunch of different uh stuff all at the same time so you have connection one sending down this file connection two sending down that one it's just multiplexing on top of it that sounds like a girthy connection it is a girthy connection if you've never done you should uh you should at some point in your life try doing a multiplex of something it's a lot of fun it's actually a ton of fun that's why uh websockets you know they in some sense they kind of suck you're not really multiplexing anything it's just not as fun like a good Multiplex is great like uh you know all the control frames web web sock on all the all the control frames cannot be at all multiplexed it's it's a lot of fun see Netflix does not use mqtt anywhere what is mqtt I don't know that let's see as someone whose job is to design and build platforms where web services you all love and use run uh while hp3 and quick have been nice features to the uh to look good on paper there are many uh hurdles currently dos mitigation is getting harder classic State Fall firewalls do not work anymore qos and more let's see and more need major rework and overall the UDP infrastructure in Linux and windows kernels lack behind there are many more issues but these are the most important ones oh nice yeah I could imagine there's some definitely some some some firewall issues that that makes sense especially as more and more of the data is hidden it's getting harder that's also going on my gravestone he had ADHD it's getting harder the name is it's getting harder aen