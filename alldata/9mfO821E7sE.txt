look at that gleam version one it's finally here okay today gleam 10 has been released this is the first stable release of the language more of what that means later and a big milestone for the ecosystem it has been a long journey and I'm proud of both the technology and the community that we've built here with gleam thank you so much to everyone who has taken part in any way you've contributed to the project getting here in a meaningful ways of all sizes so I actually don't really know what gleam is all I know is that that anytime I mention anything about go concurrency anything like that everyone goes straight for the beam styled languages right so the erlang Elixir all this and apparently gleam is I think it's fly IO that did some sort of um iteration on top of this whole process I don't really know so we're going to find out like that's as far as I get but anytime I get a message saying anytime I say go has one of the best effectively one of the best concurrency models all I get is you don't know Elixir right I like and by the way I am totally in support of a company that that that tries to build a language like I think that that's a good move honestly I think it's a good move because the the language has funding long as the language remains funded and well and keeps growing I think it's great gleam is a programming language that tries to make your job as a writer and maintainer of software systems as predictable stressfree and enjoyable as possible the language is consistent and has all small let's see it has a small surface area I do like this this is why I like go and Lua I think they are very very simple and it makes life easy make it possible to learn in an afternoon okay this is I'm already excited I think this is I think this actually should be one of the the the goals of any modern language design is that you should be able to learn effectively it in an afternoon to be good with it obviously should take a long time but to learn it should take relatively small amount of time I love this I love this take uh couple with let's see coupled with a lack of magic and strong desire to have only one way of doing things gleam is typically easy to read and understand understand reading and debugging code is more difficult than writing new code so we optimize for this gleam has a robust static analysis and type system inspired by languages such as Elm o camel and rust so the compiler serves as a programming assistant giving you additional context to help uh you make the change you want to make don't worry about writing perfect code for the first time for the first time round with gleam refactoring is low risk and low stress so you can continue to improve your code as you learn more about the problem at hand I mean I'm not going to let you this is the greatest sales pitch I've ever heard in my lifetime for a language can we all just take a moment and say like what the hell's going on here okay like this is literally like the greatest sales pitch I've ever heard for language it's like hey you like rust and O camel and Elm but you don't want to program in either of those because it is too difficult you should check out gleam okay let's find out uh I'm in so far I'm in so far too rust I I do have courses on Rust rust is is neat uh it's JavaScript isn't it just tell me it's JavaScript isn't it just say just say it all right let's see running and administrating software is as important as writing it gleam runs on earling virtual machine a mature and battle tested platform that powers many of the world's most reliable and scalable systems such as WhatsApp got them what'sapp these nuts uh gleam can also run on JavaScript run times oh my goodness I who jokingly said it's JavaScript isn't it who said that who the hell said it how did I just how did I just get hit with with with this j i dude I cannot escape the JavaScript hole I did it okay well you did it hey you know what nice job Mega I appreciate it Mega leadon uh let's see making it possible to run gleam code in the browser on mobile devices or anywhere else gleam looks like this okay so we got import Json result try my like person in this wisp uh request and response okay public function handle request request context returns a response uh grab out the value of this Json from the request looks like this is some sort of static block where we can use the data decode it insert this uh try inserting this person into the database and then return this thing the result case air Json okay so it does it look I mean this feels this feels like rust this has a very Rusty feel other than this this is kind of interesting these little arrows is this just the assignment operator is that effectively the equal sign and it has this whole use thing going on which is very similar it has a very like uh what's it called oam feel you know how o camel you do a lot of lets this thing has that yeah it has a it's very it's it feels very uh that feels like go you think it feels like go Oh I thought it'd be like pulling something out but they these can't mean channels but I do like how you do like a try this thing I do like I do like that I like erors as values like I do like this uh this whole last I really like explicit returns but you can't really do explicit returns from blocks I understand expression based languages and why you want to be able to do them blah blah blah but this is okay unprocessable entity response 2011 interesting so what is gleam V1 included this version covers all the public apis found in the main gleam git repository that is uh The Gleam language design compiler build tool package manager code formatter language server and compiler wasm API and JavaScript bindings by the way this is an awesome set of tools right out the gate can we just agree that this is like to me this is this is minimum require M this is minimum requirement for any language to be even remotely usable today is that you have to have your whole tooling story thought out and driven by the language design right this isn't actually a One release yes if you don't have the like the compiler build tool and package manager and code formatter and LSP needs to be all like together I fell in love with gleam and have been writing it a few weeks the language is strong but the standard lib needs some love a time let's see a Time package for example okay yeah you do need a I mean time time tends to be fairly important when programming okay so it's not fully there is what I'm hearing except for JS bindings you don't need that uh The Gleam standard library and other packages maintained by the core team will be getting on accompanying V1 release shortly afterwards before these are released we will be making poll requests to Popular Community packages to relax their package manager version constraints to ensure that the update to V1 is as smooth as possible for all gleam users so what does V1 mean version one is a statement about gleam stability and Readiness to be used in production systems We Believe GL gleam is suitable for use in projects that matter and gleam will provide a stable and predictable Foundation gleam follows semantic versioning so maintaining backwards compatibility is now a priority we will be making every effort to ensure that gleam does not introduce breaking changes the exception to this is for security and soundness issues should a critical bug of this nature be discovered we reserve the right to fix the security issue even if some program PRS are we taking advantage of the bug I think that's good I think that's also again I love this I love this like this idea of bending over backwards to not ever change the API even if there is something truly naughty about what what is going on I think this is good like uh what's it called people were very upset about go in their recent release um I think it's go uh 1.22 uh release notes and people like were saying about how you I mean they were just saying the most ridiculous crap right here yeah this one for Loops they just literally fixed a bug in four Loops this variable uh when you do key values uh wherever it is the key values were were not being properly um like held so if you held on to like the value of an iterator you would actually get that value updated over time and so that was like totally wrong that's just it's just it's just straight wrong and now they have changed it scoped yeah scoped yeah that's what it's called scope scop variables whatever it's called I don't know the exact name for it but you know what I'm trying to say right it's where like they were they weren't updating they were updating the ref the what the reference was pointing to not the value itself right local local VAR Scopes yeah and it's a breaking change but it's the correct change and to me that is like for me that is not a break like that is you fixed a sound bug within the go language and I'm happy that you did that right it is a breaking change of course it's a breaking change it broke people that relied on that behavior like that's the whole point is it garbage collected I think that will be interesting is gleam uh is gleam another Griff like V I don't think it is because they don't they they're not claiming all the safety and stuff that V was uh what's I because I truly do think v v would have been one of the best languages out there right I I do think it would have been one of the best languages out there because it was simple like go and it was promising all the the speed of rust but it turned turns out it may it it might be a scam it V might stand for a vaporware all right gleam is a practical language intended to make uh real things so our focus on gleam post V1 is to split between productivity for gleam users and sustainability for gleam project productivity for gleam users as well as not introducing breaking changes we will also avoid language bloat it's easy to keep adding new features to a language to a with specific Problems by the way this is Russ's biggest problem every single release is new syntax new things and now rust is like have you seen those bugs with rust right now with lifetimes how you effectively can just upgrade lifetimes and create actual buffer overflows and stuff like that it's wild you can create safe rust memory memory problems uh rust is turning into rust Plus+ rust is turning into rust Plus+ and I'm not saying they're not bad like I like all the changes the problem with it is that every single change that is brought in creates another way to do something you know what I mean and so rust now has 9,000 ways to do anything you could never get three experienced rations in a room to agree to the way something should be programmed and that's what's so damning about a language that gets too many features that's why I love I mean that's really why I love go is because no matter what when someone comes in they're all going to produce almost the same language it's just like JavaScript JavaScript has the exact same problem JavaScript there's so much ways you can write something it causes like it it causes you to look at code and you have to like you have to like adopt the the person who wrote its mentality of how they even approach problems before you can understand how they came to this this you know to this conclusion I have a lot of things that I want to say about it you know what I mean one dude might add properties to a function it's Insanity I know you can just do whatever you want in JavaScript script oh is that an array or are you putting like doore uncore default on it for those that don't know what that reference is to a commander default let's see uh let's see array option array like the one of the ways I saw this thing to be done is that people were doing this right here here's an array the array has is default equals true like you're just adding properties to an array so that you can be able to handle with Commander the ability to rece re vartic args or multiple args with the same name right if you have like Pam you're burdening the programmer of choice exactly and so when you can solve a problem in any unique way it's fine don't worry about it no I do worry about it because you can solve problems in a in a very wide range of ways and whenever you can solve things in a huge amount of ways I find that it it the language becomes very burdensome when you have to read other people's code don't worry biscuit I I knew you were sarcasm I just wanted to take it as a as a way for me to take on top of it it's not only that but somehow still useful in other places like de bouncing functions it's a function you can call and get the same damn results that has uh thing has properties wait now you got me confused here it's still somehow useful yes it can be useful but any anytime you have okay so if you attach properties to a function largely I think you're a bad person okay I think I think you're naughty and the reason why is that you should if you want to attach properties to a function please just use curring okay please just use f incurring yes low Dash also has a function do no use f incurring it's naughty as and just use proper recursion and and curring to solve this problem okay yeah but shouldn't the problem be a choice of solving and learning idiomatic patterns the problem is what is idiomatic patterns okay for people that are uh asking what that is here we can do so here I actually I believe I did some curring right here there we go here's some here's some curring I want to be able to read uh read stuff from a network in this tower defense game so I have on read and I pass in the tower defense object that I want to read on then I return out a function that is effectively a reader for my TCP connection it will be called every time there's a chunk now look at this that means I have in reference to this Tower like this thing right here the tower defense that means I can use it within this function which means that when I want to do something down here which I I don't think I've done yet I haven't I haven't programmed at all yet I I was in the middle of a change yesterday but you could imagine that when I do a new TCP connection I can go TCP do listener. onread Tower Defense right so now I have my tower defense created with its reference to the function and then hand that curried function over or that closure right it's it's I mean it's closure however you want to call it right uh to me that is a much nicer way than adding property so if I were to make a debouncing function right I would have something like like maybe count how many times should I do that right and then I can have some sort of return turn you know function uh you know de debouncer that goes through and does you know that has i in it and I can go I equals I or count right so there we go now we have this beautiful thing right oh you can't name a Anonymous function my bad my bad my bad Lua uh but now I can do this whole like if I is uh you know equal to or greater than or equal to count then we can say hey we can't uh you know error or whatever you want to do right I couldn't debounce this function right you can do this whole idea or this retry I was actually writing retry retry there you go right you could do this like whole thing where you actually count up and you use it properly yeah this is Lua sorry this we're in the middle of Lua I hate the N keyword I hate it and love it so there you go so I'm curring over the count and now I return a function that will try count amount of times every single time as opposed to putting your fing properties on there doing rust I've done a lot of rust I've done a lot of effing rust right all right anyways you get the idea right you get the idea that at the end of the day being able to solve a problem in any way you want is not great can you explain what assigning properties to a function means yeah sure here um for those that don't know I guess that's true not everyone's very well-versed in in JavaScript okay function a uh return um return uh 42 right a do bar equals 69 a is a function that also has value bar attached to it so I can now go a. bar nice nice so do you really want functions I know that's not curring that's attaching properties to functions do you really want to be able to do this I would generally say don't do this as someone who's used a lot of JavaScript never ever do this but it is used I know I love chat's reaction chat chat has never even seen such thing don't teach people this it's literally literally available can well of course you could do you could do a. a equals a and look at what we got here we got a circular reference okay now I can just [Music] go what did I just witness the end of the world okay what if a equals B dude come on this is properties I'm pretty sure you guys can figure out what if a equals B okay is this legal it is very legal but I mean again this is why you have to be somewhat careful okay because anytime a language gives you many ways to be able to solve something you will by necessity get somebody solving a problem with an available means okay I'm not saying it's good or bad that's I mean again this is why I love this idea of Gleim they're claiming you can learn Us in an afternoon we're going to keep things super super simple we want one way to solve problems and my favorite part is we provide all the tooling right so for me this feels like they've hit the right place I'm confused if the problem is solved what's the problem the problem is is that you have to maintain software at some point and when you open up a software project that can be solved in any any situation in any which way it can be very emotionally painful when you realize you've just inherited one of the worst cluster festivals of your lifetime but with each new language feature or new way of solving a problem the language as a whole becomes more complex and harder to understand Simplicity is a feature in gleam that will not change going forward there is uh there is a scope adding new features to the language but we will be doing so extremely conservatively any new feature has to be generally useful and enable new things not otherwise possible in gleam not let's see while being a worthwhile trade for the added complexity it brings to the language rather than adding new features to the language we will be continuously improving The Gleam developer experience oh my goodness this is so good this is everything I want in a I love I again this is why when you use go the go LSP is the best LSP hands down people love rust analyzer and rust analyzer ain't even close it's not even close to go please go is so good enhancing real world productivity initial initially the focus will be on The Gleam language server as it it is immature compared to the rest of the gleam tool we will also be working on all libraries and such that folks will likely want to make production systems in gleam with the initial focus on development of websites and web services go as a type system yeah go as a simple type system it it's actually you can solve quite a few problems with very little types uh after end of this article we're all going to wake up yeah documentation is also a priority we want to have tutorials and guides of uh for all manner of tasks and gleam it should always be easy to find how to do something in gleam you should focus on achieving your goal I'm I'm loving everything I I I'm loving everything I'm loving everything right uh you should have Lewis on the stream I made some let's see some small contributions gleam about four years ago and he is really nice uh and thoughtful engineer oh interesting okay okay well if he responds to this project maybe we could have him on you know what I would love that hey type one in the chat if you would like to see The Gleam one of The Gleam Engineers come on here and give a 10-minute like a 10minute presentation I try to keep things at 10 minutes you have to get like that's what Beetle did right I know it almost sounds too good okay so we got a lot of tens in here we got I see a 69 in there which I assume is the affirmative 10 minutes a month you could only ask for that much tiger did it in 15 I know but tiger tiger style was pretty good okay why don't you just make a poll because that's unfun why okay stop being such an engineer okay we come in here to spam chat and say stupid we don't come in here to have thoughtful chat-based turn-based discussions okay thank you thank you ligma off I mean look at the guy's name his name is ligma off okay you think you're get you think you're coming in you think you're talking to Aristotle out here all right Internal Documentation is also important as an open source project we want folks to be able to open up the codebase and make their contributions as easily as possible so far the feedback has been that gleam compiler and build tool are easy to contribute to this is encouraging and we will continue to work uh on this to ensure that gleam project never gets to the point where only a select few people are able to meaningful contribute to maintenance this is good uh the last part of sustainability is financial I am able to afford to work on gleam full-time thanks to the support of their project sponsors on GitHub sponsors the largest contributor is fly.io who provides approximately half of the funding thank you fly IO dude based fly iio by the way this is truly the way to do it I again I love I love this ENT I love this entire tie right here the fact that fly iio uses this language and then funds it to make it better I hope they continue to do that because this is like this is the truest way you can make a language actually useful right CU I don't like I again I do not like the rust style thing I want a benevolent dictator and I want them to like have I want them to set forth their Direction and I want whoever this benevolent dictator is to say this is how we're doing things and I want that because then I can buy in on it like that's why I like Zig I think Zig is amazing because you just have Andrew Kelly at the helm just making the language he wants to make and it's absolutely awesome Zig is a great great language and so I just love this too I think this is fantastic and I mean could I could I love gleam maybe maybe the reason why right now I'm going to probably stick with go for for the foreseeable future is uh honestly charm charm charm is really really good charm makes amazing uh Tui stuff I love the fact that there's a company that is based off of making CLI tools like that is so good all right going forward I'd like to diversify the funding with more corporate sponsors as well as other revenue streams uh I earn less than half of what I would make uh with the medium lead developer salary in London the city in which I live this is enough money for me to get by but I would very much like to earn around what I would with some other job yeah that's completely reasonable take by the way reasonable take longterm I'd be able to financially reward the uh regular contributors to gleam the folks in the core team are wonderfully talented and they should be uh re Ed appropriately for their work gleams mascot Lucy Hello Lucy has a little bit of uh a little bit of glow up or had a little bit of glow up Lucy I'm not going to lie to you though Lucy's giving me heavy vibes from the Mario movie with the blue star that's just like the sweet release of death Ah that's that's what I'm getting that's what I'm getting out of here is like what are we getting here so right I know it's I'm kind of freaked out uh Lucy is a kind and friendly and extremely dark little starfish who enjoys strawberry ice cream and functional programming the rest of Lucy's story is the is up to the community to tell well thank you uh I'm not really into mascots for languages call me oldfashioned the problem is is that like my mascots this is my you know my mascot from leftover salad is uh JavaScript and like ever since JavaScript I just really haven't been able to really want a good mascot you know what I mean I just don't care anymore you know this was my mascot and now I don't want this okay I don't want any more mascots it's just not it's just not for me yeah so I think I think big questions uh I I would really love answers to a couple questions so uh whoever who wrote this oh Lewis oh you did that okay oh yeah Lewis if you ever come on I would be glad to have you on give you a 10-minute thing about uh gleam because this looks like beautiful code this looks like really easy to straightforward code right here and I love the fact that it it almost looks a little bit like it looks like you leaned in a little bit on the procedural side which I think is the best I truly think that procedural like the procedural functional crossover I think is a really great place to be you know what I mean like when you don't have to have when you're not too yeah similar to rust I think rust made the right decision it's just that the language itself is is is very difficult to convince the non-chronically online person to want to love you know what I mean when you're like hey sit down kids I know you like JavaScript and you assign properties on functions you do all sorts of crazy now sit down and let's learn some Rust right tend I I I've seen some push back on that you know what I mean yeah so the question I want to ask if if if I I hope I get the answer to which is how are you going to go forward like what about uh copyrights trademarks like a huge problem I think when it comes to rust is that they are able to like if you want to have the word rust in your url not allowed if you have rust on your landing page it has to be smaller than any other local treatment so if you have rust or rust for typescript devs that rust has to appear smaller by their rules than the rest or what their intended rules were about right they have a whole bunch of kind of wonky rules around it and I'd rather see a language that encourages people who want to teach it they are protecting their property absolutely but I would but it's also up to us to choose which property we want to use so I'm totally on board with this because again we just got done talking about the Nintendo stuff at the end of the day I would want like if you want to encourage people who want to teach about your language and lean into your language you have to make it such that the the copyright rules are favorable to to people who want to be able to create right it just has to be that way and if you don't want like you don't have to do that you can make it however you want but if you want people to be able to really lean in and create whatever they can then do that it's annoying just it's an open source language just let the people use the logo you can't use the logo you just you're not allowed so just just a word a cautionary word of advice whenever you do the trademark and all that think about how do you make it favorable so that people can try to effectively use your language as a teaching tool they should be able to make money on it all that kind of crap because at the end of the day this whole like education should only be free is only held by people who aren't making education just going to be real there for a second just going to be real there for a second you know what I mean it's free advertising and the more people that are excited about it the better it is I think there's a lot of really good things here in this language and I would like to because I've seen I've read some fly iio results about it because fly iio has talked about it a lot I really like where they're going and I really hope that with it within the next six months I want to try to build something with the problem is that I'm just on a go Arc and I'm like really focused on not doing anything else other than go and when I have to write typescript full-time for Netflix right besides for those two things I only you know I only want to write go and Lua of course whenever I have to touch VI right I have to I have to I have to use Lua there's no there's no choice here okay it is what it is a Jen