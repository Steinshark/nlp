let's get this started hello and welcome tonight to the talk with Ronald Grimm about concurrency patterns um ranagram really honored to have you tonight as a guest and sponsor so please take it away speak about concurrency parents sections and let me start I want to talk today about concurrency patterns I am a big fan of concurrency why because this is the challenging this is the fun stuff so let's start first of all a few words about only a few words I promise and then we dive directly into the concurrency part first of all what's a pattern this definition goes back to Christopher Alexander who was an architect but not in soft drafted a building architect each pattern is Express a relation between the certain context and problem in the solution I make it short okay we have essentially three types of patterns we have architectural patterns which describe the entire architecture the fundamental structure of the system we have design patterns which you may know from the design patterns book for example they describe the interplay of the components out of which the architecture is built and they focus on the subsystem you see the architecture pattern focus on the entire system essentially and we have to finally idioms which are I texture the side pattern in a specific programming language and what I do today is I talk concurrency about design patterns and architecture patterns each pattern has a structure I will not bore you this is oil additional and this is the Swatch I think this is the kind of force structure but the process structure is pretty similar so each pattern is name has alternative name a summary motivation context examples this is how it's described okay now let me jump into the interesting parts first of all I use or my my source of patterns consists of three books first of all petal oil soft architecture volume two and four and then conclude programming in Java from Douglas that actually is only his name by the way this is a book which was written by uh by people working for Siemens in Germany pattern oriented soft architecture in short I always say only pose up okay okay let's start with patterns of design pedals and then finally let's talk talk more about um the architecture there are two metals two metals you should be um which is uh you should follow when you do something concurrently and here are the two metals be as constant as possible work as local as possible and therefore I first talk about being local or meeting don't share and here being constant meaning dealing with rotation let me put a different D what you don't want to have is a data race at that race is um concurrent writing and reading of shared state or share data this is what you don't want to have this is by definition undefined Behavior and you and it is pretty easy to get no database because requirements for data race is shared mutable State when you only get rid of one of these both there could not be a data risk because when you don't share there is no data risk and when it's constant it cannot be mutated and therefore I start now with dealing with sharing in dealing with rotation so first of all copied value it's 763 please straightforward but this is straightforward there's no need to synchronize when a sweat takes its argument by copy and not by reference you see by copy means each Swatch has its own data each thread Works locally on its data therefore you don't that you cannot have data races let me show you something by the way I have always examples involved when you have the slides you can try them out F3 threats these are C plus plus 20 sweats she sweat all of them take a Boolean shared one by copy one paragraph one by construct and then you see I change shared to true and because this these threats use this Shield here this is a data race when you take when when this sweats when this function takes this shared by reference you see such as here such is here you also see when you um when you look at this output here that both the function by reference and the function by construct modify um shared to Tool now you have concurrent writing and reading hear you read hear you write and maybe you don't believe me there's an extremely good extreme good tool which you should always use when you do concurred stuff and this tool is integrated in GCC line and therefore I can use it here use the sanitizer equal threat and now you see a key output and sanitizer detects a data race and let me see if I can see more line 16 line 16 slide 16 line 60 this line here and you see this is the B so you can also visualize this start Race using sweat sanitizer I strongly suggest this is not a pattern this is my best practice whenever you do something regarding cold currency always use threat sanitizer switch sanitizer fines with high probability with extremely high probability the easy data races what do I mean the easy data is on single memory locations such as okay let's go further so this was copied value there's another way to don't share use threat specific storage typically use case of such specific storage are for example you have a single sweater program and you want to make this Mighty sweating you want to put it to Midas Trading what people often do in the first case is they just make their shared State sweat local therefore each stretch gets its own copy of this shared state what is also typical use case of thread specific storage is a threat local lockup you want to know which thread creates created what therefore to make the locker threat local let me show you an example I use this time when box a different online compiler and what I want to do is the following I want to sum up uh where is it 100 Million numbers and randomly created you see between 1 and 0 1 and 10 sorry and I have four threats several what should I do of course I for course what should I do I create false rats so I have a sweat T1 T2 T3 each one performs the function sum up here's the function sum up it takes an atomic unsite long long to store the value of this summation it takes the vector of arbitrary values answers from begin to end use this Vector here and now I can go through this Vector you see begin end this is my vector and I sum up all values and I do it on TMP some and here's the here's the key point team P sum is read local meeting each thread has its own copy of TMP some therefore there's no sharing therefore there's no doubt race and then when I'm done with this calculation of a Fourth of this vector I just um added together using some fetch or at and this is fine because sum is a let me see it here let me show it here some is a atomic here you have it and this is um how should I say a sweat Safe Way to sum up in thick big vector and by making four pieces out of it in each thread uses one one part of it one quart of it okay and here you see that this thread gets its wearable by reference let's jump back I don't have an example here but this is most of the time the easiest way to do it just make a future promise spell this is which performs this function here this Lambda function this should assume does not fraternal value it returns a handle to the value and now you can use get to draw the value out of this this is called Promise once more we have a pair out of a promise and a future the promise promises to produce in value which the future picks up in the future by saying thought gets and the nice point about this construct is there are two extreme interesting properties first of all this channel between the promise and the future is safe by Design um Runner there's a little technical issue I would like to address quickly with you um your mouse pointer basically leaves copies everywhere on screen when you point yeah done now it's gone let me put it let me put it here and then I will I will not use my mouse pointers therefore you have to exactly yeah that's that's probably the solution I will I will observe myself in the second filter then I see when I have issue okay okay here we are future promise spell okay one smarter promise is the sender it produces something it sets something in the channel which the future the receiver here this should this should be fine the future the receiver gets or draws out of the channel and there are two interesting points first of all this the channel is protected no one can see the action which haven't is happening in the channel and second the channel is flexible as it extremely flexible meaning the promise and the future can uh can be different threats so once more there's no data sharing here this is how also we can solve the issue of data sharing so this wasn't about sharing now we deal with the next thing which means mutation location means we have different kinds of locking let me directly jump into this stuff first of all we have scope clocking scope blocking is essentially the ray idiom applied to locking and what's the ideal the idea of phrase the following you are require interconstructor the mutex meaning you lock it and you release it in the destructor so you make a card object which takes care of locking unlocking Android mutex then use geoscope the lifetime of this thing and then finally um the C plus plus runtime is responsible for invoking the structure and releasing The Source because this object discard object is a local a scoped object and we have scope blocking in various flavors we have Latka uni-clock since 11. oh now I have to be extremely since 70 we have scope locked I think since 14 we have shared I'm not 100 sure about Shield but pretty sure and now let me show you an example here it seems to work okay this is this is good because this would be terrible if I cannot show what it what I wanted to say this is by the way modeled after blockout this takes the mutex by reference it locks the mutex in the Constructor it unlocks it in the destructor and this is my I say scope clock you can also say my God and now I use it I feel mutex which is now the scope lock is responsible for it and therefore you see here the mutex is locked because I displayed the address of the mutex and here the same address therefore the mutex is unlocked meaning when is the mutex one unlocked when scope clock 1 goes out of scope and this is exactly like 47 and therefore this is the last time you see once mortise is right our AI resource Acquisitions initialization here I have a mutex in a local scope therefore we see here before local scope after Locker scope and here lock the Matrix release the mutex and this pattern would this idiom would not be so good if it would not deal with exceptions have a look I throw here intentionally the exception beta lock but I this is not an issue because here before dry catch Park after a catch block you see and here exactly 939 the scope Lock 3 goes out of scope therefore mutex one is unlocked so this happens in the good case such as here but also in the Bad Case meaning an exceptional code and this is the benefit of Rai you have input which is extremely nice deterministic destruction Behavior exactly here to the structures called and you see here even before you display the exception stood back and look you see who leads the mutex this is Rai in this case a special way of using it meaning scope lock let's jump back then we have strategize logging the idea of strategize logging is another idea the idea is the following assume you have some component which you want to use single threaded um Mighty sweating in different cases and this is a library and now depending on the where you use it you want to apply different locking strategies and what of course would work to always look but this makes no sense when you are in a single-stranded environment so so what you do is you want to apply exclusive locking shared locking or no locking depending on how you use your stuff and therefore you configure your locking strategy and essentially you can do it in both ways I will show you both ways you can do it at runtime or you can do it at compile time essentially strenges logging is the strategy pattern applied to login when you do it runtime what is what's the advantages you can even change it at runtime you can go for logging to no locking or something else what what are disadvantages okay it's a little bit more expensive you need a pointy Direction when you do at a compile time it's essentially for free you get flatter object hierarchies but you know templates are a little bit known for that but I can deal with this effect when I show you the example you get maybe pretty uh that's pretty error messages let me show you straight chest looking this is at one time so I have here class lock and here I have a strategized locking in this threaded size locking gets in its Constructor unlock and this lock has two fulfill this interface lock unlock you see pure uh two Workshop an abstract Base Class now I have different classes deriving from Lock I have low lock which uses internally the null object mutex and you see this is a mutex which does nothing then I have here a exclusive lock which uses a stood mutex and then I feel a shared look which uses a shared mutex and by the way um being constant is a virtual you see but because I look for example here my mutex unlock here it cannot be constant and therefore animated mutable Sapphire I can lock it or I can modify it in a const member function such as this one and that one this is a nice use case of mutable okay and then I just put it together I have strategize locking this now lock then I use the exclusive locking so my swatches logging has unloaded this exclusive locking and here I have my shared locking and here you see the interleaving of lock and unlock calls this lock here lives until uh line 81 so if we see here unlock and here you see it more uh concise shared lock lock unlock unlock and here I essentially use the three different blocking strategies the no op logging strategy the explosive lock here we are sorry exclusive locking strategy and final little shared locking strategy okay a little bit let me and then we can do it at compile time and instead of an interface I use Define uh a concept basic lockable meanings I want to power my strategize locking on a thing which supports basic lockable and this is what it should do it should support lock and unlock and this is essentially all this is almost the same such as before the big difference is uh here we are the lock is attempted argument this is all but what this is a compile time decision therefore there's no run time penalty but also you cannot change it at runtime this is also the sweatshirt pattern blind you can also say you say here you hear here more often the policy you apply different policies but then essentially it's a spreadsheet pattern from the game of war book okay let me jump back next pattern threat safe interface let me go to the thread safe interface the sweatsafe interface extends the critical region to an object okay why there's an undie pattern I will show it to you in a few seconds this is the following you want to use an object in a Threading environment and what you do in each fund member function you call first lock this has two extremely bad consequences first of all your performance will go down because you synchronize may be too much and second you have a high probability of deadlocks let me show you what I mean this is a class critical it has a method one which first cause lockout mute and then it has a message to which is called which also calls lock up mute and now let's see what's happening by the way I should give this lockout a name sorry there's a small error here but but see what's happening you lock here then you want to lock here once more therefore you have here Deadlock assume that mutex is not recursive here it's not mutex efforts exactly speaking undefined Behavior but you cannot assume catalog therefore you have here this this lock cannot be successful but you will not come back to unlock it because this doesn't work therefore this is a typical receipt for that log and here the thread safe interface pattern kicks in and this is the idea all interface member functions public should use a lock all implementation number functions such as protected and private must not use a lock and now a interface mental function can only call implementation member functions and when you follow this pattern you will look at the deadlock but of course this costs a little bit because you have always a kind of interaction going for an interface to implementation member functions and you have tools to carefully think when you have static members or virtual member functions because then it becomes more complicated but anyway here's the idea let me show it to you let me F interface one which caused the implementation Function One NF interface 2 which costs two three one and these are the implementation function they are invoked without siliconization of course because you already synchronized here and when you now invoke it such as here 31 it performs this Lambda which takes this critical data because interface one of it this uh two calls two and one and this one the main function costs one and two and here you see what's happening let's see if we can observe What's Happening by the way these are the sweat IDs this helps you a lot to see which thread is active this means first of all this function is invoked interface one calls implementation one then we have one two three with the same thread one two three and one this means the main function is invoked first interface one you see interface one calls implementation one two three one two three and finally once more interface one which cause only implementation one and so on so you can see from this output how to enter the form of thread light and this is a sweat safe interface okay and now to the last classic pattern and then we go in the direction of architecture cut suspension um what is the idea of current suspension the idea is that you need that your object has a lock in a condition and the condition has to be fulfilled before you can call but first what can be active on the object this means does calling sweat will put itself to sleep if the condition is not met I'll show you an example in a few seconds the calling sweat uses a lock when it checks it condition and the Lockport takes the calling thread from a database or deadlock okay let me let's make it more concrete this is not concrete I will show it to you here two examples we can do guarded suspension in many ways once more the ideas that you have an object which is protected by your mutex and you want to work on this object and to invoke something of the object you have to check the condition condition variable so we can do this in different ways The Waiting spot is notified about the state change remember you want to call something an object you cannot do it and then when it's done you may be notified so we can do both the rating is what is not default or the state chance or ask for the stage change so I call this push or pull principle we only have to push principle this means you want to do something an object the guy who used the object before does not need it anymore therefore you can use a conditional variable a future promise per Atomic slash Paris or semaphross to make the sentence this cases here starting with atomics are only possible in 20. I will show you an example with this I think we'll selection the poor principle does we don't support it natively in C plus plus there are more variations how you can Implement God's suspension you can wait with a time limit this can be done for example with a condition variable or future promise pair and finally you can send your notification not only to one thread but too many threats and this can be done with shared Futures conditional Atomic latches and you see so you see there are many many variations to do it and before I do now anything I will not show you an example to condition rabies you can be really really happy because conditioning labs are really really hard it really really complicated I only show you on future promise example and I show you a large example this is based on level this is based on fengine here's a small workflow based on on a few China shared future and this is my idea I use a promise sorry it looks strange but when I promise sends a notification it turns White then I draw the future out of this promise you see this my promises the future and now I have four workers I've heard F Scott and F Bionic and what they do is the following they perform this function object they get you see her prepared this is the promise by uh it's moved inside and the future is copied why because the future is a shared future so once more I have three threats huh Scott in piano each gets and future sorry in promise and to share future and it uses the shared future to be notified by the boss when they can start to work and they use the promise to notify the boss that they are ready risk preparation let me show it here this is what my workers are doing they get the Promise by hourly reference and the future by Kobe they work for specific fun aperture um time duration you see between half and two seconds and when they are done with the preparation they say prepare set value this is the notification here there is signal to this to their boss I'm done prepare my work and the boss is waiting here here wait for her wait for Scott wait for Vianney so the boss is waiting until here until the post gets notification of all his workers then he says the word says work prepared after such amount of milliseconds when all sweats or workers sent their notification the boss can continue and now the boss sends its notification set value which goes to all futures and these Futures are shared therefore all this future wait until the boss sends its notification and then they are what should I say they are done with their work so do you see this is a two-time student conversation first a worker prepared their work they notify the boss and we are done the boss continues when all three got sent their notification and then the boss I himself sends the notification uh you can start your work you see prepare your work start your work okay this was a honestly a pretty simple workflow and I'm happy that I didn't have to explain it to you using condition rareness because here I strongly prefer Futures and Jet Futures and Promises also and here's the same workflow upgraded to C plus 20. and here I have an ledge two ledges one for the workers one for the boss and this ledge let me let me explain it here this is the welcome this is the first switch you see work down and this means exactly here when the threat performs this line this counter is decreased by one and when this counter becomes zero the worker continues until here he waits and this go home latch has a value of one why because this is the Lich which is let me say signaled by the boss saying countdown so let me put it once more differently this is the main program I have workers have G sweat also trendy sweat so I perform the work help Scott in piano and then the boss Waits also the boss Waits here until this counter becomes zero and this counter becomes zero when all three threats decrease the counter by one because the initial number is three and we have three slits and when this becomes zero this call is unblocked or this this right step is done and then on the contrary the process says go home which decreases this counter from one to zero and therefore the worker can continue here and this is how this workflows goes and this is a latch which is a nice abstraction C plus plus 20. and you see this is pretty easy to Digest okay let me continue now I've become no sorry I come to the not so easy to digest stuff even my exams are pretty straightforward but this is more more challenging now I show you to architecture pattern um I think the monitor object is natively supported in Java but I implemented in C plus plus and I showed the active object the active object is a nice pattern detective object separates method execution from method invocation this means each object owns its own thread when a client wants to invoke something on a server this method invocation counts to a so-called activation list and a scheduler triggers the method execution which is shortness activation list I will show it to you with an example so previously it's a little bit more complicated so essentially we have you see here six participants first of all it's a client the client wants that some method is performed on an active object the active object runs the different threads so we have essentially two things with a client or clients in servers in between is an activation list on which does the shops that prepares jobs are slot so the proxy um the client calls the proxy which triggers a member function of the active object this member function goes to the activation list and this boxy goes back to the client this boxy call also calls a message request which has all which is required to invoke the method message is not invoked it's just gone it's not it's thought on the activation list and this activation just take covers the client from the active object sweater and interactive object the SS scheduler which looks inside the activation list and decides which shop should be executed next in my simple example I just use the next one but you can do here a lot of more sophisticated stuff there are two additional components first of all just the servant this is the guy who performs the job in work by the client this guy also supports the interface of the proxy and finally there's the future the future presents the value the future represents a hint to the shot which is starting the activation list and which the client can use later to ask for the value if there is no value okay so let me explain it once more from the dynamic point of view the client invokes the method on the proxy the proxy creates a request and passes through the scheduler and just scheduler and use the request on the activation list and returns this is what you a queue on the activation list think about it as a promise in Returns the future to the client if the request to return something now we have some shop description which can be performed think about a promise which didn't immediately start it's essentially I use the package task so the member function execution what is happening now the scheduler determines which request becomes runnable which one should run next it removes the request from the activation list in the this purchases to the servant who should perform the job and now what's happened in the completion step the servant stores this result in the future oh so it's a promise which the future can use to pick it up and then when the future has the value of course you can delete the promise this is the workflow and to make it simple this is the client sweat and this is the server thread and in between this activation list and you see the client as the proxy the proxy creates a future which becomes a request object which is stored into activation list I hope you can see me I can see my mouse sorry here it is it's an activation list then the scheduler take you something from the activation list performs it on the servant on the right and it puts through a site back and the client can use the future to pick up the result and now let me show you an example of first of all advances disadvantages and then let me show you an example and here's an example what is nice about this pattern is the following extremely nice the only thing which you have to synchronize is the activation list this is extremely nice this is the only stuff which must be sweat safe you have a clear separation between client and server the shop is done as synchronously it's just not answering constantly not done immediately therefore you have improved throughput and the scheduler can take the shops out of the activation in different ways you can write and write a sophisticated scheduler what are disadvantages of course there's a lot of indirection therefore there's a performance pedality here when the shops are too fine grained and of course the system is pretty complicated to debug when you see the structure you can immediately assume to know what's happening what can went wrong and so on and so on okay now I show you a extremely simplified example but honestly even this is simplified it's not simple here we are active object now this was the wrong button what was happening uh full screen mode I should chunk yeah does it work now it works okay I have a few clients here so this is my job and then I explain you what's happening this narrative object I have one two three four five clients which perform which are performed in five different threads each client put users random number 1998 23 2011 2014 and 2017 random numbers between 1 million and 1 billion and what is my job to decide if this random number is a prime or not and here you can already see the result to which I will come so what is happening first of all we have the active object here's the active object it has an extremely simple interface it has a member function to a tune shop it has a function to uh schedule to to to to to run the chops from the activationist and the activation list you can see it here is a deck of package tasks package task is a promise kind thing and what this package task has is a function a function object no sorry a callable and this callable gets no arguments and returns a pool in it in the pool signals is this Prime knot and in this number and because this activation list must be protected I have a mutex for protecting this calculationist and now let me show you my program first of all I invoke the functions get futures with sketched activation object and number 1998 get futures is dysfunction it gets the activity active object and the numbers of primes or the numbers the the numbers which are created by the way these are so far no no prime numbers are just numbers so here I have in Vector of futures pull into then I create here number primes random numbers and for each random number I create a job which I put on the activation list you see which is part of the active object let's see what enqueue task is doing this is enqueue task here we are we're expecting task here we are enqueue task first of all this is a function object which determines in its core operator if the number is prime or not you see if it's not prime if it's Prime it's just a simple uh function who to terms if a number is bright and here's the interesting part this is dysfunction is prime this is the job which is part of this promise and this Prime stores the number it should decide if it's prime or not then I out of this package task I create my promise you see cat future and sorry out of this future I create my Out of This Promise once more so out of this promise I create a future then I put this this promise is prime This Promise new job I put it on the activation list you see and this is stuff I have to protect because this is done concurrently and what I return is only the future the handle to the result so the chop is on the activationist and then I Got Back to Future and here is in Q task and you see it here and qtask and here I push back the future so here I have all futures a vector of futures and each future returns a pair the bull signaling it's a prime or not the ins is the number so then I unwrap the first future the outermost future and I got back a vector of Futures you see get and here for convenience reasons I put all all the Futures together you see I just move them in the first future this makes it easier for me and now the Stop Shop starts I say active object one now this is the schedule which says now perform these jobs these promises or in this case more specific package tasks let's see what run is doing Run course where's my run here's my run run cause this function Run next task as long as there is a task so what is one next task here it is it uses a lockout because now it acts with the activation list it asks first if the activation is empty meaning all jobs are performed if not it draws the first package task out of the activation list it pops it from the activations to attack and here the promise runs now something is happening here the promise runs and I do it until it's done so when I'm here all promises are performed and now I will serve space for my future and what I do now I copy all the future results into my future Vector pair pool in you see this is a vector of purple and where a pool is signaling its prime or not and in just the number and now I sort it why because when I saw this I got forced all which are non-prime because force is smaller than two and then I got the ones which are Prime and therefore I search in this vector for the first occurrence for pay first which is the indication Prime not nine Prime if it's true meaning here the prime number starts and this is what I display you see this is what I call back an iterator and then I I return all from this iterator until its end and this is what you can see here by the way I got 544 prime numbers in theater prime numbers and I got 99 499 not non-prime numbers and here are they this is from the beginning until uh to true until the point I uh I got here I should not say point I should say iterator okay this was once more I I have to say it was a simple example but of course this is a a challenging architecture okay this was the active object and this was the hardest part of my almost complicated part of my talk now let me talk finally about another concurrent architecture pattern monitor object this is pretty similar to the active object but there are two big differences first of all declined in the server running the sales thread the active object to kind of several different sweats second it's an extremely simple scheduler it just takes the first job so each a monitor object synchronize that access to an object so that at most one member function can run at any point in time so for each object has a monitor lock and a monitor condition that only one client can execute a member function of the object and the monitor condition notifies The Waiting clients because the guys who cannot run have to wait this is the yeah let's say this is a class Circle this is a class where I come you see I have a monitor object which has a few synchronized methods which are by the way based on the sweat safe interface or should be implemented using the sweatsafe interface it has a monitor lock which lock and unlock call and it has a notified end range see in this case I use the condition variable okay so these are the company components monitor objects supports member functions which can run the thread of the client this member function has synchronized methods and uh what most member function can run at any time and they should apply to sweatsafe interface which I explained before then this monitor object has a lock which guarantees exclusive access to the member functions smart synchronization and it has also monitor condition um in which the member function invocations are stored they have to wait until this object is not used by any by any threat anymore and when the current sweat is done which is member function execution this next thread is awoken to start here and this Awakening mechanism is the job of the monetary condition what are the advantages benefit of course is the synchronization is imported into monitor object tagline does not have to care the member function has automatically stored and executed and the monitor object is a simple scheduler first comes first of what is not so good is there's only one way to perform the member functions first comes first of and you use under the hood the thread safe interface and here of course when you do it wrong there's a chance of attack when uh one public member function calls for nothing both use a lot you have an issue and now finally let me show you the example and here is the implementation of the monitor you see it has a lock in which it calls underhood monit mutex locks this mutex it has an unlock which unlocks the mutex it has a notify one which uses a conditional variable seat here to send a notification and it has to wait which has an additional predicate to don't get a victim to Spirits wake up at Last Vegas this is a terrible thing this is a condition where this could be of victims of a spruce wake up and lost wake UPS it's therefore you have to use an additional predicate and by the way here I don't use type name or class this is a concept from C plus plus 20. a predicate essential function which returns a Boolean and to use it I have to use the header Concepts and now I derive from monitor my sweat safe queue because what I do is I have a queue which I want to make thread safe therefore I derive for monitor my sweat save queue I have a function for adding something to this queue you see type parameter T and have a function from getting something from this queue and therefore I have two I say here lock we choose this mod Network function lock I push something on the cube then I call unlock and notify one by the way is thread safe therefore I don't have to do here anything special second I have the weight coin first await checks if something is in the queue when so it locks it takes something out of the queue and it unlocks and you see this gives me a threat save you and it only supports two member function one for adding something what one for getting something okay and now I have uh this is my program and then we are done with this concurrency pattern stuff this is my sweat safe hue I have a function at Lambda a function get Lambda what Atlanta is doing is the following it adds something to the queue is it displays the value it's solidity and this is by the way what you can see and here this is what attitude you see 1.1345 the reason is pretty simple because uh where is it I cannot find it I cannot find it then anyway thank you self-q at yeah I I create I let a dice run and I create random numbers between one and six so Atlanta I'm a little bit irritated anyway save queue okay ah now I have it here I invoke the dice you see here I invoke my thighs and this red performs this function at Lambda so this is what is performed and this is the random number this is what my Atlanta needs and this is what my Atlanta gets here and therefore we get here the uh numbers from one to six depending how this uh dice goes and in the other part this is my um to my get Lambda number function which runs also on its own thread and here because I do sweating using C plus plus 11 I have to join my threads explicitly and once more I have 10 spreads creating random numbers and here you see the thread IDs therefore you can see the numbers are different therefore 10 different threats are running honestly 20 because I forgot to mention this one which I created here okay this was the monitor object and the idea is essentially you have object which has both a lock unlock facility in the notify weight veggie okay let me jump back because I'm I'm done so this were the patterns I presented these patterns are more fine-grained they deal with the two key concerns of concurrency sharing and mutation once more when you can get rid of one of them you are threat safe by the side because no data this can happen and these are the two patterns which deal with the architecture and this is the active object and when it object okay now I shut my mouth and I hope okay it's just in time and we have questioned Highlands yes hello Reiner nice talk um so let's start with the questions speaking about STD future what do you think about proposals like n number that proposes a continuation pattern for I know what you mean you I know what you mean this is a great idea and honestly this is the which of the futures we probably should have it with C plus plus 20 about due to discussion around executors it is delayed by a few years and we don't have it with C plus plus 23 maybe with 26 26. I'm a big fan because now you can you can uh combine Futures we should interfaces such as Dotson when all when any now you can build big big workflows out of consisting all of existing Futures that is the future of the futures indeed what do you think about the need of lock if a data is only read in another thread concurrently whereas only one thread is writing to it it's looking still require still required or not when you have concurrent writing and reading you must protect this is extremely simple you can optimize it a little bit you can use a shared look and this means at one point in time arbitrary number of threads can read but only one can write so you can weight them in different ways but once more you have to protect or read it on my blog posts to get the details so when talking about architecture I just saw that your CR your member class had a public lock and unlock function and I wondered why are your implementations they're not like using scope level locks like lock art because of the key throw of the key you are using there you're making threats safe if that key throws uh then example exactly I'm not sure because all of from the the monitor object uh where you make the key thread safe ah no I see let me go back and you had a issue here okay I see your point now I have it and in between you called uh something and key right there let me think about it I I see a point so scroll down a little bit go to add okay when you would throw here an exception you would not unlock it here it's you're right this could be improved by using a scope card which is essentially a gap which takes care of the underlying mutex let me think about it good point let me think about it okay is SC promise and future pair a useful use case pattern for a controller thread to start some threads one by one in order and wait until each finish its initialization works so that next threat honestly I am not totally sure if I can answer your question exactly but let me just say a few words first of all a promise future one is a one-time thing so you can a promise can only sell once a notification and then you have to establish this pair once more this is really really a Pity with C plus plus 11 because for a ping pong game so for respect works you need a condition with it but here's my point with C plus plus 20 you can even synchronize on atomics Atomic flick or you can even use latches barriers or you could use summer Force all of them are way faster than condition variables and way easier to use that when you have a one-time synchronization in 11 I strongly suggest that you use a promise future pair condition reps are terribly complicated I have by the way written a post about it if you don't believe me let me just show it to you and this is fun reason one of my most heavily used red post you see be aware of the types of condition variables more than 300 000 times you see they have many many issues I hope this answered your question it did um why do we need scope block implementation of C plus supports lock guard I think that's like a beginning of a talk I think you just show like how this implemented how it works so that people understand that this is a good question we got the scope clock with C plus plus 17 the lookout is 11. the main difference is the following a lockup can only get one mutex a scope that can get an arbitrary number of lockable things and the issue of the scope lock is it guarantees that they are locked in an atomic step this is a main issue in the scope Club supports it and when you when you study scope.on CPU reference you see it has it has to take at least one argument in an Arbiter number of arguments so at least once let me put it this way and once more Takia the key point is locking lockable things in the atomic step is a big big Challenge and the scope track provides this and one of the reasons why it expresses that we could not go back and change the lock guard class to do that because there's problems with API stability this may be a reason I never thought about it but I I know they are the most extremely simple they don't support an interface the API was closed and they couldn't you know informators were like in a different object so the scope lock is also extremely simple it can only lock an arbitrary number of local buildings I say local business because it's essentially a concept okay what exactly does concurrency and parallelism mean could you show like an example of the same concurrency means uh this is essentially a question of definition I'm not sure if there's there's at least five different definitions this what I always do when I write a book is write a definition I use in my book therefore you at least know what my understanding of this term is Palace means when something really runs in parallel you have four cores and it runs in parallel concurrency means when something runs at the same time you the skin still interleave you can simulate concurrency with one CPU because the scheduler always lets something different one and this is this is my definition or difference between concurrency and Parliament many other people also uh have the same definition but this is my definition so paralysis means really cool doing something at the same time and concurrency simulating parallelism so I think the best explanation I've heard so far was that uh concurrency as basketball and parallelism as track so um and then in concurrency you have a lot of dependencies on other processes and you communicate and and parallelism it's more about uh like you know sorting through a list of numbers with multiple threats there's like you know each thread has its own block of numbers starting it and then there's later like one big sword from the rest of the numbers I'm happy that you explained this picture to me because so far I I I know this picture but I couldn't understand it anyway yeah that's probably not not accessible to everyone okay uh so someone here says concurrency depending on data shared by all parallelism does not incur sharing yeah that's that's uh also a good take um let me see we're not running out of questions so far if you want to upload questions that also helps me uh choose it's gonna drop those I already did um and there's an architecture question how about that if you don't upload things then I just pick so I think architecturally do you prefer a single threaded object with a channel to share data or thread safe objects oh this is a complicated question honestly I don't know I I strongly assumed we don't have one solution which fits all and um channels are extremely nice abstraction extremely nice in particular because they are protected and thread safe objects let me put it differently I assume that you have to take do you have to think way more about stretch safe object s compared to Shared data uh compared to a channel because our channel is existed here you have two components and they are just connected with a sweat safe Channel whatever that means but with thread safe objects you see you have to think about deadlocks you have to think about if this is implemented the right way you have to think about as we saw it before should I use a mutex or should I put this mutex into a lot cut to be safe in in a when an exception happens I think sweat safe objects are as a few steps more low level and therefore I now would say I would push out tennis but once more there are so many different abstractions here one is this future promising and there's so many different abstractions okay would you advocate for using mutex or recursive mutex by default y by default always go for the simplest solution this is the utex because it is probably the fastest one and when you want to have recursive mutexes or any honestly I never use sofa recursive mutexes but when you need them because you have to lock it two times and to unlock it two times then this is your case let me add an additional mark when you use a mutex from the same sweat a mutex not recursive a mutex from the same side record safely this is undefined behavior on but you get this high probability of catalog but it's undefined Behavior yeah and and when debating what what is the best mutex and one also has to bring in that under Windows you may want to look into the binary sizes of the new Texas um shared new text is smaller than new texts under Windows as far as I know and the Abi because uh really I did only a little bit of performance measurement I was really astonished how slows shared more taxes out but anyway of course you know um make that decision what what kind of mutex you want to use you should measure um that's this is so this is a different point this is a totally different point I think you measure I can I can say a lot how you should measure but this is a different story yeah but I've just played around with so many things and measured via um what's the website but it's on my blog and I was like astonished like you know how I really like uh you can see a difference in in the same code with different compilers and like or even the same compiler on a different version so yeah this is exactly what I say when you measure something when you change anything in your environment you have to measure once more anything different Flex different compiler different topic do it once more different C plus plus stand up do it once more example you should put your measure measuring functionality under Version Control so um there was actually also a question on LinkedIn I should quickly bring on the screen um someone I think this was during the active object is this how an asynchronous method invocation is implemented this is a question or remark I don't see it I'm not sure about but it's just something I thought I wanted to bring up to you like so I think that um synchronous uh invocations can is probably one way to implement it but I think it's more like this is more like one thing which you use for RPC am I right like active object would you what you use there to implement an RPC uh I'm not I'm not you're probably a remote procedure called but you can do it maybe there's also a network in between but the essential point is you can make this bigger and bigger it's astring Chronos and there's a there's a lot of additional infrastructure you can do here and there but the key idea is this activation list and you have you have which has a sweat safe interface essentially but you see there are proxy you can see it you can also create from an interface definition language and stuff in the skeleton which you have to implement so this goes direction of combat so there's a lot of additional stuff which in here you can talk here about all right let's see if there's a quick bench right quick benches inside that quick bench okay this one which is uh on compiled Explorer also um so I think yeah so there's uh one question which doesn't have anything to do with parallelism or concurrency someone else like what would they be able to uh learn about low latency programming um techniques in your program and I think you mentioned that you plan to um exactly let me just jump back to make this mod here this is probably but one of my last mentoring programs and this is about HPC and I I know of a lot of people which are highly active in the financial domain you may notice that like a few presentations in the last year there and they helped me a little bit to identify what is for them highly valuable and of course low latency is one of the key points here because when you can make your transaction faster than your neighbor you have a benefit so once more this is what I will address here okay yeah that's true and I think as yeah there's many ways where your courses uh will go in the future um so I don't see any more questions which I was covering um thank you for your time Rana was great to have you as a guest and we'll be probably hanging out on the launch now if you have any more uh