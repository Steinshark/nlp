today we're going to be covering a very efficient way of creating gutters and Setters in Python and if you have used literally any other programming language you probably already are very familiar with how Getters and Setters work but as soon as you've transferred to python you probably will have noticed that python doesn't have any way of making anything private hence Getters and Setters kind of lost a piece of their value in the Python programming language but there are still some conventions and there is still some special syntax we can use to achieve these gutters and Setters so I'm going to show you two ways you can do this in Python one is a very vanilla way of doing it and one is using property wrappers which really cleans up our code a lot so to get started let's go ahead and create a class called fruits and that's just going to be a normal class and we're going to have to provide an initializer because the first thing you need to note is that when you're creating a private variable in Python we need to use the special underscore syntax so self underscore name is going to equal the name and we also have to pass it up here so the name will be of type string so you might be asking what was the point of adding this underscore here and this is merely a convention in Python when you want something to be private and some code editors actually take this into account so if we actually go ahead and try to create a name is equal to Main Check and we instantiate this fruit as a fruit which we'll just call Banana you'll notice that when we call the fruits we're not going to get any of the variable names suggested to our fruit although if we go ahead and print fruit dot underscore name we're still going to get that printed to the console because we can still refer to it it's not invisible it's not private there's nothing restricting us from touching that but as a naming convention we do use the school and again in pycharm it's not going to suggest it so it hides that from us now let's go ahead and remove that statement there now in general in Python if you want to create a getter and a Setter you would go ahead and create a variable that says get name inside your class and inside here it would go ahead and return self.name and that's how we would get the name and of course you can add whatever kind of code you want inside here you can go ahead and say getting name and this will be the code that's applied to it as you're getting the name and if you want to create a Setter you would go ahead and say set name and here we need to go ahead and type in new name of type string and here we can say self dot underscore name is equal to the new name and that will take care of creating the new name so now if we actually want to print the name we can go ahead and say print and we will call the fruit and say get the name and when we run this program we will get the banana back with the processing that we've applied to it and if we want to set a new name we can go ahead and save fruits and here we'll type in Orange so we will set the name before we get the name and thanks to that we will have orange that we get instead of banana now this syntax is very simple but if you have a big project that you've not created any Getters and status for it can be quite annoying to go ahead and have to change this everywhere what we really want to do is simplify this so that we only need to specify the variable name once and then whatever we do with it will automatically call the getter and the setter so instead of doing all of this we're going to go ahead and delete the fun functions and delete these calls and right below we're going to go ahead and use a property wrapper and the property wrapper just defines that whatever we're creating here is going to be considered a property so here we'll go ahead and say fruit name and now this is considered a property and every time we access it it's going to call this code so this is the getter method and inside here we're going to go ahead and say that self dot underscore name was accessed and then we want to return self underscore name so so far that's nothing different than creating a getter but now we have some added syntax that we can use so if we type in at fruit name you'll notice that it's going to pop up as a property and that we can use that along with seta deleta and Getta although using the getter wrapper isn't really necessary because we already have the property wrap that acts as a getter but we can still use the other two such as the setter so here we just need to go ahead and call the fruit name once again we say a fruit name self and here we'll just go ahead and set the fruit name and this actually requires that we follow a certain syntax so set a signature should be self and value so of course here's the value we're going to be setting and you can set that to any kind of data type you want and here we'll go ahead and say that we are setting the self dot underscore name to the new value so self.name is now equal to value and of course we need to also do that so self underscore name is going to equal the value we insert so now we have the same getter and Setter and there's only one more property wrap I want to show you that we can still use and that's a fruit name dot delete so this is what happens when we delete this variable so if we go ahead and say fruit name once again and that's going to take self as always we can print that self dot underscore name was deleted and I will put these in quotation marks so now we have achieved what we've created earlier except with the property rampa but now let's go ahead and see how we can use the true beauty of this property wrapper so here we're going to go ahead and print the fruit dot fruit name and as you can see here the syntax is already a lot more natural we're just referring to the fruit name as if it was a normal variable even though this is a getter variable and as soon as we run the program we're going to get back banana and it's also going to trigger the getter method so Banana was accessed as we wrote here in the fruit name self underscore name was accessed and we returned the name now without having to create any different kind of methods we can go ahead and change the fruit name so fruit name is going to equal now orange and if we run this snippet of code it's going to say banana is now orange because we've triggered the SATA method and finally we do have that one extra method that we get with the property wrapper and that's the deleted and I forgot to go ahead and delete self.underscore name so of course you can put any functionality that you want to happen in here when you're deleting the object but now when we go ahead and say that we want to delete the fruit dot fruit name it's going to go ahead and Trigger that function over there and it will say orange was deleted and if you want to check whether it was deleted or not just try to access it you'll see that as soon as we try to run this it's not going to have any attribute that's called underscore name so we've effectively deleted that from the class so as you can see using Getters and settings in Python isn't really necessarily that hard there are two ways you can do it and one is using normal class methods while the other one is using this property wrapper which just makes it a bit easier to use the same variable name everywhere and that can also result in not having to refactor your code so much in your project but anyways guys that's actually all I wanted to cover in today's lesson so as always thanks for watching and I'll see you in the next lesson