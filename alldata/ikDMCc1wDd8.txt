now you might be asking yourself how did you end in this situation you wanted to watch something that had to do with python and you're watching a monkey who is stretching in nature well it's not that irrelevant and I promise that this has a lot to do with what we're about to learn because the topic that we're going to be covering today is called monkey patching and it's an interesting technique in Python some will call it interesting some will call it disgusting but it has to do with changing the functionality of modules at runtime and a benefit of doing this is if you want to create some tests for modules that rely on external sources of data such as an API you might want to create some fake data to make sure that your tests run consistently because if you continuously get random data you will never know where your test is going to fail so with monkey patching we can go ahead and actually edit the module directly at runtime in Python so let's go ahead and see how this works in practice now now to make this actually work we're going to go ahead and create a new module so here we'll go ahead and type in Python file and we'll go ahead and say module or actually I wanted this to be called sample module so sample module.pi and this will be our sample module and we need to go ahead and import requests which I already have installed but we're going to be using this to make an API request and I'm going to go ahead and paste in the function I had from earlier since this is not the purpose of the video we have a function that says get data and I have a lot of squiggly lines so we have a function that says get data and it creates a request and it's going to get some placeholder Json from this API now we're lucky here because this placeholder is always going to be the same so for testing it wouldn't really be a problem but in other situations if we try to go ahead and call get data it's always going to make the API request and we never know what kind of data it's going to return to us so the best case scenario for testing is that we get a reliable response that we can check for mistakes in case our tests fail of course you can make a test that checks for random input but that wouldn't be too consistent with our testing so so right now if we want to use this function in our main file we have to go ahead and import the sample module then we can go ahead and check if name is equal to Main and here we can go ahead and say sample module dot get data and right before we run this we need to print it since it returns data and if we actually run this we're going to get the Json from the API so everything's working perfectly but again when we create a test this information can really vary so it's important we get a fixed response back so now it's time we go ahead and see how we can use monkey patching so first we're going to go ahead and create a function called get sample data and that's going to return to us a dictionary and it's going to return to us some sample data the data that we want to use for testing for example so here we have user and mario123 and then we have an ID of one two three four five six now forget that this is not the same format as the previous Json this is just to show you that we're going to get a standard response back from our function so now we have some sample data that we can test with to see if certain parts of our program function correctly but what does this have to do with the monkey patching and let me go ahead and show you and to do this we're going to go ahead and also create another print statement so here we're going to go ahead and type in B4 format that right below we'll go ahead and call sample module dot get data without the parentheses and that's going to equal get sample data so we are changing the module function at runtime so now when we go ahead and copy this print statement and paste it under and say after you'll notice that when we run the program we're going to get two different responses with the exact same function call to the module so here we actually performed the monkey patching we gave this function that belonged to this module a new function which will help us return reliable data for our testing without modifying the actual code so as you can see every time we call sample module with get data it's now going to refer to this one over here because we've reassigned the function to sample module for testing purposes now you're not limited to using your user-defined modules you can even go back to the sample module where we have requests and we can do something far more disgusting here we're just going to go ahead and return something such as hello with one two three so now we've modified this completely and we can do this we can go ahead and say requests dot get which of course we know what it does and we can go ahead and assign it the value of get data so now when we go ahead and print requests dot get and actually we do need to provide the parentheses you'll see that when we run this and we should put that in a main check take this as well we're going to get the new response hello123 even if it requires those other parameters and when you hover over the dot get it will still refer to the documentation of the correct one but here we provided a monkey patch which allowed us to create a test implementation of whatever function we wanted to override but with that being said guys it's actually time for me to go outside so I'll catch you in the next lesson