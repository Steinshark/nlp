uh for those of you who don't know me um i've been programming for a little bit over 20 years now um working most of that time on advanced installer um basically uh improving the the virtualization and packaging capabilities of windows applications and i've done some open source work as well some of you might know clan power tools right from the start i have to preface this with uh this being my c plus plus universe so it's a very personal experience um about the things i've learned teaching c plus plus in uni and um things i've learned in sharing my experiences with friends of mine in academia and the the things i learned from students and interns and young developers i i mentored and this might as might well be different from your experience and i'm actually very interested to hear your opinions and your take on various topics that i'm going to cover so it's definitely a personal take for my my my my opinions and my scars with regards to teaching c plus plus especially to freshman and sophomore so my experience is closely related to my alma mater university of cryova where i was a student more than 20 years ago and where i am a visiting professor so especially in the computing engineering department of my alma mater where i regularly go and teach invited workshops every year for the past six or seven years now so i'm a regular guest at the computing engineering department i give invited lectures and workshops on various topics stl algorithms optimization techniques programming principles in general i've been doing this for a while now and i've collaborated with my friends in academia we coached teams for student competitions um and we work with very very bright young programmers there in june july every year um again in collaboration with some of my friends uh it's it's a very rewarding experience for me uh to organize and teach a free workshop open for tech summer school for software it's aimed at college and high school students so it's open for everyone but mainly college and high school students attend each summer we just ended another successful albed online version of open for tech this july we wrapped things up and i had a blast teaching a workshop on hashing algorithms and hashing containers this year the topics i've covered over the years in my lectures and workshops again this strongly influences my experiences and the reactions and the feedback i got doing this i thought programming techniques for freshmen algorithms and data structures particularly graph entries node-based data structures i thought pure c-plus plus both pre-17 and uh 17 and 20 uh c plus plus so i've been doing this for a few years now and i got a chance to teach both the old ways and the new um i i did a little bit of functional programming um i did a workshop uh using hask like a hybrid uh using uh haskell and functional style c plus plus i'll talk about a little bit about this later on so i did this experiment as well to see uh how it fares uh would relate to the other ways i i went about teaching algorithms and this year i did a workshop on hashing algorithms and containers so generally student expectations in year one is that they hear that software is eating the world and they want to be a part of it and they're very enthusiastic and they may have some programming knowledge from high school maybe some of them have not all of them but certainly they uh most of them don't have any real experience with c plus they've heard of it um but they don't have any really experienced uh writing programs in c plus plus and c plus plus has been a staple diet in most universities that i know for more than 20 years i think so the question at hand is um ist plus plus a good starting uh tool for learning programming in general is it a fit language for cs1 how successful are we as teachers uh in imparting good programming techniques and um is this is c plus plus a good first encounter with programming in general for people starting out and as you might imagine even with modern as we like to call it for more than 10 years now uh modern post-modern uh however you like to call it now uh even with modern c plus plus for most students i would say the first encounter with c plus plus is a little bit violent and i i'll show some of the some of the things i i've seen and some of the takes uh i've seen from students uh in trying to navigate this uncharted territory uh with c plus plus as a as a driving tool so the question i had is uh is c plus plus uh good as a first language really for cs1 and i would point you to a very good presentation by patrice ra from cppcon uh 2019 patrice as opposed to myself he's actually a long time teacher a very experienced teacher and has been teaching boost college and uni and has been doing it for many years now using c plus plus so he has very good tips and very strong opinions with regards to the different techniques and um for for him the vertex is quite clear that c plus plus is fit as a first language uh and he has uh very nice examples and uh shares the the experience he gained over the years in in teaching people and um and he also does workshops uh at conferences he regularly does workshops at cppcon as well and you can see that um many many people sign up for his workshops so uh he clearly knows what he's doing there so i do encourage you to to save this link for later and watch this talk by patrice uh if you haven't seen it already so coming back um things i'm hearing from people in the industry from um people in academia common themes that keep popping up with regards to using c plus as a teaching tool um there's lots of room for us to make c plus plus more teachable and improve the quality of c plus plus teaching in uni i think everyone agrees on that but here's where where's where the catch lies so long as we're not talking about cs1 so many people think that c plus plus has a place and it's important to to be something that is used in teaching and in learning in programming in universities but some some people are reluctant to say that this is fit for the first encounter and the argument is that first students have to get over the order of being algorithmic thinkers and then we can give them a language that has these sharp edges so um i don't i'm not exactly sure i'm not going to give away the ending here of course there are alternatives and i would like to hear about maybe alternative routes there um i don't know if this is the right community being a c plus plus meetup but um i would be interested to to hear um different opinions for example people using uh typescript or javascript or python as an alternative first language to for freshmen so i did some experimenting so i've been doing teaching the traditional way for a few years now but i did i think uh three or four years ago i did an experiment um where i tried to teach functional style programming both with haskell and teach about higher order functions and um even teach c plus plus in a functional way to see if the problem lies with the low-level mechanics of the language and memory management and the imperative style of dealing with variables and state or the problem is in the composition part or the algorithms or the standard library and i tried to weigh down to see which route went better so i did a course carry on functional programming there a big help in this regard was the the material in uh ivan's book their functional programming c plus plus uh i highly recommend this book um if you if we have if you haven't had a chance to read it uh it's well worth your time it's something different i'm sure um even experienced programmers will learn something new from this book so i do encourage you to to read it so i did experiments with c plus plus 20 ranges before they were c plus plus 20 so i did experiments in in trying to teach algorithms using range based libraries and that turned out to be more successful than i expected so student students actually build up on intuition in terms of composition and projections and piping operations so it turned out better than i expected there but if if i if i [Music] in hindsight if i go back and analyze i think the most effective approach at least in my case was still the traditional way of learning about stl algorithms and data structures and learning about modern post c plus plus 14 features in the traditional way rather than taking the functional route maybe because some of the students had already been corrupted by the imperative way of thinking about organizing programs in sequential way and thinking in terms of instructions or step-by-step instructions rather than composing uh higher order concepts and thinking in terms of function as first class first class objects to be passed around and definitely i found that lazy evaluation is a thing that doesn't sit well with many many students so i i found that the traditional approach in teaching c plus plus and stl fared better a little better than the functional route i tried to take so some of the sharp edges students encounter around language both language and library so if you think about very simple concepts students immediately run into very tricky situations immediately as soon as they go beyond toy examples standard textbook examples as soon as they start actually doing meaningful stuff meaningful programs as i try to push them in that direction they immediately run into compilation errors and semantic issues and uh undefined behavior even so we if we think about special member functions and the whole mess around understanding when special number functions should or shouldn't be declared or uh using default implementation and so on so some of the rules are very confusing for uh many students in this regard uh and i'm sure we're gonna hear more more about this in uh peter summerland's uh presentation of two two weeks from now if i'm not mistaken so i'll leave that for peter to discuss because he has strong opinions around special member functions and his rule of this demo getting started with a project because students are encouraged to to work on long-term projects not just writing up functions so getting started with projects again a bit harder for students they don't want to reinvent the wheel they want to reuse existing components and take on some dependencies again [Music] this is not a place where c plus plus shines as a community we we haven't agreed on a unified package management or a unified repository for packages so again they have to scramble and think about uh taking on dependencies and what that implies for their projects and for their build um some examples that perplexed students uh from right from the start they have to deal with strings so um i've taken this example from victor and jason turner so again a simple act of constructing a string or constructing a substring there it can be very perplexing and it i think it all boils down to the fact that standard string has 11 constructors and there are no compiler diagnostics or warnings to actually help you navigate this mess if you're not hitting the right overload or the the constructor that you actually meant to get there and uh if you're talking about c plus plus 17 and types of new vocabulary types like string view and span in c plus plus 20 um it turns out it's actually worse for beginners in in my experience because uh by design uh it's easy to convert a string to a string view and a vector or a to a standard span so dealing with dangling references there it's almost a default behavior things like reference semantics and lifestyle lives lifetime extension are difficult concepts to explain and they turn out to be surprising for people learning right away um even the basic idea of string view not being really a reference type or a value type being this kind of borrow type that acts strange it doesn't behave like a regular reference in extending the lifetime of a temporary turns out to be very surprising for many many people learning learning about it and wrongly using it there are cvp core guidelines of course that's always our answer but nobody reads the docs honestly we're talking about students here right um we have tools and we'd like to think we don't read the docs because we have great tools to rely on and we do some of them are good clank tidy has a specific check for the scenario of a dangling handle like string view so there is a specific check for this and there are flags to diagnose this kind of dangling reference starting with clank 10 already there are plenty of slang tidy specific checks related to strings so good decent coverage there but i don't think i don't think people learning to program get into the habit of actually relying on tools beyond the compiler and standard libraries so we have to constantly encourage them to explore additional tools and regularly use them because the difference here being that the compiler in the library you kind of have to use them to produce running programs from what you write as opposed to static analysis tools and linters and everything which are add-ons or an afterthought or something that people learning consider hurdles to use and we're not talking about people setting up cicd systems here to learn so relying on additional tools it's something that we cannot honestly expect the students to do we can encourage them but again first encounter here with uh as soon as we talk about order collections and algorithms that work on order collections uh we talk about sorting and more complications come here from new concepts that pop up with regards to sorting things we have to deal with named requirements and ranges and we have to talk about binary predicates and what that means and why is this important the the compare the name requirement why is it relevant and what it takes for for type to be able to participate in a collection that can be sorted without undefined behavior so what kind of ordering relationship is needed for the elements of the collection in order to for the standard sort algorithm to actually work and as soon as we try to drill in and see their intuition tends to gravitate towards partial ordering and that's clearly wrong and i have to show them examples where this is not holding up and i for example i try to encourage them to find a good sorting predicate for a 2d point and they immediately go for comparing uh with a logical and both parts of the structure and again i have to show them by example why this is wrong and it's not a good uh compare predicate for sorting 2d points um the the visual aspect i think is very important in showing them where situations are undecidable where two elements are clearly ordered and situations where uh given the given the predicate uh used uh we cannot decide if the those elements are ordered or not so again they have to build up intuition for what equivalence is and equivalent classes equivalence classes and i try to visualize these things so that they they go beyond axioms of um partial ordering and strict recording to unders actually understand why the predicate that they wrote is not fit for this and how we need to strengthen this relationship this requirement and add the transitivity of equivalence now that they've seen what equivalence means for a given predicate and um again the formalism behind it and uh then we gradually move together towards strict weak strict total ordering quick ordering and see um elements that are totally ordered by less than and how it fits in with the initial example that we started and if it checks out in in actual examples so that they gain confidence in in the predicate they they've built and um the almost uh almost all the time every year i do this uh the very next thing that pops up as as an example coming from them is the the distance from the origin in a cartesian plane as suited as a suitable compare predicate which checks out with regards to the to the actions and the requirements of the stl there but um there it takes a lot of work uh to actually lead students to a discussion and to think about comparing a structure with parts in comparing them by parts comparing the the first part in this case the x-coordinate and in case of equivalence with regards to the first part compared by the second part so comparing this idea of comparing by parts it's not something that really comes right away for them and it it takes some hand holding and explanations and many examples to lead them to this path and talk about lexicographic order and lexicographic compare so i always find these issues problematic when teaching sorting and teaching strict weak ordering and stl requirements and i see them really really understand after a long discussion on this topic but it's it's nothing it's not something that comes natural or something that is immediately intuitive so i think we have to do a better job here and i'm not exactly sure that c plus 20 concepts will help in this regard because um actually checking uh at the interface level for the algorithm that a particular named requirement is not met uh it's uh it's certainly a flag so it's no longer a runtime surprise it's certainly a flag they see when compiling that something is wrong but it takes a while to understand why something they wrote uh predicates they they've built is not appropriate so you've exchanged undefined behavior or vague at runtime with a compiler which is great but it still takes quite a while to to build intuition on figure out figuring out what the right answer is so it's it's tiresome but i i i think it's worth it um going beyond uh the traditional classes 2020 and this year as well has been challenging um on a whole different level i continue doing these guest lectures in the online format and as many uh trainers friends of mine shared this comes with new challenges so um by the way this is the the exact same example i i walked you through i i think you can see the puzzled face on one on this student um okay um this was the workshop from this year so i think the one of the major challenges in online training uh and online classes uh is the the interaction the fact that you don't have a rapport with the audience the do you have the sensitive issue of the camera on and you don't have any feedback direct feedback to see on on students faces uh if an explanation really reaches them or if they might have uh some some um doubts or some questions or something because they don't always reach out for a microphone or the chat to ask a question or interrupt to settle something that it was not clear for them so i get i always have to scan the the little rectangles to see their faces to see if they're still with me or if maybe i have lost some of them at some point so there's a sensitive issue and a recurring theme so i've talked to a lot of people about this both teachers and professional trainers in the c plus plus community friends of mine and i have gathered some rough estimates generally in workshop for workshops for companies some trainers claim that 50 between 50 and 17 percent of attendees have their camera on so always trainers ask for camera on this is most of the time i happen uh met a trainer or teacher that doesn't ask for camera on at least not in my case so um 50 to 70 percent of attendees have camera on in workshops for companies when so that's this is when a trainer is brought to to do a training in a company uh in open workshops that are paid uh camera only drops uh between 20 and 50 from what i've talked to people this might be for example workshops at conferences and so on uh sadly in uni courses and seminars uh my teacher friends and myself we've seen a way low lower percentage roughly 10 percent of students have their camera on and this is uh difficult like i told you not being able to see the reactions not being able to see their faces and their approval and their doubts in in their eyes it's it's really difficult for for us to make a good job in teaching and reaching them and making sure that we we insist on the the parts that we need to to insist on so beyond 21 uh hoping to be different going back to the theme of uh using c plus plus in cs1 and as a first tool to teach programming in general and programming concepts um is using c plus plus a lost cause i think not uh i've gained confidence over the years uh that modern c plus plus is simpler and safer truly uh and we have numerous opportunities to make it more teachable at the same time by this i mean both advances in the language and libraries in terms of what we standardize and the practices that we teach teaching good uh good principles and teaching by real examples rather than fake textbook examples showing real code showing real bugs and real messy code and trying to refactor code with students and show them better ways teaching them to identify code smells uh even in modern constructs and teach them some caution why not in adopting all the new whis bank features from c plus plus 23 or something just because something is new is not necessarily great to be used everywhere so we have numerous opportunities to to improve as teachers and improve the language and the the community as a whole and the tools that we have are at our disposal to use uh for learning programming um you can get involved there's actually a study group sg20 in the iso c plus plus committee that is dedicated to education uh so i do encourage you to watch this uh wonderful presentation by chris how to teach c plus plus an influence to generation i think it's a very appropriate title and a very uh very uh enlightened presentation so i do have this link here again bookmark it if you want to watch it later so the king is that long live the king c plus plus i'm hoping to um that i'm hoping that you'll reach out and we'll continue this as a conversation in