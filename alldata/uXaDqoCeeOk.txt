if you want to succeed in learning to code you cannot rely on playing the game fairly what you need to do is find your unfair Advantage as a programmer I did this myself when I was working my first job as a software engineer I knew that I could not compete me my PS on a level of playing field because they had either more experience or computer science degree or other kind of advantages that I simply didn't have but what I did have was these seven coding skills that I had learned that most authors hadn't and this includes skills that I was able to use to instantly impress my more experienced colleagues to massively reduce how much impostor syndrome I was feeling and one skill that really made me stand out as a developer even though I had no CS degree and no experience and in this video I'm going to tell you what these skills are so that you can learn them as well and give you that unfair Advantage as well now this first one is something that developers use every day yet so many beginners somehow don't think is important to learn and that is git and to be honest a big reason why many people don't learn it is because it's pretty pretty complicated or at least it seems like in the beginning but it doesn't have to be so here's all you need to know about git as well as the one resource that I recommend to learn more about it so imagine you are working on the front end of a website and you have an idea for a change you would like to make like a new component you want to add but you're not sure if that new component will make sense yet what you might like to do is save a checkpoint sort of to save the current state of where you are with your website so you can come back to it later if you decide you want to so what G allows to do is exactly this by creating something called branches so what you can do is simply create a git repository for a project by installing git and calling git in it and then at any time you can save these checkpoints by creating a git Branch by running git checkout DB and the branch name and then your progress will be saved so to speak for you to compact to at any point and then you can save your progress within a branch at any time by running git add Dot and git commit DM and then commit message of your choice or you can delete your progress if you want by calling git stash I believe the most important git resource you want to go over in the description which includes everything you need to know about it but this right here what I just described with just these couple of command it's really everything you need to know about G to get started with it and it's really the Crux of how it works these next two skills are probably the most important skills for any developer to possess and finally they're not actually coding skills per se they're more like skills on how to think about the process of coding this first of another two is something that will actually set you apart in interviews a lot to illustrate why let me give you two scenarios of a person who is applying for a job and I want you to tell me which one you think is more likely to get the job first we have person one who Aces the technical test but in the interview is quite timid and doesn't seem to be able to talk to the interview and to build any kind of human Report with them then we have person two who's really personable and who very clearly articulates their approach to solving the interview problem and while they get the result right in the end they really struggle during the interview now which one would you rather be I would actually say person two will have the advantage and the reason why is like if I'm just looking at my own startup if I was to hire someone for a startup right now I would much rather work with someone who is decent at coding but a really awesome person to work with who communicates really well than someone who's a coding genius but who's basically a complete nerd who cannot communicate with humans talk because the thing is with most software engineering you don't actually need to be a genius to know how to do the coding part and this is what so many beginner programmers get wrong there are so many developers who are like Wizards with the coding part but who are really tough to work with because they don't focus on the human skills and they lack the skill of communication so if you want a very easy way to give yourself an unfair advantage over all these people learn to communicate really well because this is really something that they look for and this brings us to the next skill and this is something that is really hard to teach and to describe in words but something that I wish I could just shake every single one of you and bang this one skill into your head because this is so so like easy yet somehow so complicated for many people to understand I'm going to give you two scenarios again let's say your senior de has Ted you with creating an endpoint for your company's payment server to accept and handle credit card transactions but you have a problem you have no idea what an endpoint means let alone how to create one so what do you do what most people would do is simply give up and decide that well he was supposed to tell me how to do this and I don't know how to do it so I can't possibly know how to do it and it's not my fault now that might very well be true that the senior Dev should have given you pointers on how to do this but because he like most senior devs lacks the skill of communication he didn't do that yet still if you just give up and it shows you lack this third skill what you should do in every scenario is do whatever you can to find the answer on your own to open up Google to read up on whatever you don't understand and give it your best best shot now maybe you won't do it perfectly maybe you won't do it even correctly but if you at least give it a good try this shows resourcefulness and that is one of the key skills of any developer that will give you a massive unfair Advantage even when you don't know what to do although to really get the unfair Advantage from being resourceful there's also a second part of the skill but before I tell you what that is we need to understand the next two skills the first of which is data structures and algorithms and I'm not just saying this because you need need them for most coding interviews there's something different that learning data struction algorithms gives you that most people don't realize if you really think about this like what is the biggest problem most beginners have is it a lack of resources well no there's so many of them like my program python developer boot cam which literally gives you everything you need in a silver platter by the way if you're interested in the program you can use the code IMC school for a $30 discount anyway it's the problem that we aren't smart enough well no anyone is smart enough to learn the code as long as you are resourceful so then what is the problem I think the real problem we have is up here in our mindset most of us don't think we are amazing at coding in other words we have impostor syndrome that stops us from trying enough to actually see the results that we want if you don't think you're good enough to learn the code you won't have the confidence to apply for jobs in the first place or to really try hard enough which guarantees you will fail and how do we fix that by becoming confident and how do we do that by practicing so many difficult coding problems becomes impossible for us to be bad at coding and what do you need to practice and solve the most difficult coding problems well you need data structures and algorithms because datu and algorithms is really the foundation of coding logic it's what every program is actually made of and if you don't understand them it makes sense if you don't feel confident as a programmer to ignore the haters and learn the distruction and algorithms because it will make you feel better about yourself as a programmer the next one I put here is web architecture because most beginners start off as web developers but really you can replace with with the architecture basics of insert your chosen coding field here in the case of web development it really gives you an under advantage to actually take the time to understand the web conceptually like what does it mean to build a back end and the front end what is an API what is devops why everything we use in the web exists and how it all links together because when you do this it becomes so much easier to solve whatever specific problem you're given as a programmer because you understand the wider context of what you're actually doing and most people don't do this because most people just focus on the Wiis like the individual details of web programming or programming in general so they sort of lose the forest for the trees so that's why another really easy way to give you an unfair Advantage is to learn the wider context and The Wider architecture of the web or whatever it's your chosen programming field now this brings us back to another noncoding coding skill so like I said before being a programmer is really just about having the willingness to go out there to learn and figure things out on your own you will find that literally every task you're given as a junior developer is something that you don't know how to do immediately and this is a good thing because it means that you are learning and next time you will know how to do that thing because now you've done it but it all works only if you're willing to sit there long enough to find the solution to your problem on your own the real good developers out there and this is something that I'm still learning today myself are not necessarily the ones that are the smartest or who are the most technically Savvy they're just the ones who have the grit to sit there staring at error codes and take one small step at a time to get closer and closer to the root cause of the error or the solution of the problem that they're solving or whatever they're doing the greatest feeling as a developer is finding find the root cause of an error that you have been struggling with for hours but what stops most beginners from getting there is that they just quit before they even get there because it's too hard or whatever so the one thing that will give you the biggest uner advantage in my opinion like really the only thing you actually need to succeed with coding is not get but grit which is having the mindset of letting nothing in the world stop you from getting past whatever problem is in front of you if you do that you will eventually succeed now this last skill is something that I was able to use to instantly impress my colleagues in my first job and that is python Automation and here's how I did it the reason why python automation is such a great skill for giving you an unfair Advantage is because it can be applied anyway let's say you learn cyber security it can be useful but only if you work on something where cyber security is relevant the project I was working on had nothing to do with python automation at all or even python for that matter yet I was still still able to use Python automation to automate some repetitive tasks that our team was having to do all the time in this case there were these config files we have to manually generate for tons of repositories which was taking ages so I made a python script to do all of them automatically which won me a lot of Goodwill with my team because I just saved them a ton of time and that is why learning python automation is an absolute must for any programmer in my opinion and I actually made this video here where I give you three python automation projects for beginners so you can get started with it right away so I recommend that you go watch that video next and really learn the skill of python automation