[Music] hello everyone about a year ago I asked if any of you would be interested in a video where I just answer some questions most of you said yes so I hope that's still the case because that's what we're finally doing today and sub-optimal engineer asked about my process for creating videos so I usually start by just experimenting with something that I'm excited about in the moment and try to create a little project around that sometimes I do lose interest along the way or get discouraged if I'm really struggling to make the progress I want in which case I'll usually just switch to something else and try to remember that I've at least learned something and can always come back to it in the future for every project though I keep a detailed history of the development using Version Control because I find it a bit distracting to worry about recording stuff while I'm working so this allows me to revisit and capture any interesting moments after the fact for example I could open up plane doing flips for some reason while turning so I started recording and then try turning wait why is this working that's not supposed to happen oh it's only if you turn left that it breaks I wonder how I managed to do that I don't remember if I put this in the video or not because I do cut off quite a lot of stuff to try to keep the video as a reasonable length for example something I slightly regret leaving out is some experiments I did with the jump flooding algorithm to render country outlines it didn't work out how I wanted but I think it was kind of interesting anyway with the project finished or at least mostly finished I worked my way through that whole history and take screen recordings of everything that I think would be nice to show at the same time I start piecing together a rough script of what I want to say and in what order because I do jump around a lot while working and I think it's nice if the video has some sort of structure at least it's also now that I'll start figuring out which parts of the video I want to make extra visualizations for either to help explain a concept or even just to have something interesting happening on the screen while I'm rambling on in the background Chancellor another question quickly in between here from avlight about whether these are made purely for the video or if they're for my own benefit as well I'd say the majority I made after the project just for the video but sometimes I would have made a rough visualization to help figure something out or test that it's working properly and then later just give it a little glow up for the sake of presentation even when it's just for the video though the process of making the visualization often does end up improving or at least solidifying my understanding of the thing even if I thought I understood it fully already anyway after making the visualizations I do a rough read through of the script and start arranging all the Clips in the editing program DaVinci Resolve this helps to get a sense of the pacing and I can then refine the script a little or even cut out whole sections if they feel too boring or confusing I then do the final voice over and a final pass on the editing as well which looks like this for the recent Ray tracing video for example once that's done I have to watch the whole thing and take notes on what still needs some tweaking for hopefully the final final draft then well let's rendering and uploading it's at last time for my least favorite step which is trying to condense these months of work into a single title and thumbnail that you hope people are going to find interesting enough to click on and that's more or less my process so to answer another question that I get quite often which is what's your job outside of YouTube the answer is that I don't have one I know it might not seem like I do this full time from the long gaps between uploads but honestly the videos just take a really long time to make ambiguous name buzzyrobo the zebuild and Wahoo ask about my process for creating visualizations so I make all the visualizations in unity just because it's convenient of course to have them in the same place as the actual project where I can make use of all the data and functions already in the project something as simple as drawing a circle can be a bit cumbersome in unity though for example the most obvious way might be to instantiate a sphere and then assign an undead material and finally set the color position and scale to whatever you want but this is a slightly awkward way to do this kind of work because you need to make sure you instantiate all the elements once and then keep references to them so you can animate them and then remember to hide or destroy them of course when you move on to the next part of the visualization so back when I first started making these sorts of little animations for my videos I spent a bit of time writing some scripts to make the process easier for example there's a script that contains a function for drawing a point and that works by simply rendering a quad mesh to the screen for a single frame with the given position and size the desired color is then also passed to the Shader on that quad which sets the pixels that lie inside of the unit circle to that color and mix the ones outside the circle completely transparent so now whenever I want to draw a point I can simply say draw a point pass in some settings and there it is also functions for lines and arrows and some other simple things this has been pretty helpful for creating animations and interactive diagrams over the years and I still use it sometimes but more often these days I'm using a really nice asset called shapes which in essence does the same thing just many times better I'm sure many of you are already familiar with Freya the creator of this asset But be sure to have a look at her videos if not because the visualizations put mind to shame anyway now that we have an easy way to draw things we need to animate them so for example we could take the current time divided by some duration and clamp it between 0 and 1. then we could use that value to control say the X position of the point like this and so now we have some simple linear motion this is a bit plan though so let's pull off the graph where we currently have time advancing in a straight line if we turn time into a parabola by squaring it though we can see it now start slow and speeds up towards the end or we could flip that on its head to make time start fast and slow down towards the end and of course if we want to amplify this effect we could also try cubing time instead of squaring it so I've added this cubic ease out to the code here and if we take a look now at the motion it produces it's definitely a bit more interesting with a little bit of maths we can also make it so that it starts out slowly goes really fast in the middle and then ends slowly as well and here's what that motion looks like so I always spend a bit of time experimenting with these different easing functions and there are many other variations of course two find one that works well for the current animation so that it looks polished and is at least somewhat satisfying to watch now the next thing to think about is timing different elements in an animation so as a simple example say we want to draw a bunch of these points appearing in as a spiral and once that's finished maybe draw a little box around them to draw the spiral I have this Loop that just calculates the angle and then position of each point and draws them over here let's have a look at that and as you can see I like to expose lots of variables in the inspector so that it's easy to just play around and tweak things until I get something I'm happy with now to animate this appearing in overtime I've just multiplied the radius of each point by our time variable and I'm also changing the color over time just to spice it up a bit and finally drawing the Box around it all if I play this right now though we can see everything starts at the same time so it'd be nice to space the animation out a little to help with stuff like that I have a script called immediate animation that we can inherit from and it keeps track of a value called the eclipse start time then the main function in the script is called calculate clip time which takes in a duration and an ease function and simply calculates a value between 0 and 1 representing the progress of the clip just like we did earlier except it also takes the clip start time into consideration by subtracting it from the current time at the moment the clip start time never changes though so all the clips would begin simultaneously anyway but we do take note of the duration of this clip and there's a bunch of functions to handle waiting so if we were to call wait until finished for example that would increment the start time by the duration of the previous clip meaning the next clip wouldn't start playing until that previous one was finished or we could just call the weight function with a custom amount of time to wait so let's go back into the spiral code and we won't calculate the time ourselves anymore but rather use the calculate time function with a duration of one second let's say and some cubic easing then let's set it to delay just a tiny fraction of a second between each point since there's quite a lot of them outside of this Loop let's then also say that we want to wait for the last point to finish animating and then start maybe a two second clip to draw the outline of the box so let's try this out and we can see the points appearing with a tiny delay between each of them and then finally comes the Box what's nice about this way of handling the timing is that say we decide we rather want the box to appear before the points that's as simple as moving its code to be at the top and just saying we want to wait for that to finish before we start animating the points if we now run this again quickly we can see that that works so you can imagine for a more complex animation being able to rearrange things or change the duration of clips and have everything adjust automatically is fairly convenient we can also scrub through the whole animation here which is nice for making little tweaks like maybe we want to see if green works better as the starting color and we could just try that out quickly here the last thing I want to show briefly is how we can add some simple interactivity to all this so I have this function that figures out how long it's been since a particular key was pressed in this case the space key is just starting an animation that spins the spiral around a bit then also inside the loop I've added this handle Point interaction and the implementation just looks like this if the mouse is over a point it gets highlighted and if it's then clicked it gets added to a set of selected points also if the point is already in that selected set we give it a selected color instead so I've played with the settings of it here we have a more spooky spiral to begin with and let's actually run this so that we can interact with it [Music] alright so now we can hover over the points and click to select them and I'll just go ahead and highlight a few of these books here now that we're done we can trigger the next part of the animation by pressing the spacebar and there it goes so hopefully this is shed some light on how I go about making these little animations if it's something you're interested in doing yourself you might want to look outside of unity maybe Mana more motion canvas for example I've heard good things about but if you do want to use unity in particular then again I can't recommend shapes enough for drawing shapes I'll also link to my own wonky tools in the description but they're very rough around the edges melon.mp4 asks do you have any coding projects that didn't see the light of day I do have a lot of Unfinished projects for example there's this little Rubik's Cube experiment where I've been playing around with different techniques for solving the cube automatically there's still a very long way to go but like most of my unfinished projects I still hope to get back to it someday here's another one it's a simple two-player snake game except instead of controlling the snake with the keyboard you write a program to control the snake for you I thought it could be a fun kind of programming competition trying to make the smartest snake that balances collecting food with obstructing the opponent and so on these snakes are not so smart though a little while ago beginning of 2021 apparently I also made a video called creating a game from your comments basically announcing a new series where viewers could comment ideas and each episode would be implementing a handful of those and slowly building up some strange kind of game but YouTube's video confession kept adding weird artifacts to my little intro animation and it annoyed me so much that I just never published it which ended up leaving at least two people very confused sorry about that at some point I also had this idea to do an algorithm alphabet where for each letter of the alphabet I'd briefly explain an interesting algorithm or computer science concept as you can see I got kind of stuck on these last few letters though I never did much work on this they just started making a little a star pathfinding demo for the letter A of course and a little Game of Life demo for the letter c which could stand for either Conway or cellular automaton in this case I thought this might be a fun kind of Whirlwind tour through a bunch of different topics but I don't know if it's really interesting enough to justify all the work that they would entail okay last example uh this one's a bit of a mess because unlike usual I actually started working on the video without even really knowing what the project was I basically had a bunch of very Loosely related ideas that I was trying and mostly failing to pull together into something coherent it starts out with me working on this little mechanical keyboard and then somehow segues into talking about a coding train video I enjoyed which inspired me to play around with this apple II emulator for a while and make a pretty terrible version of snake let's listen into what past me has to say about it it starts out fast-paced and exciting with the snake slithering across the screen in seconds which I think I must not have coded it terribly well because once you grow a little longer the snake starts moving excruciatingly slowly from there I start talking about the Rosalind compiler because I had this very game idea where you'd be typing in code like from a magazine in the 80s I guess and I have no idea why this is going off the screen I could swear this used to work but anyway you could make tweaks to that code and the changes would get compiled inside of the game using Roslin so then you could view the results and tweak the settings and so on but I never quite figured out what I wanted to do with all these different ideas so the Project's been abandoned for a while [Music] kanuki asks have you ever tried other game engines like unreal or Godot I've actually not tried any other game engine since I first learned Unity around 10 years ago but I've been wanting to take a look at Godot for a while so now that you mention it let me just go ahead and finally do it that is a very tiny file I like it already [Music] okay so we have a little 3D scene in front of us I'm not sure where my y-axis keeps disappearing to but that's not important right now I just want to figure out how to make a cube are there any cubes in here no cubes maybe a box that looks more promising perhaps this one alright pretty exciting before I get too carried away though I want to actually follow this guide in the docks to create my first 2D game so step one launch godo way ahead of you step two download some Sprites alright step 3 set the window size to 480 by 720. okay I'm going seriously off the rails here don't tell anyone next I need a node for the player and a child node to hold its graphics I'll drag those in here very cute all right making it smaller and now adding a collision shape what's next okay we're coding already this should be interesting so we have an update and a start function over here and I'm supposed to create a speed variable with this export keyword to make it show up in the inspector oh no my first error message so it's saying it can't display the variable in the inspector without knowing what type it is fair enough you are a number a floaty number way to edit the semicolon come from get out of here [Music] I'm wondering if we can use ternary operators in this language I want to set the animation State like this if you want a ternary operator use truthy value of true condition else false value well that's an unexpectedly helpful error message I'm guessing this language is based on python at least so far it seems extremely similar anyway let's try this out I'm pressing down why am I going up wait negative values are up literally unusable okay I can move around properly now and we have the Sprite flipping and different animations playing based on the movement Direction so pretty fancy all right now to spawn an enemy I'm supposed to instantiate the enemy scene I guess nodes are like game objects in unity and a group of nodes forms a scene which is like a scene in unity if scenes in unity were also prefabs am I on the right track I do wish this spawn point could tell me what properties it has I guess if I specify the type here it might work still nothing it's a bit strange anyway I'll give the enemies a random starting angle and a random speed as well and then let's try out my first godo game [Music] this is actually pretty intense I need to concentrate here and I'm dead how am I supposed to focus with you staring at me like this [Music] alright now that I have at least a basic handle on the engine let's try messing around a little I've heard that support for compute shaders is added recently so maybe we can take a look at that okay following the example in the docs I've written this simple computator that just calculates powers of two the syntax is a bit different than I'm used to since this is glsl not hlsl but nothing major [Music] then here's some code that sets things up for running it and then the code that actually runs it and reads back the results so let's try it out and there's our data okay I've been messing around a bit more are you ready to see something exciting look at this triangle moving counter hunting so this represents a few new things I've learned the first is how to update the contents of a buffer without just creating the whole thing again and so as a test I am updating the time in the Shader and then using that to animate the triangle the second thing is this Atomic Edition which will allow us to append triangles to a buffer without the multiple threads messing everything up which I have had plenty of experience with in the past and then finally of course using the mesh API to actually draw the triangle I did want to avoid reading data back to the CPU but I couldn't find an equivalent of unity's draw procedural for example so if that does exist please let me know anyway I've been porting over my old matching Cube Shader and let's see how that goes okay I'm not sure what I'm looking at here I do miss seeing runtime stuff in the scene view but I at least learned about this little button which makes the game camera match the scene camera and we can now see that something's gone terribly wrong it turned out to just be a silly mistake thankfully so I fixed that and also made a little player to fly through the scene you can only go forwards right now though I still need to add in steering okay I'm not sure about this code but let's just try it out how bad can it be so I'm going to try turning left whoa that was way worse than I was expecting okay I think I fixed it let's try it again why does this always happen to me all right third time's the charm actually this is more like the seventh attempt but it is finally working how I want now [Music] all right I've just been tweaking the Shader so that the math actually moves with the player to make it essentially an infinite Terrain wait where are you going [Music] okay this is getting closer it does actually move with the player now so you don't run out of terrain but it is kind of amorphous at the moment I think I just need to make sure that the sample points remain fixed to a grid so I've been working on the compute Shader fixing up the maths a little and making some tweaks to the noise calculations then I've also spent a few minutes playing around with the visual Shader Editor to add some simple colors to the terrain and also adding some post-processing effects then finally I've tried to optimize the code a tiny bit at least so just as a quick overview we start by initializing all the compute stuff just creating the buffers and so on then over here the compute shade is dispatched to calculate the terrain data a few frames later we get the data back from that and this kicks off a new thread to handle putting that data into a format that Godot can understand I'm sure there's a better way to do all this but anyway after some more frames have passed that data is used to actually construct the mesh and finally the compute Shader will be run again with the player's new position and the process repeats itself okay let's see what we've ended up with [Music] so this took about a day and a half in the end and I'd say I'm happy with how it turned out I would have liked to have made the terrain a bit less blocky but I ran into some annoying stuttering when reading back the data at higher resolutions almost certainly I'm just doing something a bit inefficiently since I obviously don't really know my way around yet but in any case I'm sure it could also be solved by splitting the terrain into multiple chunks so this has been a very long way around to answer your question kanuki but yes I have briefly tried Kudo I like church I was a bit surprised to not have the live scene preview while the game is running which I've always found very helpful but I can see that this way has some advantages as well then I enjoyed having the integrated script editor even if it's maybe missing some quality of life things at the moment and it'd be very nice to see that expanded to also support compute shaders what I most appreciated though was how fast everything is from just opening the engine to not having to wait for code to recompile and so on it felt very smooth and not at all frustrating to work with so that was my shallow dive into the worlds of Godot and I can definitely see myself coming back and doing some more experiments with it in the future I might also try unreal at some point to see what that's all about but right now I literally don't have enough space on my hard drive if any of you have a game engine you most enjoy working with I'd be curious to hear what that is and why anyway let's get to the next question Christian colella asks favorite number well my favorite book growing up was The Hitchhiker's Guide to the Galaxy I haven't read it in many years but 42 remains very much ingrained in my brain Galaxy hiker asks how did you get into programming what was your first engine project Etc I've talked about this a bit before but essentially I was obsessed with RuneScape and I was fascinated whenever I came across bugs in the game and would always take screenshots of those and from there I think I realized that what I really wanted was to make some bugs of my own as for fast coding project it was one of these little apple script programs like this one for doing my dad's taxes which I never finished I actually want to try this one called question and answer virus quickly since that fits our theme today so what is the longest river in the world I think that's the Nile how many letters in the alphabet is it 24 or 26 that's embarrassing what type of engine do most of the larger helicopters use I have no idea anyway if you fail the quiz you get this terrifying message that your software is going to be corrupted but thankfully I had no idea how to actually do that I'm curious to see how I handled potentially having multiple valid answers for some of the questions so attack our way into the source code here quickly okay looking at the helicopter question for example it looks like I'm just matching against a few hard-coded variations of the answer fair enough you also asked about my first game engine but for the life of me I can't remember what it was called it was specifically for making side scroller games it was for the Apple Mac sometime around 2011 I think and I have a vivid memory of fighting a submarine alright I have tried Googling I have tried binging I've read through the entire list that Wikipedia has of game engines I've even tried playing guessing games with language models out of desperation but no luck so far okay a major breakthrough actually I've just come across the games Factory 2 which is not it but seeing that it definitely did have Factory in the title so I've asked for a list of engines with Factory in the name nolak I tried searching for the same but no luck there either then I try to search for game engine Max side scroll to factory and suddenly there it was Tower game Factory I remember now spotting this box in some sort of tech store and begging my dad to buy it for me which despite never having received his promised tax program he did and then I would spend hours designing little levels and tweaking these endless lists of settings which is how you customize the behaviors of different entities here's the home page for the program and we can even see that strange submarine sample game I had remembered I wish I had some record of the projects I made with this they were undoubtedly terrible but I'd still like to see them anyway that was my first game engine experience alright let's end off with a few quick questions what's the name of the dog in your profile picture this is kadu can we see a picture of your dog certainly here's another picture of him as a puppy these days he lives with my parents in the karoo squeeze wants to know any coding challenges in the future sure I think challenges can be a lot of fun in fact you've inspired me to make a racing game in one hour starting right now [Music] [Music] well that hour went by extremely fast all I managed to do was create this little car controller so unfortunately there is neither racing nor game in this racing game I think the problem is that this is actually my first time coding custom car physics though you probably can't even tell anyway if you'd like to see me attempt some challenges feel free to leave suggestions in the comments Xena parrot wants to know did you play Echoes of the eye we know you loved outer Wilds because of the coding Adventure outer Wilds was a really unique experience and actually put off playing Echoes of the eye for quite a while because I thought there was no way it could hold a candle to the original when I finally did give it a chance though it blew me away all over again Oliver V says please introduce us to your pets this is would you like to say a few words about yourself no I am afraid he's sleeping right now and this is Ori can you introduce yourself to the viewers please she clearly has a lot on her mind at the moment well we better end things there then so until next time cheers [Music] thank you foreign