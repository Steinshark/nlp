hey welcome back Isaac you know we've got um we've got the beginnings of a fantastic smash hit triple-a rated computer game here yes we've done some good bit some tossing out what we're doing and we've got a screen now what what do we do next yeah so so far we just caught as you said the screen we got the wall strong and we know how to do that with pie gain and actually I ended up the video explaining how to make the program to wait for something to happen otherwise you know pie gang will just simply quit and just throw and quit and that's not what we want so that's why this while loop is here just waiting for events to happen so what we're going to be doing in this video is to focus on implementing that ball moving around how we do the trick to do that so I want you to get back to my definition in my first video in which i was planing what the ball object will be right so this is the class boom a class this is the way that we have to define in Python or anything any other programming language how the object will behave right so what I'm going to do my code is split into three main parts for now so the very most here the scenario down here and what I want to do in the middle is to define my classes right so I'm going to define a class for the boat and we're going to call it bold nothing fancy right and initially you can just say this class is going to be doing nothing and then later on we will have to implement the paddle as well that initially it does nothing right so what do we need in the bowl so if we look again back on the paper we know that for the ball we want to store coordinate X and y we need that road so that's going to be lets say intrinsic variables of that particular class so for that to happen on Python which is slightly different from other programming languages you need to define a constructor here in it and then you do need to provide the input for X and one so whenever we create a new ball we need to tell it where to put those coordinates right so Bay you need to create the ball and then give it values just like this so the position of X is going to be the X that is being given and the position of Y is going to be the Y that is actually given by the user so now that I have defined this I could simply create a bow object and to create a bow basically I could do it down here before we through the scenario so create objects so we're going to create an object right that is called bow the one we're gonna be using to play which is gonna be of this type of object which is bow and the two arguments as you can see already when I put this is telling me that the arguments are x and y so where do we want to locate the bow in the very first place so for that what you need to do is to get back to your drawing and think okay I want the ball to be in this particular position on the screen so initially initially you just want to put the ball close to the side of the screen right so it's gonna be the x position is will be with minus the radius of that bone right because we're gonna be drawing up from that point in there so that could be the width minus the ball radius huh but we haven't defined that yet actually we do need to define it here in our world class so you need to define here and then we can give it a value for example 10 that will remain the same for every ball object that we create we're gonna create just one in this particular game by the way but that's how it works so you could do this and then you say Bulldog radius so that's the x coordinate and the y we just want to sit the ball in the middle of the screen so we have that variable height and then I wanna just in the very middle so we divide that by 2 and I'm using two of them just to get the integer out of these two actually right so as you can see shown is really really important that we define those global variables that will be very important in our game because if we define it manually then we're gonna carry all those numbers all the time it's gonna be very tricky to get it right and then one small modification will be a mess in the whole code so that's why we reuse that so here we can create that now if I run that nothing is gonna happen at all we're gonna create again the window here I didn't throw anything at all right so that's the first thing I need to do I want to show the ball so to show the ball you in Python you always have to include the object self to do stuff in there and then you need to draw a circle there is a truck just outside that already just moving all around you know this is a nice state and they're working outside and we cannot control that here the second function that we wanted to include in our ball was something to make it appear on the screen right so we actually need to draw the circle so pygame will provide actually a function for that that is also within the class draw instead of a rectangle we need to basically draw circle once again if you look at the documentation you will see that you need to provide where in the surface which surface we're using because actually you could create multiple windows if you if you want to and so you need to use the screen now this is a bit funny because this screen is a global variable it's something that we're using here down here so you need to tell python look I'm gonna be using that global screen that's a bit of a tricky thing to do with python by the way and the next thing that you need to to say is the color once again that as you may remember that was PI game dot color and then you need to say white right if you want it to to draw it white actually it could be nice to have this a bit in a different variable actually and be able to draw the ball in different colors so what you could do is to basically use an argument is a parameter here color that whenever you want to show the ball you indicate that color and then you use the object from PI game and right after that you need to say the coordinates x and y of the ball which is basically the position of that particular ball so that's why we use self the ex self dot why to indicate where the position of that particular ball is and then right after that you need to indicate the radius and with that pygame should be able to draw that circle on there right so this is what we do so we have defined the class we can create one and now we need to actually show it where do you want to show it we could just simply show it right after this so whenever you do you've done the wall so you could do both play dog show and that will work hopefully let's see that actually so when I run the program I actually did something wrong why look it's complaining down here saying missing one positional positional argument decoder because I forgot to mention that I want this to be the foreground polar which is this pi game color wine yeah so I forgot to do that so that's why it's complaining and it doesn't do anything then so if I run it now that should be here there we go beautiful home it's very small one actually I think I maybe want something bigger than that so let's modify that let's put 20 maybe right so we can throw the ball but okay that took us again quite a bit of time so how do we actually make it move well presumably you have to draw it somewhere else right exactly but we want the ball to move automatically that's actually kind of a weird thing to think of it's not like we want to be telling the ball to draw we won't just able to move all along through x and y-coordinates so that's why I I was saying before in the previous videos that well this is my first definition of the ball class language I just said x and y but actually the ball will be alive so actually that ball will be moving through x and y so actually we should include here the speed and the velocity on the x axis and the one on the y axis so that will be how much we increment the position and move the position of x and y every single step right every single step of the game so we're gonna have to add this to to our class definition so we are gonna have to include VX and V Y and I'm gonna completely to yourself DX and going a bit quick in here but that's how it works so whenever I create the ball now I put before only two parameters but now we have two more which is the speed that we want this to go let's say on the horizontal axis and the vertical one so initially for example I'm gonna say that I just want the ball to move horizontally not vertically so the one on the y axis is gonna be zero and for this one I can say for example let's say minus one I just want one pixel to move every single time but I want this to go from the right to the left of the screen and expose a positive number right so we want this to go one by one actually I don't like this as you know I don't like to type and hard code anything I'm gonna create a variable which is called velocity I'm gonna define that in my global variables here so velocity will be equal to one and we're gonna have minus one to begin with right so this would we have but now we still need to make it move so to make it move I'm gonna create a different function that will be updating the position of the ball and that's gonna be happening automatically what I want to do is to show the ball in the next position right so you just want to update the position of x and y based on the velocity so basically what I'm saying is the position X will be the position X plus that velocity right so we're going to increment that you can implement this nicer if you want to but for now let's do nice and dirty code and there you go say self dot one plus the speed the velocity on here whenever we have increased we have modified the coordinates what we can do is to use the function that we implemented before to draw it again self dot show we need to put the color here so that means that this function will also me a parameter cooler as well all right so that's how it works and is that is that it we will see I'm gonna I'm gonna just go ahead with it you know that's not how I like doing programming shown is you do something you try you see that it's failed and then you refine and refactor your code right so that's a good practice actually just to play a bit with it so we're gonna update and what I want to do is to update that automatically so we're in the code we should be doing that we should be doing that within this while loop so the while loop is just waiting for things to happen right so unless the user click the cross well we can actually just simply call both dog update based on that foreground color and that should actually draw the ball in the next position something I don't want to forget right now is that whenever I draw something on the screen is not ball it's both play so we update the surface but we need to flip it right you remember that I told you you need to flip every chain that we do in the surface so this line up here shouldn't be here it should be within the while loop because we want to draw it in a different position and update the surface and draw it in a different position and update the surface so basically I'm gonna cut from here and put it right after this right so well I mean I think actually you should do it the other way around so we do it this way okay if I do this what do you think it's gonna happen soon I'm worried that you said when things go wrong so I feel like something's not gonna be quite right but I'd like to see I don't know something is gonna go wrong very wrong this weird updated but you will see this one is pretty funny oh dear hey it's going I mean it works but why did we get that line well because we're just drawing the ball over and over and over again right yes but we didn't somehow eliminate the previous ball right so the trick the trick to make a bow to make an object move on the screen PI game is to draw it again so in the current position you put it black you put it with the background color and then you paint it in the next pixal right in the next step what we're going to be doing is to use this foreground and you should use also a background color that is gonna be pygame color black so we're gonna use that as global variable and what you should do in this update I made it before with this parameter but maybe it's not even needed what you want to do is to use those two variables background color and foreground color as global values from the our program and the first thing that you do is to hide the ball you actually hinted it before shown so first thing you do is to put it in the background color before you update anything at all and then you update and then you use a foreground color in the new position so that should now work I hope let's see if that works Oh something is wrong yes because update doesn't have a color so that's a mistake that I forgot - I have Chiang Abed the definition of my function update and I forgot that I don't have to indicate the color because I'm using global variables for this alright so that should work now oh there you go Shh oh man can you see that we seem to draw a hole in the wall what why do you think we got the hole well we didn't tell it there was a wall there we just can't told it to keep moving to the left and drawing black and white like am i right actually the ball is now being drawn somewhere outside of my screen it's getting negative numbers and trying to draw it outside then it cannot right so the next step would be to manage the collision of that ball with the wall right and so how do we do that so basically this is actually not too difficult we basically need to think of what are the coordinates of the wall and tell the ball hey whenever you're gonna collide do not draw it do not collide just invert your direction change your direction so if the velocity was negative now we want a positive we want to change and go to the other axis so just to manage the collision I'm gonna leave that as an exercise for if you want to continue doing the game basically what you need to do is to modify this update function and before you actually update the position x and y you need to check and for example restore that new position on a different variable and check am i already touching the border and that means the wall here but also the top and the bottom walls you need to check those two and change the velocity so now have precooked days for you how to update the position of the ball to manage the collision with the walls right so this what I'm doing here and down here and now if we run the code and actually I'm gonna do something funny I'm gonna change the velocity also for the wine axis so you see the ball doing something nice so if I run this you will see that this goes and touch and return and then the ball will go away and we'll never get back right so this is what we managed to do in a series of three videos I think so far and and basically show you already all all you need to complete the game on your own now you need to define the class for the pub and then you need to for the problem as I said is the Y access what we want to control I'm gonna show you that in one minute but then the rest of the game is for you to decide if you if you want if you want to see more just let us know and we will make more videos detailing how to do that part so I'm gonna copy pace a bit again precook code just to show you that the game is actually doable but no more than that I'm guessing the paddle is is gonna be you know a thing that you move but also the ball you just need to then check whether the paddle is there or not you know and it acts a bit like a wall if the puddles there right yes exactly yes so do manage then you need to manage collation but then you can manage that within the ball so the ball will not be updated the position and then you need to control what the paddle is so but the panel class that's the one that we are dealing with at the moment so that public class is the saying ideas before but now we're drawing a rectangle and we only use the position why because we're going to remain the X in the space that we want we are going to be using a function from PI game that takes word fishing of my mouth yes so the idea is for you to try to complete that on your own but if you want to see a more detailed video on this I'm happy to do that but otherwise I'm gonna show you the final gain this what I have in here and I'm gonna run it and now you can see the boat moving all around it goes a bit actually a bit fast right and that's because typically you do need to do something you need to control the speed of the program depending on your operating system this while loop that we have down here we have to control it and to do so you should be looking at the documentation and looking at something called clock that will make this while loop to behave in the way that we actually want right so this while loop in here has now aligned clock that tells me they update the frame rate in which the ball will be throwing from pixel to pixel right otherwise it will go too fast or too slow I think on Windows actually goes amazingly fast on Linux code okay on on Mac goes like very slow like a turtle super slow alright so this is the final game but it's not still final so if you want to know more we want to do data science now on the game to improve it and knowing that we are going to be able to predict the position of the paddle for new positions down here so if we get the position of the ball and the speed I want to know where I normally put the paddle to go