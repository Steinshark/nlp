we're going to do a maybe a few episodes i'm not sure exactly how it'll come as but on um the design of social software or collaborative software we're going to kind of do a bit of a mix so there we go with a less spinny chair let's see if i stay still so we're going to start with the kind of 20 plus years of research that have underwritten uh the design of that type of system but then connect that to things that we see a lot more of now which is communication social platforms like those or snapchat things like that so one of the theories we talked about in the filter bubbles video that was a a while ago is common ground and that's the idea that you know what other people know about you or what you both know in fact there's a good definition so common ground refers to the knowledge that people share and they know the other shares that's the important bit so what i know that you know that we both know is a kind of complicated uh but important aspect of how we collaborate um and that helps us to determine a bit like who our friends are on social networks but it equally makes collaboration easier if we're going to use software the other aspects of why we collaborate is people's readiness to do it or willingness to do it if you're being forced to do it that's not really a great way but if you are being forced then you need other things to be easier to make it worth it and then the other aspect is technology technology readiness and that's why we've made a lot of progress in this 20 plus years when we're looking at software for collaboration is making it better and easier for people to collaborate the most important thing you need i'm going to start referring to some paper now is to think about who is using it when and why so if we have a nice initial grid and we have time over here and place here and then if this is the same and this is different and then this is the same and this is different we have then four possible quadrants of how people are collaborating so if they're in the same time in the same place like in a meeting room or two people in the same room coding this would be the same time same place it might be that you're in the same time but different places and so this is when people are working together at the same time but from two different parts of the country or two different countries but you know not physically together that might be a skype call or something like that yeah yeah that's a good example and then you've got same place for different time and this is people maybe working shifts or maybe you've been working on a project and then someone else is taking over next week while you're away so that's the same place uh technology that's there but working at different times and then you've got a different time different place which is working in different time zones on the same system so you're not working together if that makes sense but you are trying to collaborate you could also have a dimension in there which is the number of people who are collaborating but that's going to start getting messy and we'll start doing that later but this is a nice initial framing i think and it's one that comes up a lot in research and just in the design of software so the real question though is what do you lose when you're moving away from the same time same place so if you and i are in the same time same place working together i could see that you're nodding because i've not said something stupid you're approving of what i'm saying and that's a little subtle communication non-verbal body language that you're saying to me and you don't see that if you're in different places or different times and there's lots of aspects like this which are important for people working together um that you just miss out on so there's body language there's non-verbal communication so kind of grunting to say that you approve yeah [Music] this type of thing is also missed out unless you've got a live audio stream but then if you do have a live audio stream then maybe you don't know who when because there might be four or five people um you just miss the connection between uh i guess anything you have is exactly what people type in or exactly what people say and so you need to build that into your software somehow this is our key challenge and to do that we're going to talk about something different and now we're going to get lego involved and more importantly it's quite popular lego at the moment strawberry laces oh okay this is going to help us too because strawberry laces are both useful and delicious so let's get a board we need a board and then we also need some people to help us so i'm going to have yoda yoda's going to help us help you he will yeah he's going to sit right there hopefully and stay there and then there's something that yoda wants to work on so this is his document in the middle or it could be some code some collaborative or some coders are working on and then in between that and this is an important separation is we have a user interface and this is something that's often missed when people think about it they just presume it's a person in the computer but actually there's a person the user interface and then the artifact that they're working on and so i'm actually going to take the top of the user interface off just for ease and stick that back on there we go so when we're working on software one of the key design principles for user interfaces that you get good feedback on what's happening and this might be that if you're working on a word document when you press save it then says it was saved if it doesn't say it was saved you think did it save and you're worried about has it saved so you don't if you don't have the feedback then you use it and so what's what is this this is someone interacting with a document pressing save and then what they want is to get the feedback to know that it's happened so i'm going to pull that off there because that's tasty and i can eat that later so this bit of strawberry lace there is recognizing that the person interacts with the artifact through the user interface has gone through the hole there if we can see it hopefully and then he's got some feedback back to him to say that whatever he did happened it could also be like if you press bold on some text you want to see it actually go bold not just trust that someone else will one day see it go bold and this idea of feedback is a key principle for user interface design which is fine but now we are going to talk about collaborative software so it's not just yoda interacting with that document through a user interface there's multiple people trying to do it so if we can imagine that anakin also wants to get involved these pieces were chosen by my son by the way to help this communication we're also going to bring in evil yaja he's a sith lord in this one and for the fun of it we're going to have does he stick down maybe we'll see bath time batman he might help too now they all want to work on this document together and they all want feedback fair enough they've all got a user interface to work through this is where i break everything so there we go we have four people four use interfaces one document that they're all trying to work on and i think maybe we should get rid of bathtub batman he's just gonna fall over sorry bath time batman we had to go so let's work it with three people yoda anakin and evil jar jar all trying to work through their user interfaces with the artifact they all want some feedback but to save time i'm not going to put multiple laces in for them but the thing we need to know as well as feedback on our actions is to know what other people are doing and we call this feed through instead of feedback so the artifacts going to feed through what the other people are doing so say anakin is making a change on the system well let's add his own feedback why not he's got some feedback to say he's made some changes on the system that's fine he knows what he's doing so how does yoda know what he's doing we also need a connection which is anakin interacting with it and then telling yoda what happened so now yoda knows that anakin maybe edited a paragraph or is editing a paragraph at the moment and seymour jaja jar jar wants to add in a picture to this document and yoda wants to know that it happened so now you can see that yoda's got quite a few bits of information that's coming through he's got his own feedback and he's got information fed through about what other people are doing and this is a the key issue that we're asking ourselves for collaborative software is what information do we need to feed through that is replacing our knowledge what people are doing because they're not in the same room as us or not working at the same time as us but presumably each of those guys would also have that same amount that yoda's got right yeah yeah so jar jar it's not just yoda that wants to know what jar jar did anakin wants to know what jar jar did actually anakin oh jar jar wants to know what he did himself so he's got to have his own back and also jojo wants to know what anakin did so now they all have feedback on what they're doing themselves and and as many bits of feed through from what other people are doing uh and so you see if you've got like 12 people collaborating which i'm not got that many lego pieces with me today we then have quite a lot of feed through coming through and feedback you're going to get to a point where you reach a limit in terms of what your user interface can tell you because if your user interface has got to show you the document you're working on give you feedback on what you're doing and reserve space for what other people are doing and data about that then you've suddenly got a lot of design that's being focused on what other people are doing alongside what you're doing and alongside the document you're working on so say then you if you want to we could say maybe you want to have some direct video chat on there as well then you've got another bit of string not going by the artifact just directly connecting all of them which that's going to start getting really messy if i do that but your user interface has got to handle a lot and so you've gone from kind of standard user interface concerns of usability or feedback to kind of conveying what everybody's doing from different times and different places so if it's a different place it might just be live action of what they're doing and if it's a different time it might be somehow a historical record of what they did or maybe kind of a replay of what they did so let's talk about google docs as an example so one feature you see in google docs is a kind of colored icon moving around where their cursor is on the document and if it's near yours and if they select a whole paragraph you then see that whole paragraph come up in their color so this is an example of feed through coming through the artifact document being highlighted by the user interface to show you what they were doing and what they were highlighting but what does that not tell you that doesn't tell you where their current screen is tells you where the current cursor is or what text they're currently highlighted you could imagine google docs could also highlight for you like a rectangle on the document showing you where their viewport is currently on the system and that presumes that their viewport is active so you could also have it kind of they've got a window in the background and that shows you that that person's not interacting with you so they're off playing solitaire or yeah yeah sometimes you think wow they're thinking really hard about that paragraph for a long time and you realize they're not there just at lunch so then this third dimension we're talking about has been termed telepresence and that's because it's been related to a lot of things like virtual reality as well but it's the extent to which your physical presence has been uh recreated somewhere else so uh if we had say we take skype we talked about skype earlier that's giving you kind of full picture maybe high definition of someone we can see kind of maybe the kind of portrait photo type shape so you've got head and shoulders that tells you maybe some of the facial language but maybe not entire body language so it's been quite well represented to someone else google docs takes a kind of low at low rate level and it just sort of has metadata in there so it's you've got some signs of their actions represented by where their cursor is but not a kind of full view of them so they has a low a low telepresence of that person um and so you're asking yourself with that theory how much telepresence or how much recreation of the person do we need is it going to be important to know that someone's thinking in google docs versus how they're working uh yeah so is it going to be worth putting in the whole video section to use a whole portion of the screen to say that you want full res video we see that a lot in uh films that has been sort of made up in 3d graphics and actually in star wars you see them having these kind of hologram conversations with people as if they were in the room there's obviously a potential bandwidth issue here right i mean you can only fit so much strawberry life through those bits of lager sure yeah so actually one thing i mentioned earlier was number of people involved in it and so uh if you're imagining working on a document with a set number of people it's fine to try and convey what each person is doing but when you're talking about a crowd which is what we tend to be talking with facebook or twitter or snapchat or anything like that we tend to be getting kind of summative uh different time different place numbers about what we've got so number of retweets which could have been at any time but when you log back in you can see oh i've had an extra 50 retweets or something on that and this is giving us a kind of yeah a more scalable uh different time different place feed through of what people have been doing so we've um talked about some theories now which we're going to refer back to in the next couple of videos um and what we're going to do over the next couple of videos is look at the specific example of how a feature of twitter has been designed and how people use it the difference between what it's designed for and how it's used and then we're going to come back at the end and talk about a range of other software and some social phenomenon that exists because of how the software is designed and how you can change the software to maybe influence how that social phenomenon happens so sometimes if floppies would die so you often would make backup copies um let's try this one sounds more hopeful busted taking a break [Music]