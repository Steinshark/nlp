hello welcome back today we are cleaning up some code if you want to be a great software engineer you can't be writing bad code and i know that this topic of writing clean code or good code is not the sexiest topic in the world it might seem a bit boring but writing good clean code rather than filthy disgusting code it's just something that you'll have to learn at some point if you want to be a great software engineer so you might as well do that now if i'm completely honest i'm not always the best at writing the cleanest score in the world and this is a total excuse but it's because i haven't really been forced to learn to write really good code yet because my full-time job hasn't started yet so mostly i'm just writing code for myself but i am determined to change my ways because my full-time job as a software engineer is starting in about two weeks so here are five tips that if you implement all of these in all your code it's going to help you write literally 80 better code which is going to put you above like 95 of all the beginners who never bothered to learn any of this but with that before you start i'd appreciate if you go clean up the like button down below in the description and while you're down there you might as well also give the subscribe button a bit of a wipe if that's what you're into with that let's start cleansing some code i've got my lemon water as well as my coffee over here because it's currently 6 40 a.m in the morning when i'm filming this so these two should give me enough power to actually get through this really bad filthy code okay we first need to understand what does good code even mean to me code is clean if you can be understood easily not just by you but by everyone just imagine someone who's never seen your code before who has no idea what you're trying to do will they easily be able to understand what you're trying to do with your code without having to think about it for like 10 hours because the biggest challenge with coding is not actually even making it so that the computer can understand it but the challenge is making your code so that humans can understand it because in larger organization and when you're building anything significant you're gonna be working with teams it makes it so much harder to fix bugs to work together and the right good software and not only that even if you write something just for yourself when you go back to it later you might not even understand what you were trying to do before if you can't remember and this is something that's definitely never happened to me with my own programs i definitely never go back to my own code and have no idea what i was trying to do before first example here we have this function that is trying to insert a sound effect piece of data into a list and we've got this if statement to check whether it's a valid piece of data essentially okay if you just look at this for like two seconds can you tell what we're actually trying to check for here i mean yeah if you look at this for like two minutes you can definitely tell this is bad code because it's really hard to read this really long conditional if statement what we want to do instead do it sort of one by one and wrap all of these into variables and if i just paste the good code example here so essentially we're wrapping all of this checking into this one function that we only need to do once after that you don't even really need to know what is going on under the hood because the actual checking is just if is valid sound effect then append it this function is going to return true if it is valid data and it is going to return false if it is not valid data this is so much easier to read than this all they need to understand from reading this okay we're checking for as if this valid data and if it is we append it cool makes sense and then all of this checking has essentially been wrapped in this function over here where if someone wants to going to look at the details they can first we check if the data volume is none if it is we return false and then one by one we do all this check so it's correct type okay so now because we've named this variable descriptively it's easy to see that okay here we're checking if the type of the file is correct the next check is correct bitrate okay just without even thinking about it we know that okay here we're checking in this correct bit rate cool that makes sense and again same for this one and then at the end we reduce one more variable where is valid data equals if all of these three conditions are met it's very easy for someone to read this piece of code and understand what we are trying to check whereas here we haven't named anything and it's all just a one big longing condition this is really confusing does it so this is bad filthy code do not write this code this is good code and so in summary tip number one is to wrap long conditionals into variables and then name those variables appropriately i wouldn't know this because i've definitely not written these really long if conditions but if i had done that then i would know that it does actually make the code a lot more confusing and in the moment they can feel a bit useless to do that but long term it makes it so much clearer and so much easier to read and your team will appreciate it again i wouldn't know that because i've never i've never made this mistake okay okay on to step number two look at this code for like 10 seconds and tell me if you can tell what is going on what are we trying to do here okay this is a very simple example so you can probably just within like maybe 30 seconds you can figure out like okay we're trying to sum all these numbers but this is still very unclear like what are these numbers over here what have we even trying to sum here what is i why is it called i that doesn't even make sense and then okay we printed the s but why why are we even doing this let me just so if we just paste this good code over here now just from reading this version of the chord it's just the exact same thing but you can immediately tell what we're trying to do here because this array is called transactions now you know like okay it's actually an array of transactions not just some random numbers right and because we initialize the sum just from these two lines you can probably already tell that okay we're probably going to be summing these transactions at some point and then this is especially a good feature about python which because what you can do with your for loops you can literally just name them like this not some random eye but for transaction in transactions immediately from reading this you can tell what we're doing and what we're going to do even better here is we can wrap this into a function because this function is named very appropriately and very descriptively you can immediately tell just from three lines we are summing a list of transactions together so i hope you got the gist here but tip number two is to have no ambiguity whatsoever when you're naming your miracle name them absolutely clearly as pedantically descriptively as you possibly can to make your code read as much like english as you can possibly make it now so far all of these are very simple steps that you can take to improve your code but what's even more important than applying all these tactics and strategies to improve your code is just putting in the hours to get better every single day and in order to put in the hours every single day you need to enjoy the process and one of the best ways to enjoy the process is to have a community to share your coding journey with and that is why i want to briefly talk about a platform called showcase showcase is like a social network but built specifically for developers usually as developers we will need at least five platforms just to showcase who we are as a developer your linkedin github blog portfolio site on showcase you can create the developer portfolio instantly and share your tech stack top repositories work experience credentials and more showcase also automatically generates a personal website for everyone where you can attach your own custom domain you can also build a true network by adding people to your circle which are people that you've actually worked with and can vouch for your work and then best of all at least for me personally is their job section where you can set preferences for the kind of jobs that you want to find based on things like the languages you know location etc and it will list the jobs and show like the percentage of how much it is a match for your preferences oh and they also have this auto resume builder which literally automatically builds your resume based on your profile which just saves so much time it's a really cool platform a lot of you have been following me there already so thanks for showcase for sponsoring this video and do come join me on the platform by clicking the link down below in the description okay on to tip number three now this is also on the topic of naming things if you look at this code over here what is wrong here gen y-y-m-m you see see what's wrong here this name is not pronounceable you might think that this is fine if you're again just writing code for yourself and like well the computer doesn't care what it's called so why should we care about pronouncing like imagine having a piece of code like this in your team at your software engineer job and having to communicate to your manager for example that [Music] and it's really confusing if this date time represents when the user was created use something like user underscore created underscore on underscore date or even date time this is pronounceable when you see it it's number one clear as we talked about in the previous tip number two when you're communicating this to someone else you can actually pronounce it and then when you need to write this variable somewhere else you can actually probably remember how it was written because it's well it reads like english right on to example number four looking at this chord over here we've got a function called fetch and display underscore users and it does two things here first the initializers this uses list as a result of some api call and then it prints each individual user it might seem fine but it's actually not because it breaks one of the most fundamental principles of writing functions which is that functions should do only one thing you shouldn't have functions doing multiple things what you should do instead is have two separate functions where first you have a fetch users function that fetches the users from the api and then returns them and then you have a separate function that displays the users this is so much more clear this is so much more easy to read because you're not having functions doing like a million different things and this can be very difficult to sort of wrap your head around like at least it was for me to figure out okay what exactly is one thing and the best way to think about this probably is that a function just one thing is that whenever you write a function you should try to sort of extract other functions out of it like for example here you can see that you could easily wrap this fetching the users into one function and then a more descriptive name for your function would be do not just display users but fetch and display users but then you realize that wait a minute because it's an and it's doing two things therefore fetching of the users should be a separate function and therefore with this function you'd be breaking the functions you don't want to do one thing principle function shouldn't be giving you any surprises essentially like doing things it's not supposed to do so then it's sort of annoying if it then turns out that this display uses function is also for example modifying this user's list in some way do you want to avoid these type of surprises by not having side effects with your functions okay last example over here this one right here is extremely filthy like you'll probably have to take a shower after watching this because this is such filthy code so here we've gotten some transactions in pounds and then what we would like to do is use this currency converter library to convert these transactions in to us dollars this is filthy this is dangerously goo easy code that we want never to be writing what we're breaking here one of the most fundamental principles of writing chord which is do not repeat yourself as you can see we're repeating ourselves like literally a million times like literally when i was writing this piece of example here the way i was doing this is literally i was right run transaction and then just copy here and then just change the five here to a six and then change the number like whenever you're copying your own code you know you're repeating yourself always avoid writing the same piece of code or copying the same piece of code twice because there's probably a way to do it much more easily because this is so filthy i've actually done the clean example in a whole different file do not like contaminated this piece of code here does the exact same thing but in literally around half the lines so we've got transactions again we're not naming each transaction individually as a variable because that's just a waste of time why would we do that is that we just find a list with all of the transactions in pounds then we define the converter and then what we also done is wrap this into a function so that again if someone doesn't want to go and look at the details you can see immediately okay so it's a function that converts from pounds to usd because again we've named this appropriately and we can see that we are simply using a for loop to use in two lines loop over all of these transactions that's literally what loops are created for so that you don't have to repeat yourself so you use the tools that you have in your coding languages so much easier to write so much more elegant so much easier to read now just speaking that this is different from copying code from the internet like you'll obviously sometimes and when i say sometimes i mean all the time be copying code from the internet from the documentation from when you're searching how to do it to me now that is fine as long as you make sure you actually understand the stuff that you're copying but what it means specifically here you shouldn't be having to copy your own code or write the same line of code another time and that is one of the fundamental principles of coding do not repeat yourself ever there are still a lot of programmers out there in the world writing filthy bad code so let us now all take it upon ourselves to spread the good word of clean code into the world i'll be trying to i'll be trying to do that as well i promise repeat after me i do solemnly swear that i will never write bad filthy code again and i will also subscribe to the internet makeover youtube channel and hit the like button down below in the description but in all seriousness my name is internet recorder on this channel i talk about my journey of teaching myself to code and becoming a self-taught softener essentially teaching to you everything that i had learned during my own journey of learning to code and if you want to get more personal stuff from me i highly recommend you also follow me on instagram i've recently moved here to london where my job is going to be so if you want to see what life is like in london and sort of more personal stuff for me definitely follow me on instagram and i've also started a second channel where i'll be posting content about sort of success principles how i grew this youtube channel how to make money online definitely go have a look there as well without i'll see you next time [Music]