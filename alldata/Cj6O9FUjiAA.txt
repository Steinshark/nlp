in this video I'm going to be showing you one of the most stupid mistakes you can make in Python and it's a fair mistake to make even though your code editor is probably going to warn you about this but not all of us use code editors with intelligent feedback such as pycharm so let's go over this mistake and understand why it is a mistake so first of all we're going to create a function called add item because pretend you have a list that you want to add an item to and inside this we're going to specify the item we want to add which is just going to be a string in this example and we're going to specify the list that we want to add this item to so it's going to be of type list and we're going to give it a default value of an empty list now pycharm immediately is going to warn us that we should not use a mutable default argument and I'm going to show you why we shouldn't do this because again your code editor might not show you why this is the case why we should not use it and also if you don't know what the consequences are then you're just going to blindly code so it's good to know why you shouldn't do this so inside here we're going to type in items dot append and here we're going to append the item so we're appending the item to this empty list each time we create this function now here we're going to print a formatted string that says ID and I want to get the ID of the list so ID of items and we're going to also insert the items so we can get the ID of the list followed by the items itself and this list should return the item it should return the updated list so if we add one item it's going to return the list with that item so the first thing we're going to do is create two lists using this function so we will have list a which will equal add item and we're going to add the letter A then we will duplicate this change this to list B and add the letter Z so these are two letters completely distant next we're going to print the list a and we're going to print list B and what you're going to notice is that list a and list B are the exact same list even if we specified it here that each time we use this function we want to create a new list it only evaluated this once so it created it once and it used it throughout the rest of the program and this is one of the major side effects effects of adding a mutable variable inside your parentheses it's only going to evaluate that once which means that even if we create a new list and add an item to it it's just going to use the other one that was already created so list a and list B are effectively the same list and this means also that if we want to add new items to these lists so if we type in for example add item of B to list a and then we want to add item of Y to list B you'll see it's still going to update the same list because it's still referencing the same variable with the same ID which means that both of these lists are actually just wasting our time because they're pointing to the same list so that's why it's bad practice and just not reliable to create an empty list in the parentheses and to fix this it actually takes nearly no effort we just need to make sure that we give this a default value of none we want to show that we want to tell the program that if we create a new list such as this one without providing a list just set it to none and of course if we run this right now we're going to get an error because none cannot add items so we're using the wrong data type there but the reason we put Nunda is because that will help us with adding an extra check and here we're going to create a God so we can type in if not items so if items is empty or none we can say that the items of type list is going to equal an empty list so now by default this will be set to none which means when we create a new list such as this one over here without specifying a list it's going to evaluate To None making it that making making sure that we will create a new list for each time we use the function for the first time and if we run this now you'll see that it is behaving properly list a is containing the letter a list B is containing the letter z and they both have different IDs because each time that we created the list this was none which means we were able to create a new empty list and then if we wanted to append something to these lists it did it properly so list a has a and b and list B has z and y then of course we can print both of these lists respectively because they are now two different entities so that's the major reason why you should not use mutable default values and this also goes for sets and for dictionaries anything that's mutable in general you want to check that if it's not provided you will create it otherwise append to the one that the user provides so that was one of the most stupid mistakes you can make in Python because the worst part about this mistake is that your code will still run if you don't have all of these checks as you can see it's going to run just fine it's just going to have these weird side effects and it makes it really hard to debug especially when you're tired or working in bigger projects and you have bigger data sets to work with you might not notice what's going wrong immediately the only hint you get in pycharm in possibly Visual Studio code is that you should not use this default argument so it's good to know about this before you continue working in Python because you will run into this error someday if you did not already know about it but anyways guys do let me know what you think about this stupid mistake do let me know if you have other stupid mistakes that you've made in the past or if there are others that I should cover to help developers prevent making these mistakes but with all that being said as always thanks for watching and I'll see you in the next video