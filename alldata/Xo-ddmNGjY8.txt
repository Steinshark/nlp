this is apparently the react compiler uh we now officially have a compiler that takes a library and turns it into other JavaScript which is then transpiled so we have a compiler to transpiled I don't even know what these words mean anymore okay they used to they used to mean something now I don't even know what they mean but we're going to read about this because this is actually very interesting because this is something that I think react should have done a while ago cuz I think the compiler is actually it's much more interesting okay we lost all meaning absolutely this page will give you the introduction to the new exper mental react compiler and how to try it out successfully by the way we'll also look at Jack Harrington because apparently he has an amazing uh breakdown of all of this so pretty cool pretty exciting stuff uh you will learn getting started with the compiler installing we don't we don't I just want to see like what it does I know down here there's some there's some there's some code examples so we're going to look at it react compiler is a new experimental compiler we've open source to get uh early feedback from the community it is a build time only tool that automatically optimizes your react app it works with plain JavaScript and under understands the rules of react so I wonder if it works with plain JavaScript I wonder if that means you can't have it in typescript you have to first trans pilot then compile it then bundle it curious I'm C just curious and let's see and understands the rules of react so you don't need to rewrite any of your code to use it the compiler also includes a eslint plugin by the way eslint uh the devil's the devil's lint um I've never been a big fan of es lint just just throwing that out there personal opinion that surfaces the analysis from the comp compiler right in your editor the plug-in runs independently of the compiler and can be used if you aren't using the compiler in your app we recommend all react developers to use the eslint to help improve the quality of your code base okay the compiler understands your code at a deep level through its understanding of plain JavaScript semantics and the rules of react this allows it to add what are the rules of react rule one juice hooks components and hooks must be peer there's there's okay so these are the rules of react they're all in here okay cool anyways you may be familiar with manual memoization through use memo use callback and react. memo the compiler will automatically do this for you if your code follows the react the rules of react if it detects breakage of the rules it will automatically skip over those components or Hooks and continue safely compiling other code if your code base is already very well memorized you might not expect to see major performance improvements with the compiler however in practice memorizing the correct dependencies that cause performance issues is tricky to get right by hand yeah I am curious how it knows what to memo um because you know like like all tradeoffs memoing uh requires you to use a map requires you to or some sort of data structure right it may be an array it may be something right there's some thing depending on how deep or how much you're memorizing right because you can have something that's just memorizing a the last result of a function or you could actually have something that memorizes tons of different results from a function and so I'm not exactly sure the level of memorization that happens in react whether it's the last value or many values or if that's hand tunable so I am curious what the uh because I know that the performance Improvement or the performance win of used memo is not necessarily straightforward meaning that you can't you can't just memorize everything and thus you win because it now makes it faster yes I've seen this I've seen this all the time we've seen this you know last time I worked on a major react app we had the exact same problem you cannot memorize everything right I had to lag more exactly this is like a real thing this actually happens and as far as I can understand it pretty much tries to memorize everything it can oh interesting for this reason to adopt the compiler successfully on existing projects we can recommend running it on a small directory of let's see in your product code first you can do by configuring the compiler to only run on specific directories okay awesome um neat neat I like it I like I love being able to just write JavaScript for more compiling uh that way you definitely don't introduce complex build step processes at all uh in rare cases you also configure the compiler okay oh yeah here we go this is what I want to see okay this is the stuff I want to see here in rare cases you also configure the compiler to run opt-in mode using the compilation mode annotation option this makes it Al uh it so the compiler will only compile components and hooks annotated with use memo directive I hate directives I think that's crazy just throwing it out there that's crazy for those that don't know I believe it's as explorer. net did I get that correct yeah yeah yeah if we go to where's JavaScript give me that JavaScript there's some JavaScript if we take JavaScript and at the first line we go use uh your mom you know it actually has uh you get inside of here let's see function declaration you get an identifier you get a block statement you get an expression statement the expression statement has literal use your mom and it's a directive right so it actually gets parsed as a directive so if you have a string as the first kind of expression in a function it's called a directive and things can happen and you can actually program in specific behavior so by having a use memo you are having a directive that tells the compiler to do something special based on that string I've never really liked that I think that that is kind of a it's a it's a very bizarre Hammer that exists use strict that's where UST strict comes from it's interesting in the sense that you get a opt-in compiling I think that I mean I I like that general idea that opt-in compiling pretty cool it would be very nice I mean I guess the one nice part is that you can use this and you can uh take this and explore what the compiler does on like a function by function basis right so maybe maybe there is something even though this is kind of like a uh what I would consider like a really strong hack it's a very probably nice way to test things right we don't intend for the used memo directive to be used uh for the long term okay good so it's just something that's nice to explore what happens right okay use foot gun use foot gun it's a beautiful it's it's one of my favorite hooks yeah I hate directives yeah I generally hate directives that's why like go compilers embed the files embedding the files I can kind of see as being something that's kind of nice that way you can have embedded file system lookup so that way you can run anywhere without a file system like I like that general idea but I do agree that directives are often dangerous when you have uh more confidence with rolling out the compiler you can expand to other directories yeah okay so maybe I'd take back what I said using this as a stop Gap and exploring how it does things is a good is a good kind of hack to make it work out so hey hats off to making a good hack work out checking compatibility all right so there's a bunch of health checks and all this okay I just want to see okay there's more compile stuff we don't care about the compile stuff blah blah blah blah here's some Vite here's this all right with webp pack this is still all more of the compiler by the way so much compiler stuff you have to add I'm always very worried about build I know people I get I get told this all the time on the internet because I say that hey you guys don't realize how bad like these compilations things can be until you work in a large project build systems spec specifically for JavaScript become so obtuse and difficult to work with that once you exceed a certain size you start doing so much stuff and this and and it can be so hard to Wrangle like at one point like I mean you you'll find plenty of companies that have an entire group of people not just one person multiple people that are working specifically on the build for JavaScript anyways everything is great until you use it in bigger terms even go like I'm using go right now and go is pretty great but I also find that go in as as the project is slowly getting bigger like go has its own little cracks and things that are kind of you know what I mean they're kind of annoying and so you you just got to choose what you want and choose what you want to suck you know there's there's things that suck in every single language except of course Zig which is a perfect language okay so let's let's change things up and let's look at this video cuz this is the announcement video and I am very excited about this announcement video finally arrived react developers are getting the react compiler all right Frameworks like spelt and View and solid and quick all have compilers but react doesn't have one until today and this compile is by the way is that a good thing just because other Frameworks have it I don't know if it's a great thing I mean spelt is its own is its own like you know it's it's it spelt is its own thing onto itself so it makes sense that it has a compiler like I get that and obviously uh solid has a lot of stuff that is onto itself it's its own kind of thing whereas I am curious like because that's one of the selling points of react is that react is just Java script and so you're just compiling jsx you're not compil you know you're not actually doing something else and this kind of makes it into its own thing right so once you compile react you are now entering you're you're leaving react as just JavaScript into react as something more than JavaScript piler is amazing it definitely does not disappoint and I think I can say it this point in my opinion this is the most advanced compiler in the front-end framework World let me start by showing you an example appliation it's a simple application it's got a header on top and then it's got these two incrementing counters now the state for those counters is actually up above in the app component itself so what do we think happens when we click on this increment button so now all four of those components render the app rerenders which means that the header render which means that both of those counters render but that's normal for react or at least it used to be check out for those that don't understand what what he's trying to say here whenever U state gets Set uh it renders the function in which has this like little hook uh hooked into it so this function gets recalled and thus everything gets rendered and so when you increment this thing once this whole function needs to get rendered which is typically why you're going to want to try to put it somewhere else you're not going to want to pass down this function because if you pass down this function you really create a great distance between where you render versus you know uh what's it called uh where you set the data so typically you don't want to do that just in general but I'm curious how how does react solve this because that's pretty impressive if react can solve this you're you know and by the way this I mean this is generally like terrible code example which I think is a great example which is like this is what this is what production looks like when you actually go to a real application people made all crazy amounts of shortcuts and you're like what the hell is going on here and that's just what happened so I'm I'm very curious runs with no code changes at all when instead we use the react compiler to generate the code all right this is the react compiler version I'm going to click on that same increment button and as you can see only the app and the single counter that we changes at all instead we use the react compiler to generate the code this is the react compiler see squ click on that same increment button and and the single counter that we clicked on rendered that's it is interesting that it uh what's it called that somehow it rendered this and only rendered this and it kind of drilled down from where the US state was to only the things that have changed so I mean that's that's very impressive compiler okay compiler has created code that is memoized the header component as well as both of the counter components when the app rerender happens the code that was generated by that compiler sees that there are no changes required for the header or the other counter so the memoized versions are returned and so you get super granularity when you're updating with no additional effort at all on your part just use the I'm curious how that scales because you know now you know let's just imagine you're just like a a medium-sized place with with thousands upon thousands of components if everything is memorized what does memory look like do you start getting things slower right you does do things change I like I I don't have a good way to reason about you know reason about how uh the performance goes on this because it is it is curious right it is curious to see what what that what that equates to Instagram already uses it okay I I I don't use Instagram on the on the on the web react compiler and with well-written react code you'll start getting the benefits right out of the gate well maybe not right out of the gate it's not in its final form yet right now it's still in development and so I wouldn't put it into production but I got to be honest with you meta products like Instagram have been running on this for a while so it's not too far off okay let's go through one more example before we dig into the guts of this thing and see exactly how it works so here you got another example it's got a counter again on the top and that just helps us to re-trigger the render of that component what we're actually looking for is on the console side over here every time I click increment we should not be resorting those names because those names don't actually change nor does the sort function so let's go try and fix this over in our nonreact compiler so what's happening here is a sort function is getting called multiple times so one thing I want to do is wrap it in a use memo now what do we depend on WE depend on the names names as well as the sort function itself all right let's see if that works that's a bit of a foot gun so if you pass in a function if you just pass in a rando closure every single time it renders it would actually realize that the function's different each time so you have to make sure you lift out the sword function you know just throwing that out there classic classtic Oopsy Daisy right there and then increment a bunch more times and nope it's still giving us the same sorting of names so why is that well if I go into my sort example you can see that the sort names function is getting regenerated ER pre-at I totally pre-at this one I totally just pre-at this one I knew it I could feel it I can feel it inside of me classic pre-at yeah it is a this is a classic pre-at situation um interesting yeah you need uh use call back to fix another issue yeah every time the sort example component renders so we're getting a new reference for this sort names function that we're sending on to the sorted list of names so you're also creating a new array every single time there's a lot of there's a lot of garbage that people don't realize like okay let's see if they you know I know that it's like really free dependency the so every single time this function is now called you also create an empty array and inside the other one you created you create an array of those dependencies so every time it renders it just creates garbage you know it's just a garbage cre doesn't actually look at any it's like so small figure out how it's it's in the I understand it's in the nursery right by the way me and Jack Harrington are entirely too close here Jack sorry sorry for getting sorry for getting in your business like that uh but uh what's it called uh I know it's it's in the nursery and the oroko I believe right oroko or oroko is that is that what it's called the oroko the oroko garbage collector is really really really really smart and how it handles minor uh minor gc's versus major gc's the Scavengers pretty cool pretty cool stuff it's going to do it sorting so let's hit save and then try it out again someone just said oroko the ENA song and now everything's fine we only get one sorting of the names because we've used use memo and use callback to fix our referential identity problem here's the good news though with the react compiler you don't need to do any of that here's the exact same example without the used memo or the used callback but this time with the react compiler compiling the code and I hit increment and there's no updating I'm curious how this is debuggable right like when you have something that's not rendering how do you debug that I think that that's going to be an extremely interesting uh thing because I'm sure they have some good react tools and all that but it's just another it's just one more Vector of things you need to consider so that seems interesting uh on top of it I wonder how it's doing it I know I'm sure he'll show me it's just me thinking through my thought process here which is I wonder what it's going to do does it like Trace through this this function all the way to where it's used and if it's used in a dependency array and it's been passed all the way through then it's considered a used call back and attaches a used call back to it I'm I'm fairly curious this is why yeah yeah console. logging just got a lot harder uh it things are going to get a little bit harder function never gets called except by big worry so when I read this kind of stuff my big worry so let me just throw out some things anytime you introduce magic anytime you introduce control flow that's different than what you've programmed by that very nature you make it harder to debug every single time so when something changes out of underneath you it is always harder this is typically why something like try catch is considered harder than errors as values errors as values is considered more cumbersome but it's very explicit at this point this error can occur therefore we handle this error every single time whereas try catch it's like I call this function I call that function I call this function I call that function one of those functions may error how do you recover from that do you need to do cleanup do you need to you know dispose of anything what do you actually do so there's like a lot you know there's trade-offs there one makes one makes the code just easier to write and read theoretically the other one makes it more explicit more cumbersome but it makes it more correct which one do you choose I prefer the correctness side of things I prefer the explicit side of things because it for me it's just easier to debug cuz my my control flow just goes top to bottom right that's it it just goes top to bottom always whereas with this you're you're kind of you're getting like that same feel again right you're getting that same feel where things are going to be moving around in a kind of a a very difficult way except for the first original to really understand what's Happening Here we really should take a look inside the compiled code now to do that I built my own Ripple it's available in a GitHub link below meta version of the rle which is probably far better than mine is available as well there's a link to that in the description but that wasn't available at the time I was doing this video so we're going to muddle by with my version of the repple which of course you can play with okay in the get up link in the description right down below all right here's my janky version of the repple so before we get into what the react compiler generates we really should take a look at what the current version of the transpiler creates because if you don't know how J see it's just JavaScript rookies okay it's a div it's a div it has a class name it has a class name that's that there's its content there's its content it's just JavaScript SX is turned into actual running code then it can get a little confusing as you look at the output of the react compiler so here's what's generated today from the function on the left hand side this hello function what's actually generated is this function on the right hand side that uses this underscore uncore jsx now underscore this makes sense right because it's just it literally just looks up these names and all jsx is what jsx actually turns into underneath the hood the first argument to jsx is the tag type in this case a div second argument are the props in this case the class name of Fu and then the third and any follow by the way this is you looking at the compiled stuff will give you a lot of insight especially as you do prop spreading for exactly what happens and why you are creating say a ton of garbage there's a there's there's a lot of cool there's a lot of cool stuff you can kind of glean from looking at the transpiled code plus it's actually just a really good exercise to do every now and then because what it what what it will open up to you is how transpilation works and then you're not going to be as confused as to why just general bugs crop up because you understand the the the essence the the thing underneath the hood so I I do recommend looking at this stuff from time to time following arguments are the children of that component in this case it's the text of hi there so what does this look like with a react compiler so I'm going to click over on the react comp that is so much more straightforward pyer Tab and see what the output of the RAC and pyo looks like it's going to bring in this new hook called use memo cache now what use my cach allows it to do is it create by the way uh I think dhh was right on the no build JavaScript you know what dhh was right have you ever had an experience where the source Maps don't work have you ever had the work in nice twittering that's how you do twittering right uh have you ever have you ever been a part of things where Have You Ever Had the work in an in an environment where things don't work prop properly right I think we've all had to be in that environment before it's it's not it's not easy right it it it sucks it's not fun it's just the reality of working in software is that sometimes software sucks and so when I see these things I realize like how hard it can be for some people to do some debugging you know what I mean uh there's a lot of things going on here and this can be it can make things difficult I'm also I'm curious what I'm curious what this does to bundle size there is a lot of implications into performance performance here what does this mean for your server if your server is already struggling to say like whenever I've built react servers I find that they struggle Beyond like 10 requests per second what does this do I don't know I have no idea do you compile your stuff I'm going to click over on the react compiler Tab and see what the output of the looks like it could be it's going to bring in this new hook called use memo cache now what useo is to create an array of cachable elements in this case just one and it's going to take parts of the component and assign them to slots within that memo cache so it's going to start off by taking that jsx and assigning it to t0 then putting it in that used memo cache slot and then returning t0 oh that's funny how that works okay okay that makes sense that I mean it it does make sense so it's going to do that to every single component it's going to just effectively slot every single one of them so that you have t0 T1 T2 T3 and it's going to kind of produce all of them um you know this stuff is definitely not free because you got to remember how do you think used memo cach works well you could imagine that react is probably in some sort of rendering State as it's going through this and every single time used memo cache is called it has a reference to the current node that's being rendered and then inside this tree of renderers in inside this tree of caches it then stores it maybe it's not a tree of caches maybe it's a map of caches of component being rendered to cach state but either way there's this big growing thing that's just storing all of your uh App State so now you've just created a cache between your Dom and you another level of caching between you and your Dom right it's it's I mean it's it's it's a TR it's a truly interesting approach I I I think it's pretty cool but it's just one more caching and I I I have a general rule of thumb which is the more client side caches you have the harder your app is to develop now use memo cach is going to do is just like any other hook the next time this hello function is called it's going to get back that array that dollar array of casual and I also am very curious about uh hand tuning performance versus just general shock gun approach to Performance often performance is not quite um as straightforward as just like just make everything into one thing usually that's not how things speed up typically what it's going to be is like you want to memorize these few things but it's actually cheaper to generate these other things and this is what we're going to do you know I am pretty curious is this like a do you get 50% of the performance game you get 150% performance gains plus 75% reduction in performance due to just over memoization I have no idea but I am curious about memory usage about CPU there's a lot of things be CU look to see is there any change in zero and in this case there's not going to be any change to zero so it's just going to return whatever was the zeroeth element in there as t0 for this particular example this is effectively the same as memorizing the component let's take a look at a more deeply nested example so this example is a bit more deeply nested we had a strong tag in there and it doesn't matter to the compiler the compiler has looked because there's one item so I'm curious about top LEL and seeing that that tree the div and the strong is one unit and it's cashing that one unit so that tree could be arbitrarily complex still roll it up into a I am curious what this this if statement is how how does it know it has cash like a dollar zero is simple react uh memo cache Sentinel meaning an empty value Sentinels is like the negative one value well what about something that's rendered but needs to change oh oh so something else okay I think I get it so something something inside of react is detecting the change and deleting out the cache such that you get a sentinel value that's must be okay so that that has to be how it's working okay neat so you don't actually do a comparison it deletes out it deletes out the element internally upon change that must be what it is a single cache entry as long as there is no Dynamic elements inside of it all right let's take a look at some data so in this example we've got a constant with a name Jack and then we're going to just output that constant and you can see that this is where the compiler has really kicked in this is why I say that this is the most advanced compiler that I've seen in the front end space because it's looked at that constant seen that that constant is unchanging and actually just remove that constant alt together and just simply added it as part of the jsx invocation it's actually actively refactoring the code and that's why I say this compiler is an incredible piece of work it's taking the a that's given to it by Babel and it's actually reconfiguring and rebuild what is the output of this beforehand wouldn't the output of this just be high and then passing in the constant named Jack I mean do do you get I I don't know what you get out of that I I have no idea what like what extra you get out of here holding this component on the Fly and creating an entirely new as and giving it back to Babel for continued processing yeah I'm curious about object at this point you might be worried that your code is getting moved around by the compiler but in reality optimizing compilers that rewrite code have been around since the early 80s when we first got CPUs every piece of software we use on our computer on our phones every day is compiled by an optimizing compiler this is just us as front end developers now getting those same kind of benefits of that compiler on the front end we as human Engineers manage the logic and the compiler handles optimizing it to make it faster all right let's get back into the action I mean I I generally agree with this sentiment we shouldn't be we shouldn't be too worried about that I I'm just uh the difference of it all is that compiler bugs are extremely difficult and I'm not sure how much this is you know like I I I don't know if this is the same thing as like a an if false a if permanently false Branch being trimmed out versus this I'm not sure if these are equivalent in compiler bugs to me this is more observational changes I'm I'm curious I'm curious if it falls into the same category maybe I'm just being a little too CR critical and you know maybe Jack is completely right on this one hey I I can take the L I can take the L now let's Jump Ahead to our counter example this is what the current transp would look like you just have a UST State and then you have the jsx and anytime this component changes state it's going to rebuild that entire jsx tree now let's take a look at the react compiler version so in this case the compiler has looked at our code and seen that we have a count it is dnam and we are going to assign it to this P tag so it's going to create a cachable element this zeroth element as that particular P tag oh this is so wild to create to move this must create really large arrays because if you look at this values you'll notice that t0 gets assigned to T1 T1 gets assigned to T2 um also kind of wild that you you can you can take these out but then it looks like you do another thing with t 2 T1 goes into the third slot I'm curious about this set count which is dependent on count oh now it's not even doing the looks anymore okay even though it's actually so I was actually just looking at Sentinel looks oh so the okay that's because the other elements they were they were unchanging elements they were static elements hence the reason why it was just like do a sentinel check if it's empty we render it once because it's an unchanging element else after if this is a changing element we have to do this okay so this memorization makes much more sense now now I I get this now now I get this okay my bad on that one my bad this makes much more sense but why ma models we're not sure the button code right below it and the button isn't actually T3 mention defined until this T2 block and then finally there's a T3 block at the bottom that brings it all together so if count changes then that zeroth block will get re-updated the t2 block will get re okay so just so I understand this it does look like how many pieces how many pieces of state do we have here we have effectively UST State I so this is how I'm going to look at it points of interest we have one point of Interest with the set State we have one point of Interest with this count this P count and we have one point of Interest with this button count notice that we get all the way up to uh seven uh point right here the seventh insert which means that if if I just do basic math which I'm curious about if this scales now I'm actually very curious about this are we seeing exponential memory growth it it does look like exponential memory growth to this because there's three points of interest in this function and this thing goes to the seventh or eighth the the eighth item in the list which means 2 to the three is eight and so what happens if we add a fourth point of interest do we get all the way up to 16 if we get all the way up to 16 then we have ourselves exponential memory growth which would be I I one would argue pretty terrifying because most components don't look like this right most components don't look like that at all right you know have you ever have you ever worked again have you ever worked on any real application it's more like 9,000 items in a single one uh it's way more complicated I'm very very yes it's way way way more complicated um I'm very curious about this I am very curious about this and then the T3 block will get updated and then returned so let's see that in action to demonstrate that we've now added a by the way I am oh I never put I never put stuff in stuff I never put you know hooks in hooks but it's probably okay oh man actually I do want I I okay it probably has not it probably just has to do with rendering my guess is that these things probably only have to do with rendering but you are going to defeat the jit I guarantee you you will get jitted much less and you'll probably and and another thing to really consider is that for something to become jitted and its function length you'll probably have to run it like 22 times and when it runs 22 times it has to keep track of all of that memory to see are you having monomorphic calls how you know it does a bunch of checks and all that so your memory usage my gut feel says that this thing is probably going to significantly increase memory usage that's just my gut feel a doubled count to our counter component that just simply doubles the count and as we can see in the current transpiler we invoked the Ed memo just as is but what happens when you get the react compiler looking at it well in this case we just remove the Ed memo alt together and just simply run the calculation in place so what happens when the compiler sees something that isn't well written react well as it turns out it has a fallback where it just simply lets the original transpiler go so let's take a look at an example of that so in this case we're doing something they claim 0% memory increase somewhere in the talk I I just simply don't believe them uh I mean the jit alone has to increase because it requires more function calls there's I I just don't I I don't know how how does that how how I I just don't get it because we're storing more things I could be wrong they're very smart and very talented Engineers I could be completely wrong and I'm I'm willing to eat some Crow okay I'm willing to eat some Crow and say I probably don't understand but to be completely real I just don't believe it I just don't believe it at all doing fairly funky in our assorted list component we're getting a list of names it's a list of strings and then we're setting this new name's state to that in it just moves allocations without creating them no no it doesn't it it has new arrays there are new arrays going on here and not only that but you're also increasing function length and function length is going to be proportional to memory usage have you ever looked at how much memory is used to make your jit work it's quite a bit per function you can actually look at these little these little uh function datas attached to each function it's not free it's not zero incoming prop what we want to do is if the prop of names ever changes we want B code also has cost string size is proportional to UTA UTF uh 16 like I I just I I just currently don't purchase it bundle size has to change here there has to be bundle size change change like you just can't convince me that this is somehow a zero cost there's many many things that exist that just like you can't you just can't say that I it would I would be hard pressed to believe this it disappear on me faster interactions uh faster initial load in navigations 0% memory increase yeah I mean I just from the VA te one of the core members of the VA team used to say to me you know I can make I can make anything look faster sorry I'm I'm an oldfashioned Dev I'm an oldfashioned Dev that when I see any numbers I don't believe it you should do the same thing you should just not believe things now you can say that you could be wrong I'm fine being wrong right I'm I don't know if it's BS I'm not saying it's BS I'm just saying I don't believe and that's that set new names to that new prop now a lot of folks hack this by using use memo and this is not the way that used memo is supposed to be used so if we remember back in counter doubled we actually ran the used memo code right in line so on line six you've got the exact count times two and we removed the used memo problem is that if we remove the used memo here we're actually going to get in an infinite Loop where we keep continually setting new names over and over and over again every time we rendered in fact actually the linter tells us this and so there's an additional linter that comes along with a compiler that helps you get around problems like this but the really cool thing is what the compiler does is smart enough to know that in this case compilation is only going to hurt the component it's actually not going to make it any better so what it does is it falls back on the original transpiler and just says yeah we're just going to create a regular component out of this we're not actually going to put in our compiler optimizations and that's actually a really interesting Behavior take a look at this intermixed file so here's two components sorted list and header the compiler has evaluated both of those components it does on a per component basis sort of the list that's good per component basis compilation happy about that so it said I won't optimize that component and instead let you have it your way but the header it can safely optimize so it's going to convert the header and use its caching in the header but it's not going to use it in the sorted list so you might be saying to yourself hey it's cool that I don't have to use use memo or use callback anymore but what about use effect do I still have to write dependency arrays for use effect well unfortunately yes you do but the react compiler does help stabilize the non-primitive references in your use effect dependency arrays so you my my general take on this one especially with that uh that that that Twitter picture right here right is that you can just write a simple application that just renders everything and then by doing some basic memoization you're like look at how much faster or nicer it is that's what my worry is is that like did we get a really good test did we get someone that walked did we get an application that has been tuned that is large that has that people are actively trying to make faster and you have the right people on it to actually make it faster you know not like hey I'm faster right they use it in Instagram well I'm not I mean that doesn't mean I'm that doesn't mean I'm convinced it's good I don't are these are these Instagram stats this is in the context of Instagram okay I mean hey okayy I could be I could be wrong I could be wrong okay okay okay okay on things like functions arrays it's very likely that it will help you fix some of your issues where your use effects are running out of control let's go take a look at a very simple timer example that demonstrates how the react compiler helps you with effect so here's the non-comp iled react app and we're getting this timer component mounted every time we go into the use effect and the reason we're running the use effect over and over and over again is that the reference to the adjust time function that's actually doing the work of adding seconds on is getting rebuilt every time we go through this function sense that means that depend array is changing which ends up creating a new timer that's not what we want check out the exact same code but this time running on the compiler what's happening on under the hood if we go back into my repple is that the react compiler is creating a t0 variable that holds the adjust time function and it's never going to change that adjust time function it's just going to create it once and then cach it off in dollar Zer then down the second Block it's going to create the cache body for the use effect as well as a cache dependency array and then it's going to pass both of those on to the use effect so what it's doing is stabilizing all those references for you and fixing what is a very common mistake when it comes to use effects that depend on arrays fixing shitty cod's a good thing all right before we wrap up a couple important things to really emphasize one react 19 does not include the compiler second there is a rules of react and there's a link in the description right down below follow the rules of react follow when you're writing your react code regardless of whether you're compiling or not so you can make sure that rule one of rules of react talk about the rules of react [Laughter] this just like everywhere was just like dude this thing that the what's it called this thing had the word rules of react like 18 times on this page rules of react seven separate appearances of it just and the page is not even that big there's like not even that much stuff on there there just so much rules of reacting inverse Fight Club rule right there rule one talk about react rules that you're compatible with a compiler when you decide to use it next you should really be experimenting starting I do like it I actually will when it become I will ecro and say that the used memo directive is actually pretty cool that you can experiment and just drive small changes to see if it actually makes a difference I think that's pretty good I I I like that experience I think that that's pretty cool more stable another important note is that mobx is simply not going to work with this compiler it's just a fundamental issue with proxy based State Management and this model because the compiler can't detect the use of a proxy at build time also as we go forward fair fair and factual proxies are extremely difficult I would anticipate that there's going to be a time when we have new libraries that only work correctly when they're compiled and that's probably going to cause some headaches and I think that's just to be expected good take Jack good take that is that is such a good like observation which is there's there's this is actually such an incredible observation I wonder how much is going to happen where there's just going to be libraries and assumptions made about the react compiler where you just have terrible outcomes if you're not using it you know interesting interesting based on the layout of the component maybe using something like block rendering like million JS in some cases I can even foresee a time when it potentially removes the need for dependency arrays that would be awesome now I'm not going to say that any of that is going to happen but having a compiler now opens the the door for all of that yeah long story this is dependency arrays would be great because it's I mean dep the the hard part about removing dependency arrays is that sometimes you don't want something in the dependency array that does appear within the capture uh by the way dependency arrays and and use effect who here has done C++ functions I'm just curious who here has done C++ functions yeah here yeah yeah cat dude I'm telling you yeah there's a lot of ones flying on the screen um use effect and use memo and these little capture groups are what your closure captures as well just gives me such strong C++ Lambda Vibes oh my goodness such strong C++ Lambda Vibes where you have to have like your capture group yeah exactly Jamie Jam Le Jam Le knew it Jam Le knew it look at that oh my goodness does that does that not give somebody nightmares whole new era of react and we'll be writing react very differently starting pretty soon here a guy on my team is in love with C++ lambdas really you can throw some you could wait what what what does this do oh you can template a Lambda shoot that's crazy that's that's crazy man templating a Lambda man I I don't I don't know about that that's kind of wild I don't think we should dude I don't know if we should do that I don't I don't I don't know if we should do that what is this what are what are you doing why do you got why do you got hats in here what language is this how do I declare a block crazy Objective C nobody ain't nobody likes Objective C all right let's finish let's finish off this video and I don't think any of us really know exactly where this is going to go but I can say with confidence that I'm really excited to be on this ride with you and I really appreciate meta giving me an advanced look at the react compiler so I can bring all of that information to you well I hope you enjoy this first look at the react compiler I'm sure there will be many more to come in the meantime I am working on a course on nextjs it's called PR nextjs dodev head over there right now give us your email you get on to a free newsletter and come in the meantime I am working on a course on nextjs it's called pron nextjs dodev head over there right now give us your email you get on to a free newsletter and also get access to really great tutorials on State Management and forms management I'm super proud of it and it'll be coming out really soon now so look forward to that in the near future meantime of course if you like this video hit that like button if you really like the video hit the Subscribe button and click on that Bell and be notified the next time new subscribe you guys can go and you guys can go and like that video and you guys can subscribe there you go that was great good job Jack that was really good it was a really great breakdown good job Jack I you know I am again I'm very curious about jit how does how does this affect jit and I know those stats were from Instagram um you know I've worked at a Fang company uh for a long long time and I just one really strong thing to make make sure you always understand is that just because it's a Fang company does not mean software is great coming out of the Fang company so when you tell me that uh Instagram got that much faster I'm not like dang the world's greatest Engineers couldn't compete against couldn't compete against the compiler it's that it's that it's that good that's not necessarily how uh these things go okay I'm just letting you know that typically the code is horseshit at at a Fang company okay you think it's some sort of prestigious great place where you have to do these crazy leak code questions to be able to do anything but the reality is is that it's just horeshit it's been horeshit it's been dog [ __ ] every single day it is dog water it is low bar it is not great and this is only speaking from my limited experience at Fang for being 10 and a half years at a Fang company okay that's it that's because all you know I'm going to give you I'm going to give you one last secret just because someone is super smart doesn't mean they don't create bad code okay all code is ugly all code eventually sucks you have any product that's been around for 10 years that has had Fe feature after feature after feature in which it was not designed to initially contain of course it's just going to turn into just crap and then not only that but it also has deadlines it has people asking it has things it has to do you have layoffs you have hit by this you have hit by that you're going to have people that leave that have just a huge amount of tribal knowledge with the product and what happens in the end it's just not that great this is just how it works life is messy code bases are just a reflection of it the name is the Prem