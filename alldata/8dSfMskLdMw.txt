C's biggest mistake written by Walter bright hey Walter bright December 22 2009. remember she hasn't changed a lot in the last little bit okay they've added some nice little thread apis but that's about it okay C is arguably the world's most successful programming language I already take offense to this okay I know this was written before rust came out but just think about how much you get to tell people about the fact you use rust right like what is success in a programming language is it a language doing something that's useful or is it the ability to tell people you use the language because like it really in my head Haskell's the most successful language ever written because you are able to look down on every other person on earth like Haskell's really the Pinnacle of all programming languages then you know rust is a really good second you know uh maybe lisp and rust are kind of tied because in lisp you can be like data is code and code is data and nobody even knows what that means unless if you're already so deep into lisp that makes sense it doesn't make any sense for me I don't even know what it means right and so just a thought just a thought okay just a thought I'm thinking right now all right its success has of course endless tempted people to improve upon it Lord that he doesn't even know about Zig yet uh thus C is a probably the uh patriarch of the longest list of languages notable among these are C plus plus the D programming language everyone loves a little bit of D in their life and most recently go go was in 2009 damn there are endless discussion uh discussion threads on how to fix C going back to the 80s so this is a well-trod ground what could possibly be added to the soup I posit that most such discussion centered around detail most interesting is what is the largest fundamental mistake we should take into account the context of the times that spawn C the problems it was trying to solve in the environment in which it was intended to be used keep in mind it was developed for 16-bit machine with extremely limited resources available it's a different world right okay y'all y'all running vs code you don't even get to you don't even you don't even have enough an opinion okay you don't even get an opinion on this okay and I did I just see kotlin in the chat when I'm reading a c article okay hey you can kotlin these nuts okay you can kotlin Deez Nuts if you keep that up buddy uh all right let's see I'd like to domestic dismiss things uh like it it doesn't do garbage collection functional programming Dynamic typing or oop those aren't problems C attempted to address so the lack of them are not mistakes beautifully written I love that what mistakes has caused more grief more bugs more workarounds more endless hours consumed Etc than any other many people would like to say null pointers I don't agree okay he does not think the billion dollar mistake is a null pointer conflating pointers with arrays all right let the man cook would you just just let it let them cook I don't mean them using the same syntax or the implicit conversion of a raise to pointers I mean the inability to pass an array to a function as an array even if it is declared to be an array c will silently convert the array to be a pointer and will rewrite the function declaration so it is semantically a pointer void fuchar is equivalent to void Charge car star people called A Car Star I still call it Char star okay why why do I have such stupid opinions in my life why do I think mute mut should be pronounced mute but because it's mutable but Char should be pronounced Char because it's character why am I wrong why am I right I am right or wrong I'm not sure I think I'm right I think I'm right uh I think I'm right uh is it is it Jiff or Jiff it's Jiff everyone knows that okay hypocrite I know I'm just a hypocrite this seemingly innocuous convenience feature is the root of endless evil it means that once a raise leave the scope in which they are defined they become pointers and lose the information which gives the extent of the array the array Dimensions what are the consequence of losing this information an alternative must be used for Strings the whole reason the zero Terminator let's see let's see for an alternative let's say NL oh my goodness an alternative must be used for Strings it's the whole reason the null Terminator for uh for the null Terminator well I keep thinking there should be more for whatever reason my brain wants more sentence when it gets to this point and I can't have it it just can't have it uh for other arrays it is inferred programmatically from the context naturally every situation is different and so an endless array of bugs ensue beautiful pun and I agree with this the train wreck just unfolds in slow motion from there the Galaxy of C string functions from the unsafe stir copy to Sprint F onwards uh Sprint F who doesn't love a good Sprint effing uh is a direct result there's obvious attempts at fixing this such as a safe C library then there are all the buffer overflows because function handles uh handed a pointer uh have no idea what the limits are and no array Brown's checking is possible I feel like I totally agree with this real talk I first off real talk I feel like I cannot read today like my dyslexia is at the highest it's been in a long time I didn't get great sleep last night because I was up too late and now I feel like I cannot read because I don't know what happens whenever I I don't get good sleep my reading just goes way out the window in my dyslexia just just gets horrifying uh either way uh I actually completely agree with this because this was the hardest jump for me going from java to C so at my school when I got when I became a learned man right um we started with Java programming one and then after that for programming in c the one thing that tripped me up more than anything else wasn't a raise as pointers it was the fact that you couldn't contain the length right you couldn't disambiguate a string from an array even though I mean one can argue that a string is an array I get it not arguing it but it's still it's like one of those but the bound checking I found to be such a disaster and that was always the hardest part other than all the sake faults I got constantly and continuously like I got sick fault after seg fault uh like con constantly and so that for me that was one of the hardest parts that was one of the hardest parts this problem was inherited uh inherited uh in a Toto by C plus plus which consequently spawns 10 years of attempts to create a usable string class classic C plus plus eventually the standard string result is uh comprised by its needs to be compatible with c0 terminated strings uh C plus plus addressed to the more General array Problem by inventing standard vector and many programming guidelines as shoe the uh the generic t uh style arrays but the legacy of cras continues in C plus plus with unsafe iterator design c99 attempted to fix this problem but the fatal error it made was still not combining the array Dimensions with the array pointer into one type yes the fat pointer was a very good idea which is also like you can use the same concept for typing nums which I really really like like I love the idea of a language to be able to uh not a typing them but like a type A typed Union attacked Union like I love the idea of being able to use fat pointers as more of a first class citizen to solve a lot of problems right that's how you can solve the whole length problem on array that's how you can solve also like a tagged Union you just have it kind of built into a language in a nicer way and it doesn't suck nearly as much it like takes all the dumb things that I do out of it but let's see but all isn't lost C can still be fixed it just needs a little uh new syntax oh damn this was suggested in 2009 no way it's actually going to happen um meaning an array is passed as a so-called fat pointer I.E a pair of consisting of a pointer to the start of the array and a size T of the array dimension of course this won't fix any existing code but it'll enable new code to be written correctly I love that I would literally love this made by 2109 yeah uh can now be deprecated by convention and compilers even better transitioning to the new way can be done by making declare uh declaration binary compatible with older code okay suggesting pre-compiler macros is never like a better this never makes me happy I've never once said hey you know what I want I want more pre-compiler macros you know what I want I would like to be able to conditionally think about my code said nobody ever okay nobody wants to say that uh this change isn't going to be trans is it going to transform C into a modern language with all the shiny bells and whistles it'll still be C in spirit as well as practice it will just relieve C programmers of dealing with a one particular constant pernicious source of bugs I love this pernicious pernicious I said nacious it's nicest uh references all this kind of stuff nice acknowledgments for reviewing the draft for this all right this is actually this I I would this does actually seem super cool I'm not gonna lie to you if C got this this would this would really alleviate a huge set of bugs that you just don't need to have because it actually disambiguates the type because in some fundamental way I know we like to treat strings as arrays I mean really they're just memory they're just buffers underneath I get it but there is like this there is a difference between them because they're they just are different so oh no I love this article I think it's a great article uh uh I always want to love C but every time I use it I don't think I love C but I want to love C like C feels so academically beautiful you know what I mean but practically every time I use it I go I don't like this why am I doing it this way you know what I mean you know what I mean I love C it's a toxic relationship it's abusive every single time I get lured back in by its Simplicity and Bam hit it with the restraining order quickly afterwards but you know what I will say one thing that's very very important I think I'm coming around to go I think I'm coming around to go I think I am the name is maybe I do love C a gin