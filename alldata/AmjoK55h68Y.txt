Due to backwards compatibility C++ 
will never become any simpler. But the way that we use it can. Welcome back everyone. 
I'm James Murphy. And today we're talking about the 
simplest smart pointer in C++ Unique Pointer `std::unique_ptr` This is a dumb pointer otherwise known as a raw 
pointer or just a pointer. But this is a smart pointer. So what makes it so smart? Smart pointers are just wrappers
 around regular old pointers that help you prevent very 
common bugs. Namely, forgetting to delete a pointer 
and causing a memory leak or accidentally deleting a pointer 
twice or in the wrong way. They can be used in a similar 
way to normal pointers. And they automate away some of the manual 
process causing some of the most common bugs. Let's take a look at a 
specific example. We have a vector 
of pointers to widgets where each widget is allocated 
on the Heap using `new`. We're using a vector of pointers 
instead of a vector of actual widgets because we're imagining there might 
be some kind of inheritance hierarchy going on. In actuality, we just have 
a single widget class. It just stores an integer and prints 
something on construction or destruction. Let's also suppose we've already written 
code using raw pointers or raw references. In this case we're just printing
 something from the widget. Getting back to our example. 
We have a pretty typical workflow. We create our vector and push 
five widgets onto it. Then we loop over them and 
do some work. Maybe the user closes a widget. 
So we pop that one off and delete it. Or maybe we peel some of the widgets off 
and do some different work with it. Once we're done with that 
one we delete it. At the end we loop over the vector and
 delete all the remaining widgets. This code works but it is 
very very error prone. Let's take a look at just a few of the ways 
this could have gone wrong. First we're calling new in a loop. If the first new succeeds but 
the second one throws an exception, then we just leap the first one. To handle that case without 
smart pointers, you'd need something like 
a try-except and or go to fail. No real issues just looping through 
and using the widgets though. But in this case, say a widget is closed, 
it's very easy to forget to delete it. This is one of the most common 
ways that memory is leaked. Most likely nothing will go wrong with
 your program if you forget to delete this pointer. You've just got a very very 
tiny memory leak. This case is even easier to forget because 
the delete has to be after the use. And of course, if all the widgets are closed, it's 
very easy to forget to delete all of them. Or instead of forgetting to delete the widget, 
you might forget to pop the widget. In which case, you'll accidentally delete it a 
second time when you loop through the vector at the end. Deleting a pointer twice is 
undefined behavior. So if you do this even once on
 accident anywhere in your program, the entire program is undefined. This could result in a segvault, garbage data being displayed 
to your user or worse a silent wrong answer 
in a calculation. The idea behind smartpointers is to 
make ownership of the pointer explicit. An owner of a pointer is an object
 that's responsible for deleting the pointer. So a unique pointer models an object
 that has exactly one owner at any given time. You could transfer or give 
up ownership. But when a unique pointer is destroyed,
 it's responsible for deleting whatever it owns. This completely gets rid of any confusion about 
when where or who's in charge of deleting a pointer. The way we clean up this example
 is by using a vector of unique pointers instead of a vector of raw pointers. So, here we're using a unique pointer
 to widget instead of a pointer to widget. Here you can push back unique
 pointers instead of raw pointers. You can construct a unique 
pointer yourself passing in a new widget. But for reasons beyond the 
scope of this video, the factory function make 
unique is a better alternative. All make unique does is make 
a unique pointer by calling new widget and forwarding all 
the arguments that you passed in. For type safety reasons unique pointer will not 
automatically convert to a function expecting a pointer. Instead you can use the get function to 
access the underlying pointer. Alternatively if the code that you've
 already written was using references, the dereference operator works 
with smart pointers. Dereferencing the smart pointer 
will dereference its underlying pointer. So, if you're passing everything by reference 
and you weren't using pointers in the first place, Then your calling code doesn't 
need to change at all. In any case, whether using references or pointers, 
this is the recommended thing to do. It's not recommended to rewrite functions to 
take unique pointers instead of pointers. Only the code that dealt with 
creating new widgets or deleting widgets would need to be changed 
to use smart pointers. All the code in the middle that just uses
 widget pointers or references shouldn't need to change. Then we get to another benefit. We no longer have to remember to delete this 
widget before popping it off the back. Popping off a unique pointer 
will automatically delete the resource. In the second case, the compiler automatically 
stops us from making a potential mistake. The compiler now forces us to move into 
this local variable last instead of copying into it. This might seem a bit annoying. But it actually protects you from the possibility of double
 deleting like we had in the raw pointer situation. You can use the arrow operator on a
 new pointer just like you would a normal pointer. And finally we don't need to do 
any of these deletes. The unique pointers handle 
that for us. So overall, the code got 
a little bit shorter. But the main benefit is that we just don't 
have to worry about new's and delete's anymore. Why burden yourself with that 
when the compiler can do it for you? And this is where a lot 
of other tutorials might end. You see some flashy code fixing one
 example and a specific case Someone that you don't really know tells you 
to use this thing that you don't really understand. But maybe you're super vigilant. And you at least try to look at 
the source code and see how it works. So you go to definition. And you see this. And then you never use 
unique pointer. Standard library implementers have 
to write it this way for reasons. Reasons that unfortunately force 
the code to be completely unreadable. But the main idea is behind unique pointer are 
very simple. And you could write it yourself. So let's do it. 
Let's write unique pointer. We'll start with the class template. For now just assume that `T` is 
a normal non-array non-reference type. Think an int or a widget. The real standard unique pointer has 
a specialization for arrays. And it also allows you to specify 
a custom deleter type. But we're just going to keep it simple.
 No arrays and just using the built-in delete. Maybe we can add custom deleters 
in a follow-up video. A unique pointer just wraps a pointer.
 So let's give it a pointer member. The main feature of unique pointer 
is that it calls delete and it's destructor. By putting delete in the destructor,
 we ensure that the pointer is eventually deleted. Because C++ guarantees that destructors 
are called even if there's an exception. Technically speaking, it's okay 
to delete an null pointer which is going to be our 
not-holding-anything value. But I'm setting us up for 
custom deleters in the future. And a custom deleter might 
not support that. That's why we have 
this if check. Next, we need constructors. 
The real unique pointer has a ton of them. But you really only need 
just a few. We'll have one to construct from a raw pointer that 
just initializes our pointer to that value. And a default constructor to 
hold a null pointer. Now, it's common to have a copy constructor and a 
copy assignment operator to go along with it that make copies of 
your object. But for a unique pointer that 
doesn't make sense. If we made a 
copy of a unique pointer, then we'd have two unique pointers
 that both think they own the same object. And would both try 
to delete it. That would be incorrect. Unique ownership implies that copying
 a unique pointer would be a bug. So in this case, we explicitly delete the 
copy constructor and copy assignment operator. Next let's define functions for either
 giving up or changing ownership. First up is release
 which is for giving up ownership. We've set our internal pointer 
to null and then return the old one. We don't delete the old one. Giving up ownership means that the caller is taking 
that responsibility it's their problem now. Also note that this pattern of setting a
 value and returning the old one is extremely common. And it can be written this 
way using standard exchange. Reset on the other hand swaps 
out the thing that we own. There's no one else that's taking 
that responsibility we still own the old one. So after we take ownership of the new pointer, 
we need to delete the old one. And once again this could be 
written using standard exchange. So, release and reset are kind of the building 
blocks that we use to change ownership. But so far, we don't have an easy way to directly transfer 
ownership from one unique pointer to another. That's what the move constructor 
and move assignment operator are for. These operators are characterized by the fact that 
their function argument is an R value reference. I'm definitely not going to attempt to explain value 
categories in the middle of another video. Suffice it to say that our value
 references are typically temporaries or otherwise about 
to be destroyed. Think of a function's return value or something explicitly cast 
to R value using standard move. The whole purpose of this is to allow you to 
steal the guts of another object before it's destroyed. In our case, stealing the guts have
 another unique pointer means asking it to release 
ownership of its held pointer. And then assigning that 
to ourselves. Move assignment is similar. We guard against assigning 
to ourselves. Ask the other thing to release ownership 
and then take ownership for ourselves using reset. We need to use reset here 
instead of just assigning the pointer because we might already 
own something that needs to be deleted before 
we take ownership of something new. And that's basically it. We just need to define some getters and other convenience functions to 
make this usable like a normal pointer. Operator bool allows us to do if checks
 and other boolean-like things on the pointer. The get function just gives out 
the underlying pointer so that people that don't care about
 ownership can just use it. Operator Arrow allows us to forward 
Arrow operations down to the underlying pointer. So that p arrow something will 
result in endpointer arrow something. And finally there's operator 
star or the dereference operator if you prefer. It allows star p on the unique pointer 
to end up dereferencing the held pointer. Zooming out. The whole thing fit 
in under 50 lines of pretty easy code.  And if you ignore blank lines, I 
can even sneak in make unique too.   Okay, I'll zoom in on that for a sec but
 this is just icing on the cake. Just change standard unique 
pointer to unique pointer and standard make unique 
to R make unique. And the whole thing 
works as is. It doesn't matter if an exception is thrown. Our used 
widget function didn't have to change   We don't have to remember 
to manually delete anything. If we tried to break unique ownership
 by copying, the compiler would stop us. I mean, it's not like 
a great error message. C++ could definitely use some
 improvement on that front. But it does stop us. It forces us to use move in which 
case ownership is transferred gracefully. And we don't have to loop over the vector and clean up at the end. All that's just taken care of. Now of course, smart pointers 
are not a silver bullet. They are but one tool 
in your bag. It's possible that unique 
ownership does not fit your problem. Although maybe shared ownership 
and a shared pointer would be a better fit. But even then maybe not. It's possible to accidentally try 
to use a move from object. And it's possible that one of 
your functions tries to keep a reference that becomes a dangling reference
  once the unique pointer goes out of scope. So using a unique pointer doesn't automatically 
protect you or make your code correct. However, the benefit 
of smart pointers is clear. Smart pointers reduce the 
number of bugs that you write. And unless you have a good reason
 not to and there are some good reasons. Then you probably should be 
using them. As always thanks for watching. And thank you to my patrons and
 donors for supporting me. Don't forget to like, comment and subscribe. And if you especially like the video, 
please consider becoming a patron on Patreon. Feel free to make suggestions of other video 
topics you'd like to hear about in the comments below. And you can also come and discuss
 programming in my Discord link below. Anyway thanks for watching.
 And see you next time.