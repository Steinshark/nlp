we um made a video to mark the passing of clive sinclair but you work with sinclair can you take us through some of those i want to say fantastic days but perhaps it was just a job tell me about it it was a slightly random thing actually the way it happened uh i my phd was in algebra but i'd always had an interest in computers because my father worked at the national physical laboratory with computers there and showed them to me from an early age and got me programming in basic things like that so after i finished my maths phd i thought well i'm still interested in computers so i'd see the big wide world by applying to all the computer companies i could find in cambridge and see if any of them had a job so i wasn't working directly for the sinclairs but through this company called nine tiles owned and managed by a guy called john grant and he had already done the the rom for the zx80 and for the zx81 which was the successor to that they wanted a massive floating point maths pack and so they thought well they get a mathematician to do that and they took me on and i ended up not only doing the floating point math but also all the other things that the zx81 had in addition to the zx80 um when it uh when it was all completed i wrote the manual which they used and um to say what i'd put into it and i had a i mean frankly rather idiosyncratic touch to writing manuals but it seemed to to ring a bell with people and um so once the zx81 was out of the way we started work on the successor which is the zx8 spectrum so the way it worked was my actual office was in was with nine tiles that started off in ely and then moved to a village called water beach just outside cambridge but i'd go into cambridge quite a lot um to work with the sinclair team which was then in a about two or three floors in a very narrow building in king's parade just opposite kings college and so that's where the actual sinclair people were working there was um uh their main technical person was a guy called jim westwood and uh so he does i think he did the the uh the hardware for the um for the zx81 and then my job was to write some code in z80 assembly language load into roms plug it into the hardware as it's being developed and see how it works and there was also a designer there called rick he designed the cases and um so for the spectrum they got in um a guy called richard outbacker so he was doing hardware and it worked the same way i'd write software blow it into the rom um see how it works direct it and you know gradually develop it so the hardware and software were being developed in parallel it's interesting you mentioned the manual as well because i think a generation of computer coders would like to say thank you to you um because i have to confess to not having had a sinclair machine but i know friends of mine and that's how they started coding because they looked in that manual and you explained very clearly how to to go about starting from scratch and writing some code it was a very very good menu actually and in the manual was all these little example programs that went through basic basic was the language that it used it was a basic machine using the basic language but somewhere along the line it became clear that people were also wanting to use it to write machine code so that wasn't something i'd had any experience of myself but i thought well i'd better put in the information that would enable them to do that effectively so they'd need various addresses and so that they can interact with the with the operating system and uh that seemed to have worked as well they were able to write machine code that interacted effectively with the rest of the machine so i was quite pleased with the way that turned out what was the biggest challenge you had done you've got a mathematician's background and an interest in computing but how do you where'd you start with that i hadn't done any programming in my um you know in my degree courses but i had done some programming before i went to university uh under my father's interest in fact he got me a job for nine months between school and university at the national physical laboratory doing some programming so i had some programming experience so i just uh you know it just seemed to me a fairly natural thing to do so it took a little while to to work out the idiosyncrasies of the z80 cpu and i think the biggest challenge that covered the whole thing was basically the limitations of memory so the rom was only a fixed size it was something like uh i don't know i think it's about 4k for the zx81 and 8 maybe 16k for the spectrum which just sounds you know today you'd measure it all in in mexico but it all had to be fitted into the wrong so that you had to use all the tricks in the book for reducing the number of bites that you used so we kind of weren't allowed to write to call a subroutine and then return straight afterwards because that sort of wasted um a push to the stack and and then a pump so you had to just jump to the sub routine and the return would take care of itself once you're there some of the numerical bits in the maths pack were a bit of a challenge i remember going to a lot of work to find out what was the most effective way of calculating logarithms i think i was using chebychev polynomials um something like that so there was one particular calculation where it took several days to work out what were going to be the most efficient ways of reducing the problem but uh that is interesting i think some of the things i was most pleased with were bits where you know like the beat the sounds right so you say beep and you say uh how long for and what pitch and um and then it does it so that was uh there's a kind of standard way of doing it where you give the pitch in terms of the frequency because basically it's just producing certain number of clicks per second that's not at all the way you'd want to write down music so i wanted to make it more usable so i had to work out how to express the pitch in terms of semitones and that was so to convert from the pitch to the frequency you actually have to use some some logarithms and so i had the logarithms in the maths pack and that was uh that would seem fine except that they were very accurate but quite slow so i had to write some much quicker ones that were good enough for the purposes just to make it work and so i was pleased with the way it came out because lots of other computers i'd seen you know you you could control the uh um control of the the pitch and the frequency but it was all a bit difficult uh whereas with the the spectrum you could um it was very easy to raise it up a semitone you just add one to all the parameters and i thought that was i thought that's the way to do it what the way it's been done previously what else was a challenge deadlines the deadline was always the next exhibition so you have to get it you have to get something demonstrable by the next exhibition and that's just the way that the sinclair product cycle works so um sometimes the uh what you saw at the exhibition wasn't quite what was intended to go to the public but something that just you needed to show something and yeah that's right yeah did you work with uh sir clive at all not really he's not a technical guy he had a very good intuition for uh costs so he one the critical thing is every piece of hardware that goes into it has to be paid there's a cost of it per unit wherever whereas every bit of software that goes into it there's one single overall cost when somebody me or john grant or whoever writes it and after that it's just divided by however many machines you make so he knew that very well he knew exactly that every transistor in the machine would cost more um so he got other people to work out how to how to implement that to to get the cost down but um that was the main concern of his so that there's there's very little interaction between me and him while uh while i was i was doing my work in fact i remember at one point sitting down in front of a spectrum and say here it is have a go and he's oh i don't know how to use those things i think that's true you had no idea how you actually programmed a basic machine did you ever have any kind of input into how much of that uh memory you know the k that you had to work with or did they just say here's 4k that's a given in the manual i wanted to put in a very simple example that that users could just type in themselves so i thought frerajaka [Music] and then i thought i mean this is getting a bit fancy and i thought well why not spice it up and instead you use malay used the same thing but in a minor key in his first symphony so i thought oh i'll do that instead and i had some fanciful remarks about what the mahler music was doing so that was basically verajaka in the minor key that you could type in and program and get it to do it and then as a little exercise at the end of the chapter i jokingly said uh program up the whole of mahler's first symphony which was um could only be a joke because the spectrum only had its one speaker whereas the symphony obviously has a whole orchestra full of different instruments playing different notes so nobody could ever do that and then um 30 years later some guys got together and thought well actually we can do that if we get enough spectrums all working together so they got all their spectrums and they got a raspberry pi to synchronize them so that was the kind of conductor and they they put together a video [Music] wasn't the whole symphony but it was the whole of that movement so i thought what a waste so if i'd known 30 years ago that i could make a fanciful suggestion and 30 years later people and computers would get together and and make a reality of it i'd have thought of something more useful more world changing but never mind after the spectrum richard outfasso he and i were thinking well why are we making all this money for clive sinclair why can't we just make it for ourselves it's easy to forget now that it was this was delivering a computer for a hundred pounds