this week on developer voices we're talking with James Q Quick he's a software developer for FedEx turned developer advocate for Microsoft turned online teacher for himself he teaches JavaScript he's got a YouTube channel he does boot camps he does all kinds of teaching for newer programmers including teaching them why they might want to get into this industry in the first place and I think he's got three things to teach us firstly there's that beginner's mindset if you're just getting started in programming what you need to know what does James think your long-term indicators of success are what's the mindset you need second if you're more experienced you still need to understand that mindset you're going to be working with Junior developers during your career and you're going to forget what you had to learn in the early days you're going to forget how much you needed to know to get started and to help them we need to understand that mindset do a good job of mentoring people and thirdly as James is a JavaScript teacher and JavaScript is about the fastest moving Target in the industry we talk about his top libraries we should be taking a look at what's new and emerging and interesting and what does he think of the whole JavaScript versus typescript decision so this week let's take a look at the opening of the programming career funnel I'm your host Chris Jenkins this is developer voices and today's voice is James Q Quick [Music] joining me today it's James Quick James how are you hey doing good thank you for having me I'm very glad to have you in between um shifts being a new father yeah we talked about this I've got maybe uh new or newborn about one and a half months uh in the room with me so hopefully she stays quiet very kind of you to join us when your time is at a premium so you um you and I actually have something in common I think which is all the good username handles on the internet have already been taken by an American football player nice yeah that was a there was like a branding struggle for me so James Quick is first and last name and then my handle on everything is James Q Quick and exactly like you said there was a football player in the United States football being American football and uh his name is James Quick went to the NFL the to play professional football so his SEO like he just dominated James Quick from an SEO perspective and my middle name is Quentin a little fun fact people usually ask me like what that stands for um so anyway I decided to embrace the middle initial and now everything brand wise like across any platform and personal website is always uh James Q Quick to make sure that I am unique enough to be found on the internet yeah I'm Chris a Jenkins for exactly the same reason apparently there's a Carolina Panthers linebacker okay I'm not even sure what that means but he's Chris Jenkins and he looks nothing like me it's like 240 pounds or something right yeah it's funny the things we we have to think about when when you look at like branding and I've talked a lot about branding and the impact that like my personal brand has had on my career and and the fact that your personal brand or at least my personal brand is basically the most valuable asset that I own and it wouldn't be that if it wasn't unique enough to be be able to stand out on its own so embracing that middle initial is definitely definitely been a necessary step along the way yeah yeah it's nice that like computer science it's not just a computer science idea having unique IDs for objects right it works it works for us and the US Millennials and generations going forward on social yeah absolutely so I've got you in to talk about this whole journey into programming because you've been helping a lot of people take their first steps into programming right yeah I it's funny like there was never a time in in my life until kind of starting my career which I'm sure we'll talk about that I I ever thought I would want to be a teacher and I've realized that's that's kind of the the thing I enjoy most about all the things that I've done over the course of my career so I've worked as a technical evangelist at Microsoft more recently a more familiar title with people maybe a developer Advocate basically working in the community teach people about the product teach people how to build things just kind of be a genuine member of community and engage with them and earn trust and and that sort of stuff and that can be you know I speak at events I do workshops I do trainings I do individual consultancy and like one-on-ones so there's a lot of different interactions that I've had kind of through that professional route and then I've also been super active in community stuff here in Memphis when I was in New York City as well just kind of being there at meetups seeing what people are talking about and and kind of showing up where developers are and then lastly I've taught uh two rounds of a boot camp called launch code and they are based in St Louis in the US and they do different uh they go to different cities to kind of run their boot camps based on uh typically like city or state funding and so we did one here in Memphis where I live and then we did one during covid virtually for um basically like Fayetteville Arkansas which is a few hours away and anyway again I didn't I had no thought of like wanting to be a teacher ever in my life or career until I started doing the things that are teaching and it's not it's not like spending eight hours a day in a classroom like you typically think like you can teach people in a lot of different ways even being active on social media is a great way to teach people because you can share your knowledge and insights and things you've learned with people all across the world and that's kind of what content has done for me and then the ability to like have deeper uh teaching interactions through teaching boot camps as well what's it like teaching a boot camp because it must be a very different audience to the usual developer audience that we're used to chatting with yeah yeah there's you get kind of a different um different set of backgrounds for people obviously like some people have had a little bit of interest in programming before some people maybe took a class in college 10 years ago when they were in school but the majority of the people that I taught were starting from absolute scratch they had done no programming didn't really know what it was and they just kind of hear about like a lot of people do kind of the promise of opportunity in Tech right like this is this is one of the industries that more and more so does not require a college degree you can go you can learn on your own although that's a certainly a difficult thing to do but all the resources are there if you're able to find them but going through a boot camp is so impactful because in six months to a year people can completely change the trajectory of their career right they're completely switching careers so not only making the switch but also looking at what is that mean for them long terms or long term that means they have much higher potential salary much higher potential benefits than industries that they had been in in the past so the impact of that is is huge but it's it's kind of fun it's definitely a challenge to start with people that literally have done nothing before and I think it's kind of a good reminder for us that have been developing for 10 years or however long we've been writing code it's a good reminder for us what that perspective is when you don't when you have no idea what a string is when you have no idea what a for loop is and what these random characters mean in terms of code so it's kind of kind of a good refresher to get back in touch with what it's like to be starting from scratch yeah that would absolutely scare me because I'm not sure I could go that far back to bed and explain what a string is the string has been part of my lexicon for decades right it is yeah it's really tough it also is really cool too though because you'll hear as as it as it clicks with certain students they'll Express that understanding in a way that you've never thought about before so like the way that you and I know strings now the way that you and I think we remember learning strings and kind of having that aha moment they could they could still have that moment in a completely different way in a completely different understanding and that just goes to like people think about things differently they understand differently they learn differently so it does give you a bunch of different perspectives from in this case like these boot camps start with 160 people and at the end you graduate like 50 or 60 like it's kind of a get a bunch of people in and bring as many people to the Finish Line as we possibly can but that's that many different perspectives that you have at every given stage and to see them like build confidence along the way like as they start to understand some things there's still a lot of imposter syndrome that's what we talk about a lot but you see like the confidence start to build like as they get something and and they can build on that right like they're building that Foundation that then makes it easier to learn more and more it's really just it's a fun process a really really fun process probably to those two courses being like two of the most impactful things that I I feel like I've been able to do in my career that's incredible do you think you'll be doing more going forwards I don't know it's it's a challenge so uh the the one that I did was uh launch code it's a it's completely free so it's based on funding so they don't have to pay anything and it's part time and it's not during the day so the huge benefit of this the reason it's so can be so impactful I think is because people don't have to quit their full-time jobs and if you look at like I've never since College I've never been in a position where I couldn't be working full-time and through high school and college I was never in a position where I couldn't be working at least part-time because I like no one's just giving me money to live off of so that's the really unique experience with launch code is they can keep their full-time job it's not five days a week it's two nights a week three hours at a time and then obviously expected to put a lot of time into homework when you can yeah but it was just really really wild to see people juggle a full-time job multiple kids Etc so again super special opportunity it is a challenge for me at the time like working full-time and then me going and doing those extra hours at night and then the preparation and then doing like meetups on a Sunday to do like office hours and things it was certainly a challenge and there's there's a ton of other things that are kind of on my plate from a Content perspective and we haven't quite touched this but I do content creation full time in the web development JavaScript ecosystem uh space so I've got tons of different things that I want to do I think like a lot of people and figuring out like what is the absolute highest priority is is a challenge um but I will say regardless of formally teaching in a boot camp again certainly an opportunity but one of the things I do want to build up more is just my personal course content that I can get in the hands of developers and again there's a level of scale there of like a virtual thing at their own pace you can you can impact as many people as sign up for the course and potentially have interactions with them and forums and Discord and that sort of stuff so anyway yeah long story short it's definitely an option it's a time commitment there's lots of things that I would like to do figuring out and prioritizing all those especially now with newborn it's kind of the ever Everlasting challenge I think for the next uh many many years yeah and when you're freelance it's like here's a blank piece of paper Define your career and choose and subtract right yeah I've even I've had a little bit um not an Awakening that sounds really cliche but I've been really starting to think about what are those priorities a little bit more the last uh last month or so anyway it'll be it'll be exciting to see what the next few years uh pans out how it pans out for me but do you think you're going to end up more talking to existing developers or like aiming towards new people coming into development yeah I think I've got kind of like a few different categories of things that I I talk about and teach and and preach honestly to people and there's there's like the breaking into that conversation so it's like what are the things that you could be doing how do you prioritize your time going back to like if you're looking to get into a programming job there's a million things you could learn how do you prioritize like here are the things that are going to give me the best leg up to get that first job in a successful career in Tech so that is certainly a huge part of my target audience I definitely think there's kind of like the Intermediate content level for me as well but the interesting thing for me is I don't write code full time now and I've actually only done that for a relatively small portion of my career because I've been in this technical evangelist and developer Advocate role for the majority of it which is a mix of having the technical expertise but also focusing on the public speaking the working with people the relationships the community building yeah so I'm not like I think I'm a very competent developer I think I'm I'm pretty good at what I do but I also just don't have the experience that people that have been writing code every single day production level software have for the last 10 years right so I've got a different level or a different set of experiences so I don't think I don't think I see myself doing very much of like the advanced content just because I I rarely ever dive deep enough to do that but certainly a lot of time goes into breaking an attack from a technical perspective and a career perspective and like marketing yourself and all these things there's definitely a good amount of content that I think goes towards the like intermediate developer and and the advantage that I have of not doing software every day for one project for example is I get to try out a lot of different tools and platforms and Frameworks which in the JavaScript ecosystem changes every day so I do have this perspective of here's kind of what the industry is doing even if I'm not diving down into the advanced level yeah and you end up getting broad rather than deep yeah it absolutely and and that's fun because I get to experiment with a lot of a lot of different things that most people don't have uh most most people don't have the time to do I really want to ask you what's on there your JavaScript radar but before I do that I just want to stay on this topic of people getting started that you said like you get 160 people whittled down to 50. and I'm wondering is there a pattern to the background to the mindset what's going on in their life can you predict who the 50 are going to be yeah that's that's a great question so one thing I will clarify just a little bit is the like the idea of whittling down so it's not us like whittling down it's just again because it's free because it's a time commitment on top of most people working full-time it's just one of the hardest things people will ever do it's a significant Challenge from yeah most adults I think we're just we're not used to starting from scratch we're not used to being at the bottom of the totem pole it's like when you go from in in the U.S like eighth grade is the end of middle school and you go into High School you were at the top of the school in middle school and now you're going to the bottom in high school but as adults we're just not used to to doing that and so the I think a lot of the conversations that that are really important that I I try to stress is to make people feel uncomfortable to know this is common this is expected this is one of the hardest things you'll probably ever do in your life it's challenging for everyone everyone is going through it everyone is struggling even if and when you feel like it's only you so I I will say like you kind of looked at or asked about indicators for people and this is part of my job as an instructor and I think just community in general is to help put people in position to feel comfortable to do this but the people who ask questions is a significant indicator because what happens is you get in the snowball of you have imposter Syndrome again we can talk about it I can try to address that and say it's common blah blah as much as I can but you get in the snowball and this was me in college where I wouldn't ask the question first and then a month later you feel like you're way too behind to be asking that question from a month ago but the thing you're learning now is built on top of something you should have learned a month ago yeah so the ability to ask questions is is always a significant indicator from my perspective of success for people going through that Journey yeah yeah I have a friend um and an ex-colleague who's great at that even like late on his programming career he is the first person to raise his hand ask the question and risk looking ignorant yep it's kind of one career hack for me that anytime I'm in a position to ask a question and I'll give it specific examples in a minute I I will find a question a relevant question to ask so that there is the perspective of I have a question I'm scared to ask but I force myself to do it because I know I need to there's also this additional perspective of let's say we have like an off-site for a team of 60 people or 100 people and you're in person and maybe you're not in the in the same room with those people on a very regular basis maybe you're working remotely like a lot of us do now so you never get to see these people in person the more visibility you can get for yourself for your career then you don't have to be really selfish about this you don't have to like do a dance or anything just like participate in the question or participate by asking questions so if they have an open question for VPS and directors people that don't know much about you forcing yourself to have something relevant to stand up and just be a face that they recognize I think is a little bit of a career hack for me for from a visibility standpoint so far from a question making you look stupid you think it actually makes you look makes you visible enough to be there's a positive thing to risk looking stupid absolutely yeah and and the the reality is most of us most of ours are much more self-conscious about what we say than the likelihood of other people judging us right like we are almost always our worst critics we almost are always hype up and over hype the fears because that's unfortunately kind of human nature for us so putting it out there I think to your point yes you're almost certainly not going to look like you don't know what's going on it's I think more likely that it's just going to raise some visibility to you as an employee in front of an audience of people that like may be making hiring decisions for next roles or promotion decisions later on and so that was a big thing when I went from a developer a technical evangelist at Microsoft where I had all this public speaking experience and I kind of found my voice I kind of I was confident having that voice yeah and I went to a traditional engineering role at FedEx that was my hack in my career where I spoke up all the time and when developers would like they would Grumble about things that they didn't feel was right like timelines or like this person leadership doesn't understand what's really going on that would be my opportunity to go and speak up and having that voice got visibility and I think earned respect for myself to and this has never happened other than me that I know of although I'm sure it has but I ended up getting a skip level promotion from a software developer role to an architect role that was a mix of software development but also then being able to communicate technical Concepts to Technical and non-technical people and so me walking in with that voice and being comfortable with it I think was a big part of that working out for me yeah I can totally see that because there's always this thing in companies where there's a missing bridge between the technology and the people that don't understand technology I guess it's related to the boot camp thing right is that can you communicate in a way that crosses that divide yep so do you think that that questioning thing is I mean I can imagine a lot of people wanting like considering a tech career and thinking oh I don't have a I don't have a logical mind or I don't have a background in I didn't like math or maths at school or something but the ability to ask questions do you think that's the the real key I think in terms of I think so if you're going through a boot camp if if you're looking to go into a boot camp I would do some free resources online YouTube free code Camp Etc to see if it's something that's the least bit interested interesting for you like if you kind of go through some very basic tutorials you're like okay I can kind of see that and then looking at investing more time and energy and potentially money I think after you kind of have some of the interest ideally then that ability to ask questions is a significant indicator and and the reality is like Tech is a is a very broad word I think I over generalized this a lot where I say Tech and a lot of people do and they mean programming jobs but there are there are lots of roles that are not just programming that I think the visibility for that could really help people as they're going through this too because if you go through a boot camp and you're like okay I kind of enjoy this I enjoy aspects of this but I I can't see myself working in a basement 40 hours a week writing code which is The Stereotype right like that's what we like stereotype developers as but if you look at where I am in my career and actually where I started my career it was this really amazing mix of there is the technical side there is the understanding of code there's the writing of code for demos and certain things but also I get to be with people I get to speak I get to create content I get to do video I get to do podcasts I get to travel I get to do all these things that you don't typically think about with a traditional software developer role and that's just one other aspect there's business analysts which approach it more from a business perspective but understanding the programming makes you better at your job there's tons of people that come from design backgrounds that can do specifically UI ux or specifically front end like you can find ways to use those skills to open up lots of different opportunities and kind of pick which one of those makes more sense for you it's more than just writing code 40 hours a week like we think is all that's available yeah I so coming from the other side of it where I've been like programming as a kid forever right there's never been a time when I've not been a programmer yeah I sometimes worry I'm going to challenge you with this and see what you think that people coming out of boot camps just are left okay you've built one or two websites and now you're left on your own you're probably not going to have the experiences that give you the depth and The Roots you're going to need even if you're not a full-time programmer you're just not going to build the depth of knowledge it takes to be a designer that codes or a communicator of code yeah there's any way through that well I can I can kind of start by countering from from my experience and so the alternative to that I think is going through the traditional computer science degree like you you have an additional advantage of you said you've been programming since how 10 years old or however long it was for you I don't know yeah but there's typically you're comparing the traditional computer science degree with people that don't do the traditional they self-teach or they go through boot camp and so for for me I went I went to a top university in in the country I went to a top 20 University in the country an amazing school I went through the computer science program so I had computer science every day for four years and when I graduated and had interviews I realized I really struggled to be able to answer like pretty basic questions about object-oriented programming and other things and the reason was I treated that like school I treated it like grade so I got really good grades I I got mostly A's and computer science I did really well from a grades perspective but I didn't appreciate what I was doing I didn't really learn the content I didn't really learn how everything fit together yeah so I think first off you're comparing you're potentially comparing like boot camp grads with computer science grads and there's definitely advantages I think of both I'll come back to that in a second but it's not it's not just a it's not just a comparison of which path did you take it's down to the individual right like there are people who graduate boot camps who learn the boot camp content but also just from excitement and involvement in the community and doing extra resources they're learning much more than I learned in my computer science degree right so it's like some a lot of that is down to the individual it's challenging to not have that degree to then be able to communicate all the things that you know or to get visibility for interviews and things because you don't have a university for example on your resume but the the other aspect of this is that that Journey like never ends so in in a boot camp I think you're learning much more practical content or or programming content than I learned in college so the advantage that I have is I did data structures and algorithms I did a um I don't know like I didn't take a databases class but I did like those core fundamentals of here's how programming works and the actual science behind computer science you don't really do much of that in bootcamp but what you do do is you learn how to build websites you learn to use Source control you learn to deploy websites you learn about full stack applications none of which I learned in my degree yeah so these are these are two different sets and I look at it from this perspective of either way you go your Learning Journey is never going to end as I took my first developer role I was I was good enough to get the role with the amount that I learned in six months of being on the job is exponential and it's the same thing for people who go through boot camps right like if you were if you're not only doing it full-time but you're also paid to do it full-time time and you're surrounded by a team ideally that is there to support you and teach you and and kind of train you where you are six months into that role you're a completely different person you're on a completely different trajectory so I think it comes down to the individual and what they've invested into whichever path they've taken and I think from a company perspective you have to look at like here's where they start but what's their potential you can't just write someone off because they don't have the experience yet in certain things maybe you can but be open-minded to the fact that like look at what they've done in the time they've had and the exposure that they had imagine what they'll be able to do in six months as they see what real world software looks like on a daily basis yeah yeah especially if you're like hiring Junior developers which is probably what you're doing for boot camp people you're seeing the potential of expecting to train them right absolutely and that's it's a it's a big responsibility too on from the hiring company perspective you have to be you have to have in place mechanisms to support Junior developers and there are lots of companies that aren't very good at that that was a particular interest for me when I was at FedEx was I love teaching again going back to like the background that I had had so I when someone would join I love to do onboarding and whiteboarding sessions with them and explain what was going on not all companies have that and so they have to be intentional to support Junior developers or you're going to be in this position where Junior developers stay a year and they leave because it's a terrible environment and they're not really learning what they should be yeah yeah especially in the early days you have to be looking at what you can give to them as well as what you can get out of them yeah so one thing I often wonder right is I think there's something very Noble about getting into programming to pay the bills right there is absolutely no shame in putting food on the table and if you could find a better career go for it how do we as the people in the career and as Educators say look this is great not only can you earn decent living but look at all these fun things you can do with this power how do we bring them across from it just being about money to realizing what they've actually got well I've got a slightly different perspective than a lot of people have because in most people say I think exactly what you said like if you get into Tech and programming just for the money that's great and I do think that as well but I also have a perspective for me of work-life balance and happiness is number one priority for me now I do have an advantage of being in Tech I can still have these other things like vacation and and money and all these things and be picky about what my work-life balance and enjoyment is but I do encourage people to at least consider that like I think that I think that should be a part of the the thought process going into into Tech is that your happiness is still very important as well ideally you combine both of those right and that's why I like to talk a lot about and maybe going back to answer your question of being in Tech being a programming is not necessarily just writing code 40 hours a week I think showing people what different types of roles are what different types of day-to-day obligations are and engagements are and showing them that again it's more than just what you've been doing in your boot camp or at least it can be I think that helps open up people to different perspectives on what their potential what a job looks like yeah yeah okay I can see that it's because one of one of the great things about programming is it can take you in so many different directions right absolutely and nearly all kinds of companies need programmers so you can be in all kinds of sectors as well yeah and I think like being in I call it again like generally being in Tech I'll share a quick story about my wife so she had had been in Hospitality for all of her careers since we graduated her mom has been in Hospitality for 20 years and that's what my wife grew up seeing like she would go and work with her mom doing something at the hotel that she worked at so that's what she was used to she was always very successful in terms of like she was very good at her job people had a lot of respect for what she did they would come to her with questions they would I don't know they would respect her a lot but it was in the hospitality industry which can be very limited in terms of money in terms of vacation in terms of honestly appreciation from a benefits perspective and so it um it ended up that there was an opportunity at the company I was working at at the time all zero for an event uh basically an event plan events and sponsorships coordinator position on the team that I was on and so she interviewed it worked out and overnight my wife tripled her salary went from two weeks vacation to unlimited vacation went from no stock options and that never even being a possibility to stock options and Employee Stock purchase program and all these things and and that's what I like to share with people is you can probably find a way even if it's not writing code 40 hours a week you can find a way if you do research and kind of stay with it so break into Tech and open up all the benefits that we talk about for money and and general benefits and happiness and travel and all these things you can find a way I think and so I love sharing that Journey because it's not just from a programming perspective it's just breaking into the right opportunity and I say this a lot too I think for people in their careers whatever whatever you do whatever your job is however much money you make I can guarantee you if you search hard enough you could find another opportunity doing a similar job enjoying it the same if not more but also make more more money so like I talk about work-life balance and happiness being my number one priority there's no reason that money being second shouldn't be a significant factor and those two things can't go hand in hand with each other yeah wow I feel like we're getting uh we're Sliding Away from our usual topic of death into motivational speaking yeah that is I didn't mention this earlier that's kind of the additional especially from a public speaking perspective the additional like type of content that I see myself doing more of is more the motivational stuff oh okay sorry for going down that rabbit hole that's fine but I am going to drag you back to Tech because I have one I have another core question for you why is it do you think that nearly all of these boot camps Focus around JavaScript or python is it just where are the jobs or is there some other reason uh yeah I think it's I think it's just ease of getting started so when I look at I started in in college having no experience and and kind of chose computer science on a whim like I didn't know what to study and they asked and I said computer science sure and I I had Java and so to work with Java it's an object-oriented programming which you can't write a line of code without it being inside of a class so just to just to try to get to the point of what is a string or how to log something out to the console you can kind of skirt past it but you're at least exposed to this concept of a class yeah so at the start you're like you just kind of okay that code's there I have no idea what that code does and and for me like I just ignored that for years going back to not really appreciating what I was doing like the fact that it was a class I just completely ignored and and would go to like write a function and to do something in that without understanding what classes were yeah so Java JavaScript and so not Java JavaScript and python are both the ease of getting started is substantial and significant and I think that's a really big factor the other thing it's particularly useful for me about JavaScript is you can you can use it to do stuff really quickly like in a browser so it's it's much different than just logging something out to a console that's valuable but being able to see something potentially move on a web page combining that with HTML and CSS yeah wow like that's that's significant and the last thing I'll add about JavaScript is it can do kind of everything right like you can do your core web development HTML CSS JavaScript you can do backend with node.js there's tons of different Frameworks you can do mobile you can do iot you can do kind of everything with JavaScript and so I think the ubiquitousness of JavaScript in addition to the ease of getting started and the ability to kind of see see interactions for the or see something happen based on code you write those are kind of the three big ones that I think about specifically with JavaScript python having a lot of the benefits too of just like ease of use and popularity yeah yeah I'll have one of my own to that list which is the great thing about JavaScript is you can share it with non-programmers so much more easily like you can I can send my code I can send JavaScript code to my mother just by saying click on this link and she will run the code without ever knowing that would mean yeah yeah and that's that's a good point because in in college to do Java we had to download eclipse and there was actually this one one homework assignment that I thought was passing just because my editor didn't call out any errors turns out it just it wasn't running at all because of an error that I just didn't see and in Eclipse so I like submitted this assignment and got a bad grade and I was like it literally doesn't like how would I know that it didn't work like it seemed like everything worked because it didn't tell me that it didn't so there's there's additional tooling and stuff that goes into uh setting up something like Java as well yeah yeah it's there's a lot of ceremony and overhead to that language in particular it's famous I sometimes think if you surgically removed my brain the remaining spinal cord would be able to say public static void may I am thinking yeah so this this leads us into the JavaScript world then because um because it's it's one of those languages where it's constantly in flux and it feels like even if you program JavaScript three years ago you kind of come back through it as a newbie again right yeah so give me your quick top three things in the JavaScript world that excite you at the moment yeah so one is a framework called Astro and so Astro typically is kind of lumped into the static site generator category so statically generating sites became very popular in in something called the jam stack a few years ago jamstack stands for JavaScript apis and markup and a lot of its priority was to build web pages statically and so that means if you have like a Blog for example instead of the traditional way that it had been and and the way it worked in the past was you you visit a Blog Page it would send a request to the server the server would go the database to get to the content it would create the markup the HTML and it would send it back to the browser yeah with statically generated content what happens is your website knows at any given time here's all the content right like it can go and query all the content when you build it and deploy it and then go ahead and just generate all of those pages as HTML so you're not having to go to the server after that and asteroid was kind of thrown into that category although it can do everything that these other bigger Frameworks can do it can do API endpoints it can do SSR which is server-side rendering it can do all these things and it's really just it's they've got an amazing team it's really optimized for certain use cases specifically for static content for performance it doesn't ship JavaScript to the browser by default has Integrations directly or support directly for markdown and MDX for like authoring your content so there's lots of really good things about Astro I think it's really neat I think what they've done in the last couple years is really incredible and I'm actually like I'll do a Shameless plug I'm working on a course to learn Astro at Astro course.dev So that obviously has been one of the things that's been super top of mind for me okay and it's that course aimed at like boot camp level post boot camp regular jobbing developers yeah so the expectations from from my end would be kind of a solid foundation in HTML CSS and JavaScript you don't necessarily have to have experience with a framework I think a framework experience would help something like react or angular review or whatever it is so I think that would help but not required and so it is it is a pretty like ground up approach of like some people are going to be learning what a framework does for the first time but then you'll dive into a lot of the specifics and benefits of Astro itself okay see if you can persuade me quickly I've been using Gatsby for my website which is in the same category is there a good is there a reason I should consider switching yeah there's there's actually a couple so um Astro does not ship JavaScript by default so what happens with Gatsby and nextgs the same is it's it can do statically generated content but when it sends that down to the browser it's also sending JavaScript to do rehydration and so rehydration is interactive JavaScript on the browser that can do things if you want or need it to like adding comments or loading additional comments or loading additional features or whatever so you still get the benefit of having that like that HTML that comes down but with Gatsby with other Frameworks typically you're going to have this rehydration JavaScript which takes up some amount of space and time right like I think some of us are really really picky about that and and the reality is like JavaScript can be sent to the browser relatively quickly so in some cases it's not a huge deal but by the default Astro does not send JavaScript in addition to that if you need the JavaScript you can do that and you can do it in a very selective way so you can load JavaScript in specific parts of your application and you can also load it intelligently so if I have a comment section where I want to load the comments dynamically for a blog post I can have a component for the comments that's on that page but I can tell it to not load that JavaScript unless the user actually Scrolls down there because what happens is a lot of times in websites we load a lot of JavaScript for portions of our website that never get used so you can actually intelligently kind of load in this JavaScript using Astro Islands so this is the ability to determine where you can think of islands on a web page of being interactive JavaScript and you can determine when and how to pull that JavaScript in if you need it that's interesting idea so it's like lazy loading on view based demand yeah and there's different there's different ways you can you can eagerly load it if you know it's going to be something that people are going to come down to or or it's on the the top part of the page or whatever but uh but yeah exactly okay I should have a look at that um there's a there's another one I'll throw out at you um so the way that you're able to do that interactive JavaScript if you would like is you can use existing libraries or Frameworks I won't debate the verbiage here but you can use react components you can use felt components you can use view components you can use lit components and a few other ones that are I don't have as much experience with but for me the components that I've written that I needed more JavaScript interactivity with I've used felt I love spell it's it's one of my favorites and so inside of Astro you can use kind of your favorite JavaScript library framework and take advantage of the Astro ecosystem while leveraging the existing experience that you have with those other Frameworks okay because I think um Gatsby which is my point of reference here and it's fairly highly wedded to react yes absolutely yeah wisevelt why should I consider that as my front end framework yeah svelt is much simpler for a lot of things than react so if you think about um doing a traditional form in react you you use you state and so you have to bring in react hooks to do that you have to then kind of wire up that state to the to the inputs to Define like which input that state is connected to you then have to have like an update function that says like when this input gets updated go and then update the piece of state so there's like a lot of boilerplate code to set up what is basically two-way binding of you have a piece of data if the data changes the UI changes that the UI changes the data changes Etc and so the way you do that is you just Define a variable inside of your component and that thing is now interactive so you can you can set up two-way binding with one directive on an input in spell and not have to worry about additional use state or like update functions Etc it just kind of works and it's people will tell you this and this is a big way that I would sell it as well for using a framework it's the thing that feels closest to HTML and CSS and JavaScript like vanilla JavaScript in comparison to anything else and that is really pretty beautiful are we seeing the pendulum swing back from like uh Dynamic bindings across through virtual Doms is it swinging back the other way again well we're things are switching very frequently I mentioned kind of the idea of the jam stack a few years ago being very popular and it's had a really big focus on static content and that hasn't necessarily gone away but what we realized as an ecosystem when we were doing all the statically generated content is there still really significant use cases for leveraging the server as well and so we're now in that sense swinging back to the server from a lot of different perspectives we have server-side rendered content for things that are updated more dynamically or if you think about scaling out a massive blog you're probably not on every build build going to generate 50 000 blog posts pages right like that just that would take that would make your build so much longer yeah so leveraging the server for that leveraging the server for authentication for example to prevent users from getting to a page if they're not logged in instead of loading that stuff on the client in client JavaScript where you have that like loading state every time so you load an application and and it has to take a second before it knows on the in the browser whether or not you're authenticated to view that page so you have that loading State and uh oh so going back to your question of potentially talking specifically about forms I think we're also seeing a resurgence of using the browser for what it is instead of what we changed it to be and what I mean is browsers by default handle form submissions right like I mentioned this idea and reactive doing a form submission where what we're doing is tracking all the state inside of react and then making a fetch request to our back end getting a response and updating the UI lots of Frameworks now are going back to the idea of doing traditional form submissions to the server Something Like Remix really made this popular next.js now or actually sorry at a higher level react has react server actions and so next.js is leveraging that in a beta stage right now to to have kind of your traditional form submissions like we had then used every day 10 or 15 years ago but now they're they're doing it in a more modern way to take advantage of a lot of the things that we've learned so there's definitely like additions and benefits to what we're doing but it is funny to to see how we've gone from one side to another and back and forth maybe several times and what we consider to be best practices as we get better and more opinionated along the way yeah we definitely get more opinionated hopefully we get better right yeah maybe maybe debatable about the better but okay give me one more recommendation from the JavaScript world because this is I think even more in flux than um front-end Frameworks what's the build tool we're supposed to be using right now I've been using yarn for years yeah I I've never been opinionated about this I've always used npm just because that's what I started with and and I never felt a pain point to go anywhere else so I use npm versus yarn and then from a build tool perspective there's there's a lot of things like Veet is now the the most popular thing I think Vita's built on top of vs build and they Leverage maybe go but not JavaScript behind the scenes so a lot of the build tools leading up until the last couple years in the JavaScript ecosystem were also built in JavaScript JavaScript for super performant things is not the most performant of languages that we could use so go and rust are a couple of the big options that people are using to build developer tools to emulate what we already had but much much faster which means your build times are faster your Dev environments run faster et cetera and I'll even caveat that a little bit more to the point of because I leverage Frameworks that are doing that work for me I don't care like I I don't need to know like I've done research just out of curiosity and having the free time to go and dig more into them but I don't I don't really need to know a whole lot about how Veet works or what it does or that I'm using Veet versus anything else as long as it's updated and it's doing like it's giving me the obvious benefits that other Frameworks are and Frameworks are very competitive they're iterating on how do we get faster how do we get better hot module reloading and all these things so for me a lot of my perspective is I don't care because it's going to do that stuff for me and it's going to do that stuff way better than if I try to set it all of it up myself true true but does that not naturally seduce you across to this language that's not JavaScript but seems to be doing this thing better it's it's just use case right like Russ and go or don't have don't have the popularity of JavaScript they don't have the usage so if you look at job opportunities there's a lot more job opportunities using JavaScript you can also use JavaScript to do a lot more things we talked about this earlier you can do it for front end for back-end for iot for mobile for desktop applications Etc you can't do that with go and rust and I won't over speak on what they can do because I'm not intimately familiar with them but everything that um that I'm familiar with is kind of either back-end code and or code that can run on your machine like a build process for example like we kind of talked about and so I think those are it's augments right like it changes it changes what the ecosystem looks like because the tooling is better but it doesn't change my need and or desire and enjoyment of writing JavaScript for the stuff that I do just the surrounding ecosystem gets better because those languages enable better performance that's fair in that case I have to ask you one last question yeah which is um what about typescript then what's your take on typescript a huge fan um huge fan of typescript it's actually really funny I had never written any JavaScript until about 2016. I had never really done anything web related until 2016. and so my experience up until that point was C sharp and Java so we talked about that a little bit earlier very strongly typed languages object-oriented languages that was how I was used to writing code and I started to break into JavaScript and it terrified me because you could especially at the time you could do whatever you wanted and the tooling wasn't there at the time to tell you not to you could just do it and then the browser would like it would work or it wouldn't and you would find that out relatively quickly but not as quickly as if the like IDE told you yeah and so I remember using Sublime and notepad plus plus at the time and the only intellisense that I would get was it would give me intellisense for words that I had already typed in that document so like if I created a variable and typed that word I would then get intellisense for that later on or autocomplete but I wouldn't have intellisense for the Dom apis for the backend node.js libraries and apis for npm packages there was none of that at least as far as I knew so it was basically like the Wild Wild West and now we've gotten so much better and a lot of that comes from even if you're not writing typescript yourself the things that you use on a daily basis are using typescript and so you're getting that intellisense inside of your browser or inside of your editor vs code is probably the most popular and that's what I use like you get a ton of intellisense and vs code because the things that other people did they use typescript or they Define typescript types for the things that they work with and then from a writing it yourself perspective I don't want to like underestimate the time it takes to adopt typescript for me it was easier because it was going back to things that I was used to in terms of c-sharp and Java from a strongly typed perspective yeah for other people that have only written JavaScript that that's a whole new world and so I don't want to like under sell like it's it's a learning experience it takes time to adopt you get in situations where you're spending more time debugging a typescript warning or error that you just don't understand yet up front because you haven't done that form but the benefits of that the intellisense the air catching before you run code or the warnings in the editor before you actually run the code to say hey you can't pass that property here or you can't do that with this with this object because that function doesn't exist or whatever those things are super super valuable and for me at this point anything that I do unless it's unless I'm specifically trying to do it as quick as possible for a demo or it's a different audience almost everything I do from a Content perspective and things I would build my myself are our leveraging typescript yeah nice yeah I'm probably whenever I'm in the JavaScript world I'm in this hyperscript world too yeah would you put that in front of a bootcamp audience or do you think that's too soon I would I think it's again it's all about priorities I think typescript is definitely one of those topics that's in contention like it's it's a high enough priority to to potentially be in a boot camp and then it's up to the boot camp to kind of decide out of the things we could do that that are reasonable and would be valuable which ones make the most sense and so the boot camp that I taught the second round we actually used angular and angular was one of I think the first like actually the first framework to have typescript just kind of be the default and angular is by um Google and typescript about Microsoft and so I I was going to say that Microsoft like made it that way but I don't know what made Google decide that it would be typescript by default but anyway it was typescript by default and so they actually learned typescript or some of typescript by using angular but you think about like what are all the different things that they could potentially learn do they go to backend do they learn about automated testing do they learn typescript do they learn about deeper UI things do they go deeper into Source control do they go into data structures and algorithms there's all these things so I wouldn't definitively say typescript should be it depends on the overall curriculum and the time and the strategy and that sort of stuff but definitely one of those topics that I think is big enough to be in contention to be in boot camp curriculum yeah yeah and that whole course design is a whole other topic to get up that's one thing I find most fun about developer advocacy so here's the thing I want to teach but which parts do I teach and in what order yeah but we'll have to leave that for another day because I know you have furthering duties to get back to so James thank you next time absolutely thank you for having me cheers catch you next time thank you James I'll put links to all those libraries in the show notes and I'll also put links to James's Astro course if you're interested in taking that and his YouTube channel if you want another place to subscribe to you can check those all out from the show notes we're gonna be back of course next week with another developer lending their voice to the conversation I'll tell you a little production fact about this podcast every week I look through the list of recorded um broadcast episodes and try and decide what goes next naturally and I'm thinking right now we've got a really good one about building distributed systems and implementing your own distributed consensus algorithm for fun I might go with that one just for the contrast you know this episode has been at one end of the rabbit hole that one will be right at the other end so maybe we'll do that if you want to catch that episode grab your pointers and jab at the Subscribe button if you've enjoyed this episode then jab the like button too so we know and if you know someone who's thinking about getting started in software maybe jab the share button for this one and send it to them and then go and have a lie down because that's a lot of buttons and a lot of jabbing until next time I've been your host Chris Jenkins this has been developer voices with James Q Quick thanks for listening please