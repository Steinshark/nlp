hi and welcome to this week's meeting status bus block road highlights and this week um it is not like mastering that right there it is for you um so there's been many interesting blog posts this week but in the end there has been one topic the community really has been talking about this week and that is help such as keynote at cppcon last week which also said Beacon has an article about um but of course I want to feature her status block when he has a post on it um so in this keynote he talked about if we can make C plus plus 10 times simpler and safer and so this is a sprock article about it which is relatively short it's linking to its video and usually I will not feature videos on here right but this is an exception I make because it's really important keynote about this if you want to understand this you have to watch those almost two hour long keynote which talks about his motivations to do so and it's basically he wrote a transpiler which uses a certain language which is relatively easy and at the moment only supports functions and variables and some few other things um to transport into C plus plus and to use the C plus libraries Etc that she wrote to for this to be safe his main motivation is that he wants a simple language which is easy to teach and has the right defaults and it has not like two three four or five or more ways to do something like you know the the prime um example for C plus pluses initializing or declaring a variable which you can do in various ways and he you know helps help argues that when teaching um you should have a language which is mostly free of pitfalls sets some of the defaults which are now which turned out to be wrong or which control to be not possible because we are still depending on C from uh C plus plus outs and the perspective um he gets rid of all that he is creating a new language and it's kind of an experiment to see what if we create the simpler language which you know is in C plus plus which always has been on C plus plus and this if we extract just that and give it a normal modern syntax which by the way not Everyone likes this function syntax which you see here directly um but that is what it is but at the moment maybe that changes maybe that doesn't change um I am not sure if there's like actually a syntax document on the language right now and maybe this uh you know it's just the first edition we will see um but he also mentions that it's really really important for him that this language is safe and one of the reasons is that there is a US Government directive that uh certain software things which run in a various contractors in this context they should be safe and they explicitly mentioned that using C plus plus and C is not safe and I'm not sure if this means that you can't use C plus plus and C and or you would have to you know um provide certain uh certification for your implementation of the software you deliver to the government that it's safe um and the other way is like well it's time to to see if we can make a language which transpires into C plus plus but only uses those safe idioms and can enable certain checks at runtime Etc if you need them um and it's not really an interesting experiment and um it's it's not like that he is doing this in a theoretic way and this keynote he actually uh plays with CPP front which is a working tool which he open sources on GitHub um so this is completely her's idea it's not like tied to Microsoft or something it is open source you could Fork it and you know make your own CPP to or cpv3 or mycpp language or set um and as you see here there's some he explains some of the backgrounds on his GitHub and I think that the CPU front page on GitHub is the better thing to read than the blog post I wish her would have put a bit of this into this blog post too because there's probably a lot of traffic on his blog post um but I will link to both in the description and so he has created an experimental language which can use a standard library and also some other stickers plus context I think in the functions and then we'll simply transpile that into C plus the language is based on the module system it is uh using this to then generate valid code for C plus which can be you know compiled with some normalcy compiler that is the goal um the language does not support a pre-processor okay so there are no includes in this language you can only import modules and hence if you want to use something from C plus plus in this language which is possible because he wants to kind of enable those backward compatibility and the Imports for example the the sdl here as a module which is a c plus 23 future feature and so this is like an interesting experiment which he has shown here during his keynote and you know on GitHub he goes on with that right you know this is about you know experimenting using the features of 23 and 20 in a safe environment where you have a syntax which is shorter you do not have to write as much as you would in C plus plus so in implementation of a program and cpp2 should be shorter and easier to write and faster to write and there should the language itself should be a lot easier and context-free grammar to parse so that tooling would have a lot easier and faster time to do it and also this would mean that compilation times through cpp2 would be a lot faster once you actually have a compiler which directly compiles cpp2 which would be an option to go for right now it's of course you know translates this with a transpiler into C plus and then goes for um compiling this SC plus which might not make the compilation faster right um and I usually don't want to con comment too much on those blog posts and so I've had an introduction to carbon Lang in April by planetary and I've seen Herb's keynote that was my first impression and my only impression from CPP front and cpp2 help has not dropped about this and outside of the folks you mentioned and thanks I think uh probably in a GitHub um so I do think that the idea of having a transpiler is something which I find interesting and I have been writing in my past also tools which you know generated C plus plus code I have a bit of a pass for that so it takes something in me um it is usable and I I do like the idea of carbon line uh also kind of interesting but carbon Lang from my understanding is more like an emote where it is for normal folks something where you cannot right now download carbon line and play with it right it's an idea they have a syntax and they are working on it um but they also you know kind of have heard the opinion that safety is like more you know afterthought that they want to add that later um the CPU front does it from the start Etc and then there's a wall which I overall which I don't know a lot about and I know that Dave Abraham's in somebody else's mostly the drivers here Dave is a great language designer has a lot of experience with C plus boost and Swift and other languages it probably has been involved with or has used um so it's an interesting space I did not put rust on this slide because in my opinion Russ does not belong on this slide because of us this programming language which you just can write and fully feature language right now right so it's not like that it's it's an alternative yes but it's not like something you anymore um so I see like all those languages on the slide as experimental and we have to see where it goes and probably in a year I look forward to see of you know the next keynote from herb or the next talk from her will be on CPP front again and like how he integrates uh classes with this etc etc um and the other thing as I mentioned um CPP front and cpp2 is right now mostly herbs work and he has written the code he has decided how the language should look probably got some feedback on this from other people you know how how to do things and not to fall for certain pitfalls um and I think that moving forward you would have to need to have this and this is open source it should have some guidance there need to be some Community carbon line is a bit better with the Discord and a community and guidelines and a setup of a code of conduct so um I think it's an interesting space it's a space where people can get experience with syntaxes and making a sandwich will just lay safe and maybe also how we could you know achieve something similar for C plus or like how we would be able to add features to C plus plus so how we you know ensure that features we add to C plus plus are safe um and it's an interesting space which will grow and it seems to be a trend so maybe we'll see more on this um but for now I kind of you know I am curious of herb has a capacity to follow up on this to keep working on this or if this was like you know something which will be worked on again for some time to present uh on on a various other conference that maybe you know or on FCP or next year it's we'll see um it's an interesting idea and I think it's an interesting idea to try to work out a simple language which allows you to use the full power of C plus that is definitely an intriguing idea um so let's see where this goes um and on the other hand you know it's still C plus plus um and there's a lot of articles about C plus there's an article about C plus plus 23 the state blood Trace library and some zeros training posts and our posts which we have this week so take your pick and there's a lot to read again thank you for attention