why should we learn programming the hard way I want to know about a year ago I received a mildly discouraging comment on one of my YouTube videos at the time I had been working on my indie game and game engine for about a year I made some progress but it wasn't totally obvious how far along I had come that's a really cool game that was a really cool game right there I really I I love this is a really great little yeah it's a it's a slick little puzzle no it's not portal it's a puzzle solving you it looks like you can push things all the way to the edge you can push things around uh and then you are able to push stuff out so when you hit this little laser it redirected it right here so you can get to right here my guess is then you can put the cube here here and you can like step your way down and get out to here anyways so the guy writing the comments seemed justified in what he was saying at least in some way here's what he said what's wrong with just using a commercial game engine I have a feeling you will have great great grandchildren before a game is ever done with this now I don't mean to bag on him I actually think he's coming from a fairly Common Place most of us aren't encouraged to take the harder path and so it's pretty normal for many to assume something is too difficult before ever trying it and in fact at that time my game really didn't look like much of anything it was just kind of a white square sort of bouncing around I actually do want to talk for a quick second about what he just said there which is I hear this all the time you know why would't you just you know you you can we can relate this easily to something with webdev right why don't you just use react plus whatever right whatever the soup dour is of all these things why would you ever do anything else why are you ruining your life by learning anything else just use react it's the industry standard right um you could say the same thing right Unity if you why would you use anything but unreal or Unity why would you use gdau why would you use anything else why would you build your own if you built your own you're just wasting your life are you really wasting your life I don't think you are the reason why I say that is that what is the purpose of what you're doing if you care about simply and only building a game to get it released on mobile your fastest path probably is just use an effing engine right don't dick around just use an engine but if your goal is to learn how things work maybe using an engine isn't the best idea maybe it makes no sense to do that maybe you just simply want to learn how to render stuff and move stuff around and just learn everything from the very Bippity bottom and do your own research and see how far you can get even if you never finish anything that's still okay I know people just make these weird Hardline stances I think the problem is is that some there's a group of people that think the the only good result is the completed project whereas I don't look at a completed project as the goal the goal is to learn what I'm trying to learn if I want to learn how say uh kubernetes works I don't need to complete some gigantic project to learn it maybe I just want to learn the kubernetes part and I make false four small little you know programs and just I'm playing around with that and it never goes anywhere but I learned the thing I didn't learn I didn't complete some gigantic project and I think sometimes people forget those small little you know those small little bits which is no like set your goals before you begin in and accomplish your goals it doesn't have to mean a completed project around if you were looking at it you wouldn't have thought much of it that was a cool all you ever did was pay attention to mainstream programming articles and top page Google results I think you would be pushed into a similar mindset basically anything that is mainstream in the programming world you're presented by the way this is a this I love this is such a great idea for a video game that we're seeing here this is super cool it is a very cool game it's like a Portales type game with dangers on the other side very cool I love Portales type games with a view which highly emphasizes being convenient and using tools and I feel like the opposite happened to me I started with an engine to get the feel of Game Dev as I started diving into more complex ideas I started building plugins to do the same the things the game engine couldn't do that has now led me down the path of building my engine yeah there's no one route that's the thing is that I don't think there's a singular route like if your only goal is to Simply build a game you can do your own engine you can also not you can also not right like you just have to know and you have to come in with the expectations of what's the what is the what is going to be the likely outcome if you're building completely from scratch and your own things guarantee you the likelihood of finishing goes way down the likelihood of learning goes way up and not Reinventing the wheel as much as you possibly could and this is the dominant mindset but I actually want to argue that this easy way of doing things this um always use someone else's tool mindset is actually to your own detriment and that doing the opposite of that is probably the best thing for your career and I mean that not only in terms of the financial success that you will get which you will you will actually get more money if you do things the hard way I love this advice currently this advice is amazing but I'm not going to lie to you this video game looks nuts okay he's literally playing two sets of pieces at the same time I'm getting distracted by the puzzle you know what I mean this is it's it's like this this game is super cool looking right you got you got like I mean it's mixing like Mar you know like Mario Galaxy with all with all the different up and downs or was that Mario was that Mario Galaxy or Mario Odyssey with the up and downs on it all the different Mario Marios had a lot of them and then also this Portales type thing ah there's so many cool little things I do love this advice this advice though see the okay so this advice will waste your time why does it waste your time see this is this Pro I I think this is that that mentality that you're getting in your head which is the only way to do something is to be able to complete and build projects like another YouTube clone using react or view or whatever right and that's the only thing you should be concerned about I would completely argue the opposite there is no such thing as a as wasted time if you make your goal on the outside I spent two years building a startup that ultimately went bankrupt and I lost all my money two years SP building out PHP this was 12 13 years ago two years spending 80 hours every single week working as hard as I could what did I get out of that well I went into every single interview and was one of the most qualified people to be in those interviews I was able to consistently and constantly able to get into uh what's it called every interview and be able to talk about things that they're like oh wow you know way more than just front end I was able to be that full stack kind of engineer because I had all this experience before full stack was even a term we used I was a full stack person and I failed completely but it got me all the way to Netflix I don't know but you will also be able to pursue uh more interesting creative projects and ideas that you wouldn't otherwise be able to pursue so in the course of this talk I just simply want to argue you what this mindset is and I want to actually show you what you can gain by learning how to do software the hard way after listening to this I believe you will have a totally different Outlook and you will welcome new challenges in programming that will help you grow and Advance your career and it really doesn't matter if you're just starting out or have been in software for a long time and would consider yourself a senior engineer I have benefited tremendously from the time I have spent in lower level programming not only do I view software engineering problems from a completely different perspective my investment in acquiring these difficult to attain skills has led to me getting paid more which has ultimately put me in a position where I can consider pursuing independent game development full-time I'll show you how you can build your skills in this way and fully pursue whichever path and software most interests you so why are we I do like that I like I like this thesis I like I I like this oh what was the answer hold on uh GitHub because you won't get practical uh profit unless you actually finish that game and release it you won't get a job as a Unity or unreal Dev with your own engine if the next guy let's see the next guy to you knows those engines better well here's the problem with that statement okay I understand what you're saying you're saying hey you don't get to make money unless if you finish a project you don't get to have you're you're also saying you don't get to have uh what's it called that engine job unless if if there's a guy better than you couple quick things there I think you're completely wrong not just kind of wrong I think you're objectively right if you only consider the most shallow case and I think you're completely wrong otherwise let me give you a reason why just simple looking at it you're absolutely right if you don't release the game you don't make any money but what if the point was to learn how to make games and understand the insides you work at a job where you're doing Simple Game Dev stuff and you're helping people so on the S or you're at a company and you're just you're like an you know low-level game whatever you are I don't know what I don't know what the game industry low-level term is called Junior engineer of game building uh and so you take all of your time and you learn all these fundamental concepts what's going to happen well it's very very simple when you talk to people at work they're not going to look at you nearly as Junior cuz you're going to start talking about these difficult Concepts you'll show people something you've built and they're like wow you built every last part of that how' you solve this thing how' you do this and now you can start talking about it in a really technical aspect and what's going to happen at your job sure you never released a game you made Zer doar on your game you are now talking in such a way that people actually consider you an authority in this case and guess what guess who's getting more money at their job guess who's getting more responsibility at their job guess who's getting more trust and seniority at their job all because you didn't complete a game totally worth it totally worth it and just because somebody knows game engines better than you it's not a zero sum game there's not one game engineer or one game engine Dev there's thousands tens of thousands of them all building and doing something so what do you do you just need to become good enough how do you become good enough you have to keep on trying to make yourself better let's see don't reinvent the wheel but but then why do I have uh 40,000 npm dependencies uh oh my goodness nice nice sentence TJ it's not my fault but yes I see what you're saying don't reinvent the wheel but also do you really want to use all of nod's packages just to get a just to do an HTP request probably not there's simple ways to do this um anyways it's just something to think about which is the goal isn't always to complete the goal isn't to directly make money off the thing there are other ways that you get stuff out of something right it's not this this idea that that that the result is black and white finish make money don't finish lose money and it's bad no there's a middle ground I lost all my money all of it making my startup I got a job at Netflix out of it it was it bad no right failure is growth in some sense yes I mean there's failure that's just failure you know realistically there's failure that's failure and then there's failure that's really great invent the wheel what's wrong with software in the way that it's currently built this is the first objection you will hear whenever you tell someone you were writing a game mentioned from scratch if you're doing any kind of generic tool like a compiler anything that is perceived to be a bigger ambitious project this is usually the first thing you will hear indeed this is the just don't write your compiler in JavaScript please For the Love of All Things good and great and holy stop writing tools in JavaScript question that was asked of me why do this couldn't you save time by using an existing framework and in many ways it's difficult to argue with a statement like this because it's true you will usually save time in the short term by using an existing tool or framework that said I think an argument like this Falls flat in a few and I think it's because it presupposes that you have the same goals as the person asking the question I want to frame this question in a slightly different way imagine asking a professional MMA fighter a similar question why do this why do you think training to punch others with your bare hands is better than firing a rifle or having a drone carry out a strike why lift weights when you can use your car to haul things around town why ride your mountain bike when you can drive anywhere you want to go why hold on just one second hold on just one second okay we're back again sorry small Interruption let's go cook your own kns when you can just order takeout all of these save time and accomplish what is assumed to be the goal and that's what I want to get at what is this assumed goal which is buried inside of the question I believe the question assumes your goal is to get something to Market as quickly as possible to spend the least possible amount of time making your gamew product under certain circumstances this goal can make a lot of sense if you are employed by someone else and they're paying you to get something rough out on the market as soon as you possibly can saving time is your number one priority you really don't have much uh leverage or or or flexibility there but people don't lift weights go mountain biking or train in martial arts because they're just trying to save time people do these things because they are valuable in and of themselves and because people enjoy pushing their own limits people challenge themselves because they like to get smarter faster and stronger if your only goal in software is to make money I think you'll end up feeling pretty Hollow after a while you'll eventually I do agree with this statement I do completely agree with the statement is that if you only have a singular goal it is very like a singular goal of just making money even though there is definitely a uh there is definitely complete completely reasonable goal of making money right but there's also a you know if the only goal is that it can be you know it can be extremely unfulfilling it can be extremely unfulfilling a small obviously everybody wants you know everybody wants a good life everyone wants to be a be able to make money but you know there comes a point where making more money doesn't make as big of a difference in your life and if your if your hope and your goal is like oh once I just get to this level I can finally be happy and then you get to that level and then you're like o maybe it's actually this level that finally makes me happy you will you're going to soon very soon enter into the worst place in the world which is the call the saac of stupidity right like we all we've all been in the culdesac of stupidity from time in time right uh the culdesac of being of course where you think that the thing that's going to make you happy and you finally achieve it and you're not happy so your I your thought is well I just simply need more of that thing and then I'll be happy that's the call the sack of stupidity right once you hit there you're like dang it I'm not happy maybe more will make it happy you know what I mean and it's just not more money mo problems uh but I mean at the end of the day there's people that aren't making any money and making money is most certainly a good first step into just achieving some general goodness right um let's say you feel you feel nothing when you install that TV and you know it is it no expectations no disappointment H you should have some expectations in life come on arrive at a place where you don't feel like you are challenging yourself properly like there's no forward momentum in your life even though you're making gobs of money challenge makes life interesting and worthwhile we Thrive when we go past our limits and learn new things doing things the hard way makes you realize what's possible for you it opens up New Horizons after challenging myself with with the prospect of building a game engine I'm surprisingly not against using libraries or third party code the only thing that has changed is the way I view using those libraries I have a better idea of what I am looking for in a library and I know which sorts of libraries will make me less productive it's valuable to program the hard way because it's the only way you can truly learn and grow it's supposed to take lots of time because that's how learning feels you aren't doing it for a quick win in the present you're doing it to become a more skillful person for the long run of your entire career how many I feel like that's kind you know that's the similar piece of advice that I give when it comes to if you want to be in a different position than you are in now you train for the position where you want to be in you don't train for the position that you're currently in so if you are a react engineer as some people call themselves they say the stupidest phrase in the universe I learned react before I learned JavaScript um if you're that person now and you want to be somewhere else train for that position somewhere else do your day job in whatever you do your day job in and train for where you want to be not where you're at many times have you felt totally stuck in some programming problem you're trying to solve often times the character of building an app or a game is such that you go through one big obstacle after another when you're stuck in the thick of solving a difficult programming problem it can oftentimes feel like everything hinges on your ability to get past it indeed this has happened throughout the development of my own game I got stuck figuring out how to use the GPU to draw colored squares onto the screen this week I got stuck working on an audio mixer based on a 2 second circular audio buffer on the Mac platform when you're stuck it seems like everything is going to take so much more time than it really does but once you're pass the obstacle it's surprising how quickly the various remaining pieces snap together this certainly happened to me recently I hired an artist to do an aesthetic overhaul of my games world and boy oh boy did he deliver he gave me this huge 200 tile spread sheeet and I had to somehow incorporate all of this new art into my game interestingly the hardest part of all of it was writing an algorithm to load the PNG file and to sample into the various tile and player character textures once I wrote that code the rest was smooth sailing and I had new graphics in the game after about 2 weeks of work the hard way is only hard at the very outset once you get past those initial obstacles you will be surprised with how productive you can become because I know my game engine inside and out it was very easy to integrate the new graphics into it once I had them loaded into memory I didn't have to fight with that is fair that is fair even even if you're even if what you build is less complete than anything else the full knowledge of its insides and outsides does give you some sort of competitive advantage that is different than simply just having some understanding of just like little bits of the outside I'm not saying it's always better I'm not saying it's the way to go I'm not saying that it's scales right it certainly does not scale because then when you hire somebody they have to learn your version of the thing right and so it's not always the best way to go but there is definitely something to that that is very true luckily the game by the way in the background keeps repeating itself so I've lo I I no longer feel uh I I can now listen to him much much better I can't wait for the prime gen to write about 25% of the game engine on stream oh dude it's going to be the best 25% you've ever seen with any third party libraries with closed source code I can't read often times in life you will struggle early on in order to reap rewards later that is the philosophy of programming the hard way struggle now so you can build the skills necessary to do great work and become even more productive later on so at this point you're probably following along and thinking okay Ted that's great and all but I don't ever get any time to do any of this sort of stuff in my job why would this be valuable to me in a career where we never touch any of this lower level stuff yes and I have one word for you please that word is confidence an uncanny thing happens when you come back for air after tangling with a sea monster or any difficult problem you become more confident in your own abilities things which used to seem scary to you no longer do and this is reflected in so many aspects of the way you carry yourself in the world I'll draw an analogy from snowboarding one of my favorite Pursuits before I got into snowboarding I didn't quite carry myself with the same degree of confidence it's kind of difficult to describe but it's like I was less physical in some way I wouldn't have been willing to engage in a fight or even know what to do if I got into a situation like that now I'm not saying I want to get into a fight or in any way interested in that but before snowboarding I didn't have a way to understand how I might interact in a seriously dangerous situation and then for several years I did nothing but snowboarding and I intentionally put myself into some pretty hairy situations I've crashed on all parts of my body sustained some minor concussions witnessed my blood filling with adrenaline and my heart racing I faced my fears and walked away from it I've done a few not worthy things but mostly had a good time and made some lifelong friends I can say without hesitation that snowboarding has made me a more confident person it changed me in a deep and irreversible way because of snowboarding I'm more situationally aware I have a sharper sense of how things work physically I carry myself differently I have experienced a similar thing with lower level programming after wrestling with writing a custom audio mixer I can more confidently speak about audio in apps and games this confidence immediately comes across when I'm talking to other people pre-at clearly pre-at that's what I'm talking about right like that's literally what I'm talking about is by doing your own thing when you talk to other people it makes an incredible difference difference right cuz you're just able to talk about things that only people who have done it there's like this special ring that you got to get a step into and you'll you'll notice that when you do this is that as you do these things on your own and you're talking to somebody else who's also done it you get this the Inner Circle effect you're like oh you're a part of the inner circle come on in let's talk about this thing we're doing right and all a sudden people are bouncing ideas off of you you want to guess who's getting that next position when it opens up on the team the person that they talk to with problems and all that or some new person off the street guarantee it won't be you if they never talk to you guarantee it will be you if you're always talking to them if you're always able to be a part of stuff it's like so simple to do how do you think I'm on the team I'm on pre-at often times it's like I'm having a totally different conversation about the topic because I now view it from a deeper level you can't fake confidence like this the only way to get it is to wrestle some sea monsters and there's another one wonderful thing about I love being a seaan doing some sea monster wrestling it is a predictor of long-term financial success if you are confident in the way you speak about your domain of expertise people will want to hire you they will pay you more because they know you've got a greater chance of getting them to where they want to go I have no doubt that my experience in lower level game engine programming is a reason I was able to keep one of my more lucrative software Contracting gigs longer than many of the other people on that team even though it didn't seem like it at the time wrestling that Beast has made me more Wealthy by making me more confident in my abilities confident people make more money tackling hard problems makes you more confident therefore programming the hard way makes you rich even if it doesn't seem like it at first so okay I can't make that last guarantee like I totally I I I get where he's going with that situation but I cannot make that last statement 100% true uh but hey TJ TJ you started out in college contributing to neovim not knowing what to do you didn't even know how git works and you started to go there and you started to do that now you work at source graph where you work on language stuff right like this is a direct application of exactly that which is that you figured out doing something for free and really not necessarily worth it you know in the current sense it opened up and made it so that you were able to do that I 100% I think my journey with neovim stuff has allowed me to make two to four times as much money as I would have been otherwise it's real it's real talk right this is great it's great advice you've convinced me where do I start how can I do what you do this I would advise you to pick anything you don't understand deeply enough and dive deeper into it maybe you've been making iPhone apps for quite some time and you've been relying on Frameworks like UI kit or AV Foundation maybe you made a game with Sprite kit but want to dive deeper and understand how Sprite kit does its rendering using metal take anything you've worked on before and try to do something similar but without using a library or using libraries very sparsely let's take my game engine as an example earlier on I tried to make games with apple spray kit I found it fairly frustrating due to the lack of control you have and I wanted to make something better that's how I got introduced to handmade hero a YouTube video series where Casey miror Casey Casey Casey love Casey tackles the ambitious project of building a game and game engine from scratch Casey taught me the basics of lower level game engine design and I eventually learned how Metal Works I now have a game which uses metal as its renderer on the Mac platform and a game engine which could be the foundation of something like spray kit if I ever wanted to make something like that I took on a fairly ambitious project but you could start with some smaller goals if you wanted to here's an easy one if you have been using a client app for git Source control try learning how to use git from the command line it's a small thing you can do that will give you deeper knowledge of how git Source control works and learning it will make you way more confident when dealing with Source control problems on your own team as a result you will be the go-to gal or guy who can wrestle with complicated and hairy Source control problems when the need arises and your value will almost certainly be known when it comes time for the person who controls the very simple very good advice all this is really good you know I I typically never give more advice than build what you want to build uh I'm always kind of worried about giving you like specific situational stuff but for me it's it always comes down to the to the thing which is you got to find that intersection between what you're interested in and what you don't have knowledge in so it's not just about building a past project but redoing it in some way so where you use less libraries but it's about making sure that you also have that position that you're excited about because you need to get far enough to gain that knowledge and sometimes that does look like finishing a project purse strings to decide who to keep who to promote and who to cut you won't be among those who get cut you will be among those who get promoted because you can solve problems in ways others simply can't you don't really know what muscles you can build until you try it is it is making me want to build games it every single time I see games I want to build games and it is a certain problem because I know I will never finish it try to build them as it turns out the guy who wrote that YouTube comment was wrong I have a game that isn't too far from being shippable and I don't yet have great grandchildren I'm very much alive and and still quite young better yet I now have an improved skill set I can use to tackle even more ambitious projects I have my own game engine and code I can repurpose for the next thing muscles get weak if you don't use them and it's the same thing with programming skills doing things the hard way gets your mind into shape and It prepares you to do rewarding and challenging deep work you don't do it because it pays in the short term you do it because it has long-lasting benefits try programming the hard way just a small amount of time invested could make you more confident in your abilities confidence makes you more employable which increases your pay I can say with zero hesitation that the time I have invested has been worthwhile and it is responsible for taking me as far as I've gotten in my career I wish you all the best with your struggles and sea monster slaying if you have a story to share about overcoming obstacles and programming just leave it below I'd love to read about it I do like that the next video suggested is why you shouldn't make a game engine we just got done listening to this whole time about why you should next video why you shouldn't why you should not do this at all dude first off thumbs up great great video Theodore Ben Dixon you're that Ben Dixon so good uh you got the Subscribe appreciate that very awesome that was a great video and I just wish more people were willing to do that I think I think one thing that ends up happening a lot especially in our maybe maybe you Zoomers have this problem the worst which is learned helplessness there's like this this feeling like you can't do it or you're unable to do it or only smart people do this or some some series of excuses that exist where you are the center of your universe and you only focus on yourself and yourself isn't able to do it and only you know and so it's like don't have learned helplessness right fight it you are much much more likely and more capable than you probably realize most people are now there are some people that that that maybe aren't capable uh but you're probably not one of them statistically speaking if you know how to program you're probably not that person you probably are a person that is capable in doing it so give it a shot right give it a shot at least once unlearned helplessness yeah uh are you talking about imposter syndrome impostor syndrome is a part of this all uh I'm low-key an idiot if you know how to program you're not an idiot honestly it just like I mean I know you're joking but or you're self-deprecating uh you're just not you know the name is I want to make a game engine agent oh my goodness I want to so bad