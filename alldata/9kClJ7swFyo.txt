okay today I have with me Melky mky Dev mky can you tell me a little bit about yourself I invite I obviously invited you on for the go developer survey so you must know a thing or two about go yeah so uh the name is the Milky Dev uh I write go professionally here at twitch and Netflix by the way I work what's your go 100 meter time my 100 meter time no your go 100 meter time if you're such a professional I can't tell you that that's secret that's secret only only the select people only the inner go crew knows shout out Anthony GG shout out the real Go developers we don't really expose that kind of information to uh The Outsiders you know the people who write other languages your purists uh but yeah I write a little bit of go uh I've been writing a professional for like three years and uh I really love you know what you say it's it's a simple language but there's a lot that you can go deep on and I love going deep I love going inside and and then figuring out where to do so go has been great I learned a lot from go learned a lot of good principles and I'm still learning and I'm here that's good to you actually inspired me quite a bit so mky m is one of the few Engineers that I think goes deeper faster than most people uh but uh one of the your three years of experience is worst six years of experience somewhere for someone else is how I feel cuz one thing that really caught my eye and something that I now started doing in fact I just did it with the 100g go mistakes when I went to the DMV brought a book with me he gave me the idea that when you go and you have to wait in line or whatever just bring your book with you and you've been reading the go like uh what is it called effective go like when you're just traveling when you're just doing something you bring it along with you and you just pop it up and read it while sitting in line whatever you're doing and I realized like that is such a good idea that I started doing it myself so I just walk around anytime I have to wait I have a 100 go mistakes with me just reading through yeah that always a shout out twitchcon uh you just saw the book so every time I go anywhere for long distance I just bring a te I bring one like I have a stack of like computer science go programming textbooks behind me um and I always have one on me like in my backpack now there a go book and anytime I go anywhere even if I don't have a computer on me or don't even have like a notebook or a pen but I typically do I just read it I just consume that knowledge even if I've seen it a thousand times I just read it over I read it out loud um I'm always like just constantly trying to shove information in in my tiny little brain so by the way the reading out loud is crazy you're saying in line and then the go pointer I literally read out loud yeah okay I literally read my dad taught me this it's uh it's how I got rid of my stutter if you just read out loud it helps you tremendously and your brain absorbs it 100 times better I don't care what people say I'm going to read my computer science textbooks out loud in the DMV in the grocery store wherever it is you'll hear me talking and reading goat awesome all right so the Mr go man right here let's talk about the go developer survey results 2024 H1 okay H1 I don't I honestly I think that stands for Halo one not really sure what that stands for uh this post shares the results of our most recent developer uh go developer survey conducted in January and February 2024 along with capturing sentiments and challenges around using go and go tooling our primary focus areas for this survey were about how developers are starting to use go or other languages for AI related use cases and uh particular changes for those who are learning go or looking to expand their go skill set we recruited participants from the go blog and through randomized prompts in VSCO go plugin don't like that that that last one sounds a little weird but we're going to just we're just going to let it go this is why I use neovim kind of strange okay yep okay anyways uh this year with the help of jet brains we also in uh included a randomized survey prompt in the goand IDE allowing us to recruit a more representative sample of go developers we received a total of 6,224 responses a huge thank you to all those who contributed in make uh to making this possible all right highlights once you once have some meat we'll do some we'll do some discussion developer sentiment remains high with 93% of respondents expressing satisfaction with go over the past year the majority of respondents 80% say they trust the go team to do what's best for developers like themselves when maintaining an evolving the language do you feel the same way I actually think the go team does a great job uh All Things Considered like I think they do a really wonderful job there's certain things where I think like why haven't they look I I have a lot of trust in like Rob Pike and the team there um so if they haven't implemented something that the community is wed there must be a good reason for it that's kind of what I subscribe to and overall like I think you agree I think the latest we'll say major in quotation release of go have been very good right they've really pushed the language forward to to a more modern uh and approachable time so I've been happy with them yeah yeah yeah at this point when I used to use go anytime I thought I needed something I was like oh I have to go implement it now I go I know this exists somewhere in the standard how do I copy a map and there it is map map slices they've all implemented those even like the basic HTP router now it's like it gives you almost everything that these former uh Frameworks like Chi Jin offered and now the standard Library just say like hey you don't really need those like they're great they have a lot of like Q like quality of life features but you can just use a stand library for the majority of your things and so they emphasize that yeah for those that don't know uh they they added uh IDs right so you can like fuon ID and it'll actually parse that out which is usually been a major framework kind of thing that's why everyone always used a framework now that's just like standard lip you can now do slugs or whatever they call whatever the named named parts of a URL yeah URL is it's pretty impressive all right among surveyed respondents who built AI powered applications and services there is a shared sense that go is a strong platform for running these types of applications in production for example a majority of respondents working with AI powered applications already use go or would like to migrate to go for their AI powered workloads and the most serious challenges developers encountered are related to the the library and documentation ecosystems rather than the core language and runtimes that said the most commonly documented paths for getting started are currently python Centric resulting in many organizations starting AI powered work in Python before moving to a more production ready language the word workload makes me laugh I don't know why I think it's the way you say it but I'm really aggressive when I say it um what you're you're an ml engineer though how do you feel about this because because first off I mean it is kind of a crazy phrase they say here a more production ready language than python like python has been around forever and it's specifically really good in the data Sciences in the ml land uh are they talking about maybe they're talking more on the op side which is kind of what you do too right sure yeah I definitely think so I know a lot of people I just want to say like python is the number one language if you're going to actually go ahead and like build a model even for certain like ETL things things like uh airflow or like any of Apache spark like python is King in that domain right so I don't think what they're saying here is like how do you can build models using go because I just don't think that ecosystem gives you enough tools that even make sense python has like numpy pandas all these like sidekit tool that just like dominate that space and that's fine but I think when it comes to like the mlops and the kind of starting the bridge of cloud infra go is go is ultimately the best because you need like stagemaker endpoints you need to deploy this code you need to like run the pipelines where you going to get your job like you know your data your mapping tables and I think go is just they go very well together for that purpose go orchestrates everything needed to supply the data how to run the service how to get inferences while python does more of the granular like ml more machine learning uh applied science level stuff all right all right I like that uh the most common kinds of AI services respondents are building including summarization tools text generation tools and chat Bots respon responses suggest that many of these use cases are internal facing such as chat Bots trained upon the organization's internal documentation intended to answer employee questions I actually really like that use case for AI I'm actually very excited about that uh we hypothesize that organizations are uh intentionally starting with internal use cases to develop in-house expertise with llms while avoiding uh potential public embarrassment when AI powered agents behave unexpectedly that's I don't know how I really have so the whole llm thing like so yes you said you know I work in ml but I'm actually like I've never used any AI tool like I use uh Chad GPT uh but I've never used co-pilot I've never like explored any other llms like Claud anything like that because I'm kind of like I think we're at this period where there's a lot of unknowns in this domain you know like who's going to be what's going to be the best LM there's so many different companies like Devon screw Devon you know nobody likon lik Deon right no one likes Deon I don't like co-pilot because I don't like things being written in my IDE if I'm not writing it I don't like it I want to I want to type it out or at least do control V on my editor at least so this whole like llm stuff like I actually think I'm not like I'm kind of out of the loop I'm just like all right Chad GPT ja Chad gity how do I do this cool and I go on if a Chad gity can't handle this then I have to go like you know barebone stack Overflow and figure it out myself but that's like that's my presence in the llm space I keep it old school baby I haven't I haven't explored much like Claude or Gemini I mean I'd love to have some good oldfashioned black vikings be generated by Gemini but I you know I don't have that opportunity right now uh but like I I've done a lot of jippy and a lot of co-pilot and so I I actually like the idea because especially like working or today's my last day technically at Netflix uh the amount of times where it's just like I have to find an answer and it's just so hard to find the right place to even start with the documentation I usually have to try to find the right chat room to ask where the right set of docs are to even know where to go and so it's like that's always been such a long process so to be able to just like ask like hey where do I read on documentation can you give me a quick uh exert on how to deploy an endpoint locally oh you should use this and this and this and then this is how you do this and this and this and like that would be really really nice to just have something like that even if it hallucinates at least it might lead me with hallucinating the wrong a apis but like the right tools to even ask the question cuz you know Netflix has gotten so big it used to be such a small company now it's huge there's that tribal knowledge certain teams have right like not a lot of teams update their read me or their wikis or whatever that's just a fact like people think that's how it is cuz like these successful companies are obviously successful so everything must be like Tip Top not the case if you're going to explore service for the first time and that service is very Niche and granular more likely than not there's going to be some tribal knowledge that the senior engineer or techly knows and then be like okay yeah do you have like 15 minutes to on a huddle I got to show these commands I pasted them on a sticky note on my computer I need to paste these to you use them and you have to use this key and you're like okay like there's no way you can find this information anywhere else besides talking it's the wor and the guy's always going to tell you to download some crazy named tool be like all right you got to download Paladin and the Paladin doesn't have a help menu but if you look at this file it actually contains all the codes in Paladin yeah yeah well you you have to make sure you can't run this while we have the Warlock server running cuz they contradict we have we built a patch called Druid the inter is working on it but I just want to let you know that a lot that's a common mistake of and I'm like bro please just please this is not what I I just want my jur tickets done man I don't know any of this stuff yeah that's funny it's actually really I mean that is that is people that think Fang are these big companies are some like Bastion of great engineering it's just a Bastion of people creating a bunch of tools with no documentation it's wild all right Paladin for the win Paladin a lack of time or opportunities was the most common sighted challenge for respondents for reaching their go related learning goals suggesting that language learning is difficult to prioritize without a specific goal or business case in mind I find this to actually be a crazy wild take in the sense that I constantly have problems I want to solve yep I'm always curious about you know I'm not trying to call these people vacuous but how do you program for more than any time and go gosh I want that solved yeah right like how does that not just like hit you constantly don't you have a lot of people asking you like hey like I I don't have any project ideas or like I have no ideas ever and it's like I think I'm I think you and I relate to this it's like if I had more hours and less responsibilities I would never leave my keyboard because I'd always be building something new I literally have a notebook I'm working on a side project typing it out something like I got a fart in my brain and it's like you should build this and I'm like I got to write this fart down so I write the fart on a notebook and I'm like to leave that fart until I like have time to go work on this fart but it's like I never run out of brain farts never they're just like they constantly happen yeah exactly so I don't know I can't I quit writing things down or or putting things down because I have so many of them it's like ah I'll just REM whatever one I remember is the one I'm GNA work on like because at this point there's just too much there's just too much I write it down I actually have in my Discord a conversation with myself where I write them my ideas I use myself as like a like a not not I'm like hey future milky do this that's a pretty good idea all right the next most common challenge was uh was in learning new best practices Concepts and idioms that are particular to go when coming from other language systems yeah that that seems like a pretty reasonable one I'm just starting to try to figure these things out how to do things in the go way you know I I'm I'm not good at it yet uh all right uh developer sentiment overall satisfaction remains high in the survey with 93% of respondents saying that they were somewhat or very satisfied with go during the last year this isn't surprising considering our audience is those who voluntarily taken our survey yeah a little bit little bit of selection by us here yo this is it we expected this we gave you a prompt in your Editor to take a survey and you said yes you're already a unique person to begin with but even among those who were randomly sampled from both vs code and goand we see uh we still see comparable rates of satisfaction although the exact percentages fluctuat slightly from survey to survey we do not see any statistical uh significant differences from 2023 H2 when that's Halo 2 reference uh when the satisfaction rate was 90% let's see overall so most people are pretty happy with Go I mean yeah I like I think they call it out first of all there's not a lot of people I want to call out there's not a lot of people who responded 6,224 responses like that's not a lot of people right well the end right here is saying 5,676 who oh but yeah I think that you don't have to answer every question so they probably put like various like levels of that yeah so that's not a lot of people especially like the whole prompting like if they're using Goen like OB like no surprise you're going to like go if you're using goand um but I've always felt that if you are going to embra like you're you're a perfect example once you Embrace go once you use go you're like this is actually really nice this is like great and I like it sure there's a few like things I wish they could do better here and there but overall like I think satisfaction is is expected when you can go for an extended period of time interesting trust this year we introduced a new metric for measuring developer trust this was an experimental question and its wording may change over time as we learn more about how respondents interpret it because this is the first time we've asked the question we don't have any previous years to give context for our results we found that 80% of respondents somewhat or strongly agree that they trust the go team to do what's best for the users like them respondents with five or more years of experience with go tended to agree more 83% than those with less than 2 years of experience 77% this could uh reflect survivorship by in uh in that those who trust go team more are more likely to continue to use go or may reflect how they trust uh how trust is calibrated over time I have a hot take on this okay hot take me I think this only matters once the developer team makes a mistake I think no one actually puts a lot of thought into this question of trust you always you kind of have this idea that they're going to maintain and do the best job of go until they don't and the best example is like the rust Foundation situation right everyone was really enjoying Russ it was good it still is but the Russ Foundation kind of made a lot of oopsy daisies and I think that costed the trust and so now it's not more so people still trust the rust Foundation the rust team but it's more people don't trust them so I think the Highlight is like until they make an oopsy mistake uh this is kind of like a whatever uh question in my opinion yeah no that that's actually a pretty fair take uh in the sense that uh when a language has been around long enough to have a good tool set everything seems to be work people seem generally happy there's a lot of learning resources there's at least in my perspective in my head it's very blackbox there's some entity that just takes care of everything and everything just seems to be going uh you know swimmingly but the moment that something stops going swimmingly is when people start caring again exactly and so they go oh well can we trust these things and all that that that's pretty standard though with most with most stuff which is that anytime you have anytime you have any sort of disruption or anomaly within management people become questioning whether it's good or bad not even to say it's actually good or bad nor the average person does that's maybe a very Twitter perspective agreed all right Community satisfaction in the last year almost a third of the respondents 32% said they were uh they participated in go developer Community either online or at in-person events more experienced go developers developers were more likely to have participated in a community event and were more satisfied with community events overall although we can't draw uh casual conclusions caal causal conclusions from this data we did see a positive correlation between Community satisfaction and overall satisfaction with go it could be that participating in the go Community increases satisfaction through increased social interaction or technical support in general we also found that respondents with less experience were less likely to have participated in the events in the last year this may mean they haven't discovered events or had the opportunity yet to be involved this makes sense yeah like if you're going to be first of all being a programmer fighting alline communities I think everyone GRE is a great experience why we like streamings you know streams like yourself who program and then if you're going to write go write find other go developers it's great I actually have a question would you be interested in you know how you and te have the neim conference that you guys host yeah yeah I want to do one I was thinking should we do one from like you know get Anthony GG get all these people who write go on stream keybind to just talk about go from like a streaming perspective like a Content creation perspective right because as gopher con uh but maybe we can do one that's selective to like the online community people building stuff you know to a live audience could be interesting I I mean I'm always down to do do events I like events I like these ideas I'm always in for it good good good good this is this is interesting though because my my big takeaway from this is that if you're already Mo like for me to go to a specific language event I have to be pretty bought in on the language so I know they say there's no causal conclusion to draw from like people people who go to events versus overall satisfaction I'm sure it's pretty easy to just reason in your head like I wouldn't go to Pyon it's just like it's just like I'm not going to go to a python conference and go learn about python because I don't really like I don't I just don't use Python it's just not something it's not a daily driver it's not something I'm interested in I'm really not going to be going to JSC con because I don't really like JavaScript even though I've done tons of it right like would I go to a goon if there was a if there was goer con near me and I could go I I'd be very very likely to go right do you think it's also like so one thing I didn't really understand they said people with less experience are less likely to go to these events do you think though these events could also be like networking opportunities and opportunities for people to like maybe find a job in that language or like you know meet a recruiter at these events like I think yeah if I'm you know that's a pretty enticing reason to go to one of these events if I'm someone who's like you know in the job market maybe new maybe fresh out of school I would actually try to be pushing to go to these more so than not that's actually probably just excellent advice for someone that's new is just go to any conference you can and use it as a networking opportunity I think you're yeah probably just a good move in general all right how in general how satisfied are you with go developer communities most people are very satisfied to somewhat satisfied I you know I I I wonder how you know I I'm always curious how they measure this U I literally have no idea anything about go conferences like again I don't look things up I'm not getting engaged in that uh there's only 3,128 uh people that answered this but okay so people somewhat like it seems like people are pretty excited okay the biggest challeng disc Community sorry do you think a Discord Community counts as like a one of these go communities like if you join Discord and it's like a go a strong go back end do you think that counts like a go Community yeah I don't see why why it wouldn't yep I I just think that it's probably not really up here right because it's like oh I guess online community and chat room so I guess yeah that is number one so yeah makes sense yep um all right for several years uh this survey has asked participants about their biggest challenge when using go this has always been in the form of an open text box text box and has elicited a wide variety of responses in this cycle we introduced a closed form of the question where we provided the most common write-in responses from prior years respondents were randomly shown either in open or closed forms of the question the closed form help us validate how we've historically interpreted these interpreted these responses while also increasing the number of go developers we hear from this year particip let's see this year participants who saw the close form were 2.5x more likely to answer than those who saw the open form that's not surprising at all right like I don't want to have to like write an essay to tell you what what I think about things uh this higher number of responses Narrows our margin of error and increases our confidence when interpreting survey results in the closed form only 8% of respondents selected other which suggests we capture the majority of common challenges with our responses choices uh interestingly 133% of responds said they don't face any challenges using go in the open text version of this question only 2% of the respondents gave this response the top responses in the closed Forum were learning how to write go effectively and verbosity of error handling this matches what we saw in open text form where 11% of responses mentioned learning go learning best practices or issues with documentation as their biggest challenges and another 11% mentioning error handling uh my guess is that what's your biggest challenge you face with go today and it's an open text box if you people who don't have a challenge won't write anything down so so the fact that other or not having a problem like whatever where is that at let's see I don't face any challenges like this this isn't answering the question yep right so it's probably not surprising at all you'd see this thing greatly other but there's an other section down there too the other just means it's none of these right generics are too limited you couldn't it doesn't fit in any of these tools meaning that they've captured most people's problems that have answered in here but my guess I mean yeah I was going to say what what's the biggest challenge you face using go like you've been using it more and more what's something that you faced is it here is it something else uh for me it's the hidden knowledge of go uh I I use this phrase hidden knowledge quite a bit which means that like to today I discovered that I had a bug in how I'm handling my TCP uh server so when I disconnect uh and I try to do something with the server again it will actually crash for used connection and I'm not exactly sure how that's happening or what I'm doing incorrectly and so for me it's like that hidden knowledge of knowing how to set up things and to do it the go way so that you don't run into these errors and so it's just like I know how a TCP server works I can explain how these things work I can explain the connections and all that but I don't know how to do it well in go and that's just experiential I don't know how to express myself so my biggest problem right now is just that hidden knowledge just writing enough go to know how to write it better I I I actually think my my problem is like how to write go effectively right like because I think it's like such a like it's I think people subscribe to like the Simplicity of go too much because away one dayi you'll be write s us go but the way the original team like what robs Pike's way like ver vision of using go to make it as effective as possible that I don't think translated Through The Years effectively and I think now Rob Pike is doing a like not now but like the last X years he's been doing all these conference explaining different topics to try to subscribe to that like especially with concurrency modeling um but even now like I that's why I'm so like just motivated to keep doing and learning about the depth of go because it is like a bridge to write go effectively like there's something that I struggle with all the time yeah and I write a lot of go but even still there's some things I'm like oh wait like that's how you like that's actually passed by reference or things like that like they keep getting me and I think that's a very very critical point in in like getting really really proficient with go yeah that's why yeah I call that the hidden knowledge right right it's just like you just really have to build it it just takes so long to actually get it cuz you could read a book that tells you every last fact about go but even if you know every last fact about go it does not mean you write it effectively a really good resource is go is it really pretty good yeah is actually the one who recommended to me I was I was asking him this exact same question like a year ago I'm like te like I think I'm plateauing my go knowledge like what like I want but I know I'm not like I know my skills are not where they should be but like my knowledge has plateaued like can you give me something that will allow me to level up and he's like go read Effective go and I did and again it gave me the opportunity opportunity to level up it it showcased certain things certain paradigms certain idms uh that go has that I'm like oh like I've been doing this thing wrong or I've been doing it incorrectly so okay effective go not Beyond effective go just effective go uh I have Beyond effective go I don't actually have effective go I should get that one too uh as far as someone said how is the amount of hidden knowledge in go compared to other languages I I think it's pretty much all the same in every language uh it's just that rust has more rust just simply has a larger surface area for you to learn each one of the items but to apply it yeah you could I mean you could argue that it has more because you have to know when to apply each one and how to apply it effectively but all at the same time it's just like hidden knowledge just takes a long time that's exper I call Hidden knowledge experience right it just takes years to be able to G you know to gain that stuff and so I'm not ABS I don't think there's I don't know if anyone is technically more complicated than another another uh I don't know I don't know if that's that's true I think to become a master at anything it takes a really long time absolutely and you to explore different things like one say to that Prime is like if you're doing the same thing for like three years you may become a master at like that like TCP servers are handling them right for example but like there's so many things that you can build with go or any language right not just go so if you're not like actually trying to build different things different types of software using that language you're you're kind of a L not uh exploring it to its fullest capabilities right because you will also yeah learn what the limitations are of that language when you do different things okay well that's just not the right use of that language I should probably explore a different one agreed all right what if anything is the biggest challenge you face with uh using go today and so learning curve best practices docs error handling difference uh from more familiar languages ecosystems missing or mature libraries or Frameworks tooling type systems type systems is an interesting one I'm not sure if you want a more expressive type system I go back and forth on this one cuz I love rust I like the type system but there is something about like there's something about Simplicity that is also good like I do want some types because I want to be able to have a heterogeneous list that I can adjs on decode like that's what I want but that's like impossible with go it's extremely difficult to do with go and so it's like a huge pain in the ass to do without just doing interfaces and doing that annoying map type you know searching into things to be able to get stuff out and so it's like I want that real bad but at the same time I also recognize that that is a two-edged sword the amount of times that I'm doing Json decoding of heterogeneous lists is a very fractionally small amount of time versus the amount of times that I'm just building stuff and so to have that availability of an very expressive type system may may may not be the way I actually want I always go back and forth on this one yeah my my take is I actually pref I love um Ghost types because I think it's everything I need to to write like effective code and like safe code um I feel with typescript and I know this going to be also maybe a hot take I'm actually turned off by typescripts type system because I feel like I am putting 50% of my time writing the software that I want and then the other 50% of the time is writing the type system to satisfy the type constraints of the software and buildings in typescript right and like I don't like putting that much time into my type safety I like where going approaches like where you basically Define the type at a contract level and again with the stru you can also do you know Define your type use a stru as a typees uh in itself but you know for me it gives me the amount of time that's appropriate to to to use for my type system and focus more on actually building a software effectively yeah I also find that when you have to refactor typescript is depending on how because the problem is is there's like the basic expressiveness of a type where you're just like ah this is just a record string and versus this is like when you provide me a map we go through the map and we're able to tell if you provide a const map that we can then give you autoc comp completing as all these keys and you know you go you go really deep the moment you have to uh refactor I find refactoring to be one of the most challenging in typescript because again not only do I refactor the code I also have to refactor my types to match the code and then I find that I'm doing dual programming constantly yep I don't know it's it can be very very it can be a very very very very challenging thing respondents who saw closed form of this question also received a follow-up open text question to give them an opportunity to tell us more about their biggest challenge in case they had uh had wanted to provide more nuanced answers additional challenges or anything else they felt was important the most common response go uh mentioned goes type system and often asks specifically for enum's option types and some types and go yeah everyone just wants rust now that they've tasted it uh often we did not get much context for these uh requests but we suspect this is due to some proposals and Community discussion related to enums and an increase in folks coming from other language uh ecosystems where these features are common or the expectation that these features will reduce writing Boiler playay code one or more comprehensive comments related to type system explained as follows this is funny this is actually fairly near what we were talking about these uh aren't big challenges but more conveniences I miss in the language there's always there's ways around all of them but it would be nice not to have to think about it some type closed enums can be uh emulated but it's a lot of faf what is faf faf I don't know what that word is okay I got I got to look up this word because I've never I've never seen the word faf something that takes a lot of effort or causes slight problems okay stripping off stripping the walls was a real faff it's just a real faff today uh it's a very handy feature to have when interacting with apis that only have a limited set of values for a particular element field in a response and the value outside of it is an error it helps with validation and catching issues at the point of entry and can often directly be generated from API specifications like jesson schema open API or heaven forbid XML schema definitions I don't mind the error checking verbosity at all I actually don't mind it at all but the nil checking with pointers gets tedious especially when a suby needs to drill into a deeply nested struct of pointer Fields some form of option result type uh or an ability to chase through a chain of pointers to Simply get a nail back instead of triggering a run time Panic would be appreciated yeah so for me I mean real talk personally I don't think options technically help in a deeply nested set of options because you still have to perform the same checking you still have to be like field you know either you're doing some you're trying to do like this and and you're trying to floss through a bunch of ANS or you have to do a bunch of if lifting operations and so you're really what you're looking for as the Elvis operator right the question dot you really want to just be able to say keep on going and if I hit a nil stop going and don't do anything nested pattern matching ain't good either exactly people think people think options solve this problem options don't solve this problem this is this is options are equally cumbersome it's just the reason why options are fantastic is that you can't actually just put a dot in there you you are forced by the type system not to make an oopsie like that's what I like that's why I like options so I'd prefer options but still typ lifting is hard typ lifting is a lot of is a lot of uh it's a lot of code all right is there anything else you would like to say to help us understand your biggest challenges and go type system error handling stack traces that one's interesting the stack traces one uh Missing or M uh immature libraries or Frameworks I never ran into these ones issues with generics haven't ran into those ones learning curves best practices docs verbosity of code differences from more familiar languages this one I think is a fake problem like I don't go into rust trying to make it like typescript or go I don't go into typescript trying to make it like rust I don't go into go try to make it like some other language you adopt the language you're doing and what it makes it good and I think this is a very often misunderstood point and that's what we talked about earlier uh with like effective go or like just being effective in any language it's like a lot of times you're ineffective because you're trying to write let's say go code in like a very Java type mannerism or like go from like a python perspective or even go like JavaScript or typescript um but I I agree with you if I'm going to learn a new language I want to learn how to use and write that language without of any pre-bias of my you know pre past experience any other language um but it's interesting to know like that there's still a bit of respondents that that say that right like 8% not a lot but it's interesting that some people still face that like I wonder why they're trying to like you know that example where it's like like a kids toy we have like a circular shape and you're tring to shove it into like a square shape or triangle shape and like if you shove hard enough it'll go through but it just doesn't have that smooth entry you know that lose like yep yeah uh no I'm completely on that one uh I think it's because here's here's my like personal reason why it is like throws suck okay throw is just absolutely the worst Concept in my personal opinion there is one good use case for a throw which is that you can have a global Handler that just simply is able to kind of like do some logging do some nice things then return the air and nicely printed out to standard out and quit and if there's like a verbosity flag passed in it could print out the stack TR right like there's something things you can do with throw that's really really nice but besides for that it it's such a pain in the ass to work with that when you see that you can have errors as values it's really easy in typescript to try to use result objects M and you're trying to like force results into typescript because you can mhm but it's also like you don't know you don't know what functions may or may not be doing that and so then you start you know try catching everything then all a sudden you have to call every function with this wrapper function that then returns and Alters the results to always be a result and you don't really have like a really nice way to uh take that result object and return if it's an error or handle it so then you end up writing much more handling code for errors that probably don't exist because now you have to wrap everything and just like turns into this kind of General cluster this cluster Festival because you're trying to like cope with the fact that you don't want throws yeah exactly that's a good way to put like you're you're coping with with the way to handle it right yeah interesting uh developer environments as previously as previous years the most uh most survey respondents develop and go on Linux let's go and Mac uh OS uh systems although the numbers haven't changed much from yearo to year we did see some interesting differences in our self- selected sample the randomly sampled groups from jet brains and vs code were more likely 31 and 33% respectively to develop on Windows than self- selected group 19% we don't know exactly why the self- selected group is so different but we hypothesize that because they likely encounter the survey from read the go blog these respondents are some of the most engaged and experienced developers in the community their operating systems preference might be reflective of historical priorities of the core development team who typically developed on Linux or Mac OS thankfully we have the random samples from jet brains and vs Cod to provide more representative view of developer preferences I think what I'm what I'm hearing is that their Core Group are a bunch of neovim users let's go that's what I see that's what I'm hearing nerds bunch of nerds bunch of sweaty nerds that won't give you the exe and they actually are out there like reading the the community's uh the community blog because they don't get prompted in their editor yeah I think that's real interesting when you I actually have a question when you today's officially last day at Netflix when you were at Netflix what was the operating system you developed on the most Linux Linux okay yeah and you a Linux machine by Netflix and you're like okay I'm just going to like use this for Linux instead like did you have did it come with Windows and you just like switch to Linux or what did you do uh yeah I went through their system ordered a uh Lenovo it comes with uh when when I ordered Lenova at the time it came with Windows and I went downstairs handed it to nerd and said set me up Linux and they said okay and that's the name of the place was called nerds back then and they just set me up Linux and then two hours later I came back and boom I had everything set up and walked out and this just what we did I'm stealing that I handed it to nerd it was it was literally called nerds that was the name of like our Tech development thing was called nerds now it's called tech oh man yeah but it was it was called nerds for a long time uh and so I still called nerds and so I just I would just get these Lenovo and be like here you go take it I actually quit using Lenovo because they just didn't send me the laptop and then refused to like answer any questions and then would hang up on me and we even I even streamed it live once of them just like ignoring me it was crazy all right uh when writing go I develop on a lot of Linux a lot of Mac OS uh I guess this I don't know in my head I always just look at Linux and Mac OS as the developer side of things and windows as the game developer side of things and so it makes sense that maybe not a lot of I mean in my head that's my justification which is probably not right but there's just less go being developed by game developers is probably a right assertion to make mhm yeah I don't use window like I'm not a game devel really has nothing to do with it but personally like I I haven't used windows like for like for six years I I've I've only been Linux like I stream on Linux and I work on Mac uh and I don't game so I don't and the games I do play they can run on Linux now or Mac so I just don't have any expertise in Windows I don't even know what a Windows is I don't even use Windows never ever just never you you never catch me using Windows ever for any reason me with that man yeah I stream from Windows all right whenw writing go code I develop on uh select all that apply two years of experience two to four five plus okay look it goes on this Direction that's kind of funny it is kind of funny that you do see this inverse right here that the more experience the more L more mac the less experience the more windows I wonder what that means I wonder if that I do I wonder if they have location because I know like I've heard I've heard basic like uh you know anecdotal data that like say if you're from India the chance of View using a Windows computer is significantly higher than if you're from somewhere else wherever it is so I don't know how true that stuff is and if there's like you know as as more people flood into it as the younger generation comes is there also a locational type base probably type thing so I don't know if it's true India mentioned India mentioned uh I think yeah I think in I think in other countries uh maybe a Mac just doesn't make the most sense at all because of how expensive a Mac machine can be versus like having a machine that can run Windows I'm going to assume is probably more aable um and so like for some places I can definitely see like the Mac just doesn't make much sense at all yeah Mac is a Silicon Valley experience yes absolutely I was actually just watching a documentary on San Francisco Silicon Valley boom because of Apple oh really oh was it called Silicon Valley no it was not it was actually by uh Adam uh not Adam Andrew cigan from Channel 5 News he was just doing a documentary The Streets of San Francisco and know disced where yeah he just discussed where it went due to uh boomman silin Valley is this like an anchor man reference at this point all right as follow up for the 17% of respondents who developed on WSL whistle or weasel uh we asked which version they are using 93% of the respondents who developed on weasel are using version two so going forward the go team at Microsoft had decided to focus their efforts on weasel too okay it's pretty much always weasel uh given that two of our sample populations were recruited from vs code or Goan they are strongly biased towards preferring those editors to avoid skewing the result results we showed uh we show the data here from the self- selected group only similar to previous years the most common uh editor among go developer survey respondents continue to be vs code and goand we don't see any statistical uh significant differences from mid 2013 okay well that's that's yeah there goes my hypothesis yeah stupid anyways self selfy nerds nerds uh n nerds uh with the with the prevalence of go for cloud development and containerization workload it's not it's no surprise that go developers primarily deploy to Linux environments yeah that sense okay we can skip that one yep Sur go is a popular language for modern cloud-based development so we typically include survey questions to help us understand which Cloud platforms go developers are using and how satisfied they are with three most popular platforms Amazon Microsoft and Google this section was only shown to respondents who said they use go for their primary job about 76% total respondents 98% of those who saw this question work on go software that integrates with cloud services over half the respondents uses AWS while 27% for Google compute Cloud Google compute pneumonia uh I can't remember what gcp stands for platform oh yeah Google I I'm still in the I'm still in the GAE days of Google that was the last time I used a Google app engine used gcp for their uh go development and deployments for both AWS and Google Cloud we don't see any differences between small or large companies in their likelihood to use either provider Microsoft Azu is the only cloud provider that's significantly more likely to be used in large organizations companies with a thousand plus employees than smaller shops H interesting yeah that's interesting it's because that Microsoft gets in Enterprise we didn't see any significant differences in usage based on size of the organization for any other Cloud providers the rates of satisfaction for our go and AWS Google Cloud repost 77% okay interesting look poor little Len Noe all the way down there digital ocean oh the Heroku remember when Heroku was like the startup place and then it just like bamboo everybody I had a company uh in Seattle I had a company like just like uh event and uh the venue we we like rented out it was the same day that a group of Heroku guys also rented it out and the only thing we kept saying to each other like they're still around like yeah there's people here from Heroku like we have to like do one of these like to like rub our eyes make sure we're not reading something that's not actually there but they're still there they're still kicking they're still there they they they somehow keep making it uh during the past year how satisfied or dissatisfied have you been using go on AWS I've been very satisfied actually there's one thing that that really upset me with go and AWS in the past year and that's AWS dropping the support for go run times and lambdas um which isn't the biggest deal in the world but that was kind of surprising it kind of made a lot of teams uh redeploy their lambas or restructure the lambas to use the builtin runtime engine which is uh cuz goken compile so you just like deploy that onto like the Amazon Linux uh box as opposed to just having go run time enabled so that was kind of that was the only thing where I was like damn that that's annoying okay okay that was it I love us are you are you obliged to say how much are they paying you to say that a lot a lot it's in my contract okay good uh during the past year how satisfied or disat dissatisfied have you been using go on Google Cloud same thing I I don't think this not too surprising oh ASU are people are not a fan of using azuar so I guess I haven't I I don't know what azuar does differently but they they are disproportionately less satisfied in every category look at that Enterprise baby dude Enterprise baby it's probably you know the hard part is anytime you have these kind of questions or you got to remember that every person every company almost never uses just like they just don't raw dog AWS they have tools and everything and all sorts of stuff built around using AWS or built around using any of these and so it's like what is the actual dissatisfaction with the service versus The Thing and the way you interact with the thing and so I don't know I'm kind of up in the air on this one so maybe Azu are maybe they just really didn't like the fact that they had to wear pleated pants and write CP so they're just like I'm not going to do that you know you know what I mean uh resource and security priorities to help us prioritize the go team's work we wanted to understand the top resource cost and security concerns for teams using go about half the respondents using go at work reported having at least one resource cost concern in the last year interesting uh the engineering cost of writing and maintaining go Services was more common than a concern for the cost of running go services or both equally H interesting uh we didn't see any significant differences in resource concerns between small and large organizations to address concerns about resource cost the go team is continued to optimize go and enhanced profile guidance optimizations um yeah this would make sense like we haven't had any I've never had any like look for me it's hard to bridge like addressing a cost concern to just go as opposed to a cost concern to the infrastructure that may be running go you know what I mean like if I didn't provision a piece of infra correctly then I could get like a different cost if that's what mean it mean cost like in literal terms of like money like i' it's hard for me to Bridge I they mean cost in terms of performance um also I've never had like I've never I I'll be into that we haven't had any cost concerns that'd be my answer to this to this question weird okay yeah I I I I'm CU like the engineering cost of writing and maintaining go our go Services it's just a weird kind of thing because what's the replacement right you hire rust or typescript or Elixir Elixir right like what what are you supposed to do here like what's what's the what's the alternative I think maybe I is that what they mean like to like completely migrate off of a ghost service into a different language that's how I take the question I maybe there's some other thing right like H go I yeah maybe or maybe like there a release and go and if like Implement some package like it's not mandatory but maybe there's a nice quality of life package that was introduced in a new version of go you to go back and maintain your Ser like for me I agree with you it's it's it's hard for me to WRA my brain around this uh the engineering cost yeah so I I don't see like engineering cost kind of seems like a uniform thing if no matter what you choose it's going to be costly uh the resource cost of running go also kind of seems a bit you know like you said maybe they're kind of misidentifying go versus the underlying service because like what again what's the alternative JavaScript python that's what people are choosing which is categorically more expensive yeah I guess the other side would be rust but then if that if if you're worried about R running your go then your writing would have to be so expensive right because now you have to do a whole change in culture change to get off of that so it's like skill issues what what is the alternative what what are you trying to say here right that's I don't really get that as for security priorities we ask respondents to tell us uh tell us up to three of their top uh concerns of those who did have security concerns overall the top concerns were was insecure coding practices that's in all languages followed by System misconfiguration uh again I don't know if that's a problem our main takeaways that respondents are especially interested in tooling to help find and fix potential security issues while they're writing code this aligns with what we we've learned from our prior research how developers find and address security vulnerabilities okay so I mean skill issues of coding that exists everywhere I hey I've done it hey my name is Prime and I've introduced major security issues right and so like it looks like most of these are just like not they're not real yeah or they're not specific to go they're specific yeah yeah or also we may not just be like it to in deep like I don't know about you like I'm not a security engineer right like I don't go too deep in security maybe there's something underlying that we're missing that is specific to go but from like just an overall perspective like these are like insecure coding practices that's like just everywhere that's just me on a computer yeah literally that's just being on a computer that's me producing any exe is that is that is very dangerous the the one that I think is interesting is supply chain risks because I mean go uses an external hosting as their thing right I don't I don't think there is a a centralized Repository uh like npm an interesting thing you can do with npm is you can like you can deploy npm versions I'm pretty sure you could deploy an npm version that's version 004 and then push up to GitHub version 004 that's actually not the same didn't uh didn't trash Dev like explore this didn't remember he like broke npm I don't remember he's done a lot of dumb things that's why his name's trash Dev exactly I think him and someone else uh Patrick JS think his name they like expl oh yes they did everything JS that that one everything JS yeah yeah yeah I think they explored that exact thing with the version and deploying the version and then pulling down the version yes someone saying it's not unique to npm well it's Unique to any hosting service that does not that that uses an external like a third party hosting service so if you if you use GitHub as your standard right you can't like you can't go and get from GitHub tag 004 and not get back out tag 00 before unless of course they've like deleted the tag and uploaded a new one then yeah then there'd be some like but that's like a time and place type thing whereas when you're when you're talking about npm they can upload one thing and then on GitHub show a different thing right like that's the fundamental difference git tags can be moved of course git tags can be moved but again that's time and place that's that's vastly different right because that that requires me to install it at a specific time for me to be Bamboozled as opposed to npm could just be when I install right so how about Russ cargo I'm not sure if Russ cargo has the same requirements but I it it I believe it's the exact same thing I believe you could do the same thing with cargo you could have one thing that's on cargo versus the other thing that's on uh the website it doesn't sound different it's vastly different I how is this not different okay sorry mey we got to do this I I I I I'm not every now and then I feel like we get an idiocracy moment with chat okay so let's talk about this in the form of get versus npm npm stores a bunch of stuff right so when you download version 04 from npm it could literally not be the same thing as version 4 that's at GitHub at time T whereas if we're talking about this other thing with GitHub you would download version 4 that is version 4 at time T and if you were to go and observe it at that time it would still be version 04 on GitHub it actually would require them to in the middle at some specific period of time introduce a vulnerable version that you download for this vulnerable period of time and then push back up the safe one those are those are very very those those are very very different experiences here those are very very these are vastly different tags are mutable how are they not different people are saying no what makes that not different yeah this is going Beyond me Luke Skywalker you're right M did not get it I think you're right you're right I'm just I'm trying to learn this on the ride right now I'm live learning oh well like well because uh npm you can just publish whatever version you're at and it tarballs it right so you have a talled version that you you build and you say what files you do you do like a files thing and you put it in the disc whereas that doesn't have to match what's in git in fact often what you get from uh npm isn't ever committed to the Repository because it's actually the ignored build folder it's on the npm registry instead like that's a source of yeah you you download a tarball like it is literally different than what you do whereas when you download git you're actually you're literally getting the git thing and then you get it you don't even have to unpublish it you can actually just keep it there so if someone goes and looks at version 4 they will go and go oh here's the code they use to generate but you actually don't know you have to look at the code itself to know what you got that's the difference is that you can't look at it I can't take a snapshot from git and look at my downloaded thing from git and say okay this is the same thing you get a backo tarball got right like there's a difference I can't look at them both at the same time they could be actually different so that's why it's different goodness gracious people Prime's heated I'm I'm heated yeah the yeah the the uh silent downgrades is a completely different thing right it's a completely different thing npm needs to get good I know I think they include a get Shaw when you when you publish it so you can actually validate it that way if you go and do npm view I'm pretty sure this is true npm uh N I don't have what am I saying I don't even have npm but if you do npm view you can actually look at the uh you can look at the the the the Json object that's stored in the npm server and you can see I believe it has a get Shaw uh related to it and if you do then you can go and compare it and see do you actually see this sha you might be able to go into the repo and actually pull out the Sha and see what it says right uh this would be a lot easier if you could just download the XE if you just download the XE stupid code uh performance tooling our goals in this section were to measure how respondents perceive the ease or difficulty of diagnosing performance issues and determining whether this task is more or less difficult depending on their uh editor or IDE usage specifically we want to know if it's more difficult to diagnose performance issues from the command line and if we should invest in improving the integration of performance diagnosing tooling within vs code to make the task easier in our analysis we show comparisons between respondents who prefer vs code or goand to highlight what we've learned about the experiences of using vs code compared to other common editors at first or we first asked the general question about different kinds of tools and techniques respondents use with go to have the sum points of comparison we found that only 40% of respondents use tools to improve their code performance or efficiency we didn't see any significant differences based on editor or IDE preferences that is vs code users and Goan users were about equally likely to use tools to improve code performance uh and efficiency I've never used uh their their their pgo stuff or performance GED optimizations or any of that stuff uh I haven't used I haven't used but I know that it produces like a a um a website that effectively does a flame graph for you right and so it's I mean it's a pretty easy thing and and plus if I'm not mistaken vs code is just a it should be able to just display that so I I don't see I don't think it'd be impossible to get into an editor so that's pretty neat PR Prof is I like the number one response 90% unit testing at work does your team use any of the following tools techniques with go code unit testing 90% that seems like a pretty reasonable thing to do static analyzer well I so I think what it I think this what this was was a checkbox question because the percentages are way further and so it's just like I nine out of 10 people checked this which also means 10% of people don't use unit testing that's what I'm saying that's my point just 10% is like nah we don't do that here sh shit's weak yeah not here not here not where we're from not on my watch okay uh maybe they do I mean to be fair unit testing is only one specific form of testing they could be using uh integration testing I have very few like for the My Little TCP business uh I have very few unit tests I have a ton of of integration testing because I just find it easier to kind of get the whole Monty there uh vulnerability scanning that's interesting tools to improve uh code security I wonder how well I wonder how effective those things are um anyways fuzz testing I've never really done much fuzz testing it'd be fun I've never done fuzz testing I want to try out I want to fuzz it up you know what I mean yeah fuzz me you you want to fuzz it up let's fuzz it up uh most respondents told us uh that identifying and addressing performance issues at uh is at least moderately important again we didn't see any significant differences between goand and vs code users in how important they uh uh they found diagnosing diagnosing performance issues not important slightly important moderately very extremely okay so that also should make sense most people probably using go are using it because it's a it's the easiest way to have the most amount of performance yep is that fair yeah I don't really see why so are they saying that go and V code as these particular idees uh like do they assume that it gives them better gives the engineer better methods of you know discovering where performance issues Li performance issues lied like is that like the debugger is that what they're kind of going right now no what they're saying is that uh to do PPR and all that it's a command line tool and people who use vs Cod or goand want an editor only experiencea are they you know what are they doing anyways overall respondents did not find diagnosing performance issues easy yeah I mean that's never I mean unless if you're doing something stupid which is rarely the case it's not hard uh link to article this is just the go this is literally just the go survey uh this out yesterday by the way April 9th yeah that's why I wanted to do it mky uh with 30% reporting it was somewhat or very difficult and 46% saying it was either easy let's see it was neither easy nor difficult contrary to our hypothesis vs code users were not more likely to report challenges when diagnosing performance issues versus other respondents those using their command line for diagnosing performance issues regardless of their preferred editor also did not report this task as more challenging than those using their IDE years of experience was the only significant factor we observed where less experienced go developers found it overall more difficult the diagnos performance issues than more experienced Cod developers I mean yeah that could mean a bunch of different things right like someone just maybe more experienc the codebase or the service would have an easier time discovering like where the performance issues or where issues are just period and plus if you're just like new to programming new to go like obviously it's going to be I guess harder to identify things like that like I but I i' say the big kicker here is contrary to our hypothesis vs code users were not more likely to report challenges when diagnosing performance issues there is a fundamental perception that vs code users aren't as good that's what that says I mean that's literally what that says right there NE of them users stay winning there like oh this is like yeah those those nerds those vs code nerds dude they're weak they're soft they can't figure it out they just can't that's funny I'm actually surprised that they I mean I guess when you say so so when you say how easy it to identify performance issues with go there's a whole Myriad of things that are probably going into this which is like if you if you the problem with the statement is in comparison to what that's what I think there's kind of like a missing like is it comparison to uh how much time it takes to build something is it in comparison to doing it with C++ well like what is the in comparison to right and so I think that if you are comparing it to say node go is probably a little bit harder because node uh V8 has just done such a great job with the performance tab you literally just like turn it on and and boom you're you you go you turn it on when you want to turn it on you turn it off when you want to turn it off you can even do it programmatically it's like very very very very simple and so I feel like if you're coming from that it might be a little bit you know you might say oh well this is really difficult but it's really it's like not I assume it's not I again I haven't really played with it but the tools are just like execute the thing and then go look go look in a window so I can't imagine it's really that much harder it's just that you don't have that builtin already big understanding flame charts all the way exactly and performance in itself can also be kind of difficult to use so or Define like you also it's hard to Define like what is performing for your particular service right like what what is that that definition Trixie all right your day-to-day experience with go how is it to uh how how easy or difficult is it to identify and address Performance issues so it looks like yeah okay this is just the same breakdown but by experience so yeah so it looks like uh it actually doesn't look like it doesn't really index that much more into more experience no h interesting okay in your day-to-day experience with go how easy is easy or difficult is it to identify or address Performance uh issues again cloud-based Tool uh command line editor ID and editor they all look pretty much the same look look at neither easy nor difficult it's all 39% around yeah some difficult people find it more difficult here but then somewhat easy people find I mean there might be something maybe something there right I think the cloudbased tool one so if you look at somewhat easy it's a little bit like the cloud-based one is a little higher and I think that's what you were just saying because of the tools that um like certain cloud-based developers offer or cloud-based uh systems offer like cloudwatch dashboards or whatever right those could be easier for a developer or do we get effed are we we got we got f for just a quick second we're back we're back we're so back yeah so I think this is like the cloud-based tool one just it's what the cloudbased offers you that makes it easier to diagnose performance issues and I don't think that's like really a go related thing like maybe you wrote your service in go but Cloud's dashboards or any kind of like that just gives you more way to diagnose or look at the problem easier than the command line or the IDE fair I think that's pretty fair yeah uh and plus you know I bet you a lot of your issues especially when it comes to a lot of these cloud-based tools is that you're like calling services you know uh one after another as opposed to like doing some sort of paralyzation so you can just like literally look at like a Google uh Trace event and be like oh look at that I'm a dumb D and then you're just like you just fix it because it's already there the information's already is already there uh to answer our original question most developers found it difficult to diagnose performance issues in go regardless of their preferred editor or tooling this was especially true for developers with less than two years of experience and go we concluded hold on I didn't really see that here right because somewhat difficult and very difficult they look about the same like 5 years experience and 0 to two years are having the exact same have the same percentage same percentage only easy nor difficult is that they're somewhat easy they just had less they had I guess you could say that there's this is where the difference is but the difficult part is just the same huh weird whatever okay uh we also we also included a followup for respondents who rated diagnosing performance issues as at least slightly important to understand which issues were the most important to them latency total memory and total CPU were the top concerns oh so everything uh there there could be several like what's left at that point uh there could be several explanations to the uh significance in these areas first they are measurable and easily convertible into business costs second total memory and CPU uh usage represents physical constraints that necessitate Hardware upgrades or software optimizations for improvement moreover latency total memory and total CPU are more manageable by developers and can impact even straightforward services in contrast GC performance and memory allocation may only be relevant in the rare cases or for uh exceptionally heavy workloads additionally latency stands out as the most user visible metric as high latency results and slow Services yeah yeah that makes sense no surprise that that one's like come on like H for at my job I would say Lan is the one I look at the most right for memory CPU I think we kind of rely on like the infra to to handle that for us more so than like right effective or efficient go but the latency is something you have Direct Control of right like how you want to you know do you do you want your garbage Collective finish at before you return your response do you want your cleanup jobs to finish before you return response to upstream or or even Downstream so for us Lany is like my number one like north of what I'm always trying to optimize um and and GC performance I think that's very very Niche I've I've never had to like really look at that and be like Oh my GC my my collecting isn't collect good enough you know like that's never happened or that's never something I've I've put a lot of time into diagnosing I guess is a better way to put it yeah and and and latency is kind of orthogonal because allocation you could really say is is a subset of total CPU right maybe you could also argue it's a it's a subset of uh total memory if you know depending on how fast or long you're holding on to these allocations for GC performance could be an argument of CPU total memory but they all kind of affect latency right latency can be affected by GC and so it's like it's just kind of a weird you know it's a weird one in general because it's it's it's it's more of a result of some other thing in here or just skill issues laten's biggest problem is skill issues which I'm surprised they don't have skill issues in here that should be the number one I would like mine's like always skill issues no matter what happens yeah uh yeah someone saying GC per is directly related to latencies yeah exactly that's the exact same exact same thoughts here uh understanding AI use cases for go our previous survey asked go developers about their early experiences with generative AI systems to go a bit deeper in the cycle we asked several AI related questions to understand how respondents are building AI powered specifically llm powered Services we found that half the survey responds 50% of the work at organizations that are building or exploring AI powered Services damn okay or these just over uh half 56% said they're involved in adding AI capabilities to their organizational Services you know I'm really tired of AI today the complete truth um you're an AI engineer and you're already tired of it I'm G we're going to kind of Zoom through these because honestly I don't I we just we're constantly talking about it and I'm also completely shocked it's just like it's taking over but I'm not sure if people have a really good idea the Northstar of what they're taking over exactly they just know they need it the VCS tell them if you throw the word AI in there you got an extra 10 million round one let's go thank you thank you th give us an llm why we don't know but we want one that's kind of need one yeah we need everyone else has one where's ours yeah if how are we supposed to sell cars online if we don't have an llm you're like you know what's funny my first ever job out of school was a company that sold cars online and we used uh a neural network that I made that's funny you say that well I didn't know that yeah I didn't know that was a thing all right let's see uh no my organization is not building ml applications yes yes but nothing in production yet wow it's shocking that 50% 50% are doing that like it is shocking this is a lot this is a lot of aiing I didn't really realize that this again not investment advice but Nvidia stock is just sounding even better are you involved in adding AI capabilities to your organization product or services not at all slightly moderate or very again over 50% this is kind of shocking Deon Devon here we go Devon on uh we're just going to skip through a lot of these things which of the following one do you have open AI okay this none of this is very surprising it looks like it's going through the most known to the least known y right yep oh I my beautiful wife calling me oh she is Hello beautiful wife hold on one second mey it's okay l oh I missed her call damn call her back sucks uh no we're GNA keep on going sucks uh I love her though she might call me again if it's if it's important which of the following services and libraries does your organization okay hold on hold on she actually is let me talk about this one though this one's interesting okay hold on M yep I got to tell you this of of course it's okay that you have dinner with Liz period why am I boomering and it's not working dock please bring back dog a bin for me bin is a pizza I I hope they're going to bin 605 it's like my favorite uh Pub ever it's so good it the the the toas there are amazing they have this flatbread pizza and one of them is just like this this like it's like I don't even know how to describe it's like a honey but it's like it's not a hone honey it's like a little something it's like a cheese and a jalapeno and then a little bit of cream cheese it's just so good on flapp it's just it dude it's it's creamy spicy and a little bit of sweetness oh my goodness it's so good you toss in a little bit of these like thick thick homemade pretzels with some beer cheese and then toss a little bit oh my goodness and then toss a little bit of like hazy ipy on top of it all love it make me think of manise again Italian shambles right now it's me it's me audio there you go I'd make something more offensive that was if you just make something more offensive than the pizza Italia all right okay which of the following service in libraries does your organization use and integrate with generative a uh AI models you said you had something to talk about this with yeah so the ones that stick up to me would be hugging face and aw stagemaker so at my job because we use AWS so heavily sag maker is like one of the servers I interact with the most sagemaker does a lot of really good things for like ML deployments and like getting the inference and training jobs and processing jobs orchestrated all all with sag maker and hugging face that's like um if I'm not mistaken hugging face is like a core python I don't know if it's only python but it's a core library for people to either bring in built-in models to use however you want or even a way to deploy a model that your team have created and like kind of think of it's like a Docker Hub right like hugging face almost acts like a Docker where people have all these models deployed you can pull them in different sizes um and all that so like to me I recognize hugging face and stag maker um and I'm surprised well not really surprised but I want more granularity into this question because when it says what services or libraries does your organiz organization use I wonder how much of these are just like startups or companies that have like an open AI rapper right yeah and and that's it oh wait someone said uh TGI is a text embedding inter inference service not the transform oh okay okay gotcha gotcha thank you thank you thank you yeah because it does say TGI gotcha so that's a specific service I was thinking of just hugging face kind of the barebone company and the Hub okay interesting interesting yeah the I mean most of the AI that I experience in the Twitter feed and all that are just convenient rappers around o Open AI they make two calls for you they make three calls for you they add a little bit of programmatic context and like that's what you get yeah and those and sag maker and from what uh we're hearing with the TGI are very different than like an OP like they're not just like like wrappers they're like a whole Suite of tools that you can use for deployment inferencing managing and monitoring your your deployed ml model some okay I did want to read this for a quick second the fundamental flaw with this type of survey is that it's totally biased by the environment if you lived in a ccpp world so go is going to be like you are covered in peanut butter but if you live in a JavaScript world where the only thing you do is moving a bunch of jsx from one place to another using Prisma and calling it a day so so you experience with so your experience with go is going to be harder if they uh if they if they put like which your second language cohort style or which what is your second language uh this would make more sense you think so I'm not sure if I buy that I I don't know if I buy that because it's it's it's geared towards people it was like 93% were full-timers in go and and so they like they did go as their primary language and so that's why I'm not too sure if that if that technically makes sense um can we also talk about how it's hilarious I'm I'm a suspicious user in your chat yeah well we you have mod comments don't you people been people been talking about you let's see what you got here a would ban if he wasn't twitch staff but can't because he's twitch staff look at that 999 plus messages sus kind of sus I think he drinks milk that was mine I love it thank you yeah yeah no problem uh we're just going to keep on we're going to zoom through a lot of the a lot of these a AI questions I you know I think we've kind of covered enough of the AI world that please this is all AI we can all agree that AI is AI and if you're using it you're going to get a million more dollars I I okay this one okay so this one is kind of this is kind of cool all right there we go learning challenges let's let's call this our last little section here in order to improve the experience of learning go we wanted to hear from inexperienced go developers as well as those might have already mastered the basics on what they see as their biggest challenge to meeting their learning goals cuz this is kind of reasonable for both of us cuz we're both still trying to make uh we're trying to we're trying to like uplevel ourselves all the time in this so we wanted to uh hear from developers who might primarily be focusing on helping others get started with go rather than their own uh learning goals since they might have some insights on common challenges they see with onboarding developer only 3% of our respondents said they were currently learning the basics of go this isn't too surprising considering most our survey respondents have at least a year of experience with go meanwhile 40% of respondents said that they have already learned the basics but they want to learn more advanced topics and another 40% said that they help other developers learn go only 15% they didn't have any learning goals related to go to go okay interesting interesting uh which statement best describes your learning goal okay so that's that one we already just read that we G they gave us a text form just to give a hit us with the graph which is a little easier uh when looked at uh more fine Greenley time seg of go experience we found that 30% of those who had been using Go For Less Than 3 months say they learn they are learning the basics of go while the at all I'm even surprised that three month like I feel like the basics of Go is is pretty quick yeah uh yeah maybe three months is pretty fine if you're doing it full-time that'd be more surprising if you're doing it part-time here and there then maybe yeah like because there's not like it's not like goes a hyper deep language to learn maybe the standards a little bit more like you got context channels and basic go usage and interfaces instructs and you you pretty much covered 99% ago but I also wonder how much of these three three month people is the first time learning any programming language interesting I would could be their first time learning I feel like Go's kind of an odd odd first language you think I actually I've been more and more inclined to say it's a good one to learn for first programming language okay because I think it gives you I think it so here's my problem with python and and like JavaScript I'll say JavaScript specifically I think they abstract too many computer science Concepts um and not like that go expose you to a lot of them and I'm thinking this more from the perspective of someone who like maybe didn't go to school for computer science maybe didn't do this I think go you should invest time in learning something like go because it it gives you like it gives you enough of the concept that you can go deeper if you want whereas let's say python it has no like strict type system right like you may not know that there's explicit type system in programming languages right so I think go forces you to write your code with type safety right away and it does other things uh like maybe introduce concurrency to a point and you can say like well you know I think concurrency is parallelism but it's not and then I think just go does a lot for someone new to invest more time into these Concepts that may pay off in the long run when they want to learn a different language like C like rust like Zig and there's more granularity control and memory allocation stuff like that even though go kind of abstraction with GC but at least it gives you an opportunity need to find out what that is whereas Python and JavaScript it's like you'll never ask yourself those questions in the beginning interesting hope that makes sense yeah good this is this is an interesting topic right here right here which is I'm learning the basics AG go um still people right here two to four years are saying that 1% of them are still learning the basics of go I've learned the basics but I'm still learning more advanced topics 8% after eight years still say they are that's surprising I help other developers get started with go okay I mean this is good 2% is a little bit a little bit that's a little bit uh odd I'm just going to throw that out there if you're three months in and you're just like I got this let me tell you about it do something yeah I don't have any learning goals related to go that's probably not surprising you know uh as far as like the more time you spent with go the less you're trying to learn and the more you're just using it is probably pretty safe to say uh okay and at that point you're not really there's nothing really left to learn other than experience which is just using so you using it yeah to determine what kind of learning materials might be most needed for the community we asked what kind of learning content uh respondents preferred on the topic okay this will be e this will be interesting so written is the most then video indexing much higher into uh into like less experienced developers generative which is index much higher and less experienced people which is I guess probably not surprising you've been around the block a little bit you know for a fact generative content may not be the best audio which would be crazy I have no idea how that works here's here's my take on this it I think for generative AI what I've heard is co-pilot plays so well with go and even like other chippity models they just like spew out exactly what you need and you just cop control C control V like I'm done right and I think that plays Super well with go because of the Simplicity that the language offers that an just pick it up like that and start like regurgitating stuff um so to me that's not surprising I am a little like I just don't like learning from gener of AI like to me I think that's just like the problem regardless of the years of experience like you shouldn't be learning from gener of AI you should use as a tool to maybe help you supplement the learnings you have from like a course or whatever um but to learn only from gener of AI is is uh really I was always curious I think I I'm curious about that uh I I've heard a lot of people love learning with generative AIS I don't know really um I I'm kind of I'm kind of in this I'm I'm I'm in the I have no opinion on this yet so that's where I stand because I don't know I haven't tried learning something yet with generative AI because it's just too um it's too annoying to learn with for sure but I think there's something about like so I just recently read an article by Matt ryers he's one of the directors of machine learning at grafana where he talked about how to build an HTP Service uh in go after his like experience using for 13 years and of course like a gener AI model can just write the same thing essentially but there's something about his experience that he writes in the article that supplements the decision he's going with right it's like he's been readying go for 13 he's been rting HP services for 13 years and he did some and he's done things differently along the way so as someone who's learning I think it's super good to have this like North Star of this proven engineer go through these hiccups these headaches and give you the reason of why they've concluded to do things the way they're doing and I don't think gen of AI does that at all now that could be just my preference and how I like learning like learning from other people's mistakes essentially but there's something about it that adds validity to what I want to kind of imbue into my brain interesting I think there's something very I think there's something very true to that statement I'd have to think about it more well that's a good comment that's Authority but I think copil can do explaining that the article does yeah yeah I think it is Authority here's one one thing that I I'd like to say is the the hard part is if you're new to something being able to recognize what is experienced and what makes it good is really really hard and so can you even digest at the same level as someone with more experience uh in the same in just the same topic or the same area and So my answer is probably no I don't think you can I don't think you can do that and so I I think it's probably is that experience really needed in the beginning days maybe not maybe in the latter days I don't know just uh it's it's a very interesting topic though yeah all right uh this is oh we we got one more we got a challenge goals we asked respondents who said they are learning goals related to go what's their biggest challenge was reaching their goal this was unintentionally left broad enough for someone to be able to uh who was just getting started or who had already mastered the basics could respond to this question okay an overwhelming all we'll just look at the graph because they're going to yeah this one time limitation learning the new uh I mean this is it kind of feels like uh very very similar lack of examples is interesting resources hard to find missing features libraries framework I still don't understand that one lack of professional opportunities and Practice official resources from the go team okay so they just want it seems like just really the big problem is time also to know there's only 350 respondents on this one so it's very very little sample size super small so these can be skewed easily I think okay so you know how we talked about before about like coming from a different language and trying to write go in with with the mannerisms or idms of the other language do you think that the missing features liers or Frameworks from other languages like do you think that's people expecting to be able to pull like a framework or pull in a package to do something as opposed to rely on the standard library that go offers could be could be if your expectation like if your expectation is always to download from npm yeah yeah and then you don't have to download for npm and you don't realize that the thing is already there there might be some hiccups there could be some things where you you don't realize and you're trying to you're finding this one thing very very difficult when you don't realize it's just it's like right there yep so yeah I mean Fair that's fair fair fair and interesting based on your experience in onboarding other go developers what if anything would make it easier real world examples and exercises maybe again respondents like maybe um I think one pro one problem someone has with onboarding is like proper project structure I think that's something I always hear about like I don't know how to structure my go Application I don't know where these F should go there's like a a CMD folder like I think that is one of the biggest hiccups of go oh it's right there learning code organization project structure that's the one I hear the most yeah I just I did that one you know there's that one repo that's like the the definitive guide to setting up one and then some people are like oh that one sucks I just did pretty much command for commands package for packet for for my my little things that I rely on and that's it little things my little FS my biggest gripe with go is not having channels that move across machines I don't know what that even means where do you see that lithium what the hell are you trying to say um oh lithium comments yeah those are those are always intense isn't that isn't that a isn't that just a connection uh wants one channel to come to another like a microserver channel talking to another micros Channel I don't know I just assume that's like a connection that's like a connection type thing I just work here I just work here that's all I do okay well this has been very interesting um I don't know this first one the one that really bothers me is this is that real world examples exercises is you trying to build something with go MH you can't like I am I'm of the 100% belief that's just following someone else building something is like one of the worst ways to do is one of the worst ways to learn because all the learning does not happen in the completing the product all the learning happens in being unable to build something like even in just my recent huge debacle trying to get this uh what's it called trying to get the uh multiple like not crashing my TCP server is I if I would have followed a perfect tutorial I would not have realized where my my errors have or have been I wouldn't have R you know there's like all these problems that exist that only exist because I am building the real thing myself I don't think someone could have shown it to me but here's the other side to that argument remember how we T discussed earlier some people don't know what to even build like they're not with the mindset like oh here's a problem I can solve it or here's an idea like they don't get those brain farts to build build so without that like brain fart to happen that idea to pop in they may have to depend on like real world examples or exercise where people are like hey this is what I'm building like oh cool I'm going to build this right because they don't have maybe maybe that I don't know an idea to build themselves right so I think if you don't have ideas this becomes more of a realistic problem to address okay yeah I guess I just I literally cannot relate to that well that's why I think textbooks are so good that's why I really think textbooks are amazing because a textbook a good textbook has like a a finished product that you're building like building an interpreter and go or building a compiler and go by thoron ball like you have you know at the end of the chap at the end of the page of that book you will have something built and a textbook forces you more like a physical textbook not a PDF let's say forces you to write what the textbook says and I think that is incredibly incredibly powerful if you can come up with something on yourself I think the next best one is um to to look at a textbook where they have an end go that they're building and go through go through the Notions like that okay I can I can buy that I can buy that especially for a topic that is significantly difficult uh compilers being one of those that is just like a very difficult topic you don't just accidentally write a compiler you accidentally write a mess is what you mess and so then you know to actually see something this is how we separate out everything then it's it's it's much different uh it's just a much much different experience okay well I'm going to end it here I think this is pretty good happy about this Milky appreciate you being around here hey thank you I woke up to a bunch of Discord messages from Prime in the morning and I'm like I'm either in trouble or something happened and I see her live because disc girl has a purple symbol and I'm like let's see what's going on like hey I need you to come on my stream right now and I'm like shirtless I didn't even have a coffee you know like I boogers Galore and I'm like we're doing this we're doing it baby well I appreciate you getting on here so thank you very much uh I'll put all your links in the the stuff go check them out YouTube twitch Twitter Tik Tok only fans hot tub streaming categories patreon everything everything okay cool Prime thank you so much I love you all I'm sting out Prime you're the man uh congrats on your last day on Netflix can we get some W's in chat for the Mand myth the legend Prim Ain this dude [ __ ] killing it uh love you too all right