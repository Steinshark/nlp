import pyglet
from pyglet.gl import *
import numpy as np 
from OpenGL.GL import shaders
# Set up window
window = pyglet.window.Window(800, 800)

#Compile shaders
vertex_shader_source = """
#version 330
in vec2 position;
void main() {
    gl_Position = vec4(position, 0.0, 1.0);
}
"""
fragment_shader_source = """
#version 330
out vec4 outColor;
void main() {
    outColor = vec4(1.0, 1.0, 1.0, 1.0); // White color
}
"""

vertex_shader = shaders.compileShader(vertex_shader_source, GL_VERTEX_SHADER)
fragment_shader = shaders.compileShader(fragment_shader_source, GL_FRAGMENT_SHADER)
shader_program = shaders.compileProgram(vertex_shader, fragment_shader)

# Set up vertices for the circle
circle_vertices = []
num_segments = 1000
for i in range(num_segments):
    theta = 2.0 * 3.1415926 * i / num_segments
    x = 0.1 * np.cos(theta)  # Radius is 0.1
    y = 0.1 * np.sin(theta)
    circle_vertices.extend([x, y])

circle_vertices = (GLfloat * len(circle_vertices))(*circle_vertices)

# Create vertex buffer object (VBO)
vbo = GLuint()
glGenBuffers(1, vbo)
glBindBuffer(GL_ARRAY_BUFFER, vbo)
glBufferData(GL_ARRAY_BUFFER, len(circle_vertices) * 4, circle_vertices, GL_STATIC_DRAW)

# Create vertex array object (VAO)
vao = GLuint()
glGenVertexArrays(1, vao)
glBindVertexArray(vao)
glEnableVertexAttribArray(0)
glBindBuffer(GL_ARRAY_BUFFER, vbo)
glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, None)

# Set orthographic projection
glMatrixMode(GL_PROJECTION)
glLoadIdentity()
glOrtho(-1, 1, -1, 1, -1, 1)
glMatrixMode(GL_MODELVIEW)

window.customx = 0
# Main loop
@window.event
def on_draw():
    window.customx += 1 
    #glOrtho(-1, 1, -1, 1+window.customx, -1, 1)
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glUseProgram(shader_program)
    glBindVertexArray(vao)
    glDrawArrays(GL_POLYGON, 0, num_segments)
    print(f"updated")

def update(dt):
    on_draw()

pyglet.clock.schedule_interval(update,1/60)
pyglet.app.run()