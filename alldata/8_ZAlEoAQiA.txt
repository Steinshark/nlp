hi everyone in the series we will be creating a custom gradient editor so we'll be writing a property drawer script to customize its appearance in behavior in the inspector and then a editor window script to create the pop-up window where we can actually edit the gradient and we can of course have whatever settings and controls we want here so just as a basic example I've got this discreet mode where we can control discrete blocks of color and then also this bleed mode where we have some more control over how the colors blend together now unity does have a built-in gradient editor so the main point of this exercise is really just to learn about editor scripting in general but by adding in some custom functionality and getting past the 8 colors per gradient limit we could end up with something that's quite useful in its own right anyway let's get on with it so I'm going to start by creating a new C shop script called custom gradient and I'll open that up and just remove all of the mono behavior stuff now at the heart of this class is going to be a method called evaluate this will be a public method returning a color and it's going to take in a float parameter called time which it just tells us when the gradient we want to pick the color from socially zero would be the start of the gradient and 1 would be the end of the gradient for now just as a test let's simply return color dot loop between two colors say color dot white and color dot black using this time parameter alright and now to be able to preview the gradient in the editor we're going to need filthy 8h extra of the gradient so let's create a new public method this time returning a texture 2d called get texture and let's can just taken an int for the width of the texture okay so here we want to create a new texture 2d variable just call that texture is equal to a new texture 2d I'll give that a width of the supplied width and a height of 1 since we can just stretch the texture vertically to whatever height we want now the most efficient way to set the pixels of our extra is to set them all in one go so we're asking to generate an array of colors just call this colors equal to a new array of colors with a size of width we're going to loop from I equals 0 to I less than the width of the texture and in here we'll just be setting colors with an index of I equal to evaluate at some time so this time should be 0 when I is 0 and 1 when I is equal to width minus 1 so we can just say I divided by and then in brackets with minus 1 now of course we have to be careful because I is an integer and width is also an integer so the results will just be rounded to an integer so let's just cast I to a float or of course we could cast width to a float as well it doesn't really matter and then outside of the loop we can say texture and dot set pixels and pass in our colors array and then we will apply the change to the texture just by using this apply method and finally we can return the texture all right let's save this and head back to unity and I'm going to create a another C shop script called test and I'm going to attach that to an empty object open it up and this is just going to hold a public custom gradient variable I'll just call it my gradient all right and for that to show up in the inspector we of course need to go into the custom gradient script and just add this system serializable attribute to the top okay so if we save that and go onto the object here we should see this my gradient variable popping up now I wanted to display the gradient in a little rectangle alongside the label and I want to be able to click on that rectangle to open up a editor window so the way that we can customize how our class appears in the inspector is by creating a property drawer for it so let's create first of all a editor folder and then inside that folder I'm going to create a new C sub script called the gradient draw and alright I'll open that up and I'm gonna add the unity editor namespace up at the top here and this is going to inherit from property draw and it's going to have an attribute here specifying that this is a custom property draw of the custom gradient class okay so to begin drawing we're going to need to override the appropriate row is on GUI method and you can see this has got a bunch of parameters here there's the position rect which just tells us the space that we've been allocated to draw a property in the inspector then there's the property itself and finally the label which just contains the name of the variable that were drawing so for example to draw the label onto the screen we could use GUI dot label pass in the position rectangle and then pass in the label now if we wanted to modify the label or we could say for example label dot text and then add some string onto that so for example just say blah blah alright now if we save this go into unity and go onto our game object we should see my gradient blah blah and of course if we create another custom gradient variable in our test class name it is called this other gradient save this then over here we'll see in a moment our the gradient blah blah okay so hopefully that makes it clear that the gradient draw script is being used to handle the drawing of each of these custom gradient variables individually let's go back to the gradient draw script and I'm going to remove the blahblah don't particularly need that and now I want to get the gradient texture from the a custom gradient that were currently drawing in order to do that we're going to need to convert this serialized property that we've been given into a custom gradient objects that we can call the get texture method on it now the way that we do this is a tiny bit convoluted we need to use this field info variable which is part of the property drawer class and we use its get value method passing in property dot a serialized object a dot a target object so this will return an object which we then need to cast to our custom gradient all right so now we can just create a custom gradient variable call this the gradient and set it equal to the result we could now try doing something like GUI dot draw texture passing in our position and gradient and dot get texture and for the width will just use position dot width okay let's see what this looks like hang on that is a floater so it must be cast to an inch save that and go into unity let's go on to the game object here and we can see that the gradient texture is now being drawn of course it's country being drawn under a label where we actually want it alongside the label and more worrying than that is that the textures will sometimes disappear for example if I interact with some other element over here you can see it disappears and sometimes even if I just move my mouse scroll wheel then it will disappear for a while now I'm not sure what causes that strange behavior but thankfully there is a workaround to it so what we have to do is create a new GUI style I'll just call this gradient style set that equal to a new GUI style and then we can say gradient style dot normal which is just the normal rendering settings dot the background is equal to the gradient texture that we're grabbing over here so let me cut that put over there and I'll delete this draw texture call and then we're going to create another label with GUI dot label let's just draw that at the position again for now and for the content I'll just say GUI content dot none and then for the style I'll pass in the gradient style all right so if we save this now you're back into unity - refreshes we should see it still looks exactly the same but now we've got none of that flickering going on obviously I don't want these textures overlapping the labels so let's go back into the script and let's start by figuring out how much space the label takes up to do this we're going to need to find the GUI style that is used to draw the label so that is stored in GUI skin dot label and this has a calc size method which takes in a GUI content and returns a vector - for how much space it takes up on the screen so we can simply pass in our label content and I'm only interested in how much space it takes up on the x-axis so I'll say dot X and we can just store this value in a float call something like label width all right and then I'm just going to add some small buffer value say yeah 5 onto the end here just to give it some breathing room okay let's now calculate the rectangle that we want to use to draw the gradient texture so I'll create a rectangle called texture rect and this will be equal to a new rectangle and the x position will be position X plus the width of the label the y-axis will just be positioned at Y the width will be positioned at width minus the label width and the height will be positioned at height okay so now when we're growing our texture over here instead of using the position rect we'll of course use the texture act so let's save that go into unity and see how that's looking can see as we scale this out that will expand as well so I think that's working nicely I think it's worth mentioning even if we don't really need it here that we can request more vertical space for our property by overriding this method called get property height so here if I return say 30 go into unity you can see that will be allocated more space here and so the position rect that's passed in over here will have a height now of 30 anyway I'm going to remove that because I'm happy with the default and now I want to make it so that when we click on the texture it opens a editor window so to know if the user presses the mouse we're going to need access to the current event so I'll say GUI event is equal to event dot current and now we only actually need to draw this stuff if the current GUI event is a repaint event so I'll say if the type is equal to event type dot revenge then we're going to do all of this stuff here but I do want the gradient outside of that if statement I also want the texture rect calculated outside of there like so because if it's not a repaint event then we're going to be listening for input and we really say that if GUI event dot type is equal to event type dot mouse down and in GUI event dot button is equal to zero that means it was the left mouse that was pressed down then if the text erect contains the mouse point so GUI event dot Mouse position then we know that the user has clicked on the texture rectangle and in that case we want you to open our editor window so we'd have that code right over here now before we can actually implement that we need to create an editor window script so let's quickly go back into unity and inside the editor folder go to create a new C sharp script called the gradient editor I'll open that up and this also needs to have the unity editor namespace and it's going to inherit from editor window and in the on enable method I simply want to say title content dot text is equal to a gradient editor all right I'll save that and now that we have this script we can go back into our gradient drawer and we can say editor window dot get window and we'll specify the type as being a gradient editor so if there's already a gradient editor window open then get window we'll just make sure that it gets focus and if there isn't then it will open a new gradient editor so let's save that go into unity got a little game object here and let's click on a gradient and we can see this gradient editor pops up all right I think we've made good progress for this episode so hopefully I'll see you back in episode 2 until then Cheers