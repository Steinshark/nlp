i first went to bell labs i think in 1967 i had i was at the time a graduate student in computer science except it was before computer science it was electrical engineering at princeton and i was lucky enough to get a summer job at bell labs but it was a wonderful place because there were an enormous number of really good people doing really interesting things and nobody telling you what to do that's kind of a rewarding environment and so it was so good that when i graduated from princeton i didn't even interview any other place i just said okay i'll go to bell labs they offered me a job why not do it and that was a decision that was extremely lucky and i've never regretted it in one single largest building there were probably 4 000 people of whom about 2 000 were probably phds in various forms of science physics chemistry materials and then on the call of the software in mathematics and the relatively new field of computer science at that point large number of really really excellent people and the environment was you can do anything you want because the revenue source for bell labs was very stable it was part of att which in effect provided telephone service for the whole country and the way it did at that time att was a regulated monopoly which meant that they had an effect a guaranteed rate of return and they peeled a tiny piece of that off for research to improve telephone service in the country that was the quid pro quo and because of that there was no shortage of resources and no management direction that said you have to do something that will save the company in the next quarter that was really very satisfying and so most people worked on things that were in some way long term or at least whose immediate application wasn't obvious hard to beat that environment i think and i think i was there for over 30 years and i was never once told what i should be working on the way it worked is at the end of each year you had to write down on one side of one piece of paper what you had done during the year and they used that to determine how much they'd pay you next year i was born in toronto as almost everybody in canada seems to be and um i went to university at university of toronto and i was there from 60 to 64. and then not knowing what to do in the best tradition and not wanting to look for a job i went to graduate school and so i wound up at princeton i think largely because they made me on the surface and in retrospect really a better offer than some of the other places that i had also applied to and and that was a very good thing i actually enjoyed that and i met a lot of good people and by pure luck i landed this job at bell labs the reason i landed the job there i think is that the year before i had worked at mit on project mac which was the very first real um that was the beginning the multics era and they were using something called ctss the compatible time sharing system which was really the first time sharing system and so i had a good time that summer and i met indirectly virtually people from bell labs and so i got lucky and got a job for a couple of summers and that paid off both in future contacts but also giving me something to do for my thesis the original computing world original a long time ago certainly when i was an undergraduate was that there were big computers sitting in rooms air conditioned rooms behind counters looked after by operators and if you wanted to get something done what you had to do was take usually a deck of cards although perhaps paper tape take it hand it to an operator and a long time later you would get your results which of course would be it didn't work and so you'd repeat it and so the idea of time sharing was to say let us make it so that here's this computer sitting there and instead of feeding it cards by an operator let's connect terminals to it and these were mostly at that time mechanical terminals like teletypes not even vdt types and connect those and have the operating system of the computer sort of give you a few seconds or half a second of time then give him a half and then give her a little bit just go round and round the people who wanted to do some kind of computing and because computers were even then much faster than people this actually gave everybody the illusion that they had the whole computer to themselves so it was unbelievably liberating you could type some stuff into a file and it would remember it for you no punch cards and then you could say gee let me compile that file and it would do that and a few seconds later the compilation would be over and no waiting for an operator to give you a piece of paper that said your compilation failed you found it right away so then you made a change and did it again and so it was incredibly more productive you could do in a few minutes something that might have taken you a few days with the punch card paper operator kind of mechanism so that's what time sharing was if you like so could you call that an early version of cloud computing perhaps you could there's the central computer it has the resources that's where information is being stored and you're talking to it remotely now maybe not very remotely but given phone systems it could be really remotely so in an early sense you could say that was cloud computing so you come around full circle in some respects in some respects absolutely the connection was that mit had done this system called ctss very successful but of course very local and they decided that they wanted to do the next thing which was a computing utility which would provide that same sort of wonderful service to the world at large let's build a computing utility and to do that we need more resources of time money and especially people and so mit enlisted two other organizations to help them build this thing which is going to be called multix the multiplexed information and computing service one of those was general electric who at the time made computer hardware seems strange and the other was bell labs which had at the time a lot of experience in operating system development because they had built operating systems for ibm computers that were not ibm and so we had this three organizations mit ge and bell labs in three different places one was in cambridge massachusetts one was in murray hill new jersey and one was in phoenix arizona you don't have to study management theory very much to realize the potential problems in this sort of thing so they worked on multics for probably three or four years and at that point bell labs decided that it wasn't going where it should go fast enough and they withdrew from the project that was in late 68 very early 69. um but up to that point people from bell labs who had been involved in multix were had you know really gotten used to time sharing understood that that worked really well um had learned a lot of things about how you develop operating systems we're using high-level languages to do the actual implementation of the operating systems they got a tremendous amount of experience and a taste for really good computing and so when bell labs pulled out it left people in particular ken thompson and dennis ritchie with a big hole we'd like to do things this way we can't do it what do we do and then you go off into this well told story of ken thompson finding a little used pdp seven upon which he builds in a month an operating system and the rest is unix history at the time i was at mit which was the summer of 66 i did not know ken at tall i met him i think then when i spent the summer of 67 at bell labs and we were in the same organization and i think dennis arrived more or less at the same time i don't have clear memories of that and then i went there permanently in the uh very early in 1969 and we were all in the same organization and so at that point i got to know them well and uh still friends dennis unfortunately died several years ago but i keep in touch with ken at least sporadically so that must have been quite something summer of 69 you're there at bell labs um what was the feeling there was it like working at one of these places that's so well known for innovation it was an indescribably great experience it really was because there were so many people there who were so good and the environment was totally open and supportive if you had a problem it was you know like the corridors of the building everybody's office door was open you could say i have a problem to anybody and they would try and help you they would drop whatever they were doing and if somebody came into your office you could you know try and help them with their problems somebody had an idea they would talk about it people would gather in the corridors talking about ideas people would meet at lunch and talk about things like that everything was totally open certainly in the unix system although there were protections on files in the file system people tended not to use them and certainly the source code for the system was just sitting there and you could look at it people had logins but typically kept their directories totally open it was probably foolishly open in some respect but so if you wanted to see how command worked you could read the code if you wanted to change it we'll go ahead and do it and so it in that sense was within a narrower environment a precursor of open source and had in the jargon of a few years later was egoless programming in the sense that i wrote the code but if somebody else can do it better go ahead i think typically that didn't happen a lot except by people who were working together so no way would i go in and change ken's implementation of something in the kernel no not not me but i remember going in and changing some stuff adding a sub command to the the editor edie at one point just because there was something i thought i could do better that would be useful and so that kind of thing happened all the time so it was a very very free open and i don't wonderful experience because you weren't told what to do you were just said go do something somebody said you don't have to do anything i like you to watch a film how do you motivate yourself if you know what was it just the environment that was doing that i think part of it was the environment the environment was so stimulating and there were so many interesting things to work on i think in the background att remember was providing telephone service for the whole country att had well over a million employees it was the biggest employer outside of government at that time and that meant that it was a problem-rich environment there were just all kinds of things that you could work on and so although there was nobody telling you what to work on there was always in the background this idea that gee there's something interesting there we could do something with that and i think a lot of people and certainly for me you would work on something that had nothing obvious immediately to do with communications and then maybe you work for a little while on something that did have something and you kind of cycle back and forth among these other people stayed fairly pure on one side of you know let me let's do mathematical type research and others were fairly hardcore let's do something that's directly related to the telephone business all the time um but remember the research part i'll always call it 1500 or 2 000 people was actually a tiny tiny fraction of the whole company so in some sense it didn't matter as long as this collection of people produced things that were useful and they had produced over the years things that were useful transistor comes to mind as just something that was useful and some of the early work on lasers was done at bell labs zone refining which makes semiconductors actually practical all of the all of these things came out of bell labs and of course lots of interesting things in communications as well so given an environment like that and where everybody is better than you are you don't slack you try and keep up with them i never succeeded but it was a lot of fun the wisdom from mercantile was you'll never do it you know our fonts are not deliberately encrypted but they are so compressed and so compact and in such such an obscure format you will not succeed richer and had mechanisms in the language to say this is an 8-bit quantity this is a 16-bit quantity basically the care and int types that you see in the early versions of c