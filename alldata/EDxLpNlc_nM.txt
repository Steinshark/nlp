all right grug on agile agile agile is it agile or is it agile agile is what I call it grug think agile not terrible okay get out of here grunk I hate you not good okay Greg you're not like horrible but I still don't like you end of day not worst way to organize development maybe better than others Greg suppose is fine danger however is agile Shaman many many Shiny Rock lost to Agile Shaman whatever agile project fail agile Shaman say you didn't do Agile right Scotsman communism and agile the only ones that are never truly who they're supposed to be welcome to Costco I love you did I forget to turn off the alerts damn it I've been on such an amazing streak and now I have forgotten dang it I had it all right the sport I mean Scotsman really are the sad one because they should have been born a Scotsman but they never quite were true Scotsman all right grug note this awfully convenient for agile Shaman ask more Shiny Rock a better agile train Young grug's on agile danger yeah yeah this is you know when I was working at my my second company I was working at called workiva known back then as web filings I kid you not we had like in the guy who I think wrote Inspire uh super agile people come in they're just all about it we had training sessions and I kid you not we developed more process we developed more process than features in the product it was incredible by the end of like the six months I was there my meetings went up six-fold the amount of work I was doing went down like six-fold it was incredible what a good agile Shaman can do to a company incredible I hated planning poker I thought we're gonna do something fun and same thing with like uh like chickpea noodles cauliflower rice uh vegan bread or whatever it is uh gluten-free bread no I stopped just I associate something good playing poker with people I like but it's mixed in with something I hate which is like gluten-free wheat okay it's just I hate that I just I just hate that combo okay I hate that combo vegan bread yeah vegan bread I probably wouldn't like that either I need those eggs in there baby um grug tempted to reach for Club when too much agile talk happened but always stay calm this is true prototyping tools and hiring good grug's better key to Success software agile process okay and help some but sometimes hurt taken too seriously drugs say no silver Club fix all software problems no matter what agile shamans say Danger I mean this is a this is really I mean this is really good this is really good talk I will say one thing that I've really appreciated about Netflix by the way I don't know if you know this but I work at Netflix uh is that there virtually is no rules or process which means that we kind of always choose our own destiny in some sort of sense and by choosing your own destiny which can be very cumbersome duplicate work happens you favor communication among individuals over then like over corporate large alignment meetings and for me I'd rather talk to one person or two people or five people in a line on a specific thing then do a whole like reoccurring meeting every week to discuss the same we've already know and everybody's already on the same thing and stream Berry doesn't need yet another meeting like I get that and so it's just like I just hate that and so I'm just so happy I don't work in agile anymore agile I hate it I've always hated agile I still hate agile every single time you say you hate agile the the no true agile Scotsman comes out and be like well you didn't do Agile right that's your problem your problem is you didn't do it right oh what went wrong there at a retro oh your Retros are too much take away Retros oh you don't like that planning poker oh you weren't you weren't doing it right your estimations are bad oh you're not estimating right well did you do shirt sizes small medium and large what'd you do what's the problem you know what no more planning poker see you're doing planning poker bad right it's just like dude I hate the whole process everything about angels just sucks I don't believe in a silver bullet but I also believe in a poison pill okay but you're good at it good at what putting it on shirts you believe in silver Club I don't believe in silver club either I don't believe in silver Club I don't all right let's do one more refactoring refactoring fine activity and often good idea especially later in Project when code firmed up again feeling firm right now however grug note that many times in career refactors go horribly off rails and end up causing more harm than good you know I often find that refactors go worse depending on how much of your code relies or shaped by a third party and what I mean that by that is say something of the say leaky abstractions uh react as a leaky abstraction right because you just you you literally have to shape your code around react uh rxjs leaky abstraction one thing becomes unobservable everything becomes an observable right like just observable all the way down eventually by the end and so like the more dependent your code is shaped against the library the harder I think it is to refactor because ultimately it always ends up being a rewrite right and that and for me rewrites are just like they rarely are the the right answer rarely uh Greg not sure exactly why summary factors work well some fail but grug noticed that larger refactor more likely fail failure appear to be agreed so grub try to keep refactors relatively small and not be too far from out from too far out from Shore during refactory ideally ideally system work entire time each step of the finish before other begin love it I actually really like the idea of trying to keep your refactor to the point where a PR is still intelligible I know that's kind of hard it requires extreme discipline but I think it's pretty good and then you commit that you don't have to actually like you know code reviews are great sometimes right the hard part about code reviews is that you also need the other person on the other side being knowledgeable in that area two code review you know what I mean you just don't want the other 10 000 line one end-to-end tests are Lifesaver here but often very hard to understand why bro such is refactor life also grug noticed that introducing too much abstraction often lead to refactor failure and system failure good example was j2ee introduced many big brains sit around thinking too much abstraction nothing good came out of uh it many project hurt ah love it another good example when company Greg work at four introduce osgi to help manage manage trap Spirit oh Spirit spelled wrong Spirit complexity demon and code base not only osgi not help but make complexity demon much more powerful took Multiple Man year of best developers to rework as well to boot more complex spirit and Now features impossible Implement very bad agreed very very much so agree all of this is just beautiful the refactoring is super hard refactoring is super super hard I have yet to find really great rules of thumb for good refactors uh really small refactors obviously very very simple a defined API and refactoring the spirit demon behind the API feels really really good um I like that those seem to be those seem to be the easiest refactors to get right uh I think when you have a really good API refactors are easier when you have a really shitty API refactors are really hard because almost exclusively a shitty API leads to a rewrite not a refactor um and of course abstraction's crazy right abstraction abstractions just make everything harder like dramatically harder because then you know abstractions are supposed to make an operation easier right they're supposed to allow for more sway but often what I find is abstractions don't allow for more sway they actually make everything more narrow and it becomes way harder to refactor dislike hard I hate black box coding I'm not sure what Black's box coding is one layer of abstraction abstraction class uh plus suns are okay more don't know when you say abstract class if you mean like interface I'm in on the interfacing I like interfaces they're good uh if RX is leaky abstraction then is promise one two yeah promise is one too but promise also has syntax and that's where the different I think that's where the big difference lies is that that promises are fairly one-dimensional operations they're more like a catamorphic operation right it's more like an iterator operation you're kind of pulling out a value and so it just feels different in the sense that I'm not sure exactly how to word it I haven't read I haven't read good architecture on it or I haven't read the right terms to say here so I sound stupid I sound grog but going okay Einstein shut up it's the right I believe it's the right term but it's going from it's going from effectively a monad right A promise is just a moan out of some sort into the underlying value I find that's okay rxjs on the other hand isn't that rxjs is actually a stream of things right it's it's a completely different thing it changes a lot of stuff just a monad you can monad Deez Nuts I think that works uh you can catamorphic these nuts uh got him uh promises should have been monads yeah I see you thank you yeah yeah yeah yeah yeah yeah yeah modi's nuts nads what modes and ads all right anyways hey I by the way I just so everybody knows I've tried turning off all ads as much as possible on Twitch hopefully you enjoy it um I'm trying to just shut it down right now the name oh I forgot to say that you're right the name is I'm not running ads or at least not trying to but twitch also forces you to run ads and and it's very difficult and you really tried not to a gen