if you've spent some time writing software test or refactoring your code to make it easier to manage you'll certainly have used dependency injection what this allows you to do is separate creating a resource from using it which is great because it nicely decouples your code however there's a Next Level which is dependency injection Frameworks like inject or even fast API has a built-in dependency injection framework the question is what do these things actually do and why do we need them that's what I'll dive into today if you like these types of discussions you might also like my Weekly Newsletter where I Shar latest news in the software industry and keep you updated on what's Happening behind the scenes at Aron codes you can join for free by going to my website ear codes.com what exactly is dependency injection in principle it means that we Supply an object to let's say a function instead of letting that function create the object itself that way you can separate creating the thing from using the thing and that allows you to better decouple your code let's take a look at a very simple example so I have an almost empty main file here but let's say I'm going to add here a data class and then I will define a class user which has a name and let's say an age and then I'm going to define a function that does something and this creates a user and for example what we can do is user H and then let's say we add one to the age and then we print the user and then from the main function I call do something like so so if I run this then well this is what we get John is 31 years old right pretty straightforward let me drag this over here so we can more easily see it now the thing is that do something currently creates a user object John and does something with the user and this precisely illustrates the problem with not injecting your now the issue is that do something only works at the moment with a very particular user namely John if we wanted to work with another user well we're going to have to edit the code right here we can't simply let it work on another user and that's at the core the problem that dependency injection solves so instead of defining the user here inside the function we can also move that somewhere else and then pass pass the user as a dependency to the function and then here of course we need to pass it as an argument so now of course when I run this this going to have exactly the same result but the nice thing is that do something cannot be used with other users as well so for example I can create a second user which well let's not name this user John let's say we're going to name this user ion and Aron is also age 30 it's not true by the way but let's pretend it is and then I'm going to call do something on user two and I can do that without having to change anything in the actual do something function because I'm supplying user as dependency and that's at the core what dependency injection is so we separate creating the thing which is what we do here from doing something with the thing which is the body of this function so that's dependency injection and what's really nice about dependency injection is if you do that consistently throughout your code base and you're going to end up with basically one place where you patch everything up one dirty place in your code that's where you create the specific objects and you uh make links between these objects and then you can keep the objects and the functions themselves pretty generic and that's actually nice because you can also combine this for example with abstraction by not accepting a user class but a protocol class that then implements certain methods or has certain instance variables so dependency injection allows you to do decoupling of your code much better so you might wonder okay so fine then let's just use that and be done with it right but there may be some cases where you want to do a bit more with your dependencies for example especially if you're using Frameworks like Fast API or Jango this is often the case that you want to sort of standardize the way that dependencies are dealt with in a rest API for example you quite often are going to depend on a database connection because your API will work with the database so it's nice if there is a standard way to do that sort of dependency to inject that database dependency so that when other people use your code or work on your code they immediately understand that there is a dependency on the database so standardizing things another thing that you might want to do is that for some dependencies you might want to have more explicit control over for the life cycle like what happens when you open and close a database connection for example or uh how many instances you create of some classs or things like this these are examples of where dependency injection Library might be helpful secondly if you're using Frameworks fast API has an actual built-in dependency injection mechanism which is quite useful in context of rest API so ultimately the aim of that is to standardize and make dependency injection more consistent versus just doing it yourself on the fly in your code so I want to show you two examples of how you can use this in practice the first one that I want to show you is a dependency injection Library called inject I have an example here and this use a combination of inject with data classes and identic to show you a couple of different use cases one of the key features of inject is that it allows you to Define on the one hand how instances should be created and on the other hand how it should be injected into your methods or functions and you use decorators for that so in this case for example we have a repository class for various types of objects in your database and we have a create table method that allows us to initialize the table containing documents and what I'm using here is the inject do params decorator that allows me to Define what we're going to pass as an argument to this particular method automatically in this case that's a sqlite cursor and what I'm doing in this case is nothing more than executing this create table SQL query and then when we create a subass of this repository like here for blogs for example then I Define what this query is supposed to look like and I've set up a couple of other methods as well for example creating a new item getting an item updating an item and so on and so on and each of these gets a sqlite cursor so it use the cursor to access access the database and then what inject allows you to do is to configure how those objects are supposed to be created so in this case I have an init function that gets a specific database connection so create that in the main function and then in inject do configure I Define how these different types that are used these different dependencies that are used throughout the code need to be initialized so for example if you have a sqlite database there is a cursor function that provides a sqlite cursor and if you use bind. provider this allows you to specify for a sqlite cursor how that object should be created and that's by calling the cursor function from the database or what you can also do is that if you need a Blog repost story dependency somewhere that you simply Define what object that's supposed to be so this will create a single blog repository instance and then pass it along as dependency to all the functions methods where you define that as a parameter so for example here I have an all blogs function that gets a Blog report story and then Returns the result of the all method call so as opposed to your boring homemade dependency injection this allows for a lot of flexibility in how objects are being created and how they're being injected into your functions and methods quick question though is this something that you're considering using in your python projects what would you say is the main use case for this let me know in the comments so what the purpose of setting up all of this dependency injection stuff well the nice thing is that once we've configured inject and configured how dependencies are being injected we can actually call these functions without supplying the dependencies so if I look in the main function so for example here I'm calling create table and create table is defined here you see it expects a Blog repository but when we look at the main function you see we don't Supply one and that's because the dependency injection framework takes care of supplying that dependency and the way it happens we configured in the inject do configure function call so this is the power of dependency injection so you specify this once in the configuration and then when you use these functions and you call them then the dependency is injected automatically and same thing for other function calls like there is also create blog for example so if you look at create blog so it accepts a title content and a block repu story but since we have specified how dependency is supplied we don't need to supply an actual block reposter we can simply call it Asis and this is one of the main advantages of using a dependency injection framework so we can now write code that doesn't require us to think about how we are going to provide access to blogs because that's what the dependency injection framework took care of another example that I want to show you where dependency injection is quite commonly used is in fast API and like I said at the start of the video vast API also has a standard way of dealing with dependencies and in this case what I've done is again very simple database just using a sqlite database here and I'm using a Blog model so Blog has an ID title and content and I'm using some pantic models in order to be able to create and read blogs now where the magic happens in terms of dependency injection in penic is that there is a depend function that does that job for us so this is part of fast API it's built-in and what you can do is I have a function here called get DB that supplies a database connection and on top of that what I'm doing is that I'm using a generator here so this yields the database but then once it's no longer needed in the finally part it will close the database connection and this is nice about try and finally finally is always executed doesn't matter if there's an exception or not so so the database connection is now always closed and the way we Supply the database connection as a dependency in our fast API endpoints is by simply adding it as an argument and calling the depend function so this is very easy way of supplying dependency to your endpoint and then fast API just like what the inject Library does will inject the dependency automatically for us we don't have to think about that so then we have it here and then we can simply call methods on it like adding and committing and refreshing or whatever we need to do with the database so in this case we Supply a function to the depense function you can also Supply a class and it's going to create an instance of that class for you so depense is a very useful mechanism to inject the dependencies and one of the nice things of using fast apis dependency injection mechanism this is that when you need to write unit test for your API endpoints then you can actually replace the database with a mock database connection and then write test for that and that's it's pretty easy to set up on top of depend fast API also has a couple of other standard things it can inject such as the request or security by the way if you enjoy coding in Python you might also enjoy my free Discord server you can join VI the link below there's lots of like-minded people there talking about coding software development in general it's a really fun place and I hope you'll join so in this video I've shown you a couple of examples of dependency injection Frameworks whether that's a separate Library like inject or something that's part of another Library such as fast API personally I think in the case of a framework like Fast API using dependency injection in a standardized way makes a lot of sense it results in more consistent code that's also easier for others to work on it allows to write unit test more easily and replace for example database connection with mock database so I think that's very valuable Now using a specific dependency injection Library like inject personally I haven't found a real use case for that in my own code I typically rever to Simply supplying the dependencies in a very basic way and just adding them to the function and I haven't really felt the need for using a dependency injection framework like inject but maybe you have a different experience if you have please post it in the comments now one place where dependency injection framework might be helpful is logging I've encountered this quite a few times where I'm trying to figure out the best way to supply a logging object to my various functions you know you want to log something while you run the function but then do you really want to pass each time a logger as an argument to the function which just makes your function arguments more complicated or the alternative is that you actually import it from another file but then your code is coupled to that file so if you want to use it in a different place then you have a problem basically so that's where I think the dependency injection framework might actually be a good good solution so it would in that case automatically add a logger object when you call the function and then in your configuration you can specify what that logger should look like so that's something that you define on the top level so dependency injection Frameworks haven't used a lot but I might actually start using it for locking so I hope this video gave you an overview of what you can do with dependency injection and dependency injection Frameworks now dependency injection in particular separating creating things from using them is just one aspect of doing objectoriented programming well I did a video a while ago where I covered several tips that help you write great objectoriented code you can watch that right here thanks for watching and see you next time