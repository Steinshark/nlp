meet Val a new language because you know honestly what we need right now in 2023 is another new language because right now I'm not going to lie to you when I'm programming v o camel Nim uh Odin Zig rust carbon I sit there and I think you know what I need I need a new language because all these other languages okay they ain't it I need something different I need something new something fresh meat Val a new language alternative to C plus plus and rust Val is a high level programming language that runs close to the metal said the language Creator Demi recardan Val is a new high-level programming language that runs close to the metal it's the brainchild of Demi record a postdoc researcher at Northeastern University who focuses on language design and type-based approaches from memory safety it started as a byproduct of research uh she did with Google and Adobe on the Swift programming language and the decide in the discipline of mutable value semantics which upholds the independence of values to support local reasoning I'm sorry or congratulations I ain't gonna read that um Haskell rust and R are other examples of languages that use mutable value semantics oh man given pick boners right here uh this is a project that started around two years ago I wrote the paper I collaborated with great people at Google and Adobe told the new stack now for this paper I had a small idea in the back of my head and I thought oh we'll try implementing some stuff and it will be two or three week project it's been two years what does this tell you people what does this tell you tells you two things first off the rate of new languages is slowly exceeding the rate of new JavaScript front and Dom manipulating libraries specifically number two what this tells you is that Engineers are the worst estimators ever look at this person okay she Demi Demi Demi or Demi I'll call her Demi for here from here on out Demi is a post doc okay postdoc that means she went through school then decided to go back to school and then decided to go back to school again and then after being in school decide to go back again for languages and then thought oh I could probably do this in three weeks two years later honestly this is literally every one of my projects this is this is me this is actually me uh let's see nothing else does quite what regardon wanted she started with swift because she already knew it if there's ever been a sentence that never needed to be written that's the one yeah started with swift why you ask cause I knew it you know I didn't start with the language I didn't know to design a language I started with the language I did know and did a lot of research on I know it's kind of crazy and Swift supports immutable value semantics it checked a lot of other boxes she wanted as well such as compiling to machine code making it good for systems programming but also undermines the value semantics because it mixes it with other things she added that made record I wonder what would happen if she made a language that was purely about mutable value semantics okay so I'm gonna be real here I'm gonna be really real and vulnerable with you guys so please don't say anything that's rude or hurtful I don't know what mutable value semantics means okay my guess is it literally you just have to Define when something is mutable is that all that it means and in strictest form of mutable value semantics references become second-class citizens they are only created implicitly at function boundaries and cannot be stored in variables or object Fields hence variables can never share mutable state in other words MV s allows you to return multiple values from a single expression while mvs restricts how references can be used in a program returns multiple values from a single expression restricts how how did multiple dude I swear this is just chat GPT just a hallucinating things here's a table that summarizes the key difference between mvs and mvs what the hell are we even looking at can we stop using AI to solve everything can we just stop I don't even know what I'm looking at anymore now I'm just super confused can we just stop using AI to solve literally everything it is very very confusing we're just gonna go on okay I'm sure what it means is something amazing but I can't do this anymore okay we're gonna all pretend like we know what this word means and we're gonna keep on going they checked a lot of other boxes as well she wanted she wants such as okay we already read that mutable value semantics is a programming discipline that really focuses on notional value not notional values so if I have an array of things for example the value of this array is the most important concept that I want to manipulate she said that gives me local reasoning is this just gonna be another Haskell clone amazing white paper but doesn't actually do anything I don't know what the hell just I again what the hell did you just say to me what are you saying to my face uh to really understand why this approach is needed record said uh consider reference semantics which is another approach used by modern programming languages especially in parative languages such as C plus plus JavaScript Python and Java uh these languages distinguish between primitive data types such as integers or strings sometimes and those uh types behave like values she said changing the value of an integer doesn't create an observable side effect to some other place in the program this is definitely a Hassler that's not the case for other data types such as Aggregates arrays or hash Maps because they have reference semantics okay okay what happens if you pass an array to a function in Python and then this function goes on to change the array maybe adding an element or removing some element from this array then this effect can be observed from the outside of the function is are have we just been reading hundreds of words to just Describe the word mute in front of a variable is that is is what I'm hearing right now is is it literally just going let mute Foo equals five is that what they're saying by local reasoning I knew I was a genius see this whole time this whole time I'm over here pretending to be stupid for you okay but the reality is you you are stupid okay maybe you should kind of you know use your brain a little bit more often okay big brain okay big brain she explained the collar of the function will have its own array being changed you cannot reason locally about the values because every time you call the function some side effect might occur in a seemingly unrelated part of your program that makes I mean I do agree with the idea that you should Define I love the idea of defining mutations man I've said this in completely different terms uh I've always preferred the idea of Define when things mutate versus uh don't or defining when they should be immutable so typescript does the opposite of this right so if we go back uh here and go to uh scratch wait I thought I had it in here uh scratch is it in here really do I not have it I thought I had like a little do I not have it in here do I is it in here I thought I had something in here huh here let's let's erase this thing uh and you see this all the time uh with something like typescript is that you'll have something like uh function Foo and Foo will take in a say an array and it's an it's a number this as const right or no no no not as cons and it in a function header you go read only is read only over here no no that's that's it's right here there you go like you have to specify the inversion of that you say when it's not changeable versus the other way which is you have to specify when it's changeable I think I prefer I I prefer the other way and it's true because I go like this let's just pretend like this thing is an array of can we do that can we go uh Foo equals I don't know uh food number there we go lots of foods in this thing because you know I prefer things to be as confusing as possible you know what I mean there we go all right so this is an array of Foo and so can I go like this Foo equals five foreign I hate typescript sometimes I know people love typescript okay I get it um I get it uh I get it I understand that read only means that it's only read only at the array level but this this ain't it okay this is not how it does stop making excuses for just really annoying Behavior okay it's please just just drop the copium yeah of course you choose TS over Js foreign just it's always emotionally painful when I see those things that makes it difficult to apply local reasoning for humans which makes it harder to be sure that programs are correct she said but it also makes it uh difficult for compilers because optimizers now need to be very conservative about what happened she said the optimizer has to account for the fact that other references might exist and some seemingly unrelated part of the program might need the value that is being mutated so it's best not to do anything rather than compromise the reference architecture the value of mutable value semantics this is where the value of mutable value semantics becomes useful mutable value semantics remove the references from the picture she explained uh but it preserves In-Place mutation which is very efficient absolutely for instance if you want to sort an array in place you don't have to build a bunch of new data structures and try to recombine them she said uh that kind of peer functional model will put a lot of pressure on your Optimizer to recover the lost efficiency you want to do things in place because allocating a lot of pieces of memory and recombining them together will be very very slow I mean I agree this is in terms of in terms of computer speed she's 100 correct that provides a very transparent uh performance model which is a very good so I honestly have no idea what this language does yet mutable value semantics removes these references from the picture you only have values and a bunch of techniques that you could use to preserve sufficient expressiveness it looks like functional programming but what you really want to preserve is In-Place mutation because In-Place mutation is very efficient that's what she said um take care this is definitely Haskell 2.0 really what I'm reading out of this is that the Heap was a mistake is that what I'm hearing the Heap was a mistake we should have just always used the stack to begin with um that's you know there's there's this funny notion that programming got hard because of the because of the Heap the Heap truly ruined programming garbage collection is a result of the Heap being impossible if you don't understand the difference between a heap and a stack like go read about it like I'm sorry but I think that might be slight slightly out of scope for this talk uh why don't you just create Mike Michael Michael Scott plus plus language one shut up okay I'd rather be Bill Burr uh this includes let's say okay uh the language is designed for systems programming so it's primarily for any application that runs close to the metal and needs to squeeze the most possible performance from the machine then said that includes uh uses such as operating systems memory intensive applications such as video games or image processing or other applications that can't afford a virtual machine or a garbage collector embedded applications would also be very interesting Target she said so again one of my big problems I have with this whole thing is never answer the never answered the original question up here why another programming language you know like why yet another one why doesn't rust do this enough for you Russ plus plus but even harder with rules about yes even harder it's even harder or rust plus plus this is always my problem with these things is like even no matter how much backing and no much you know even if Google that I mean it's the same reason why I have such a hard time with carbon when Zig already existed right Zig great great header support it has a lot of great stuff already really built in and I know carbon's like trying to it's more for C plus plus and all that but it's like you get everything you need from Zig and it integrates really really straightforward so why yet another version I just don't get it I honestly don't get it I I don't get the purpose of of more and more like Odin made sense because Odin is a language designed for game programming it optimizes things that are hard in one language to be easy in this language right it's a language designed for a purpose and to me that makes like that actually makes sense designing a language for a purpose makes perfect sense to me that's why JavaScript is great for the front end it just is what it is it's really fault tolerant it it really allows you just to be kind of loosey-goosey because you know stuff just changes constantly and it's okay with moving targets and you know it just is what it is and to me that makes sense you know what I mean uh but Zig doesn't have a direct compatibility with C plus plus oh it doesn't okay okay it only has direct compatibility with c hmm yeah uh but think about the LinkedIn Post Yeah Val's uh purpose is distributed heterogeneous highly parallel compute with ease is it fast by definition Val is compiled ahead of time uh to machine code that relies we just we just call that compiled uh on a type system to support In-Place mutations and avoid unnecessary memory allocation Val avoids hidden costs such as implicit copies and therefore avoids heavy dependence on Optimizer for basic performance aside by default or safe by default valves Foundation of mutable value semantics ensures that ordinary code is memory safe typesafe and data Race Free by explicit audible opt-in programmers can use unsafe constructs for performance where necessary and can build safe con constructs using unsafe ones okay so they're taking a different approach apparently than um then rust in this case okay Val uh borrows heavily from Swift which has demonstrated a user-friendly approach to generic programming and deep support for Value semantics valves a programming model strengthens and extends this support while de-emphasizing reference semantics and avoiding complexity that results in from trying to make it statically safe uh EG memory reasons lifetime annotations Etc okay interesting sounds great by why another language I'd say okay here we go what sets Val apart in the current landscape is its focus on mutable value okay so they really love this termutable value semantics for uh for the purpose of writing a efficient generic code Val has zero cost abstraction language that fully acknowledges the physical constraints of computer architecture yet presents a user model that marries these constraints with the benefits of value-oriented programming well the name is the primogen the name is I feel slightly embarrassed that I really truly didn't understand anything that was just said here