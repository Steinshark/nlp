the best way to learn how to write safer code is to break bad code if you're a developer a manager or a student you should try out what we're about to do in this video in this video we're going to take the code that I wrote from my last video about how strings are getting people hacked and use a buffer overflow attack to hack into it let's get into it here we have the code from the video that I made so pretty simple piece of code all it does is it prints hello welcome to the secure server and then it checks your password and if it checks the password correctly you get to run the debug function which all that does is give you a shell so if you know the password well easy money you can just use the password to get in unfortunately the is valid password function is a piece of code that we did not get it's actually in my secrets.c here all it does is it opens a file password on the computer checks your input against that and if it's right you get in but unfortunately you don't know the password yet there is actually a vulnerability in this function where like I described in my previous video the gets function is what is being used to read the user input gets is an inherently vulnerable function and actually when I compile this program the Linker yells at me and says hey like why are you using gets so what we're going to do here is we're going to play around with the program and see if we can find a way to break into it using the gets function step one we're gonna go ahead and we're gonna run the program right and just make sure that it works as intended so welcome to the secure server what is our password we can test out some basic stuff password admin okay so obviously we don't know the password we're not going to get in this way but like we said before gets is a vulnerable function we can actually see if we give it too much input at a certain point it starts to break so we'll give it a lot of these guys wrong password but if we keep going eventually we put the program into a weird State the program segmentation faults and then it core dumps and we can actually look at this command here D message pipe into tail Tech N2 a few things are happening here so we see that the program hacked the name of our program our server crashed it was a segmentation fault at trying to access this address here interesting we'll talk about that in a second while trying to return to the instruction pointer 4141-4141 so if we go into python3 and we actually take these four one four ones we'll see an interesting concept happens we say bytes Dot from hex and give it this string as hex interesting so four one four one four one four one is quad a what actually happened here is we gave it so much input that the buffer overflow took control of the instruction pointer on the stack when it tried to return from our password function pretty interesting so can we put a number here that is important to us to give us access to this system answer is yes we actually can put the address of the debug function onto the stack where the instruction pointer used to be and use that to run this function even though we don't know the password very interesting how do we figure out the address of the debug function well you can look at the source code but the source code doesn't actually have the address of the functions the address of the functions is going to be determined at compile time so people have to look at the actual compiled binary we do that by going to object dump type in object dump pack D and then do it on our program pipe that into less and we're going to search for the debug function the debug function here is at this address so it's going to be zero eight zero four nine two nine six we're going to keep that and stow it away for later in our exploit.pi file so we're going to do an exploit.pi is write a python exploit that gets us control of that program using a specially crafted input right so we're just going to save this as a comment and say this is the debug address okay so now that we know the debug address in theory if we control the stack at this location where 41414141 happens then we can put our own address in there and then Rhett to debug so we need to figure out how many A's do we put in to start controlling our program because you know we put a bunch of A's here but the question is how many is our hour is Right which what point do we start to control the buffer so we're going to figure that out by kind of guessing we can start the guess with the number of bytes in our buffer we know that our buffer length is 64 bytes so we're going to ask python3 hey do me a favor and just print a times 64. and we can take that a times 64 and use that as our initial guess at how long we need to make our buffer to get control of the instruction pointer so we'll run the Hacked we'll put in the 64 bytes okay nothing's going to happen there what we can do is we can put in a series of unique four byte characters to figure out where our control actually happens we'll go after that 64 bytes we'll go BBB cccc and so on we'll go all the way out until F and this will crash the server what we can do now is we can take this chain we're going to copy that Ctrl C we're going to say d message pipe the tail Tech N2 so we got control at four five four five four five four five which Python 3 will tell us was quad e so we'll take that and we'll put it into our exploit here and say our initial payload is equal to all of these up until but not including quad e so now that we have that that means that the next four bytes are going to be our instruction pointers we'll say that the payload plus equals the bytes of zero eight zero four nine two nine six which is the address we got here which is the debug address we're going to return to debug and don't forget we have to use the um python reverse notation to flip that because it's 32-bit Intel which is a little ending so we'll take that okay so now that we have that we have to first make sure we make this a byte string as well so that python doesn't get mad at us for concatenating a byte string to a string and then also we have to add some additional boilerplate code to make sure that python properly outputs um byte strings so we'll do CIS dot standard out.buffer dot right and we're going to write our payload to the screen so this will actually print out our payload in ASCII so we take that and we can use the script to test out if our exploit works we'll do this and you see okay cool we put in our password and we're entering the bug mode but it crashes the problem with this is that when we write our exploit this actually closes the file descriptors um of the shell before we can actually use the shell to do anything cool so we have to do is we have to say bracket our actual exploit so python3 exploit.pi and the next semicolon and then cat that'll actually keep the file descriptors up and we pipe all of that into hacked so now we are in debug mode and we have a full shell on the system so we're not root obviously we are we do have a shell we bypass the user authentication and we can use this to cat the password and boom what is that the password is too cool for school all right guys that is it I've left the source code and the compiled binaries down in the description below I would highly suggest go and try this out on your own and uh whoa whoa what what's going on and then and then by the transitive property stocks only go up good okay oh hey I didn't see you guys there sorry don't mind me just a scientist Triple L trying to figure out the best way for you guys to all learn new topics um if you're interested in that which you're here so I'm sure you are check out this message from our sponsor brilliant brilliant is an amazing platform for interactively learning stem topics with over 70 courses ranging from geometry to Scientific thinking that are all updated monthly whether you're a computer scientist an artist or an economist brilliant is something cool for you to discover my favorite part about brilliant is their interactive examples instead of giving you a wall of text to read every brilliant lesson is filled with Hands-On problems you can use to test your understanding as you go I personally am taking their introduction to neural networks course right now check out this lesson where I learn how neural Nets work and allow for the computer to interpret my personal handwriting it's pretty awesome you can try brilliant right now for free and using my link www.brilliant.org low-level learning the first 200 of you to try it get 20 off an annual description thanks again brilliant for sponsoring this video