in Python there are going to be times that you're going to have to nest if else statements and this can become quite unmanageable if you start having four or more as you can see here it already starts to become quite long and this is just a simplified example but here we're checking if there's a connection if the user has paid for their connection if the user has internet and whether the user is online and then we handle all of that one line at a time but what you might have noticed is that this actually starts to indent quite a lot and what happens if you have even more booleans that you need to check or even more conditions that have to be checked within the nested if else statements well that's going to become even more unmanageable so what we're going to be discussing today is the god Clause pattern and this is a pattern that you should really be familiar with because in some contexts it's going to really simplify your code and make it just much more readable and a lot of languages use this so it's just good to know how to use it in Python but let's get started with the example so at this point you probably understand that we're trying to make sure that the user can connect to internet if the user makes it online we're going to print that they are online otherwise they are offline if there's no internet we will print there's no internet if it's not paid we'll just type in user has not paid else we're just going to say no connection because there was no connection there's a lot of nested if else happening here and there's also a lot of indentation which at a certain point we should probably work to avoid because if you have a lot of code on the right side over here it easily becomes less readable so now let's go ahead and recreate this using the guard Clause pattern and this actually requires us to create a function and your code almost always should be inside a function so this isn't the problem so what we will do here is Type in Dev go online so we have a function that just wants the user to go online now instead of doing that nested nonsense such as if this if that if that and continuously indenting down the line we're going to do something a bit different and we're actually just going to be doing the exact opposite we're going to check that there's no connection so if there's no connection we're going to print no connection and we're just going to return so instead of checking that there is a connection and continuing we're doing the exact opposite and exiting the function prematurely if it does not meet this condition so all the code under that must satisfy this requirement before being executed next we should check if the user has paid so if not paid we're going to print user has not paid and we're going to return we're going to do the exact same thing then we're going to check if not internet then there's no internet obviously so print no internet and finally let's type in if not online we're going to print you are offline and I forgot to return from these so return and return so here we have four God statements and each one of them returns if the condition is not met and of course we want to execute a line of code if all the conditions are met so down here we'll just type in print you are online so this is an example of the god Clause pattern we're checking that there is a connection by checking that there is not a connection and what that means is that if there's not a connection we're going to refuse to continue on with this function otherwise we're going to go to the next check and if that doesn't work we're going to exit the function as well now I'm going to create another function that's going to hold the exact same code AS from earlier so we can compare the two and I can explain a bit better why this approach can be preferred in some scenarios so I will just name this one go online if so we know it is the if else version and I'm just going to paste in what I had from earlier so here we have the same code as we are executing down here but it can be harder to read or harder to visually understand what's going on one of the biggest issues I usually have with having so many nested if else statements is that I very often mess up where I want the else block to be and I mean this can be avoided if you cover each one of these conditions it will give you an error but if you do not have else for each one of these if statements it's very easy to put the else on the wrong block I mean I can put else here on if internet and it's going to say user has not paid and if I reverse that it's still going to work so sometimes you can easily make more mistakes when you're using this nested if else version and that's a big reason why I'm not a fan of nesting if else statements in Python it's because it becomes so easy to lose track of what you're doing especially when you go multiple levels deep now with the god Clause pattern we do not have the problem because we are not indenting so much and we're handling the condition as soon as it happens in the block that it is happening we're not going multiple layers deep and working hard to find out which else blocks belongs to which if statement we have it handled exactly where it's happening so in one way this can be considered even cleaner but of course this comes at a price in every single one of these checks we need to include not and we need to return so that's some extra code that we need to write to make sure that we can make this more readable and I know some of you might be saying why don't you just type in connection and paid and internet and online all at the same time well that wouldn't allow you to specify else for each specific scenario so we cannot do that in this case of course if we didn't care about what happens in each specific case we could easily just remove all of that and say if connection and paid and blah blah blah and we just remove all of that that will work just fine but in the scenario that you do want to have some better handling or some more specific handling on the conditions that you are checking you're going to want to use the god clause in many cases because it keeps things short and concise it doesn't go all the way to the right over here or doesn't have a lot of complicated nesting it just gives you that straightforward if there's not a connection there's no point in continuing with this function so handle whatever you want to handle here and exit the function prematurely you can also throw an exception or whatever you want but you just make sure that you handle that condition early on but I would say that if this was shorter definitely go for the usual if else nesting maybe two layers deep is fine but if it starts becoming too long I mean this is an extremely simplified example of course you might have blocks of code or more complicated checks so this can become quite long but if it's only two if else blocks then maybe you don't really need to use the god Clause I just think it looks a lot cleaner if you have multiple because it keeps everything think essentially on the same indent so we don't have to really worry about going really far out or having to keep track of the indents which even with an IDE that helps you out can become quite confusing especially if you have let's say an ultimate statement at the bottom and what you want to do is print something no matter what happens such as success it's very easy to lose track of where you're printing this we're printing this of course on the wrong line this should be outside of this if connection block but if you just start scrolling so far down it becomes very easy to lose track of where you're actually coding especially since we want this to be out here and this indentation has actually been the root of many of my problems although that mostly happens for me in nested for Loops so to sum this all up try to avoid going into unnecessary levels of indentation by using the guard Clause because it can be more concise in certain contexts especially when you have lots of if else statements to check in your program but anyways let me know what you think about this in the comment section down below and with that being said as always thanks for watching and I'll see you in the next video