have you ever been in a situation where there's some error that occurs at your customer's site and then as a result of that some other system fails and then total chaos ensues everything crashes including the main service that the customer is using and then you're scrambling and trying to figure out what happens trying to reproduce the issue basically losing the whole day trying to solve the problem the reason that happened is because you probably didn't apply the fail fast principle today I'm going to talk about what the fail fast principle is and how you can apply it to your code Now fail fast is just one principle of software design if you want to learn more about software design principles check out my software design course at iron. codesm mindset I want to start by showing the setup of the code example so we have a main file here which is a backend using fast API that's what we see right here so there's a couple of functions to help us set up things like a SQL light connector and the payment processor doesn't really matter what these are exactly for this example but they're there and then we have some crud operations in particular on employees so we have create employee we have read all the employees we have read a single employee given an ID we have updates an employee and we have delet an employee and then we have a couple of extra methods that are useful for employees like paying the salary that's kind of useful if you're an employee right and that's basically it so it's a very simple HR System and then each endpoint in the API has controll functions that are defined in another file employees. pii so for example this has a function that creates an employee and if something goes wrong this will also raise an exception now currently not all endpoints in this backend follow the fail fast principle in particular create employee update employee and pay salary so what is the fail fast principle well there's two aspects to it the first is that you should do early error detection so catch problems issues as soon as possible and then stop immediately the second part of the principle is that the error messages that you should return should not be cryptic and generic they should be specific so that you know what is actually wrong with what you did the reason you want to feel fast that you don't want failures to be hidden so that later on they're going to break other things you can apply this principle to many different architecture not just client server architectures though it is quite common there because of its nature of returning data and handling requests that may return data that can harm the application so what's failing fast is going to do is that it will ensure that the system is going to prevent localized errors from spreading and breaking other things in your application which is exactly the example that I gave at the start of the video early problem detection is an example of what goes wrong in create employee in particular related to this salary field here so as you can see we simply create the thing there is no validation whatsoever and that means you can input basically any type of value including negative value so this system allows employees to have a negative salaries basically means that you have to pay to work here and nobody wants that right and having Nega negative salaries in the system can have lots of annoying complications like the payment process are crashing because it can handle negative numbers for example so instead of storing a negative salary and potentially crashing other systems later on you can add validation here to avoid the problem altogether fail fast and the same goes for updating an employee so also there you set a salary that you need to check that it's positive here you see an updated version of the code that actually has a validation check so if it's less than zero then we're going to raise an HTTP exception what you see is that the exception is precise so there is detail we explain what the problem is we say well this value is incorrect you need to provide a positive decimal value and we also Supply a suitable status code not something random like 418 or something so how do you resolve this in common well an important thing you can do is automated testing when you build software you have to ensure that these types of issues are called early on so you need to test your functions your classes with the appropriate fixtures test values to make sure that they don't break under a certain conditions and you can write those unit tests yourself you can also use Library like hypothesis to generate that kind of testing data for you there's a lot of possibilities there but testing is really important there's several other Pros to the fail fast principle the first is that it can actually save you some money in that if you catch errors early in the execution it means that any expensive operations that you need to perform you don't need to do so that's going to save on compute cost a second Pro is that failing fast means that are more transparent to the users and not only the users but also the developers so if you see something is wrong you have a specific error message then it's also easier to find the problem when you want to fix it and finally it's more secure it minimizes the risk of different DS attacks and by avoiding cascading failures in your system you also avoid issues with data Integrity just to name a few things now there's also a con to using the fa fast principle which is that it may appear to your customer that your system is more fragile more Fini key that it returns an error more quickly than other systems might do though this is actually a good thing because the system is more rigid and explicit it also means that you reduce the chance of having issues with data integrity and in the long term that is going to provide a better experience for your customers so A system that fails fast should catch problems detect errors as fast as possible and return a sensible message to the user and this going to help you build software that's more robust and easier to debug in particular example I used Fast API to build my backend if you want to learn more about how to build a back end with fast API check out this video next thanks for watching and see you next time