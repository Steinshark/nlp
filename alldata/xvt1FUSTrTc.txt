this video was brought to you by IND dentle IO learning python Made Simple how's it going everyone in today's video we're going to be talking about a method called method caller and this comes from the operator module so from operator we're going to import method caller and the reason I found out about this was because not so long ago I made a video about item GAA which also comes from the operator module and these methods are just really cool so now I want to share with you what method Cola does and to get started we're going to create a list of names of type string and it's going to contain Bob James Billy Sandra and Blake and what we want to do is filter it we're going to try to filter it by all the names that start with B so right below that I'm going to be using the method caller to call a string method on each one of these names and we're going to call this one starts with B and that's going to be of type method color since when we use the method color it returns a method color object back but inside here what you want to do is insert the method that you want to call on the type of object that you want to call it on for example here we're going to be working with strings so what we want to insert here is a method that's compatible with strings such as starts with and if you're curious about which methods you can use with strings just type in stir and use dot notation and you'll see a lot of string Methods so you just want to make sure that you select one that is valid and right after that you get to pass in the arguments for that method and here we want to check for names that start with B so kind of like with currying or with the partial functions that you get from fun tools we are solidifying all of this information into a single method Coler and with that we're now going to create a filtered object which will be of type filter and that's going to filter all the names that start with B on our names list and of course to see the results we need to convert the filtered object to a list so here we'll type in list and insert our filtered object and what we should get back are three names that start with b and we can also use this example with sorted for example we can try to count all the A's in each name and return a list sorted by the amount of A's in each name so count a of type method Cola is going to equal a method Calla that uses the count method and inside each string we're going to count the occurrence of a then we can print that it is sorted and what we're going to pass down here is the list of the sorted names and the key is going to equal count a so it's going to apply this this method caller to each one of our strings and when we run this one more time we're going to get them sorted by the amount of A's in each one of these names so Billy and Bob contain zero James and Blake contain one and Sandra contains two so it's sorted them in an increasing order now you're probably asking just like you asked in the item getter video why don't we just use a Lambda here well there are actually two reasons not to use a Lambda first the lamb the syntax can be quite confusing in certain scenarios although that's not really a good reason that could be seen as a potential reason not to use a Lambda second from what I understood in the comments using both the method caller and the item getter from the operator module is much faster than using the Lambda expression and I actually did a few tests to try to confirm that so I'm going to show you exactly what I did and of course if I did anything wrong in my test please let me know in the comment section down below but for now I'm going to get rid of these two lines so we have some space and I'm going to insert the tests and the first test or the first snipp of code I'm going to run is a warm-up just to get The Interpreter up to speed then I have the method Coler test that uses the method Cola with all the names and I have the Lambda test that uses the Lambda equivalent with all the names both inside the filter function and to actually perform the tests I'm going going to import or actually from time it I'm going to import the repeat function and at the bottom what I want to do is first perform the warm-up and it's going to run this statement 1 million times and it's going to repeat that test five times and that's going to be returned as a list so whatever was the fastest time out of those five times we're going to grab that using the built-in Min function but we don't really care about that result that's just a war War up The Interpreter what we actually care about is the method caller time and the Lambda time so we're doing the exact same thing we did with the warm-up but with the actual functions so here we're using repeat with the method call a test so we're running that 1 million times and we're repeating this test five times and if you're curious about where I'm getting all those numbers from you can just hover over repeat and you'll see that the default for repeat is set to five and the default for number is set to 1 million then of course we want to get the fastest time so I'm calling Min on this repeat function and we're doing the exact same thing for the Lambda time then all the way at the bottom I'm going to print the method color time and the Lambda time and when we run this what you should see is that the method color time was slightly faster than the Lambda time and actually I really don't like how this looks like I might actually round this a bit so what I'm going to do I believe we can do this do 2f or actually 3F and this is when the FST string formatting syntax really becomes quite ugly and there we go now it looks much cleaner and it's much easier to read as you can see the method Coler time was slightly faster than the Lambda time so that could be one of the reasons you would want to use method Coler or item geta over a Lambda expression but as always I encourage you to test both approaches in your own code base and to never trust optimizations blindly from the internet without testing it in your own code but at the end of the day if you're not running your script millions of times pick the option that is most readable for you all I wanted to do was share with you that something like method caller existed because I think it's quite cool and I don't know how it went so long without realizing all of this stuff existed in the operator module so I'm just very excited to share that stuff but yeah that's actually all I wanted to cover in today's video do let me know in the comment section down below whether you found anything to be particularly interesting or whether you have any information to add on top of this but otherwise as always thanks for watching and I'll see you in the next video