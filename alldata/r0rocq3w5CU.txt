over the last couple days there's been a lot of talk about this rust issue in Windows and people are saying it's a Windows issue and not a rust issue so I'm very curious about this so we're going to look first at the nist report and then we got a couple other ones that are going to try to maybe break it down for us in a more simple term uh but let's first read this thing rust is a programming language rust uh the rust security response working group was notified that the rust standard Library prior to version 1772 did not properly Escape arguments when invoking batch files with the bat and command extensions on Windows using command ooh okay okay if you don't know command is um that's how you just run like a another process you can get some sort of child going right there it's like the same thing as a node node spawn uh an attacker able to control the arguments pass the spawn process could uh execute arbitrary shell commands by bypassing the escaping the severity of this vulnerability is critical for those invoke uh for those who invoke bash files on windows with untrusted arguments no other platform is uh or use is affected okay so this is this is not necessarily people were saying that this is a Windows bug but it doesn't sound like a Windows bug this sounds like a rust implementation bug shells are a mess on window this is a Bobby table's issue this is genuinely a Bobby table's issue little Robert is is this this is not a Windows issue this is a rust issue every imple did it wrong oh it's a legacy Windows issue oh interesting okay everyone's saying it's a legacy Windows issue okay hold on okay okay okay okay okay the rust command ARG and command args API state in their documentation that arguments will be passed to the spawn process as is regardless of the content of their arguments and will not be evaluated by the shell this means it should be safe to pass untrusted input as arguments on Windows the implementation is of this is more complex than other platforms is this how we say windows skill issues you know so Windows is a touch more uh complex when it comes to um the implementation of this thing because of the windows API only provides a single string containing all the arguments to the spawn process and it's up to the spawn process to split them most programs use this uh standard C runtime arcv which in practice results in a mo mostly consistent way arguments are splitted one exception though is command. exe uh used among other things to execute batch files which has its own argument splitting logic that forces the standard library to implement custom escaping for arguments pass to batch files unfortunately it was reported that our escaping logic was not thorough thorough enough and it was possible to pass malicious arguments that will result in arbitrary shell execution due to the complexity of command exe we didn't identify a solution that would correctly Escape arguments in all cases to maintain our API guarantees we improved the robustness of the escape code and change the command API to return an invalid input error when it cannot safely Escape an argument this error will be emitted when spawning the process the fix is in Rust 1772 uh note that the new escaping logic for batch files s on the conversion side and could reject valid arguments those who Implement an escaping themselves or only handle trusted inputs can uh on Windows can also use command extended raw ARG method to bypass the uh standard libraries escaping logic okay so it really was an Oopsy Daisy on the rust side people keep you guys keep blaming windows for this one this sounds like it's this is just simply that rust didn't do this not only rust that's that's fine no one said it's not only rust but this is a rust problem they fixed it it's their issue yeah if they were able to fix it help me understand why you guys keep saying it's windows can I just throw something out here if you run into this problem that means you're using Windows and if you're using Windows that's your fault man okay it's not my fault you're using Windows so guess what I don't know what to tell you you're using Windows I'm sorry that it sucks okay I'm sorry that that sucks I know Elden ring is awesome and I own Windows machine just to play Elden ring on it but you know what I don't develop on Windows okay I avoid it like the plague if possible I stream and play Elden ring from Windows because let's just face it audio and video better on better on Windows okay I don't care what you you Arch nerds have to say about it I can I can I can get my camera driver to work on it I just have to you know sometimes I have to fix some weekend updates I don't I'm not going to do it I'm not going to do it I'm sorry I'm going to turn on Windows and it's just going to work I mean this is actually really interesting this is super interesting I because again I I think what this highlights is is the more interesting problem with rust which is there is some level of safety you can guarantee right um but at the end of the day rust is still made by people which are inherently unsafe that's why you can have there that's why there currently exists that fundamental flawed rust compiler problem where you can actually create buffer overflow so even the memory safety isn't true if you do a certain kind of like super Jerry rigging of lifetimes and it's just like the craziest function ever but it effectively is able to cast any any any piece of memory from its lifetime to a static lifetime which is not possible but apparently it is possible and able to then use that throughout the rest of the program which is kind of interesting issue right and so you know when I see these things what it just reminds me of is no matter how hard you try you are still the one writing the code and you will still make mistakes you can still leak memory and rust it's not hard it's a hashmap hashmaps are super easy to leak memory with you can still have lots of critical flaws you can still Implement security violations with rust right 100% of the time you can still goof it up and make giant security problems real world uh programs have real world problems no matter how much you use rust right it's just simply it's a it's attempting to erase a class of problems and that's one of these problems that I have with it like when you watch when you look at the rust survey you see every single year I bet you could bring it up right now rust survey or results for me this is like the biggest cope of rust right once again the top reason employers of our survey respondents invested in Rust was the ability to build relatively correct and bug-free software like yo dog I hate to tell you this but your software is not bug free just because you have ownership doesn't mean you're not a bad programmer you're still bad okay you know what if if rust was a bug-free experience why' they real question why why did they create a test sweet why would they create testing tools honestly why would you test your code if you could write bug free code I'm waiting for a proper answer here I write bugs just to feel something now that's the proper answer no no disagreement here right I know it says relatively correct it still terrifies me okay someone said you skipped over the word relatively you know what I say rust allows me to write code and I probably put a bunch of bugs in it I don't care what your software is I don't care what your text stack is I don't care what third party Services you use if you come into it with a mentality that your code is going to be less bug riddled you're stupid okay sorry that's it the end bugs are a constant and if you ever think that somehow you are going to magically not have as many bugs You're simply wrong and it's going to make you write shittier code because you think you can somehow accidentally avoid bugs because you're now writing in this magically safe code types just erase a simple class of dumb bugs right you can't actually pass a string to an INT function right okay good like we're not in JavaScript land okay that's fine it's proven there's a critical bug every 500 to 2,000 lines in a big code base like not surprising at all like even though I have I don't know how you prove this I have no idea why there's that range it sounds like a completely madeup statistic but I will say that I believe it without any proof without any proof I believe it is Pro QED draw the Box submit it to a math magazine and people will say it right bugs decrease with time not correctness yeah that's fair the moment you use div over div euklid yeah there's so many good ones so many good ones I will reduce a lot of runtime bugs uh we'll stand we still have uh logic errors but a big category of stupid bugs are gone I'm not sure what big category is of stupid bugs right I'm not sure what stupid bugs are on because what I personally see is a bunch of anytime any application gets sufficiently large ref ref cells and me Texas as far as the eye can see Raku is a bug free programming language that's because it's a human free programming language Raku is the only Raku is the only language in which you read that someone once wrote a program in it okay what's interesting is physics is the most absolute rule driven runtime environment that exists and we still build cars that kill people it's true uh CSV oh yes I did see this this is so this is the one that I was talking about so this is where you can effectively take rust and you can cast its lifetime into from a from a relative lifetime into a static lifetime it's it's it's extremely confusing let's let's find this uh lifetime expansion there you go that's what I'm looking for like look at this look at this beautiful code it just expands it it goes from small to Giant and it just causes buffer overflows seg faults everything right it's pretty amazing it's pretty amazing that someone made it but it's even more amazing that whoever made it trolled so hard trolled to the absolute Nth Degree that you have this the Blazing fast me memory vulnerabilities written 100% safe rust blazingly fast and then where I got my favorite license ever from is from this crate which is the good luck with that public license copyright every one except the author terms and conditions zero just do whatever the you want long as you never leave a Trace to track the author of the original product to blame for for or held responsible here by the way here's a fundamental flaw in Rust please you're never allowed to give me credit I don't ever want to be told what to do Preamble the author has absolutely no clue what the code in this project does it might just uh work or not there is no third option that's a Boeing engineer doctor that is Boeing engineer Doctrine anyways okay so this is actually super interesting that this rust bug exists um command. exe that's funny that it has its own Escape that's like such a pain in the ass by the way the fact that uh that that that command exe has its own escape and how it handles like how it handles its own you know its own arc parsing in comparison to every other programming like genuinely that has to hurt a little bit the name is rust is sound safe and relatively bug free do it