I hate what we're about to read okay this is cursed from the get-go all right are you ready for this yes and guess what it comes with your favorite editor vs code this post introduces device script a professional typescript developer experience microcontroller such as the RP 2040 or the esp32 full list the professional typescript developer stop it no we're not gonna stop it we're gonna keep on going we're gonna keep on going no more saying no I want everyone to say yes I want you yes okay I want you to be excited yes this is coming up next just hold on what is typescript someone gave me a great tweet this morning can I we're gonna we're gonna go off we're gonna see if I can even find it I don't even know if I can find it someone someone gave it to me so good I I think I'll be able to find it right away ah it will svelt doesn't pass new references all depends on your implementation if your config object is defined in line the reference is always the same if it's in the let options the variable and reassign then it's a new ref so even svelt doesn't care about references LOL gosh Prime is Right javascript's a mess that's the definition of typescript you get types with that edio what's typescript typescript is Javascript with Syntax for types it's become very popular in web and node.js development it's also great language to build embedded applications yeah garbage collection a lot of ESP it has a rich type system for static analysis and tooling what have you heard of any async await for asynchronous execution tree shaking okay people you gotta quit saying this you're not allowed to talk about tree shaking in JavaScript okay you're not allowed to do that you're not allowed you're just you're not allowed to talk about it okay you're not allowed to talk about it you're just you're simply not um JavaScript while true okay okay there we go just that node Source test boom uh let's go like this and throw it in here throw it in this vmrss bam bam bam if you take 42 megabytes just to start up your basic environment and node your extra couple hundred lines of JavaScript that you tree shaped right out nobody cares okay the amount of data you're adding to the environment is negligible in comparison shut it well I guess if you have a billion lines of npm modules then yeah okay I get it uh anyways uh typescript development is also very well supported in Visual Studio code with great autocompletion debugging and other goodies uh device script equals typescript on your MCU the goal of device script is to allow developer familiar with tightrope developments to start building embedded applications keep most the goodness of typescript but uh but keep things small and efficient to run on mcu's yes it stands for Marvel Cinematic Universe it does it actually does Blinky let's take a look at a blinky program all right device script is a program is typically starts by importing the necessary functions in this case very well uh the we import the pin mapping of the Pico and the function start light bulb uh that will be used to map a light bulb service on a pin we get your pins we get your light bulbs note that one does not typically type these uh in Visual Studio code or type these in Visual Studio code will suggest them and insert them automatically code tip everybody oh we're about to get the hell coming up the next uh step is to mount the light bulb server on top uh of pin one device script uses uh Jack DAC Service as its Hardware abstraction layer hell in this case the light bulb service is defined in the jackdack service catalog the start light bulb function returns a client that can be used to interact with the light bulb server now remember you're creating objects look at all this look at all this memory you're creating you know that's the thing is Javascript develop developers aren't ready to count their memories they're not ready they're not ready in Visual Studio code you're uh you'll benefit from autocomplete okay stop talking about the wonders of TS server which is a horrible implementation of LSP that's completely hacked together that was used Microsoft literally invents LSP and the first thing they do is to get it completely wrong by TS server okay I don't get it stop bragging that it works because it is a piece of sh and guess what fantastic yeah guess what oh wow it Auto Imports so does every other LSP ever okay we get it we get it okay I'm too negative I'm sorry I'm just I'm hot and bothered because I know for a fact I'm about to read the squeal versus cascading style I squeal okay uh next we start an interval every second if you're familiar with JavaScript this is done by using set interval Global function notice that the Lambda Arrow function passed so the set interval is marked async you realize that means every single time you return a promise which means every single time this function is called You're creating more memory that needs to be cleaned up by a garbage collector I assume it's garbage collected this device script does people that do people not know these things if you're programming [Music] this allows us to use the await keyboard keyboard what uh in typescript get the hell yeah keyboard uh we read the state of the light bulb by access accessing the intensity register which maps to the brightness from zero to one for the light bulb interacting with the J the Jack Dax service is always an asynchronous operation the service might be on a different device connected with a cable or might be i2c message Etc so this is again this is the death by abstraction this is literally death by abstraction right you gotta pull uh so it has to be awaited using a weight uh this allows the Febreze to run while we are waiting uh for the read to return set async oh yeah let's do some reading baby another promise another piece of memory created right here look at us go we're creating so much battery When developing his Visual Studio code you can use simulators for your Pico and sensors in the debugging with breakpoints variable views Etc the screenshot below shows the programming so that's very nice I mean I've done very little debugging with an actual visual debugger for embedded stuff I did have one with arm air workbench back in the day about 12 years ago it was pretty good but it was C so it was always hard you know when you're building your own network driver and see and you're building your own custom Network protocol across ethernet uh you know it can be a little bit hard writing your own TCP sliding window algorithm you know what I mean and so I get the value of a nice visual debugger um based on the value brightness we toggle the value and write the new value brightness uh all this good stuff look at all that good stuff write all this good stuff oh look at that we get another we get into more promises um anyways the full annotated source code is here okay cool look at all that good stuff oh working with Hardware uh so far we've been working and debugging uh using simulators it's time to move on to hardware and try things on the metal grab a raspberry Pico an LED and a resistor to assemble the hardware remember that gp1 is labeled uh two on the silk wow though you'll notice gp1 bottom oh look at that look at that breadboard hell yeah love it now that we have the LED in place and the Pico connected to the computer we can start by flashing the device script runtime on the Pico this is one time operation you'll let's see you will only have to update the device script compiled bytecode in the future okay flash firmware let's go once the firmware is okay I mean this is a great experience right here right like I can like this right can we all agree that this is great cries and irq right like you can just like flash some firmware you do a little bit of cereal uh [Music] uh it does a little run to bug flash it serialize it and debug it I mean it's a good experience uh better tooling better productivity at the time of writing this article it turns out that I had plugged the LED backwards and nothing worked of course nice the debug uh the debug to debug this issue I was able to use several tools provided by a device script console I'll put live inspection through the device device history debugger I was able to assert that my code was correct and the wiring was probably wrong very quickly so in other words you consoled by consoling you knew printf debugging is one of the greatest things ever I just want you to know right now that this is almost uniformly the best way to do this uh the developer documentation for device group contained more example of usage we are looking for feedback for the community device script okay cool code do all this credits goes all right here you know like I remember when I went to uh I went I did a talk I think in 2016 in a nodeconf EU about no more Json using flat buffers for performance speed and amazingness and I still remember to this day on my ride there the person next to me was talking about building uh iot all with JavaScript and I remember I remember thinking huh that seems kind of crazy it's it's it's crazy that it's still around and it's just it keeps going like it doesn't stop it no matter what that rule where anything that can be written in JavaScript will be written in JavaScript it's just true it cannot be stopped it is I don't know what it is what is this how does this happen you can't kill it with fire it won't stop Brendan Ike in a seven day fever dream or a 10-day fever dream depending on what lore you look at writes this language in which is now being ran on Google Hardware how did this happen this is definitionally the wrong tool for the job like imagine how much further an ecosystem could be if you just invested a smaller amount of time into anything else you know what I mean why are you doing this to us I don't know I you know I love the idea I love that you're getting into Hardware keep doing it it's a great time but I strongly strongly recommend using a different language for it I think that this will work until it completely doesn't work and then you're in a very horrible position the name is the primogen