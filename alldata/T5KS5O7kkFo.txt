optimizing for developer Cycles not CPU Cycles also don't forget that airfs save 400 million dollars over the course of three years optimizing for CPU Cycles you know maybe there is a time maybe just saying maybe there is a time you want to think a little bit about CPU Cycles just saying I might you know whenever I see these articles before I even read it you know I feel like I get the snap judgment or it's just like I already know what this article is going to be about but you know maybe we don't maybe we have no idea but uh I had a good buddy that I'm working with at Netflix and he said the funniest thing uh that was probably the most astute like observation about DX modern DX which is if you feel it's better then it's better Modern DX right that's that's modern DX if you think if you feel that it's better that's how we Define modern DX I think and I think that's truly the best way to define it if it feels better it's probably better DX right all right performance and software development matters less than you might think I bet that you waste plenty of CPU cycles and memory for zero good reasons somewhere you aren't looking at and wouldn't look at to buy intention well that's why you use a inspector right you do a little bit of profiling you see where things are being spent you understand stuff example binary versus textual encoding today I had a talk to a fellow developer who argued that binary encoding is faster than textual he isn't wrong binary encoding means less work to the CPU the talk was about an application that received messages around 100 bytes a hundred bytes once a second from around 20 to 30 iot devices not becoming more in the foreseeable future via mqtt okay so probably I mean I agree binary is always better text technically is binary but it's a representation on top um but I assume this is like some sort of Json not Json but you know iot devices typically have really low power so it's always good to avoid it's just on this is why Deku is so fantastic for today's PCS 2023 that's a piece of cake even for the weakest ones the application does more than receiving those messages but still it's literally nothing yep fine reasonable agree a much bigger problem is that binary encodings lack a lot of standard tooling look at all the standard uh Unix utilities like said grep and Cat and many more that just lock uh out of your toolbox with binary Coatings sure that's that's fair this is a fair state this is actually a very fair statement that uh using standard tools that operate over text will not operate over binary encodings agreed I'm I'm on your team you lose the inspectability of messages and network traffic with tools like a Wireshark when things go wrong or you need to find bugs um that's kind of funny I guess in some sense because Wireshark literally takes binary encodings and displays it to you in a nice way so I mean I do agree that when it tries to convert your binary into some sort of ASCII utf-8 or whatever it does you can't read it because it's just binary but yeah okay when a stream of data is text you just look at it and it's most likely makes sense of it not with binary sorry Unix has the philosophy text as the universal protocol for good reasons okay okay okay take away optimize for developer performance not Hardware performance developer costs more than CPU Cycles in most cases and when you spot a bottlenecks do your homework and profile the application no uninformed gut feeling refactoring to make code faster completely 110 agree with this statement right I cannot agree with the statement more which is you should never refactor your code for performance without knowing why you're refactoring for performance 100 but there is something to be said about writing code AS Casey Mark thought he says uh just non-pessimized like writing code in such a way that's just fast because you think through things you don't make needless copies you don't do these things like the JavaScript ways to throw in the three dots right every time you get some object you're like immutability is the best way for software development and so you just copy all over the place and so is that the better way to do it I don't think it's personally the better way to do it I'm not buying that it's better DX um and so it's like you writing pessimize code plus you're writing uh I I don't think you're writing any better DX code right so stop thinking about performance beforehand every time you write code and you feel you need to make the fastest solution or introduce some clever pre-calculated variable think twice I do agree with this as well I do agree with this uh for the most part as well I never try to make something fastest fastest is hard to do that's hard to do it is it's just truly hard to do since a lot of good software development advice today and I'd call it state-of-the-art knowledge Advocates against premature optimizations it's still impressive that these performance discussions with colleagues never vanish and perhaps it won't ever Fair uh I still catch my uh self wanting to optimize where there's nothing to optimize for now knowing this feeling and not and being and being able to suppress it I'd consider myself healed from premature premature optimization disease okay so here's one problem with this kind of thing as if that's how you say your name I have no idea but uh the one problem about the statement is this is also how you get JavaScript on a server right this is also how you can rack up your your costs as you grow if you actually make a successful product that goes from no users to hundreds of thousands of users all of a sudden these these decisions do cost a lot of money and then you can't rewrite it and so you are stuck with larger higher cost bills in which you cannot undo because the undoing process is a lot more expensive so there is some route of going okay how do we build this so that it can be mostly optimized and when we need to we can optimize it but at the same time we don't have to worry too hard right so good a good good argument for go on the back end I know a lot of people want to just be able to write a singular language they want to be able to write components not knowing whether they're on the server or you know on the client I get that that's a very hot thing to do uh you know but it comes across everything comes at cost and so that's the hard part is what is the future you're predicting and build for that future so if you think okay yeah like your 30 iot devices that ping you every second and there's like 13 20 to 30 of them and that is it that is the future of you why are you optimizing that we all know that that's that's a non-optimizable situation you don't need to don't even think about it right but if your goal is to attach new Idaho Visa you know iot devices all the time maybe at some point think of a way to have some sort of zero allocation scheme and just put that in from the beginning it's not hard types are not hard right you just gotta solve the problem you want to solve what is the problem is what I'm trying to say and so that's just my personal take on this I think it's the right take I can be kind of convinced either way I think in some sense for this one um you know what I mean uh I usually take the expected usage 10x the low test against that this is truly not a bad way to kind of do it like do you fall within the 10x bounce right because what are the things we like to say at Netflix which I think is a really funny phrase is that we did not plan for overwhelming success and because we didn't plan for overwhelming success it actually cost like a whole series of issues things we had to solve things we had to think about and that actually causes uh it causes a lot of problems right it causes a lot of things that uh you don't see coming because you didn't plan for it to actually happen a certain way and so kind of just an interesting world to live in I don't know um do I work at Netflix do I work at Netflix hey someone answer for the guy do I work at no anyways um I like the thought behind the article which is performance isn't number one you just got to be able to know how to gauge it right what is the gauge of performance the name is why are you guys making fun of me I really don't appreciate that you know my feelings are a little hurt okay okay ow are you calling Netflix soy are you being like that why are you being like that it's not even nice at all the private gym