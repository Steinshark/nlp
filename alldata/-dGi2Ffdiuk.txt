hello in this episode we're going to look at two very basic trigonometry problems which crop up quite frequently when making games the first problem is if we have some angle say for example 120° how to calculate a direction Vector from that the second problem is just the reverse operation if we have a vector pointing in some direction how to calculate this angle along with solving these two problems we'll also be looking at how to convert between radians and degrees and how to actually use these trig functions inside the unity game engine all right let's start with a unit circle which is just a circle with a radius of one centered at the origin so if we create a pair of axes the circle obviously cuts the x axis at xal ne1 and x = 1 and cuts the Y AIS at y = -1 and Y = 1 we can also label the angles starting with n degre here on the right and increasing anticlockwise okay now say we have a vector pointing in some direction and all we know is that this angle over here which will label Theta is equal to 120° we're trying to find the coordinates of the point where the vector touches the circumference of the circle since those values are of course the X and Y components of the vector by drawing in these components we get a nice right angle triangle now I want to emphasize that it's technically incorrect to think of X and Y as being the lengths of these two sides of the triangle since lengths of course can't be negative however I like to think of them as representing the side lengths anyway and I'll be referring to them as the lengths in this video since I find it to be the most intuitive picture all right time to introduce three trig functions s cosine and tangent as you can see the S function takes in the angle Theta and calculates the ratio y over the radius cos calculates the ratio X over the radius and tan calculates the ratio y /x so if we want to calculate this y value we can use our s equation to write y / R is equal to sin Theta since the radius of the circle is equal to 1 we can simplify that to y = sin Theta and we can likewise write that X is equal to cine Theta so that is in fact the general solution to this problem our Vector points in the direction cos Theta comma sin Theta in this example we said that Theta is 120° so we can just use a calculator to find COS 120° equal half and sin 120° is about 0.87 before we move on to the second problem I'd like to look at the graphs of the S cosine and tan functions so we saw that sin Theta is simply the quote unquote length of this blue line and cos Theta is the length of the green line from this animation you can see how these values change as Theta increases so plotting the length of the blue line as Theta goes from not to 360° we get a plot of sin Theta we can do the same thing for the green line cosine and we'll notice we get the same curve just offset by 90° from this we can tell that sin Theta is equal to cosine of 90- theta and conversely cosine of theta is equal to sin of 90- theta now what about the tan graph well tan Theta gives us the ratio y /x so it's equal to the Blue Line divided by the green line this means that tan Theta is equivalent to sin Theta over cos Theta anyway way let's plot tan Theta unlike s and cosine which are both in the range -1 to POS 1 tangent has a range of negative Infinity to positive Infinity okay we're going to come back to the tan graph in a moment but for now let's take a look at problem number two in this problem we know the X and Y components of our vector and we're trying to figure out the angle so in this example we know that X is equal to. 71 and Y is equal to positive. 71 let's try solving this using the tan ratio So Tan Theta is equal to YX therefore in this case tan Theta is equal to 71 over. 71 which of course is just equal to -1 let's head over to our tan graph and see if we can use it to figure out the angle if we look at where tan Theta is equal to1 on the graph we'll notice that there are two possibilities either Theta is equal to 135° or it's equal to 315° in this case we can you can tell by looking at the diagram that the correct one is 135° now obviously you won't usually be manually looking up the answer on a graph you'll instead use the inverse functions which are arc S Arc cosine and arc tangent now these functions will just return one of the two possible solutions which is a little bit inconvenient and it's for this reason that many programming languages have got an extra function called a tan 2 instead of taking in the value of 1 X it takes in the Y and X values separately to see why this is helpful let's divide our circle into four quadrants obviously Y is positive in the top two quadrants and negative in the bottom two while X is positive in the two on the right and negative in the two on the left so if we use that a and 2 function passing in 71 and negative. 71 the function can see that the Y value is positive and the x value is negative meaning that the answer must be in quadrant 2 by narrowing the search down to a single quadrant the function is now able to find a single correct answer all right so the general solution to our second problem is that Theta is equal to a t 2 of y x okay so having covered the two problems we set out to solve I'd like to move on to radians as you may know radians are an alternative to degrees as a way of measuring angles the idea of radians is as follows if we create an arc with the same length as the radius of the circle the angle that it makes at the center of the circle is equal to 1 radian if we keep going around the circle you'll see that we can fit about 3.14 of these arcs into a semicircle more precisely of course that figure is pi so n degre is simply not radians 90° is pi/ 2 radians 180° is pi radians 270° is 1 and 1/2 Pi radians and once we reach 2 pi radians we're back to zero knowing this we can easily convert from degrees to radians by multiplying by pi over 180 and to go the other way around by multiplying by 180 over Pi unity's trig functions all work in radians as we'll see in just a bit but first I'd like to point out that if we're creating a 3D game then the convention in unity is that at not degre on the Y axis a character faces forward along the Zed AIS as we increase the angle the character rotates clockwise so we could represent this with a circle like so which is of course different to the unit circle we've been using where not degre represented a direction along the positive x- AIS and the angles increased anticlockwise let's put these two circles side by side the conversion between the two is very simple it's just 90 minus Theta take for example 180° from this circle to convert it we just do 90 - 180 which is equal to NE 90° which is of course the same thing as 270° and converting the other way is exactly the same 90 - 270 equal - 180° which is the same thing as postive 180° keeping this in mind I'm going to go into Unity where I have a simple player setup just made out of a capsule and it's holding little Cube object you can maybe imagine as some sort of weapon just to show uh what the character's forward direction is I'm going to right click create a new cop script and I'll just call this trig test and I'm going to apply that to the player object can then open that up and in here I'll start by creating a public float called angle in degrees and then in the update method I want to get a direction from that that angle so we saw how to do this we can create a vector so let's make this a vector 3 call it direction is equal to a new Vector 3 and now we use cosine and S so mathf do cos of angle in degrees and we need to convert this to radians uh because all of the unity trig functions work in radians as I mentioned earlier so we do that by multiplying by pi over 180 well alternatively unity's actually gone and stored this conversion factor inside a variable called degrees to radians which is a little bit easier to remember so you can just write multiplied by mathf do degrees to radians and you can see this just stores the value of pi/ 180 all right then on the Zed axis for this Vector let's have math F do sign of angle in degrees multiplied by once again math f. degrees to radians all right now just to see what this direction looks like let's draw array so debug. draw aray from transform. position in the direction that we calculated and we can multiply it by some distance say three and then let's give it a color maybe color do green all right let's try that out so press play and you can see the green line sticks out to the right along the x-axis and as we increase the angle it goes around anticlockwise now as I was talking about earlier if we want that direction to point forwards at 0° and increase uh clockwise with the rotation as our character does then we have to do that 90 minus uh Theta conversion so over here before we multiply by degrees to radians uh in Brackets we have 90 minus angle in De and same thing over here 90 minus angle in degrees if we save that now we'll see that it works as expected now recall that when we actually plotted sin Theta and cos Theta we saw that cos 90 minus Theta was equal to sin Theta and likewise sin 90 minus Theta was equal to cos Theta so if we wanted we could remove this uh 90 minus business over here and here and instead just swap cosine with s so make this s on the x axis and cosine on the Y AIS or in this case the Z axis and you can see that this uh is exactly the same thing all right so that was the first problem let's now look at the second problem of getting an angle from a Direction so I'm going to to use the example of getting the keyboard input for the arrow keys and using that to find the character's rotation so say we get a vector 3 called the input Direction so it's equal to a new Vector 3 and on the x-axis we have input. get axis raw horizontal on the y-axis we have zero and then on the Z axis input. get axis raw vertical and we can now normalize that to give it a magnitude of one uh so it's a proper direction vector and then we can move our character around with transform. translate input Direction multiplied by time do Delta time let's just give it a speed of five say and then this should be relative to the world okay so if we try that out let's press play can use the arrow keys now to move the character around okay now to actually set the rotation let's create a float called input angle and we'll set this equal to math f. aan 2 passing in the Y and X components of our directional vector or in this case since we're using a 3D Vector it would rather be the Zed and X components so input direction do Z and input Direction dox and 8 10 2 Returns the angle in radians so we need to convert from radians to degrees of course by multiplying either by 180 over Pi or simply using math F do radians to degrees okay let's then write transform. Oiler angles is equal to Vector 3. up multiplied by the input angle so we're just rotating our character around the y- axis by the input angle if we save that and press play can move around and we'll see that the uh rotation isn't quite corresponding correctly to the input by now of course that's no mystery to us it's this whole 90 minus uh story again so we just add 90 minus our angle over here and that should now work correctly so we move around and we can verify that it is working how we wanted to the last thing I want to mention is that similar to how we could get rid of the 90 minus in this example over here by swapping s and cosine can also get rid of the 90 minus over here by swapping the two components so I can swap x with zed and if we save that now we'll see that it works in exactly the same way okay that is everything for this video over the next few episodes we'll be working on our second mini project to put all the stuff we've covered so far into practice until then cheers