so I'm going to be real with you guys I don't like Turner statements I've never liked Turner statements specifically a bunch of how much you want to bet there's a Hu huge number of them specifically a bunch of these like when I see a statement like this I think that you've done messed up I think that you have greatly screwed up your code and whatever shortcuts you think you're taking you're just not taking the right shortcuts I already knew that was going to be in here because of course it's about turn Aries right and so when I see that and we try to make it more excess to use turn Aries to me this feels like we've gone the wrong direction okay I'm just throwing that out there now let's read this article so that's the mentality I'm coming in with okay it's the mentality I'm coming in with all right just so you know November 13th 2023 Alex rray rat rat tray rat tray rray I'm going to say rray because it feels like when you say rat tray it feels just like can't be that can it can it uh tary formatting has always been a challenge and we finally addressing it in 3.1.0 with the introduction of Novel formatting style all right read on for the journey and the motivation behind this change along with early developer feedback and an overview of curious tary style okay okay please give us the experim please give the experimental turn Aries a try option a try and let us know what you think all right okay introduction formatting nested turn Aries nicely in a wide variety of scenarios is surprisingly tricky challenge absolutely developers have long found them so confusing to read that they end up just refactoring the code into an ugly series of if else statements I don't know if I believe this statement so I'm just going to just I'm again I'm going to lean into this okay is a series of if else statements ugly compared to turnar I just don't know if I buy that because what it says to me is that if you have a ton of if else statements perhaps there's a better way to organize your code and that you're kind of hiding the problem by having pretty turn statements and so this is my big worry is that it just leads people to just crazy code as opposed to more maybe different thought about code like what is the core problem here what are we doing wrong are we effectively needing some like a bje a map that makes more sense to kind of Reason about our code than whatever we're about to get so I'm a little bit worried early returns great way to kind of simplify code I don't know thoughts thoughts really okay okay okay okay hold on hold on hold on just beautiful thoughts all right uh let's see according to the beta testers oh sorry often with a let declaration an immediately evoked or immediately evoked function ex ex expression or a separate function entirely now that also seems kind of that seems wild uh I would also argue that if you're doing an if you're doing an i if at any point within your code to me you've already goofed up like this should be a good example that you already are kind of on the wrong side of things that should be a really just a strong indicator that's why again this is actually I make this strong argument a lot of times and I really want you to think about this argument which is should you have two or four spaced indenting now maybe you like two space you feel better about it but there's a reason why when I program I have kind of a strong 80 column line right here that's not a requirement but it's an indicator to me and I go with four space indenting the reason why I do that is so that I can kind of signal to myself when I've goofed up a little bit when I've gone a little too far on my indenting so by having a four space indent I'm able to early signal myself along with an ad column that I'm just creating really long code and really long code I feel is a lot harder to follow than very vertical code again that is my take you can have your take okay I don't care if you think vertical code is harder I think it's easier I think it's easier to debug I think it's easier to step through I think it's easier to add print statements in okay personal opinion so shut up 80 column is not enough for four space and denting that's the point I'm keeping it between one to two levels right that's why I do it like that's precisely why I do it is Because by the time I get to a third indent I'm now going I've goofed up a little bit now granted I don't write Java facts facts of life I don't write Java all right historical background prettier original naive approach just added indentation to each level of the nested taries worked fine in simple cases but obviously doesn't scale with long chain of nested taries and had other problems I would say that you've the problem doesn't exist the problem exists because we're solving the wrong thing that's oopsies I just clicked the link that's still my that's still my take so in 2018 we replaced the flat uh with that with flat turn Aries which seemed like a good idea at the time but it was not well received the issue was uh let's see the issue asking it to be reverted had well over 500 up votes while we did ultimately revert back to int uh indented turn Aries we wanted to find a better way by the way I'm going to throw something out here okay I know this is a complete ADHD moment but I want I want to say something okay right now we are reading a about nested turn okay you know what I'm actually going to save I'm going to save this take okay I'm going to save it I'm going to save it because I feel like there's a better place for it I feel like there's a better place when we get down to here okay when we get down to here I'll come back I'm coming back I'm coming back ADHD reback in we're Reb backing in over the last few years we've explored the and experimented with many many possible solutions which would be as readable as indented taries in common cases but would scale well uh in a wider variety of situations okay challenging criteria ideally we find one scheme of that would meet our criteria in all cases it should be easy to follow what's the if what's the then and then what's the else that they ma to okay this is good criteria I like this the code should fluidly flow from a single Turner to a chain of two to a long chain of simple cases to something more complex with a few nested conditions most Alternatives we explored failed this test okay okay the syntax in jss typescript conditional Expressions which cannot be expressed with if and normal JS should all feel free uh or should all look and feel the same again this right here should be the greatest ident this is one of react's worst gifts to mankind is to normalize using multi-change turn Aries use a function people okay a function can return null you could think of a better way to do this it's wild okay it's wild that you're doing this okay stop it stop it use a function figure it out all right it should scale to nested tary chains of arbitrary length imagine typescript conditional types with a dozen of alternative cases indented taries clearly failed arguably one and even three have always almost always printed jsx taries in flat but readable format with unfortunately felt unnatural outside of jsx many people in the community were excited about case style drawing inspiration from the match uh syntax from languages like rust or o camel o camel mentioned can we get an O camel mentioned o camel mentioned December 1st Advent of code o camel getting excited December 6th TJ will be at my house te the O camel second most influential o camel streamer on uh twitch will be here and we're going to O camel together o camel our camel okay but it did not mean number two and other goals okay a surprising solution the good news is that we found a formatting algorithm that met our criteria the bad news is that it's novel and thus unfamiliar to most developers in beta test testing this feature we found developers were quite skeptical when they first saw it okay but then after using it for a bit they didn't want to go back all right all right this is good so everyone's saying Oh yay nice uh not convinced okay anyways another developer had to say this my first few hours on the rule I felt a little odd but by hour two I'd used it a few times to solve problems that otherwise would been uh would have been ugly uh would have been ugly refactors to if statements that I'm not going back man this is worrying me so much the state of JavaScript is just I'm I'm actually getting anxiety over what I'm going to have to read I used to hate nested taries good good feelings but I have let's see but I also hate re uh structuring a nice line of code to uh if El statements uh the new rules add an understandable linear if else if else expression to the language and is much nicer than multiple turn Aries as nested branches okay so we felt we had a winning formula but we knew it could be jarring introduction to the community as a result we're formatting behind a temporary experimental okay let's see it just let's just see it styling overview so what does the new style look like here's a quick contrived example uh and the thinking behind curious turn Aries okay uh pet can bark is scary wolf else dog else outer else can meow inner then cat inner else of the outer else probably a bunny okay every line with the uh question mark is an if if you see Fu question mark it's like asking if Fu then every line that starts with the colon is an else if you see colon that means else Fu yes if you see else if you see this that means else if Fu every line with this or this is a then yes okay yes these are all rules of turn Aries uh here's the code RR to demonstrate K style turn Aries all right animal well hold on dang it I mean you inverted the logic though this dang it I really wish you would have kept the same structure notice that he flipped it inside out is scary is now on the inside as opposed to the as opposed to the outside in fact I'm not even sure if they they yield the same results do they yield the same results they don't yield the same results I don't think so if it so so okay so look at this this statement right here if I'm not mistaken if the pet is not scary but can meow you will get this you can only meow no wait that's not it at all okay damn okay yeah okay this is the same this is this does yield the same thing but it's just organized different okay I see it turnar suck I see what's going on here you can see this is a nice concise way to uh to get something approaching matched out I don't think this is nice I think this is if I saw I I would say that you done effed up rethink how you're doing things it's just how I feel our new formatting is fluid a blend of curious turn Aries where the question mark is always at the end of the line and K style turn Aries where the question mark uh is in the middle of the line yeah see the problem here I have is I really have no idea where I'm going with it right this is if this mouse else if can bark else inner if scary wolf dog else if can meow cat Els if can squeak Mouse I mean you have it twice here uh else bunny you know I just don't think we want to write this kind of code I really think we should try to do something a little different you know like if you're doing all of this one would have to ask you've messed up a lot of things right if you're doing this many checks I feel like you've you've goofed up somewhere else right like I feel like maybe you need a function or an interface that's going to say like if only there was a pattern that existed in which normalizes this like say two string or something that you can call on the object to produce this as opposed to whatever this is like I don't like that you're inverting the responsibility to some function on the outside to like determine like stringified type like something about this something about this just really bothers me strategy strategy pattern meant yeah I know it was a strategy pattern that's what I'm saying is that there is a strategy in which makes this easy to pattern out I like it it's a quick brain dump but the problem is is that the problem here is is that every time you add any sort of variation on this you must alter this ever growing line of Turner statements what happened if each one of these functions are expensive this also means that if you have this thing that exists you can't have a variation of types right your type every time you want to add a type it has to be can squeak it has to have can bark it has to have is scary it has to have can meow it has to have can squeak twice right like it has to have all of these things existing on it whereas if you invert it and try to do more of a composition version you just have to have the thing right so to me this is solving a problem I know this is a meant to be an example I understand this but when I see code like this as an example what I'm kind of getting fixated on is that if you're writing all these IFL statements are you sure you're not just doing bad typing are you sure you're not messing up composition that's what I'm saying maybe there's a composition pattern that just works better here as opposed to whatever we have going on does that make sense okay just something give us your feedback we uh we we we like the more readable new default we really hope you can give us the experimental turn Aries um I feel like I'd rather have an es lint rule that's like you can only use a turn AR in a return statement and that turn AR can only have uh like single member call expressions and constants or constant variable return right like I would want it so constrained it's like the complete opposite right I would rather have it so that it's just like brutal brutally tiny where you can use and how you can use a Turner I would want the exact opposite honestly so do I think this is beautiful do I think it's more readable I absolutely think this is more readable this is many times more readable than how people organize turnar today I like what they have done this is good do I like the outcome of this no I don't like the outcome of this at all the name don't give me turn Aries boy okay I don't want it a jet