if you didn't already think that pointers and c were confusing well then boy do i have a treat for you and don't worry i'm going to explain everything and it may end up making your programming career a little easier c plus a language like c but designed for people that like to spend hours debugging spaghetti code but object oriented uses references in place of pointers in certain areas references are like pointers but there are some confusing nuances that get people in trouble so in this video we'll be discussing what a reference is how they are different from pointers and what they are good at and how they work under the hood if you're new here stick around hit that sub button i put out new videos every week on programming topics like this and much much more so what exactly is a reference what does it mean to reference a variable in c plus a reference can be thought of like an alias or another name for a variable that already exists to make a variable that is a reference in c plus plus you use the ampersand in the variable definition and set it equal to the variable you want it to reference so here for example i create an integer i set it to a value and then a reference variable ri which at definition is set up to be a reference to the variable i now whenever i change the value of ri the value of i is also updated i can also pass the variable i by reference by passing ri in its place so here i create a function that takes an integer reference as input the reference variable is updated which then updates the original variable that it displaced is out of scope of that function if you print the value of the reference you actually get the value of the original variable here we print the i variable and then the reference before and after the call to that function both values for i are presented in those cases you may be thinking this sounds exactly like a pointer how are references different than pointers and that's exactly what i thought when i first learned about references so there are some unique differences though that you should be aware of number one references cannot be null a reference must always be tied to a variable that exists number two you cannot change the variable that is referenced by a reference once the reference is associated to a variable it is that way forever number three you cannot do math on references a reference cannot be indexed added to subtracted from etc like a pointer can and then lastly number four you can have pointers to pointers you cannot have references to references so the question is then what are the point what what do you do with a reference the pro of using a reference is that there's less overhead to use them once they're properly set up in c for example using pointers to change the value of a variable through a pointer i have to use this syntax here and what this reads out to is the thing pointed to by px is 5. with references i don't have to even think about it i can just update that variable through an assignment and the compiler knows what i mean so here ri is 5 which updates i without me thinking about it when i realized that references and pointers were actually in the same family they kind of did the same function my next question was how do they work under the hood it actually turns out hey guess what c plus plus people you're not that special all a reference is under the hood is a pointer and let me show you here all right guys so what i have brewing here is a simple little program i want to kind of show you the difference between a pointer implementation of updating a variable and the reference implementation so here we have an intex i set a pointer equal to the address of x i also create a reference to x and then using the pointer implementation and the reference implementation i increment them by one and then i print it right so if our program is sane and it works it should yield three which it does so we're gonna break it down we're gonna use object dump to disassemble this program and i wanna show you what's going on under the hood it's actually pretty cool so we go to main here um if you're not familiar with assembly a watch my other videos hit subscribe but after that um in in this program essentially what we have is a couple blocks of code happening so the first part here is this is the program setting our variable x right it's just the number one so one goes to the one c slot right and then after that it loads the effective address of one c puts it into rax and then stores it onto the stack so that's actually going to be our px that's our pointer 2x if you look immediately below that it actually runs the exact same code it loads the address of 1c into rax and then puts that on the stack that is our rx implementation so what that means is that a reference is literally just a pointer so again what is the difference between a pointer and a reference all that's happening under the hood is that there is a pointer that references the variable all of the protections that go on are happening at the compiler level where the compiler is aware that you can't change a reference and the compiler is aware of how to use the reference in this manner so i think that's pretty cool references or just spicy pointers i wanted to show you guys that before we uh wrap this video up alright guys that's all for now i really appreciate it thanks for watching if you're new here hit that sub button and then go check out one of these videos i got one on pointers it's pretty sweet and then also i hacked my coffee machine see how that went in this video down here we'll see you next time