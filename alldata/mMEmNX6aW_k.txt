do you remember the first time you wrote a recursive function that worked the first time you were able to calculate the fibonacci sequence using recursion you felt like you had unlocked a superpower like you had achieved a new level of programming enlightenment well i was young once too i'm older now and i realize the mistakes that i've made in the past recursion is useful don't get me wrong but on embedded systems recursion is highly discouraged here's why the main reason people hate recursion on embedded systems is because embedded systems typically have limited memory space the stm32 blue pill for example from my previous videos only has 20 000 bytes of ram you may be asking wait how does the way that i write a function in code using recursion affect the amount of ram that my system uses and that's a good question to answer that we need to understand how a function call works at a low low level when a function is called under the hood in the assembly the processor is allocating memory to store the local variables for that function those local variables live in what is called a stack frame this stack frame has enough room to contain every local variable that function may need so here for example i have a function foo written in c fou uses four integers a b x and y each integer is four bytes wide so therefore foo's stack frame will be around 16 bytes long if we zoom into the assembly language for foo we see a subtract instruction is used to make room on the stack for those variables at the beginning of the function now if we do logic inside of the function foo using a for loop for example no extra memory will get used the stack frame stays the same size and the logic runs in the context of the function foo whose stack frame already exists if we do logic inside of this function using recursion however that's where things start to get out of control every time we recurse the stack frame of the called function gets reallocated occupying another 16 bytes of stack frame space even though some of those variables may not get used in the case for our recursion the processor is still instructed to occupy space for them if our recursion logic goes on for too long it is 100 possible that we eat up all the memory on the processor with our stack frames and eventually crash it should we throw recursion completely out the window no of course not but we should make recursive states safer with some easy safeguards the biggest one is to set a max recursion depth by checking how deep your recursion is with every call you can limit the amount of memory your recursion logic uses by setting a max depth so if you're programming on a system with gigabytes and gigabytes of ram then have at it recurse to your heart's content but if you're an embedded developer be wary of the next time you calculate the thousandth digit of the fibonacci sequence on your arm cortex m3 anyway guys thanks for watching really appreciate it hit subscribe for more information like this and leave a comment below and tell me why you either love or hate recursion we'll see you next time [Music] you