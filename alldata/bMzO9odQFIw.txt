how's it going guys in today's video we're going to be looking at how we can recreate the functionality for the spaceship operator in Python now unfortunately this is not going to be anything super technical it's just going to be a simple video regarding what the spaceship operator is and how we can use that functionality in Python now the first time I heard about the spaceship operator was in Swift and it's not really the most useful operator in the world but it's quite cool to have around so in a lot of languages that support operator overloading you're going to see this kind of syntax where you'll have a certain variable and you will compare it using this spaceship operator now nothing here is defined of course so we're going to get a lot of weird syntax highlighting but this part here is what we are looking for and they call it a spaceship operator because it looks like a little spaceship so how does the spaceship operator actually work well obviously it Compares X to Y and if x is more than y it's going going to return 1 if x is equal to Y it's going to return zero and if x is less than y it's going to return minus one so it's a three-way comparison all put into one single operator but that's enough of the theory let's look at how we can create this in Python and to keep things simple we're going to create two variables X and Y and the first one will be 1 and two so those are the values now once again unfortunately in Python we don't really have the opportunity to overload operators without using that weird Dunder method workaround in classes and even then we only have a certain set of operators that we can override so to use the spaceship operator syntax in Python we're going to create a variable called result and that's going to return to us an integer because we only have the options of minus1 0 and 1 and the syntax is nowhere as near as pleasant as the spaceship operator so here we will check that X is greater than y minus X is less than y and that's the entire spaceship operator equivalent in Python and of course we can play around with that by printing the result so here let's compare X to Y and see what we get back when X is 1 as you can see in the console we got minus one because X is less than y but if x is equal to Y we're going to get zero back otherwise if x is more than y we're going to get one back now once again this isn't really the most useful operator in the world and it's quite understandable that python would ignore it because you can achieve the same thing with some simple if else logic but personally I would love to see in a future update python actually supporting this syntax because I think it looks really cool anyway with all that being said as always thanks for watching and I'll see you in the next video