all right bun 1.0 I think it's internally known as the bun spreader I believe is its like code name we'll see button 1-0 is finally here bun is a fast all-in-one toolkit for running building testing and debugging JavaScript and typescript from a single file to a full stack application today is bun is stable and production ready so first off you can install bun upgrade but I do like this feature where you could you don't have to have a bun version manager you're just trying to Peg yourself to the the latest version I do like that but it's an all-in-one toolkit we love JavaScript it's mature it moves fast and it's developer Community is vibrant and passionate I believe dhh would say we're a bunch of hooligans I'm just throwing that out there it's awesome uh however since node.js debuted 14 years ago layers and layers of toolings have accumulated on top of each other and like any system that grows and evolves without centralized planning JavaScript tooling has become slow and complex this is a great statement right here JavaScript tooling is by far JavaScript tooling is the only system that I'm as hesitant to want to work with as cmake it is just no uh Bun's goal is to uh is simple eliminate slowness and complexity without having without throwing away everything that's great about JavaScript your favorite libraries and Frameworks should still work you should need to unlearn the conventions you're familiar with you will however need to unlearn that many tools that bun makes unnecessary node.js bun is a drop in replacement for node.js so you do not need node it replaces node so the first thing you need is no note okay npx bun X is 5X faster I I mean I typically don't care about that type of speed stuff no demand it has built-in watch mode good dot end cross end bun reads uh dot end files by default okay transpiler bun canrod jsts CJs MJS jsx TSX what about ejs but JavaScript was a mistake people um transpiles TSC you can keep it for type checking Babel Babel RC Babel preset TS node TS node esm TSX by the way the people that named the new version of TS node TSX that was just so naughty of you can we all agree that that was naughty all right um bundlers bun is a JavaScript bundler with Best in Class performance and an es build compatible plug-in API so you don't need es build got em uh guys he's using WSL a webpack parcel parcel RC roll up I mean it's good package managers button is an npm compatible I mean I like this okay I do like the fact that this now exists right I love the fact that bun just said you know what F all of you guys we're just gonna do all the things okay there is no such thing as a uh you don't need it Transformers you don't you don't need bundlers you don't need uh all this other crap it's just gonna work just skins Windows to look like Papa eso's friends don't make fun of them okay just let me be ignore me I just want to be able to pay Bill Gates money bun is a fast JavaScript runtime it's pragmatic design makes life as uh as a developer less frustrating and more productive and more most importantly fun node.js compatibility but is a drop in replacement for node.js that means existing node.js applications the npm packages just work in bun bun has built-in support for node apis including FS path net dur name process I do love that I kept their name fun are we toddlers now yes we you work at adult daycare okay you work at Adult Day Care where we feed you we take care of you we tell you you're important we ensure you don't receive any harsh feedback we take away all the negative things about work and then you go on Twitter and you complain about how capitalism is ruining everything okay that is what developers do and you need to understand that all right while perfect compatibility with node.js is it possible looking at you node V8 tweet It Bun can run virtually any node.js application in the wild bun is tested against a test Suite of the most popular node js packages on npm server Frameworks like Express KOA and Hana just work as do applicate applications built using the most popular full stack Frameworks collectively these libraries and Frameworks touch every part of the node.js API surface that matters well they didn't match and fastify does fastfy do something naughty all right speed but it's fast uh fast starting up is 4X faster than node.js this difference is only magnified when running a typescript file which requires transpilation before it can be ran by node.js okay fair I wonder what bun did to make it so fast does it it must does it do its own transpilation it must do some sort of Zig transpilation by the way TSC is pain in the ass but it must do its own transpilation right they're using Zig as my guess they're just using Zig and doing it that way right why why it should be fast they're using they're just using uh bun is built in Rust no it's built in Zig so my guess is that they're they're just running over the source file in Zig so my guess is what it's doing it's it it's just web it's webkit yes but my guess is okay I did make this this was my last okay this is not what it looks like okay trust me this is not what it necessarily looks like okay I do a lot of things in my spare time and I don't need you making judgment calls about me okay okay uh my guess is it does this right because whenever you hand a file shut up whenever you hand a file in right whoopsies uh you pass a file into into a program right so you'll have something that looks like uh you know like bun file right and it does it reads it line by line right or it reads it buffer by buffer and it probably just has a running parser that every time it encounters like a colon and a type it just strips the type if it has a type it probably just strips that as well right it just goes through and just runs in and as it just does like a live transform a map over it and just removes all the typescript stuff and that's it because remember typescripts is just JavaScript and it probably has to do a basic transform on enums right but enums is really easy it's like awk yeah it's just a phase Mom it's just a phase mob unlike node.js and other runtime uh run times that are built oh I just lost myself uh that are built using a Google V8 engine bun is built using Apple webkits engine webkit is the engine that powers Safari and is used by billions okay never ever use the phrase used by billions devices every day because first off probably not but second off second and the more important thing is that you sound like Java don't ever Jared Jared don't ever sell bun like it's Java okay you don't want to be on that okay you don't want to be there because first off Java's ran on three billion devices how many devices are you oh probably not three billion okay but not as good as Java as what I'm reading it's fast efficient has been battle tested for decades they are in the billions I know Apple users are not in the billions like at all they're not even close to a billion bun has a JavaScript transpiler that's baked into the runtime that means you can run JavaScript typescript and even jsx TSX files with no dependencies needed I think this is great right I do think that this is great did you really did you really just put this in here I want to click typescript oh I want jsx allow look at that look at that example go cool story everybody esm and common JS compatibility now this is a real one I'm looking at you charts charts JS 4.0 okay you're a pain in the ass the transition from common JS to es modules has been slow and full of Terrors after esm was introduced no took five years before supporting it without the experimental modules flag I still don't believe they support it uh regardless of the ecosystem is still full of common Js button supports both module systems all the time no need to worry about the extension of jscjs MJS or including type module in your package.json gosh I hated this I effing hate this I hate it I hate it I hate it you can even do this let's go let's go why why I just somehow the Least Complicated thing ever should be module syntax and somehow only node could so thoroughly mess that one thing up like how did you do that how did node in JavaScript somehow mess up the world's simplest item I don't get it how did this happen how did we get here web apis upon has a built-in support for a web standard apis that are available in browsers such as fetch request response websocket and readable stream let's go hot reloading but makes it easier oh my goodness what is going on dude get your jpegs in order get your jpegs in order I don't want this strobe light effect don't that's how I feel reading this okay uh this is incredible by the way this is really great is this real time all night tools that hard reset the entire process like node mod button reloads your code without terminating the old process that means HTTP websocket connections don't disconnect and state isn't lost that could be good bad plugins button is designed to be highly customizable you can Define plugins uh to perform custom loading logic plugins can be supported in additional file types yaml or ping what the hell's a ping file that I could use it in such a way that works with JavaScript I'm genuinely confused genuinely not just the tip Jared takes the whole ping dude I do not get that uh Bunch ships with highly optimized standard library apis for your most uh let's see for the things that you need most as a developer to contr or in contrast to node.js apis which exists for backwards compatibility these bun native apis are designed to be fast and easy to use file file await text nice returns bun file yep nice beautiful beautiful I love all that button reads files up to 10 times faster than node.js okay uh all right fantastic uh bun right is a single flexible API okay awesome awesome I like all that bun writes files up to three times faster uh bun serve serve is going to spin up an HTTP server uh websocket server or both like it I like it I like it throw a little TLS in there okay I like it convenient hit a little websocket oh nice they they're using micro oh they're using you know what they're using right they're using micro websocket JS I guarantee you they're using micro websocket JS I swear I was just reading this anyways just recently it must be what they're using because the API is identical right look at that websocket message it also has open and close I was doing some tests with it it is really fast it's real nice it's real nice look at that open close this is just this is it this is literally just using microwave socket yeah probably native code no it is yeah it's native bun can serve 5x more messages per second than WS on node.js I mean that's unfair WS is horse is horse manure like WS is like genuine horse manure uh let's see if I can pull this thing up all right so this right here is a distribution of oh so I I've made a game where it it should tick at 16.66 uh milliseconds and it should run an update uh every 16.6 milliseconds and here is is its distribution of frames right and then I made a perf Improvement right uh right let's see right here so this should be perf2 I made a perf Improvement which really narrows it up and then I believe three is pretty much it's three or four I think four is doing this but this is a but this is also kind of unfair a little bit it's look as you can see it's like super large right here I was also doing like 5 000 connections or something on this one but you can go like way faster you're so bright I'm a bright individual I'm bright squeal light uh has built in for squeal light uh it's inspired by better squeal light three okay I hope you're working with Tercel don't be a dummy Bunda password also sports apis for common but complex things you wouldn't want to implement yourself really it does password okay interesting what bro Doge uh what doesn't fun do well let me tell you what bond does BUN is a package manager yep you can install update button installs it ridiculously fast uh you know you still have to download a bunch of packages you know what I mean I mean the thing is to be completely fair npm is so poorly written npm is so poorly written that everything seems faster pnpm faster yarn faster bun faster right yarn is slower okay I didn't see this one I this is also I guarantee you this is this is also unfair this is absolutely unfair yeah see this is unfair they didn't do a clean install here this is a clearly not a clean install so yeah it does faster my PNP installs they're not even six seconds long they're like nothing there's nothing long this feels like an unfair test okay um feels like an unfair test there I feel like that's cheating uh running scripts chances are you haven't ran a script directly with Note in a while yes I actually do it in fact funny you should say that funny you should say that um because if I go to my little this one you'll notice like right right here I go I I that's how I run my scripts TSC followed by me actually running the thing yeah that's how I do it that's how I do it you can replace npm run with bunrun 150 milliseconds what the hell are they doing what am I looking at uh these numbers maybe seem small but when running CLI the perceptual difference is huge yeah I guess when I see it it looks it does look it does look one can say slower Maximum Overdrive maximum cow uh bun is a test Runner okay awesome it does testing oh my goodness look at it again socket bike test stupid name by the way okay uh buns matchers are implemented in fast native code uh okay nice nice okay okay so it does a bunch of very fast all this stuff uh let's see and to make things even nicer bun automatically adds notation to your test failures so your CI logs are easy to read bun is a bundler uh okay you know what I think I'm actually gonna start using bun just a bundle by JavaScript because this actually sounds easier I'm a Bunda dude who here likes to go bundle some JavaScript you it's the worst uh buns apis are uh is universal meaning it works both in a bundler and a run time does it have a do you have a minifier in here um since buns run time and bundler are integrated uh it means that bun can do the things that no other bundler can do bun introduces JavaScript macros okay you might have just jumped the shark here people get released from releases with type macro  we have new import syntax this actually this screws up everything I'm not even sure what this thing does but more bun provides native builds for Mac OS and Linux but there's one more notable abstence I don't does anyone know the absence when they say Linux are they trying to say FreeBSD is not there because they're trying to say that free PSD is not it like what are they trying to say Solaris I don't get it this is why it was codenamed bun spreader okay because they're spreading the Buns to other operating systems while the Mac OS and Linux builds of buns are production ready the windows build is highly experimental at the moment only JavaScript runtime has supported the package manager test Runner the bunther has been disabled until uh they are more stable the performance has also not been optimized yet we'll re why why even optimize it why even care we'll be rapidly improving Windows support for Windows over the coming weeks if you're excited about a bun for Windows we'd encourage you to join the pound me Windows channel on our Discord thank you it's actually really this is actually really awesome I must say that they've done a great job and I feel like bun is actually making things move forward because Dino the problem with Dino is that they just kind of went their own Direction you know what I mean they kind of just did their own thing whereas bunt said no we're going to try to be as close as we can to what already exists and makes it good right and so I appreciate what bun did you know on the other hand it just doesn't feel like I really get it right like Dino is just like everything about it I don't like how they did their dependencies in the beginning I mean I like how they did their dependencies myself I also hated how they did their dependencies they changed every single possible like way you interact so if you're going to write a file you have to write a file differently than how you'd write it in node I liked their file API better but it was also completely different buns like hey you want node compatible ones we got you but if you also won fast ones here's the bun fast ones love it I think this is the right move I think they did the right thing so that's all I have to say uh the rest I don't care about button this is just how to use it all super cool stuff blah blah blah blah blah blah love it great job Jared and 300 contributors that did it the name is I still wouldn't want to use JavaScript on the server but if I had to I'm gonna spread the buttons boys I'm spreading the Buns boys again