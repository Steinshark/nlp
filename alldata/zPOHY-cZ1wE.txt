here we go so rich Harris you're here okay oh whoa you just sounded really good just then yeah I just switched over to my ASMR mic that's I'm feeling it I'm not gonna lie to you I'm feeling it right now um so anyways so this thing happened on the internet right where you decided to switch svelt kit correct from uh typescript to JS doc spell so it's felt kit we've been writing his desktop for a long time but did that about 18 months ago okay doing that working great we are in the middle of uh getting us felt for release ready at the moment runs felt three it's been version three for the last four years we are due for a major release and as part of that we want to do the same thing that we did with felt kit to spell itself um because it's worked out great for us uh but we we started working on this pull request and somehow it was the top of Hacker News because people really care about internal refactoring PR as it turns out yeah yeah okay so I think obviously the contention is over the fact that you're moving away from typescript so right now industry standard wise typescript's considered like the best thing ever and so the fact that you moved away from it feels confusing to people can you uh can you like help us like what what to you is the major benefit from moving away from it and do you have anything that you miss from it I would flip it around like why would you not write your code base in JavaScript okay there's this whole extra there's like a there's a lot of stuff that you um that you opt into when you write your code base in some other language whether it's typescript or whatever else and as much as there's a like The Grass Is Always Greener phenomenon there's also this thing that I've noticed with developers where we we don't see the inconveniences that we're used to when you use these these build processes when you use non-standard dialects you are adding a shitload of moving parts to everything that you work on and those moving Parts require regular maintenance right you got to put oil in the engine otherwise it's gonna it's gonna grind to a halt and we're just like blind to it but think about like when you're working in your own code base you command click on a function and it takes you directly to the source for example and you can see it's implemented you can make changes can you can you explain to me and Clickers command click like uh in vs code maybe it's different because you're like some Linux yeah person but all right you can you can go directly to to the to the source of of the things that you have imported into your module and you can see how they're implemented you can change them you cannot do that with stuff that you've imported from libraries there's no reason why that should be the case it's just because we've collectively decided that it's okay for our dependencies to be you know a bundled ball of of disk code that's generated from some typescript source and if you want to go and look at it then you're out of luck because it at best you're going to be taken to like some generated DTS file or something like that and God help you if you want to understand what your dependencies are actually doing right this is a very silly State of Affairs that we shouldn't have to put up with so can I jump in here for a quick second I do think that this is like a it's a unique perspective because in most of programming worlds in most languages you don't really hop into vendor code typically you're not really reviewing what they're doing it's like you download a pack could you go and use it and that's that in the JavaScript world it's very unique because you can just hand edit anything that you install and that's very it's a very different experience and in some sense it's a very positive experience and exactly what you're saying is one of my big gripes with with typescript is every time I jump to a definition I jump to a DTS file I'm doing this constant hopping around to actually try to look at what is going wrong or what don't I understand about the code base uh when it comes to any of these dependencies and so if I do find this problem to be a big pain point and so you're saying that if everyone were to use JS doc we would actually just go to the JS code you can set things up and yeah you can set things up in such a way that you can go directly to the source and if you want to debug something in one of your dependencies or like frankly if I'm debugging one of my own libraries then I can have my my Repro set up and I can go to the function that's not working as I expect I can put my console.logs on my debugger statements or whatever right in the source and then I can understand I what's happening if I have linked the library that I'm trying to debug to my project then I can make edits inside my node modules and then I can go over to the window where I'm working on that library and all of the changes already there ready for me to just like put in a pull request like compare that to the workflow where you know you have to clone a repo that you're unfamiliar with and then you have to figure out someone else's build process and you've got to figure out where the source files are that correspond to the thing that you're struggling with and then you've got to like somehow map these two things together and you've got to figure out um like all the different moving parts that are involved in getting that library to build so that you can use it inside your Repro like this is not the the default way that people consume libraries admittedly but when you do have to do things this way there's just so many layers of complexity that we have just opted into unnecessarily so from the the consumer of a library perspective there's some I would say moderately significant benefits to having dependencies that are just authored in vanilla JavaScript but for the people building the libraries I think the benefits are even greater because you know now you can run your test files without using TS node you can just like everything just works you can copy and paste into a rebel into your Dev tools like your functions will continue to work you don't need to strip out the type annotations and all of that stuff you don't need to have your build step running in a separate process where everything gets rebuilt on every keystroke in order for your um for your for your tests to run all of that sort of thing like I saw a tweet last week some someone had discovered that the TS node CLI doesn't work in node 20 at the moment um there's just this entire category of things like this is dumb that I do not want to have to think about when when I'm writing code um and by not having typescript I've just like opted out of all of that so I provided a better experience for myself I provided a better experience for the users of my code and the only cost to doing this is that I have to write JS doc syntax instead of typescript syntax which is admittedly not as nice okay that's really I do want to double click on that for a moment so I totally get the motivation like I really do hate all the extra steps that are required and you know you must have Source maps on if you have a build thing in which you run and you throw an error with Outsource Maps uh if you just run node you're just simply going to get an error in which you have to go go through and try to figure out in what line is the actual error in in the JavaScript not in the typescript because you don't have the source maps in an error in a prod build tool like I understand might be in like a GitHub comment like someone said like I'm experiencing this error like what is it and maybe they have Source Maps working somehow by some miracle but they probably don't and you're left looking at that like well I can't help you yeah unless I can reproduce the exact conditions I can't help you whereas if there's the stack Trace points to the actual source code I probably can yeah so I definitely get that like that is just like up here when not the less build steps you have the easier it is I totally get that but my big worry is when I look at JS docs it does look less I guess easy to read in the sense that you look at your variables and to know what they are you have to go northward or you have to do some sort of hover menu to see the type and so what does that experience been like because that to me is like the big kind of breaker of it all it is it is the the downside of using JS doc um although even that comes with some caveats so the way that you annotate a function in JS dot for example is before the function you have this comment block which starts slash asterisk asterisk and then inside there you have a like a a plain English description of what the function is doing and then you have like app param and then the typing curly braces and then the name of the param and then perhaps some some documentation after it so you know for a an ad function you'll have uh slash star star adds two numbers um apparam number the first number apparam number the second number and then maybe you will have a return annotation if you don't want to use type inference all of that stuff whereas if you're writing in typescript then you'll have function add a colon number B colon number and it's it's much leaner but there is even a trade-off there because if you're already writing that js.com and you are in my experience and maybe this is just me you're much more likely to remember to actually document what all this stuff is okay which with type scripts you don't like you do a colon number and it's like all right but what what is a in this context like it's not giving me any information about that it's not telling me what this function actually does I have to infer it from the function name and and the argument names and so on so I find that js. kind of tricks me into documenting my code much more comprehensively and that saves me time down the line when I'm trying to understand my own code okay okay so let's do a little bit of follow-up uh people ask a lot about generics what is kind of the generic experience I know that jsdox has some level of generics and I do have a lot to say about this but what is kind of the experience of doing more of the generic level programming Yep this is this is the the big concern that a lot of people have um you can use generics in JS doc just fine um declaring generics is a little bit trickier does this template thing that you can use in your JS dot block where you can like uh app template and then inside your curlers you have the the constraint for the generic and then you know t or whatever you want to call it and then you can reference that inside your parameters and so on and even inside the function body like you can refer to any genetics that you declared that way but you don't have as good genetic support as you do if you're writing in typescript however you can write your generics in DTS files which are then imported from your JavaScript files so all of the complex stuff that you can do in Ts that you cannot do in jstock you can just do that in a DTS file and import it so that was my next question was right there which was DTS files do you use them in conjunction with jsdark do you find that to be a good middle ground where any specified type you do it there and then jsdoc is more like the lean like just squirrely brace type exactly yeah that's that's how I typically use it all of my complex types or um anything that I'm using in multiple places in my project I'll do that in a DTS instead of in a type def in in js. ideally you want to have the actual um interface to your library like the DTs files that other people consume when they use your library ideally you want to have that generated from Source um but that Source if it's importing from the DTs you can have this sort of auto-generated DTS imports from source which imports from handwritten DTS and so you get like all of the the best of all possible worlds um and it like it takes some mental adjustment if you're used to just doing everything in typescript files like you need to understand how these things interrelate but it's it's really not that much of an overhead yeah so okay so I like this DTS approach because there's types you want to be able to specify types and I feel like types just as code feel probably a little bit more natural than than comments and so I like this idea of being able to have a DTS file and then for anything that's just like what you want to generate the signatures everything else is all from just within the code it generates everything that seems really nice but I do have a follow-up question that I I've just or not really a follow-up question a statement I want to hear your thoughts on it one of the things I don't like about typescript is that it's a touring complete type system like you can write bubble sort in it it's a very complex type system that people don't realize and I find that as you start to write a library due to the ability to make it as expressive I spend more time trying to understand and write types then I would say write the thing in rust or write the thing in Zig or write the thing in any language I'm not even familiar with like you can get very complex with your types and typescript does jsdoc help you like lower that bar is there's some sort of thing that it helps you do because you don't have nearly the same expressiveness or is it just like well I still find myself in all the same issues with JavaScript I just now have jsdoc and no build step yeah I don't know I I think you still have the same ability to tie yourself in nuts you're just doing it in DTS files and instead of typescript files I I think the only way to stop yourself from doing that is just like not not doing that like recognize the point at which it's yeah I recognize the point at which it's getting out of hand and be like actually you know what this is we don't need to do this um we definitely do have some moderately complex types in this felt kit code base we used to have some more complex types in the code base but gradually we've found less of a need for them um I don't know I I'm filled with admiration for people who understand how to Wrangle typescripts in that way I am not one of those people there's some kind of mental block that happens when I I try and get my head around the really deep stuff um I don't think it's a bad thing though honestly I really do think that there's a level of typescript knowledge that poison pills your project often right like that you start you become too much of a wizard and you rely so heavily on the most magical types that the moment you have to refactor it it's not a small refactor all of a sudden you have two runs of logic you're refactoring this magical type syntax that's autocomplete followed by the actual code itself which I I end up I'm still trying to figure out what level of typescript is a good level so I'm that's why I'm so motivated about this JS doc thing because can it help prevent me from going out of control with typescript because it is just simply available yeah I mean this this might be the determining factor in whether someone wants to use JS doc or typescript is like the complexity of the types that they find themselves offering I want to author stuff as simply as possible I want to rely on inference to the maximum degree I want everything to be not just readable but understandable by someone who is not all that sophisticated namely myself and like all of that stuff you can you can do in JS Dock and occasionally you need to go to a DTS for a shared interface or something or because you have a you know a generic class or whatever but on the whole I I just want to stay clear that I don't have time for it okay one last question about inference since yeah since we're talking about it I know this is kind of like a hot debate within the uh the old typescript world which is how much do you do inference we have return type inference all that kind of stuff um so uh one of my big kind of thoughts about it is that when you don't be more explicit about your typing you end up having like middle types throughout your program because you got something that wasn't typed here but now you got this value out that you need to pass to another function so therefore you start developing this kind of middle types all throughout your system and when you want to find what like where your items are being used they stop at one level and then you have to find where these middle types are being used throughout your program like how much does I mean how much does inference really help in this situation and how much does it hurt because if you're relying super heavy on inference are you creating a new problem of refactoring potentially I think this again comes down to complexity if if you're dealing with some very complex code then you want to put some guard rails in place if I have a function that is 10 lines long and I can see the whole body of the function very quickly and it's only got one return statement and like do I really need to to type the return value like the hypothetical ad function that adds two numbers it's gonna return a number am I gonna yeah like make a mistake somehow and and accidentally return the wrong thing like probably not but if it's something where you know I've got a 200 line function and there's a few different branches that's the point at which I'm like I want this to be readable at the top of the function definition um and I want to make sure that I'm not accidentally going to return the wrong thing because I get bitten by that all the time so I'm not uh I'm not ideological about inferred return values I use inference when I think it's gonna pay off but I I like being explicit when I think I'm probably setting up a track for myself okay okay that's good I like that um all right well hey a dog thing I think this is uh I think this is a good it's a good thing to happen because you know obviously the pushback in the pr shows that people feel very passionate but they may not even know what is available because the number one complaint I see is there's no generics and you're just like well actually there is generics well I can't do it as expressive a typing well you can just use a DTS file so it's like okay okay hold on maybe the complaints maybe aren't as founded as possible but the one downside of course is the comments at the top kind of suck but maybe there's some benefit to it okay I thought okay that that might change there's a type annotations proposal uh proposal going through tc39 at the moment which would add something very light typescript syntax to JavaScript the language it would just get interpreted as comments essentially um if that happens then we can have the best of all possible worlds we can we can ship our type source code and engines don't care about the types but our type Checker can and then we just won't have that problem won't have to choose yeah I would like that obviously the uh compiling is probably or transpiling is probably the worst part of JavaScript right now so I would really much very much so like that all right well hey thank you for taking a few moments to come on on talk about this because this uh obviously made some people ruffled some pretty serious feathers out there I don't know man I don't know why people care but there you go they sent me on all right well thanks Rich hey where can people find yet uh blue sky gone Blue Sky yeah you not yeah I am but I mean I have an account but I don't even I mean okay I'm not even logged in I don't know why I'm going here I don't even know how to use it okay so you're on this you're on this theoretical Blue Sky site is it linked in your Twitter uh no it's not I should probably add it yeah um I'm rich harris.dev I don't know if Elon will let us add Blue Sky links to uh okay and to our bios well I'm on Twitter I'm on Twitter Rich underscore Harris yeah it looks something like this on Blue Sky so go find that uh send me your link in and when I put this into a YouTube video I'll I'll properly link for this guy sounds good all right all right hey ladies later bye I don't need to do a uh I don't need to do a a hot take from Rich because oh I gotta get him out of there there we go we got him out of there we got him out none of them