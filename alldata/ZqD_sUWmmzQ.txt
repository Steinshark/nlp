let's find out are we going to be doing it is this functional functionings or is this going to be something else completely I don't even know all right let's find out let's move myself back over here now that we don't need to be all the way over but let's do this styled and written when I was younger I thought the object-oriented programming was the only right way to code and I thought the literal exact same thing when I was younger back in my childlike years I too thought object oriented was the only way to do it and therefore when I built my first video game I used seven layers of inheritance and eventually I cried cried and cried for I could not figure out where and why my bugs were flowing through the system and I had no idea how or why it happened so I cried and I cried and I cried Java was the best language so obviously I wasn't the brightest back then I realized conscription myself to one Paradigm wasn't a smart decision and expanding my options could greatly increase my coding quality I'm going to mainly focus on the object-oriented if you like that screen tear by the way how good was that screen tear huh so I should switch to Waylon I keep saying that every week I still don't uh oop most used as oop is arguably the most used Paradigm and functional programming is also growing rapidly in popularity while coding there's multiple ways to solve a problem making the debate of which Paradigm is the best useless the idea behind object-oriented programming is to rely on the concepts of classes and objects where a class could be considered a blueprint to instantiate objects then we didn't uh code Aesthetics do something very similar to this didn't uh code Aesthetics do like this very very very very similar thing even using images do I remember that correctly I can't remember he was doing it for the difference between inheritance versus composition classes usually represent a broad category such as cars animals or any other encompassing field for example if I actually quit doing a lot of that for the most part I try not to think of classes like that I have a class Foo with attributes Supply and type we can now create as many objects of food as we like to add some more functionality the class food can have methods most classes are even more powerful than they look like as they can be extended from to make more subclasses here KitKat can extend from food I already Hate Everything I see with KitKat everything's the same except the consume function is overridden while this specific example is extremely simple an object-oriented design allows for flexible code reuse object-oriented programming can be made more robust with features like abstract classes interfaces virtual functions multiple inheritance you're not allowed to use the term robust in multiple inheritance okay yeah yeah okay you need to know this or I'm going to send you straight to Karen's office ridiculous don't ever say multiple inheritance in robust in my startup again okay it's not a marker that's me being serious okay chat you know I'm serious about two things in the world okay serious number one you don't joke about multiple inheritance and number two five dollars a month that's what I'm serious about okay and more but that's beyond the scope of this video something you'll probably hear a lot related to object-oriented programming are its four pillars these are inheritance polymorphism encapsulation and abstraction yes I don't like to use that I think we all use polymorphism in some way I think encapsulation is just a great idea that's just pretty much programming in fact it's really hard not to encapsulate data I mean you really have to be trying to not encapsulate data you know what I mean welcome to Costco I forgot to turn off alerts welcome to Costco I forgot to turn off alerts alerts are off thank you uh an abstraction people love this you know this term for me just always just means everything abstraction you're like wasn't everything kind of an abstraction if you really think about it we're always abstracting like JavaScript is an abstraction over C plus you know what I mean you like that you like that javascript's just C plus plus syntax sugar baby okay syntax sugar that's all it is it's just syntax sugar that's all it has uh no no it's not actually it is just syntax sugar that's all it is it's all it is baby inheritance is what I mentioned earlier about kitkats that's why I think they're both shitty sending food kitkats are still a type of food so they should be able to take all the properties of food encapsulation allows classes to manage how they hide data allowing access through either the class itself or a function for example if we have a class for a person we wouldn't want their address or SN to be public otherwise any other class would be able to access and potentially change those properties on the flip side something like your name could be public as that data isn't as sensitive the best practice is to declare any variable chat what's the name what's the CH what's the name chat the name that's right thank you thank you for if you don't say Java don't say the Java gen okay that's inappropriate it's inappropriate okay the name is js's syntax sugar for C plus plus a gin as private so nothing outside the class can affect it unless it needs to be public abstraction is similar to encapsulation okay hey gonna make all these fans right here okay okay leave room for the holy spirit is what we said during high school dances okay at least that's what the teacher said okay okay that's very important put a space right here I expect it it's just you're in fear offending me however it's less about data safety brother oh now you put a space I think or six I'm not even sure what's going on here okay we gotta work on your your we gotta work on it okay I know you're using that motion canvas thing I know you are okay but careful now abuse if we have a string and we want to make it lowercase we can just call it the two lowercase function as we don't need to know exactly how the string will be made into lowercase polymorphism is also similar to an hair I'm not gonna lie to you okay if you're going to do sweet stuff you've got to put the right indents right like these indents they're they're just emotionally hurting me like this indent look at this what have you done here what have you done this thing's indented like 12 characters okay I don't even know how to do something you got some sort of you have some form of Fibonacci it's like one one two okay you can even see it the break has the same thing one one two yeah Fibonacci indenting and it's emotionally painful okay and what happened to this parenthesis okay this parentheses should have been back here but it said it's up here makes everything confusing polymorphism is also similar to inheritance except it's about modifying Behavior rather than taking properties in my earlier example polymorph this is the reason this is exact reason why I hate polymorphism or not polymorphism well I hate uh inheritance okay because you're inheriting over Behavior but you're relying on inherited properties this is really where I think it all falls apart is this right here is is properties that's why traits in Rust are really great this is why interfaces tend to be better why people tend to be okay with interfaces especially like in something like golang golang kind of has the same feel to it where you're able not to rely on the properties right you're like that's not just how it works okay you have you yourself you are the object and then that's what you do I know we're not going to talk about that we're not going to talk about it okay but either way I just hate that it just drives me nuts I think that's why I hate inheritance some is used when we override the consume function programming is not perfect and it has its issues first of all the code made with object-oriented patterns will generally be longer than other styles there's just more boilerplate code to write and if the project doesn't need all the boilerplate there will be a lot of extra unnecessary code that's not true you can't give Java you can't put Java you can't just put Java's public static void main string args as an example for oops lengthiness okay that's Java's lenginess that's where functional programming can come in I apologize in advance if I get something wrong with functional programming as I don't have a great deal of experience in it that being said reading and writing well-written functional programs feel great as they can be extremely elegant oh oh now we're calling python functional okay then okay I see what kind of world we're living in I see what's happening now the main idea with functional programming is that we use functions as our primary building block as opposed to classes and objects the functions are usually pure functions avoiding shared State mutable data and side effects for example if we have a function that adds two variables and changes the global variable to the sum this would not be a functional programming concept as we introduced a side effect the side effect was caused by altering a piece of data beyond our scope which is the function isn't that always the joke it's the reason why nothing's ever actually written in functional programming because you can't do side effects effects or something developers avoid as they can cause bugs that are completely unexpected we can make the function pure by not altering the global variable another concept of functional programming is that data is immutable because mutable data can also cause side effects instead of having shared State and mutable data we can alter data by using other functions such as map this is why JavaScript is sometimes so slow immutable [Music] just a bunch of spread operators spreading their filth all over the program all map does is run a function on every element of an iterable in this case we just append the fire Emoji to the end of each string map is also an example of a higher order function as it's a function that takes another function as a parameter functional programming has many benefits the object oriented programming doesn't have you can get these beautiful or ugly one-liners depending on how you like your code to look please note mentioning of ramda please look it's also far easier to track down bugs as a bug should only be contained within one function and won't have you jumping through 10 different files and nested objects although I've never found that to be true right I've never found that to be true anytime you're finding a bug it results in me jumping to a bunch of different places whether it's oop FP or F poop right no matter what what what the whatever the style is that you've created it's like it's always a pain in the ass to figure out where things go wrong right like that that's that's that's like that's what makes a really good engineer is or one of the things that makes a really good engineer is your ability to go and figure out what the hell is going on you know what I mean functional programming seems like a developer's dream with smaller projects it can be considerably harder to scale up in certain cases this is because modeling a problem if functional programming is not as easy as it is in object-oriented programming for example take a car that needs maintenance on a certain date in this case we can just have a car object with an attribute for when it needs maintenance in a functional approach as there is no State we would have to use a function to find out if the car needs maintenance I'm not sure if that's the best way to do it but if there's other method feel free to comment them down below as I would love to know about them I mean you know these kind of comments there are you know there's like I know Haskell has a similar idea but there's trait objects in Rust where you can attach methods to structs right you don't so you don't necessarily need floating things I think this is more of like a consequence of probably python or uh JavaScript where instead of having this beautiful like ability to press Dot and see all the methods available for that specific type instead you have the opposite which is you have to go to a file and discover all the methods for a type if all the methods for a type are contained within one file and so I find that you know it totally depends on the language the ease of use of functional and it's not always the same right it's not all it doesn't always feel the same and it can be quite tricksy yes obviously this is not this you know what I mean as you can see both these paradigms just like every other Paradigm I know don't look at the statement don't look at the statement but also a wide variety of issues I read something on stack Overflow along the lines of first mistake don't read things on stack Overflow okay because you can't even figure out how to measure your dick on stack Overflow object orientation can improve with functional programming and I agree no more orientation we're not orientating things not everything has to be the same however the functions can improve methods can take the principles behind functional programming functions they don't need to have zero side effects however minimizing them would be extremely helpful for debugging the longer object-oriented code can also be split up into some methods to do smaller tasks and since object orientation allows abstraction and encapsulation the end user doesn't need to see those changes wherever applicable the one-liners and more concise code patterns from functional programming can be used to create elegant code mixing paradigms and code patterns can increase code quality in so many cities I think there's this concept that floats around and I'm not sure if I'm incorrect or if I am correct but just because you use functions does not mean it's functional programming I think a lot of time people goof up functional programming for procedural programming you know what I mean and so what is functional programming in the JavaScript world is actually just procedural programming for the most part and that's that that's all you're doing you're just procedural programming Andy doing procedural programming Andy things and that's that situations multi-paradigm languages are on the rise and are here to say it's better to embrace the multi-paradigm approach rather than to bottleneck your code by sticking to only nothing as with any choice there's going to be a prose but there's also going to be not gonna fall for it you might as well take the best from all paradigms and work off of that I'm not gonna make a joke thanks for watching I'll see you guys next time I mean I like the general I like the general take of this video General take of this video is actually really good which is you you should if you do know some level of functional programming I'm very weak on the functional programming like I'm like very easy idea right like I know very very little but taking good Concepts from each approach is really really nice like I'm pretty careful when I create classes if I create a class I never allow inheritance right you just kind of have to come up with some basic things like some basic general rules and that's that and for the most part you will do very very fine these people that are very dogmatic about one approach or the other I find that actually almost always is the worst and you know what I'm going to be real here the reason why it's almost always the worst to be purely oop or purely functional is because the actual best programming technique is procedural I'm sorry sorry sucks to suck the name is the primogen