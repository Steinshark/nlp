this video was brought to you by IND dentle IO learning python Made Simple how's it going guys in today's video we're going to be learning about the no return type and the never type now in Python we used never prior to Python 3.11 and then no return was introduced in Python 3.11 to make it a little bit easier for us to understand what's going on in our code anyway in this video I'm going to be explaining to you the differences and where you should use these two types and we will also import from enum the enum type or just the enum so to keep things fairly simple in general you would use either no return or never to show that a function would never return anything in general you'll see me typing in Def Funk and returning none to demonstrate that a function only executes code such as hello this function will in fact return none if you try to assign it to a variable because by by default all functions in Python return none but what happens if we want to raise an exception such as raise exception and we'll add a message to make it more interesting so message of type string so what happens if we try to raise an exception in our function well this line of code will certainly not return none it's actually not going to return anything because we're not going to ever make it past this function so adding none here is misleading because that's not what the function returns instead what we would do prior to python 3.11 is annotate this with never because it will never return anything or because the function wasn't meant to return anything it only had the duty of Performing this operation that doesn't return anything whatsoever but moving on as of python 3.11 we now have the option to annotate it as no return and static type Checkers are going to treat these two equally this is just slightly more real readable so that's practically all the no return type is used for but the never type also has another use case which I'm going to explain as a bonus in this video because that functionality is actually really good to know if you need to use it so here we're going to create a function called assert never and that's going to take an argument of type never this is something that should never be passed in and it's also going to return never or as of python 3.11 it actually makes more sense to return no return but anyway here we're asserting never and it's going to give us back no return because what we're going to do is raise an assertion error that the expected code is unreachable so this snippet of code was taken directly from the python docs with the exception that I just changed never to no return but next I'm going to create a class which is called State and it's going to contain two states off and on on and it inherits from enum to make sure that we can treat this as an enum but then let's try to use our functionality and see exactly where the ne type can be useful so as always I'm going to create my if name is equal to Main Check and create a main entry point anyway inside here we're going to create a state of type State and that's going to equal state.on because we want whatever device we're using to be turned on now we can check if state is equal to state.on then we're going to print that it was turned on L if the state is turned off we're going to print that it's turned off and finally those should be the only two cases I mean we don't have any other states but we are programmers and we make lots of Errors when we are typing so of course we want to have an else block and we want to make sure that this else block is never reached but you might have an enum that has far many more cases than just on and off so it's not always going to be guaranteed that you're going to cover all of them so here we're going to assert never and pass in the state and right here it might seem quite confusing I mean we don't get any errors we don't get any warnings so what we're going to do is PIP install mypie a very powerful static type checker for Python and once we have that installed still nothing's going to happen even if we run mypi on our main script which is this script here we're going to to have no issues found and that's actually because we've covered every single case but watch what happens as soon as we add a case to our state enum which we do not cover such as limbo and limbo will be some sort of state that we don't know what it is because it's somewhere in between on and off but that's going to have the value of two what mypie is going to be able to tell us is that we did not cover all of the use cases we're going to get some syntax highlighting if if you have the mypi plug-in installed otherwise if you run mypi in the terminal you're also going to get an error that argument one to assert never has incompatible types literal state. limbo but we expected no return and all that message is telling us essentially is that we messed up we did not cover all of these scenarios so as soon as we cover that by adding another L if statement and changing this to limbo and we can just say turn limbo I don't know what that means but that's what it's going to be my pie is not going to complain anymore after that because the whole concept of never is that it should never be reached or it should just never have anything in it nothing is ever going to be compatible with never and this also works with match case if you're using match case I didn't really like the example on the Google Docs because it used match case the same way you would use an IFL statement and for me it's kind of confusing why they would do that if they know very well that match case is used for pattern matching once again the docs are kind of confusing sometimes so I recreated it as an if L if else statement because that just made more sense to me but in case you're using match case this can also work at the bottom when you have that case underscore because once again never is used as a bottom type anyway to sum up this video both of these do the exact same thing you can also add no return here if that's what you want and mypie will still complain the exact same way if we do not cover all of the cases because static type Checkers treat this as the exact same thing but if a function doesn't return anything it just makes more sense to add no return because it's more descriptive otherwise if it's a value that should never be reached you can just add never but I would love to hear what you guys think about this functionality in the comment section down below I know a lot of you don't like static typing but that's exactly what I live for in Python I think it's super cool and there's so much to learn from it and there's not really anything that tells me that a developer knows what they're doing more than a developer who knows how to type their code but yeah with all that being said as always thanks for watching and I'll see you in the next video