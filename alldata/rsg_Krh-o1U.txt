in this video we'll be discussing arm thumb mode by the end of this video you'll understand arm thumb mode and be able to write some assembly that uses it the arm processor has two operating modes arm mode and thumb mode both of which the processor can change between during code execution by default the processor operates in arm mode where the instructions are 32 bits wide thumb mode is a mode on the processor where the instructions are only 16 bits wide what this means is that an instruction such as this one add r1 plus r0 into r1 the arm mode instruction would normally be four bytes long instead in thumb mode this same instruction can be boiled down to two bytes the developers of the arm architecture realized that the 32-bit instruction had a lot of empty space in the instruction that didn't carry any valuable information and then created thumb mode so what does this mean for programmers by using thumb mode the code will generally take up half the memory saving flash and ram in places where memory constraints are a concern also because of the reduced amount of ram accesses and instruction cache misses the processor uses less power in thumb mode having thumb mode is a good tool to have in your back pocket if you're trying to make your code more efficient so the question then would be why not just use thumb mode all the time with the reduced length and instructions comes the reduced functionality thumb one mode the original thumb instruction set can only access the lower half of the arm registers also it has limited functionality on its branching instructions there's also a thumb two instruction set which enables a processor to weave in some 32-bit instructions during thumb to add more functionality but not all arm processors can do thumb mode with thumb two instructions so how do you put the processor into thumb mode normally arm instructions are four byte aligned so the last bit of the destination address for a branch is always zero by flipping that bit to one that signals the processor that at that address the processor will be executing in thumb mode from that point on the processor reads in and executes instructions 16 bits at a time in this example we're going to sum label plus one the processor will go to some label but execute some labels instructions in thumb mode okay so with that being said let's jump right into the code for those of you that want to follow along or mess around with the code after the video do me a favor and go check out my github github.com low level learning i will have the code up there after this video goes live also i notice that almost 90 percent of you who are watching this are not subscribed do me a favor go hit that sub button be alerted whenever i put out new videos about low level topics so here on the left i actually have the source code from my first arm assembly tutorial this is the hello world that you remember remember you run it and it prints out hello world what we're going to do is we're going to copy this code and we're going to make it print hello world twice but it's going to have to run this hello world in thumb mode and then it's going to have to exit thumb mode to call the exit to get out of the programs basically the states will be hello world hello world in thumb mode and then we'll exit in arm mode again uh so the way that we have to first tell the assembler that we want to put our code into thumb mode is by typing simply dot thumb so that actually tells the processor to do everything south of that instruction in thumb mode so we can actually assemble that real quick with the assembler and then we're going to object dump that object file that'll print all the code in that object dump to the screen we can actually see what the bytes look like for that code so here we have our start label as i said the processor starts in our mode all the instructions are four bytes wide and then once we get to hello world thumb it actually goes into thumb mode which is pretty interesting right all of the instructions are two bytes wide but there is a problem here where the exit is still in thumb mode and that's not what i want i want it to be an arm mode for the sake of this tutorial so i have to tell the assembler to put it back into our mode dot arm so now start is in arm mode hello world is in thumb mode and then exit is back in our mode again but if you actually run the code like this right so you assemble it you compile it and then you run it you're actually going to get a really weird error so it's going to compile and run correctly but you're only going to get one hello world that is because the code for the second hello world is in thumb mode it's compiled or assembled for thumb mode but the processor doesn't know to go into thumb mode so when you actually object up your code the disassembler shows you the code as thumb mode but there's no transition from this instruction to the next to go into thumb mode so this actually all gets ran in arm mode and these aren't invalid instructions in arm mode they just don't actually do anything so the processor kind of runs over them somehow it doesn't crash and then gets to the exit code which is in our mode and exits so we need to create this glue here to enter thumb mode and exit thumb mode and the way we're going to do this is we are going to create that glue so we're going to load into r0 the address of hello world thumb and then like i said before to get into thumb mode we need to actually increment that last bit of the address that we're jumping to by one so we're gonna add into r0 r0 plus the constant one and then we're gonna branch exchange r0 so assemble compile and they'll run okay great so now we got that second hello world so the first hello world let me object dump this for you that first hello world ran it printed the data to the screen then we set up our jump into thumb mode thumb mode entered at hello world thumb at this address remember we jumped there plus one to turn on thumb mode and that printed out the second hello world but then the processor is in thumb mode trying to execute arm code these blocks of four instructions are not valid thumb so the processor crashes so we need to do the exit glue code to get out of thumb mode so let's knock that out real quick it's kind of the same idea except we don't do that final add right we don't tell the processor we're rent thumb mode anymore so we're going to load and register zero exit and then branch exchange r0 cool so we ran it we were in arm mode here we printed hello world we were in thumb mode here we printed hello world then we jumped out of thumb mode back to arm mode and we said get out of here do me a favor hit that thumbs up button on this video i really appreciate it but hey i hope you learned something in this video if you did do me a favor hit that thumbs up button hit subscribe and i'll see you guys in the next video thanks for your time bye-bye