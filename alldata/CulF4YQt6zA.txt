Malik sucks so I spent the last few streams on Twitch writing my own custom Heap allocator in C is it faster no is it more efficient ye no but it's mine I learned a lot in the process and that's all that matters sit down buckle up here we [Music] go after realizing one day that the m in Malo stands for Mid I decided to make my own memory allocator actually I just wanted to do this to figure out how the Heap works but that's not nearly as memeable to make a heap you need memory so I had to get memory from somewhere if only the kernel exposed a system call where I could map in additional memory to my process a function where I could add a memory map they could even call it memory map Jesus Christ that's Jason Bourne M map is a system call where you can just ask the colonel for more memory and that memory is going to be where our Heap goes we sprinkle in a few spicy parameters call mmap and get a page aligned pointer back from the kernel but what do we do with this memory my Heap API was simple I only exposed two functions Heap Alec and Heap free seems simple enough right nope Heap Alec would take the number of bites the user wanted to allocate and Heap free would give them back to the Heap before we can use Heap Alec though I needed to initialize the Heap I created two structures Heap metadata and chunk metadata the Heap metadata contained several crucial pieces of information about the Heap like how much memory was available next we slic the Heap up into pieces called chunks a chunk is just a region of memory and the associated metadata about that chunk chunk metadata will track how big the chunk is and if it's currently in use also if it's free it'll act like a node in a linked list of other free chunks with the Heap structures in place and the Heap init function complete we can begin to write the first part of the user API Heap Alec when a user called Heap Alec we first had to check to see if the Heap even had enough memory to support the request if they ask for more memory than the Heap size too bad so sad get the out of you next we'd give them the first available chunk which is just the head of the heap's list of free chunks better known as the free list problem if the user only asked for 32 bytes we couldn't just give them the entire 4096 byte region we allocated right right why I I don't know I read it somewhere on stack Overflow that's bad anyway to fix this instead of giving them the Chunk in its current state we could truncate the chunk to make it smaller and shorten it to the actual required length aligned to 16 bytes after we truncate the Chunk we look ahead that many bytes for where the next chunk would go construct a chunk there and then make that the head of the heaps free list easy peasy now we can run some tests and see that when we allocate pieces of memory we're getting small chunks instead of big chunks but how do we give them back like any any good C programmer we don't no just kidding I wrote the Heap free function to only require a pointer to an allocated chunk as input the Heap free function was pretty simple all it would do is Mark the chunk as no longer in use and then add it to the free list and this brings us to probably the biggest problem in my current Heap implementation fragment def fragmentation yeah in theory at this point I could have just stopped I didn't need to go any further my Heap was quote unquote done was it fast kind of did it work kind of but it suffered from a fundamental flaw pretend for a second that a user allocated exclusively 32 byte fragments and pretend for a second that they freed them all too yeah I know what a concept if they did this they could in theory create a free list that uses all the memory of the Heap and contains exclusively 32 by chunks what happens if after all of this they want to allocate a 64 byte chunk they can't the memory in the Heap has been completely fragmented into unusable 32 by pieces the solution pre sizee we needed to add a little spice to our free function every time we freed a chunk we would not only Mark the chunk as not in use we would also look behind that chunk to the previous chunk by adding preve size to the Heap chunk metadata we could look into the previous chunk and see if that chunk was also free and if that chunk was also free we would cool Co we would coales there we go coalescing the chunks turns our two adjacent free chunks into one large free chunk that the Heap allocator can now take control of sick after running some tests I confirmed that this functionality worked the Heap could not be completely fragmented and I was feeling good about the Heap that I wrote now I made some fundamental assumptions about this Heap that you may disagree with I didn't account for a user overriding Heap metadata with malicious memory operations I did not account for a user freeing an arbitrary pointer and potentially adding arbitrary locations to my free list but I learned something and I hope you did too anyway guys this is my last video Until 2024 I will see you next year it's been a good year uh we'll see you in the next one take care like And subscribe te