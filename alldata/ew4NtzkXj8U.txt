hi everyone our first goal this episode is to make the points change color when the mouse hovers over them and to be able to move them around by left-click dragging so the built in way of doing this sort of thing is using one of the handles functions such as handles dot free move handle from this one line of code for example we get a handle that can be selected and moved around in the editor however for the series were actually going to be implementing this handle behavior ourselves for the benefit of some extra control for example one of the things I want is for newly added points to be here selected automatically so that you don't have to click a second time to tweak their position I'd also like to have control of the highlight and selection colors of the handles anyway once we've done that the second task for this video will be implementing the ability to insert new points along the lines okay so in the shape editor script I'm going to come down to the bottom here and create a subclass called selection info and this is going to hold a couple of variables first of all a public inch point index which I'll set to negative one by default so it's just not referring to any point and then I'll be a public blue mouse is over point and another public pool point is selected okay and let's create a selection info object up at the top here and just like we initialize the shape crater in the on enable method let's do the same thing for our selection info so set that equal to a new selection info object and then I'm going to create a new method a voyage called update mouse over selection it'll take in vector 3 for the current Mouse position so in here we want to figure out the index of the point that the mouse is currently over and it should just be negative one if it's not over any point so immigration int mouse over point index equal to negative one by default and then we're going to loop through all of the points so I'll make a full loop going from I equal to 0 to I less than shape pressure points count and for each of these we're gonna check if the distance between the mouth position and the point so shape pressure points with an index of I if that is less than the radius of the point which I think we chose to be 0.5 instead of using this hard-coded value correctly replaces with a variable of course so let me go into the shape creator file and here we can just have a public float call this the handle radius set their equal to 0.5 and in the shape editor I'll replace 0.5 with shape greater door handle radius and then when we're drawing the point over here I'll use the shape crater handle radius there as well okay so if the mouse is over the current point then go to set mouse over point index equal to the current index I and just go to break out of the loop all right once we've finished with the loop we can say that if the mouse over point index is not equal to selection info dot point index so if something's changed then we can first of all set selection further point index equal to the new point index and then we want selection info dot mouse is over point to be false if the mouse of a point index is equal to negative one and true otherwise so I'll say this is equal to mouse over point index not equal to negative one finally since the selection is changed we'll say needs repaint equals true okay in the draw method I'm here to say if the index of the current point is being drawn is equal to the selection info point index then angry set handles dot color equal to say colored red and otherwise I'll set it to colored or white finally we of course need to actually call this update mass of a selection method so I'll just call this over here at the end of handle input update mass of a selection passing in Mouse position okay so let's save that go into unity and I'll select my little game object here and when the mosque is over we should see this turning red additionally we should now be able to change the handle radius in the inspector over here and that should all still work okay so we've got the highlight in working but now we want to actually be able to click and drag to move these points so let's go back to the shape editor script and I'm going to create a new method called a handle left mouse down which takes in a vector3 mouse position and at the same time just to save a bit of time I could also create handle left mouse up and handle left mouse and drag all right so we already have some left Mouse down behavior over here so let's cut that out paste that in there and instead call the handle left Mouse down method passing in the mouse position now in this left Mouse down method there are two possibilities either the mouse is currently over a pre-existing point in which case we want to select that point or it's over sort of empty space in which case we want to create a new point and then select that new point so let's say that if not selection info dot mouse is over point then we will create a new point like so but then regardless of whether or not the mouse is over a point we're going to want to set selection info dot point is selected to true but if we created in you point we're going to want to change the selection in four-point index to the index of that new point so we'll say selection info dot point index is equal to shape greater dot points count minus one all right in the left mouse up method I want to say that if the point is currently selected then first of all it will no longer be selected set selection for Dodge point is selected is equal to false and also set the point index back to negative one and I'll request a repaint as well next in the left mouse drag method when we say that if there is a point selected then we're going to set the position of that point so shape creator dot points with an index of selection info dot point index I'll set its position to the mouse position okay so now we want to actually call these two methods from the handle input method so let's say if give a event dot type let me actually just copy this to save some time so if the type is mouse up and it is the left mouse then we're going to call handle left mouse up passing in the mouse position and I will paste the same thing again except here I'm interested in it being a mouse drag event in which case I'll call handle left mouse drag okay the last thing I want to do before we test this out is just go into the draw method and I just want to give it a different color if the point is actually selected so I'm going to say handles color is equal to and then if the selection info dot point is selected I'll set this equal to set color dot black otherwise I'll give it its red highlight color so let's save this and try it out so I'll give that a moment to compile and now mouse over still goes red but if I actually click it should turn black the dragging isn't working though and that's just because I need to I mean it is working but I need to tell it to repaint while I'm dragging so in a handle left mouse drag after setting the position I'll just say needs repaint is true okay let's try this once again so once that compiles I can now drag this around and if I insert a new point it's automatically selected and I can drag that as well okay now one sort of undesirable thing that's probably happening at the moment is if I drag a point of a higher index over a point of a lower index it's going to pick up that new point to select since we're continually calling this update mouse over selection method now I think I'm actually going to rename this to update mouse over info just that it doesn't sound like it deals with the actual selection of points and I'm only going to call this if the point is not selected so I'm just add the exclamation mark before that like so all right so now if I save that and come in here should be able to drag this points around without it picking up the other points great so the only thing we need to get working with the movement now is the undo functionality so currently if I move a point and then press command Z to undo it's not undoing the movement it's instead just undoing the last point that was added so let's go back to the script and when the left-mouse is released we're going to want to call undo record object passing in our shape crater object and I'll give this a name like move point all right now recall that a record object works roughly by comparing the state of the object before to the state of the object afterwards and by the object I'm in the shape crater object that we passed in so in order for this to work we're going to have to first set the position of the point that we've moved back to its original position and then after we call record object set it to its new final position so in the selection info class and we'll create a public vector3 called position at start of drag and when we select the object so in handle left mouse down I'm gonna say selection info dodge in position at start of drag is equal to the mouse position and then over here we can say shape greater dot points with an index of selection info dot point index is equal to selection foe dot position at start of drag and afterwards let me copy that we can set it equal to the mouse position all right so if I save that go into unity I can now move these points around and also undo and redo their movement let's now move on to inserting points along the lines okay so coming down to the selection info class I'm gonna create a new public int called the line index which are such a negative one and a new public pool mouse is over line then in the update mouse over info method at the bottom here I'm going to say that if the selection info dot mouse is over point then the mouse can't be over a line so I'll set that to false selection info dot mouse is over line equals false otherwise we want to check if the mouse is over a line so we'll copy this for loop here to loop through all of the points and I'm going to get vector three next point in shape is equal to shape crater dog points with an index of I plus one and of course we want to make sure this doesn't go out of bounds by saying mod shape crater dot points count all right we can say float distance from Mouse to line and really use a method in the handled utility class called distance point to line segments so the distance from Mouse position to the line segment defined by pointer I in the shape crater and the next point in shape now the distance to line segment method is expecting vector twos but we're giving it a vector threes here and we can't just cast these two vector twos because then if reduce their x and y-coordinates when in fact we want to use their X and z coordinates so this is admittedly stirring a little bit from the topic at hand but I quite like to have an extension method for converting to a factor two like that so I'm very quickly going to create a new C sharp script called extension methods and so just be a public static class non hairatan from anything and I'll create a public static method returning a vector2 called something I convert to X Z and we say that this is an extension method of the vector 3 struct by saying this vector 3 and I'll just call that V 3 and then this will return a new vector 2 with v3 dot X for its x-coordinate and v3 dot Zed for its y-coordinate all right so if we save that go into the shape editor and right mouse position dot 2 XZ and similarly points I dot 2 XZ and same thing for this last one as well just above the for loop I'm good iteration int mouse over line index which will be negative 1 by default and then here we can say if the distance from master line is less than some threshold distance and I think I'll just use the shape greater dot handle radius for this as well then mouse over line index is equal to I now it's of course possible that in some cases there'll be multiple lines within this handle radius of the mouse and so we don't just want to choose the first one but we want to choose the closest one so over here and we'll create float closest line distance and I'm going to start this off at shape crater and door-handle radius and then in this if statement I'll say if the distance from master line is less than the closest line distance then closest line distance get set to this new distance all right once we're done with all of this we can say that if selection info dot line index is not equal to the mouse over line index then the selection for line index get set to the new line index and selection info dodge mouse is over line will be equal to as with the point false if the line index is negative one and true otherwise so mouse over line index not equal to negative one and then we'll ask for a revenge just up here where we're setting Mouse's over line to false if the mouse is over point I should also set the line index back to negative one okay now in the draw method I want to say that if I is equal to the current line index then I want to draw this line in a different color and I also want to draw it notice a dotted line what is a solid line so let me copy this here I'll change the color to color dot red and instead of draw dotted line I'll call draw line and just remove this dot size parameter there all right I'll put the rest of this inside the else statement and let's save that and try it out so once this compiles I'll try moving the mouse near to a line and we should see that Channing solid red so that is nice we now just need to be able to actually click to insert a point along that line so the way we'll do this is in the mouse down method over here when we're adding a point and we start by saying int new point index is equal to and then if selection info dot a mouse is over line then the new point index is going to be equal to the line index plus one otherwise it's going to be equal to the number of points currently in the shape creator points list like so okay so now instead of saying points dot add mouse position we're going to say insert that mouse position at the new point index now okay and we'll set the point index to that new point index that we calculated so if we save this now go into unity as always wait for it to compile and then click along the line we should see that we're able to insert a new point wherever we want so that is it for this episode in the next one we'll be adding support for multiple shapes underlain Cheers