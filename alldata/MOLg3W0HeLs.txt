hi everyone in this episode we're going to be finishing off this stealth mini project so the first thing I'd like to do is make sure that if the player enters the guard field of view then the spotlight turns red a very certain duration and if the player is able to escape the spotlight before that duration is up then the spotlight will turn back to yellow and the player will be safe so let's enter the guard script and I'm going to create a public float called something like time to splash player and I'll set this to maybe half a second and then I'm also going to create a private float called player visible trimer alright so now in the update message if the player is visible then I'm going to update the timer so play a visible timer plus equals time dot delta time and if the player is not visible then that timer will count down so minus equals time dot delta time and then outside here I'll just clamp the timer between zero and the max value the time to spot player so I'll say player visible timer is equal to math F dot clamp so we're passing the value or clamping that's player visible timer the minimum value is zero and the maximum value is time to spot player all right we can then set the spot light dot color equal to color dot left between the original spot light color and color dot red with a percentage of player visible timer divided by the time to spot player so when player visible timer is zero then the color will be the original spot light color and when it's equal to the time to spot player then the color will be completely red so then we can just say if the player visible timer is greater than or equal to the time to spot player of course it should never be greater than because of this clamp but I think logically it makes sense to just have that anyway if that's the case then the guard has spotted the player and will want to trigger some sort of event so going up to the top of the class I'm going to create a static event that a guard can call when it spots the player so public static event and then use system dot action which as I mentioned back in episode 12 I think represents a delegate with no parameters and a void return type and I'll call it something like on guard has spotted player and then over here as long as the event is not null we can invoke the event just with a pair of parentheses like so all right so let's save that and then I'd like the player to be notified when it's been spotted and when it spotted we're going to disable the control so that it can no longer move around so I'm going to a table called disabled and in the object method after saying vector three input Direction is equal to vector 3.0 and then only if the player is not disabled will we actually set input Direction equal to the input so I'll just cut that in there like so all right now I'm going to make a method called disabled which is simply going to set the disabled boo equal to true and we want this method to be called when the player has been spotted by a guard so in the start method we can say guard dot on guard has spotted player plus equals disabled so that is subscribing the disabled method to the on guard has spotted player event now it should be a good idea to unsubscribe the disabled method from the event if the player object gets destroyed which will happen for example if the scene gets reloaded at the end of the game so let's create a void on destroy method which gets called automatically when the object is destroyed such as when scenes are changed and here we can just say guard dot on guard has spotted player - equals the disable method all right so if we save this and quickly run the game should see that if we get spotted so just run into the spotlights here then the controls are disabled and I can no longer move okay now another thing if we want to have happened when the player is spotted is the game over screen should pop up so let's create a quick game of the screen I'll start with a UI canvas and I'm going to set this to scale with the screen size and I'll give it a slightly higher reference resolution like 1920 by 180 and then we request an empty child object just just go to hold the game of UI elements so first want a bit of text which can say something like you've been spotted and I'm going to set that to best fit let's go into 2d mode here and press F so we can see this scale that up Center it and give it a max size of something big all right so like that looks good make the text white and let's maybe make a raw image just to say background for this just make this a strip that goes across the screen and it's nearly black and slightly transparent and we want the text to be rendered on top of that so let's just change the order here all right something like that looks good and I want to duplicate this text have it be slightly smaller and this can just say something like press the spacebar to play again all right so I'll take all of those elements and just parent them to the game over empty so we can now easily show we'll hide that and over here I'll just duplicate that and I'll hide the one I'll call this game win and the text here can just say there's no congratulations you won and still you can press spacebar to play again all right so we'll then need AC shop script called something like game UI and I'll attach that to the canvas and this will have a reference both to the game lose a UI and the game win UI object okay so then we can have a method called something like show game win UI actual simply say a game when you I dot set active crew and will have similar method show game lose you I I'm sure of course to set the game lose UI to actors and let's say let's also have a bull called game is over and both of these will set in game is over equal to true and then in the update method if the game is over then we'll wait for keyboard input to reload the scene arguably this shouldn't really be done in the game UI script is not really its function but this will stick it in here since this is such a small project so we're going to want to access the scene manager which is inside unity engine dot seam management so we'll just add that namespace there and we can now say scene manager dot load scene with an index of zero that happens if the spacebar is pressed down this inputs dot get key down key code dot space all right now we need this message to be called from somewhere so we don't have a game wind condition yes but we do have a game lose condition so we can say guard dot on guard has spotted player has the show game lose UI method subscribe to it but then of course once either of these you guys have been shown we no longer care whether the guard spots the player or not so we can say guard dot on guard has spotted player - equals show game lose UI and the same thing over here now we're getting quite a lot of duplicate code in these two methods which is a good sign that we need a new method I'll call this something like on game over and can take in a game object argument for the game of a UI and we'll just copy this code over from there and it sets the game over UI to active and then this method can I'll just call on game over and pass in the lose euy and this method can call on game over and pass in the win AI okay so rename list again lose and then I'll assign these two objects I now play this and run into the guards spotlight you can see you've been spotted it's displayed here and if we press spacebar the level does reload but we've got this lighting bug and I'm not sure if this has been fixed in the latest version of unity but whatever that is when you're watching this but for now what you can do is go into the lighting settings here and you can turn off auto and just say it build and it will take a moment here alright and now if we play this and try it again press spacebar the lighting is still correct okay let's make a quick wind condition so I'm going to make a little cube object and as you could have said somewhere over here and this is going to be the finish point so I'll give it a trigger Collider and set the tag to finish and also just rename it to finish point and then in the player script we can have a void on trigger enter takes an a Collider call it the hit collider and just say if hit Collider dot is equal to finish then we have finished the game so once we finish the game I'm going to start by disabling the player and then we want to trigger an event saying that we've finished again so let's make a public event once again system dot action called on reached end of level or something to that effect and then we can say if on rich end of level is not null then we will invoke the event on reached end of level and a pair of parentheses okay so we want our game UI and the start method to first of all find the player object and get the unreached end-of-level event and subscribe the show game wing UI method to that and then on game over we will unsubscribe the method just using minus equals instead alright so what should happen when we play this is if we manage to navigate or I don't actually get caught up now but I never get around to this game over point then congratulations you win I get displayed there alright so at this point we basically have all of the pieces in place we just need to design the level one last technical detail I want to note is that if we duplicate a couple of guards not sure exactly how many I need to show this or as you can see once I get to five the quality of the lighting goes down over here and if I make another one then these drop and quality as well and so on so if we want to have more than four guards but still display high quality lights well obviously there's a performance trade-off but we can go into the quality settings here and we can up the number of pixel lights so if we want to have ten guards we should set that to 10 and then all of them are being rendered it for quality okay I'm going to delete these extra guards for another and I am going to create an empty game object called a guard holder and this is going to hold both the guard object and its associated a path object and before I make a prefab out of this I just want to delete all but two of the waypoints since will always want at least two waypoints but if we have more and then we need to delete extras that we don't want then asking to disconnect the prefab so I want to now make a prefab out of this got guard holder from the create a folder called prefabs and in there I'm going to add the guard holder object and then I'll delete it from the scene all right I'm going to fast forward a little bit as I move some cubes around to make a simple level layout and place in some guards and set their patrols so here's what I came up with it's not particularly challenging or well-thought-out but this is the kind of thing that you could do anyway that concludes this stuff game mini project so until next time Cheers