in a recent Community post you asked for more design pattern videos and I do listen to you sometimes so today I'm going to cover a design pattern that I haven't talked about at all on my channel the state pattern I started working on a few python examples to illustrate this design pattern but then I remembered that I had actually used this design pattern in the past quite a lot actually so I dug up some really old code from like 10 years ago and it made me realize how I actually am I'm ancient so this is going to be a lot of fun we're going to look at a python example but also at some of the old stuff I built a long time ago now knowing when to apply design patterns like State it's really important if you want to learn how to detect design issues in your code more quickly check out my code diagnosis Workshop you can sign up for free at RN code diagnosis Workshop is based on my own experience reviewing code trying to do that efficiently while still finding the problems fast contains useful advice practical code examples that you can apply right away to train your own skills earn. code diagnosis the link is also in description of this video now let's dive in so what exactly is the state design pattern it's a behavioral pattern that allows an object to change its state and the interesting thing about the state pattern is that the state specific behavior is encapsulated within the state object so let's start with a very basic example of an almost empty python script here I'm going to build something resembling the state design pattern in here and what I'm going to do is use a very simple example that use a light bul so we're going to have first an interface class I'm going to use protocol for that in Python and let's call that a light state so this a protocol class and the only thing that the light State can do is it can switch the state of a light bulb so this is something that we need to pass as an argument so that's our state interface then we can create specific States for example the on State and the off State so this implements the switch method following this protocol I'm not going to print this that's what GitHub co-pilot generates but what I'm going to do here is say bulp do state equals of state and I'm also going to create a class of State and off State when you switch it it changes the bulb state to the on State and then the final thing that we need in this very simple example is a class light bulb and this is going to have a state let's say initially it's on and then we have a switch method that switches the state so this uses the behavior of the state to change its own State and then let's also add some print methods there we go and let's add some code to test this so we have bul and then we switch it twice and when I run this then this is what we get so first it turns the light off and then it turns the light on now this extremely basic example right you might wonder why would you set this up in this way with all these complex classes and protocols and whatnot if you can just have two methods that each print light is on or light is off now the whole advantage of the state pattern is that you now have a mechanism to put your behavior your specific Behavior related to the on State or the off State into a separate class and that is exactly what the state pattern does so it decouples the object that has a particular state from the things that you want to do in the particular State now like I said this is an extremely basic example there's actually no real use here to use the state pattern I just want to show that this is the process of decoupling that you do now let's look at a slightly more evolved example which is about document editing and here the idea is that we don't have a light bulb but we have a document and a document can have a state it can be in draft States it can be in review States it can be in published States or different types of states that a document can be in and you can also do different things with the document in each state and here you see another example of how you can use a state design pattern to put that state specific behavior into separate classes so here instead of a light State I have a document state which is also a protocol and we have edit we have review and we have finalize so those are sort of the things that you would typically do in a particular state so that's the document state protocol this class I'll come back to in a minute then we have our specific States so we have the draft state so it contains a reference to the document that it works with and it has editing reviewing and finalizing so in draft State we can edit the document so that's allowed so in this case we just append some text but here you can imagine that there's a whole user interface different kind of actions that you could do in this draft State reviewing means that we change the state from the draft state to the review state so that's what you see here so we set the state to reviewed finalizing isn't possible here because we first need to review the document so that's simply print this message then we have reviewed so that's another state that has an edit method so you can't edit the document while it's on the review when you call the review method it simply prints that the document is already being reviewed the only thing that we can basically do in the reviewed state is that we can finalize the document and that means changing the state to finalize which is the third state in this example where you can't edit you can't review and you can't finalize either so basically you can do nothing in the finalized States it's finalized right now each of these states has a reference to the document and I didn't use this class directly document I used document contact because if I change this to document you see that we get an issue with that this class isn't defined yet because I'm only defining it here so what I've done in this particular example is that I've used a document context class that has the actual content so this is the representation of the actual document and it has some methods like being able to change the state editing reviewing finalizing um some other things as well so you can see the actual implementation down here so we have a document so it starts in a state of draft content is empty so normally of course this wouldn't be a simple list of strings you would probably have a more elaborate structure to represent your document could be markdown could be HTML anything and then we have some methods for managing the states so each of these methods editing reviewing these are kind of convenience methods that help us change the state of the document so we have editing review viewing and finalizing and finally we have a helper method for showing the document content so how do we use this well we start with a document then we start editing the document we print it we try to finalize it which won't work then we review it then we try to edit it again which don't doesn't work because we're in the reviewing status and then we finalize it and we try to Ed it again which is not allowed so when I run this then this is exactly the kind of outputs that you get so now you have this you can start filling in these states more and add more State specific behavior for example in the draft State we can now add all the behavior for editing the document in various way you might want to add things like copy paste formatting whatnot in this particular class and then in the review state you can add Behavior that's specific to reviewing such as adding comments to the document drawing a circle around text marking up text everything that you need to do when reviewing the text and the finalized State you might add Behavior specific to finalizing a document for example publishing it on a website or creating a backup and storing it in the cloud or whatever you want to do when your document is finalized so it's still pretty basic but it does show that you use a state design pattern to take each of these different states and then you put the behavior belonging to that state in that class instead of having to put everything into the document class which would result in a huge document class right if you had to put everything related to editing reviewing finalizing the document in a single class that would have resulted in a very large class and that's typically the goal of design patterns to decouple things to make sure that classes don't have too many different responsibilities so the state pattern can help with that if you're dealing with an application where a thing has different kinds of States there's a particular area where the state design pattern is actually very useful and that's in game development now this is not a game development Channel but when I was working on the code example for this video I remember that actually I did use the state design pattern myself when I was creating some games a couple of years ago so I actually taught a game programming course at the University for I don't know how long quite long maybe seven or eight years and uh for that particular course I developed quite a few examples of just specific spefic games so I worked with a graphic designer to create some nice assets we created some cool games that the students could work with it was actually a lot of fun but one of the things that I did with those games that I used without maybe even realizing it the state design pattern to make sure that the different states of a game were handled in different classes otherwise it would become way too complicated and I initially developed those things in C but I also later created a JavaScript version of those games and I'm just going to quickly show you some of that code to give you an idea of how this actually works one of the games I created is called penguin Pairs and there's an interesting story into how that idea actually came into existence when I was thinking about the kinds of games I wanted to build when I was setting up the programming course I came across a very interesting article talking about penguins sex life that's weird to just come across an article like that but it did really happen I wasn't actively looking looking for that or anything anyway what was really interesting in that article is that actually somebody like over 100 years ago in the beginning of the 1900s did Research into uh Penguins pairing reproductive behavior and they found out that what the Penguins did was actually pretty sickening so uh they were actually too afraid to publish their article about the Penguin's sex life and only 100 years later like in 2012 or something that original articles that that they couldn't publish surfaced again and it detailed kind of grew some penguin reproductive Behavior Uh I don't want to go into details now because it's actually pretty horrible but even though it also had to do with the time that it was reported which was in like the Victorian area so people were uh you know not as open as we are nowadays but still anyway that led me to create a game about pairing Penguins but in a slightly more friendly fashion so here's a screenshot this called penguin Pairs and you can actually play this in the browser because this is the JavaScript version so I'll just show you how this works so I'll play the game so these are sort of puzzle games and the idea is that we have to create pairs of penguins so the goal here is to create one pair of penguins and obviously we have two penguins now the problem is that the playing board is pretty slippery and Penguins basically continue moving until they encounter an obstacle like uh an iceberg that you see here or another penguin so what I can do here is I can move this penguin to the other penguin and now I W the level so this was of course pretty easy but let's take a look this is level two so here I also have to create a pair of penguins now the problem is I can't just do this because now the penguin falls into the water and uh there's no way for me to create a pair anymore so let's retry that so what I have to do is I have to move this one here and then I have to move that one here and then I can create the pair of penguins there we go this one is again slightly more complicated so I can't move this one first because if I do that then it simply falls off the board which we don't want right so I need to do this one first and then move it down and then we make the pair like so now it gets pretty interesting because how are we going to do this so if I just start you know randomly pairing penguins like I don't know now for example I have a problem because this penguin I can't pair it with anything anymore so I lost the level so I need to retry it so let's see I can do uh this one first and then let's do that one and uh you see now I already screwed no actually I can still make it there we go and that one and then we have that one yes so we made it again if penguins have different color they simply collide with each other and stop so I can do this and then I can do this and now the goal is to create two pairs of penguins so there we go and then we solve this level as well it goes on like this for a couple more levels and there's a few different types of objects in this game it's actually quite a lot of fun uh to think of a few of these puzzles but that's basically how the game works now how is this related to the state design pattern well actually when you look at a game like this there is like a bunch of different states so now we are in the playing state but if I try to solve this puzzle and I apparently need to do that by killing this penguin by Green penguin and then there we create the pairs so now we are no longer in playing State we are in the you have one state and I click I'm again in the playing state so there's State switches going on here and each state has different kind of behavior for example the U1 state has an overlay and here we have all the interaction with the Penguins if I press quit then we're back in the level selection state if I do back here then we're back on the title State and there's also an options screen state where I can disable hints or change the volume of the music I don't think there's any music at all actually at the moment so I'm not sure why that's not working but each of these states has different behavior and what you definitely don't want is that all of this behavior is in a single huge class you want to split that up and that's exactly what the state design pattern does what I have here is some of those source files so this is actually a pretty old code that I wrote like I don't know 10 years ago something like that but you see that each of these elements each of these parts of the game has a different state we have the help States we have the level finished States level menu State playing State I didn't change any of this Cod by way this is really what I used for this particular game so here is the actual JavaScript code so we have a title menu state so this uses something called a game of list it's basically uh a scene graph more or less and I create some uh backgrounds some buttons like playing options a help button and then you see we have handling input which checks that if the play button is pressed and we switch to the level select state and if the help button is pressed we switch to the help State or the option State when the option button is pressed so that's what the title menu state is in the options menu State it's different so here we have have a different interface so we have onoff buttons uh music slider uh back button and then depending on what you do if you press the back button you go to the title State again right and in the playing State it's again different we have a list of levels it loads levels and then it basically tells the current level to handle input uh it updates the current level if it's completed it plays a sound and then it switches to the level finished state so these are typically things that you will need to do in a game and the state design pattern actually helps a lot here in separating all of this code into different classes now the classes themselves look a bit weird because they're not really classes it's a function but then it's also a prototype so this is kind of javascript's weird class mechanism uh which is not really a class but it's called a prototype so it's different it doesn't really matter nowadays especially if you use typescript you wouldn't use prototypes directly anymore like this you would simply define a class and that would work just fine but this is how I did it 10 years ago by the way if you find these things interesting you might also like my free newsletter where I share all sorts of news from the software industry and also sometimes show you a peak behind the scenes of iron codes you can subscribe for free by going to my website Iron codes.com um you can unsubscribe at any time if you don't like it now I must admit that apart from games I haven't used the state design pattern all that much in my own code now that might be because I simply haven't encountered a situation recently where I had to deal with modeling different states but I think another reason is that State Management is often part of a framework already so if you're building a game for example you would probably use something like py game and I'm expecting that has some sort of State management system already built in so you wouldn't build this from scratch but if you notice that your application has different states then it makes sense to split those up into different classes or if you want to to do it in a slightly more pythonic way you could also turn that into different modules with functions instead because you will often need only one instance of a state right so instead of using a class you could also use a module with functions and then that's nice because the code specific to each of those States is in different files and it makes it a bit easier to manage so you can use it for document editing system like I've shown you you can use the model states in the game but you could also use a state design pattern for example to model a simple and advanced mode in a guey that you switch between and then it shows a different guey depending on the state that you're in I hope today's video gave you some ideas of where the state design pattern might be useful for you now I'd like to hear from you have you used the state design pattern and now that you know about it are there places in your code where you think hey that could actually be useful or do you think the state design pattern is a relic of the past and it's completely useless let me know in the comments if you enjoyed this video about the state design pattern give it a like it really helps me a lot in reaching a wider audience here on YouTube now I also did a video already a while ago about the facade design P you might like that as well and you can watch it right here thanks for watching and see you soon