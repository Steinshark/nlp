hello everyone it's so great to be uh on on stage again I I have done some like remote talks and I hate it every second of it so now I'm gonna have some audience participation and everything I hope you're having a nice day uh there was a lot of code shown today from from daniela's great keynote from a bunch of other things I'm gonna I'm gonna help you like decompress and chill for the rest of the evening there is some code in this talk I promise there's some talk some code but it's it's you'll see so uh let's start with this you know this man right who knows this man okay some people doesn't know this man it's Alan Turing you should know who he is uh so is uh you might recognize this building uh this is the really fancy manner uh that is around the military World military government place called Bletchley Park in England which is just about here north of London somewhere halfway through Birmingham and it's a place that is mostly known in the during World War II because that's where the British Cipher uh Bureau was and that's where they were working on trying to crack uh axis uh codes in general uh that's that's the nice machine we made at the time which some people say is the first computer it's technically not a computer if you're a purist it's the British bomb and it's technically an electromechanical machine but it's not a general purpose computer in the sense that it can only do one thing which is try to crack the ending codes basically you cannot repurpose it to do something else so it's technically not a computer by the pure sense that distinction goes to eniac which was made about couple years after World War II it's also made by Alan Turing it's following the same principle but it's actually general purpose you can see those two ladies are actually trying to program it to do something uh unlike the original one we can only do one very specific thing uh yeah and all that stuff has been made to crack this interesting uh piece of German engineering that we're going to be talking about for the next hour or so so hi everybody uh my name is mature uh I'm a tech lead at Paradox development Studio I make a game called Hearts of Iron I've been working over games in the past in the same company uh you can find me in those very unmatching uh uh handles that you use the Twitter one while you can uh and I have a Blog that I post in very very sporadically uh so uh I might post a second post this year as a trip report but it's I'm not gonna lie I'm very sporadic on how far how much I post there so what is this talk about why are we here right we're going to talk about cryptography uh we're going to talk about how we break ciphers we're going to talk about history I mean you know if you don't know me I'd like to talk about history there's a reason why I ended up at Paradox uh and there's some code and it's even modern you'll see so as every good talks uh it started with a tweet uh which was made by my game director as a teaser for my uh for For an upcoming expansion where he gave people like uh basically a an insightful message with the Enemy machine and then he gave them a bunch of Clues on how to decode it like for example if you're familiar with Enigma if you see Roman letters that's the that switch Waters you should push to place I'll explain how the Machine Works in a minute but I saw that tweet and I came back to him and said but but you gave them everything already right like they have they have the wheel order they even have some like plain text that we can use to crack stuff like like we're gonna Chuck this thing in an enigma simulator it's gonna be done like it's 2022 right like you should just give them zero clue and they should be able to crack it right and he says oh yeah but I don't know how much time the fans would make to actually manage to crack it and you know maybe we would be late on a marketing plan blah blah blah you know it's a teaser right it's not supposed to be a very big thing and after a moment I sat down I was like wait I just said like of course it should be crackable by any machine modern by any modern mission right because it's like it's it's a it's a mechanical device invented in the 20s like there is no way a modern computer cannot break that easily right or can it and basically the rest of these stock is we would win like two nerds with a bunch of phds from the 30s or my machine and me was really bad at math or cryptography but I have a lot of calls and I don't even think Turing could dream about this thing uh in his better days so let's see so to explain about how that works first I'm going to explain a bit uh the ending my machine and exactly where it come from so you know we start with a very common quote maybe the most overused quotes ever all Warfare is based on Deception why am I saying that well if you've never heard about Warfare I'm gonna give you like a very quick run through if you've never played any of my games so bigger number usually wins in a battle uh a bunch of our players have complained about that and we keep saying that that's that's expected that's how that works so of course if the enemy has more numbers you just try to hit them when they are not that's that's the that's the basic thing right and radio was invented in the like radio communication Democrats itself in the 20s and 30s and that became a tremendous uh help to coordinate attacks and and try to outflank your enemies which was a lot seen a lot in the opening moves of World War II uh the problem is if the enemy can listen to your radio then well you lose the element of surprise and they're waiting for you which is not good so obviously you need a way to be able to transmit message over the air but somehow if you're an enemy just intercept the signal they can't make any sense of it and then this comes cryptography this device was invented somewhere with not entirely sure exactly the patent is a bit confusing late at the end of World War One slash the coming of the the year uh the year forming uh the the years after that it was made for commercial markets originally it was like to protect yourself from a spies uh like corporate Espionage and stuff like that you would send your internal memos about your patents and your research uh through these machines and again I have to stress out there is no electronics in this it's made in the 1980s uh 19 1920s it's it's a bunch of routers some wires lamps a battery and some soldering that's it and that's how the whole thing works uh it is self-powered and it's portable which the German Army like very much very early because again you can put it in an armored vehicle you can put it in the submarine and it's pretty good to encipher most messages because the only thing it deciphers is like letters from A to Z which is perfect if you're sending Moss uh uh and you can see like foreign in the Battle of France trying to coordinate uh how to bypass the order and over bad memories anywho so that's a rotor from the Enigma machine it looks weird and maybe scary but it's really simple the only thing it does is that you have like 26 entry pins on one hand and you have 26 out out exit pins on the other hand and then you have a bunch of wires that just scramble where the electrical pathway goes and basically each pin is a letter that's 26 that's the point right so if you get a if you get a signal that would mean to be an a well you follow the wire and you end up I don't know maybe like on a seed or something like that it's it's basically implementing a very simple like substitution Cipher like you've probably learned if you took any simple like cryptographic class like it's it's an advantages or Cipher because you don't have the same offset for every character it's just like every layer maps to another letter and that's it that's what it does it's it's really dumb uh and they're already pre-made right like they don't you can't be configure them under we configure them on the flyover factory made uh 10 in total we made for the ending by Machine originally the first model had free they only had three three different uh routers so how do you how do you enact complexity cryptographics your safety from this because this is obviously trivial to crack right okay it's a simple substitution Cipher you just use a frequency table and you're done it's really really done to to crack so the complexity is that when you start chaining them and then you start having the the rotors turn every time you press a key but they don't all turn the the right was where the rightmost one turn every time you press the key on the keyboard but then the other one only turns every 26 Strokes because there's like a smaller pin somewhere that would just grab the next wheel once every 26 Revolution and make it turn again and so basically every time you click every time you type it on the keyboard the electrical pathway just gets reconfigured inside and the substitution Cipher changes so frequency analysis doesn't work anymore because it changes every stroke and the more Wheels you have the more it changes every time you type and that's basically how we made uh like a very simple uh concept of substitution just become harder to crack because again if you don't know when they're gonna turn and what their original position the text is just garbage because we make much out of it it's also meant to be portable so there's no printer in it like you don't type text and get something else what happens is when the when the electrical current wrench which come from the right side like on the on this side it comes from that side and it exists on this side when the electrical signal that you you got from from typing a key on the keyboard arrives to the left side what it does is that it enters this static uh reflector which basically just remaps every letter to another one and then the signal is bounced back again so basically you would like exit here for example through the reflector you would get there and then you would pass through the machine again and then exit through another pathway it has one special property which is every time you type a key there is no way the same key gets out because obviously the electrical current has to travel and get somewhere else and then you get that electrical current and that's the lamp you light on top of your keyboard and that tells you which letter it's supposed to be inside third and then you have someone on the side that is just copying as you type like what is the output that's basically how that works and so that's the that's the that's basically the the thing it's just like every time I type a keystroke one of the 26 on the right uh hand side of the of the of the rotor gets this electrical signal it travels uh through the through the circuits with like another that changes every keystroke because the rotor turn it comes back and then one of the one of the 26 snap lights up and that's my output that's being ingenious for for what it is uh uh look at the complexity now okay so you have three orders you can put them in any order I'm bad at math but that's three times two times one right because you can only pick like uh you have three choice for the first one then two then one that's because you only have one more order that's six okay and then you have to know uh you know you have to know what's what uh where the rotor will position when the message started and that gives you about Seventeen five hundred uh seventeen thousand potential keys if we multiply those two together that's 105 possible combination that's probably good enough to defeat someone who is just trying to brute force all your keys on paper but as soon as someone gets a bit smart that's probably not good enough it's you might have thought like in the early 1920s at the end of World War One when everybody was tired uh that might have been good enough but very quickly it starts making possible to find attacks so of course uh they decided to upgrade it so the first thing we did is they added like a ring setting on every router that is configurable and that changes when it will take the next the next will move instead of being like every time you eat a it's every time you eat whatever letter you configured and then that also means that you cannot predict the attacker cannot predict when the second rotor and then the third world will also turn and that also scrambles the message at after some point uh and yeah that's the point you change it to another position uh Dimitri the German military for this was not enough so we've introduced the plotboard and the plug board is really simple again it's just like you have all the letters and then you have a bunch of uh stackers as we call them in Germans plugs and you just make pairs with them and what it does is just it just remaps the electrical current it's another substitution Cipher on top basically but the difference is not every letter is paired with another letter you you have originally I think they had like six uh cables like that in later in the war they had 10 and when you set up the machine you take about you take 10 of those and you make Pairs and again it's it's so it's something you agree with the other party when you're about to talk but if the other part if the peoples if dropping do not know they probably get garbage again because it's just another Cipher another substitution on top that was still not enough we were still afraid that we could be uh the code could be right so they uh they added more Brothers originally like instead of three rotors you had five and then eight they were still like is it enough so someone figured what if we shrink the reflector that that is at the end and then we make a smaller water and we fit it there so technically we have four rotors now instead of uh instead of uh instead of three of course since that water has a different size because you basically they they retrofitted it in the same box they didn't want to change the shape of the machine it cannot be replaced by the original one so there's only two that you can have at the end you can't have like the full combination of if there was actually 10 Waters and that's the quicks marinade uh M4 which is the considered the best Enigma machine during the war that's the one that was used by the U-boats uh so okay let's go again we have four Waters out of 10 so two options for the first one and then it's uh eight then seven and six that's at 672. uh then you have like the initial word like the key whatever where on which letters are the rotors initially placed uh when you start and ciphering the message that's about like for 24 26 times four like 450 uh six thousand uh then you have the initial water setting the the the last word it doesn't matter because it does not turn another router left to it right because it's the last one so it doesn't matter which setting that's only the first the last three counts because that's the only one that can turn uh so that's still like 17 000 options and finally you have you make 10 combination out of 26 I'm really bad at combination but uh but some math tell me that it's like 150 whatever trillion it's it's a big number it's a it's a big number uh if you multiply all that together that's about uh uh yeah 10 to the power of 26 combination that I don't even know what units that means but roughly speaking it's 62 bits encryption roughly speaking and again I want to stress that it's 62-bit subscription with a bunch of Wheels a few wires some soldering a lamp and a battery and that fits in a car which again for 1930s impressive I'm not gonna lie so how do you work like if you're if you're a German operator which technically the Japanese and Italian had some machines too but mostly we're talking about the German one here uh you install the rotors right usually the configuration of like the which order they were put in the machine changed every month and then as the war progressed they changed it every week and even sometime every day because you're like uh what if what if somehow they got the combination through spies we better change that more often uh you said the ring settings on each other like when are they gonna actually turn over uh then you set up the plug board like you you you plug the uh the pairs as as instructed by basically every every site as a code book and we just have the keys for the day uh then you have a daily key that's where you set the position of the routers and then they did something quite smart instead of immediately and ciphering your message you pick another key you uncipher that key uh with the uh with the with the daily key which is only four characters right because you have four rotors and then you reset the position to the key you've just decided and then you type your message it's a classic thing that you do in cryptography right you do not actually encode the whole message with a big key like for example if you do uh errors encryption to to talk to talk to someone you only use error set to change your key and then you use that trash uh that that that that uh throwaway key for the rest of the communication the point is if someone has a lot of messages they don't actually use the same key for the max for most of the length of the message so you cannot based uh like you can use a bunch of Statistics to help you out Crack like uh things that keep repeating for example because for example if you had the same word at the same place or the same letters at the same place and you use the same key for every message like someone with this dropping could start looking at patterns and say like hey this letter keeps repeating at the same place that sounds weird like maybe maybe we're on to something so the way you defeat that is that you only use the the daily key to inside for four characters and then you actually use a completely randomly generated key and that kind of breaks some of the attempt at using those methods that works pretty well and yeah basically you type your message and then you append the actual key that you inside for that first and then you send that over cool so now you're probably wondering okay it's the 1940s how did we manage to break 60 bits encryption uh for reference 60-bit subscription I have a slide later is where we started like when we started uh having errors sha1 be I have enough Collision that you could make an attack with 60 bits we said okay it's time to retire it because someone with a 20-20 machine and about hundred thousand dollars can generate a collision but that's again with a 2020 machine uh uh and setup like they obviously didn't have that in the 1940s so how did they manage right so uh let's go back a bit it's uh it's 1930s uh you're Poland and you kind of know that your neighbors are up to no good so you start a cryptography Bureau uh very this man who knows this guy huh are you polish not surprising uh this one is I discovered during my resources uh my registry he's a Polish mathematician he was actually a PhD student I think in 1932 when he was hired by the police Cipher Bureau and they say Hey you seem to do math uh can you help us crack this German codes he impressively managed to uh reverse engineer a lot of stuff just based on the sales documentation of enigma he had the the public self documentation they had like for the industry trying to sell their machine to the to the private sector and in them they had some examples of insiphered message and plain text message and just based on that and a rough idea of how it worked he reverse engineered the brothers the running positions and then he actually designed a thing called the bomba which if you remember the British bomb it's because it's basically the same idea and he shared all his research in July 39. and that's the machine you built in Poland in the mid to late 30s which is called the bomba the bomb back I'm not gonna even try to punish polish uh basically what it does is that it uses a flow in the German uh protocols because Germans are very protocolory as we all know and uh I when I wrote this talk I didn't realize I would be doing it in Berlin so my apologies for the German jokes uh so the thing was at first the German operators were afraid that if one of the free first character was gobbled you would actually be unable to read the rest of the message because that's where the key is so VPD twice every time and that gives a very interesting property in the message you know that every message the first and the third character the fourth character the uh you know of sitting the the second and the and the and the fifth character the third and the sixth character all the same you they they don't look the same because they need mind the Rudders but you know that those characters hold are saying they have a property that you you have a property there that you know means that there is something and it's really unlikely if you get the wrong key that you would get those three properties validated at the same time because because math and statistics and a bunch of other stuff I don't entirely understand and so what did he do he just said okay I'm gonna build a mechanical machine six of them actually each one of them would be designed for each potential water orders that they had in the 30s and they're just gonna brute force all combination very quickly with this electrical Pathways and stop when this property is validated and if it does you probably broke the daily key and that was good enough uh basically in the 30s they were able to read most of the German traffic and they showed up in the nick of time in July 39 and July 39 to the allies and say you know those German tanks you had no idea what they were about yeah we cracked the Q is the method they shared everything with this and that's how the British got started with it I don't I don't wanna I don't want to dis on touring or anything but he got a huge Head Start due to polish research basically the British bomb is just it's just uh the Polish bomb but but improved and refined so like some of the other bits were configurable uh one of the main thing that we had to change was that the Germans realized that repeating the key was dangerous at some point like their cryptographic unit warned them that this is a potential weakness in the cipher so please stop which meant they had to find another way to figure out something in the message that would give them a clue that this was probably the right key and they used to think they called Krebs which is like bits of messages that were likely to be at the same position every time and again Germans being German they are really formal about what they say uh for example uh rumble's uh uh personal let's say uh assistant who typed all his message always started every message with the same uh politeness formula every time greetings blah blah blah so they know that when it was coming from him they had to look for uh for for decipher of those exact word in the plain text and it had the key and there was a few other things that you could do a lot of message started with like an uh to someone so you could also know that that was the three characters were always the same a bunch of things like that they were looking for common words that usually appeared at the same place they call them crabs and so what the the bomb made by the British did is that instead of looking for a static uh combination of characters you could program which characters you expected at which place and then you would do the same thing you just brute forceful combination and stop when there was a potential match and then they would manually try out the 10 or 20 that the machine would give out until they found the one that was correct foreign that worked really well they read most of the German ciphers for most of the war like at most days they had at worst like 40 hours delay uh before they could actually get the messages uh yeah and the funny bit is after the war uh the the um but the British and the American uh uh intelligence agencies they integrated some German prisoners of war that worked for the advert the German uh the German um uh spy agency investing like do you know we cracked Enigma and the guy was like no we thought it was theoretically possible but every time we tried to make an assessment and several times we ordered an assessment like can they read our codes yes or no the conclusion was like no way like I think it's like we just guess where convoys were going to be or something like that it's theoretically possible to break but but I don't think they would have the means of it would be willing to put them in to crack this again that you don't know about the Bomba all the bombs so we assume that you had to do it with a way more laborious way and like I mean it's technically possible if you have like a million people just I don't think they're gonna do that and yeah until the end we're convinced that Enigma was safe it wasn't spoiler warning right okay so that's a lot of history that's the bit I love but maybe at some point you want to hear about how do we actually break that on a modern computer it's not that computer by the way because this this CPU is crap but uh I have a nice seven uh 10th Generation at home with uh wishing scene cores let's see how that goes so ah I like there's some more story um so here's the data set so uh these two boats is a u534 uh it was sunk off of the coast of Norway uh just before the end of the war it was fun in uh it was formed by an archaeologist in the in the 80s and it was right in the 90s you could actually visit it I can't remember if it's in Scotland or in Norway but you can visit it today and it's pretty well preserved and interestingly inside they found a bunch of uh of decrypts that had just been received but no keys because again uh the Germans were not completely stupid about how that works they knew that if you capture the sub you would get the key book so the key book actually were written with an ink that is water soluble so if the sub syncs you can't read the keybook you can only see whatever you wrote on pencils with the actual uh ciphers they got uh so someone actually tried before me to crack this in 2012 and my name uh Michael orenberg uh started the project to crack it if you remember the early 2010 was when we dealt with all the city at home and cancer at home and it was kind of like Bitcoin but with an actual point uh uh so yeah you would basically add your computer to a cloud and you would try to just do a bunch of computation and find something so you create enigma at home which was just like hey everyone who joins this uh this botnet uh will try to uh to crack some uh we'll try some keys until we find something he managed to crack most of them in the 2010s but that was the 2010s that was that was there was the Dark Ages can we do it with a single machine today uh we're gonna focus on this one message uh it's been codenamed p1030681 by by its founder it's 370 character long which is I mean it's gonna help us because it's pretty long but it's not oversized I think the German recommendation was keep it under 400 characters it was in Israeli o'clock in October 2012 and it reads like this which I mean it studied by and Cipher obviously like whatever right uh if you translate it uh we were to actual uh decipher it looks like this which also looks like garbage but it's actually German and I know I can't really tell the difference but if you start looking more closely you start looking word like Admiral Reich Borman I'm not a big expert on German but that sounds like a thing the Germans would be saying in 1940. so uh that text was actually sent in May 1944 and it's a message that announced that the great Admiral Donuts is now an overall command in Germany for those who know history that means that most of the big shots are dead missing or have surrendered and a couple days later you would see the Admiral Dunning actually surrendering to the allies and this is the British who arrested them in a in in the west at the time so I think it's an interesting piece of History uh let's see how we can crack it all right let's do some number crunching real quick right so as I said before 62 brute force is the equivalent of cracking an sha-1 Collision if I could crack an sha one for that price I would not be here I would be on some remote island paid but I mean no but maybe we can try to do better so uh what if we remove the plug block we will figure out later let's say we can figure out later how to crack without deploy ball okay so let's let's do without first that's five two little combination and not 100 sure how many gigaflops my computer can do that still sounds like a lot so um actually it's hard to be smart uh you know like uh every water is supposed to turn right but in practice the one on the left is probably never gonna turn because you need 26 rotation for the first ones for the for the for the Third Wheel to turn right then you need 26 and 26 for the for the for the for the second one to turn and for the final one to turn you in 26 by 26. that's bigger than most message keys so in practice the leftmost will will never turn most of the time on most messages or it will turn very early or very late and the rest of the message will still be intelligible we can just bet that it will not turn which is a safe bet assuming the length of the key and with that we reduce it to 208 billions I mean I don't know that's the number but the number is billions sounds like a thing I can like you know like there's like there's like 4 billion in 32 bits that starts looking like numbers I'm used to talk about in computer so maybe it's a good bet that's a good start I'm not talking every day about four billions I'm just reassuring you my games are not that complex but uh you know it's it starts to be like a an order of magnitude we can think about it like maybe I can crack this so uh we'll make an algorithmic it's going to be really dumb we're gonna try every virtual permutation so two times eight I uh times ahead uh we're gonna try every ring setting for the for the third and the fourth rotors we're gonna ignore the the first uh the second one then we're going to try every possible key 26 that we see the 26 and that's a bunch of for loops and if you look at my code it's really really stupid people like that you need a lot of tabs uh and then we see if we match the playing tags no no because that's basically what the Allies did right they had cribs they had bits that they expected to be there which is going to see if it matches We're not gonna try to do anything like a pure ciphertext attack to anything for now we're just gonna say hey we suspect that this is the that we do the message is there is that the right key again the reason why they did that is that once you manage to crack one message with like expected bits and you got it then you get the daily key and then you can read anything else that that has been sent during the day or even worse if they don't change the key every day and that's good enough that's all you need right you need one weak message during the day that you can crack and then you can read all the traffic because from there you get the daily key that's that's the entire point of it so I mean sure maybe for example since it's a big announcement and that that's a thing that we did historically if a big announcement is sent to the whole country like something like the overall commander in chief changing you might assume that the u-bot will probably get the same message but in ciphered so if you get a message that's roughly the same length you're like maybe even just got a copy of it can we just try and see if that works so let's see all right we uh we test that big number of permutation that's uh 200 billion on worst case you know if you're lucky and actually the first setting we try is the right one it terminates immediately it's just unlikely all right so uh I run this and I made some like rough estimate code I base this on Windows copy functions so it's absolutely wrong it's probably like off by I don't know one two three or something like that it's this is it's an estimate right it's it's a yeah it's about that good uh but that gives you that gives you an idea right that's three thousand minutes to uh to try all the permutation roughly speaking I did not let it mine all night I had other things to do but roughly speaking 52 hours so we're talking days basically to crack this message possible but it's gonna take us days to uh to exhaust all the poor people uh combination before I go into more optimization let's see how that works just just to see like if you want to see the main Loop and see maybe if you see some optimization options so it's it's really simple right we every time we have the inputs and by input I mean basically later I started by using offsets but I realized I could just use as key characters and that just didn't change the performance there's way easier to debug to see when you're looking at the state machine like which character is actually in or out because you can compare it to an actual invest simulator you find on the internet so okay we take the plug board we take the input minus n we say okay which letter do we map that's the first step just passing through the plug board okay then we go through the first order and we account for the wiring and which offset is actually at because it's turning uh and then we'll do that for the second router using the input of the previous water blah blah blah we do that for the four brothers that's that's what you do and then we go through the reflector and we get a letter out and then we go the other way around we go through the rotors in Reverse so basically you have to do a reverse lookup on the same table because you're coming left to right instead of right to left uh and and you know like the mapping are not one two one right so for for example like if a router a gets Z out of the other side uh it doesn't matter yeah it's not guaranteed to be an uh a recursive match so you have to have a reverse table to map it uh you do you do that for everything uh and then there's like a World entry wheel thing that's headed later it doesn't really matter just just just a thing uh and then you go through the plug board again and you have your uh you have your output uh this this is one big problem uh your CPU hates it because all this computation depends on the previous result right every time you go through a roller you cannot like you know a modern CPUs they really love to try to do out of auto execution uh and if there's a bunch of like simple math and lookups in tables we could try to execute all that at the same time but they can't because every time they have to do a lookup with one of the square bracket operator the the index we're looking up depends on the previous instructions so they have no choice but to wait on the previous instruction before they can go you can't vectorize this for example which is a shame especially with modern CPUs which are really like being optimized to do every every things like that so a router is just 26 characters ring right so what we do is that we generate the the forward and the reverse wiring array at compile time that's that's what we're starting to have some C plus plus modern stuff in there uh I I base some of this implementation of the Enigma at home which is in C and in C you have like huge tables like uh three times 26 that are static variables and then you have the reverse mapping table which is the same table but reversed three times and you have to squint to make sure that one character isn't off uh my implementation is a bit smarter because again I use a construct spur like 26 Long array and then at compile time I just duplicate it two times and then I I I I I reverse the uh I generate the reverse mapping two three times two why three times I'll explain it in a minute it's because we want to avoid the modulo let me explain so this is running my machine right you have a water simulation you have like you have ABC coming in and you have some random uh uh some random like letters coming out this is one of I think if it's the first the mapping of the first official router so that's what happened and every time I type a character the uh the wheel turns blah blah like this okay you can get you get it so the mapping changes that's the ID so so if you wanna if you want to write it down as a as a code it sounds pretty easy at first right it's just what is the output well you take the wiring table you take the input that is like you know uh from 0 to 26 uh not 0 to 25 sorry counting from zero plus the offset which is like the current position of the rotor because it keeps turning and you get the letter out right that sounds easy enough but there's a problem with that you might go over or under because again you're adding like a number from 0 to 25 to an offset which is from 0 to 25 so you might end up like here or you might end up like here like it's not good you you will you will potentially go out of memory so you can't do that and obviously the naive ways to just add the modulo right you just you modulo your offset because the wheel is supposed to be yes or again the time is the wheel is a circle and with that you know how to go back to your original Fame but that's that's the problem and why because that's the Assembly of that very simple like uh wiring option that I just made right and I'm not a big expert on on everything but that sounds like a lot of instruction like to just do a lookup with a module 26. I don't know there's a multiplication a bunch of like shift another multiplication I don't like this okay so what if we're smart and instead we duplicate the wheel two times then we can take the offset and at 26 and it doesn't matter where we land we will always be in a valid memory that is just a copy and that simulates the fact that the thing is round that's the trick I stole from the actual C implementation but that saves us a lot and by a lot I mean this is the this is the version with the modulo uh this is the version without the module that just does math uh you might didn't know that's a small difference here there's a plus 26. uh it turns out uh this instruction and this instruction of the exact same Coast uh because uh if you do like some register ad register ad or register constant is exactly the same Ops time on a modern CPU they don't care this is one of the reason I dropped the uh my main digital implementation that did not use a ASCII string but use numbers because as it turned out subtracting and adding a constant every time does not matter for CPU it doesn't care it's like it's plus minus like Epsilon I don't give a it's just as many instructions and if you look even closer you realize hey that's the same thing like all of that is Computing the modular and then you just have a lookup of the actual final index so we just skip the whole thing that that changes a lot that's that's still including my first Benchmark that still takes 52 hours but just as an aside uh of a small like optimization that I found that I felt really interesting to look at but of course like that machine is 16 or 32 cores or whatever like we could do better right like we could multi-fread that's the thing my machine has eight physical cause 16 logical cores uh let's use threads let's go like we have 16 cores equivalent so you know 50 hours divided by 16 roughly speaking three and a half hour and we should be done and we have Super 17 so now it's easy right you take one of the outermost Loops so for example the one that uh the one that goes through the for like the 26 possible like uh characters of the key uh and you just you generate an array of 26 possible value you just make instead of having a for loop from 0 to 25 uh you make a you make a for loop with uh for each with a with a study execution bar and secure extra parameter and that's it oh sorry I forgot to put some block here but that's it like that's the only thing I had to change I took my for loop I replaced it from like a four h for like from a 0 to 26 the reason why you need a you need like a container is because like the the the follow-up will try to break down this thing for like every thread so every threat needs to be getting a value uh 26 does not actually entirely scale to 16 threads so you will have some that are done and some that it's not perfect parallelism by any mean but it's okay enough to to to to to reduce a problem and again like it took me five minutes to do that change and on Windows uh it just used exactly as many calls I have as I have available you know spawn more friend or less friend I just looked at it and I could see my machine doing like 100 CPU for the whole time and yeah I don't have another extra here but it was basically like the the estimation where it would take three and a half hours to crack so okay we got that out of the box that's pretty nice and that's really not a lot to to write the news and I I really I really like that bet but maybe we can do better because that's a little bit slow to crack so let's start continuing thinking about those Waters that turn like the second rotor right the the the one the second one it doesn't turn that much either like the third the first one never basically never turns for for the all-purpose and intense but the second one like it will turn between 169 keystrokes and 676 right because it's either 26 by 26 and then later on the the German Navy added some fast turning Wheels which would turn twice uh every 13 and 26 character so you know between 169 13 by 13 or 676 that's how fast it would turn but what does that mean for us that means that even if they use the fast turning Wheels we still get a quarter of the message absolutely verbatim uh verbatim even if we get the the wheel other one because he would turn at the wrong moment so it would be correct correct correct and then garbage all the other way around it would turn very early and then at some point it would just match itself back and then you will still have correct thing until the next 170 characters and you know what a quarter is good enough right if I have a perfect matchup for 160 characters out of like 400 of of German ciphertext I'm good like there's no way statistically speaking I got something that is That Is Random so we can just ignore that and then we can just fine tune afterwards right to just get the rest of the message correct so uh we basically do uh only only the the last uh we only to test summary setting until we find the partial match and once you have a partial match we just fine tune the rest and the search space goes down to like eight billions and eight billions again two times 32 bits but uh 30 but you know what six minutes with my great estimate which is probably more like 10. but again we started with like a time in days uh with multi-funting we got two hours and now we're about minutes maybe tens of minutes if we're like if my estimate is incorrect which it is that's still reasonable right we start getting gas up we can't start getting somewhere but someone will start at some point but what about the plug wall Matthew you basically achieved it and say okay what if we ignore this like 150 trillion uh part of the equation like yeah easy right so uh that's a lot but 150 trillion multiplied with the original search space like we already tried to reduce it as much as we can to get down how are we going to get back up to that number I don't know how we're not going to Brute Force this can we split the problem can we get around that let's see so uh it's not by the basic assumption we have 26 letters and we know that 20 damn 20 of them are plugged are plugged and so basically are gobbled but that means that six of them are correct that means that six characters when inputs would actually give the right sequence because it doesn't matter which character I type it doesn't affect the rest of the thing just the number of characters affect the the the wheel order right because of the turn but not the character itself that I typed so even if I get it wrong about one in six only four character will be correct compared to the original so uh what if we just try ignoring the blood ball entitled you say you know what we don't know what the plug board is just try to crack it anyway and uh count how many matches we got and only keep the top six because we know that the other one was garbage and say hey can we get over a certain threshold of characters that matches uh with only six matches with only six picks and is that good enough which you know that's that's the that's the that's the the one that we're stacked for that message uh A and E B and F blah blah blah blah and that's the table of how many matches we got on the uh with the right key and the right uh the right settings so the red ones are all wrong matches like the newsletters are incorrect uh and the blue one are false positives right it's the one you think there are correct but we're not in the right place like you you and I think the reason why is because a e are very common characters and they're basically stack it together uh but all the other ones like I have a four score here five score here one six and two and as you can see like most characters that are wrong they just have a very low score but all the ones that are correct they roughly they stand out like statistically speaking I'm still getting a four because s is plugged with z uh but you know even with that that is that enough noise to defeat us is the question and as it turns out it is not if you assume that basically if you get about a tenth of the message characters correct roughly speaking uh you know what that's good enough if you have a tenth of the characters at the right place you can probably assume that you got the right block board and then you can just fine tune the the plugs after that to figure out which one leads you to the correct one and again uh a big thing about Enigma is like playing Mastermind or if you're more or if you're younger whatever waddle is or whatever those things right you know like every time you plug a thing and you're not correct it tells you I keep going you're going the right way and that is the main flow of enigma right and that's I think you should have probably figured it out by now the main flow of enigma is contrary to like modern algorithm it's not a pure 62-bit Cipher as as I get closer and closer to the solution the message starts looking more and more like the current one which is great if you make a video game it's terrible if you're trying to make encryption because that you really don't want that property but that's the thing and with that we can absolutely abuse the fact and reduce the complexity like it's kind of a collision attack I think that they call on on Modern cryptography yeah but can we do better all right so uh what if we got all the ranks like you know what screw it like it's gonna turn it's gonna turn at the wrong time and then like some of the message will be gobbled and then we'll we'll actually turn again like the the the like the second wheel will stop wrong probably speaking but after after about up to 25 characters you will be right again and I will have like we'll have sequence that are correct until the turnover happens and then they will be wrong and then after 10 20 characters they'll be correct again uh it will be wrong but can we get enough fragments that are correct to this thing Dash from noise uh uh and then after that we can just do like a 26 time or a free uh pass to just fine tune the actual uh ring settings but that's nothing um so let's see oh oh it's pretty fast oh yeah I guess it's done it actually worked uh yeah it take I mean the at zero we noticeable as correct as my rest of my estimates actually took like one but yeah uh without the actual keyboard and without knowing uh even trying we just we find the right routers we find the message key and then we just tweak the ring settings to get to to to ungobble the rest of the message and we're good uh uh I didn't do the math and I'm not a good mathematician as explained for the rest of this talk so there is a distinct possibility that I got lucky uh because that's a long message and maybe the the star were lining correctly with my uh with my with the with the with the stackers we used that day might not work with all messages especially like I think if they have 50 characters long it's going to be a problem but something like 300 and something it seems to be working pretty good uh I will potentially when if I redo this talk in the future uh and have more time think about some other stuff like there's a thing called index of coincidence which is a mathematical formula to set character frequency and says what are the odds that this text is garbage compared to like German or French or whatever because there is there's actually a table like it's a it's a number between zero and one and if I recall correctly like Auto garbage as basically one in 26 because like every letter is random while an actual language will be more like one in one in 15 or one in ten and that's good enough to say to distinguish garbage from actual like something that looks like real speech uh some Furious will argue that this is this isn't Cipher text only cracking which is truth I don't I think this is this is how they actually did the Enigma at home at the time but again I was trying more to look at how the DIYs do it and they kind of did the same thing right they they had a plain text and they just try to say can I get a match this is what trying to to emulate like an actual bomb than trying to do an entire uh like full spectrum analysis because then you'd probably have to go back to Brute Force there are some solutions to avoid going all the way to Brute Force like for example I think a mix of index of coincidence and having like some uh some predefined like small sets of letters like two free uh diagram and three Ram that you're trying to look for can also work like you know Common it's it's it's basically having a big dictionary of quips you don't know where they are you just assume that if you see enough of them in the message you're probably on the right track all right so C plus brush right we use some C plus plus in the code what did we use I uh I never I know whereas fancy is what Daniela had this morning uh I stuck to C plus plus 20. I didn't want to use like 23 which technically not even finished yet and not in most compilers uh uh so I used a bunch of constants per actually in constructs per algorithm that helped me like create the especially compared to the C program that I that I that I looked upon as a as an inspiration uh that allowed me to remove all the statically generated stuff and instead you say hey just describe me in pure like just copy paste the letters of the uh of the of the rollers as you can find them on uh on Wikipedia and I will construct for you the right like uh wiring in both ways to to allow you to decrypt uh there's a lot of string views in Span in the code because again we have a bunch of text everywhere we don't need to do copies use strings are anywhere so that helped me a bunch to every time I had to manipulate some some buffers like messages Keys things like that we can just be spans and string views and of course C plus plus uh parallel algorithm just gave me like a 16 time speed up by just like refactoring one for Loop that was that was really good the thing I considered but did not use uh I tried thought about using ranges to make the router combination but I'm not super well versed in ranges I think there is a way to generate a sequence and then feed that to the parallel four but I can't find a lot of time to explore it I thought about like maybe it's a generator so maybe I could use a core routine but then I remember that there is no like a standard support for routines without writing your own library and this was more like a pet project so I just maybe in 23 when we have generators in the standard that would probably refactor it uh C plus 20 format this is on me I quickly forgot that it was a thing I was so pressured it was not in 20 that I just use a c out and if Victor ever watched this I'm really sorry I I meant to use format I just didn't know it was available that's on me cool so let's wrap it up uh so in conclusion uh Enigma is not the recommended Cipher in 2022 that's the main takeaway uh a 260-bit cipher will resist the Dom Brute Force even on Modern Hardware uh at least on the CPU side I haven't done experiences on the GPU that could be my next step if I want to explore more options again this is about the same as someone will pay to break a shy one right now on the market and apparently the buyout price is about 50k nowadays maybe 100K between 50k and 100K like that's possible that's absolutely the domain of what's like if you were at War and you were trying to break the other side 50k is a small price to pay to be able to read that comes but as far as one guy with a with a personal computer hey we're not there yet uh and again like it was just a stupid pet project uh with like very basic math and very basic uh code in general and I still managed to use a bunch of C plus plus 17 and 20. so I guess like you know that means that there's there is something there you don't have to go super fancy uh even some very simple Pet Project can benefit from this and I thought it was like a good a good opportunity for me to try uh do you have any questions actually this is a trap uh if you know my talk you know it's not a verb because I haven't said the magic words yet but there's one specific question you expect uh you have one chance to ask it and then you get bonus points if not I will just answer it anyway so does anyone know the secret question you should be asking I haven't yes nice try I answered that but yeah the message is about the the German leadership changing because we're about to die and lose yes of the oh uh it's announcing that we're gonna make a new expansion that's a boring have you read kryptonomicon what have you read kryptonomicon no I don't think I did but that's not a good question I wanted God damn it this is the right question one very important question what the heck happened to rajevski in the polycipher bureau wait you don't understand let me go back okay so remember right it's 1949 and they share all their uh their findings with France and England in 39 right and you know the life has spent a lot of effort and money breaking in England in World War II why have except the Polish guy why has nobody ever heard of your jevsky why do we all learn about Turing we know that the Polish government was in exactly London where did he go what happened to him if you looked at the original slide he died in the 1980s so what happened let's find out so it's 1939 September 1st Germany is about to invade Poland and the Polish know that this is not going to go well for them they are already prepared they've already shared everything we have with the Allies because we're desperate uh Registries in Warsaw with the Polish Cipher Bureau as soon as the Germans attack uh they realize that they're not going to be able to make it so they evacuate uh everything they can put on the truck and they burn everything else so that the Germans don't learn about their attempt at quacking Enigma uh they take a train and arrive at the Romanian border Romania is supposed to be neutral in 1939 all over slowly leaning toward uh toward the Germans they managed to cross the border sadly they are intercepted really after by the Romanian police and they know that the Romanian police has a lot of informants to the for the German again if they're trying to lean toward uh toward the Germans so they know that if they get captured there's a high chance they'll be identified and sent back to Germany to be interrogated and they will want to avoid that if you managed to use some to take to take advantage of some confusion because there's a lot of Polish Refugee at the border that day and they sleep into the night they change uh they change their passports they they take over clothes they exchange some money if they take a train to Bucharest and they run to the British Embassy and say please I broke Enigma can you get me in and the rates are like what Enigma never heard of it sorry come back tomorrow they're like night is falling on Budapest the Germans are looking for them what are we gonna do they run to the French Embassy and say hey we book Enigma can we get in and the French is like let me phone Paris that sounds important they do that and an hour later the French like yes let them in they get into the embassy and using some diplomatic uh arrangement with Romania they managed to refer them to Paris and in there the French said okay they can have more meanings uh they actually meet with uh they actually meets with uh with Turing several times between 1939 and 1940 in Paris because they joined the French Cipher Bureau and they start cracking again uh they crack a bunch of things for example they crack the telegram that says that Denmark's about to be invaded the Allies do not act on it they crack the telegram that says that Norway is about to be invaded they like do nothing about it they crack the Belgian the French and the uh and uh and the Netherlands being about to be invaded and they again do nothing about it I mean it was 1940 and France was really bad at what they were doing but anyway is not all of his problems right because if we all know something about history is that that the attack on the on the lowlands and France in the in May 1940 doesn't go well for friends at all so rajeski has to run again and again the French Cipher Bureau Burns everything down and runs away a bunch of them gets captured they get tortured by the uh by the German secret service none of them will ever give up the secret that they had a bunch of polls in the station that were able to read their codes the managed to get away uh uh to uh North Africa which uh it's at the time uh technically managed to get away from The Invasion and uh basically joined Vichy France and from there they referred back to Southern Vichy France on which we start working with the resistance because the resistance of the small crypto cryptography units it lasts until 1943 uh when the Germans are in the when the Allies invade North Africa and Germany basically decides to occupy Vichy France and rajesky has to flow against to flow again he runs to the Spanish border uh the the resistance helped him they give him a guide to cross the the mountains into neutral Spain uh the guy betrays them he takes all their money and their winter clothes and he lets them uh he lets them to to just like die in the nights they still managed to cross the uh the Pyrenees only to get arrested the next day by the Spanish police who don't know who they are and puts them in prison in Madrid if I spend a couple of months in prison in Madrid until the Polish Red Cross managed to intercede to Franco and say please let those guys out they're just mathematicians why are we keeping them and from them they managed to get to Portugal and finally from neutral Portugal they make their way to England and you would think finally if they can run to Bletchley it's late 1943 but they can still help right this man is brilliant but the Brits in 1943 considered that it's too late cracking Enigma is a national secret we can't have foreign Nationals working on it it's too risky so they put rajeski behind the desk and say sorry you're gonna do Sudoku or whatever we can't tell you about we can't tell you about Bletchley but what if what if what if you had been this stupid what if those two has been able to collaborate together when they made the the machine and then the first computer in a couple years later what if what if instead of going back to Poland and having to basically say nothing about his involvement in World War II uh rajesky had to do because he was afraid that the Polish Communists would basically arrest him and send him to Moscow to do more cryptography but this time for the Soviets what if he had stayed and they had made together a computer imagine what we would have today if the first machine was not invented by just touring but those two guys what if what if we would have cons by default what if people had no such thing as like ill form no diagnostic required whatever the heck that means maybe we would have proteins in the 90s and even have libraries people from the get-go you know like some people like oh I'll teach story something something doesn't happen but just he goes to Tori we're throwing a bridge about that's my jam uh if I manage to interest you in that small piece of history and you like Tech uh you're more than welcome to apply we're looking for nurse like you uh and with that furthermore if you build should be destroyed thank you [Applause] and I can actually take your questions now have you thought about using Amazon or Google renting servers instead of using your own laptop no I'm assuming that I could throw I mean I could try to throw more Cloud at the problem but the goal was to see can I crack it with a local machine right because my idea was like this weird German box from the 1920s like sure it took like an entire room of computers to crack it in the 30s but know what I surely my lap my my desktop can do it and that's what that's the answer I was looking for the next step would be to try with a GPU because it's technically not breaking the rules and still using my local gaming rig and you have a question well team majeski I mean thank you [Applause]