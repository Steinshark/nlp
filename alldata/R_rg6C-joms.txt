typescript is surprisingly okay for compilers my general thought is that they're going to be talking about the type system and it's the fact that you could just do these basic like Union types type discrimination right you kind of have tagged unions in in typescript you know what I mean you kind of have it you just have like a type that's a string I use it all the time it's also kind of a pain in the ass uh there are two main historical trends when choosing an implementation language for something compiler shaped for the for more language sector tasks like a formal specification or a toy hobby language oh camel makes most sense let's go oh camel we got an old camel shield in the house uh for example see plazoo uh webassembly reference interpreter for something uh implementation Centric and production ready C plus is often chosen llvm clang V8 hotspot are all C plus plus these days rust is a great new addition to the landscape it is influenced most directly by ML and C plus combines their strengths and even brings something new of its own to the table like seamless safe Fearless concurrency uh still Russ leans heavily towards production Readiness side of the spectrum classic I believe what I just heard here is that production Readiness spectrum is how far away you are from Haskell so what I'm what I'm truly hearing from this is that that there's this thing called Haskell it is in the center this means you are not ready for production then there's like you know then you got like I don't know you got like some lisp in here maybe some o camel and now you're really not ready for production then you have like rust right and now you're pretty close to production okay and then on the outside you have like C plus plus uh you have typescript you have go you got like and you got python you got like all the languages out here these are production ready systems okay it's kind of like Idaho or not Idaho Ohio you're either in Ohio you're threatened near Ohio or you're just in disillusionment that you're not threatened by Ohio this is pretty much the same thing except with functional programming at the heart of it so Haskell being the least production ready go C plus plus typescript and python being the most production ready you get the idea I think you guys get the idea while some aspects of it just like or like uh just works build system help with prototyping as well there's still extra complexity due to uh attacks due to the necessity to model physical uh layout of data the usual advice when you start building a compiler in Rust is to avoid pointers and use indexes oh yeah I've really always hated that I'm not going to lie to you the whole like use indexes for everything in Rust to be able to do anything with like tree shaped or graph shaped data it's just such a pain in the ass because now you have to like you just it's just extra data you have to keep around that has to be updated and any mutations can cause Oddities and all that kind of stuff indexes are great no they're not in large code bases they allow greater decoupling side tables can stay local to relevant modules improving performance and index is a u32 and nudge you towards a struct of a raise layout okay I agree with this The Entity component system style great we're on team I'm on that team sort of uh a more flexible computational strategies indexes are easier easier to serialize or plug into incremental compilation Frameworks but they do make programming in the small significantly more annoying which is a deal breaker for hobbyist tinkering uh well I mean the problem is if they're programming in the small the problem is that your program is one large programming in the small like at the end of the day it's just one big ass programming in the small and so you just deal with indices like until you can do the wrapping interface around it to where you don't know about the indices like that entire thing is just one ass pain but o camel is crusty is it uh is there something better is it is really okayable crusty my brief exploration into ocamel says that I could be very excited about oh camel sure I may not be using stuff in production right we're pretty close to Haskell at this point probably not production right probably not going to be using it for production but my small little LSP file parser I really enjoyed it like I genuinely enjoyed building that a no camel uh today I realized that typescript might actually be okay question several question marks it is not let's see it it is okay sorry I'm sorry it said typescript being okay I'm having a hard time you know processing that so my reading skills just went down the window because just a little bit earlier talked about like just works build systems up here okay you know it's emotional right I'm just emotional for a second okay it is not really surprising given how the language works but it never occurred to me to think about typescript as an ml equivalent before so let's just write a tiny tiny typescript type Checker in TS uh of course so we start with Dino everybody loves Dino am I wearing my Dino hoodie is this the dino hoodie no that's not a dino hoodie um uh see a love letter to dito oh wow Dino I love you oh Dino I would just like to let you know that I think you are very very very very very very beautiful I'm not sure what just happened there honestly I don't I don't I don't know what just happened there I think I made a mistake [Music] I agree with you I do I genuinely agree with you Karen I will not do that again okay can you get up can you write a letter for me and just say sorry to all the five dollar a monthers for what I just did thank you Karen [Music] but the tldr is that Dino provides out of the box experience for typescript uh this is a pain point for o camel and something that Russ does better uh than either ocamel or C plus plus I'm pretty sure oh camel at this point is pretty much Straight Out of the Box isn't it different my wife does not know about my Dino face okay she doesn't um real talk I think because Dune and opam just like you know you just install what you need and you get running you know what I mean but Dino does this better than rust it's just a single banary that comes with linting and formatting there's no compilation step and there are built-in task runners in watch mode a dream setup for quick PLT hacks okay okay fair I I see what he's trying to say is that it's just so simple there's no anything to it and then there's typescript itself which uh which it's sufficiently flexible yet lightweight ceremony type system okay that's a fun way to kind of describe uh typescript so that's a fun way I like that uh let's start with defining an AST we're hacking we won't uh be bothered to make it an ID friendly concrete syntax tree or incrementally friendly Only Store relative offset Street uh and we'll just tag AST nodes with the location okay so there you go locations of file line column even here we already see high level nature of typescript string is just a string there's no thinking about the U size versus u32 okay can we all agree that this is just the world's worst thing in the universe technically correct the best kind of correct can we all agree that whenever like like the LSP I'm dealing with right now when you get an LSP message the line and character offset is u32 so when you're actually using it you have to convert it to a u size use it and then you have to go back the other way it's just so annoying you're not even on this train okay I can buy that usually an expression is defined uh as a subtype as we want to tag each expression with a location that represents that would be slightly inconvenient for us so we split up things a bit location expression kind perfect it's an interface uh always very careful about interfaces because you can actually do uh collisions export expression kind as it's bull expression int all this kind of stuff this can be super annoying because that means your expression has to be a tagged uh kind like an expression Bool has to have an expression I'm very doubtful of these little T's in here these T's feeling very worried about these T's you the thing is is you feel like you're doing the right thing with generics and typescript and often they get so unwielding you made such a mistake one thing more as we're going for something quick we'll be storing inferred types directly in the AST nodes uh still we want to keep raw raw dog and type checked AST separate so what let's see so what we are going uh to do here is to parameterize the expression over Associated data it stores a fresh parsed expression would use void as data and the type Checker will set it to type here's what we get all right we get the T expression type we got that uh there we go a definition of Express expression binary could look something like this uh let's say we got a binary operation left hand side right hand side okay export binary op all right so there you go here's the type discriminator that I was talking about by having the type discriminator you have to have this and then you're going to really fall into this problem with like T has to be a pretty danger generic here export binary off which is going to be added blah blah blah blah blah oh wait a second this isn't type hold on this isn't typed oh this makes it really interesting because this is not type discriminated this is a non-type discriminated uh piece of data which means that when you're checking you can't directly check is bull expression right there's no operation here or there's no type that says is Bool is Boo is booling is [Music] Boolean uh note that I don't introduce separate types for each uh add expression sub-expression all binary Expressions have the same shape so one type is enough sorry I just got stuck on Bully and uh but we need a tiny adjustment here our expression kind is a diff is defined as a union type to match our value of a union type a bit of runtime type information is needed got him got em I'd like I could see it to the Future this is where you say uh pre-read you you say you say pre-rent this is come on please your supposed you're supposed to not believe anything I say that's like your job chat that's not my job okay thank you it's kind of ridiculous that you guys are just assuming I know everything um however it's one of the core uh properties of typescript that it doesn't add any runtime behaviors so if we want to match one expression kinds uh and we sure want uh and and for sure we want uh we want to give a helping hand to the compiler uh include a bit of run time titty information manually um runtime type information that's what it stands for it definitely stands for runtime type information definitely that rehearsed on uh tag binary let's go tag binary means that it's only possible runtime value for uh tag is a string binary yep uh similar to various binary Expressions Boolean illiteral and literal Expressions have almost identical shape almost because the payload Boolean and the number is different typescript allows us to neatly abstract over bend the bam oh this is where it's starting to get this is where things are starting to get a little bit goofy you're going to start making you're gonna start making some you're gonna start hating your life where's T used where the hell's t why is there no t wait what is t 's not even used here uh finally the flow of the control flow Expressions we uh only add if uh for now is T Phantom type what's T Phantom type you're a phantom type I mean it's it's a literal type it's definitely being used it's not Phantom data there's no I don't think there's a phantom data in typescript uh maybe I'm wrong here uh I okay hey to be completely real though just to be completely real the Tia silent classic Tia silent I don't really understand what Phantom data is I know it's used on one cell or not one cell uh but it it it's it's used in a ref cell and and maybe one cell and all these other ones I don't really know what it means okay I know that there's Phantom data I don't know what it does though okay real talk I don't know what it does TJ I hope you're ready for this um finally uh flow control Expressions uh all right looks good flow control Expressions if expert is if here's the expression then Branch else Branch oh what about if then Branch um shouldn't this be like an array of those I don't know how this works uh this concludes the definition of the AST let's move on to type inference uh starts with types all right type equals type Boolean or type int okay Bool type Boolean um cons tag Bool type interface and take int tag equals this type let's go okay by the way I hate this I want you to know right now I hate this what you're doing right here makes it such a pain in the ass sometimes there's all sorts of problems with typescript when you name them the same thing our types really are really simple uh we could have gone with this but let's do a bit more uh more enterprising then we start by defining different uh types for integers and Boolean types as these types are Singleton so we also provide canonical definitions and here are another typescript ISM because typescript fully erases types everything related to types lives in a separate namespace so you can have a type and value sharing the same name which is exactly what we want to do we're used for defined single tense I know you can but it can be such a pain sometimes especially if they're not it could just be a pain finally we take advantage because like there's this one problem where people sometimes will not export the type but export the constant and then you can't have the type but from your functions you export the type sometimes typescript gets goofed up on which one is it trying to export from a function the interface or the concrete type I've had just all sorts of problems with it finally we can take advantage of our Associated data parameterized expression and write the signature of infer types all right as it says uh on the tin enter types fill let's see fills in a type information into the void let's define the details okay uh let's see infer types we got this one it comes in with this thing uh expression contact case Cass cast me Daddy all right there we go we have all these nice little these right here there's one problem though what we really want is something like uh inferred type equal switch yes you'll want something like that but in typescript switch statement uh switch is a statement not an expression so let's define the generic visitor isn't this great isn't typescript just fantastic uh need a primagen bingo card for streams TJ what are you saying about me Prime complaining about names of types and values called it okay don't do that to me I don't know what you call this but I hate all of this in TS trying to figure out what uh something is and I find unions of unions of nested types of unions of maybe it's a skill issue but I can never follow it's not just that it's also that all of these things that you're building requires pre-watched damn it Ryan Winchester they're on to us but not only that but it also requires a bunch of runtime programming to get over this right you don't have syntax to like to support what you're trying to do I find that to be the most difficult part all right visitor here we go uh bull there we go uh into binary if okay good I like visitors you know you gotta have that uh uh visit TFR expression t visitor T of R all right uh let's see return a v Bool expression kind kind kind kind kind okay nice so this must be the value visitor okay armed with the visit we can ergonomically match over the expression infer types uh types const visit expression Bull type bull that did this this there's those little ones that they're doing earlier result type binary there you go the if type fantastic result types result type let's say okay here we go AST binary add oh hey don't Don't Stop the Music uh let's see result type okay so we're looking at this stuff we're returning out types I feel like we're we're still missing the type on the way out right it's not inferring the type well enough I don't think before we go further let's generalize this visit uh visiting pattern a bit recall that our expressions are parameterized by the type Associated data type Checker yep all right where's this I want to see the thing where it actually makes it into something worthwhile because the thing that you're missing here is that you have a type you do this visit you do the operations on the visit and then ultimately what ends up happening is that uh ultimately what ends up happening is that you have this problem where you still have to do the same check everywhere right like you don't actually get any syntax or pulling out right it doesn't actually auto complete to something specific it doesn't actually type narrow you just have this generalized type that you constantly have to untype into the the specific thing constantly and not only that but hey small critique creating an object and a bunch of functions every time inferred types are called you're going to have a really slow compiler okay your compiler is going to be really really slow you realize how many times you're going to create this object it's crazy time okay it's crazy town all right all right transform Maps uh an expression carrying T into the expression carrying V by applying uh an f a visitor classic T into the V with a visitor okay we all know about this all right what is our what does it look like transform in a base we take the this one this one okay yeah wait what's this one oh that's just like a one that's not actually a thing okay confused me there I was like wait what is this syntax I don't I don't get that I don't get that at all we got int binary okay or recalling transform doing all this so we're building up the tree build up the entire tree now that we have the expression kind in both the expression U and expression V literals uh don't depend on this type parameter and typescript is smart enough to figure out uh this without us manually reassembling the same value with different types this is where the magic of a visitor VV happens uh the code is pretty regular uh here though so at this point we might actually recall that typescript is dynamically typed language and we write a generic traversal using object.keys while keeping the static function signature in place I don't want to uh I don't think we need to do it here but that's some comfort knowing it's possible object.keys is a bane of my life object.keys is one of the Banes of my life in any library ever created and is emotional I don't know why you even have to say that it should be out now implementing type inference should be a breeze we need some way to admit to type errors though typescript would be trivial to accumulate errors into an array as a side effect but let's actually represent type errors as instances of a specific type type error pun intended uh Bane's of Life called it oh gosh come on we're not calling anything this is my life it's now or never and I'm not gonna live forever okay you think darkness is your uh Ally Bane called it you guys are calling the strangest things okay and you happen to be right you happen to be right type of key of object that just feels so stupid to do okay the fact that you have to do this all the time makes me wanna like just makes me want to cry a little bit okay it's not a love this is not a love sign okay this isn't love okay this should be a sad face that you have to do that hey what's your object it's this defined type what's its keys I don't know I don't know what they mean right like why do you gotta be that way um all right and for types uh all right there's a lot of inferring going on here hey totally cool but I'm tired of reading code very awesome uh astute readers will notice that our visitor function actually takes a extra ASD location argument typescript allows this argument uh only in cases where it's needed cutting down verbosity okay okay and that's all for today the end result is pretty neat and concise it took some typing to get there but typescript uh Auto completion really helps with that so I'm gonna okay I'm gonna give I'm gonna give a little something here here's my big problem with typescript here did you see all the work that was required to create these types there was a lot of work to create these types remember this whole production ready thing this is my problem with TS TS actually looks more like this okay okay TS right here the T and the S like this here's the problem with it is that when you're working with typescript you find yourself programming a completely separate flow of logic right just like a completely separate line of programming and that one single set of programming you have to do with all types and then once you're done you then go and you then program your actual program and when your program needs to change you need to go over to your type system and figure out why your types aren't doing what they're supposed to be doing right you know what I mean like it's just this super annoying kind of like you know like it's I'm not sure it's like it's bimodal programming I'm not sure how else to describe it other than that and that's really frustrating uh whereas it does seem like in in the O camel world oh camel doesn't seem to have that problem because if you effectively can uh infer everything about the type system through and through so when you make a change it makes the change to the types through and thus leads you to just knowing where you've goofed up the type as opposed to having this completely separate vertical of just type programming you know what I mean uh I wouldn't call it bipole I'd call it bimodal bimodal right because it's like you have to have a type track and you have to have a programming track and the type track is purely so you don't screw up the programming track but the type track can be very unwieldy and sometimes super annoying so there's like this level of knowledge you require the thing about typescript that makes it so interesting is that it is super powerful types it's like like you saw that's a super powerful language to program in you can do quite a bit with it but there's like you're good at typescript and you pretty much Plateau at your goodness and then there's just like it's it's a non-differentiable function and then for you to get any better you pretty much need to go here because this little spot in between these two means you Pro program pure pure shitty types okay this this is a portal all right this is a portal uh we'll go here and we'll go here and just go right here all right this is a portal right here and this portal happens to go to this other portal that I was just drawing right over here which looks like uh this right here and we're gonna jump in here and we're gonna go back to that nice blue I had and then we're gonna go back down here and then go back over here and let's make it a little bit more orange there we go and we're going to take it and see and you're gonna come right out of here and guess what's down here guess what goes down here hell actual hell exists down here okay you go in here you go through here this you're probably pretty still fine at this you're pretty still fine at but there's only one person that can work on this thing and so your life is just absolutely scumbag or you have everyone that can work on this part but then your type system kind of sucks and you just have Annie's everywhere okay you just have Annie's that's your life a bunch of enemies that's just what happens you have any as user you know why because you can't be bothered to program for three days such that this just works automatically instead you know what it is you know you you know it is so you do that okay this is why typescript can be very very difficult I smile like the Terminator don't I I think I smile like the Terminator the name is I mean it wasn't that bad I mean typescript it was a pretty cool little type system that was made for the compiler I totally agree that you can do it but I want to ask you a question a quote by old Jeff Goldblum just because you can doesn't mean you should I know I screwed up the quotas like they're too busy to see if they could to ask if they should I get it okay I get it but I'm just saying again