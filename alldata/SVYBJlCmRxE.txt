last time we were here last release i did i think was uh all about algol 60 and its 60th birthday we left it in a situation i think where algol 60 it was agreed by everybody had been enormously influential it was a rallying point for discussions and so on there were aspects of it that some people didn't like but it did set down a kind of benchmark of sorts but you could legitimately then ask and say well all right so where did high level languages go after algol 60 was there on the algol 60 committee uh oh heck where do we go from here moment oh yes there was some of you i think will know there's an influential member on the alcohol system committee i mean we've talked about bacchus and now john becker's peter now bacchus now a notation they weren't the only people who managed to win the turing acm award just for what they did on the algol 60 committee another person who benefited hughes and rightly was niklaus viet a lot of you will know all about him already he was on the alcohol 60 committee very respected computer scientist he's from eth electro technician is that in zurich and uh he and his big friend tony hall famous british computer scientist were bedded into the alcohol 60 committee but niklaus took the view and it helped enormously that although algol 60 was what was democratically decided that they could do for alcohol 60. he nicklaus would run as a sort of parallel project almost his version of what he thought was a bit more sensible so for example last time i just mentioned the horror of what can go wrong with call by name so nicholas was having none of that and he came up with his own as it were sensible version of uh alcohol called algol w w for vieth and of course i must now tell the obligatory nicholas veerth joke i don't know if this is true but if it isn't true it should be true and it's a very gentle and well meant joke because he he deserves a lot he's been a very influential figure so there we are in the late 60s anybody on the alcohol 60 committee is getting endless invitations to talk about progress in programme language design and what really goes on behind the scenes at the ifip algol 60 committee and niklaus was not beyond accepting some of these and so the story goes that he gets invited to america introduced you know her professor dr nicholas vietnam from eth in zurich and he stands up and says i want to thank you all very much for inviting me here it is a great honor i should say that it puzzles me here i am in the united states of america when i'm back in europe even the clothier brits try very hard with my name they really try hard to say nicklaus viet and they get it pretty well right but over here unfortunately and forever being called nicholsworth hand goes out from the audience and said that's because europeans call you by name but americans call you by value and of course i hope there's just collapses you know he's absolutely in joke of all in jokes but the algol 60 committee did a grand job but in the introspection of having released it and it's been pretty successful so where do we go from here and i think the next stage was code named algol x a little subcommittee gets appointed with unf perhaps led i think by nicholasville i'm not sure and of course the subcommittee came back and said the obvious route for alcohol x it's just to do alcohol w which is what it should have been all along but there was a minority view which oh i don't know felt very strongly about it led i think by the free university of amsterdam they had an again a very venerable and respected computer scientist called adrian van vinegarden and he and his followers strongly believed that our goal x should take a giant leap forward and not just be concerned with tidying up the loose ends on what went wrong with our goal 60. and such was the level of full and frank exchange of opinions i think tony hall and levitt and one or two others resigned in protest from working group 2.1 which was the committee that defined alcohol 60. so that left behind a sort of rump of equal fanatics but in a different direction very interesting direction and they eventually progressed to what became known as algol 68. the algol w types sort of went off and did their own thing and the the the the result was a big success it's called pascal we all know about pascal you can it it had a heavy take-up i think because compilers were available good computer scientists could take a look and say yeah i think i could implement that it was a distillation if you like of all the bits you could safely include and one of pascal's strengths but according to some also its weaknesses was that it deliberately restricted you and kept things simple so that it was suitable as a teaching language and it was very successful in that regard no end of people in computing companies and universities thought oh i could write a pascal compiler it's not too bad and it did make some important steps forwards for example that you can do records in pascal you can do pointers but here's the start of trouble ahead basically believed and he's right and it was echoed years later by james gosling pointers are dangerous pointers are some of the most dangerous things you can have in the program well how do you cope with that danger and the answer from nicholas fear in pascal is you may have a pointer to something but only at that one level you can't you can have a pointer to an integer but you cannot have a pointer to a pointer to an integer that fans immediately prevents it from doing the triple ref trick because we talked about this a while ago you can do very clever things in list processing if only you can handle pointers to pointers to pointers even you just can't do that in pascal and in the correspondence that came along in that episode i don't know oh but my library can fill in for you and if only you use extended pascal which wasn't agreed until about 10 years later it works absolutely yes but at the time there were limits what it could do with pointers the idea was this is a language for beginners and if you run out of steam um it's not too bad because they'll go on to use more powerful languages later on which in a way was fair enough and there were dozens of compilers created between i think it was announced in 1969 pascal and over the next decade lots and lots and lots of compilers some of you will know that it even got on to microsoft things like ucsd pascal yeah university of california at san diego so at the end of the 70s a certain brian kernighan who was well known to us of course and is well known to us had been working long and hard in the uh units committee at bell labs to convert what is called of course in unix parlance software tools it's the bits and bobs that come with unix which are so valuable you know the sort functions the grep the the bits and pieces is not literally in the kernel of the operating system but it wouldn't be unix if you didn't have all of these things going and of course a lot of people said well it's all right for you you do it in this c and all that we haven't got a c compiler we like these tools can you do them in other languages i think it went like that and brian's uh colleague bill plogger originally i think maybe both of them did a thing called software tools in fortran because that was still a big big deal in those early days and then once that had been established they actually got down and said right pascal very popular let's do software tools in pascal when that task was complete at the end of the 70s early 80s brian wrote a memo which i'm glad to see is much less contentious than the infamous vacation memo about jailbreaking typesetters but it caused a lot of discussion and at the end of that paper he comes up with nine things that pascal got wrong or ignored it reminds those of us who remember hitchhiker's guide to the galaxy there is a philosopher in that series who allegedly wrote this tone called where god went wrong well all computer science can offer is brian's list of nine places where pascal went wrong and although the pascal fans got very huffy about it they had to admit he'd got a point he knew what he was talking about he wasn't just talking about teaching this language to a few kids where you could leave out the bits you didn't like and didn't understand he'd actually done a considerable volume of work one or two of the things we could just pick out here that he pointed out was there is no way to declare a byte in a in your pascal computer you can't declare it as being a mode bits at all you can't get down to the bit level manipulation he said all i wanted to do was to exclusive or one bit pattern with another which you do all the time in cryptography but i couldn't get down to the bit level just couldn't and then somebody says oh but there's a library that will do it for you and it's an assembler but that's not the point the language itself won't let you do that and so people fond of the language first of all when huffy about it but then i have to say well you've got a ghost of a point there i must admit and from then on it always amused me that it became almost like a thing you know my argument here does this this and this and it disposes of kernighan's cases two seven and nine you see so it became very famous in that regard he basically was pointing out there are the pointers are brain dead will only do level one it's not a real system implementation language because it can't do bits it has no facilities for separate compilation you can't do bits and pieces of the program separately and link them together afterwards he said essentially this is fine it is a teaching language it does what it does well and it gives you a protected environment which you cannot break out of once you run out of steam with it there are no workarounds none okay so you have to move on to something else 60 did do was give at the syntactic level and also at the implementation facilities level enough ken thompson faced with the problems of fonts on the 202 where individual characters shouldn't get too complex you'll never guess how he did something like