so welcome to this week's Block Run highlights from mini C plus plus um shows but guess which blog post I chose but there's a bunch of interesting posts this week actually there is from from Universe stories and modern Super Sports they use a weekly post uh there is a limped post from Lee Myers um sea lion and cute have like a critical bug fix or like you know the security advisory and in the case of cute uh cute block has been active again with a new release and also they started a series on webassembly and cute that's all very nice things and then there's a couple of posts from the old new thing about doing things with core routines and simple person doing RT um there's even a post about interviews and if you interface them don't feel bad about that that's normal process of us on our careers and then there's four posts from the virtual team address team block uh the last one is about cppcon also the CPP compost will be honest keynote is in there but um you probably already guessed that I want to talk about the Post in integrating supervised header units into office using msvc um and this is also the beginning of a series so we basically have now some series um ongoing um you see the new thing as a series first part one and part two uh cute product has started one and here we see that the integration header units thingy from Microsoft this has spawned a bit of you know questions about this like what what office do they mean do they bring that to their office or do they mean the Microsoft Office or which Microsoft Office do they mean Etc but that's all okay um the other thing is that I guess not everyone knows the term C plus plus header units right the C plus 20 feature and if you not have logged deep into modules so you know featured around that you might have heard it but it's not like something everyone like in simpleplus goes oh yeah that's that's told you I'm so this post talks about integrating this feature which is kind of you know in in the module world living into their code base for office and uh compiling three of their dlls that has a first pilot uh it's a really interesting post and um so let's first take a bit into header units header units and the link to the Microsoft documentation here of course um they are kind of a bit an improved pre-compiled header file okay they're not a pre-compiled header file um but they are similar um so it's it's not like the same thing it's a binary representation of a header um but it's more like meant to be used either as as that was you know you don't need to like go the next step to modules um so that's what I'll take from this from this blog post is that header units at least in Visual Studio are usable on their own and can bring you compilation advantages and also are a stepstone two modules okay so you would have to probably deal with us when you go to modules um and you are available you're able to basically have this rollout on its own you don't have to like fully Implement modules this is like a first step to have an improvement that comes from modules into your code base without using modules directly um I also included Rhino Grim's post on this here is posted in last year like almost exactly a year ago about this in the beginning of September where he covers a bit of other things this is just a hard way he talks about header units and um again you see he's clearly stating it's not pre-compiled headers but um it's something different from the module world but kind of you know if you currently use pre-compiled headers it could uh partially or completely maybe replace those like if you use it heavily that feature uh that's probably something worth looking into if that's like when you go to sleep that's like one of the first things you want to touch to uh see if that's possible but one of the differences what I understand is that like pre-compiled headers are still headers and a header unit is um not So Much Anymore like a header because it's like compiled after the preprocessor so macros are possible with header units they work but they only like you know um are present when the header unit is compiled when when this code is actually being converted into a header a header unit by the compiler right so the the next usage of that header unit as you know the information from that header will not have the pre preprocessor run on it so you're not able to have a an a pre-compiled header that like those two different paths has in like an if Dev or something okay so and this is one of the examples I show another example digital is like if you have like a debug uh statement and you would have to basically have two different header units for that and I don't know that that is working that's something like which you have to go for the black blog post you know um I think it's a rather interesting topic that's interesting and also important because you know this probably improves compile times for you but you probably want to measure that on your own um and that's a good first step in the direction of modules for your code base when you go to C plus 20. so this is definitely a series you should see um I quickly want to mention that while we talk about modules and header units I did not see the keynote from Daniela unfortunately but I will see it at million C plus possibility will give an updated version of that which will probably be 100 more use or something like that she told me something I don't know um but that's also a good talk to watch out for in this case um and just want to give it a product um because that data has been busy with implementing modules and probably also header units for format um for the format Library and back to those posts this is just the first post of this I do not know if like if we assume that n is not one right um so those are something to watch out for that they probably will post an update to how they continue to do that and maybe at the end of a series they will completely switch to modules um but I found it rather interesting I find I find it also interesting that they uh dog food their own implementation to their own code base now and kind of you know see how this works um probably helps other material implementations for this so great blog post and this is what I wanted to highlight for this week but as I already mentioned there is more to look at uh the block rule also has some videos um by its nature also the the block rule itself contains uh the blocker highlight video from last week and um there's a bunch of interesting things if you want to read on various things about C plus thank you for your attention