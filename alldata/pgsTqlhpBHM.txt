all right hey look at this goang co-creator Rob Pike says what we got right and what we got wrong I'm into this I'm into this because remember we're kind of in that mode right now where we're going through remember this is 2024 the year of goang for me I'm going to give it goang minimum one year of full effort on all side projects I can to see can I love goang now I I will be I will be real for a quick second my goang thing started technically in February in January December I did write one more tool at Netflix with uh with a buch of rust and um it was fine but now I'm going to now it's it's just go from here on out for a while all right Goan co-creator Rob Pike what we got right and wrong I'm curious what he thinks they got wrong uh all right uh an excellent standard library and pack packaging system I mean packaging system did kind of come a little bit first class concurrency support and a focus on readability among the traits that keep God devs happy I will say one quick thing even though we have even started a quick let me let don't don't let him cook I got an opinion instead goang devs stop with the onlet variables what the hell is this what what what world do we live in like you know like if we go like this websockets G Gia all right if we do websockets Gia uh where are you GitHub all right please please okay I know websockets I can tell you all about the RFC I know it pretty well I'm pretty good at it I know I could do all this stuff uh let's see they have compression client go sums join Mass prepar prox to go server test uh which one's going to do the actual uh thing here let's just go in here and I'm just going to look for this uh 126 that should be probably good enough for me to be able to find it there we go connection found what I'm looking for there we go all right so here okay so let's look at what we got here we got W final bu C W.C equals c like what the hell are we looking at um what am I looking at I'm pretty good with go but why do you got so many onlet variables why are these all one letter pretty much stop this what the hell's w why are we doing this to ourselves what happened in here why you got so why you got to do this why you got to do that just just just put just dude like this n's and P's and just yo dog just stop it stop stop it stop it when you do this if you name a variable NN you get the length of p and you get NN out of there your shit's up okay you you're done messed up blocky it's time it's time to get the hell out of here okay I hate that I actually I just I like I literally hate this by the way One does not simply get the length of p and okay I just want you to know that one does not simply really L take oh my goodness you got okay okay hit me why is it an L take flip Turtle flip Turtle why is this an L take come on come on yeah okay double n is too far I agree with you double n is too far come on uh because dark because dark mode no one cares dude what damn it flip damn it flip you can't just meet me from a previous video okay that's not this is supposed to be a live interaction piece okay dang it flip take this part out okay you don't you don't flip take flip out flip you take flip out right now  anyways let's see right here all right okay now now we not done doing this there was a there was a treat for attendees at gophercon AU in Sydney Australia uh the city where ghost specification was first drafted original go co-designer rob Pike gave a talk commemorating the 14th anniversary of the day the go programming language launched with a talk looking back on what we got right and what we got wrong by the way go 14 years old like that's all right I like it I like it you know I like HTM X has roots all the way back into the 90s I'm liking go it has roots all the way back to 2010 I kind of feel like I'm starting to like old things right and Go's just pretty much nice C that's all go is go is just convenient SE that's how I look at go Pike began by remembering uh watching as a as the website first went live on November 10th 2009 the whole world learned what we'd been up to Boomer confirmed absolutely Boomer energy coming out of here 14 years later there is much to look back on Pike told his audience promising to explore larger Lessons Learned Pike emphasized he was speaking for himself and not the go team or Google go was and still is a huge effort by a dedicated team and a huge Community but he went on to deliver a talk sharing lots of inside memories Insider memories about the early history go along with some useful insights on what's important okay awesome let's I want to what's the takeaways give me the takeaways people Go's five original creators that discussed what made go popular for a 2002 article or 2022 article in Communications of the AMC uh in the article Pike joined with Kent or Ken Thompson Russ Cox Robert geser and Ian Lance Taylor to point out that go was specifically designed for concurrency and parallelism leveraging the power of new multi-core Chips while handling ATS scale workloads yeah I would say that this is Go's like greatest this is Go's greatest achievement is their concurrency model I know I know Elixir Fanboys are going to tell me I'm wrong that Elixir is better okay I don't know Elixir well enough to say that it's better okay but I absolutely think go has one of the greatest AMC mentioned bye bye bye bye bye this is this is ACM uh AC academic computer Computing Machinery what what do it stand for magazine is it magazine or Machinery what is it again uh anyways I used to participate in ACM competitions won a regional one once it was awesome Elixir mentioned and get get banned uh but they also uh they also credited Go's ongoing development focused Philosophy for its success as well as thriving community and its contributions yep yep yep yep it's a new theme Pike Revisited in his November talk our original goal was not to create a new programming language it was to create a better way to write software if it didn't take 45 minutes to build the binary I was working on at the time go would have not happened I love this by the way this is the greatest reason to do something something is when you are massively inconvenienced by something and this is real this is genuinely real like if you like right now there are multiple companies with large enough JavaScript libraries and ba or code bases that it takes over 10 minutes to build the thing the first time like you should just take a moment and sit down and think about what you've done when you're do when when this happens you need to rethink about why you are at the position you're at because it is a huge inconvenience to have this right if you're doing C++ stuff why is it happening right uh you know C++ is unfortunate is the way it is uh I don't think you're ever going to get out of that apparently mold makes it a lot better uh St Pike was sharing with the audience his uh detailed list of things we got right each was crucial to the ultimate success of go for example they made sure go was easy to parse which in turn made it easy to create tools uh like idees as well as Go's official language server go please yeah this was by the way this was like the 10 thou again this is why I largely think uh typescript has been so successful in compar in comparison to something like flow is because when you make a language and you make the tools around the language uh as like uh as a requirement it it just it everything will adopt it so much faster flow is not good I know nothing about flow other than it was the alternative to typescript but it did not have all of the uh bells and whistles that typescript had with all the developer tools and so my my my imaginations Is That Flow probably does now have those things and maybe it's still not that good but uh oh flow tooling still sucks ass yeah see yeah there you go and like tools make things so much better this is one of the this is such a and go please is actually a really incredible LSP if you go and use it what you'll find is that the LSP has almost co-pilot like autocompletion because it won't just autocomplete what you're doing it will also like autocomplete one or two steps ahead in the LSP itself it's it's very impressive of LSP it it's a it's a huge W LSP it's probably my favorite LSP out of all of them including rust analyzer it's really really really good uh as soon as they were augmenting the compiler with tools for automating testing and code vetting not to mention package compiling go command but that wasn't the only thing go got right Pike also applauds the go format autof formatting tool partly because the guts of the tool became a library that could reuse in simpler uh simplifiers analyzers and tools verifying The crucial code is covered by testing Suites I will say one thing I love again about go format and the fact that it's it's a language de like I don't like the formatting decisions go went with but I like that they went with a decision and the reason being is that go use JavaScript and set like any tool like what you got to remember is that any tool that that does these formatters and these linters there's somebody behind the scenes that is working an incredible amount of effort to make these tools work because they're not opinionated and they're all third party making a pretty fire making a prier work within a uh editor is shockingly difficult and you may not realize this but uh What uh what is it uh n n LS null LS finally just gave up was just like it's too hard to manage all these different things and it's because it is really really really difficult and so having your Builder your formatter your LSP all being owned by like all the same thing it makes it amazing none LS exists though it does exist but it's still like you got to remember that none none LS was birthed out of like actual tears not fake tears real actual tears of really hard time someone quit open source because of how hard it is yeah it's not that none LS is somehow doing it better none LS is just literally falling on the sword that's all uh not to mention that the output of these tools could always be uh perfectly formatted for humans and for machines the time saved by not arguing over spaces and new lines is worth all the time spent defining a standard format and writing this rather difficult piece of code to automate it interestingly Go's package Library grew somewhat as an accident as there was no other place to install go code at the beginning yeah if you if you used go during the early years there was no packaging system right like you it was kind of a it kind of sucked like during those early days that was like not very great I think that actually stunted a lot of Go's growth to begin with was uh was their early days they really goofed that up but they really kind of turned it yeah go path sucked balls it did it absolutely did it was so crazy that you had to do that I mean I understand the reason for it it's smart it's like hey we don't need to have a version manager you just say what your path is and it works but it's just like no that sucks trust me that sucks but now Pike sees it another uh thing go got right the existence of a solid well-made library with most of what one needed to write 21st century server code was a major asset it kept the community all working within the same toolkit until we had experience enough to understand what else should be made available another great thing about goes um standard Library it just there's really everything you need in the standard Library like you can use these other things but just you know what I mean but just just the standard Library alone you could build pretty great applications just using standard Library no dependencies it's shocking how far you can get uh another thing go got right was its release of a formal specification not only does that lock down behavior when writing a compiler it enables multiple mentations to coexist and agree that on that behavior um in turn let's see this in turn helped refine the language Pike says and to fine-tune its specification let's go let's go go install at uh home go not following Linux uh xdg based directory specification yeah but xdg I don't think existed when go started so it's kind of like do you break how go works because something else changed underneath it you got to remember that go started November whatever 20 uh 20 2009 that that's before xdg home right if I'm not mistaken I'm pretty sure that's that's that's before xdg got started am I correct on that I can't remember when that started xtg is 2000 oh it's 2000 oh okay well my bad then yeah 2009 yeah I know okay then yeah go sucks go you should have used you should have used local come on come on go get your together uh all right early on uh go issued a compatibility guarantee uh producing a dramatic uh a dramatic documented effect on the language uptake Pike says so much so that I find it puzzling that many other projects have resisted doing this I'm not really sure what they're trying to say here issued a compatibility guarantee oh yeah okay yeah compatibility guarantee meaning the language will not be breaking backwards compatibil okay yeah that that's good Pike also added as an aside that it didn't hurt that go acquired a reputation for fast builds yeah I I'd still say that this is Go's biggest thing that I hear a lot about is fast builds what go left out Pike also gave the audience a glimpse at the feature that uh never made it in but he wished it had allowing arbitrary Precision integers which he said would have eliminated an entire class of security concerns in a world where long integers can exceed the allocated memory there's still a debate going on about how we handle integer overflow well what if they don't overflow you don't have to think about it at all the runtime cost would be low and we just wish that I'd thought of it in time and be and and done it people may have objected it looks too expensive but what it frees up is amazing you just don't think about integer overflows anymore interesting I guess I've never I don't know I've never I've never in my head thought about this so what it's saying what it's saying is that let's let's just say uh let's just say you had this right you jump in a note and I got const a equals uh 232 minus 1 right so we're really really big so if I go a A+ 1 a or A+ 2 in in some world this would cause a problem like if I was a 32-bit integer this would cause a problem so if I go like this we get a we get ourselves a problem right because I just overflowed I went back to the I went back to the beginning right Oopsy Daisy uh and so if the compiler just took care of that and said ah you no longer fit within a 32 you're now a 64 I could see why people would like that but to be real the only times I think about the size of an integer is when I am doing like specific sized integer tasks which makes it really really hard for me to kind of Reason about why I'd want this does that make sense exactly well because the only time I ever the implicit is I don't think implicit is the devil I think that implicit the right set of implicit operations is really really nice right I mean to be to be really fair when you do a heap allocation it's implicit on where it goes it's not like you actually align your own Heap in how the allocation strategy works you know like there is some level of implicit that you do care like that you just don't care about uh doing protocols would be crazy exactly so that's what I'm thinking about on Dono is that exact same thing which is what would happen if you're trying to do um if you're trying to do a protocol in which you have a specific bite size that you want to fit and you accidentally roll stuff over right it'd be really it would be so I'm not sure if I think this is a great idea but maybe like maybe I understand it but maybe I don't I'm not sure later he says he'd like to see the compiler do more automatic checking of Go's Dynamic interfaces and also checking for the possibility of stalled progress Deadlocks that could cause resource sharing anything that makes your program safer at compile time is good although he wouldn't want insufferably long compiled times rust mentioned rust me this is definitely a rust mentioned moment this is fantastic this is fantastic like I I I I'm actually on his team which is why I would love to see an option type introduced like I would love to see an option type introduced into go that is fully supported so and and or the ability to say uh all Nils I expect to be options like some sort of like um you know like you know how they have like some go experimental Behavior it's like you can remain in the standard go way but you can also opt into the option side I would love to see that The Oddities of go compiler one other crucial thing that go got right according to Pike was its portability that is making it easy to compile code for other platforms it was made possible by Ken Thompson's compiler written in C programming language even though others argued that the compiler should have been written in go itself or using tools uh in lovm Pike acknowledges Thompson's compiler was an odd duck using old ideas and compiler writing albeit mod uh modestly sized as well as pragmatic and efficient but best of all it was familiar to us which made it easy to make changes quickly as we tried new ideas doing it our way however unorthodox helped us move fast some people were offended by this choice but it was the right one for us at the time this is super cool this is such like a cool statement this is such a cool statement you know how like like I mean you can really replay this statement in a lot of modern contexts how often are you told you need to do something a specific way and that is the only way to be successful like I recently saw somebody say that if you teach somebody who is new to programming if you don't teach them to do react you are setting them up to be a failure right which is a very very limited view on just programming in general and so it's just like when people you know there is there's good wisdom in listening to what people should do and how you should do things but there's also good wisdom in not doing whatever the current prevailing wisdom is if that makes sense you know and so I like this I like this there you got you know obviously it takes wisdom someone like Pike probably smart enough to make that kind of tradeoff if you're new to programming it's really hard for you to make that trade-off because you don't even know what you don't know you don't even know what you won't know in 10 years like you you are a decade away from being being there in 2005 Russ Cox had written a tool transl uh translate the compiler semi-automatically from C to go and of course today there is an llvm hosted compiler for go and many others as there should be uh the unknown unknowns oh yeah don't make me get into the the unknown knowns like that's you know we get into the weird part uh Pike's list of what go got right started surprisingly with Go's mascot an unnamed cartoon gopher that he called one of the earliest factors in go success really that's actually been one of the largest barriers for me I think I I don't like I don't I don't care I don't want a mascot Pike truly believes it was vital To Go's growth having a recognizable funny creature that the community could rally around it's goofy yet intelligent demeanor okay I would never use the term intelligent demeanor to describe the Gopher its eyes are semi cockey okay look at those eyeballs like they're that's not intelligent demeanor okay that I mean there's a lot of words for it but usually it like we don't typically we we we don't typically associate wisdom and intelligence with being cockeyed whether or not that's you know that could be completely unfounded by us but that's what it is you know what I mean that's just what it is uh he can build anything sets the tone for the community engagement with the project one of the technical Excellence allied with real fun I mean I do like the idea of real fun so maybe maybe I'm just being too harsh on this one yet one design or one decision that was perhaps not the best choice was releasing the gopher's design under Creative Commons attributions license on the one hand and encourag people to remix them in all fun ways Pike acknowledged which in turn helped Foster the community Spirit why was this not the best way this is like this is the best way what are you talking about you don't want to be like rust Russ is a bunch of dummies right the only dude rust Foundation was so stupid in their decisions that they literally tried to sell releasing Ferris as open to the community as like positive in their decision it's like guess what they didn't even have a choice in it they just made it sound like it was good on their behalf rule 34 rule 34 exists rule 34 does not exist because people give you permission by the very definition of rule 34 it exists without your permission all right let him cook I'm going to let him cook let's see it's a gopher cuddling up to the engineer sucking on the toes look at that guy look at that guy sucking on the toes look at that look at that go sucking on the toes that's just what happens but Pike says there were also frustrating arguments to correct attribution or misattributions and to be honest the attribution was uh often honored only reluctantly or not at all I mean can somebody tell me who drew Ferris like I you know it's tough you know it's tough all right so if we're going to do it over we' think hard about the best way to make sure the mascot stays true to his ideals cool story bro that's who cares honestly I don't maybe maybe it's unfair for me not to care because I'm just not in that position to care but I don't care go the Go Gopher was Renee French Pike's long-term partner oh so there's a bit of a personal thing Rene is feeling slightly uh slighted because of non-attribution for it uh Pikes talk culminated with Go's most impactful decision but he started by describing what the world was like in 2002 when he' first joined Google Google had seemed to be avoiding the concurrent execution of process threads if not pretty much Banning them outright Pike remembers which bothered him I've been doing concurrency like things somewhat without even realizing it since 1970s all right in 2002 there were many people who believed threads were a bad idea but that's also a wild that dude what is this take okay we just got to look at this for a second why threads are a bad idea for most purposes okay I guess this is something we should probably I would love to look at at some point but this seems kind of it just feels like a wild take right I gotta go I got to go see that you know what I mean uh it just hadn't caught the mainstream idea yet go was born partly to address that it ends up being one of the uh one of of the biggest things that go got right nowadays most mainstream languages have good support for concurrency Pike noted but not but at the time it made go uh seemed like something new go support for concurrency was a major attractor that helped grow early adoption pulling in programmers that hadn't used concurrency before but were intrigued by its possibilities Pike believes they absolutely succeeded go helped popularize concurrency as a way to structure server software although he admits that it might have been less impressive to programmers who weren't tackling intrinsically parallel problems like serving h P request I think one thing that's not being mentioned here is a go is way ear earlier than a lot of the async ways you do stuff like async uh async await or even promise proposal when did promise proposal even come out promise uh proposal uh proposal date right like when did it come out does anyone know oh my goodness uh spec promise proposal date does anyone know when this thing when when can can someone just help me find this someone go find this when did this thing when did it come out when did it come out I don't I don't know when it came out but either way this is you know the fact that we're starting off with the stupid gopher as the reason you know for a huge reason vital for its growth I would argue deeply that this this right here is the biggest reason for Go's growth is that it has perhaps the it has the greatest async model that I have seen or the greatest concurrency model that I have ever seen personally J JavaScript promises were introduced June 2015 with the release of ecmascript 2015 yeah but promises were before that 2012 for promises injs yeah okay but either way uh almost as good as JavaScript async model it's dude that's like offensive that you would say that it is significantly better and if you don't understand why I I I say this all the time I mean we've talked too much about this but I will say it one last time Ryan Winchester let's go pull up Ryan Winchester dude I hate the fact that I like Ryan and it just never autocompletes for him here we go um this right here this is why async sucks this exact reason right here this is it this this thing you know what I mean the thing if you don't get it you don't get it uh soon pik's talk arrived at his Grand conclusion here are 14 years after the launch and it's fair it's fair to say that overall it's a pretty good place Pikes succinctly summarize other factors in their success okay we can talk about this at some point uh we got here partly because of a strong standard library that imp implements most basic needs for Server code concurrency has a first class component in the language an approach based on composition rather than inheritance a packaging model that clarifies dependency management integrated fast build and testing tools rigorous consistent formatting focus on readability over cleverness a compatib compatibility guarantee now a lot of you may not realize this this like this was not the Zeitgeist in 2009 okay the zeist in that time this was like this was like the the Pinnacle of Java Fever I don't think people realize how like Against the Grain go was at this point and so it's absolutely amazing to see this come out at this time because the thing is is that a lot of people want functional languages to be successful and they they think functional stuff is the best the problem with functional stuff is that you go against the grain so hard if that makes sense it's so different it's so different from what people are used to that it's hard for people to want to even begin using it but go didn't do that go said okay functions are first class citizens you can do all the functional things you wish to you know you kind of could do but it's like a really limited type system so you can't quite do a lot of functional stuff but functions are first class citizens and you can Curry if you want to but nonetheless this right here is just awesome right this is just awesome to be here at that early absolutely love it and that's why I think people got into you know that's why people were able to get into it so easy and most of all because of the support of an unbelievably helpful and diverse community of gophers perhaps the most interesting consequence of these matters is that go code looks and works the same regardless of who's writing it is largely free of factions using different subsets of the language and is guaranteed to continue to compile and run as time goes on that may be the first major program let's see that may be a first for a major programming language I think my guess is that lisp might have something to say about that we definitely got that right this is this is great though this is the greatest part of go this might be the greatest part of go by the way we could the full talk is like an hour or else we would have done that lisp mentioned let's go this is great for Real by the way uh there's crazy factions in lisp though this is true lisp may not have changed much it's very Lindy as people say but it is most certainly like lisp is your own programming language as as far as I've been I've understood it you create it the way you want to the full talk is good yeah I'd love to I'll probably listen to the full talk on my own it's just that usually full talks I can't do like a lot of thoughts on because you just want to let the person cook you know what I mean it's a little different usually full talks you want to let them cook anyways this is fantastic I I agree with every part but the Gopher part gopher part seems a little weird but the concurrency and concurrency like testing people again don't realize how important testing was there there was no like testing is it's just not there you know what I mean testing was not there at all and so to have testing as a part of something to be intrinsically a part of the language incredible to have a build tool that is a part of the language was incredible like Java almost got that right but Java like to successfully build Java you need a degree in Maven which is just like or ant which is very very difficult you had to use net beans you had to use net beans uh anyways you know rust came in and rust took a lot of these uh rust took a lot of these ideas you know what I mean and Russ was smart to take a lot of these ideas like this is smart this is what you should do all right hey the name it's the prime engine