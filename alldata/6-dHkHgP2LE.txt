please stop using classes in JavaScript okay okay I'll turn off alerts okay I'll turn them off yeah maybe I forgot maybe I forgot to turn off alerts I'll turn them off here's a bunch of JavaScript that appears to be using jQuery this is some jQuery is code going on right here I don't even see any classes in this aquariusness I also see repetitively jQuery being invoked with window over and over and over and over again and it's like triggering the crap out of me dude hit him with that dollar window variable already stop reconstructing over and over again okay it's an emotional painful day to see this over and over again for years oop object oriented program was the de facto standard in software engineering the concept of classes polymorphism which by the way is also in functional programming inheritance encapsulation also in functional programming dominated and revolutionized uh the development process by the way classes are also in functional programming uh do not classes they're trucks with methods on it they're different really you're gonna go with that that's how you want to do this oh okay sorry it's a struct with the V table look up for methods all I do is gosh goodness gracious I got that one wrong uh but everything has an expiration date programming paradigms included in this article I'll talk about why classes were introduced in the first place and why why why why why it is a bad idea to use classes in JavaScript okay apparently I can't zoom in that much and what are some of the Alternatives okay I'm not going to talk about why oop is fading away in general but you can check that out in this great article please tell me you wrote this article please tell me you wrote this article you did not write this article okay because that would be so hilarious if you're like this great article and then boom pre-es6 classes okay at this point I agree classes were stupid I'm on team prototypical crap or Pro prototypal Proto just the Tipple was just Insanity okay when I saw code that was trying to con that hobbled together these class-like experiences just the syntax alone was so off-putting uh even though the class keyword was added uh to JavaScript since es6 ecmascript 2015. people were using classes earlier the way to achieve this uh was Constructor functions and prototype delegation to show you exactly what I mean I'm going to implement a similar class in es5 and es6 environments consider car and sports car again I agree inheritance sucks that inherits a car both have make and model property start method and blah to the blah blah blah okay car looks like that prototype looks like that two string looks like this bad boy sports car looks like this car call this yes oh yeah call it with that oh uh there we go looks great look at this stupidness look at how stupid that looks look would you look at that would you look at how dumb this looks I don't remember if you have to object.create the Prototype or if you're just supposed to assign it to cars prototype I don't remember and I'm confused uh Constructor equals sports car I don't remember having to do this to do inheritance but it's been so long since I've played with both inheritance and prototypes that I can't remember you know what I mean anyways who cares about all this blah blah blah blah blah as you probably guessed the car line two in sports car line 18 functions are Constructor functions the property are defined using this keyboard and the object themselves are created via the new keyword yay if you're not familiar with prototype this is a special property that every JS object has to delicate common behavior for example a prototype for an array object has functions you probably well know map for each find everyone's least favorite one reduce uh the prototype for Strings has functions like replace subster didn't substor get deprecated just a just a just a quick just a quick check did substor get deprecated I cannot remember deprecated it's been deprecated you don't want to use subster deprecated okay ain't nobody using stubster that's for rookies that's for rookies okay rookies uh anyways after the car object is created on line 33 you can access its properties and methods it does start the car blah to the blah there we go the JS engine uh the JavaScript engine asked the car object for the value with the keyword start that object responds with no such value the JS engine ask the card.prototype object for the value keyword start the car prototype Returns the start function the JS engine executes immediately accessing the make and model properties are performed similarly except that they are defined on the car object directly instead of the Prototype okay fantastic inheritance is a bit trickier to handle yep you gotta do like you gotta keep on jumping blah blah okay who cares I don't care we all know how this works it's let's just go on with the release of es6 in 2015 the long-awaited class keyword arrived in JavaScript it was super done wait it was done as a per numerous request by the community because people were feeling uncomfortable from uh coming from object-oriented languages but they uh but they missed one important Point um is that it okay maybe people wanted an object with with functions as well stay container with functions you know a lot of people like those just throwing it out there some people like that JavaScript has no idea what classes are uh JavaScript is a non-object-oriented language it was not designed to be one the notion of classes is absolutely not applicable to it I mean I mean even in the shitty prototype thing you still kind of could do objects and inheritance and look up here I mean what you can do recreate it with closures uh while everything in JS is indeed an object these objects are different from the ones in Java or a C sharp and JS the object is simply a map data structure with a somewhat sophisticated lookup procedure yeah prototype uh that is that is it really and when I say everything is an object I mean it even functions are objects you can check it out with the snippet yes you can actually you can actually do that you can look at an object they're objects uh oop without classes exists it's true in fact we read an article where you could create the world's most bastardized version of the Prototype chain and that's true message passage object oriented programming uh okay this is all good but how does the class keyword work then glad you asked do you remember car and sports card earlier well this class keyword is simple syntactic sugar on top of that okay in other words classes produce is conceptually the same code and serves only as aesthetic and readable readability purposes as I promised earlier here we go okay fantastic awesome so it has all the same thing blah blah blah blah okay these examples are identical and produce the Sim the same results what is interesting is they produce almost the same code underneath the hood I will not write it out here but if you were curious go look at my okay don't look at the okay that's first off this is super unfair and what I mean by this is super unfair is that if you're using a transpiler to show something that means you're not actually using the feature itself right you're just transpiling it into es5 so of course they look the same that's because they just translated it to the same Target okay to the same Target now they may be implemented identically underneath the hood I don't know I honestly have no idea if classes are implemented directly underneath the hood I would guess they are not because there's some optimizations you can do very obviously with classes because you can't change a class right you can't just or the expectation is you don't you can't just start adding things to the Prototype I mean you can it's JavaScript you can do anything no matter how horrible you feel but you know in no way it's some regex it's always some regex uh why not anyways now you should have an understanding of what classes in jsr and how they work now with all this knowledge I can explain why using uh classes in JS is a bad idea okay binding issues a class Constructor functions deal closely with this keyword it can introduce potential binding issues especially if you try to pass your class method as a callback to an external thing um did you know in react if your props has a child a children's object but you define your own children your children's object will not be respected but if you don't it is respected right I mean there's Oddities all over the world I get that this always seems like such a weird thing to call out with JavaScript because JavaScript gives you the keys to be able to take any function and bind it to anything it just feels weird that that is somehow that's a negative that's that's like a JavaScript design philosophy out the gate is that you can attach it to anything I don't I don't really understand that that's if you don't like it that's JavaScript it's JavaScript you can do the same crap no matter what now relying on the this keyword I can understand why people don't like it but that's why we have that's why we have syntax it removes all the ambiguity to it uh performance issues and that's why we have typescript it removes all the ambiguity to it uh performance issues because of classes implementation they are notoriously difficult to optimize at runtime hmm while we enjoy performing machines at the moment the fact that Moore's Law is fading will change all of that I don't know if I believe you on this one private variables one of the great advantages and the main reasons for classes in the first place is private variables is just non-existent in Js wait is this a wait is this a Pros or a cons you caught me off why not okay hold on now I'm confused is this a cons list or a prose list because I feel like we just switched gears in the middle of it being like private variables are great like what strict hierarchies class introduce a straight top to bottom order and make changes harder to implement which is unacceptable in most uh JavaScript applications you can just not use inherit you know what I mean because the react team tells you you uh tells you not to is this a react brain article I don't know think about all the things you do in react because you know how to do it you know you know to pass in an array on use effect or else it's called every single time it's rendered are you saying that that somehow that's totally acceptable complexity added to an application but knowing that you have to bind to function if you pass a raw dogged function around that's not acceptable I don't know it feels like the rules are arbitrary you know what I mean it feels very arbitrary like one version of complexity is very okay but the other version is not okay second off saying that react react doesn't decide what is good or bad react has their own opinions on things that are good and bad and if you want to do the things that they want to do then you can do it however they want to but if you don't want to do it the way they want to do it you can do it how you want to this is yes the people always say learn react this is the this is the truest problem of learning react before JavaScript if that's even a phrase one can say that makes any sort of coherent sense right I have this really hard time with this coherency of that phrase people say it all the time but I know what you're trying to say which is they learn JavaScript by learning react and it makes you think that react is the Arbiter of what is good or bad I would argue that creating an array every single render and every single one of your functions for every single one of your use effects not great and then to also take back all the use effects and say they were bad I'd say that was also bad right so it's not like they're winning all the time either I'd say that foot guns exist everywhere in this language because it's crazy uh all these issues can be uh mitigated with JS objects and prototype delegation like classes okay I'm super confused JS offers uh so much more than classes can ever do yet most developers are blind to it if you want to truly Master JS you need to embrace it to philosophy and move away from dogmatic class-based thinking okay was this like season one of 1899 you're gonna leave us on a cliffhanger like here like hey by the way there's actually a much better way to do it with prototype delegation and JS objects what you mean like classes no they're better what are they this is not a Jeopardy article someone wrote this by hand no examples yeah I want to know what he means because honestly genuinely if you can help me see something that I'm missing here I'd love to see it so where are classes really really good well classes give you a blueprint which means that I would be shocked honestly I'm still would be shocked if classes are less optimized than just simply objects with hanged uh hanging on functions I I really do want to test that I really do want to prove to myself that is real or not real I would assume there's just much more garbage collection and all that that goes on uh second off munching around with prototypes and calling that easier to work with than classes seems crazy right that's what the whole class keyword is is to hide the whole prototype craziness right okay I get it there are things classes are great for if you want a class that's a state container with a few uh methods to manipulate it it can be really really nice to have you know why it's very very simple all of the things that can manipulate and use that class are in the class itself your autocomplete makes it much much nicer experience it's very simple to find all the functions that are mostly associated with it if you don't if you want to just see which functions actually just use the object as opposed that manipulates with those functions you can use find references blah blah blah blah but if you have a bunch of objects if you have a bunch of things that are just hanging off by like say interface a bunch of different objects can call those as long as the interface accepts it and then it then it it causes this entire issue where this function may or may not be specifically for your object but it manipulates functions like your object and now you're going through a whole file that's separate it doesn't even hang off your object like I think I really truly think that strucks with methods associated with them is a very convenient very good developer experience you know what you have in your toolkit to edit it it's just like if you're doing iterators or anything being able to dot map dot reduce dot whatever the hell you want to do right that's a very nice nice experience because it hangs off the object itself if you don't have that instead you have map then you have to reduce cover it then you have to do the next thing cover it and it always is very annoying yes locality of behavior is like a gigantic plus one in all aspects the more localized you can make your behavior the more understandable that behavior is the name is I still will use classes but I pretty much refuse to use inherits though every now and then I try to use inherits because I think I really have a situation in which inherits would solve this problem well and so far I am five out of five for regretting my decisions using inherits I pretty much do it every single time at least three to five times a year I decide I'm gonna use inheritance because this is the point extends is the time the time is now and I found the situation and every time I've lived to regret it the name is that whatever that was a gin