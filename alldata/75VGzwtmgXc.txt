so you wanna code and go but you're an embedded developer who likes the arduino well then do i have a treat for you squarespace is a platform for no just kidding but yo squarespace hit me up but seriously if you're an embedded developer who wants to code and go today we'll be talking about tiny go tiny go is a project that brings the power of go with its easy syntax and garbage collected runtime to smaller embedded chips like the stm32 or the atmega328p tinygo also supports these chips here um there's a lot before we get started there are some trade-offs to consider when using go over other more common languages like c go is a garbage collected language which means in the background while your program runs the go garbage collector checks for memory that is no longer accessible and freeze it giving it back to go's usable memory space this garbage collector will prevent memory leaks in programs that run for a really long time this is especially useful in embedded systems that have low amounts of memory that need to run for a while but don't get too excited the go garbage collector does come at a cost this collector running in the background at a fixed interval causes a hit to overall performance increasing goes run time when compared to c to install tiny go first install the dependencies for the avr build chain so gcc avr avrlibc and avrdude [Music] next we'll install go to install go navigate to the go website and download the tarball for your environment extract the tarball using the command provided and make sure the binaries extracted are exposed to your terminal using the path variable you'll be all set when you can run go version and get the version of the go binary installed on your computer [Music] with go installed now you can go to the tinygo website and go to the quick install guide for linux and then use the commands provided to download the tiny go debian package and install it using d-package [Music] to make a new project make a new folder go into that folder and then type go mod init and then your project name in this video the project is blinky [Music] now for the fun part actually using tinygo to write code for your arduino first we write package main which tells the go compiler this is going to be a executable binary and not a shared object next we'll import two libraries machine and time you'll notice here the machine library actually produces an error that's because the go runtime by default without tinygo doesn't know where machine is you can ignore that error after that we'll create our main function and create an object named led led will come from the machine library machine.capital led inside the tinygo machine library there's actually an object that knows per target board where the led pin is so it automatically finds that on our arduino target after that just like the c or assembly implementation of this project we're gonna have to configure the led to be a output pin on our arduino so we'll use the machine.pin config mode to do that next we'll create our infinite for loop and in that for loop we'll turn the led off with led.low and then sleep for half a second with time dot sleep and that constant there just as easy after that we'll turn the led on with led dot high and then sleep for the same amount of time to produce the blinking effect on the led and with that complete our program is done and now we can move on to the final step flashing it to the arduino [Music] assuming you have the arduino plugged in you can run the following command and tinygo will find your board and flash it for you no questions asked and just as easily you can change the target of your board from arduino to something else like the raspberry pi pico i'm definitely doing that in this video for educational purposes and not because i fried my arduino trying to make the next part of this video [Music] so after this project i did a quick power analysis on the left is the go program running and on the right is the c program i figured because the go program made use of a garbage collector it would take more power to run but you can actually see here that the go program uses a little bit less power than the c program anyway if you enjoyed that hit that sub button and go watch these videos that i think you'll like just as much