previously we did a a sort of tour with the R3 note Uno board I just went around and said what the various components do now we're going to write a sketch or program so that's the code that's going to run on the chip to turn our outputs on and off or whatever but we're just going to write one that's going to turn the LED that's on pin 13 on then off then on then off that's sort of the hello world equivalent in the electronics World um you can't write hello world to a screen so you blink an LED it's pretty much the first thing you do when you come to a new um environment so there's a special program called the Arduino IDE which stands for integrated development environment um the best way to think of it is it's like notepad so simple text editor and then a bunch of other tools that let you program the Arduino with what you've written so what you write is just text characters like in notepad um and then it's those special tools that that are also built into the program that take that text they have to go through what's called a compilation stage compile which is taking that text making the machine code the binary code that actually gets stored on here it has to uh make that on the laptop and then send it down the USB cable to store it on the microcontroller whenever you power it or reset it that code starts running all those tools are built into this and the alino ID integrated development envir if you go to I think it's arduino.cc you can just download it they've kept it deliberately quite simple you can go to much more complex ones for microcontrollers that do all sorts of clever things but of course they uino is meant to be simple for beginners for hobbyists for makers so there's the interface you can see is quite clean there's only five buttons three of those are Save open and new which are in every program when you open ad you get a sketch pre-prepared for you so it it fills in some of the blanks for you you've got two functions that every alduino sketch needs to have and they're called setup and loop and so setup um even gives you comments which in this language start with two slashes put your setup code here to run once the first code that runs when you plug power in when you press reset first lines of code run what is the language is it a specific special language or it's a derivative of what they call wiring um but the ultimately the language you type into the editor is called C is C++ which so if people already know that they could just pick this up and they yes the only thing you'd need to learn on top would be the Arduino code libraries as well as U making the hardware nice and easy for you so don't have to think about it um they've made the code nice and easy so all the mucking about dealing with writing the individual registers in the microcontroller making sure that the timers are set up correctly all kind of messy things that um you'd normally have to do is all hidden away so you can just say turn this pin on and it goes and does it one of bages that you don't have to do all that and you don't have to do it for every different chip so different ERS might have different chips all of which need a slightly different way of controlling them um the code Library knows which chip you're using and it can um do the right thing for for that particular chip we're going to be using the LED on pin 13 now normally the digital inputs outputs default to being inputs so they're reading um that's kind of the the sa the safest thing you don't want it into an output suddenly turning a motor on as soon as you plug power in that might be dangerous things like that so the default of being inputs just reading which is which is safer we need to tell it hey want you to be an output so we're going to put a line of code in here which is pin mode you see that when you type a a keyword in something that the language is aware of it turns it orange or sometimes blue so that's something that the IDE gives you as well when you've typed something correctly it goes different color so you know you've got it right we're using pin 13 so so we tell it 13 comma output this should turn blue which it does and we close the brackets and put a semicolon so we've told it the pin mode of 13 to be an output so that's going to then configure the internal Hardware to pin 13 to um Drive current put voltage on that that pin and turn the LED on or off that's all we need to do in the setup and once it's finished the coding the setup that runs once then it goes into Loop it runs all the code in Loop till it gets to the bottom then goes back to the top and starts again and will as it says run repeatedly Forever Until You Pull power or press reset so the first thing we want to do in the loop is turn the LED on that's a function called digital right we need to tell it which pin it is it's pin 13 and high high says put 5 volts on it that's going to send current flowing through the LED lighting it up then we need to wait for a bit of time we can't just turn it off straight away because that happens in micros seconds and you'll never see it so we're going to turn it to delay and then give it a number of micros seconds to delay for so let's delay for 500 micros seconds which is half a second then we need to turn it off I'm going to be lazy and copy the digital right line because it's exactly the same and then just change high to low and then I'm going to copy the delay line and put it again there so we've got four lines of code turn the LED on wait for half a second turn it off wait for half a second and then it'll go back and start again yeah now I've done that the first button up here this tick is verify all that's going to do is do the compile stage it's going to check really make sense is that yes pretty much yeah it's going to check that it at least makes sense logically it may not do what you want uh but it it's um it's not it's the same program is so it's basically it's like looking at a sentence and saying well the grammar's correct and there's a full stop at the end yeah it could still be complete gobble it's asking me to save it um so I'll I'll save it and then bring this window up a bit so so the Capal stage it takes your bit of code it has to combine that with all the alino libraries to form this single blob of binary data that's going to be sent down you can see it says done compiling it gives you a nice bit of output so it's going to use exactly 1,30 bytes so that's just over a kilobyte of storage space which is 3% of the total it's telling me I'm using n bytes of dynamic memory which is 0% rounded down I'm guessing on this particular device there's 32k of memory for your program and then 2K of ram you can put pretty sophisticated programs in that map space so that's done combining so we know that at least it's it's going to send down now we need to tell the aldino IDE which USB port this Arduino is connected to and um and what sort of Arduino it is so under Tools here we're interested in board we make sure that uino Uno is selected uino is appeared to Windows as serial comports though they are USB devices they appear to be serial devices so they appear as comports there is on cont 24 and you see it's self-identified as as we know we know so we know which one it is so now we can press this button upload upload actually compiles again because you you might have changed your code in the meantime earlier versions of alduino would compile everything again this just is a bit better at detecting what's changed and then it uploads all you really see is the T RX LEDs flickering for a moment that's it doesn't take long and then the LED starts blinking for the analog input it needs to know a base level to correctly convert the voltages on these pins into numbers most of the time I think iof is just left alone then putting that knowledge back into the algorithm so the algorithm can learn from it again and to sort of reinforce it a bit