let's start we're starting this how I accidentally created J diesel of data pipelines and it's awesome okay for those that don't know it's from the daily WTF a man named Tom a genius you wouldn't understand he created J diesel J diesel is an experience in which every SVN commit is a function and a class is a construction of a series of SVN commits and for you to be able to build the entire system and has to walk the entire SVN think checking out each one and constructing the JavaScript class from a series of commits so that my friends is J Diesel and comments are executed as code which I'm not even sure how is possible but anyways let's keep on going I ended up creating a data pipeline tool which everything is programmed in Jon becoming the J diesel of data processing and I promise it's actually quite awesome okay so I'm super skeptical of this but I'm so excited about this and short answer I ju I just felt like it let's go that is good good answer because why not it's a crazy challenge after all however the motivation for such a system was based on some work at at avato uh where I was an ml engineer was notice the keyword was okay presented J diesel was an engineer responsible for creating ml models that operated on a batch and streaming data however we hadn't implemented any robust tools for creating data pipelines and I was let's see I was the only one tasked with addressing this issue this might have been the point where I should have opted for a well-known data processing tool like spark or Flink but I came but then came the challenge of training serving skew and ml this skew occurs when a ml model trained on one machine runs on another potentially using a different programming language this means data Transformations needed to be replicated for example a training job might process data in squeal and python while production might use Scala and python replicating complex mathematical functions can quickly lead to slightly different results rendering the ml model ineffective or essentially useless welcome to Costco forgot to turn off alerts hey thank you you're welcome I appreciate that appreciate that uh data transformation is hard kids something something hasal perer function oh camel therefore I needed a way to ensure that Transformations were aligned on every machine regardless of the programming language or version they were running on this sounds like a hard problem this sounds like a hard problem okay okay the crazy idea let's hear about let's hear about Jade diesel here this is where my I had my crazy idea a as each line of data transformation can be represented with very little information for instance if we want to multiply the amount column by 10 we can represent a multiply column with constant value transformation and provide the column name amount and value 10 the same concept applies to adding two columns we just need to know which two columns to use or for something more advanced like generating and embedding we need to know which embedding model to use and for which column I'm not happy right now it's just at this point we just wrote an interpreter we just wrote an interpreter at this point this is just an interpreter and the bik codes of jaon in this way each transformation would be technically agnostic and therefore sharable across machines with this in mind I needed a way to describe these transformation this led to the use of Jon meaning we actually program ETL pipelines by defining jessan and suddenly we ended up with Jay's diesel pipelines name is fale transformation key sex equals value string value female depending on name sex from here on I feel like there's an Austin Powers joke every time I see the word sex I always go yes in my head just due to stupid Austin power what was that Austin Powers one in 1999 or something like that when was that every single time from here on from here I could load the file into Python and run my Transformations with my processing engine of choice not bad from aligned import file Source Transformations equal await okay what is this this JavaScript is a weight a python feature as well is there a weight in Python what the hell is this what language is this is this Asing python okay I was about to say I keep like I keep looking at it and my brain keeps going this is python then I look at and go no this is not Python and then my brain thinks about I go no this is py and then I just can't like I can't seem to like catch which one I'm looking at okay trans okay okay okay okay uh polar says python that's what I thought so that's that's what gave it away fully that because you could actually convince me that this is Javascript with underscores right like you could convince me that this is Javascript with underscores and I guess there's no conet here that can't be doing Global variables that should have got that should have got me should have got me um anyways all right so let's look at this uh this is Nim sir this is Nim uh all right so we got some Transformations we have the input data we transform it uh feature view Titanic uh oh damn that that sounds like it's going down Json was a bit too crazy really really you you ain't telling me that programming actions for a programming to take in j doesn't sound like it wouldn't get out of hand how are errors handled however programming directly in Json is Not Practical it would lead to many frustrating formatting errors there was no linting uh to check that the file was semantically correct and no code completion to indicate which parameters should be set why mean you could write your own LSP for this if you got really excited about it but I still wouldn't suggest it therefore I also set up a python API providing site stroke type safe Transformations code completion and then compiles everything toes on file feature view one hot in code what is that what is what kind of function's called one hot and code I must not know python dog is this like normal python do you call it some hot and coding what kind of encoding are we talking about let's make me horned up one hot program hot encode in your areas can sex Hammer can I find hot and codes in my area notice that we are not referencing columns using strings but rather using the fields themselves that's kind of cool okay okay okay um uh this uh leads to to both code completion and type safety as lters can catch errors yeah it was better than what I thought another let's see although the Json file contains a lot of information it is still just a file so what real use could it have however after let's see after some time I realized that its value depended on the context in which it was used isn't that all value now the file has like I mean real talk isn't that all value uh now the file has become my most valuable asset as it powered all the functions below data validation L data linear graphs view data lineage data cataloges you're welcome for that for this mute debug specific uh feature transformation view data catalog continuing pipeline from cach States incremental data marginal materialization warning about data migration conflicts I don't I mean I understand literally all these words individually like all of them I understand individually and yet somehow none of it I understood uh that is the only data engineering features and let's see that that is only the data engineering features not taking in account the ml Ops features but there's so much more having a file that contains all these Transformations input features Etc is a technology agnostic way to lead to an or which has led to an incredibly flexible system it has enabled me to move much faster than I pre previously thought possible I do think this is pretty cool that you build your files via python I thought that that that's pretty clever can we agree that that's probably pretty dang clever right here I like this I like this I I I do like that that's super cool I you know I I love this I I love that you took a chance you built something you w weren't sure of and it it met a business problem now generally I'm very skeptical of a Json file describing how a program should execute in general it is great until it is horrifying right can we all agree to that if you haven't had enough experience in the world this has like been a road that I have traveled down many times in which always has the same ending great until it's one of the worst decisions I have ever made in my entire lifetime so right now it sounds like you're loving it which I think is great and I think there are probably a set of problems in which Json does work I mean hell your vs code configuration is all driven via Json so I mean it can happen there there can be you know how things should behave with Json but I think it's very difficult I think it's jmal is very difficult language to use and so this is super cool I I love this idea it's not J diesel though I will say this is not J diesel because remember one of the key ingredients of J diesel is that J diesel requires history to construct the item now if you would have had each data transformation as a git commit and then a series of git commits hashes as how you execute the data pipeline then my friend then my friend you have created g j diesel no comments though Jay gson yeah Jay getson yeah exactly it Json is not great for programmatic stuff because in the end programmatic stuff always needs you to have like hey I want to add one well now you have to program in this feature in Json to say hey add one that's why there's that that shout out in the beginning this constant ad add two columns subtract two columns Subtract with constant like it just keeps on you know what I mean there's there's quite a bit Yeah do a loop throw an error how should errors be handled should you retry specific errors right there's like there's a lot of stuff you have to consider whenever doing it but I love subtract pre-at but I do I mean I I just super stoked that he that he built this and it's and it's working and it's going great that is super cool you know because sometimes sometimes a novel approach to a problem can make a really great outcome because remember all of the things you hear as like the the de facto standards and everything at one point was a novel approach react was a novel approach to front-end development and it's now considered the deao standard to front-end development you know you got to take a risk every now and then uh Lua is better uh is a better DSL I think Lua is the best DSL if you were to create a DSL or you needed a way to execute stuff dynamically or be able to download scripts and be able to execute them on the Fly I highly recommend considering Lua embedding it's not extreme difficult yeah it's very very cool the name it's the J diesel then Jen look at that I'm the day we we had it this was the closest we've come to J Diesel and I I appre I appreciate that now let's get it let's let's get it into subversion specifically tortois SVN let's make this happen I think we got something going here okay you're 99% way there let's make it a hundo okay we can make this a 100 a Jen