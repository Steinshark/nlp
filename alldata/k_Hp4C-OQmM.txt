in this video I need to show you an optimization that's very important in Python and this has to do with checking for an element in a set versus checking for an element in a list because there is a crucial difference especially if the list or the set contains millions of items one of them is definitely going to be better and more efficient than the other so for this example we're going to import from time it the time it function so we can perform some tests then we're going to create a list called my list which is going to equal a list of the range of 100 000 so we're going to create 100 000 values in a list and we're going to duplicate that change it to a set and create a set from all these values so both of these contain 100 000 values but now we want to create a simple test and the test is going to look for an item or an element inside the list and inside the set to see which one is actually faster so to create this test we're going to type in list time and that's going to equal time it and it's going to take a statement so we want to check that the number 99 999 is in the list so we'll say in my underscore list so this will be the snippet of code we will run and we're going to run it a thousand times so we have to type in number 1000 we're going to run this snippet of code 1000 times and we also need to refer to globals as globals because this code here has no idea we're talking about this unless we refer to the globals then for the list we will print that the list took this amount of time and it has to be a formatted string so here we'll type in list underscore time dot six the formatted to six decimal places and we'll type in seconds now that you've got the gist on how we're going to time the list function I'm just going to copy and paste in the set function so it's exactly the same thing except this time we're using my set so they're both checking for membership of this variable here inside the list and inside the set and the whole point of this is to find out the speed difference between them so speed difference is going to equal list underscore time minus set underscore time and that's going to be divided by list time times 100 so we can see how much faster set is going to be then we can print the formatted string of speed difference to three decimal places so dot three and we will add a percent and faster so that just shows you how we're going to perform this test as soon as we run it it's going to take a few seconds or maybe even a second and you'll see immediately that the list took one second while this set only took this incredibly low amount of time and we can even increase this we can even say 1 million for example so 1 million on both and we're going to change this to 999 000. to both of them so it's essentially the last element in both of these iterables so let's run this and see what happens now you will notice it's going to take a bit longer and this time the list took 9 seconds while the set took essentially the exact same amount of time as from earlier so why is this why is it that the set was so much faster when it came to performing this operation of checking whether a value was inside it well one of the major reasons is that the sets in Python is implemented as a hash table and that allows for efficient lookup insertion and deletion operations the second reason is that the sets on average uses the 01 which is the constant time complexity in theory it doesn't matter how big the set gets it's always going to take the same amount of time to do that search and that's just on average if you go on to stack Overflow you'll see a lot of people arguing that it is not o1 but something else but on average it will be 01 while lists use o n which means that if the list gets bigger so does the amount of time to search for an element in the worst case scenario the third reason is that sets only allow for Unique elements so that might be some you don't want maybe it is something you want but due to it only allowing unique elements it will reduce the search space compared to lists which can have the same element as many times as it wants sets also do not store the order which means you're going to get a random order back each time you get the setback while lists have to preserve that order so that will result in an increased overhead when you are trying to retrieve or do anything with lists now of course these are two different data types so depending on the needs of your program you might opt in for a list or you might opt in first set if the order doesn't matter and you don't want any duplicates a set might be the right choice for you but it's also worth mentioning that to create a set does take a bit longer than creating a list but honestly I don't know how many sets you are planning on creating if you're just creating one set it should be fine if you're creating a million sets you might want to work out whether you want to use a list or not depending on how many elements each one of them contains but to sum this video up if you want more efficient insertion deletion and the lookups use the set because again it uses a hash table which is incredibly efficient while the list might just be more let's say versatile it can do a lot more but it also comes at the cost of efficiency but anyways I hope you enjoyed this video do let me know what you think about this in the comment section down below otherwise with all that being said as always thanks for watching and I'll see you in the next video