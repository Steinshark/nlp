what's up python the Gill removed the new compiler opt parse deprecated what the heck just happened to python Well turns out python without the Gill for good the python a new python compiler pedantic 2 is getting usable pep 387 defines soft deprecation oh girl I've been trust me we've defined soft deprecation a while agon while ago cython 3.0 releases with better pure python support pep 722 dependency specifications for single file scripts python via support gets faster or vs code uh sorry I said that out loud Python vs support gets faster paint in the terminal there's a lot going on with python okay a lot is going down with python python without the Gill for good we saw last month the global interpreter lock was the center of attention once again this month it carried on to the point uh then even meta Facebook's parent company pitched in if pep 703 is accepted medican commits to support in the form of three Engineers three engineer years on Landing no guilty python wow they're in they want it they want that bad it's nice to have python seeing more and more contributions from big companies that used it for their success it's a huge contrast compared to 2010. yeah this is awesome when people say that companies need to give back to open source I think that I personally think that this is one of the best ways to do it dedicate engineering years because the real the real talk like the real part of it is that sure handing out some money giving some money will get somebody to be able to be paid some amount of money to help kind of contribute and make the project better which I'm not saying don't do that do that but it's best done by individuals because you don't want to be at the whims of companies you want I'd rather have a thousand individuals giving five dollars a month did you hear that don't forget about your blue crown you know what I'm talking about uh and have that work but have big companies dedicate Engineers right because that means that engineer is well paid they're going to try really hard it's further you know it's gonna be it's gonna be fantastic the discussion culminated with an internal debate with uh the core devs which ended up with an official announcement announcement of Pep 703 The Proposal that re-lit the fire uh was going to be accepted after some details figured out this means in the coming years python will have its Gill removed okay so Global lock interpreter let's go here's the plan and short term unsupported experimental version of python without the Gill is published in parallel to the regular one all right three three three thirteen three fourteen midterm no Guild version is marked as official supported but is still just an alternative to python with Kiln a Target date is announced to make uh it the default one the default once uh this will happen after the community has shown enough support for it and will take several years long term no Guild becomes the default before this the core devs can reverse the decision and abort the no-gill project if it proves to have bad r o i radio over internet everybody knows that okay so that's kind of exciting like I assume this will just make an incredible speed up for for the pothons right yeah it's Python 3 roll out again you know for all of Python's downfalls one thing that I think I I in some sense I can appreciate about it is that python says screw it we're gonna have made versions right or big changes I think there's something some things are good about that I will agree that never wanting your language to change after you've thoroughly made some mistakes maybe is you know because there's all those people that talk about rust too and they want rust to because apparently it can make a lot of good changes to the compiler greatly speed up things like if you could cut rust compilation in half but have to do a major version would you do it probably I think a lot of people be like yeah that seems extremely compelling to me you know Rusty would be exciting uh the main reason for the two different builds is to manage the unknown unknowns indeed nobody expects the no Guild to break things but with such a big project you could never be sure ABI compat is tricky and new extensions need to be compiled explicitly against it for it to work so there is a need for the community embracing it okay also no Guild compatibility extensions will work on the old interpreter so you don't get into the situation like Python 3 code not working on python 2. okay so so that's good right that's good that's the right right they learned they learned not the fracture the ecosystem for multiple decades that seems positive in fact python code itself should not be affected and will work seamlessly on one or the other albeit with threads limited to a single core classic uh let's see L python the new python compiler I heard to skip this part I hear it's boring but we'll do it anyways uh that's the news I didn't see coming what's the deal with C python Pi Pi micro python jython oh man if I had dollar for every time I heard jython I'd have three dollars uh we talked about Python compilers and I thought I did a pretty good job about listing everything that mattered well the team behind L python decided to take this list and append on it same yeah no one has any idea what uh Gill a very good replacement uh in the browser oh really is it uh L python is a new bsd3 compiler that takes python code and translates it to the following llvmc C plus plus or wasm oh it does uh it doesn't aim to compile the entire program although it can but rather like a number in cython to let you speed up numerical bottlenecks okay cool the benchmarks are very promising and the ability to switch ahead of time and just in time are were very convenient oh very cool uh although you'll still need to uh need the entire compilation chain installed on the Machine Classic that's why we have Docker that's why that one Dev invented Docker L python likes raw python code you know you like your rile python you know you like the raw python so if you call python function inside your snippet you must explicitly mark it as Raw it's just a wrap just watch it um so your ruins it uh so most likely you'll use it for very specific Snippets uh pinantic 2 is getting uh usable I've been pitching the coming version of uh two of pedantic for some time because I and many people use it a lot for data validation and schema definition oh it's pedantic like a type system on top of things raw dog and python you know we got to do that you know you got to do it every now and then right also clip it uh yes it came uh out of stable last month but if you read the relieving your python packaging pane you know that I don't encourage people to use the latest version of anything except for testing and having fun yeah uh it's a schema validation Library oh interesting like Zod is this supposed to be some version like Zod you can do the goblin voice yes yes Smiggle Smiggle master sorry I don't know what's happening to me master it's just it's just yeah canceled we love it uh anyways uh pedantic 2.1 is released the first wave of nasty bugs have been eradicated the fast API announced support for pedantic 2 it's since the biggest uh driver of pedantic 2 usage okay pedantic pep 387 to find soft deprecation okay this is what we need to know about what the hell's soft deprecation if you haven't read Victor Steiner's a Blog yet I encourage you to do so it's Technical and raw with a zero BS it gives you a good view of what happens inside the Contra contribution life of a core Dev last article mentioned something I missed last month soft deprecation has been added to pep 387 backwards compatibility policy this document created in 2009 States how python project deals with deprecation how it will contain the following soft deprecation can be used when using an API which should no longer be used to write new code but it remains safe to continue using it in an existing code the API remains documented and tested but will not be developed further no enhancements the main difference between soft and regular hard well the pit we call pick deprecation he's always hard um is that soft deprecation does not imply scheduling the removal of deprecated apis okay a soft deprecated API is in a zombie state to maintain the LIE forever but we'll never see any work okay cool by the way uh I don't know if you know this uh I was recently using I know soft and hard at the same time I wanna I want something soft that eventually becomes hard okay we need a soft to hard road map like what do we have to do to go from soft to hard real question okay uh I had a question but now I forgot oh yeah by the way I was playing with o camel and oh camel is really awesome they have a really great like Arc parse Library just a bit more of that smeagle impression no not gonna do it we'll have to wait we're gonna have to wait cython 3.0 released with better pure python support scython the most famous uh python compiler released version three while the release comes with all sorts of improvement one particular stance out cython always has limitations it used a super set of python to express some of its features this is no more the uh this is no more the case as the release notes it should now be possible to express all python code and use all features in regular python syntax okay I assume this means it's like a go time right sounded uh just like your regular voice your smeagle impressions sounded just like your regular voice um there see there goes that emotional trauma again now I get to carry that around for a while joys uh Smeagol camel uh uh pep uh 722 dependency specification for single file scripts well they're uh while the no-gill topic was certainly still alive and while the proposal of Pep 722 really heated things up oh damn I bet you some people got up and shifted uncomfortably the idea is to formalize the syntax in comments that similar to groovy's okay first off you should never cite groovy okay groovy is I still hate groovy uh all my all my homies hate groovy uh between this and Mojo python is feeling relevant again yeah I don't think Mojo's gonna deliver anything honestly I really don't think Mojo's gonna deliver a lot um the only reason why I say that is that you know there's like this thing called C and it can just like go into python just like in it it's like fast so when when Mojo does this a comparison showing that it can do loops faster it's not really showing me you can do anything faster because it ain't nobody ain't nobody right in Python like that okay ain't nobody doing that ain't no way ain't no way the idea is to formalize the center uh syntax and comments that is similar to groovy would allow expressing the dependency of a single script taking the example from Pep itself in order to run the script you need the following uh oh requirements oh interesting Oh weird the import lines are oh okay semantic comments huh ha ha uh which would be officially formalized to be parsed by third-party tools the concept is not new and it looks like pip run already supported running uh scripts which you have dependency for okay I mean kind of cool I guess maybe dream beer a dream bird was renamed what the greatest language ever got renamed dream X is it dream dream x uh let's see hold on the pet let's see the pep doesn't imply python or pip are going to have to integrate with such features it only is formalizing the Syntax for now but I have a good hope that this one has uh several lone Python scripts lying around that would really benefit from this yeah I could see this being really nice especially if you can keep the end of around in the future such a proposal could show demand for it and years later uh in a year and years later lead to pip adoption no uh npx influenced the addiction or the addition of npm and create which allows to fetch project templates from specific packages indeed that was the most common use case for npx okay interesting Python vs code support um honestly I don't care about python uh vs code I don't and paint in the terminal this is just so cool it's a version of paint that runs in the terminal thanks to python lib textual but it's not going to change your life or anything but wow okay maybe uh maybe I need to do maybe I need to try that out I will try that out what a great thing python you know it I I do love to see that python is really it's really going somewhere python you know that's really cool to see uh I've always wished that I maybe spent more time in Python than JavaScript I feel like there's two worlds that exist there's those that do JavaScript and those that do Python and they seem to have like two core audiences that just love it you know what I mean it's just like pythony's does love python typescriptors love typescript and there's like no in between right if if you if you like Python and and typescript you're like the devil in either of their eye in either of their eyes no I know that you there's Middle Ground exists right us normal people just want something that works right uh make vote on what is worse python or JS package man management I'm actually gonna go with um js on this one but let's find out which one which one do you think endpoll uh Delete pull okay well we're gonna have to refresh on this one I work as a data engineer so python is mandatory yes you have must like python if you're a data engineer this is this is facts Middle Ground equals dejango duh Django all right here we go new pull uh which package management is worse python JavaScript I'm going to throw C plus plus in there just to really F this entire pull up okay I'm gonna I just wanted to F it all up because I'm gonna vote C plus plus you're probably thinking what package management exactly get sub modules C plus plus package management is called get sub modules or apparently cmake claims that it can download apparently see make claims that it can use GitHub to manage packages which we all know is fake it's called a make file yeah dummy we all know that is fake it's never been real okay what is the package manager you know what I love the fact that even with C plus plus in here ruining the poll completely there's still at least more people that hate JavaScript than python that is incredible that is incredible that you would vote for either of these two over this one but the fact that JavaScript is still winning right just write everything from scratch just write just just include it I do not like this music playlist we've been playing but I just didn't want to change it uh yeah but more people know JS than python is that true truly a prime stream absolutely you got to do it pip is good is PIP good I think the thing is is that with the with the Advent of a virtual end and all that then yes then yes python like Python's package management I think is better Anaconda is really nice right with with I think Python's amazing Dino is good you shut your dirty Dino mouth don't you even try that okay I'm glad that I screwed up that poll but I'm glad that's uh would JavaScript still failing python has some great ecosystem it does anaconda is nice my anaconda don't want Nana unless if you got packages hun um okay well there you go python hey enjoy the python ride the python raw dog the pythonogen