all right Gooden Morgan V Gates that's about the well I have a bit more German than that but I won't attempt to do this in German I'm not that I'm not that talented um I'm Kevin Carpenter we're going to be talking about tooling intuition uh my day job I write credit card software so when you swipe your credit card I have software that answers it if you're in the US um my code is not especially complicated you know it has things that are old and new and we won't be looking at the code in this one in this particular talk but just a little bit about me and what I do for the day job um this is a Back to Basics talk and so I'm going to jokingly say if you were in the quiz last night and you understood a lot of that then you might prefer Randomness or something because this is going over uh the goal of the talk is you know I was thinking about how I started doing bugs you know you you're coding something and something comes up and how do you end up figuring out what that is and how do we build about that so tooling intuition so of course when I started doing the talk you know I know intuition is for me but then I'm like all right well I need to look up and get the definition for it and you know the ability to understand something immediately without the need for conscious reasoning you know that kind of aha moment you look at something you're like oh that's what that is you know um and I wish I had a lot more of that and so that was like I said I'm going how do I build on that um you know we shall allow our intuition to guide us and I think that's uh I think we all end up doing that a lot when we're writing code and so I wanted to delve into that more so as I turned around and Googled intuition of course I ended up seeing this little graph and it's small for a reason and so you know being Google and being a developer does anybody get this reference the squirrel is this more of an americ thing it's like we say squirrel and oh look at that it's shiny so I clicked on the graph and I'm like okay so intuition is going all the way back to the 1800s which I figured but then I'm like I noticed there's at least three points on this graph that are kind of tall so I'm started going well when was intuition used and so we'll start with 1877 and so if you Google intuition for 1877 it came up with several points but intuition is that function of intelligence by which an object presented by the Mind itself is apprehended so like I was saying that aha moment you turn around you look at something and and you see it and it just you know you know that's what it is right um but then I'm like how did we get that many hits for 1877 and as it turns out I found you know as I followed down this chain William David Ross um father of institutional or intuitionism which I didn't know was actually a thing uh he talks about the fact of you know knowing something in the same way his particular view is more of a moral sense um but the part that I found interesting about this quote was the non-empirical or priori knowledge you know that idea that you didn't have prior knowledge about it and I I don't know that I agree with that because intuition is something that's built on I think based on our experiences but it was still uh you know an interesting point and evidently his uh particular book that he wrote did have intuition listed 741 times out of 641 pages so I think for 1877 he probably you know was one of the first people that ever Google stuffed keywords you know but now this is much earlier but since I'm in Germany Emanuel Kant um the mere form of intuition without substance is in in itself No Object but merely formal condition of an object as phenomena as pure space and pure time um how many of you love templates oh okay a few a few that's fair to me this was like trying to parse a template error as I heard that I'm like okay um but then he had thoughts without content or void intuition without Concepts as blind and I mean that's kind of deep um and but I was good with that but his favorite quote that he had that I took which really doesn't have much to do with intuition is rules for happiness something to do someone to love and something to hope for so I just had to throw that in there so we go up to 1967 our next point on the graph so Googling intuition there uh the major role of intuition is to provide a conceptual Foundation that suggests Direction which new research research should take um Raymond L Wilder so if I replace the word research with debugging that's probably what I spend most of my day doing um and so I I I thought that that pointed well to it uh Raymond Wilder uh also talks about the fact of the role of intuition in research is to provide an educated guess and I think that's an important part too because there's a lot of times when we're going through our code and we think well I think it's this and so you know you'll kind of work your way down that path and see where that ends up leading to and I that's the part I really liked about the quote was it's like progress can be cannot be made without it and even a false guess may lead to progress right even when we get it wrong we still get something right and and I can appreciate that so he also had intuition is used by modern mathematics mean the accumulation of attitudes including beliefs and uh opinions derived from experience both individual and cultural so the particular paper that Raymond Wilder had here you know did get more into mathematician and or into mathema itics and I thought that was interesting because it's CPP conon I want to say in 2018 and I was trying to look up the particular talk um I saw a talk where the speaker actually looked at methods and as you can see we're going to use contrived examples in this talk um but they looked at methods by the way of mathematical and so if we look at this method mathematically a bite's going to be how many possible combinations I mean one bite anyone 256 bits right okay am I wrong am I missing it okay um yeah if I have something wrong you can correct me I'm I'm all game for that uh so if a is 256 bits or possibilities and we multiply that by B we have a possible set of 65,536 this isn't really intuition though right right this is more reasoning we reason about the code and there's a lot of code I think that you know that's one of the big things at least when I'm writing code you have to read it reason about it in the case of the quiz last night there was not much that I was reasoning about but so reasoning but not necessarily intuition so you know we're we're we're to my final end where I was running off on my tangent on intuition and you know intuition for 2009 19 I mean with the amount of hits that's there it's like intuition is now the new in thing um but evidently it's only the in thing for red wine so you know and that doesn't really help us much for our code maybe okay so the key points I want to take away from the intuition is that you know it's a function of the intelligence uh intuition is theological view that some moral truths can be known without logical inference uh the roll into tion in research is to provide the educated guest which may prove to be true or false and of course the rules for happiness I think are just good rules for happiness so when I was getting ready to do the talk I had asked colleagues to send me screenshots of their particular development environments and the one thing I thought was interesting is at least at least all of the people that I work with everybody likes dark backgrounds is that the same here is there anybody that uses light oh okay all right I I'm learning um so you know we're doing intuition and then we're talking about tools and I think in general um we all use a lot of different interfaces um multiple os's you know I had everybody from Linux and windows and you know MacIntosh and and windows on MacIntosh and windows on Linux and Linux on you know how that all goes with our virtual machines um um so but we all use a lot of common tools there's you know a whole handful of editors that we use uh compilers and such and really the thing is is that I think when it comes down to it we all end up at the same problems so we can turn around and spend some time going through some of those problems so just to give an overview of some of the you know different interfaces C lion Visual Studio code is anybody familiar with the red C C++ logo there oh that makes me happy so that C++ Builder I it was I I liked it at one point in time but they use a version of this STL that is supposedly version 11 compatible we'll leave it at that um but then we have our compilers right so Intel clay uh Microsoft's compiler C++ Builder GCC um and static analyzers so clang tidy um or clang D if you're using clang D now uh PBS studio uh reshaper or excuse me resharper C++ check um sonar Source you'll notice I have sonar Source logo down in the bottom I just happen to like sonar Source uh I'll I have a slide in here later while show some comparisons but the tool for their lter works well with uh with our work that we do otherwise I'm not affiliated of sonor source um so of all those tools tools how well do you use them and are they doing everything that they can for you right I mean that's where I want to try to get to all right so from my experience I get three types of problems when I'm building code and writing new code um compile time syntax errors I give templates its own category I do love templates I'm just not that good at them and I'm getting better uh link time you know you're compiling something and suddenly a symbol cannot be found um I put missing libraries and versioning issues because I've experienced you know those when we uh are building such but of course you know that's where I'm siging three types of problems at least and then runtime your logical errors semantic errors uh and various other types of Errors I mean that's I think where we spend most of our time debugging things is when we're in the runtime and you're outside of this uh code being able to be analyzed so this was me in the 90s this is Turbo C++ and I you know I wanted to show this because if you're um new to programming then when you get an error at least for me when I was younger and even now still you you can kind of see um and sorry for the red there but you'll notice that I got the cursor there by the semicolon in our method and so you know I'm going to do the simplest error we have which is to remove a semicolon now back in the 90s if you removed a semicolon and this is all in one file if you actually had a semicolon removed in a file that was included in a file that was included then this list went even longer but basically missing one semicolon from an old compiler and suddenly every line of code you have was wrong in some way and yeah my younger me this this was a little bit you know uh really where am I going to start um fortunately we've gotten better um and if I put this on my coling back in you know of course it it does build and run if anybody wants to run turbo C3 uh on your windows box you can actually download it I did it just for this I don't think I'll open it again you know just saying um but that's what it was like to codee in the 90s at least for me and so we'll look at something newer so you'll notice I'm going to I'm just I'm guessing if you're in the back does the Font come out all right okay so we're going to look at the same kind of an error you can see I'm already missing the semicolon um you'll notice that I have the compiler Explorer logo so later on you'll be able to get a QR code if you do want to download the PowerPoint slides I did try to make sure to link everything with compile Explorer so you can actually look at the code samples but the thing we're going to go through over the next few minutes well next half hour probably is different compile different compilers and options and what it ends up giving us back because again my thought was how did I build an intuition for when a bug happens and you know from where I started back there with C++ in the 99s um our error messages have gotten better but it all depends upon what you're using and what version you might be on uh the job that I work at when I first started there we were still stuck on C++ 11 with you know CL or with GCC 4 at the time um and so in this case here if we compile this particular uh code with GCC 4 you know we get the fact that we're missing a a semicolon and that it needs to be before the return okay so if I didn't do C++ in college and I decide to put it before the return right I can do that and it does work right I mean that's you know and so that was GCC 4 of course now if we even take clang so clang so clang three this is an old version of clang right and so one of the things I was always told was that cang when it first came out uh was being built a lot for its tooling and and so if you take that same code it at least gives you hey you you don't want to just put it in front of the return you actually want to put it at the end of the line and so I get this is you know this is where I'm like they are kind of contrived examples but my bigger point is that the tools that we pick matter you know and and what you end up doing with the tool can get you more information so when you're starting off learning to develop in C++ um you want to use the best tools you can get and and best might be a little bit of a loaded statement but uh I think you understand what I'm saying go with the newer tools if you do the same thing uh in clang 17 you know now they'll actually give you the line numbers and some nice layout and so again these are small examples because I was trying to make sure we could fit things onto slides too um but I think I think you see the point where we're getting there and GCC has actually gotten better um if you're using a modern version of GCC you get roughly the same and I think that's also interesting because clang and GCC seem to have started to catch up with each other um from their output so uh Jason Turner has his uh hello world and and I heard someone say it's the most complicated hello world that they've ever seen so um um this is using features oh sorry about that this is using features of C++ 14 so if we try to compile it in clang uh we end up getting an error uh because of an expected expression even using an old compiler if you make sure that you're using your compiler options though then you know it compiles and works well so that covers our basic syntax errors we'll we'll leave it that where that's at and we'll move along to templates and so I'd asked this question before some of you really love templates um actually we should all love templates right because if you use any standard Library you're using the templates and I don't necessarily write as many templates but I use the template uh Library a lot so so template errors um can anybody does does anybody see what the error is going to be in this yeah a couple okay all right so the point I want to make make is there is a very small error but that's that's the start of it and it actually um yeah it it goes on for about 300 lines so so this was why I never lik templates and actually the company where I work at for some of the people that originally you know okay for an old guy like me when I started when we didn't have templates um I always wanted to avoid templates because I would get an error like this and I would probably turn whiter than I already am you know like oh no what am I going to do um but how do we break down you know what's going on with an error that's like this and so this is with GCC 49 uh you know we're I I left as as I'm adding compiler options they will mostly stay in because I just want to keep showing that you know you want to make sure you're using the right options uh when you're compiling code so if we take clay trunk and we compile that same code though it's still going to give an error but now we actually have something of value right because here we're you know as I'm reading through this it's like okay invalid operan in binary expression so that's still I mean it's better than what the other one was right so out of curiosity does anybody know where we're using a binary expression in those three lines of code yeah yeah so when we're doing the compare you have a binary expression of course because you're looking for the equals and as it's pointing out the values don't match and if we look there it even tells us that the stood Vector int and constant are the two that don't match right and so compiler errors if you're actually using a more modern compiler you can get better output and thereby make it easier to fix so all of you use wall yeah okay I see do all of you use wall no no okay it's I A lot of people do that's all right um I I didn't for the longest time when I first started our company um you know we were not the warnings and errors are all on all the time and so uh but with template errors it's helpful so if we do the same code again and look at it well that just proved oh that just proved me wrong we get the same looking error there sorry there I have an error in a slide but if we look at so sorry I have a duplicate slide there I apologize but with wall we actually now get you know an even more the variable a is uninitialized first so because we're doing wall we're getting all the warnings and so yes it is uninitialize but it's also telling us on line seven that the stood find is where the bulk of our problem is at um and so this is why you want to be using all of your compiler options because that error that that you know was so scary to me before this actually gives the compiler does so much more work for us now than it ever used to and but if you're not actually turning these things on then you're not going to know and it help have the compiler help you I guess is more to my point and so as that points out there you know it actually tells us that exactly what the invalid expr ression is and so we have clear detail of what's going on there and so yeah if we turn it into a stood Vector now of course that a compiles fine and and the problem is solved so template errors are template errors don't have to be so scary if you use the tools that you have then you will be um you'll be thinking yourself and and and when you're doing stuff just in the standard library because that's my point it's like if I actually write a template then I create far more errors than you know even what the template Library there does um but the compiler can make all the difference that way all right so everyone should wall wxtra and pantic um the amount of options that the compilers have is just huge I I think the it's probably 10 12 pages of options um and so that link there is the link to the actual warnings for trunk um but for me wall wxtra and pantic there is um you know the always have your warnings become errors when we're doing something in production I absolutely do that I think it's a good thing to do um but even if everybody just uses a couple of these you know my goal is to help you improve your code that little bit and so even if the first step is just adding wall um pendan does C++ uh the compiler extensions um and so pantic we end up using it if you're ending up moving your code between different systems then pendan can help make sure that you're not using an extension on one system that is not available on the other um so I have it listed there it's uh your mileage may vary and so I was reading a C++ Reddit where somebody's like you know what compile options should you end up having and they were saying in fact everyone should go to this particular best practices so Jason Turner you know as I pointed out he has that nice um obus skated hello world he also has a best practices where he goes through and lists the different uh compiler options to use uh this particular site also has some cmake setups and such like that so if you haven't done a lot of cmake projects and you need boiler plates um that is definitely a good place to check out boy I'm everything that I had hidden is suddenly showing up um so if has anyone seen this talk I know Phil has so I picked out so Bryce Bryce leachi works for NVIDIA and he's uh he did a talk that's AI assisted software engineering and I'm I'm putting this slide in here specifically one Bryce is actually pointing asking him to turn down the lights but I like this particular shot in the slide because I'm like Bryce is pointing to the Future so they have a project called Cy so talking about templates um for AI assisted software how many of you like co-pilot how well has it worked for you yeah that's what that's what so so I do recommend you go see you you uh watch this talk um because at the same time how many of you get your code right the first time right so that's kind of his point we want AI to be right the first time but yet you know we seldom do but the reason I wanted to put this in here is they uh him and a couple other people worked on a tool called Cy and Cy will take the output from the compiler and help you figure out what went wrong and it can even go into the fact of being used inside of a cicd chain and actually SE suggest patches and such like that um so if you want more um exciting ways to work with your uh templates and your errors that you're getting out uh I would say check out that project all right so syntax errors templates we've got those couple covered let's move on to linkers so linking errors missing libraries versioning and basically cannot find symbols um how many of you get that part when you're compiling something and you know so let me just go with the example first so link or errors so again a contrived example but it's going to give us the part that we want to see um you know so we have a struck it's got a pure virtual Destructor we have another one that is inheriting uh inheriting from it you have an X turn for X there a void Fu um when that gets compiled in an old version of GCC it actually works it compiles clean it doesn't really run I mean and obviously this isn't doing anything but the point I'm trying to make is that you're using an older compiler and and it actually compiles and links if you end up using a new compiler with all of our fun stuff turned on though you're going to get a different output and so you end up getting the fact that you have undefined references okay so do all of you understand an undefined reference do you well how many people from M hands get have have and dealt with and have an easy time with undefined references okay so an undefined reference so when we're building code um and there's some great talks that are about how the compiler Works uh you have two stages right you have the compiler that does its compiling of the code to make sure that it is syntactically correct and creates an object file but then what ends up happening is the compiler will take each of those object files and link them together so if it can't find something then that's where we get an undefined reference error so basically an undefined reference error is saying hey you know I know you're telling me to call this function but I can't find a definition for it and even when something's in the same file that can happen because in this case here x is marked X turn right so we're not actually defining X we're just saying that X is an external variable so so it'll still compile clean but it actually can't find X um and similarly with fu fu we have a um not a definition for it but a declaration for it and so this is meant to be able to show the fact that if you turn around and have you know um have you ever had a parameter off when you're you know you have two files you have a parameter missing in one and so when it goes to link it might compile fine but but you end up getting the compiler error how do you solve these you know for me I end up having to turn around and walk through you know the particular lines of code kind of like we just did and say okay so if the file is saying that it can't find it you know what is it trying to link to what file is not being included this is actually you know you know in hindsight as I'm talking about this is kind of a bad example but normally when I'm getting errors like this uh I did a project uh in my last talk um where we're doing lib HTTP and Json and I was building it on the Mac and so if you turned on https on the Mac um it's kind of complicated when building it it wants a specific version of the SSL library and so when we get errors like this sometimes the best thing that you're going to end up doing is falling down the Rabb and starting to dig through and and ask questions you know whether you're searching for the particular era directly on Google I mean how many people spend hours on Google copying and pasting an error and to see what they can find yeah but what does that end up doing when we end up figuring it out that ends up building that experience and so then the next time you get it it's not quite as bad and like you know so I'm trying to pull this part together that's where I'm like we're trying to build an intuition over time and and unfortunately as much as we want to have that intuition just hit us and happen you know like always be able to see what the answer is and no um sometimes it's just the fact of the struggling through it so with playing we get a little bit more detailed information but it's still the same part and it fails with an exit um the undefined references again when you have that then you know that you've you're just you're missing a particular method it needs to be able to uh be called all right so link time errors I don't run into the I do many of you run into link time errors more or your um compile time errors compile time all right what about runtime nothing happens at runtime right I mean it runs on my machine so runtime errors what the compiler doesn't catch um so I have logical errors and semantic errors and we're going to look at an example that's a semantic first and but all of these particular types of Errors they're the harder ones because you know the code looks right it compiles the compiler is not really telling you anything uh to help you out with it um so we have this particular method here excuse me and I want to take look at it and I want to see if anybody can kind of take a a bit of reasoning about what kind of error we might get so if we compile it it compiles and runs um but the program returns zero with the product of zero so it is not actually you know getting us the product it's not multiplying through the numbers one two 3 four and five and and putting them together but why so all right well if we take clang trunk and we do the same compile with our wall and extra and all of our compiler options so product's not initialized so on one hand you know I'm saying runtime errors are hard to find but the compiler difference actually pulled that out for us right and so you know when you're first learning some of those errors can be caught because the compiler you know the compilers have gotten smarter they can turn around and say Hey you know this particular item needs to be initialized or this isn't being used so the best way that I found to find runtime errors is test cases anybody here use catch so yeah Phil uses catch um so these are actually test cases that I have from uh this is actually test code that I do have from work uh because we use a lot of binary coded decimal um in Visa transactions and so I do find it easier when I'm getting something that is not actually producing the result that I want to for me it's easier to debug this small test case than it is to necessarily debug the app right now unlike Phil I have not fully mastered the part of test driven development so I do end up writing a lot more code and then we write test cases after and and I do need to improve on that um but when you have an error that is you know you're having a hard time reproducing I think one of the best things that we can end up doing is turning around and using a test harness such as catch to be able to turn around and go in and write a specific test case so that then you can look at each one of your particular methods and make sure it's at least returning the result you want um I don't have it included in this slide but you know I started off with these particular ones because when you do binary coded decimal we're actually you know taking uh two decimal numbers and compressing it down to one bite and so that's what this is uh code is testing for but then we also turned around and created a method that randomized the amount of numbers that were being passed in and did a bit more fun and the more advanced tests you generate we actually found multiple errors in our original algorithm because you ended up hitting edge cases you know and it's always easy to test for the one known case but the edge cases end up becoming harder to find unless you you know start throwing in random data um and interestingly enough how many of you actually saw Phil's talk okay so for Phil that was half the room so you if you haven't seen the talk you want to watch the talk it's it's really good but catch 2 has a lot of great features including a generator feature which then allows you to uh build that particular data out and it can help help you find those test cases those edge cases so those are our three kinds of Errors um you know that I've I've found and had to work with and and build against compile time link time runtime and I wanted to turn around and you know it's kind of funny I'm I'm looking at the clock now and I'm running really short or really long on time but then at the same time when I was going through and practicing I was going slower so I'm obviously speaking and and moving faster but so static analyzers how many of you use a static analyzer with your code okay so which is your favorite if you might if just clang clang D clang tidy how many are actually using clang D I'm curious specifically so if you use clang tidy um and as I understand cang D will work with uh all kinds of other editors uh the envm that was shown as the idees were popping in I like Vim but you know I I use a mouse I'm I'm happy with a mouse um but clang D will actually give you these kinds of Errors live right in your code as you're you know moving your mouse over the top of a piece of code it'll tell you when something is wrong before you ever have to hit compile um clang tidy I think does a great job as well but the thing that I wanted to show here which I thought was interesting is that don't just use one because you know I actually use the sonar linter and clang D at the same time and as we're looking here there's actually you know there are some things that uh cang D and sonar pick up on the same way and maybe they talk about them a little different but then there's a lot of things that um sonar picks up on that cang D doesn't and I you know my uh my intuition on it is that you know and not actually just intuition but understanding how sonar Works they're actually trying you know that's their their SL is clean your code or you know if I believe it's along that lines and and so that's actually what they're doing is they're you know pointing out areas of code that should be cleaned up and all of these can be uh everything's configurable right at least for us our clay tidy there's a lot of things that we turn off um I do understand the point of you don't want too much noise but I think when we're learning I'd rather have a false positive than you know than missing something that is an absolute negative right so so our compilers matter um clang you know as I've kind of showed in a few of those examples generally does a good job at reporting um we use both compilers every day and work if I build something in GCC I also then turn around and build it in cang because cang will actually give me different uh results and error messages than what GCC does um you use the newest compiler that you can uh we're still stuck to uh C++ 17 where I work but we still use the latest and we just turn around and put the standard line in so that we make sure we're not using something that we're not supposed to and that we're being compliant with the code that we're supposed to write um and even older compilers as I was showing when we were going and you added the stood 14 you know if you're stuck on an older compiler then you know again use your command line arguments so you can say hey this is the standard I'm trying to be at um and so add your compiler options um when I started and put together the abstract for this talk I had planned on doing more with Microsoft Visual Studio how many Visual Studio developers do we have wow okay well I greatly apologize um I think when it comes down to the error messages and stuff we see a lot of the same things but I will say you know so uh in my previous position I used visual studio and MFC a lot um I don't miss MFC I I will say that but Visual Studio you know has some great I I love Visual Studio I really do I just don't end up using it every day um but some of the same things that we're talking about you know it's like the compiler options they're named differently but they're all there and at the same time you know if you're using visual Studio A lot of these things they're just on by default you know I think Microsoft does a good job even with their static analys and tools and they have it wrapped in well incidentally I will say there's one thing that I miss when I'm on Linux and with any ID IDE that I've seen in Linux um the wonderful thing you can do in Visual Studio you know if you're going through and doing debugging and you have a stood string you can actually change that string while you're running right which is not something you can actually do inside any of the uh GCC or clang so you can change numbers you can change you know other variable types but stood string is one of those ones that you can view but you can't go through and change um and so I talked and to you know see line if if somebody wants to fix that I will I will change I will change my editor that's for sure all right so this quote from Albert Einstein I really like it's not that I'm so smart it's just that I stay with problems longer um you know I can think of days where I've spent literally days looking at one particular error trying to figure it out and you know writing one small test case or writing another piece or pulling out a piece of sample code because you're just trying to dig through it uh hours on the internet um and so every time that we end up building through and and sitting through those things though we all learn that little bit more which makes the next bug that much easier to get through so uh I gotta i w you know I pluged Jason Turner a few times here because um I do think that he does a really good job um if you haven't seen his uh CPP weekly he does some great job at going through and explaining various features you know whether it's a compiler feature code reviews basic projects to start off um for the half the room that's doing uh Microsoft Visual Studio you you know it is standard C++ but he is a bit more on the side of of the Linux and compilers such there um and so yeah we can all work on building our intuition use every resource you can and if you have any questions let me know um so I talks are not always my thing uh as that hasn't shown up as being obvious however um I work as a I I'm speaker liaison at cppcon and I do volunteering for these other ones uh the QR code there is just a link to the slides if you end up wanting to um get any of the links in there if you are interested in any of these other conferences uh whether volunteering or you want to submit a talk by all means let me know I I will say the one thing that's great about submitting a talk it's it is nervous depending upon if you like to speak or not getting up here but even kevn was saying you know the way that he ends up learning something or learning more about something is to give a talk on it because you know where you start in a talk and sometimes where you end up it's surprising and then you know in hindsight I still have a whole bunch more slides that I was working down to be able to add here but you're trying to figure out what content you can fit in so give a talk thank you [Applause] and we have plenty of time if anybody does have questions um by all means hi thanks a lot uh one thing I'd like to add regarding template error messages do you know about Kem Miller script from Victoria Romeo no I do not this script can greatly collapse template error messages into readable types again so it will will de expand something like basic string of char of char trades back to an STD string ah okay and will just put basically get rid of 90% of all this mess that the compiler outputs that's excellent I will make sure to get a look at that and if I end up doing the talk again I'll make sure to add a slide for it too thank you so uh we got an online question here what is the difference between clang tidy and clang D from the name of it I guess both would be llvm and free yes so both are llvm and free the difference is clang tidy um clang tidy you run separately so a lot of the code editors like Visual Studio code uh before we started using clang D you could turn around and set up a build job so that it would run clang tidy and it would give you that same output um let me just scroll back here to this slide one second um so this output here is what clang tidy would end up doing and you can see it marked there you know cang tidy found a particular thing on line 85 column 11 clang D is fully built into the interface like intellisense I'll say on steroids because and you know I haven't used intellisense inside visual studio um as much anym cuz like I said I'm not in Visual Studio but at least with Visual Studio code uh intellisense is nice and it'll help you find you know a particular function or method but clang D basically gives you clang tidy live all the time so if you type something wrong it's going to turn around and tell you right there and then uh in a popup box at least in Visual Studio code that this is exactly the error that you're having so clang D is interactive clang tidy is a run and get result that's probably the way I'd explain it anything else all right thank you