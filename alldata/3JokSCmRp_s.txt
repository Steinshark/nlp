why is everyone in such a rush hey teach yourself programming in 10 years easy simple straight to the point walk into any bookstore and you'll see how to teach yourself Java in 24 hours alongside endless variations offering to teach C squeal Ruby algorithms and so on in a few days or hours the Amazon advanced search for a title teach yourself hours since 2000 I found 500 yeah and 12 such books what are the chances we have a bunch of computer books teaching you about computers and there's two two to the nine of them I mean it's like it's meant to be it's meant to be of the top ten and nine are programming books the other is an uh is about bookkeeping oh never mind similar results come from replacing teach yourself with learn or hours or days okay so hey by the way as someone who struggled to learn their first programming language I always felt stupid because it was always just like it's so simple just do this and then I never felt that I just I just felt simple afterwards you know what I mean like I felt like the simple one and it just made me feel horrible about myself you know what I mean I I struggled to learn programming the first time I genuinely struggled to learn programming the first time the conclusion is that either people are in a big rush to learn about programming or that programming is somehow fabulously easier to learn than anything else uh give a nod to this trend in their book how to design programs where they say bad programming is easy idiots can learn uh it in 21 days even if they are dummies well I mean that's what an idiot is it's kind of a redundant statement even idiots can learn it if they're a dummy the OB truce obtrus Goose comic also had their take let's analyze what the title teach yourself C plus in 24 hours could mean teach yourself in 24 hours you won't have time to write several significant programs and learn from your successes and failures with them you won't have time to work with an experienced programmer to unders I forgot that turn off alerts every time uh you won't have time to work with an experienced programmer and understand what it is like to live in a c plus environment oh hell you mean um in short you won't have time to learn much so the book can only be talking about superficial familiarity not deep understanding as Alexander Pope said a little learning is a dangerous thing dummies are like newbies idiots are something else whose meaning evolved over time yes this is true replace h and y I'm not no I don't play that game C plus plus in 24 hours you might be able to learn some of the syntax of C plus plus if you already know another language but you couldn't learn as much about how to use the language in short if you were say a basic programmer you could learn to write such programs in the style of basic using C plus syntax but you couldn't learn what C plus is actually good or and bad for so what's the point Alan Perlis once said a language that doesn't affect the way you think about programming is not worth knowing oh that's a great statement that's a good statement Mark that one in your books boys and girls it's a good one right there it's a good one that is a good take um one possible point is that you have to learn a tiny bit of C plus or more likely something like JavaScript or pre-processing I don't know what that is I don't know what pre-processing is because you need to interface with an existing tool to accomplish a specific task but then you're not learning how to program you're learning how to accomplish that specific task yes in 24 hours unfortunately this is not enough as the next section shows okay here we go teach yourself programming 10 years I'm actually kind of I'm actually kind of excited about this and yes JavaScript does destroy your brain because it takes away a lot of basic programming fundamentals and replaces it with ease which is a good thing right there's plenty of good reasons to like JavaScript but there's plenty of bad reasons about JavaScript as well um so this is actually really exciting I'm actually curious what this all means right researchers have shown it takes about 10 years to develop expertise in any of the wide variety of areas including chess playing music composition Telegraph operation painting piano playing swimming tennis and research in near uh neuropsychology and topology the key is deliberative practice yeah not just doing it let's see not just doing it again and again but challenging yourself with the task that is just beyond your current ability trying it analyzing your performance while and after doing it and correcting any mistake then repeat and repeat again and let's see there appears to be no real shortcuts even Mozart who was musically a prodigy at the age of four took 13 more years before he began to produce world-class music in another genre The Beatles seems to burst onto the scene with uh a string of number one hits and appearance on the Ed Sullivan Show in 1964 but they had been a playing small clubs in Liverpool and Hamburg since 1957 and while they had Mass Appeal early on their first great critical success Sergeant Pepper's Lonely Hearts Club Band was released in 1967 after everybody got done burning their CDs publicly and they did one of the first musical breakdowns in pop music ever with Lucy in the Sky with Diamonds beautiful beautiful album right there if you haven't listened to it if you haven't taken the time it's a good album it's a good album okay um no but this is actually really interesting because this is just one of those things like I feel like programming is not looked at like any other activity do you know what I mean a lot of people look at programming like it's some sort of job you go in you go out you got to learn some Basics and that's that whereas like if you look at it as more of like an activity like if you're trying to get good at golf if you're trying to get good at something you don't just go and do it right that's how you know you don't get any better right you don't you you have to be intentional about it right you have to actually engage in the theory of it to become better about it and so I think it's really interesting that that this exists this whole 10 years thing I think it's also kind of interesting that you need about 10 years to become an expert in it which is totally buyable but to become very practically good at something you probably need like what four years to become good right and you don't need to be the best right you don't need to be a world-class expert and that's something that you know I've been trying to drive home as well which is you have to choose how good you want to be at something and so there is definitely a a plateau but the but what I see a lot especially with programming is people get good then they hit the plateau they're good and then they just ride their Laurels all the way to the end to where they're no longer good and they're kind of just committing crap right and you see this all the time it's because there's like this weird sense with programming that's just different than other sports because there's not like a direct measurement you can't just look at a singular day's worth of work and be like oh he's a good or bad programmer no instead you'd be like well that's code this is this is great code okay you know how many days do you have code versus how many days do you have good code uh like other sports exactly like other Sports Programming classic sport I I fear to call it a sport but it it does share Akin a lot of uh sports or music like things where it requires consistent practice to become good at it right a skill uh MMR there's an MMR somewhere in there there's some hidden MMR right you have to stay sharp yeah let's see Malcolm Gladwell has popularized the idea although he concentrates on Ten Thousand hours not 10 years I actually prefer 10 000 hours because there is a shortcut to 10 years just the shortcuts ten thousand hours that's just full time for five years that's all it is full time five years you got it right um Henry uh 1908 to 2004 had another metric your first 10 000 photographs are your worst he didn't anticipate that with digital cameras some people can reach that Mark in a week true expertise may take a lifetime Samuel Johnson wow he's like citing everything here said excellence in any Department can be obtained only by the labor of a lifetime it is not to be purchased at the Lesser at a lesser price oh oh oh Samuel mule that is such a good quote oh my goodness I don't know how to say this person's name uh complained the life is so short the craft so long to learn this guy reads this guy reads uh let's see uh let's see oh which is part of a longer quotation ours longer invite the bravest Ocasio precepts experimentum pre Colosseum indexium which in English renders life is short the craft is long opportunities fleeting experiment treacherous judgment difficult wow I'm sorry but I love these clothes these are beautiful okay these are beautiful quotes that sound like Harry Potter I just did a little Harry Potter not a big deal what a big not a big deal NBD uh of course no single number can be the final answer it doesn't seem reasonable to assume that all skills IG our EG programming chess playing uh Checkers playing and music playing could all be recorded exact exactly the same amount of time to master nor that all people will take exactly the same amount of time as Professor K Anders Erickson puts it in most domains it's remarkable how much time even the most talented individuals need in order to reach the highest levels of performance the 10 000 hour number just gives you a sense that we're taking years of 10 to 20 hours a week which uh which those who uh who some people would argue are the most innately talented individuals still need to get to the highest level this is great this is a great article so far I'm actually loving this article I don't know about you guys but I love reading any article that makes me feel smarter than I am this article is doing it okay loving it uh here's my recipe for programming success get interested in a program in programming to do some uh because it's fun make sure that it keeps being enough fun so that you'll be willing to put in your 10-year slash 10 000 hours is this not my mantra is this not my mantra right here is this not it uh program the best kind of learning is learning by doing yes I like to say the phrase learn with your hands now with your eyes uh to put it more technically the maximum level of performance for individuals in a given domain is not attained automatically as a function of extended experience but the level of performance can be increased even by highly experienced individuals as a result of deliberate efforts to improve let's go where can I find that article I'll link it I'll link it uh and the most effective learning requires a well-defined task with an appropriate difficulty level for the particular individual informative feedback and opportunities for repetition and correctness of errors or correction of Errors so when it comes to programming this is actually a really difficult one so like reading this one specifically informative feedback and correction of Errors is really hard in programming because how do you know you're doing the wrong thing how do you know that what you built is bad that that's it's a it's a great it's a great thing to think about one thing that for me how I kind of measure my success in programming is I will build something as fast I can purely on a gut feel right like I purely go on a gut field and I'll build out something and then I will change some of the requirements and see just how well does my program expand did I write things in a sense that just makes it easier to expand or did I write them in some kind of way that's more spaghetti-like right uh and so I find that that's usually where I really know if my ideas were good or bad and sometimes the ideas are mostly good it's just a little bit of bad right how hard is it to refactor exactly so unfortunately a lot of these things when it comes to program their rear view mirror feedback mechanisms so you can only know that you've done something good or bad by coming back to it later on and having to do something different to it right that's like and so that I find that to be very very hard it's a very hard thing to measure uh talk with other programmers read other programs by the way you guys are so smart I want to let everyone know right here Grizzly how you doing but do you have to get uh do you have a good gut you gotta have a good gut you should you should learn how to develop good gut but real talk you people the reason why I don't have much of a problem recommending people from twitch to companies is because you guys are living the culture right you're engaging with it you're actually doing something uh there's so many people that no I don't think you're smart I think you're a bunch of degenerate but here's the deal you guys also uh thank you bash buddy but I I don't bash money you're not an you're great uh everybody else um but it's real talk like you guys are interested in programming at more than a superficial level and I think that's a really really really amazing thing right it's hard to find people that want to engage sometimes I feel fine about my abilities but then today I'm doing something that requires some basic math and I'm like I'll figure it out later off to Twitch with me yeah you know that happens to me too sometimes because I I think one of the big things with that whenever you find yourself becoming super distracted from something it's likely because you aren't you're doing something in which you're genuinely disinterested in and you know there's this phrase that I like to kind of think about which is the most senior engineer can do the most Junior task and what I mean by that is that a really strong senior engineer even when the task is tedious can make Ford progress over and over and over again because they're willing to put in the time and effort to make it good and that is a very hard thing to do because I find that when I was younger I was really only good at doing senior tasks right I was only good at doing tasks that were exciting the moment I had to do something that's not exciting it's like I fell apart right I'd find myself super distracted super incapable of doing things and so I've kind of always held that Mantra inside my head which is I have to be able to be engaged on the little things as much as the big things and that is a very important kind of you know metric at least my head is true it's such a small niche of people who spend their free time hanging out with other coders and talking about code it's really it is and it it really the thing is is that for every year you do this you've effectively made your career go twice as fast um that's kind of how I think about it man this is giving me feels yeah I'm trying to give you some good stuff here okay I'm trying sorry I'm all sudden I'm getting a little bit more philosophical all of a sudden because we're reading such a great article uh um you know what I mean let's see if you want uh put in uh four years at college or more at graduate school this will give you access to some jobs that require credentials and it will give you a deeper understanding of the field but if you don't enjoy school you can let's say you can with some dedication get similar experience on your own or on the job in any case a book learning alone won't be enough Computer Science Education cannot make anybody an expert programmer any more than studying bushes and pigment can make somebody an expert painter love it uh Eric Raymond author of the new uh the new hackers dictionary one of the best programmers I have ever hired had only a high school degree and he's produced a lot of great software has his own News Group and made enough in stocked options to buy his own nightclub okay interesting choice what are you gonna do with that money nightclub um okay okay okay okay okay uh work on let's see work on projects with others programmers this is a huge awesome thing be the best programmer on some project to be the worst on some others when you're the best you get to test your abilities to lead a project and to inspire others with your vision when you are the worst you learn what the Masters do and you learn what they do not don't like to do because they make you do it for them work on projects after other programmers understand a program written by someone else see what it takes to understand and fix it when the original programmers are not around think about how to design your programs to make them easier for you those who will maintain them after you interesting great advice I love this advice learn at least a half dozen programming languages love this advice include one language that emphasizes collapse abstractions like Java or C plus one that emphasizes functional abstractions like list for ML or Haskell or ocamel one that supports syntactic abstraction like lisp I've always wanted to try that but I also don't know if I have enough time to try it one that supports declarative statements uh or specifications like prologue or C plus plus templates and one that emphasize parallelism like closure or go remember notice that he didn't say JavaScript no JavaScript in there get owned get owned JavaScript remember that uh that there is a computer in computer science know how long it takes your computer to execute an instruction fetch a word from memory with or without a cache Miss read consecutive words from a disk and seek a new location on disk answers here get involved in language standardization effort it could be the NCC plus committee or it could be deciding if your own uh your local coding style will have two or four space annotation levels either way you learn about what other people like in a language How Deeply they feel so and perhaps even little about why they feel so dude this is actually really hilarious my team still does not have a c plus style like there's no clang D4 matter you can't cling Deez Nuts at all you know why because nobody is willing to agree not a single damn person will agree on what it should be and so we're just forever stuck with every piece of C plus code is its own bespoke coding style it's hilarious okay and they're like that's real that's what the professional world looks like it looks nothing like what you get in these little tiny these projects the famous uh Netflix uh autonomy yeah no SP spinning yeah dude it's crazy three space indent you could do that this song is a banger absolutely have the good sense to get off the language standardization effort as quickly as possible love it I love this conflicting advice because this is so true you gotta jump in there you gotta you gotta make some things you know happen but at the same time you gotta also know when to get off uh with all that in mind it's questionable how far you can get uh just by book learning before my first child was born I read all the how-to books and still felt clueless like a clueless novice 30 months later when my second child was due did I go back to the books for a refresher no instead I relied on my personal experience which turned out to be far more useful and reassuring to me than a thousand pages of written by experts yes yes Fred Brooks in his essay no Silver Bullet identified three parts plan for finding great software designers uh systematically identify top designers as early as possible assign a career mentor to be responsible for the development of the of the Prospect and carefully keep a career file provide opportunities for growing designers to interact and stimulate each other I don't get that last one I don't get that last one I think I get that last one anyways uh this assumes that some people already have the qualities necessary for bringing a great designer the job is properly uh coax them along uh Alan put it more succinctly everyone can be taught to sculpt Michelangelo would uh he would have had to be taught how not to so it is with a great so is it with great programmers interesting I wonder if that's true I'd have to think about that for a second uh perilous is a saying that the greats have some internal quality that transcends their training but where does the quality come from is it innate or do they develop it through diligence as uh Augustus the uh fictional Chef in a Ratatouille I don't know how to say his name uh puts it anyone can cook but only the Fearless can be great I think of it more like a willingness to devote a large portion of one's life to deliberately deliberative practice but maybe Fearless is a way to summarize that or as critic Anton ego says not everyone can become a great artist but a great artist can uh can come from anywhere hmm Gustavo let's see so go ahead and buy that Java Ruby JavaScript PHP book you'll probably get some use out of it but you won't change your life it's actually a really good point it's it's actually a super good point the reason why this book is good is because this is a zero zero to production and rust it gives you a nice little guideline right it gives you kind of like some guide rails to get somewhere but until you take until you get until you take that guideline and you make your own path it's not worth a lot you know what I mean it's not worth a lot at all and because a lot of this comes from the fact that when you go through the book it does all the right things and if you're anything like me you don't do the right things real talk you don't do the right things you do the wrong things and you do them over and over and over again right and like that's totally normal and that's totally okay and so that's why I love the book because it gives you a basic guide for how to do something and then you go off and you do the wrong thing and you learn from it over and over and over again great writing love the article Peter thank you very much right it's Peter yeah Peter love the article teach yourself programming 10 years honestly we need a thousand more articles like this and we need a thousand less of those stupid Twitter influencers telling you how easy things are going to be how you're gonna get fifty thousand dollars in a year how you're going to get all these great things like you're just gonna learn how to program it and within no time you're going to be being paid six figures and it's that easy it's not easy it is a lifetime Pursuit it is it absolutely is and if you're not willing to put the lifetime in it's gonna be hard and I think there was a time period when you didn't have to put in a lot of time and I think that that time is dying and I mean that I think that it is dying very very fast uh I think that at this point there is a lot of positions open but there is a lot more people willing to put in hard ass work wow ass work ass Dash work then a lot of people are right so I hope that you guys feel that right there all right hey the name is the primogen