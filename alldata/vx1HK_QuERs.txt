if you're a beginner or even an intermediate with python then these five python Concepts can absolutely take your Python Programming to the next level if you're someone who's taking yourself seriously as a programmer one thing you should absolutely always be doing is upgrading your knowledge in your chosen programming language that language for you is python then you're in the right place because these five concepts are something that every serious python programmer should be aware of or otherwise bad things will happen to you seriously no understanding even one of the Concepts in this video could be what's holding you back from building projects that can really impress in your resumés or succeeding as a developer in a real production environment so please just learn these topics and I'm sure some of you might already know a couple of these but I guarantee you that you will walk away from this video with at least one New Concept that you can then immediately apply to your projects and become a better python programmer but before we get into that if you like my teaching style and you want to go through a full program from zero to getting hired as a python developer then I also have my full program down below which you can check out where we learn not only Python Programming but also objectoriented programming we learn web development we learn how to build projects what kind of projects to build and of course all the technical and non-technical skills you need to actually get hired in the real world even if you don't have a degree and within 6 months or less so if you're interested in that go check that down below and with that let's get into the video so the first concept we're going to talk about is something called object reference passing so this all relates to how python deals with function parameters and how things are passed into functions well imagine you have a function like this called modify list that takes in a list as a parameter then what we do is we append something to that list so Quest time what is now going to happen to that same list outside of this function is it going to be modified or is that list also going to now have that new item or not well it turns out that it is because in Python mutable objects AKA lists and dictionaries and objects that you create yourself are passed as what's called a reference so what really happens when this l list is given to this modify list function is that we simply get a reference to the place in memory where that list is stored and in my program python developer botam we go into a lot more detail about like the memory and how everything is stored but the basic idea is that every variable in Python occupies some what I call memory boxes inside of the computer's RAM and when you store variables what you're really doing is storing pointers to the places in memory where these things are stored all right so when you pass a list or a dictionary or an object to a function what you're really passing is just this reference to that place in memory where that list is actually stored so when you then modify that list inside of this function what you're actually doing is modifying the actual list that is inside of the memory and then outside of that function if you have a different reference that same place in memory it will have been modified because you're actually modifying the actual thing in the memory and this is really good to understand because in your programs you're pass things to function you might be confused as to why some of them are changing out theide of the function and some of them are not so that is object reference passing the next we have is list comprehension so list comprehension is essentially just a quick way of making a list let me show you so let's say what I want to do is take a list of numbers from 0 to 10 and I want to make another list that are the squares of all of these numbers so what I might do is go to Python and create a variable called squares which I'm going to initialize as an empty list and then what I might want to do is run a loop for I in range 10 which essentially just creates what's called a range object with numbers from zero to the number that we give it which is 10 and then what I want to do is in each iteration of the loop I'm just going to go squares append I squar which we Den know by this double multiply sign right here and this if we then go and we print squares afterwards is going to work right because the actual list of numbers will be 0 1 2 3 Etc the squares of them will be 0 1 4 which which is a square of two 9 which is a square of 3 16 which is a square of 4 etc etc etc but you might see that this is a bit ver Bose for like such a simple operation so what python actually has is a syntactic way of doing this a lot more simply which looks something like this where essentially what we're doing is without needing these three lines of code in here we simp have one line of code where we have squares and then inside of it we have a list with x² 4X in range 10 so this is essenti just a syntactic way of doing the same thing right here where what it does is it runs a loop for X in range 10 and then what happens is that it's going to create a list where every element of the list is going to be this expression right here so x² just stop the video and make sure you understand what this is doing and there's many different things we can do with these list comprehensions we might imagine an original list and we might imagine wanting to essentially filter this list so that we only get items that are divisible by two we can do that is go num for Num in original list we can actually append this with an if condition so this num will only be added to the new list it is divisible by two which we do with this operation right here we can also run a nested Loop using this syntax this is a bit more tricky but we have X Y which is a topple four x in range three 4 Y in range three so let's just see what comes out of that so the qu essentially going to be just like a nested Loop we can apply any sorts of operations we can apply name upper to this list right here to get all uppercase names and there's a bunch of other things we might do here so a really Sleek syntactic way that's going to really impress in interviews if you can use this so worth learning to use this concept next we have something called Lambda functions so these are what's called Anonymous functions in Python so to introduce you to this what we have here is a function called double so essentially what this does is just takes an X and then doubles it so multiplies it by two but you might see that this is a bit theose like we're having to use two lines of code and write this Def and the function name and all this when we just have a very simple function we're just running one line operation what python actually allows us to do is do this a lot more simply using something called a Lambda function something like this which looks a bit cryptic at first which actually a lot easier so instead of defining the function in the usual way what we do we simply create a variable called double to Lambda X colon X two okay so what is happening here so when we set a variable equal to Lambda something what that Lambda is telling us is set double to be a function it's essentially going to be a oneline function where that function is going to take as a variable X and then the operation that is going to run is x * 2 so now double is not just a variable it's a function that we can call in the same way as any function this is essentially just what we call syntactic Sugar for this right here this is a shorter hand way of defining these functions that we might only need like one time or a couple of times and defining this function in this usual way would sort of be unnecessarily verose so other way to use this you can take two variables inside Lambda functions just like you can with normal functions and do operations like this and also often we use Lambda functions when we needing to pass functions as arguments to some other function so for example the sorted function in here what it does if you hover over it is it takes an iterable which is this list points in here and then as an optional second argument you can take what's called a key which as it describes here a custom key function can be supplied to customize the sort order so what this does in here is that before any comparison happens the way the sorted function does things is it Compares items and then it determines which one is larger and which one is smaller so before any comparison happens this function is going to be called where it just Returns the index one item so for example when these two are being compared by the sorted function it first just takes the second item in these tles and then instead of comparing these Tes it just Compares these second item so essentially what this is saying that we're sorting these points simply based on this second value or the Y value of these coordinates and that is indeed what happens here we have one we have two and we have three now what you could have done is defined a function outside of it called I don't know key you take in an X and then you return X1 that would be the same thing and then we could just set this like this but that would be quite web both like we might not want to have to Define this function like this when we literally just need it in this one place inide of this ordered function so those are Lambda functions which are actually going to be very useful in the next thing concept that we are about to talk about now which is functional programming all right so in programming you might have heard about something called objectoriented programming which essentially just refers like using classes and things like this now functional programming which is what's called a programming Paradigm which is essentially just a fancy word for a style of programming a way of programming it essentially just refers to preferring to use different kind of functions that don't actually modify data in our program instead simply returns values and then those values are used in the next function etc etc etc now this is a much wider concept that we talk about again more inside of my program python developer bot Camp if you're interested but let me just show you the absolute Basics now with functional programming there are a couple of specific functions that we use very often these are called filter map and reduce so what filter does it's a function that takes in some data like a list and then filters it based on some condition map takes in a list or some other interal and changes each item in some kind of way whereas reduce combines all the items that it takes into one result so it sort of reduces it down to a single result let me show you how this works so here we have a function called is even that simply just checks if a function is even or not so we have a list of numbers then what we're going to do is apply a filter function where the first argument is going to be the condition the sort of Checker that we want to pass to each item and the second is going to be the list that we want to actually filter so what this does is it goes through this numbers list and for each of these items it applies this function right here and if the function returns true then this new list even numbers that is returned here is going to include that value otherwise it is not going to include that value so if we were to run this and print this which we're actually going to do we have two four and six because only those items return through from this e even function now trivia question from our previous concept what might we improve about what we just did here what is sort of unnecessary here well that's right we have a function that just has one line that we're defining in the usual way what we might want to do is use a Lambda function and instead Define it inside of the filter function just like this which makes this much less ver Bose so that is filter by the way the reason why we're still calling this list what we call casting function afterwards is because strictly speaking this filter function returns something called a filter object so if we want to turn that filter objects into an actual list then we simply call this list casting function afterwards so now this even numbers is going to be a list so the other functional programming function is going to be something called a map which we can see here so what map does is similarly takes a function as a first parameter and a list or some other interal as the second item so we use the same numbers array and what it does is he transforms each item into something else based on some condition condition so for example in this case we have a Lambda function what it does is it takes an X when in each iteration this x is simply going to be each item of this numbers list in turn and then what it does is it transforms each of these into x * X so if we run this again we can see squared number so it essar just squares all of these and this right here as you might see is another way of doing the the same thing as we did here with our list comprehension syntax in this case I don't really know which one is better which is worse it's personal preference we just another way to take in a list and apply some operation for every item of that list and return a new list lastly we have reduce which is guess the most complex out of these but what it basically does is again it takes a function and a list and then what it does is it keeps track of something called an accumulator in this case this function here actually takes two parameters the first one is going to be What's called the accumulator and the second one is going to be the parameter that actually refers to every item in this list so what this does this accumulator actually Remains the Same across every run so in the first run the accumulator is just going to be zero and then what's going to happen is going to add Y which is going to be one to the accumulator and then what is returned out of this function is now added in the accumulator so in the next run the accumulator is going to be one so we're going to have one plus the second item which is two and that is again going to be returned and added into the accumulator so what this particular reduce function actually does is it just adds all of these items in the list together into one value which is actually the value which is then returned out of this reduced function right here might take a second or two to get this but but again very very useful tools that I actually use very often in my actual programming these filter map and reduce functions which are a great introduction to functional programming if you want to read more about functional programming I'll leave some articles down below last but not least we have decorators now decorators are something that I've been aware of for a long time but I've never actually gone into the habit of using them myself so this is something I'm actively trying to use more in my own programming so first let me show you how it works and then we'll sort of talk through the anatomy of what is actually going on so here we have this situation in here which is actually simulating something I'm doing in an actual program that I'm writing this like flight mappa I'm essentially making this program to like take flight prices and like make a whole map of it and figuring out how to do that just a simplified version of what is going on here so I have this function get flights and I have this function print prices and what I want to do is whenever any of these functions run just to keep track of which functions are running when and things like this I'm going to print to the console whenever either of these functions run so of course what I could do is simply go and print and right like running function whatever but that would require me to repeat code and as programmers we want to be lazy and we want to reuse the same thing as much as possible so what we can do is apply something called a decorator which has this really funny syntax of this add sign and then this name of The Decorator so what happens here is that we Define a function which is going to be a decorator function and inside of a we do a bit of a weird thing we Define what's called a wrapper function inside of it so it's like an inner function a function defined inside of a function what this does is it simply returns this wrapper so essentially when you run this this wrapper function is going to be returned so then what we do is is we apply this function as what's called a decorator so what this means is that whenever we run get flights for example what it's actually going to do is run the log function run function and taking this function as a parameter so in Python functions are what's called First Class objects which essentially just means that we can pass functions around different functions as parameters we can return them we can do all the things with functions that we can do with any other type of object in Python what happens is that this flight prices function is pass as a parameter to this log function run decorator which is going to run instead of this function and then what happens here is that this wrapper function is run and inside of this wrapper function we're printing this line in here running function and then we use the syntax to get the name of this funk which is the function this function right here and then after that we actually run the actual function as we are supposed to so we apply this decorator to both of these and when we run this function we get this in our console we get running function get flights which makes sense because we're running it first and then we get fetching flight details so the actual function is run after that then we get the same thing happening for this print prices so what is actually happening here is that this log function is syntactic sugar for something like this where we go get flights is equal to and this should actually come off the this one like this where we take the get flights as a parameter okay so let's unpack this what is happening is we are defining a variable get flights which is going to be equal to the return value of this log function run function with the get flights function as a parameter all right so to get the value of this get flights this function will have to be run okay so let's run this function when we run it we Define this wrapper okay interesting and what is returned is this wrapper so actually when this runs it doesn't yet run this wrapper function fun because what we're simply doing is returning this function right so when you run this what it's going to return is whatever this function is now essentially this get flight function is simply this wrapper function just like this with by the way these arcs and quarks just refers to the arguments and keyword arguments that we might be passing to one of these functions if let's say this had variables X Y things like this all right so get flights is now actually just equal to wrapper so what now happens is once we run get flights it actually runs the wrapper function which then prints this thing and then returns and runs this get flight function and because we are returning this with these parentheses that is actually saying don't just return the function but also run the function return the return value of this function I know that that was absolutely a lot but just stop the video and sort of walk through this logic to see that it makes sense for you and I'm going to leave further resources down below if that did not make sense for you so the reason why this is useful is because using syntax like this we can apply the same wrapper operation to any number of functions that we want without having to repeat this line in like all the places where we want but because this is such a repeated pattern python has made it easier for us by allowing this syntactic sugar of this wrapper syntax so essentially we don't have to write this which is quite rbos and like tough to remember we can simply write this add log function run which now essentially does that same thing where essentially when this decorator is applied instead of whenever this function is run instead of running this function itself is going to run this wrapper function inside of this decorator that is the net effect of this very sort of complicated and convoluted operation so you might not yet be convinced why this craziness is even necessary so I'm just going to show you a couple of examples where this can be useful so let's say you want to time the Run of Any Given function now what you might want to do do is just Define a start time and then Define an end time after that function is run and then print how many seconds it took to run that function of course you can simply Define this anywhere inside of Any Given function but if you have a million function and you want to quickly apply the same time it to many functions it's a lot easier to Define that in one place as a decorator and then apply it to whichever functions you want so what this does is that when you run this function with this decorator remember instead of actually running this function it just runs this wrapper which is extends the behavior of this original function so what it does is Define a start time then it runs the actual function which is the funk which was taken as a parameter for The Decorator it gets the result because we still want to access the result we get the end time we first print how long it took to run and only then we return the result which is the original thing that should have been returned by this function so essentially with decorators we're just extending the behavior of the functions where you can then apply that same behavior extension to however many functions as you want but if this seems like complete nonsense to you and you don't even feel like you have the required python fundamentals you don't feel like you even know enough about the basics to even get into these like slightly more advanced like intermediate kind of Concepts then I highly recommend that you check out my program python devel boot cam where we go through everything from literally first principles literally if you feel completely lost with programming I explain everything you need with python with oop and with everything you need to get hired in such a way that literally anyone can understanding and I actually give you the skills to actually get hired at the end of it so go check that out down below I hope that at least some of this was new to you I hope that this was helpful to you now if you're looking for actual projects to build I actually made this video where I give you five ideas for really impressive portfolio projects in Python that you can build so go watch that video pick a project or two and then pick concept after concept and start bringing them into your programming toolkit and that will make you such a better programmer over time so go watch that video and I'll see you there