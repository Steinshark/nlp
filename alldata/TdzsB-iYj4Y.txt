we've talked about pascal what happened in nottingham what happened in nottingham well there we were at the end of the 1960s turn of the 70s i had been appointed to do computer appreciation lectures for arts professors and lecturers and so on i did a little bit of programming and i did it in l60 algo 60 was also what we used because at that time we were just a little computer group within the maths department and the other lecture involved was andy walker uh who well we both agreed he knew a lot more about the alternatives than i did we could see pascal was definitely a contender but we also knew they were doing this alcohol 68 and the attraction at the time although it wasn't really an attraction we soon realized was that algol 68 had a two level grammar so it wasn't just bacchus now a specification which was standard after algol 60. album 68 took the view that the way you could gain a lot more power was not just to write down by hand your bnf specification but to have a master super all action extra program at the top that generated the bnf from other considerations the efforts of two-level grammars to lead to a new way of looking at things appeal to only a very narrow minority what we were concerned with is how did it compare with pascal in terms of the facilities it would be offering was it a suitable language to be given to computer science undergrads and specialist postgrads and our view was yes it was next question i can't emphasize this strongly enough but i said it i think in the in the pascal video if we're going to teach this are the compilers any good because we're going to have you know 50 60 undergrads wanting to do courseworks with this it's no good if the compiler's flaky it's got to be robust got to have good diagnostics you've got to be able to teach with it we could see good compilers being developed with pascal and i said to andy but what about algol 68. he said dave you won't believe this but there is a bunch of really talented computer scientists at the royal radar establishment in melvin it sounded stupid at the time and this was a bit before we ever got to hear about bell labs that was weird enough you know a secret bunch of excellent computer scientists buried inside a research department for a telephone company here were some extra super computer scientists not so many of them but buried in a radar establishment and these people are really competent they have a good track record and he said you know even now i mean i was talking about 1970. he said even in 1968 as it was announced they had their implementation working i said andy right so in principle it's fine but here we are stuck on an icl19 we do not have an ibm no problem they because they are a uk research establishment have also been stiffed with icl hardware like it or not oh i said well that will certainly help if we're all on the same machine so we got to know them at malvin very well indeed and rightly they were celebrated for their implementation of this album 68. what did it do that helped first of all it came up with an idea of types well i'll call them types they had they preferred the in phrase of modes but i won't call them that or so just confusing types they were dead keen on types and what alcohol 68 could do you know if you had an integer it could now be called an end you could abbreviate it but what about the place in memory that holds your integer that's got an address but we don't talk about address we say it refers to the integer it's where the integer is stored so that was taken up everybody like that oh it's the end but this place is stored is got an address and that address is a referent it refers you to where the integer is you see and then if you get a pointer to that box that's a pointer to a pointer and the thing becomes a ref referent and in the end you sound like a barking dog you know so i had this ref reference and i decided that i wanted to singly dereference it and not to doubly de-reference it right down to the basic end as the circumstance would seem to imply so do you know what i did i use the cast where you pour your hot metal into a mold and it comes out in the shape you want it and i said i'm going to cast it down just to ref ref it not all the way back down to it all this kind of stuff andy reassured me quite rightly he said it does do bites and it does do bits and all this kind of stuff in your pascal computer you can't get down to the big level manipulation the implementation team at malvin could use i think they did their algol 60 to implement algol 68. they pretty well got their compiler working on the day the report was released because of course they were on the inside track they knew what was going on there were a few restrictions on it it was what's called a single pass compiler for speed and that meant sometimes declaring your structures was a bit awkward and they had banned certain things that were appearing in algol 68 that they thought would be expensive to do it was called algol 68r and i think r meant restricted andy and i we were very happy with it we could make a success but because you're going to ask me surely it's all right for hardcore computer scientists to be casting ref reference down to reference how do mere mortals cope with that and we were very alive to the mere mortals we weren't just doing hardcore computer scientists we were involved in outreach masters courses which wanted a bit of programming towards making this be a digital business person or being on a programming team in a commercial environment and i think we both agreed that a good choice for the absolute non-specialist but it wouldn't scare them too much would be pascal so we did actually run both we ran pascal for many years i think in our so-called conversion master's degrees but we kept alcohol 68 for the hardcore stuff was that something you could do relatively straightforwardly from an infrastructure point of view because i'm not talking about pcs on every desk at this area no fortunately with the algol 68r compilers we could have people feeding in algol 68 jobs on cards into the 1906a but equally icl had their own pascal compiler one way or another there were good enough compilers yes i mean we were teaching pascal i think into the early 90s we knew that coming up on the rails alongside of course was that c from the mid to late 70s almost was getting better and better c has got input from algol algol 68 and also but principally from bcpl and guess what two of the people who designed bcpl were also on the alcohol 60 committee basically saying it's not quite the way to do it bcpl is a lot better and all this kind of stuff because of that rallying point way back of algol 60 it you could transfer between these dialects fairly easily you probably had theological opinions about the right and just way forward and you deprecated all of the other approaches but nevertheless you knew you were basically in the same playground but you were just making different decisions because of the different uh you know clientele involved i think too one of the things that does need to be said and it brought it home to andy and me is that the implementation team at malvin for other 68r was ian curry john morrison and susan bond ian and john i think were the driving force behind coral 66 their early adventure but uh sue bond was an absolutely vital member of that team for algol 68. she was an absolute rock of that team gets underappreciated because she suffered from what we've referred to i think obliquely in these lectures started at bletchley park the joan clark effect joan clark was a highly qualified mathematician studied at cambridge with alan turing alan turing wanted her on his team at bletchley park big problem they couldn't pay her enough because she was a woman and cryptography post was for men only so they had to get around it by saying that she was a linguist by reclassifying her they could get her the right money i think a similar thing happened with subon the only way she could make further progress was to become more of an administrator which she did and she made a very successful career for herself here's just a moment when we should be celebrating our women computer scientists they were absolutely equal colleagues and you know deserve to get a lot more respect than they do even now john backers and peter nauer who were on the huge 60 defining committee bachus was famous as one of the big inventors of fortran pete's now a very famous european computer scientist so at that time what will happen to any system that is using this way to represent time is that one sec