in this video we're going to be exploring how we can use the time it module to time small Snippets of code in Python and first of all I'm going to import time and import random these are the modules that I will be using for all of my examples but let's jump right into how we can use time it and to demonstrate how it works I'm first going to try to find out what's different between random integer and random Dot random because both of these produce random numbers one produces a float in the range of 0 to 1 while the other one produces a random integer in the range that we provided but which one of these are faster because Let's Pretend in our program we don't really care what the numbers are we just want to generate some random numbers so of course let's opt in for the faster version anyway that's what we want to try to Benchmark so that we can make sure our code is optimized and to do this I'm first going to create a variable called Rand int time and this is going to be of type float which is going to equal time it dot time it and here we need to pass in a statement and you can pass it in as a string or as a function without any parameters that's up to you but for the first examples I'm going to be passing it in as a string so we want to test random Dot randint in the range of 1 or actually 0 to 1. that is the line of code that we want to test for and we do need to provide some setup because this line of code is going to be independent of our entire script so it's not going to know that we have random already imported so with the setup we can Define that okay we need to import random before we run this test and the setup will only be used once and then it's going to perform the test 1 million times by default and we also have a timer parameter and this allows you to specify your own timer but by default this is set to the performance counter which comes from the time module and I'm not going to dive deep into what kind of timers you can use if you know what the timers do great you can specify your own but I just want to show you that you can change that in case you want to and that the default is set to the performance counter but we won't really be using that in any of these examples since it's the default I'm just going to remove it and finally we have a parameter called number which allows you to Define how many times you want this test to run so by default it's set to 1 million but in case it's a slower function you can set it to something lower such as 100 000 in case you want to run it less times anyway once you use this time it method it's going to return to you a float of the total time it took to run this snippet of code 100 000 times or at least in this case where we defined it to be 100 000. so if we were to actually print this result and I'm just using some formatting here you'll see that in the console we're going to get the time back that it took to run this snippet of code 100 000 times but let's also compare this to what I mentioned earlier because right here we did random.randint but I want to see whether random.random would be faster so right below I'm going to duplicate that and instead I'm just going to call this random time and instead of random dot Rand int we're going to do random dot random and everything else is going to stay the same but of course if we want to see the results for random time we're going to have to print that so now we have something that prints the random in time and something that prints the random time so let's run this once again and what we will see here is that random was significantly faster than random integer and I just want to stress that time it should be used strictly for small Snippets of code if you need to time a larger code base or an entire script to find out which parts can be optimized or which parts are performing too slow I definitely recommend you import something such as the profile module because this will give you better insights on your entire script while using time it is very good for small Snippets of code such as random.rand int which is literally one line of code so you can see exactly whether it's faster or not and another thing I want to mention is that when you are using time it it temporarily turns off garbage collection which can make independent timings more comparable but garbage collection can also play an essential part in your timings so you're going to have to look into that whether your code is actually being timed correctly without garbage collection enabled and our next example is going to be using functions that require a bit more setup such as if you have some variables that you need to pass in as arguments and one example is going to be this function here that generates a list of random numbers what if we want to pass in an amount and I'm going to be using a list for this and I'm actually getting some syntax highlighting because this does return to us a list of float so I'm just going to change that real quick this will be float and this will be float and what I'm going to be comparing here is whether it's faster to use a list comprehension or to just use a normal for Loop so I'm going to go right under this function and Define the same thing in its list comprehension form and we need to change this to float as well I don't know what I was doing there anyway right now we have two functions that we can actually test because I called them here and here and if we run that we're not going to get anything because it returns numbers but it doesn't print anything and that's my fault because I wrote this all in Jupiter notebook so we will print those two and what we should get back are two lists that contain five random numbers each anyway that's what we're generating let's see which one is faster and how we can time it and I'm going to remove these print statements so down here we're going to define the amounts to be of type int and that's going to be equal to 20. and that's what we want to pass in to each one of these and it's true that it does Shadow these so I'm just going to quickly change this to amount n for amount numbers I don't know and first of all we're going to go down here and we're going to create something called list time which will be of type float and that's going to equal time it dot time it and the statement is going to be our function call so I'm just going to copy this up here and paste it in as a string since you can't directly call it inside here it's not going to allow you to do that or it's just not going to function correctly we're going to have to pass it in as a string and instead of saying amount of type integer we're going to say that the amount is equal to the amount number and we can even print that so this time and if we run this we're going to get this error here that this was never closed and that's absolutely true but if we run it again we're also going to get that list Generate random is not defined which is quite annoying because we need to import list Generate random and even when we do that we also need to create amount n because once again this is isolated from our script so it has no information about amount n or about our function so one solution to this is to use globals and here we can Define the globals to be our globals so now it's going to be able to see that we have this function defined and that we have the amount defined and this time when we run it it's actually going to be able to give us the time back as a float but of course let's do it for both of them so list time and comp time and it's the same thing we're still referring to our globals so it can see everything inside our script then I'm just going to format the result nicely so print and print so we will get the list time and the list comprehension time back respectively now if we run this we should see that amount is not defined because I did that silly thing earlier to change this to amount n and I did not do that for this one I'm still getting used to trying to use Jupiter notebook to take notes when I'm teaching the videos so I will keep this in mind for the next video that if I change anything I need to remember that I'm doing it also in my script anyway let's run this and this time we should get back both of the times that it took to run these functions one million times and in this case the list comprehension wasn't really that much faster but it is worth mentioning that if you were to change to a different python version such as 3.10 you might get different results in this example it was considerably faster so when you time your code there's a lot of factors to keep into account I'm not going to dive into all of that in this video but I just want to show you how time it works because it is pretty cool for timing small Snippets of code but always check which python version you're using and if you change anything always test again because python 3.11 took away a lot of the optimizations that we had in Python 3.10 now they're just built into python which means the difference between using a for Loop and a list comprehension in 3.11 might be completely irrelevant but moving on to the next part of this video and that's how we can repeat this test several times because right now we ran it one million times but what if we want to do that five times Well we can do this in a for Loop but there's a much more more convenient way of doing that and I'm just going to remove everything besides the Imports and here I'm going to create a variable called random integer times and that's going to be of type list of float because what we're going to use is going to return to us a list of the fastest times so here we need to type in time it dot repeat as you can see we have something that's built into the time it module that allows us to repeat the test and the statement is going to be equal to random.randint from the range of 0 to 1 the setup is going to be set to import random and I clicked on something I shouldn't have and then we can Define how many times we want to repeat this test and I'm going to set that to 5 which I believe is also the default so now we can print random times or random end times and what we will get back is that I didn't close this again because I'm so used to the code editor helping me out with closing parentheses that when I do this in a string I keep on forgetting but this time if we run it we should get five times back and it's usually a good idea to use repeat because sometimes your computer is going to be using a lot of resources to do something so the times aren't always going to be consistent but using repeat can help minimize the risk of your code being timed during some inconvenient time for your computer anyway now we got those five times back so let's do the same thing for the random times and I'm just going to create it immediately below and it's going to do the exact same thing except it's going to use the random method which at this point we know is much faster but now let's display the results and find out which one is faster so I'm going to use my print statements once again and I'm rounding them to four decimal places but this time you should note that I'm using the Min method which is provided by Python and that's going to give us back the minimum and the documentation recommends we use the minimum because that essentially tells us how fast our computer is capable of running this snippet of code and I'm just going to edit in that documentation right here so pause the video if you're curious about learning more regarding that otherwise I'm just going to run the program so if we run this we're going to get two times back except this time I would consider it more consistent since we actually ran the test 5 million times and if we run this again we should get similar results as you can see they are much more consistent than when we ran it one time and finally I just want to mention one more thing and that is that if you have a function that doesn't really take any parameters such as this calculate function here it's quite easy to time all you have to do is pass in that function without the parameters of course and that will give you back the time so if we do this as you can see the only thing I passed into the statement was calculate and nothing else we didn't have to import globals or we didn't have to do any setup because this is a perfect reference to everything that we have in the script and if we run that it's going to give us the time back as well so that's another way to do it that might be even more simple is just to create a wrapper or a function that you actually want to time your Snippets of code inside so instead of using setup and globals here you can say random int implementation and you can just do it here random int I will say 0 to 1. then we can just remove this line of code here and pass in the random int implementation and if we run this we should get the time that it took to run that 1 million times anyways that's actually all I wanted to cover in today's lesson do let me know what you think about the time it module whether you use it or whether there's something else you use to time small Snippets of code and with all that being said as always thanks for watching and I'll see you in the next video