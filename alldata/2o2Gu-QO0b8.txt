today we're going to be learning how we can create a text editor using flat and Python and it's a great starter project for learning how to use flat but the project is going to look like this so as soon as we start our program we're going to get a new fresh window that says welcome to the text editor and as soon as we start typing something such as hello world that welcome message will be removed and it will be replaced by the text that we actually insert and we can insert as many lines as we want such as hello world as you can see I'm quite creative today and when we close this and rerun the script it's still going to be there the data is going to persist so it's a very simple notepad that actually holds the data that we insert and you can continue to write exactly where you left off these are my deepest thoughts and once again we can exit out of this and the next time we start the program it's still going to be there so that's what we're going to be making today and the very first step is to create a new empty project in pycharm and we don't really need the sidebar so we can close that but as always make sure you have flet installed and you can do that in the terminal via the PIP install flet command and after that we can get started with the Imports so from Flat import and we're going to start with the user control then we want to use a text field which will take care of all the text that we enter and then I'm going to tap enter in front of text field so we have each import on a separate line this just prevents it from going very far out and this might be preferable depending on your context I'm just testing it out so then we can add an input border followed by a page a control event and finally the actual app and as always you don't have to import these directly you can also just import flat as ft and use dot notation to access all of these I just do this to be more explicit with the tutorial if you're playing around with flet I absolutely recommend you import it as ft because it gives you a lot more opportunity to actually try to find something that you are looking for but now let's get started with creating our text editor and to do this I'm going to create a component called text editor and that's going to inherit from user control and for the initializer which returns none we're going to specify first the super call so we can initialize the user control but directly under that we're going to create our text field so self. text field is going to equal a text field and here we're going to be able to customize it so first of all we want to make sure that it is a multi-line text field which means that when we tap on enter or we go too far it's going to create a new line giving it the impression to be a text editor then we want autofocus to be set to true as well and for the Border we don't want a border so we're going to set the input border To None the minimum amount of lines is going to be set to 40 then we're going to provide an onchange which for now is just going to be set to or actually let's create that first so we don't forget about it and this one's going to be called def save text which takes self and E of type control event that returns to us none but I'm just going to raise a not implemented error because we're going to take care of this functionality later so now we can actually just add save text inside here so self. save text without the parentheses and that just means that every time we insert a character it's going to save it then we want the content padding to be set to 30 and I want the cursor Coler to be set to Yellow because we are programming in Python so it's a nice touch that our cursor is set to Yellow but now let's move on to our save text method and we can safely remove the not implemented error because now we are actually going to implement the functionality so with open save. txt in write mode and whether that exists or not it doesn't matter because if it doesn't exist it's going to create it here as file we can do f. write self do text field doval so it's going to grab whatever is inside our text field at the time and it's going to save it inside our txt file then of course we need a method that loads the text because when we restart our code editor the text editor itself or the text field is going to have no idea what value should be inside it from the beginning so right below the save text method we're going to create something called a read text method and that will return to us a string and possibly none because there might be no file especially if it's the first time that a user actually opens our program so inside here we need to create a tri block and we will try to open save. txt which might or might not exist in read mode as F and if it exists we can return f. read but if this file does not exist it's going to raise an exception and to be more specific it's going to raise a file not found error because that file could not be found and in that case we're going to just create some self. text field. hint text to be equal to Welcome to the text editor and just like that we will have a nice welcome message now all that's left for us to do inside here is to give it the build method so we can actually return the component and to do that we will call this def. built and that's going to return to us a text field so first of all the self. text field. will be set to self. read text that is the first thing we want to do when we are building this component we want to make sure that we grab the text from our save file if there is any otherwise it's just going to be empty and once we make sure that we load the text we can finally return the self. text field and that will take care of our text editor compon component up next we have the easy part which is our main entry point so we can type in Def Main and inside here we just want to take a page of type page as always which will return to us none since we are only executing code and the page. title will be set to text editor with the page do scroll being set to true because we want the user to be able to scroll with the page as they add more and more text and the only only method we have to use here is the add method with the text editor inserted so this was by far the most simple entry point we've had so far and finally all we need to do is check if name is equal to Main and run our app so app with the target set to Main and just like that we can tap on this cool Green Arrow and it's going to load our text editor and the first time it loads it it's going to try to find that save. TX file but since it cannot it's going to raise a file not found error leading us to have this nice hint now we can say hello python with exclamation mark and it will save it each time we make a change to this text field so we can easily close this go back to our program and rerun it and our text will still be there and something else that's really cool is that if you were to create a lot of lines for example and you were to go very far down the page it would start to scroll with the text that you are writing and then you can scroll back up and down and you can edit your notes and the next time you open this once again the text will still be there so you can pick up exactly where you left off and that concludes our text editor now as a homework assignment I want you to find a better way to save the text because saving it on every single change can be considered to be quite an Overkill even if reading and writing a file is extremely fast there are better ways to do this maybe you can save the file every 5 seconds maybe every 10 seconds you can also add a button for the user to manually save the file although that kind of sucks if you ever have an application where you have to manually save something it's quite annoying for the user but just try to find a way that's more efficient than saving it on every single character change or every single change change on the text field and as a bonus if you can also add a popup message that says that the file was saved that would be amazing but anyway that's just a personal challenge for you if you want to improve your flat skills in future lessons I will cover how to do all of this but for now that's actually all I wanted to cover in today's lesson so as always thanks for watching and I'll see you in the next video