[Music] and let me bring on Greg hello Greg from undo hello hey yeah it's going all right going all right hello everyone and let me bring online your yeah so here's your screen and we're all waiting for your demo thank you very much all right I just want to do like a couple of slides before we get into the demo just want to set the context if that's okay um so I think a lot of people know this quote from konaghan debugging is twice as hard as writing the code in the first place so if you're already cleverly as possible you are no definition not smart enough to debug it well let's look about let's look at how we uh well kind of why why that is and think about how we actually how do we debug and actually I think as developers we spend actually most of our time debugging right I'm including the inner loop debugging think about how many lines of code do you think you can write and have it work first time right maybe you're a better programmer than I am but for me it's like 20 probably not even 10 maybe how many lines of code can I change and have it work first time I think that number averages to less than one right um we spend a lot of time um debugging and sometimes we use like Dynamic Checkers like valgrind or sanitizers um maybe we have them as part of our CI maybe we pull them out like well I don't know maybe like this is the sort of thing you maybe do a lot of times I think a lot of people a few times a year maybe use a debugger maybe maybe you know again a few times a year a few times a month Maybe um some sort of fancy Dynamic logging yeah some people a lot of people don't have that or we just printf and that's what we do most of the time every time and I think there are a couple of reasons for this one is I think I'm going to be a bit controversial but just laziness um so we all know this XKCD cartoon why is it compiling it's compiling because I added the printer right so I can feel like I'm working and not work but the other reason is that it gives me it's actually better than most debuggers are telling me what happened right I'm trying to think when I'm debugging how did that happen I don't mean like how did that happen or how did that happen I mean I had expectations of what my code was going to do in reality diverge from those expectations and when I'm debugging I'm trying to think backwards to like figure out where did reality Divergent expectations of course usually it does something a little bit more like that um so this is where time travel comes in so um and this is well undo live recorder comes in so we want if we can make the debugger just allow us to see exactly what happened rather than what most debuggers do which is let you see what is happening much more powerful so let me show you what that looks like I've actually got loaded up here this is uh this is our internal um GitHub Insight undo and this is a pull request that I made uh that's failing some tests right um so made the pull request kicked off some Jenkins tests all very kind of normal here's Jenkins okay some of the tests have failed uh if I go into here I can just like take a look at one of these at random I've got some log information and okay some kind of abort oh yeah okay look at assertion failure here right it's got a normal experience right we look through the logs and if we're lucky sometimes in the logs we have enough information to root cause the issue and you're just like oh yeah I know what it is let me fix that and go again but often probably most times we don't have enough information in the logs with like that assertion failed like it should never fail right that's why it's an assert what's going on so what would I do normally I'd maybe add some more logging run it again maybe see if I can reproduce it locally I don't need to do any of that because I've got this link to something we call the observatory if I open this up this is a whole bunch of recordings that got taken of my test as it ran this test actually ran I think yesterday but these are recordings of the program's execution various processes and things ran but I'm going to just pick this one it makes for the best demo so what this is going to do now I just clicked on that play button this is going to provision a Docker image it's gonna um check out the source code from the right version and uh and it's gonna load up uh let's go now here we go and it's going to load up a a view through vs code here onto my application kind of at the point that it crashed which is going to be like a little bit like looking through a call file but this is a recording and I get full history every line of code that executed and also full data so I can actually go back to any line of code that executed and I can see all of the data so let's just let this all get Provisions that's checking out the right version from git it's setting everything up it gives me some tips because I'm kind of a bit lazy it's just it'll get it's usually it's a little bit quicker than this but here we go all right so I've got a few things that are a bit different here I've got this timeline this is all inside the browser right so this is this is the test that I was just looking at remember we were looking at it in Jenkins and Jenkins log and we saw this assertion it failed um and I can sort of hover here and I can see this assertion fails because square root cache is zero and it should have been 15. um I can kind of hover around elsewhere and I can see that okay well that's so passing in a number to Cash calculate number is 255 and what it gets back is zero and what it should have got back was a square root right zero is not the square is not the square root of two five five so kind of okay so if I was looking at a core file I could get this information it's a bit more convenient because I've got the right code out of Jenkins and stuff but doesn't give me enough information to recalls this right I need to know why did cash calculate um return what it did well let's have a look out on the left here I'm just going to remove these windows around a little bit so I've got a bunch of threads and they've each got a cool stack actually this is like um if I look in here I can click this show more stack frames this is inside Lipsy right so actually I'm not here at this assertion I'm inside libsy from where the assert failed so what I'm going to do is I'm going to hit this uh sorry this button here reverse step out and that's going to pop up uh one uh stack frame and again and again and uh once more and so here we are inside our code um now again I could have done this with a core file but now this is where stuff like life starts to get really interesting okay I'm going to just wind the clock back and see what the program did and why and see why did cash calculate return that bogus number so uh go back one line okay that's pretty funky now I'm going to step into Cash calculate because I want to know why it returned what it did okay cash calculates returning look look it's got a cash hit here it's returning zero okay we knew that okay there's some threading stuff going on I mean thread 11 here uh maybe it's a race condition and I've got some locking happenings maybe I can go back before this lock was released and let's see if everything looks same here so just go back a few lines okay stood in thread 11 it will stay inside the threads this is before the thread was released now let's have a look here so it's returning from the cache it's returning the ice entry in the cache I is 90 and go over here in my watches and like look at G cash 90 and if I open that up yeah okay sure enough the cache contains bad data right so this is like bad day at the office right I've got my cash contains bad data I don't know I don't even know how that came to be how did that happen I don't know whether that was another thread so pointer error is it a logic error all I know is something like stomped on my data structure and gave me bad data so uh what I'm going to do here this is a super cool feature this is really kind of one of the killer features I'm going to click this uh let me just hover that so you can see it click this last changed button and it's going to give me an expression so I want to know when did gcash 90 whoops 90 last change so I can enter and what this has done now is wound me back in time to the like the most recent time that that element of the cache got updated so I'm Midway through the update actually it's executed the first line here and not the second so it's Midway through the update so if I go back one line now okay so now the data structure contains good data the square root of 40 uh really is six like with integers watch the data as I step forwards now it's like live action replay of the corruption happening right step step so that's it that's two five five and zero being written in there let's see like what's going on well we're writing number adjacent and it's square root and number adjacent is negative one so the square root is garbage why am I trying to take the square root of negative one well uh I could uh I'm getting pretty close now I could do this by code inspection but as this is a demo let's let's do it just a slightly different way I'm going to use the last command we've got the command line here so y there's number adjacent where is number of graysons uh minus one okay it's being set here number adjacent well it hasn't been initialized yet it's been initialized to number which is zero minus one so here's the bug called the function with a number of zero it returned the right thing it returns zero but there's a side effect you left one entry in the cache in a bad state right so it was calculating square roots either side and the basis is some kind of locality of reference and I didn't notice until sometime later in the execution different thread came along actually in this case it looks like it was the same thread usually it's a different one anyway different a thread and unless you know the same or different thread came along and tripped over that bad data and then and then the program assert failed now this is a trivial program right it's like less than 100 lines of code um it's just to show a demo we want to show a very quick demo in like 10 minutes but uh so fight just want to say that this scales right so our customers are people writing really you know code at scale millions and millions of lines of Highly optimized C plus plus and um and they use this you know all the time every day even even in those environments so that's it that's the quick demo um I will be uh hanging around um in the lounge afterwards to take any questions thank you very much thank you that was an awesome uh demo of the life recorder from undo and yeah crackers is an expert and many things so um we will be having um a table for undo and the launch later but now let's continue with um