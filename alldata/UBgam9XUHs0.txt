my guest this week is Simon pton Jones and I have to be kind of careful introducing this one cuz I could turn into a total Fanboy Simon is an absolute Legend I've got such respect for him and he's been a huge inspiration for me as well as hundreds thousands of programmers he's been a researcher and groundbreaker in functional programming for decades he's been one of the key developers and Shepherds possibly even midwives of hll which is one of my favorite languages and Beyond what you might consider the niche of hasal I think you can feel his influence on any language that's been touched by functional programming trends in the past few years anything from java to python to F and Beyond he's even and this is a kind of separate story but he's even had a big influence on Excel programming so despite hascal seeming like a niche he might have affected more computer users than just about any Lang language researcher ever in addition to all that all his Computing work and wisdom he's also one of my all-time favorite conference speakers I saw him give a talk a few years back about a new technique for optimizing the compilation of let statements now in the hands of literally anyone else that would be the driest smallest topic you can imagine but he has such Clarity for explaining things and such raw enthusiasm for programming I left that talk wanting to write a compiler just so I could optimize Le bindings kid you not he's that infectious so I would have gladly had Simon on the show to talk about anything that's on his mind but we narrowed it down to three big topics his past how do you build a language as large as hascal out of a very small set of core ideas what do you put in that core to make it a larger language once you've mastered that trick we get to his present what he's been doing for other languages Simon's been working on verse over at epic games I thought verse was a highlevel scripting language for Unreal Engine for fortnite extensions but it might just be a trojan horse language for the idea of functional logic programming what's functional logic programming you ask Simon's about to explain to us and as if his past and present work weren't enough he's also trying to influence all our Futures he has been heavily involved in Shifting the way we teach Computing in this country in England and he wants to spread that influence far and wide so that children get taught the fundamentals of computing just like they're taught the fundamentals of maths and Sciences was if all that weren't enough Simon's also a thoroughly nice chap so let's get started I'm your host Chris Jenkins this is developer voices and today's voice is Simon pton Jones joining me today is Simon Payton Jones Simon how are you doing hi good to see you again it's good to have you here so I I was trying to think of how to introduce you and how to pull together all the threads of your career which is a big task you are I wanted to say you you are to functional programming what James Brown was to Soul you are in some sense The Godfather of functional programming hardly there's plenty of other Godfathers well yeah it's it's it's a large family but you're onwards and yeah yeah and indeed from Alonzo church and on oh gosh you're going get all that way back yeah yeah wellit let's say you're standing on the shoulders of giants but you're one of the Giants upon whom we now stand um I was trying to pull together a thread that connects what you've done that we could start with and the one that jumped out at me was you've worked on hll obviously a huge contributor to hll you're currently working on verse you are a contributor or were to C minus minus and the thing that connects all three of those which is I think is fairly rare in programming language implement a is they are a large outer shell which is a lot of syntactic sugar for a very tightly defined core language is that fair to say that's true of verse and haskal I'm not sure it's so true of C minus minus designed as a kind of portable Assembly Language okay uh rather like um uh rather like llvm has become but llvm become much larger see was intended to be um but yes for the um certainly for I mean it's it's a fairly common pattern uh to try to uh to design a a sort of a a a large user friendly language um which desugar into some some kind of small elegant core you seem to have pushed that much further than most of the language implementations I know about so I guess the first question is why why do it that way well for me it's a um um it's a testament to the uh expressiveness of the Lambda calculus right so one of the things that always attracted me about functional programming um is that it's a place where theory and practice come rather close together um so you can build practical programming language that rests very directly um on some intellectually robust and small and elegant foundations so in the case of the LDA calculus it was always um the the Lambda calculus in in its in its Essence is just a Lambda a Lambda term is just the a variable an application or Lambda um and what's amazing is that you can translate an enormous um variety of programs into that indeed uh um you could almost imagine two different foundations for computation this wasn't the way that it happen but when Alonzo church and Alan Turing they were actually in the same University at Princeton at the same time and Alonzo church was defining the Lambda calculus and touring was defining the touring machine um and both of them are computationally complete that is to say uh um if we want to say what can computers do fundamentally we say well that they're just touring machines if a during machine can do it a computer can do it and vice versa yeah um but you can also say um they're just Lambda calculus machines right if a computer do it a Lambda term can do it and in fact it was entirely nonobvious but in fact it turns out that touring machines and and Lambda calculus are uh inter definable that is you can write a touring machine which will run any Lambda term and you can write a Lambda term that'll run run a touring machine right they're equally expressive good yeah um so now then it didn't really happen like this but you can imagine that all of imperative programming is built on touring machines right was it a touring machine it it has this tape and it mutates um you know mutates the tape it it reads and writes things on the tape the tape is like the store um it's fundamentally a mutation machine what is the Lambda calculus well um at any moment you have a a term a Lambda term and it simply um uh and you rewrite it one step at a time just keep rewriting and you get some answer and this is a completely different model of computation that's um and functional programming is built on the that purely functional model of computation imperative program is built on a more um M mutation based touring machine style thing so it's almost as if two entire approaches to programming have grown up um built on different foundations but that ultimately ultimately they're equally expressive so for me um I've always loved um the Lambda calculus as a basis for computation and it turns out that you can translate um well all sorts of languages including hll into this very small core and moreover the thing that I appeal to me particularly um is that uh that's not just a theoretical idea it's a practical idea you can actually build a compiler um that translates into this small core and moreover um the the Lambda calculus you know had a long history of development including typed Lambda calculi and in particular a typed Lambda calculus called system F and it turns out that it's not just most compilers typically most compilers in the world typically take a a language that might be statically typed and translates it to some kind of Intermediate Language and then optimizes that but the Intermediate Language is typically not statically typed um but in GHC our compiler for hll we take the uh hll and its um and all its glory and translate it into this core language system F which is statically typed so very unusually jhc is one of the very few production compilers I know that um maintains a statically tight program from the front of the compiler right through to the code generator I'm not thought of it that way yeah and that's that's incident you might you might ask why bother to do that right well to do that because after all um all that matters is that the source program is statically typed right and we reject it then but since the intermediate program is statically typed if the comp if there's a bug in the compiler a very common uh you know which is rather common I'm a compiler right then uh then what happens often is you get a type error in the intermediate code right so the compiler has a bug it optimizes program a into program B alas program B is type Incorrect and when you run it it will crash yeah right so if you don't have a typed Intermediate Language what happens is you have a bug in your compiler you compile a program you try to run the program and it crashes you think why does it crash so you can know get GDB out and work out why it's crashes then say Oh the code generator is generating the wrong code why is that oh because the intermediate program are you know some many levels of transformation back ah the optimizer introduced the bug the optimizer turned a type correct program into a type incorrect program which crashes now it's way better for the compiler to say uhoh I find that I have turned a type incorrect program into a sorry type correct program into a type incorrect program and report so that that reports the error immediately it happens rather than compiling it all the way to machine code running the machine code and then having to backtrack up to find the bug in the compiler yeah yeah okay that makes sense but there's there's this thing with like having this tightly defined core which actually if I'm right is fairly small I mean it's implementable reasonably if you've got the knowledge to do it yeah first of all um I'm just thinking a lot of people come to this idea as being like llvm in that there's this lowlevel llvm is not as tightly defined but I'm just trying to get a sense of where something like ghc's core might appeal to language implementers and people interested in how languages are implemented when they seem to already have this popular thing called llvm well by the time you get to llvm you've already descended several layers of abstraction right compilers typically work at um various levels of abstraction so if I've got a um you know hasore program I might say to a programmer how do if I'm trying to explain how it runs I say well you've got this function call you can replace the call by the body of the function replacing the arguments of the function with the actual arguments that you passed in the call right now you just keep doing that and that's how the program executes of course that's not really how the program executes um but really the program does you know machine transfers and pushes things on stacks and have things in registers and stores things in the Heap and runs a garbage collector um so uh but but nevertheless if you want to explain to a programmer how it runs you might think in this rewriting term rewriting way um and indeed the optimizer Works in this rewriting way as well but to get to lrvm which is a low-level imperative language you've now had to say oh I'm going to you know I'm going to allocate function you know closures for as yet unevaluated thks and they're going to consist of a poter to some code together with some free variables and those are going to be stored in the heat one at time and then when have so there's a lot of very low-level operations that mean that doing the optimizations you could do in a rewriting system at a higher level become essentially completely inaccessible by the time you get to the low level right so and this is this is not new right every compiler has this idea of we do some Transformations and optimizations using the high level code and then we sort of move down to a low level closer to the machine um and that at that point the high level optimizations become essentially inaccessible but new lower level optimizations like which register shall I put it in become accessible right they were not not expressible in the high level stuff so the lrvm stroke C minus minus part is really in ghc's back end right this the intermediate um language this system a flight language that I was describing which GHC uses mostly that is the sort of the F the middle of GHC the long middle that does lots of functional programming kind of optimizations does that make sense they're very different purposes is what I mean it's not the one is better than the other it's just they're different so we're almost talking about a three layer lasagna of programming yeah yeah you take hcll you turn it into core you optimize then you turn it into l c minus minus or lvm and you optimize some more yeah right okay so what makes that middle layer the core or some kind of design sweet spot is it that it's got um a solid theoretical backing or is it something else well um you it's clear that you want to do some Transformations at the high level when you still have the notion of you know first class functions and um and doing beta reductions and so forth so um you so you could imagine doing that on Source haskal yeah but that wouldn't be much fun because s because Source haskal has dozens and dozens and dozens of language constructs all of which are really syntactic sugar for some smaller thing right so it's much more economical to do a oneoff transformation that you know gets rid of 20 constructs in favor of one and then optimize the one rather than try to optimize the 20 right so so what you want is to have um an intermediate language that is that retains all the high levelness that you need for the optimization right without any of the superficial syntactic sugar right that's what makes it The Sweet Spot I wonder if if I can ask the similar question the other direction then so if in a sense hascal boil away all the sugar yeah and you get down to this core but then you're saying um the core of GHC is a very expressive language could it have been boiled up to a completely different looking language is there something about hasal that pops out of this core language or is the core a substrate on which many languages could be built oh no the core is a substrate on which many languages could be could be built you know that look quite unlike Haskell really because it's really just just a statically typed Lambda calculus the big thing is that the the thing that would make I mean like could you take ml for example and translate into core well um let's see so uh uh mostly you could uh the thing is that that ghc's called is a lazy language it has um called by name semantics um and ml is called by value um and there's quite a lot of research has been done about could you make a single Intermediate Language in the style of this core thing that was equally good for core by value and call by need languages no Source languages you compile many many languages to them I think the answer is probably yes um but the details are quite it's quite difficult to do a really good job of both at once and in practice uh um you know they are uh Haskell's core is skewed towards lazy evaluation though it can it spends a lot of effort on um corbar value as well and similarly a compiler like the oaml compiler that the folks are jam stre to building um uh which they have an intermediate language called I think F Lambda they call it um there they will be skewed towards call by value right so this starts to lead into your current research topic because I know you're working on another core for another language that has a third call semantics you you've been working on verse yeah which is neither lazy nor strict it's lenient is that lenient and also but also more even more significantly it's a functional logic language so we talked about imperative languages um haven't we which is you mean do this and then do that things like C or Java or Fortran or C++ um that's a whole it's a whole class of language then we got functional languages par of which hcll is a is a particularly what's the word um uh pure example in the hascal hasc's default mode of computation is purely functional if you want to do side effects like input output or mutating variables you have to use the you know am monad um so-call so that there's a type system that keeps side effecting computation separate from Pure computations so uh whereas ml doesn't have ml is mostly functional but you can have um side effect in computations as well without delineating them in the types so we got imperative programming functional programming both of which I mean imperative programming is the mainstream functional programming is the thing to which I have essentially devoted my professional life because I thought it was so cool when I first came across it when I was you know 21 or so um and I became kind of addicted to it and I I didn't think about it like that at the time but essentially I've spent my professional life trying to to say how can we take the idea of purely functional programming and really make it go right knock down all the Practical obstacles that make it hard to do in practice um or running too slow or too awkward just sort of you know Crush those obstacles one at a time um and uh and so that's what I spent my T to Haskell is a Haskell is a um uh the particular vehicle for that research Endeavor if you like um and um and sure enough as it turns out I mean research Endeavors don't often um succeed in that kind of way but sure enough it turns out that haskal you know or on its own has been has become relatively uh you know successful as in it hasn't died out after 30 years which most most research languages don't last nearly that long um but so functional programming as an Enterprise has proved to be quite influential in the mainstream so uh languages like and I don't see sharp and Python and so forth you can see and many other languages you can see absorbing functional language ideas now yeah yeah alongside these two right has been functional logic programming now that is a much smaller Niche if you think functional programming is Niche right I don't think it's niche it's a big Niche but nevertheless it isn't the mainstream functional logic programming is much less popular I haven't even heard of it and I consider myself fairly well informed so yeah so what's functional logic programming well you've heard of logic programming like prologue right um and there you have logical variables and unification is a sort of key concept when you're um working with prologue and you can call you can make New Logic available you can call functions passing them arguments that are sort of not yet completely filled in um it's a very different approach to programming just as functional programming makes you rewire your brain logic programming makes you rewire your brain too yeah now um functional logic programming has grew out of an attempt to say well logic programming is quite cool and functional programming is quite cool could we sort of somehow um merge them so one way to think of it is this in hll um you can say let x equal um I don't know uh um f of 17 in blah blah blah so that says X is a variable that denotes a value which is the result of f of 17 so we that so it does two things it brings X into scope and it tells you what its value is it doesn't tell you the answer of f17 it just say you tells you that to compute its value you compute f17 right right yeah um now but nevertheless x x stands for just one value in its scope right X doesn't stand for three and then four yeah right like in if you say if you bring X into scope it's a mutable cell that you then assign to and maybe assign a different value later and a different value later so X is the name for a box whose value changes over time in hle X is a name for a value and only one value okay now in a functional logic language you split the let into two parts one is one brings X into scope just says there is an X right but says nothing about its value and then SE separately to that you can have equations that get that explain something about the value of x so you can say you can say bring X into scope which in um R verse calculus we say exists X right there is an X and then somewhere in the scope of that exists you could say x is a pair so now you've now you've you've given some extra information you said it's not it's not a number it's not a string it's definitely a pair but you might say and it's the first and second component of the pairs I'm not going to tell you they're just Y and Zed so you might say exists Y and Zed x equals the pair y comma Zed so you've as it were refined the value of x a little bit okay yeah and then somewhere else you might say first of x equals three okay right and that's saying oh um if you compute first of X which now we can since we know that X is pair right then then um then and the first component remember was y then y must be three that's I mean that's a very unusual thing in itself because it almost feels like we're defining the something twice well it's not we're not we're only saying um if we if we say we could say x equals x is the pair y z and elsewhere you said x equals 3 in that case the program would fail right if you give contradictory information about a one of these logical variables right you say exist x 3 fail right so deeply built into the idea of functional logic programming is the idea that a computation May Fail that is return zero results and failure is not necessarily bad right failure is um any more than false is bad or in hascal um a function a function that returns a maybe value which is a maybe value is either just X or it's nothing so a lookup for example might return and maybe value so in high school if you do a lookup and it returns nothing the value nothing that's not wrong it's just that the look up didn't find you know the the key in the dictionary that's fine programming is like that that's you know that indeed that might be partly what you want to do um so um so in inverse and in functional logic pring failure is not um like uh you know seg fault crash bad things happen yeah it's not a moral judgment it's just they correctly is no answer to that the correctly is no answer that's right in fact verse and indeed um a very old language called icon um did the same thing inverse there are no booleans instead you say if you say if e then you know then Branch else else Branch then the semantics is if we evaluate e and e fails we take the else Branch right if there's no possible answer to e yes exactly yeah so that that's in just just like I say in Haskell if you call the look up and then you can patent match on the result and if it's nothing you do this if it's just X you do that and inverse you can just say if the thing fails take this Bunch otherwise take that Bunch so failure is not it's not bad anyway so um so in this functional logic programming Paradigm you got um deeply wired into the very fabric of computation is the idea that a computation May Fail return zero results um and in fact um inv verse it can also return many results so that's a the the another crucial component of functional logic programming is Choice um so the expression one vertical bar two returns one and then two right so an expression can yield zero results we call that failure one result or maybe two results or maybe seven results um so this sort of uh multiplicity of results is part of the core computation model of ver so as you can see it's very different to to ordinary functional programming yeah I I know someone is listening to this is going to be thinking this so I have to ask it in what way is this not just processing lists list it is it is a bit like making um you know has Call's list monan out into the fundamental monad of the language um but um and you could simulate verse by uh it wouldn't just be a list monad it would be a logic team monad for anybody who wants to go and look up the logic T library or something a bit like that because remember we got to do all this unification as well yeah that's the big difference so um so a functional well well so one possibility would be to say well why don't we just do all this as a library well the answer is it would be it would be possible but inconvenient right programs would look cluttered um yeah another way to ask the question is what is the core computational Paradigm of this functional logic thing right could we as we were saying is we can distill hascal down into Lambda calculus what would we distill verse into and this has been your your job recently right that is my job recently that's right so so if we're going to do this functional logic programming thing we better know what are you know uh what the the absolutely essential irreducible essence of functional logic programming is if we're if we're going to undertake this endeavor at all um and we are um so indeed we spent the last um couple of years um identifying uh what we've called the verse calculus um there was a paper at um icfp last year about it um which indeed describes a little calculus it's it's bigger than the Lambda calculus quite quite a bit bigger actually Lambda calculus remember it's cor only has you know variables applications and lambdas that's incredibly sparse right verse has about you know eight so the the verse calculus has about eight constructs or something it's a bit bigger um but we've also found a very nice way to then give it semantics in a similar style that we give the semantics of the Lambda calculus how do we say what a Lambda calculus program means we give it rewrite rules in particular beta reduction um so in the verse calculus we give it we write rules two you I think you need to define beta reduction for those that don't know yes so um so it's a bit difficult to do this without uh whiteboard but what is what is a what is a um the own in when Alonzo church first defined the lamb calculus he defined this incredibly tiny calculus which is um just variables applications and lambdas and the only the only rewrite rule is if you have a Lambda applied to an argument think about a function applied to an argument then what do you do you take the body of the of the function and you replace the call with the body having replace the bound variable with the actual argument so you sort of rewriting the function to be you're rewriting the function call yeah to have a copy of the function body yeah so if I have um I don't know if I say um one bat of X is x^2 + 1 then if I see one bat of three I can replace that with 3^2 + 1 if I see one bat of 77 I replace that with 77 s + 1 yeah right so each call is replaced by a copy of the body um with the actual argument substituted for the formal parameter that is beta reduction that step of replacing the call by the copy of the body after substituting that's beta right and astonishingly that single thing is enough to define a computationally complete language that is a you know a a uh it's enough to Define any any computation whatsoever in the you know in the two in complete sense it's amazing that that one rule is enough that that's punching massively above its weight it is amazing right it's you know just gobsmackingly brilliant that Alonzo church right back in the you know late 1920s early 1930s was defining this calculus with with a single rule Define something that was as expressive as a toing machine you know they're into expressive it's not too surprising that we figured out how useful that was from touring side building machines upwards but yeah but it's interesting that now time has rolled on and we've realized that you can go from the maths down to get it to exactly the same place yeah that's right I mean they realized they were inter um you know they were each as expressive as the other they realized that very early on um but the thing about touring machines Is that real machines you know actual you know what what whatever it is you know x86 processors they look much more like touring machines yeah in which the memory is the tape that is mutated by the processor that is like the head of the touring machine so it's quite a close connection between um the touring Machine model of computation and what really happens in our microprocesses yeah yeah and the the sort of functional programming stuff has taken a bit longer to say well it's equally expressive but if we build a good compiler we can map it onto the same x86 processor yeah and that is the that actually is the step we were discussing earlier when we go from Lambda calculus down to lrvm or C minus minus yeah okay so going back to this core which I really want to explore more boiling down we've got to go high level in a second but boiling down this uh functional logic programming language into verse core you've called it you've ended up with a batch of uh you say eight rules oh no that we have I think I forget the exact number do we have alas rather more than eight rules there's more like 20 or so I think I can look at the paper but the I was meaning the the number of syntactic constructs calculus only three or four we have more like sort of eight or 10 I think in the verse calculus okay but this core I mean does it the thing one thing I want to know is can you look at the two different cores and get a sense of what the final language is going to feel like to work with I does does it have is there functional logic Zen the fun the Tower of it buried in this core language oh there is I mean I think I think it's a core calculus is the sort of the essence of what computation means in that Paradigm incidentally the Lambda calculus is a subset of the verse calculus yeah oh is it yeah so every Lambda term is a verse calculus term um so it's just that verse calculus has you know a bit more that doesn't make it computationally more powerful but we know that the Lambda calculus is computationally complete but it but it has these additional you know functional logic features built into its infrastructure and rewrite rules to support them um but indeed I think when you stare at the rewrite rules if you look at the you look at the paper you'll get uh you will you will get you know some sense of you won't get a sense of what it's like to write um you know programs in inversed in the large but I think you'll get a sense of what what um uh what computation means and what what you can say in this little little language and what we're saying is I get the sense is a version of programming where that there's so imperative languages you define what needs to be done functional languages you define what is it feels like the verse you're going to be defining the shape of things as best you know them now and gradually building up a picture of the constraints around the answer yeah that's a bit like that and in some ways that's an even higher level right we we so that functional in functional program we say it's declarative what do we mean by declarative programming like it's what you were saying what is rather than um you know how to compute it so you know crudely you might say imperative programming say how and in functional programming say what and we've you know rather sloppily said well that must be better right but but um uh but in a functional logic language you're even higher level rather than saying um how can I give an example if I say um uh find me the X such that x s is is um 22 then I'm asking you to find the square root of x right so that's a very high level thing right it's not a square root algorithm it's completely non-constructive right it simply tells you a property of the number you want yeah right but it's very expressive that's good right and and you you can see immediately what it does if I showed you a square root algorithm it would be hard to figure out what it does if I just say my spec is uh you know the X such that X squ is um uh 22 then you say ah now I know what you're doing right so this kind of um tell me the properties of the result way of describing what you want a computer to do because after all that's what programming is describe the properties of the result is a rather highlevel way to tell your computer what to do right as we've seen from this x squ thing now um inverse you can say um exists X x^2 = 22 and try to run that but it will get stuck right it's not it's not an illegal program but it but it's one that um it's one that we can't um uh we can't we're not going to succeed in executing right because the the property we've asked it to figure out out is too hard we've asked it to guess a square root algorithm right yeah yeah but if I say um uh uh an X and Y and Zed such that X is the pair y z and um and the first component of X is three and the second component of X is four then I've given you enough information very straightforwardly to solve those equations and say ah why must be three Zed must be four and X must be the pair three four yeah right so the um uh so so versus if if you like um a bit on a higher level in in this sort of Continuum of expressiveness than purely functional programming but not as high level as oh I can just ask you to do you know solve um arit Tre polinomial yeah or Sol format's Last Problem yeah there is a danger that we're going to ask it to um solve the MP complete problem for us right can you give it sales problem as the spec and expect the answers you just magically pop out and that's not going to happen yeah they L apart exactly yeah so what is what is from um a questions this can answer conveniently point of view what is functional logic programming good for ah yes so that's that's a good question right so so then the the um uh uh we got imperative programming we've got functional programm got functional logic programming I've always thought that you know since I was 20 I've thought well functional programming is just the right way to write programs right um and um it was very inspiring when John bachus when he got the touring award gave this lecture called can programming be liberated from the Von Norman style in which he was essentially saying he a famous person was saying look I have no truck with these imperative languages just go gangbusters on functional programming because it's a better way to do the job right in the T TK of telling a computer what you wanted to do functional programming is just better um that is to say you're less lik to make mistakes um you're You' be more productive and um uh maybe our programs be who knows depends how hard we work on a compiler maybe our maybe our programs will run a little slower but maybe not much um and maybe they'll be highly parallel who knows so but it's just a better way to do the job now um functional logic programming maybe that's a better way to write programs right maybe it's just um so I've argued that it's more expressive that to say it's more expressive and a higher level it doesn't necessarily mean that it's a better programming medium because it might be extremely obscure for example or hard to understand programs for some reason yeah so I think that the um um Tim Sweeney my boss and the founder and chief executive of um um um epic epic games um yeah firmly believes that functional logic programming is just the right way to write programs in the same way that I firmly believed you know age 20 uh that functional programing was just the right way to do things um and I've you know placed my bets on that and Tim is putting his money on functional logic programming at the moment I think there's a um uh I think that's a uh the good thing about that is it means that verse takes a view right it is expressing a a a strongly held and well worked out view of what programming should be like um so that's quite exciting for me as a programming language researcher um is it do we know that it's going to be a better way to write programs even supposing programs run fast enough and so forth um is it better way to write programs um I don't know it could be but I think we'll get a lot of the only way we'll really find out is by trying it and that's what we're doing yeah so uh so Tim is convinced I'm um uh I think there's a uh a extremely interesting you know experiment to be done here um and I'm prepared to be convinced um but I'm not yet in the this is just definitely so much better Camp yeah well that's fair cuz um you are on the spectrum of um language researcher to marketing person you're way over the first end of the spectrum right oh indeed yes yes that's right I'm you know my principal goal in all of this is sort of it's an intellectual Adventure yeah but of course the intellectual Adventures are dramatically informed by practical usage I'm strongly motivated by the fact that hundreds of thousands of people using use hll and I'm strongly motived by the fact that motivated by the fact that verse um because it's going to be the programming language in which you um enter the you know epics meta fortnite world and um meterse uh there's a a kind of captive audience there yeah right of actually hundreds of millions of people who will start using verse um and that's very motivating too because I want it to be a language that is you know just works for them and is um uh and is you know smooth and uh and it you know it's just sort of obvious what it does uh whether we'll whether we'll succeed in doing all of those things we'll have to see but that's that's the aspiration and we do have a big user base um yeah it's it's reminding me of objective c when Apple decided that you had to write Objective C to use iOS it's like an entire world of programmers just popped up having to find out how useful and interesting this was and we're going to see the same with verse and Unreal Engine I ECT I think so I mean you can at the moment you can program with unreal using C++ um that has its own barrier to entry um and you can also use a lang a visual language called blueprints um which is uh you know it's a visual language in the sense that you draw boxes and arrows between them and the arrows can be data flow arcs or they can be control flow dependencies yeah but of course there's a there's somewhat a limit about about what sort of programs you can write in blue blueprints so then you have to descend to C++ and versus sort of filling the Gap in the middle because there's enormous numbers of users I mean you've got 300 million people are you know floating about in the um the sort of fortnite universe only a very very tiny minority of those will um bite the C++ bullet yeah but we hope that a lot more of them will find verse a happy place to play yeah I can imagine a lot of people getting started with a visual language hitting the limit but not quite wanting to LEAP up the mountain to C++ yeah okay so let me let me um ask this not asking you to bet on the marketing side but here you are uh an experienced language researcher being told okay we've got this language verse it's a functional logic language we would like you to boil this down something semantically rigorous what's it like to retrofit semantics to an exist language oh well it's quite entertaining actually but and it's entertaining because um Tim who is the progenitor of verse right the the unique single progenitor of verse um he is fundamentally a geek right he CES cares primarily about um Beauty and elegance and you know uh a deep connection to mathematical logic and just doing it right um he has incidentally a inly built a very successful company right so he's also a very good businessman yeah but I would say that his sort of you know genetic core is let's do this right so um and he has been designing verse in his head for the last two decades oh really that just that he's been also yes a long time long time it's also he's been busy making epic successful as well so it's been a kind of you know uh evenings and weekends activity for him for ages and ages uh and so um so my job is as it were to uh to figure out what verse is you know what this thing in his head is and it's full of interesting and original ideas um and then try to make sense of it all now uh supposing we discovered it just doesn't make sense well we we haven't discovered that yet but I'm I'm uh I I firmly believe that if we could persuade Tim that something really didn't make sense he would say oh Japs we can't possibly do that you must have found that as you dive right into the very gut of it you find that actually this piece doesn't fit with this piece unless we amend the language then there must be inconsistencies that you only discover when you're trying to formalize something well we are formalizing from the the bottom up so you know we sort of starting with the you know the core calculus that's what this um uh this paper is about um but um Tim has been thinking about this long a long time so the the the um uh the whole thing the whole enchilada including uh its type system and verification and transactional memory and side effects um and uh classes and inheritance and so forth and backward compatibility the whole thing is Jolly complicated yeah um so um I guess what I mean is once you formalize this calculus and you start building up that Tower are you going to find you end up with something that kind of that doesn't quite look exactly like verse you going to say okay there's a new release of verse and we've got to change the semantics because I don't know so so far we haven't okay so far we haven't G across any ins superable obstacles as it were which I think is also also Testament to um Tim's sort of single single-mindedness um I'm reminded incidentally of rust here um uh rust was a language that was um designed with you know strong attention to sharing and borrowing and linearity and so forth um and but it was designed it was very much didn't come out of a university and a sort of pointy-headed academic it came out came out of a sort of a desire to to do good practice so I was pretty sure that when somebody came to do the theory behind rust right they would find all sorts of holes in the type system right maybe not ones that uh occurred in practice very much but just that there would be you know uh uh holes in which which would allow you to write programs in Rust that simply weren't correct you know that were disobeyed rust's um what guarantees astonishingly that turned out not to be the case Derek Dreer and his colleagues have done a lot of stuff on the foundations um of rust and actually didn't find any major uh you know theoretical inconsistencies um that's amazing that means that the original designers uh had incredibly you know good intellectual not just taste but they actually got it right it's an amazing thing which is Jolly complicated this business about linearity and sharing very difficult to get right um it's it's a remarkable achievement I think do you have any theories on why that might be do you think it's just lightning struck they're just very hardworking and clever or do you think there's something about comp computers keeping us honest uh no I think they probably just well I computers do keep you honest but there's an awful lot of potential programs possible programs that you could write um and many of them you know might have uh you know linearity flaws in them that were not really apparent or don't show up even when you run it so so no I don't think it I I think it's just they're extremely clever and had very very well educated intuitions that they sort of developed over time and so you must be claiming something similar for ver if you're going to formalize these things and finding their what I'm saying so so far as I say Tim's Tim's intuitions have proved remarkably uh you know one might disagree about matters of taste right so is it worth having this this piece of complexity in order to allow that kind of expressiveness you know you can make choices about that but what we haven't found is the thing is just a mess and doesn't hold together at all is just inconsistent in some way right yeah so and I think that is Testament as I say to his single-mindedness and his sort of technical intuition okay well in that case let's talk about climbing this ladder a bit more because um I I absolutely don't want to sit a test on this but I have read the verse Core paper and enjoyed it and you hint that you're going to be climbing up into formalizing side effects and types yeah how's that work going oh well so um let's talk about types because that's really the the next big thing so uh um so versus typee system is very unusual so usually like in language like has school you have the world of terms and then separately have the world of types um and types are you know a somewhat special language in particular you can statically reason about types so the type Checker can say this program is well typed this program is not well typed now in verse uh a type is more like a contract in scheme so a type is actually just a function a function inverse actually um and it's a function which uh either fails in the sense we've been discussing given an argument it either fails or let's say for now or it's the identity function so the int type is just the function that takes a value tests whether it's an INT and if it is it returns it and if it isn't it fails make sense right yeah yeah so it's almost like a filter if you like um yeah just but it but it fails if it isn't the type so um let's see the type int comma int the type of pairs of ins is a function that takes an argument um checks that uh it is a pair if not it fails then applies int to the first component and applies int to the second component remember apply to means check that it has that type because int is a function so so the pair int comma int is also a function is also a type which which does this thing so any so um uh you can Define the type say of pairs in which the second component is bigger than the first oh that's an unusual type that is it's just a function that takes an argument I you could write this function inverse right just a just a function takes an argument checks if it's a pair if it is a pair check the first component is an in check that the second component is in it and then check that the first component is bigger than the second and fail if not so it becomes very much that there's a unification there between Type statements saying we constrain these values to these rules and logic functional logic programming in general saying we constrain these values to these rules there's there's less separation between those worlds yeah maybe but I I think it's I think in the typ connection I think is that uh a type is just a partial function partial in the sense that it can fail so do remember we said failure is deeply built into the fabric and we could make that you know done by some kind of list monad but then it'd be much more Awkward to say and types do this so so here um that's what a that's what a type does but now since a type is just um you know since I can write new type new types are just new functions that I write as a user right so I don't write have a different language for defining new types new types are simply ordinary old verse function definitions but that means that the type Checker has to understand well these ordinary old verse function definitions you've just written so the type Checker has to be to run verse programs exactly the type Checker has to be able to run verse program s yes and of course you might write something that is extremely hard to check right so um uh it would not be difficult to write a program with a a contract you know or type that was sufficiently complicated that it was hard to be sure that the first argument was going to be bigger than the second right yeah like uh I don't know um uh say you had a type that was true only of positive numbers and you said is x squ in that type well yes it is because we know that um if I mean if x is an INT we know that squares are always positive yeah but that's a property of numbers right so maybe the verify knows about that property of numbers but you can cook up some more difficult property of numbers the the the so you can see You'd rapidly get into arbitrary theorem proving yeah yeah right so instead of calling it type checking we call it verification okay and the idea is still going to be that just as the the purposes of type Checker is to say it eliminates certain classes of bug so the slogan is well typed programs don't go wrong where going wrong means some particular class of Errors like adding an integer to a booon right hascal means you can't that could never happen at runtime right yeah so if you imagine a runtime which manipulated integers and booleans are sort of tagged values so you could tell them apart at runtime and then your addition operation did a runtime test you would know that that runtime test would never fail yeah right and therefore you can emit all those one-time tests and indeed the tags that distinguish integers from booleans right yeah good now in ver verse is going to be like that in the sense that um verified prrams don't go wrong right so if the verifier says thumbs up your program is verified then a certain class of Errors cannot occur and the implementation could be corresponding more efficient but it's possible that the verifier might say I'm sorry I can't prove that your program verifies because it requires me knowing say that u x squ is always positive and I haven't been taught that yet so over time I expect the verse verifier to get more powerful more smarter right yeah as it's taught rules for more and more complex time exactly but there won't be unlike hascal there won't be a clean bright line between programs that can be verified and programs that can't yes right because it'll be a function of just how smart has the verifier become on any one day we might hope to characterize as precisely as possible where that boundary lies but it is a boundary that will move over time do you think that verifier will ever be user manipulatable in that you will write more rules for the verifier again in oh possibly um yes I mean you want to be a bit careful because if the user adds a rule that is simply false then you know the program might crash yeah and it might crash in a truly horrible way right so um like it might just simply be a seg fold um yeah so you'd want to be a bit careful about allowing you but but if you um uh if you essentially add some you know some new things to the verifier that says make this part of the trusted code base if this is wrong all bets are off then that's a POS imaginable possibility yeah yeah okay do you think I mean I'm thinking verse if if the verifier is just more verse functions yeah this leads into side effects I could in theory Define a type which was the the type of all strings which are a valid username in my database yes that's right that might very have time or space and who knows so so I think for us types are going to be pure functions yeah so now we need an effect system right to ensure that to um so that we can check that um uh types are pure functions and indeed verse has an effect system [Laughter] too so you can see why it gets complicated yeah yeah where are you on um formalizing the effect system and are you taking a similar approach to hasc not similar approach to H because um has uses these monad things right we don't want to you get selled up with monads and types um so uh and because um yes from a programmer convenience point of view just being able to say relying on sort of left to right sequencing for side effects is extremely convenient um so uh and language is broadly classified to language like that force you to do you know do use use monads for anything side Effy and that's a bit of a hair shirt but um it's an excellent discipline in my humble opinion but but it's a it's a design choice and other possible design choices like verse to um uh to make a not to make such a strong syntactic and type level distinction between side effect and computations and and not ones but instead have an effect system that says that the verifier will for any for any term it's going to be able to um check whether it's pure and you can see fundamentally you know crudely put that's not very hard right is this expression pure well does it use any side effects directly and does it cause any call any functions that can use side effects yeah right so at its crudest level you can see there must be some kind of Purity Checker that isn't very hard yes right but to do a systematic job of an effective system is indeed um quite a challenge and that's part of what we're up to at the moment yes um I should say by the way um that Tim has an implementation of all of this um embedded in you know his his C++ implementation the vers he's written in C++ a compiler he's been developing over the last 20 years and it's it's only five or 10,000 lines of C++ it's incredibly small he is a virtuoso C++ going um but uh um but I think he would be the first to admit that it's um you know it makes an amazingly good stab at all of this but it is not uh you know uh tight and elegant and complete and definitely right um in every particular so it's an excellent stab and it means that we have it's it's a way that he has been using to educate his intuitions to go back to your questions about computers keeping you honest I think building that has indeed educated his feedback throughout right but where as it were we're not building directly on that we're trying to use that as a source of inspiration to do this more foundational thing that we're talking about yeah and that presumably is going to occupy you for a good few years to come um I think so though in some the the the um the scary bit is that we are designing the airplane at the same moment as we're launching it into the sky right because there is a there is a verse that has been released as a product if you just you know Google for verse language you know epic you'll rapidly get to it yeah it is a um it doesn't have any of this functional logic stuff in it but it does have other things like classes inheritance and modules um so it's a so it's a language that um uh is already usable for building you know games and um creative stuff in the sort of fortnite Universe um and programming gets unreal so it's already being Us by thousands of people so we're doing this foundational thing on the side and then so we sort of launched one to mix metaphors we launched one rocket you know into orbit and now we're you know building some more elaborate and sophisticated thing we're going to launch into orbit then they're going to join up in the sky and hopefully we we will um so so the scary bit is we need to do that quickly enough um that you we can't go on for years and years and years doing this foundational stuff because um you know the the the airplanes flying in the sky we want to we want to meet up sooner you know within a year or two rather than in 10 years so right yes I think working out all these technical details and writing papers about them will occupy us for several years um but there is a pretty big urgency at the same time that I personally find a bit scary I can understand that and do you one last question then do you think that do you think that these ideas will be pinned particularly to verse or they juicy things that other language designers can pull out of this and steal oh well um I mean the one of the whole purposes of writing the paper is to distill the essence right so of course any particular language implementation will be encrusted with particulars right hascal is no exception by the way it's an enormous language and with a lot of detail to it and you need to get to know it's ecosystem and cabal and stack and um hls and on and on right so and vers will similarly be encrusted with lots of stuff but if we want to um you know the purposes of of the purpose of uh sort of the research um Enterprise is to isolate the key ideas and distill them into a form that they can be digested by other other language designers and academics right right and so indeed it is my goal um that um our you know our first paper and hopefully subsequent papers about um verse and the verse calculus will be influential well you know will be much more than just saying well this is how verse works right will but they will rather embody and and make precise a collection of ideas that may you know I hope who knows um have be influential in their own right yeah yeah as a language research your um your goal is to make the ideas bigger than any one language Oh indeed yeah indeed I often when when talking to um research students about writing papers I often say that you know that the the the the uh the least durable thing that we do is to build artifacts you know like compilers in my case um the most durable thing we do is write papers right because those papers will be um you know in in the best case will be uh read and will inform stuff uh decades later when you know when the the particular language implementation is dust I mean just look at the fact that we're still you know Alonzo Church's ideas we are talking about in the podcast today which is you know a hundred years since he was first thinking about them that's amazing yeah yeah when we go to a concert hall we listen to people reading Mozart's papers he called them Symphonies but they are you know his you know intellectually written down stuff and uh symphony orchestras read them of course there's a great deal of expressiveness and Nuance of what they do but the fact is that mozar infected our brains with an idea that we still find rewarding um yeah and I think the the um you know the purpose of uh uh research papers in some ways is is to infect the brain of the reader with a an idea that is so persuasive and seductive and exciting and creative and interesting that they can then use it to inspire and build on new things that's the that's that's that's my hope yeah yeah we had um we had a guest a couple of weeks ago who was um hoping to build a version of that would last 100 years but I and I I I um I certainly hope he succeeds but what I can definitely see as some of the ideas you've been percolating up still being discussed a 100 years from now and inspiring new languages yeah I think it's I think yes languages are surpr can programming languages actually are an example of something that can be surprisingly long lived like Cobalt is still alive and well yeah but not in a good way um I think right so um you know it's not it's not Cobalt is no longer a source of inspiring ideas just that we have so much code written in it we have to still you know run those compilers um yeah so I suspect that if um you know hcol is still around in 100 years it would be not in a good way right whereas I hope the ideas might be you know visibly embodied in some more wonderful thing that we have worked out by then yeah yeah you'd hope that the ideas there are fundamental enough that they'll outlive the programs and us right which actually leads me to the other Big Arm of your work which is passing the Big Ideas On to the Next Generation tell me about that yeah um Computing education super important and a bit and we I think we as a you know as a what's the word as a professional Community um we owe it to not to our discipline in particular to our children to be thoughtful about what are you know what should our children be learning about our discipline um and um in a in a way that would make them you know empowered citizens and uh ones who think it's just the most exciting thing since life bread which it is um and let's not put up with uh an education that sort of substandard in that respect which is um so so I think it's there's an Endeavor that we should all be involved in in some way where would you go with that because I'm thinking of my own children's Computer Science Education it's a bit of python a bit of squeak and too much Excel and PowerPoint yes well it's probably a bit better than it was right so um when we started Computing at school C the um organization that is is sort of behind a lot of changes in the curriculum um the the national curriculum said you should do ICT information and communication technology it was very technology focused um and that is it was all about artifacts and not about ideas to go back to that conversation right um and uh and it was often no more than learn PowerPoint and Excel Excel if you were lucky B would so then um over the the next sort of five to eight years following about 2007 we managed to um re reposition the UK's National curriculum to State explicitly that children should all children should learn the fundamentals of computer science in the same way that they learn the fundamentals of natural science so that reimagines computer science not as a narrow sort of rather vocational operational skill that's useful for operating computers but rather as a foundational discipline like maths or like physics um that an elementary understanding of which is kind of essential for understanding the natural world that surrounds you and being a citizen in it who can you know have some agency right some ability to influence events some understanding of what's going on ability to make informed choices and to make well judged you know well judged decisions do you think there's a parallel I mean one of the big reasons we teach children science is not so they can use a buns and burner but so they can think critically yeah and but it's not just it it's a bit more than just think critically they also need a knowledge base if you knew nothing about heat combustion mass mass velocity nothing about any of that but you were very good at critical thinking right it's just your you know your logical processes were good but you had no knowledge that wouldn't wouldn't be any good right you need to have an elementary you know understanding of how to think logically yes the scientific method all that but you also need to know some science facts otherwise how can you possibly make informed choices about I don't know global warming or about whether it's safe to replace the you know to unscrew the the front of your electric light switch Yeah so um in the same way I think for um I I think the sort of critical thinking and you know logical thinking absolutely part of computer science indeed computers are rather good at training you um to think logically because they they are so non-judgmentally but absolutely brutally cruel about exposing flaws in your logic that program just doesn't work um and it doesn't say oh I feel sorry for you today I'll make it work which is good when it's controlling the plane that's about to land you yes um so um but so I think just as you need to I think all children should learn some some Elementary aspects of Natural Science I think they should learn Elementary aspects of computer science so that they're in a position they have enough knowledge base as well as um logical thinking and skills to make well-informed choices about um the digital world that surrounds them so pressingly and intimately and practically for you is that influencing the curriculum at the national level yeah absolutely it is I mean as I say it's completely transformed before it said you should learn about digital technology now it says all children should learn the fundamental principles of computer science which is a huge challenge for schools if you're a primary teacher you might you might think computer sign I mean at the time it was put in the National curriculum you know we were not long past the time when people thought well computer science that's just a university course isn't it yeah and then suddenly we say oh no primary school children should have some Elementary understanding in the same way that have you know their understanding of physics is not very deep or biology right but they but a primary school teacher sees themselves as you know part of their task is to give an elementary understanding of Natural Science and so so it's a big challenge there because um we uh uh it's easy enough to say uh children should get an elementary understanding of the principles of computer science and should have practical experience of writing programs um because that's that's like the lab work of the subject if you like it's yeah programming is to computer science as lab work is to physics you know it's really important um yeah it's easy enough to say that but to turn it into a practical reality you've got to say well okay so specifically what should children learn at primary school and how should they learn it in what order should they learn the concept cepts um and and all and then you know even once you got that all laid out you got then got to say and how can we train teachers to be good at doing that right um same at Secondary School seems like one of the hardest tasks yeah so so it is so the you know that ever since 200 this became part of the national curriculum which was in 2014 um Computing at school this sort of G gorilla um movement in in partnership with the BCS the professional Society for computing this country um the British computer Society Charter Institute for it been we've been working together to answer all of those questions um and the government uh having changed the curriculum then waited five years but eventually they did hoay um uh find some money actual money to build something called the national Center for computing education which is a national teacher professional development organization aimed at upskilling teachers and generating the teaching resources and materials and curriculum sort of sequencing um that we were discussing so that's amazing that was that started in 2018 I became its first chair oh wow it's all it's all and it's on its second iteration now and I hope that there will be a third impressive quite a lot has taken place in this country which is not to say job done and not at all to say job done because um it's a big job right to um we are far from the the the place in which every child gets a great Computing education yeah but circling back to why the audience for this podcast might I would like to say might be interested but and I and I would I would like to say should be interested is that I think this task the one that I've just described about saying what should we teach exactly you know when and how um and with what materials um all of that is too important um to and too just to leave to school teachers to make up for themselves or even from some even if government funded guango like the national Center of Community Education I think we as a technical community should be involved as individuals and our companies should be kind of institutionally involved in trying to make Computing education into just great across the whole country in every classroom okay so I would understand if I want to if I want to move verse forward in some way I would go and download it write some code in it or download the paper and try implementing it yeah how do I I have no idea how I would get involved in moving the education of children in Computing forward in the way you're describing how would someone get started in that project yeah um so the uh uh I can give you the first step is join Cass right um Computing at school um K it's many of the members of Kaza teachers but um there's also you know a third to a half our it Professionals of one kind okay and then there are various sort of thematic interest groups there's one on AI and there's one on primary that you could um join um and um uh so joining CM go to the C National Conference just becoming better informed about it there probably a um a cast local community a sort of physical getting together of teachers in your area so going to one of those would mean you face to face met with some actual live teachers who are grappling with this stuff because for me it's it's not so much about um doing some grand national scale thing I think what we as individuals and even companies did to do is just get stuck in locally that means that means meeting teachers and not saying no I'm going to tell you what to do but getting along that alongside them and saying and see you've got a you know a a a um a exciting but challenging job here right how could I help you yeah is there any way in which I could be helpful and there is a way in which I can help without necessarily being in a room of 30 children yeah for example you could be a um there's a uh you might be a mentor to a teacher or possibly sometimes a mentor to a child particularly at the latest stages like a sixth form yeah yeah so C has a number of ways for um professional to get involved in in this kind of thing I wish I could be I I wish it was oh you can become a stem Ambassador what are stem ambassadors so that's um uh you can just Google for stem Ambassador but basically means someone who's sort of on a you know a national register of people who are willing to help in some way and schools will when they looking for speakers will often look for stem ambassadors and also when you're a stem Ambassador they will also do all the um crb checks that mean that you are uh you know all the legal obligations are done so you can you can go to a school right in person yeah they have restrictions on that quite sensibly exactly yes so and all that is kind of done by being a um by becoming a St Ambassador so um it's it's it's really hard to give you a crisp answer for how to get involved because education is complicated and schools are different um but you you're you're saying you've got children and they're at a particular School you could do worse than find who is who is the head of computing in the school say could I come and talk to you about what you're doing and you know can we can we talk about you know is there any way in which I or perap perhaps by recruiting others to the task could be helpful and it might be anything from well just come and give a talk about um what what you do in your life yeah because many children think that um Computing is all about um uh you know spotty youths in in windowless basements staring at glowing screens right but actually it's a rich diverse um creative discipline which people do lots of different things and you um your your you know uh um role as a podcaster is very different to um the you know the spotty person in a bundus room writing weird weird Cod right you're a professional Communicator right so the Computing is a very diverse profession um uh so that's one one thing that a teacher could find helpful right because they want to give their if they say to their children look it's an interesting and diverse profession that go yeah yeah yeah right but when a person comes and can speak in a you know persuasive and articulate way about the richness of the subject and all the things you could do that's much more compelling yeah yeah yeah okay um final question because this is an international podcast is um are there do you know if there are equivalent um organizations in say America oh yeah definitely all around the world so um so just to say Cass is UK trick but you can definitely join Cass from anywhere right so I have quite a few International members so that's and that just means you have access to you know you can talk to other members of the community it's we call cast a community of practice right it's but think of it like here's here's a good model it's like an open source project right so right if you if you uh I don't know subscribe to The Economist you pay them a subscription in exchange for a service if you join the GHC open source project you don't pay anything you bring the contributions that you have um which you give for free and in exchange you get the um you know richness of the community they there you get to you know get all of the free stuff that that group of people has produced right so it's not it's the one is a transactional exchange the other is more a um shared Community Grassroots bottomup um gift economy yes C is the gift economy model right very much it's not a subscription you pay to get a service you just become part of a community um and then and of course that means you make of it uh what you can um so going back to your International question so so people abroad who can um uh you know can still join Cass and and anywhere there will be a local version and well probably you if you're in particular country and you need help finding out who then I can probably help you because I've talked to people in lots of different countries at various times but in the America there's something called the computer science Teachers Association um csta which is a sort of equivalent of Cass a little bit more teacher Centric than than casses but um sort of equivalent of Cass in the USA uh and I think in every country there would be this activists who are busy trying to do exactly what C is trying to do here cool okay I'll put links to all of that in the show notes and hopefully some listeners will get involved yeah that would be great I mean I think it I do think it's a it's exciting and rewarding because everybody cares about education right you could can't find a person on the planet who says well education who cares just doesn't matter right well maybe there are a few but not many right so um and also for everybody listening to this podcast you probably think um you know computer science programming this whole world this is just the most exciting thing that's why I've devoted my professional life to it happily it's well paid as well right so yeah so I just want to share that oh and you also have a strong idea of the you know the richness and depth and excitement of the discipline I want to share that with our young people so they don't get the wrong idea and so that they do have plenty of input and opportunities to you know find good on-ramps into Computing as a you know so so that all of them end up well informed able to make good judgments and some of them end up um particularly underrepresented groups like women uh find it you know find a a pathway into Computing as a discipline because I think we need lots of people there and the better informed the better yeah absolutely and we need to help we need to help we can't just leave it to the education system to do they they've got the message they're trying hard but they're Educators right they they need the subject they need subject expertise and that's us that's us yeah good okay ideas and education a perfect note to end on yeah great Simon pton Jones thank you very much for talking to us it's been a lot of fun thank you right Simon thank you very much if you want to get involved in Cass in the UK or csta over in the state there are links to those organizations in the show notes and if you're not in those countries but you know of a similar organization in your country please drop me a line I'll gladly add the links for wherever we can uh how do you drop me a line you look in the show notes my contact details you can find me on Twitter LinkedIn masteron you can leave a comment if you're on YouTube you can leave a like if you're on YouTube rating if you're on one of the audio ones you can subscribe and rejoin us next week or you can share with a friend and share the love and knowledge um what else is there to say I have started scratching out an evaluator for functional logic programming in Pur script of all things I make no claims about how far I get but it's good brain food and I've been enjoying it so if you want to do something similar you'll find a link to Simon's paper that explains it pretty well for an academic paper well from an academic paper in the show notes and that should give you plenty of brain food and if you want it plenty of homework until next week I've been your host Chris Jenkins this has been developer voices with Simon pton Jones thanks for listening