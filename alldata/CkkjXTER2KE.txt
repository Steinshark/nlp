in this video we're going to be learning how we can create this chatbot in Python and it's quite special for two reasons and the first reason being that I actually asked gpt4 to generate this for me and I slightly modified the code to make sure it could be a suitable tutorial and the second reason this chatbot is special is because it's going to learn from what we type so for example if we type in hello it's it might not know what to say back because it's never seen that before but then we can teach it by giving it a response such as hey there and the next time we try to type to our bot and say hello it's going to be able to respond to us hey there hello there and maybe it won't understand that either so here we can say hey again and the next time we say hello or hello there mate it's going to be able to learn from those responses and the best part about this bot is that if we rerun it and we say hey there this time it's going to remember the responses from the previous chat the way we're going to store that is actually by creating a Json file and each time you teach the bot a response it's going to automatically add it to this Json file so if you're learning python this is going to be a great project to understand some of the basics and in case you get lost during any part of this tutorial I put the link to the GitHub repository in the description box down below so you can just copy the code and play around with it but otherwise I'm going to stop this script and start a new clean project in Python 3.11 in pycharm and you can do this in Visual Studio code it doesn't matter where you do it just make sure you have a code editor that can help you so the very first thing we need to do is create a knowledge base and we're going to create a new file called knowledge underscore base dot Json and inside here the only thing we're going to create are some questions so he'll type in questions and that's going to be an array and you can leave that empty because it's going to fill out itself as we start adding some responses and you can ignore all of this gray stuff it comes from copilot Auto generating code for me so it's not something you need to concentrate on but now if we go back to main and since we have this knowledge base now inside our project we can start creating the rest of our project immediately so first we want to import Json and then from difflib we're going to import get close matches which is going to allow us to try to match the best response for the inputs that we give to our chatbot but the first thing we need to do is load the knowledge base from a Json file so here we'll type in Dev load knowledge base and inside here we need to specify a file path which is going to be of type string and that's going to return to us a dictionary and inside here we'll type in with open and we want to open the file path in read mode as file then the data of type dictionary is going to equal json.load file and right below that we're going to return the data so that will load our knowledge base into the program next we also want a function that's going to save the knowledge or save the dictionary to the knowledge base so that the next time we start the program we will have the old responses also in the memory so I'm going to create a function called save knowledge base which is going to take a file path of type string and some data of type dictionary and inside here we'll type in with modern Capital but with open file underscore path in write mode as file we're going to insert that data into the Json so json.dump data file indent to 2. so that's going to put our Json or our dictionary of responses back into the Json file so that we can load it later once again below that we're going to have a function which is going to find the best match from the dictionary so find best match with user question of type string and questions of type list of string and that's going to return to us either a string or none because there's a chance that what it's looking for inside the knowledge base might not exist then we need to create some matches which is going to be of type list and that's going to get the close matches which is the function we imported up here and it's going to take a user question followed by the questions and we're going to have an N of 1 so that means it's only going to return the best answer possible if you have multiple such as two or three it's going to return the top three answers but we don't care about the top three answers we want the best answer possible so we're going to leave n at one and then we need to specify a cutoff which is kind of like an accuracy so if you put 0.0 it means it can return to you something that's not even related but 6 is like 60 percent accurate so if the response is 60 similar similar in other words it's going to allow that and it's going to return that response to us otherwise it's going to return none to us and at any point you can actually hover over get close matches to see the documentation so you can understand a bit more about what these optional arguments actually do so what we need to do next is return the matches at the index of zero if there are some matches because this can be empty else we're just going to return none now we also need a function that gets the answer for each question so here we can type in get underscore answer for question and it's going to take a question of type string a knowledge base of type dictionary and that will return to us a string or none based on what is available inside the dictionary so next we can check for Q in knowledge base of questions we're going to check if Q at the index of question is equal to the question then we can return the Q dot answer and I think I'm actually going to disable the completions with copilot because it looks like that is getting quite annoying but with these four functions being done we now have everything we need to create this chatbot that can learn from us all we need to do now is create our main script and I'm just going to call this one def chatbot and right below that we can get started by getting the knowledge base so knowledge base type dictionary is going to equal load knowledge base and in here we need to specify the path of the knowledge base which is knowledgebase.json next we're going to create an infinite Loop and inside the infinite loop we're going to get some user inputs so we can chat with the chatbot and that's going to equal an input of U and if the user input dot lower is equal to quits we're going to exit the program so there is a way to exit out just type in quit and the loop will break otherwise we're going to continue with this and we're going to get the best match so the best match which is going to be an optional type of string or none is going to equal find best match and we need to get the user input so we want to find the best match for the user input and we need to create a list comprehension here so the list we're going to look inside is the question is the queue of question for Q in knowledge base at the index of questions so that's going to search for the best match inside our Json and again there's a chance that there might not be a best match so we're going to get none back if there isn't so next we need to check if there is a best match we're going to do the following we're going to say answer of type string it's going to equal get answer for question of the best match and the knowledge base and we're going to print that answer so the bot which is a formatted string bot says the following answer else we're going to print that the bot says I don't know the answer can you teach me question mark and then we need to get the new answer of type string which is going to equal input and here we'll type in U once again because that's where you type and here we're going to type in type the answer or skip to skip so everything we type in there is going to be registered by the chatbot now if the new answer dot lower is not equal to skip then we can do the following we can say that the knowledge base at the index of questions is going to append the new answer and inside here we're going to append question which is going to have the user inputs and the answer which is going to have the new answer so that's going to be added to the knowledge base then we can type in save knowledge base and here we need to paste in the knowledge base Json which has just been updated and the knowledge base then we can print that the bot says thank you I learned a new response and with that being done we can actually get out of here and create our if name is equal to Main Check and we can run this chatbot so here we'll type in chatbot and that's everything we need to do to make it work so if we run the chatbot now we can say something such as hello and I made this mistake again where is it so up here I'm going to add a space to input because I absolutely hate when this is attached as you can see it so we're going to rerun the program and now we have a bit of space there and we can say hello that's going to say I don't know the answer can you teach me so we can teach it and we can say heyda so the next time we type in hello it's going to be able to respond hey there and the best part is that it has been added to our knowledge base so we are slowly training our chatbot just by talking to it and we can type in something such as how are you and it's not going to understand but we can say good thanks for asking and now it's going to have that as a response and we can then say how are you mate and when we tap in enter the bot will respond good thanks for asking we can add an ellipses it won't know that and we will just type in ellipses so each time you type in ellipses or ellipses it's now going to respond ellipses and we will slowly train the bot just like that and now in our Json file we have everything we need and did I spell that wrong says replace eclipses you are great spy charm thanks for that suggestion but I'm going to disregard that but here is the knowledge base and each time we rerun the program we're going to be able to actually access that knowledge base but that just about covers everything I wanted to talk about regarding this chatbot and again Chachi BT did generate most of this so I just thought it would be fun to share and actually explain how it worked but anyways with all that being said as always thanks for watching and I'll see you in the next video