all right turbo repo is a high performance build system for Java script and typescript okay hold on I have to get that out of my mouth you know I I said JavaScript and just right when you say that I immediately tasted like stale chips it was like uh like they're kind of wet it's disgusting I don't want anything to do with it we're reimagining build systems taking inspiration from tools like buck and basil is it buzzell or is it basil is it bazel I tasted regret mostly it's what the form of regret tastes like is eating stale chips at night in your bed okay that is the feel or is the is the taste of regret buzzel okay it's buzzell uh to make it accessible for everyone at the heart of Turbo repo is a very simple idea never do the same work twice I like that we accomplish this through incremental builds parallel execution and remote caching parallel execution is not doing the same work twice just throwing that out there but I like I like where this is going I like what's happening in npm run build yeah npm run build cash got em uh npm run build cash got em wait why is this one faster than these two oh 38 minutes and nine seconds Oh I thought that was 38 milliseconds uh as he uses as grown and our product needs uh have shifted we decided to start incremental migration from go to rust in the 1.7 version in this article you'll learn about our motivations for this migration and the problems we are finding rust solves for our team this is interesting the original uh decision for Turbo repo to use go followed in the footsteps of es build as the JavaScript bundler written and go es build is fast and avoids much of the initialization overhead of node.js additionally goes developer experience is tailored for iteration something we needed as we learned more and more about what developers wanted from Turbo okay okay that seems reasonable I think that's a reasonable choice in the early days of Turbo repo these properties of go gave us exactly what we needed for the project to be successful however as turbo repo code base has scaled and merged with turbo pack goes begun to underserve both our core team and users in the area that matters most to Turbo all right comparing go and rust uh we've been working on several other migrations lately and have enjoyed opportunity to refine our approach doing a mock migration for the BBC's open source front end from react to nexjs dog fooding the next js13 app router for forsell.com I actually think this is one of the best ways to develop anything right here if you can dog food your own app this is the best way to do it dog food for those that don't know it just means that you are building something that you use uh and so that's a very important uh you know fast because a lot of times people build products they don't use themselves and there is something really bad about that and any major technical migration there's a lot to uh to consider and the decision shouldn't be taken lightly in particular a language migration is quite demanding asking you to wait to Dimensions like the strengths weaknesses and community of a given language according to your specific business and Technical context in our case we need to compare go and rust to figure out which language is going to serve Us best okay excited I'm excited um and you've never used dog fooding really people never use dog fooding dog fooding is like a total normal term is this one of those things that uh programmers say that people just don't ever say is that what's happening right now never oh my goodness oh my goodness okay hold on I gotta do a pull I'm too I'm too excited to know the answer to this real talk how many people use the term dog fooding uh herd of dog food before today yes no there you go I want to actually know because this is interesting this is a term I use all the time oh the demand dies I'm actually I'm personally shocked that this exists that 64 have never heard this you think I'm getting trolled by the poll instructions is not clear dogate by keypad oh [ __ ] okay we're reading this shut up uh let's see uh Disney go favor Simplicity over expressiveness as a side effect of that decision means uh more errors are caught at run time where other languages might catch them at compilation with a service running in a data center you can roll back fix and roll forward at your convenience but when building software that users install the cost of each mistake is higher absolutely I this is a great this great call out right here I love this kind of thought process because it really changes how you approach software is how easily can you revert uh for us it's worth using tools that prioritize upfront correctness we fully recognize the mismatch of ghost priorities and what we're prioritizing as a problem that we've created for ourselves yeah the nice part about goes that it has a much more complete type type system than typescript but it still uses a bunch of this interfacing for everything and that is problematic in of itself the rust language and Community has prioritized correctness over API abstractions that trade-off We Care uh a lot about when working with Process Management file system other low-level OS Concepts shipping software to our users machines love this this is all beautiful this is all beautiful this means additional complexity is surfaced into our code base but it's necessary complexity for the problem we're trying to solve I wonder if it is technically necessary because if you're trying to solve this with another language how hard is it I find myself battling so many little errors that I don't really realize are happening because I'm having to use typescript in some ways you know what I mean rust type system and safe features allow us to put guardrails in places our code base where we need them the languages expressiveness allows our developers to encode constraints that catch errors at compile time rather than GitHub issues I like it I like that ghost performance for Simplicity at the file system was created creating problems for us when it came to file permissions absolutely go let's uh user set Unix style file permissions code a short number that describe uh who can read the file yep you can do a uh you can do a little octal right little zero leading number right while this sounds convenient this abstraction does not work cross-platforms Windows doesn't actually have a precise concept of file permissions surprise surprise Windows sucks uh go ends up allowing us to set a file permission code on Windows even when doing so it will have no effects so one thing I like to do personally is just never support Windows okay it's that simple use a unix-like system or get the [ __ ] out of here just get out of here stop go use Windows for gaming okay windows for gaming is great I love it okay I love it all my software I write at Netflix I have zero support for Windows okay zero support for Windows I'm sorry I'm sorry I'm sorry suck it suck it suck it suck it suck it hey most people in here are a bunch of Arch Drive Arch users anyway so it's not like I'm really offending anyone I'm sorry for the normies that are using Windows all right it's wsl2 is great okay tough guy I get it WSL news great all right but I do use Windows for gaming and for streaming so I'm actually this is a streaming computer the one I'm looking at right now watching your little text run by shut up shut up on contrast robust explicitness in this area not only made things simpler for us but also more correct if you want to set file permissions code in Rust you'll have to explicitly annotate the code AS Unix only if you don't the code won't even compile on Windows this surfacing of complexity help us dude I love this tell me this is not amazing about rust right like this is a really important point that I think that people don't quite catch which is that like these type of little catches make your life so much easier despite the fact that they're kind of a pain in the ass to always have to deal with you just don't have to deal with them as much and this is really important facet of uh of Russ I think Russ has a fantastic ecosystem of high quality open source crates absolutely they have clear focus on what they care about an example of where to benefit from this alignment is when we have to interface with Native libraries written in C or C plus plus as we built out turbo repo we've started to rely more often on Native sea packages like Aziz Z stud as a stud uh a library that helps us compress our cache files interopting uh with these native libraries and go requires us to use seago which switches from Pure go tool chain to a much lower C tool chain moreover the switch is global process which means that if we use a single native Library we have to build our entire code base with sigo damn in Rust this interfacing with Native C libraries is far more contained libraries such as buying gen or cxx creates oh CSC sacs uh creates safe rappers and don't require Global changes to our builds even better many libraries come with these rappers already generated for example we ported git interfaces to get to create get two interfaces with a C library lib get to I dude I use lib get to it is confusing as [ __ ] just confusing underneath the hood but exposed safe idiomatic arrest API this allows us to get the benefit uh of both rust and sea ecosystems while maintaining a great internal developer experience dude dude lib get lib lib get to dude damn you should use live get three internally uh we share code bases that work closely with the turbo pack team for their work Russ was a Clear Choice from day one it let's see this meant that we uh that as we both continue our work on building tooling for JavaScript yeah I'm okay code bases we're solving the same problems twice once and go and once in Rust absolutely getting aligned means both teams can shift Faster by sharing development and maintaining of common Utilities in our problem space for instance we are taking a lot of inspiration from TurboTax team when it comes to file watching so we can build a feature for smart hot reloading across workspaces sooner oh yeah give me that hot reloading baby Russ makes our core team happier let's go that's right the rust affects people all right another great perk our team wants to write rust it's a language that solves what we care about and brings us joy let's go Russ chilling 2023 Russell the fact that we enjoy writing rust is valuable is valuable by itself in more ways than one happier developers deliver better software your brain is better at complex problem solving when it's happy if you're if we're happier while we work we're much less less likely to burn out absolutely this is good call out rust efficiency means less energy consumption letting us do our part in global sustainability you know that's something that people never talk about which is you should have some level of care right you shouldn't just waste resources you know and and writing stuff in typescript because it's easy you're just like massively overusing resources uh looking at the past seven years uh stack Overflow survey results were not alone absolutely people love rust uh we also made this Choice uh with future developers of Turbo repo mind web developers are strongly looking towards rust as a second language to learn after oh okay I'm making it more accessible for those coming from tooling images and this enables web focused developers to be able to get involved enabling the turbo Community to grow absolutely continuing the migration we're migrating incrementally so it's not completely a complete rewrite overnight right now we have to well we uh oh my goodness we have what we call rust go rust sandwich mmm I like a good rust go rust sandwich you know I mean rust is the entry point allowing us to choose whether the implementation for a particular command is in rust or go our go code base is able to call rust code 2 giving us pass to keep go around but always uh but always be able to get to rust check out the turbo ffi crate oh cool uh we're excited about rust has done already unlocked for our teams and can't wait to finish the oxidation with carcinitization of our Odun you know people often mistake that that rust is written after the thing that happens to metal it's actually about a fungus okay the fungus it's actually you should be doing cordyceps in here okay making a little cordyceps joke if you're a high performance engineering team building uh developer tooling or doing systems work and you're debating rust or go we hope our experiences can be helpful reference for you those are some big words I know turbo 18 okay there we go I think one thing that they're really missing is that they're not showing they say strong effectively strong ecosystem and developers really like it and it catches bugs up front but the fourth one is that I think it's actually exceptionally easy to hire for rust I genuinely think if you have a non-web three company you would have a line out the door out the back into the parking lot and into the alley where people are getting shanked just to have a chance to have a rust job honestly I think people want it bad and making that choice is a huge hiring multiplier whereas right now if you if you create JavaScript it's kind of like people expect JavaScript but no one really wants or loves the job in JavaScript they want to work in a specific technology I want to work in work world it's all all out um the library right so it's like spelled react solid uh whereas with rust it's like it's it's about rust the language which I think makes a huge difference completely that's it you can cut it now bye bye hey the name's the private gin like And subscribe I got him say hi YouTube say hi to YouTube say hi say hi say nice things I mean it right now say nice things about YouTube right now say it if you know say nice things YouTube you suck no you suck nice things about YouTube gosh guys are jerks all of you