if you're looking for nice projects to do to dive in to become better at coding I have a whole list of suggestions for you today at least some of these projects are not that hard to do and they could actually make you some money now getting started with a new project takes some preparation I have a free guide for you you can get this at iron.codes slash design guide it contains seven steps that I take when I design new software and hopefully it helps you avoid some of the mistakes I made in the past I under gold slash design guide link is also in the description of this video now how do you determine whether project is interesting well you could look at a couple of different things like for example real world relevance is the project on climate change versus let's say Mail stamp collection another thing you could look at is whether there's a community of other people working on this project so that you can talk to them ask them questions and learn from them as well or you could look at whether the project is aligned to your current skill level is it something that you would find very easy to work on or is it something that's going to be very complex for you to get in or another thing you can think about is whether you find the topic personally interesting now of course I can't really judge what you find personally interesting but what I am going to do is give a 5 star rating to three criteria for each project that I'm going to talk about the first criteria is how easy it is it's easy to get something working something that's usable or is it going to take a lot of work for you to build something that actually does something useful the second criteria that I'll look at is how expandable is the project does it have a very limited scope or can you actually continue building and expanding on it while you're also learning new things and the third one is can you make some money with it and now making money in itself is maybe not really what you're interested in or maybe you are I don't know but if you can make some money from it it can sometimes help for example you could invest in designing a website or a logo or help the project reach more people so that it's actually being used more and if you can make money off a project then that kind of helps establish that so that's what I'll also look into so I'm going to go through this project that is I'm going to start with a few pretty standard project ideas and I have a couple of different ones and then I'll end the list with a few things that could actually be useful tools to developers or to yourself when you're developing code so first project idea is to build a simple calculator you can start with very basic arithmetic operations and then move on to more complex things like trigonometry or logarithms and things like that you could build a GUI for a calculator which is kind of the standard way to do it but you could also do differently for example you could make a console application so that you can actually do these operations in the console but another thing you can do is approach it slightly differently and for example take some inspiration from apps like numi that are actually text based calculators and this is actually really fun you could add some text processing that allow you to calculate all kinds of different things and then it would be a kind of different approach to a calculator that could also still be a lot of fun to develop so how to rate this well one I think this is actually pretty easy to develop and pretty easy to get something very usable out of this so I'm going to rate this a 5 out of 5 for easiness how expandable is this well you know you could do a couple of things like I mentioned but still the scope is quite limited it is in the end a calculator app I mean if you add too many features too then it's probably going to grow into something else on the calculator so if you want to stay true to the calculator thing then it's probably not that expandable so I'd give it a 2 out of five third rating is money can you make money with it could but I think it's also a pretty standard app that everybody already has on their operating system um except on the iPad but if you make it like a really cool app you could probably make some money with it so I'd give this a two out of five the second project is also something that is quite commonly suggested is to create a to-do list application but what you could actually do is use Python to create a command line application that allows the users to add remove view items on their to-do list so what could you do well if you make it a command line tool I think that could be kind of fun and you don't have to develop a complex GUI that way so it's pretty easy to get started you could still store these to Do's in the cloud somewhere in the database so that could add some interesting aspect to this type of application you could also build Integrations with other apps so if you build an API for example for your to-do list application or have web hooks then you can actually take an action once you post to do or when you complete a to-do to automatically send an email or whatever you want to do and if you want to make it really nice you could actually integrate it with tools like zapier so that you can then integrate your to-do list with any type of thousands of apps that are part of the zapier ecosystem so I think it's a fun way to kind of discover how to develop an API how to work with tools like zapier and what's kind of cool Integrations you can build so not a completely standard to-do list application but something slightly different that might be a bit more interesting so how easy is this well it's still pretty easy because building a to-do list there's like tons of tutorials online so to get started it's pretty easy I'd say four out of five how expandable is this well once you take it to Integrations with zapier apis etc etc storing stuff in the database maybe doing more complex to-do list items like checklist and things like that I think there's actually pretty expandable so that's a 5 out of 5 I'd say and in terms of making money with this that's a bit harder I mean there's already tons of to-do list apps out there so you'd be part of a very big competitive space so money I don't think you can make money very easily with this so I'd give this a two out of five third project you could work on is a weather application now you might say weather application why is that interesting well on the one end it could be interesting to learn how to use an API so you could use a python library to access weather data from the API display the current temperature and forecast for some given location it would allow you to work a bit with Graphics to visualize those things you could integrate this with Google Maps which could be a cool extension but there's also a couple of other non-standard things you could do with a weather application like maybe you should gamify it perhaps let people guess what the weather is going to be like and then reward people with points if they got it right and you can share that with other people so you're like the coolest weatherman on Earth or something like that that so there's I'd say a couple of nice funny interesting things you could actually do with a weather app so ratings easy I'd say this is a bit less easy to build because you need uh to do the API stuff you need the graphics part especially if you want to integrate with Google Maps and overlay information on top of that that's quite some work you might have to build a GUI around it so that's not that easy let's say three out of five how expandable is this well I'd say not that expandable I mean it's still going to be a weather app even though you could gamify some things which could be fun so give this a two or maybe a three out of five can't make money with this I think that's going to be pretty hard so I'm going to give that a one out of five another thing you could build is a web scraper you could use Python to scrape data from website store in a format that can be easily analyzed or used for other purposes perhaps you could store it in a database and then you can query the database to get the information that you need so you can use the request package to retrieve data from websites and then use tools like beautiful soup or scrapey to parse HTML data and analyze that and then if you store data in a database like a sqlite database for example you can query it later now there is a caveat many websites actually don't really want you to scrape all the data which still makes sense right so you have to be careful to not break the law but still it could be a fun project to do rating how easy is this I'd say 4 out of 5 Stars it's pretty easy to get started with scraping data especially with these libraries that I mentioned if you want to add the database it might be a bit more complicated since you'd have to convert data into something that you can actually store in a database and have meaningful queries of that how expandable is this I'd say two out of five but I mean it sort of depends on what kind of data you're scraping and what you want to do with that data okay make money with this I'd say not really well maybe a two out of five I mean it only starts to make sense when you scrape a lot of data and like I said you have to be careful because many websites actually don't allow you to scrape their data in general you can assume that if the data on a website is valuable then you're probably not allowed to scrape and then you can't really make money off of it next project which could be fun is to build a simple game so some ideas you can use Python libraries like Pi game to build a game or you could actually go old school and creates a very cool text based Adventure when I was a teenager I actually created a couple of these text-based Adventures myself it was really a lot of fun to work on those if you need assets for your game you can use something like open game art that publishes a lot of assets that you can use for free it's mostly 8-bit games and things like that but it's kind of cool in terms of rating how easy is this well I'd say if you use Pi game this is not that hard but I mean building a game is actually quite a lot of work especially if you wanted to be fun so I'd say this is a three out of five but you're going to learn a lot by building a game how expandable is this I'd say pretty expandable I mean you could create lots of different levels lots of different game mechanics and it can get pretty complicated I mean I don't think you should try to develop a triple A game as your first python project and of course python is not really the programming language to use for building games not for learning more about python it could be a fun project okay make money from this I'd say that's good to be pretty hard so maybe one or a two out of five I mean nobody's really developing professional games in Python like I said so you're not really going to be able to sell that easily it's more like a learning experience actually I found myself really fun to work on game development when I was teaching at the University I taught a game programming course and I let students basically extend an existing 2D game that I built myself with some basic game physics and you you were this bomb character and you had to pick up water drops and reach the end of the level within 30 seconds or something like that when I designed the levels for this game that my students were working on I actually made them really hard on purpose at the end and it added really annoying game music so that they had to die and to play it over and over again yeah I guess it was a pretty evil teacher [Music] [Applause] you haven't liked the video yet you haven't subscribed to my channel what have I done I'm actually a stable person as long as I have a Barbie and a hacksaw anyway next hobby project write a script for your favorite operating system that automates repetitive tasks Apple for example has things like shortcuts but you could build something that does some job for you using a script and that could actually be pretty nice thing to learn more about Python and how it integrates with the operating system some ideas of the things you could automate is batch renaming files or folders automatically creating backups of a folder and storing it somewhere else automatically deleting temporary folders to save space or download data and store that in a file like monthly bank statements invoices those kind of things you could make a script that logs activity on your computer and automatically stores that somewhere so you can see what your system has actually been doing over the last week kind of sort of benchmarking to see what applications are behaving and what applications are just using a lot of based on memory there's lots of these little scripts that you could write that do small tasks for you automatically ratings how easy is this well of course that depends on the type of script that you're writing but these scripts are generally going to be pretty limited pretty small so I'd say it's pretty easy four out of five let's get started with this how expandable is this well you can write tons and tons of scripts and tons and tons of different automations so I'd say this is pretty expandable and there's lots of opportunities for you to learn new things so maybe four out of five can't make money with this I don't think you really can make money with this that easily so I'd say one out of five it's really more for your personal use unless of course you find one really cool automation that somehow nobody has thought of and that you can actually re release as a separate app I mean then you can certainly make some money with this next project is to create a chatbot that can respond to user input so you can use Python libraries like nltk tensorflow this might not very useful given everything thing that's happening now with chat GPT so it might actually be interesting to not actually create the chatbot Yourself by training a model but actually integrating with the open AI API and then using a chatbot like that what you could do is personalize this a bit more and for example not use the chatbot for General queries like what chat GPT is able to do but actually use it more as a personal assistant so obviously then you also need to feed it personal training data and then you might not want to use the open AI API directly what could be a slightly different way to approach this is that instead of just using the API that you're actually thinking about integration with the tools that you're using like slack teams or Signal app or you could pick a specific area of expertise where you're going to use the chatbot in for example one thing you could do is build a note-taking tool but integrate AI tools directly into your note-taking tool so that it knows about how you write what you're working on your items in your agenda and then you can use other information to more quickly write useful notes how easy is this it is quite easy to get started but actually to get something that's actually useful I'd say that's quite a bit of work because it depends on how you want to integrate this that's going to be the trick obviously so it's not that easy it's a two out of five how expandable is this I'd say this is reasonably expandable you could use a chatbot or an AI system in lots of different ways I would say this is about a three to four out of five in terms of expandability can you make money with this well you maybe could make some money with this especially if it's a useful application that other people can actually use and and didn't think about I mean when you think about it there's like this is like a whole new thing that chatbots are getting this good and we're just touching the surface of the Integrations and the possibilities at the moment so I think there's a lot of opportunity right now in thinking of new ways in which we can use these chat assistants in the tools that we're building so I think there's actually a possibility to make some money with this if you have a good idea so I'd rate this a three or four out of five before I continue with the rest of these projects here's a question what project have you worked on recently that helped you learn tons of new things let me know in the comments next project idea is a markdown editor and viewer in Python you could use an existing markdown parser like Marco or python markdown you can use TK enter or QT to build a GUI and then integrate the markdown fewer what's nice about markdown is that it has lots of opportunities to write Integrations or plugins for it for example you could extend the markdown format to integrate things like code editors and playgrounds and things like that or visualize charts or incorporate HTML content so you could build a sort of really Advanced editor that goes Way Beyond something like word for example or you could actually create a system where you can write markdown but you can actually have code inside the markdown document with a run button so that you can actually run the python code that you write directly in the document sort of developing a playground system to explain coding to people I think there's lots of possibilities there it's not that easy to get started because there's not really a clear simple way to get markdown and rendered markdown in Python other programming environments do have that for example in typescript it's really easy to get started because there is the lexical editor which is really cool but in Python I don't think something like that really exists so easy I would say two out of five to get started with this expandable I'd say with plugins this is pretty expandable maybe three to four out of five and finally can you make money with this I don't really see how I mean it's going to take a lot of work to get there so making money I'd rate that a one out of five next project is a budget tracker you could use Python to create a budget tracking application that allows you to track your expenses your income your net worth over time there's a couple of cool things you can do with this for example you could integrate this directly with your bank's API to collect transactions and automatically input them into your budget tracking system you could use machine learning to classify these transactions so that they're automatically put into the right categories then you can store all this data locally in a sqlite database and then for example you could create reports to help you understand your financial situation you can use platforms like Dash or streamlit to build a dashboard very easily which by the way I did a video series about Dash a while ago I've put a link at the top you can do other things like planning and budgeting and letting your software compute how much time it's going to take so if you save X amounts per month then this is when you can purchase your new gaming console or something like that but all together I think that could be really cool app to build so rating how easy is this well not that easy because you'd need to integrate apis you may need to create visualizations of data and things like that so I'd say three out of five also because you need a GUI how expandable is this I'd say this is pretty expandable you could also think about integrating this again with other tools like automatically giving you a notification or sending you an email when you reached a certain budget Target you could gamify things so there's I think lots of possibilities for expanding this tool can you make money with this I think you could actually make money with this I mean there are certainly competing tools that already do some of these things but I think if you're a bit creative you could definitely build something cool next project is to develop a sentiment analysis tool you can use libraries like nltk scikit-learn to build a sentiment analysis tool that can classify text as positive negative or neutral and then you can combine that with other apis or systems to represent the text that you've classified in different ways for example you could combine this with the news API and then you could create a page that only shows the positive news although probably if you want to pause the news page maybe it's easier to just create an empty HTML document that's a lot faster anyway in terms of rating how easy is it while creating an empty HTML page is very easy but if you want to actually build the tool it's maybe not that easy although libraries exist I'd say easy maybe three to four out of five how expandable is this meh not really I think I mean you could use the tools in different ways obviously but just the sentiment analysis part I don't think it's that expandable so let's give this a two out of five can you make money with this well not really I think that's going to be pretty hard because there's already tons of tutorials on building sentiment analysis tools and then you'd have to think of really a good application to actually be able to make money with this or probably integrate it into something that you already have where it's going to help the application do a better job of what it's supposed to do and final few items I'm going to focus on tools for software development so I think there's a couple of things you could do a couple of projects you could work on that are actually helpful to software developers one is an application that detects duplicate code you could use Python to write a script that detects and reports on duplicate code in that python code base then you can use nltk for tokenization parsing you can use a text similarity metrics like back of words of word frequencies Etc and that then you can go beyond these exact comparisons because of course there's not going to be a lot of exact duplicate code but you will probably have duplicate code and a sense of that some variable names might be slightly different but that the code is done almost the same so it could be pretty useful tool to help you find duplicate code in your python script ratings how easy is this I'd say four out of five these libraries already exist and the main thing is going through all the different files in a folder and then just comparing them so I think that's doable how expandable is this I'd say this is not that Expendable it's like a pretty focused project of detecting code duplicates of course you could spend a lot of time on developing new algorithms to better detect duplicate code but it's in that sense it's pretty focused and it's not really that expandable so let's give this so I'd give this a two out of five can you make money with this well if it's part of a larger Suite of tools for developers it could actually make money if you could develop this as a vs code plugin for example so I'd say two to three out of five now related to that another thing you could do is also another project on dependency analysis you could use Python to analyze import statements in a code base and then construct a sort of graph of dependencies between the modules basic idea of this wouldn't be too hard though if you have to map these dependencies it might lead to duplicates dealing with relative versus absolute Imports so that's going to be a bit complicated you might want to add some information about which modules are the least or the most connected so you can actually use this to detect coupling in your code and if there is a way for you to improve this you could also create visualizations of this automatically by using a mermaid or uml diagrams call graphs or trees or things like that so that might be a graphics challenge in here because then of course you'd also have to decide how you're going to visualize those diagrams so that they're actually clear and that you don't have a bunch of overlapping arrows how easy is this I'd say it's not that easy I'd give this a three out of five how expandable is this well you have lots of options for visualization so I'd give this a three out of five or maybe even a four out of five can you make money with this it's kind of similar to the previous projects I think you can but it should probably be part of a larger Suite of development tool so I'll give this a three out of five next tool that you could build that is kind of a continuation of the previous project is a general metrics collector so you can use Python to collect all kinds of metrics about a code base like uh lines of code the number of functions the number of classes the number of comments you can use packages like radom as a basis you can integrate this with flick 8 pylin or black to also detect style issues in your code and then you could create a vs gold plugin that does all this on a automatically enough produces reports about this or you could build something that you feed a git link and then it's going to analyze all the code in that git repository and produce a report you could even take this to a new level by creating a website that basically does this automatically for lots and lots of git repositories and then creates a ranking of the highest quality libraries it's sort of web scraping but it might be cool to have this that you could have a website where you can answer any repository and then you get an idea of the quality of the code before you actually decide to use that package in your application how easy is this depends on how far you take this I think to get started it's relatively easy because these metrics are already there in packages but if you want to take this to the next level I'd say this is uh to three out of five it can be pretty complex also I think this is pretty expandable because there's lots of metrics and things you can do to gauge the quality of a code base so I'd say this is a five out of five okay make money out of this well I actually think you can if you have a website where you produce all of these results all of these comparisons of different libraries you could actually create a subscription service where companies pay a monthly subscription fee to be able to access this data and then you keep the data up to date whenever a new version of the library is released so something like this I think could be a cool project and could actually make you some money the final project I want to mention is a refactoring helper something that analyze the structure of a code base and then suggests refactoring possibilities you know moving functions to different clouds or different module rewriting or shortening Loops things like this you could start by just creating a small collection of best practices and try to detect that in the code if there is some code that violates those best practices for example if a for Loop only has a single line in the body and fills a list you could suggest to use a list comprehensive instead and you can parse the python code using Python and then detect deviations from these best practices the first step could be to just make the suggestions and not change anything but then the second step could be to actually provide the refactoring that you should apply you could even extend this tool so that best practices are customizable so that they follow your company's style right another thing you can do is build an integration with Git and the code review process so you can actually use this tool to support you in your code reviews so rating how easy is this I think this is actually pretty hard to do because you need to write a parser and you need to Define what those best practices are and you want to make sure you don't have false positives and things like that so it's not so easy so I'd say this is one out of five how expandable is this well I think you can take this really far there's lots of things you can do and you can add step by step if you build on these best practices of course you could incorporate machine learning into this to help you detect these things more easily so I'd say this is pretty expandable there's lots of things you can do here also in terms of possible Integrations like what I mentioned with Git and can you make money with this well I think similarly to the previous projects that I mentioned I think it will be helpful if this is part of a whole Suite of tools but I think this if you have would have this as a standalone tool it could be something that people would pay money for actually so I'll give this a four or maybe even five out of five in terms of the money rating I hope you enjoyed this list and that gave you some food for thought some ideas for fun projects you could do to get better at python something you should definitely do if you want to grow as a developer is watch this video next which tells you what not to do thanks for watching and take care