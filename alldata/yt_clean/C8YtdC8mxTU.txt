Video games have spectacular graphics, capable of heart-racing battlegrounds, magical While this may look like an old western train it's actually composed of 2.1 million triangles with 976 colors and textures a virtual sun illuminating the scene below. these vertices, textures, and lights are entirely being processed inside your computer's So then, how does your computer take billions 3D graphics? Well, let's jump right in. three key steps: Vertex Shading, Rasterization, used in many modern video games, these three core video games for both computers and consoles and algorithm for pretty much every game you play. shading. The basic idea in this step is to in a 3D space and use the field of view of the a 2D window called the view screen, which In this train station scene, there are 1,100 sections off what the player sees, reducing the Let's focus on the locomotive as an example. some rather complex shapes, it's actually using 382 thousand vertices and 9 different the triangles. Conceptually, the entire train but actually, each of the train's hundreds of So, let's focus on a single vertex. The the triangles and the train, from a 3D world onto First moving a vertex from model space to world finally from the perspective field of view onto we use the X,Y, and Z coordinates of that scale, and rotation of the model in world space, camera and its field of view. We plug all matrices and multiply them together resulting screen as well as a Z value or depth, which After three vertices of the train are transformed triangle moved onto the view screen. Then the and the 2.1 million vertices of all the 600 a similar set of transformations, thereby moving This is an incredible amount of matrix game consoles are designed to be triangle mesh decades to handle millions of triangles every few cores designed to efficiently execute up to 35 addition every second, and, by distributing the each of the cores, the GPU can easily render the Now that we have all the vertices moved onto a 2D single triangle and figure out which specific triangle. This process is called rasterization. thirty-eight forty by twenty-one sixty, the X and Y coordinates of the vertices your GPU calculates where it falls within this by that particular triangle. Next, those pixels that triangle. Thus, with rasterization, are groups of pixels that come from the same Then we move on to the next triangle and it and continue to do this for each of the moved onto the viewscreen. By applying the Red the appropriate pixels, a 4K image is formed You're probably wondering how we account triangles. For example, the train is blocking the the train has hundreds of thousands of triangles rendering pipeline, but obviously don't appear in in front is called the visibility problem and A Z-Buffer adds an extra value to each of the or depth that each pixel is from the camera. transformations, we ended up with X and Y that corresponds to the distance from the triangle is rasterized, it covers a set triangle is compared with the values stored in the than those in the Z-buffer, meaning the triangle pixels using the triangle's color and re-place the However, let's say a second triangle comes along Z-buffer, meaning the triangle is further away. the triangle that was previously painted only the closest triangles to the camera with the By the way, here's the image of the Z or Depth Note that because these triangles are in 3D space, thus each individual pixel of the triangle needs This allows intersecting triangles to properly One issue with rasterization and these pixels is through the center of the pixel, then the color resulting in jagged and pixelated edges. graphics processors implement a technique 16 sampling points are distributed across a single depending on how many of the 16 sampling fractional shade of that color is applied to and significantly less noticeable pixelization. a video game, your character's camera view as moving around. As a result, the process and and fragment shading are recalculated for every a game running at 120 frames a second. Fragment Shading. Now that we have a set it's not enough to simply paint by number to color we have to account for the direction and the position of the camera, reflections, and is therefore used to shade in each pixel realistic. As a reminder, fragments are groups of Let's see the fragment shader in action. This and if we apply the same color to each of its train. But once we apply proper shading, such and by adding in specular highlights or shininess realistic black metal train. Additionally, as the reflects the passage of time throughout the day, all the objects are darker and illuminated from Super Mario 64 which is almost 30 years old have are changed by the lighting and shadows in the The basic idea is that if a surface is pointing it's shaded brighter whereas if a or away from the light, it's shaded darker. there are two key details we need to know. the direction the triangle's surface is facing. and paint it bright red instead of black. As thou-sand flat triangles, many of which face an individual triangle is facing is called its perpendicular to the plane of the triangle, kind To calculate a triangle's shading, we take the directions. The cosine theta value is 1 when the is perpendicular to the light it's 0. Next, we light and then by the color of the material to This process adjusts the triangles' RGB values darkness of a surface depending on how its However, if the surface is perpendicular or of 0 or a negative number because this would we set the minimum to 0 and add in an ambient and adjust this ambient light so that it's higher Finally, when there are multiple light sources times with different light directions, and contributions together. Having more than a few your GPU, and thus scenes limit the number limit the range of influence for the lights The vector and matrix math used in rendering but luckily there's a free and easy way to learn multidisciplinary online interactive education computer science, and many other Thus far we've been simplifying the math behind vectors are used to find the value of cosine theta normal, and the GPU uses the dot product divided Additionally, we skipped a lot of detail when it coordinate system to another using matrices. courses on vector calculus, trigonometry, and 3D and matrix math. All of which have direct you to fully understand graphics algorithms. we recommend their course on Thinking in foundation on computational problem solving. with full access to their thousands of try out some of their lessons for free and, if you up for an annual subscription. To the viewers an annual subscription to the first 200 people who The link is in the description below. One key problem with it is that the triangles and thus each triangle will share the surface. This is called flat shading and surfaces such as the body of this steam engine. of using surface normals, we use one normal for normals of the adjacent triangles. Next, we to produce a smooth gradient of normals across the different colors across a triangle, but instead For a given fragment we take the center of each of the pre-rasterized triangle to calculate the like mixing the three colors across a triangle of the three vertex normals of the triangle. to form a curved surface, each pixel will be part of angles facing the light with pixel-by-pixel We want to say that this has been one of the most playing video games and seeing the algorithm a joy. We spent over 540 hours researching, and animating. If you could take a few seconds video with a friend, and write a comment below it Thus far we've covered the core steps for there are many more steps and advanced topics. For and DLSS or deep learning super sampling fits into to create highly detailed scenes with accurate and movies and a single frame can take dozens the primary visibility and shading of the objects pipeline we discussed, but in certain video reflections, and improved lighting. On the other resolution frame and upscaling it to a 4K frame is executed after ray tracing and the graphics One interesting note is that the latest generation computational resources or cores. CUDA or Shading tracing cores are self-explanatory. And then when you're playing a high-end video game with its computational resources at the same time, in less than 10 milliseconds each. Whereas if you then a single frame would take around Ray Tracing and DLSS are entirely different topics and therefore we're planning separate videos Furthermore, when it comes to video game graphics, Reflections, UVs, Normal Maps and more. Therefore, these advanced topics. If you're interested We believe the future will require a strong thankful to all our Patreon and YouTube Membership support us on YouTube Memberships, or Patreon, This is Branch Education, and we create technology that drives our modern by clicking one of these cards or click here