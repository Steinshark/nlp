With most standard ideas, we're used to a left side menu showing a tree of files in the project. This is exactly what every new VM user is looking for. That's commonly served by a plugin, such as Nerd Tree. Well, this is nice to get started with. Having a sidebar is one of the slowest ways possible to navigate through a project. As you make your way through getting to know VIM, you discover column E, short for edit. That is a quick way, given its auto-completion feature, to search for file names and open them in a buffer. Yes, that would require knowing the projects and its files. But, as Gary Berenhardt, from Destroy All Software once said, opening files directly is both the quickest way to know your project, as well as navigating through it. The same Gary Berenhardt had an amazing screencast showing how to integrate a fuzzy finder to file searching, which at the time used to speed up everything. Since it was showing results using FZF, as you were typing the search query. Fast forward a few years later, and TJ Devreast is one of the developers responsible for bringing telescope to the world. If you're a modern new VM user, there's 10 out of 10 chance you're already aware of telescope. It completely changed the way we search files, code and even health talks. Every famous plugin nowadays comes with a telescope plugin. If you're one of the few who has been living under a rock and are still unaware, I urge you to take a look at telescope and bring it to your daily workflow. I can confidently say you'll never go back. After understanding how to quickly find files and open them, they'd be loaded into a buffer. Check out the video up here for a deeper dive into buffers, windows and tabs in VIN. Once the buffers are open, or tabs, you that's your thing, you can navigate through them by scrolling back and forth. However, this kind of downgrades the navigation flow back to a sidebar tree, where slowly moving through a list of already presented files. A better way would be to keep using the fuzzy file search, or leverage the live grep feature by literally searching code by providing a text query. This way, we keep deepening the brain connections formed when we memorize where certain bits of the application live, or by searching names of modules or functions using the live grep feature. Either way, this method strengthens our familiarity with the code base, and this naturally becomes crucial as it grows. If you're a clean code into the S like me, you're probably trying to keep your function as well as your code files short and named logically to make sense for any maintainer. In that case, it's important to get yourself familiar with these names, and if possible, their paths in the project structure. The next topic in the navigation skill path is getting to no marks. Marks, as the name suggests, are location marks in the code. If you want to get the basics of marks, check out the video above, but essentially, this is how it works. You use M for marks and a register, which normally is a character you pick. For example, MA saves the current location into the A register. This can then be used by using the apostrophe or a vector command, followed by that register. This takes us straight to the mark we've left. Marks show up in the marks list and can also be queried with telescope. If you're after a nice improvement specifically for marks, check out the plugin above, that's somewhat improved the experience. Do know that marks separate lowercase registers, which are local to files from uppercase registers that span across all files. For example, each file could have mark lowercase A, but only one file can have mark uppercase A. This is great, but marks still lack some features. They're hard to delete if you're not after a complete deletion of the entire list. They're hard to follow at times. The query list is kind of hard to read, and it can many times get quickly out of hand. And then there are jump lists. Again, if you're after the basics, and I recommend you familiarize yourself with them, do check out the video above. Jump lists are a great way to roll back and forth in locations you've visited in the codebase. But, as much as I love them, jump lists can get awkward. They're not consistent in what they record. There are many caveats to what make the list and what isn't. And, naturally, they rely on your memory. Or, as tabs and buffers do, downgrades the workflow back to searching through a list of entries. Or, a chain of locations in this case. Not the fastest way to go about things. Yes, like mentioned before, fuzzy searching is the way to go. However, sometimes you may want something in between. Imagine a marking system that can show up in a small list. It's easy to read and query, and manage. You can remove and add things easily from the list. And, of course, read it. Imagine it could also span terminal windows. Well, guess what? There is a plugin developed by the Grandmaster himself. Well, excuse me, Tim Pope is the Grandmaster. Maybe the Prime is the Grandad. In any case, Harpoon is my new go-to for project marks that I can remember and read. Check it out. I've only added just three aliases for a quick reference. One for querying the list using telescope. And then two for the plugin to show its own list by toggling it on and off. And a shortcut to add marks to the list. Now, I can quickly toggle the list on and off when running in a project. I can delete entries just as I would delete a line of code. And, in the same manner, I can also add files if it makes sense. Just like tabs or buffers, Harpoon comes with both navigation to the next or previous entries in the list. Most of my usage, to be honest, is the list itself and querying the files that are marked there. As mentioned, Harpoon comes with telescope plug-in to help with searching different marks. It can also do some cool stuff by interacting with the terminal. If you're using Timox, and please tell me you do, check out the Timox video above here. Or, if you're an early adapter, check out Zellage2 in this video. Anyway, Harpoon comes with some Timox integrations. It can jump to the terminal, send commands to new windows, open commands in dedicated panes, and lots of other cool stuff by supporting Timox. But here's where Harpoon really shines. Remember how we constantly mentioned that fuzzy finding was the way to go, since you're exactly going to the specified location. This is as opposed to scrolling through a list. Well, with Harpoon, you can go directly to a location in the list. For example, I can jump directly to location 1, 2, 3, and so on in the list that I've mentioned. These locations, unless altered by the user, persist and can be memorized with ease. And so, essentially, they form a quick mark list with super fast navigation that is tailored to the project and user specification. Now that's a fast way to move. Now, Harpoon is not a solution for everything, but it makes a lot of sense when working with large code bases. Go a long way by using jump lists, marks, fuzzy finding, telescope, everything that's mentioned before. But when working with a lot of code, it makes a lot of sense to be able to move around using your preconfigured consistent keystrokes. Check out the rest of the VIM videos list to keep improving your skills. See you on the next one.