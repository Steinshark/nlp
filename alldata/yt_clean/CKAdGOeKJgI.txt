Alright, uh, welcome everybody. This is the Remix Austin meetup. Uh, the almost spooky edition. I should have gone out for Halloween, but So, no ghosts tonight, unfortunately. But, what's up? November 1 should be the Halloween. Yeah, which, like, keeps the fun going. No, November is going to be So, I don't know what I'm going to be very exciting. Uh, anyway. We don't have to start on a down note. Uh, so we've got agenda. Uh, tonight we've got Paine talking So he's going to be talking about And something he kind of wishes it, so I'm excited for that. Uh, discussion and And then Jeff is going to be Remixing your own RemixStack. How you can kind of build your own, uh, set of opinions and all Um, so that's pretty much Um, I don't think I I don't have anything in the way tonight, so. Uh, so yeah, if you're Give it up for Paine! Hi, I'm Paine. I've been doing Remix about two years. was doing Shopify Hydrogen, which If you haven't seen it, Um, I have it pulled up look, um, go to their GitHub, make a template of Um, this is like their GraphQL APIs. it's like a lot of really good examples but yeah, um, made a couple stores with And now, full stack engineer, so yeah, um, but yeah, I just wanted to and just like, some issues that I've been highlight a space for, dev experience out like, issues and show how people So, I'll just get right into it. So, I guess like, show of hands, like and how, like, comfortable are you really? Or? Who's new to Remix. Who's new to Remix? Okay, cool. so I'll to, like, kind of, explain Hopefully it's not boring. Um, but yeah, so, ViewStretcher, um, I guess, like, the best way use this when you're API request. IMOC client, not in your loader. So like, you know, your loader is getting data and then you're grabbing that use fetcher is kind of more like, JavaScript, or maybe it's a form that Um, So yeah, it's really Maybe like an example typeahead, where Um, yeah, so there's two ways you can use it. FetcherSubmit and Fetcher. form. So Fetcher. form is kind of like the traditional, it's almost like one to one where with very little But FetcherSubmit JSON body or some form objects the method and all that stuff. And Um, but yeah, and state and Fetcher. df responses anytime render off Um, but yeah, and then another is like, um, it's released like So, we'll see some more But, um, Um, yeah. So here's like a really simple fetcher. form Um, yeah, it just looks You have your action method, you have like So yeah, it's pretty, uh, Um, yeah, and cases, like maybe you want with maybe it's in like a hidden form or Um, yeah, you can submit and submit, you know, a payload, yeah, and it doesn't even have to It could be whatever code that you want yeah, So another option you can do with I just copied the docs example here. Because it's a really great example. Um, you know, so if you're building experience and, you know, like the top you have five items in your cart. passing this key allows it to the user's, submitting, stuff to their cart in a different call that which is really handy. Because like, if you're going to do it own provider, you have to report state above So yeah, this is really handy, questions, please stop me, otherwise kind of some snags that you can run into with fetchers. So, like, managing side effects. Like, um, you know, say if you want to or maybe, you you can't use an HTML with the inputs that you need, and some sort of JSON know, Um, but yeah, and then there's also like just strange bugs that And this is, like, something Like, I probably run into this in almost it's kind of not really clear, like, So, uh, well, I guess, you know, about, like, when is this component, need a key here, or do I need out clear out this So, that's like another issue, and know, say if you have a modal that's not just hiding and showing with CSS, Yeah, and then, um, Fetcher global keyscoping. So I'll kind of show an example I was talking about like the bag Maybe, say, if you want to go to a page want to use throughout that page, but So I'll show you an example of that. That's like, Yeah, so, for like, Fetcher what I was talking about earlier. You kind of need this use handle there's an error, you kind of response um, you know, I think like a lot of like, do we like use effect? So, that's kind of like a big, uh, But yeah, um, so I kind of like, Um, I've like literally ripped And, you know, so there's like two you'll probably find if you're, pages. And it's usually these two. this one and so, you know, people have kind of like small yeah, I'll kind of So, I guess like four, maybe? Good solutions. Um, I won't really talk that's like, the last resort. don't really want to Um, but Restriction and Components, like say you have a modal but it doesn't really think about, you could internal component that useFetcher, but, you know, there's it is kind of a little difficult. But, um, a reset route, um, this is like, uh, somebody brought Let me So, you can like, an action. So, for those that it's like a letter, but you're posting creating like posting uh, one example is, you know, return null, and so some people have to clear out Fetcher. Um, I won't recommend this Um, so I I have a bunch of Fetchers here. so yeah, so, um, all these they're doing the same route. Um, basically all it's doing is so yeah, I have a bunch of So you know, here's like a basic getting this API. um, Um, this is just getting like Um, So, Hit submit, it's loading, added a little delay there so And then, like, can show how this Submitting, say if I go back, and this And I'll show you Um, yeah, and then, with the about this one. So Uh, basically like, say we're done this data, and we want a new Um, you hit the reset, and we're actually making And then, you see that in the but yeah, so, the reason I won't recommend this one is because, here, You can actually see it's So you're preventing you treating this as state. So it's another thing wouldn't recommend that. Um, yeah, and then there's, another one. So, a feature wrapper, so, uh, really involved in the Remix world, so But, um, yeah, so I But now it's kind of changed with, we this, like, wrapper for, uh, UseFetcher Resets the So, um, Yeah, so, the reason a good thing about this one, right? Like, you're moving this extra state then you're using it in this wrapper. So, like, a lot of times, you know, copy it over, like, put your data to But, having it here, kind of you don't have, like, use states Um, but yeah, so, yeah, So, submit, and then reset it, and we're handy, but, um, like I said, like it a key wouldn't really work anyways. Um, but also just, like, thinking Core APIs something you have to and then, so this is another guy that's state inside the component But it's You change that This is, this is also really good getting the behavior you want, but of global you can never really symbol that's always unique So really this is only this is really only needed when you just Yeah, so it's kind of like I guess, here I'll show that submit, and so it changes that key. But, you know, a problem with this one So, I'll submit a couple here. Are you Yeah, symbol is like, in the, or you can see too. So, like, uh, it's just I've just tried know if Oh, yeah, yeah. This is, yeah, that's, uh, well on the GitHub as well. that's reason why I probably Um, but here I'll show you where you can actually see where these, these, uh, fetches are stored. So here, like, every registering a new symbol and So, you know, say if you have Say if I do need data for more it. So, yeah, that's just kind of like another case like two weeks ago where I'm like, I need like a known key and a reset. or maybe I need like another global scope, right? So I was talking about earlier like, say you have a page you want to subscribe to to see like you leave that page, you don't really So, out of the box for this, um, you kind of So, um, kind of show like an example that But, uh, so, uh, I made this like really simple like trip manager. Like, it's basically like it'll give you you know, say like I'm gonna spend, three nights in Tokyo and um, the thing I want to call out here is like, have, uh, so, I guess, I with Fetchers, they want to keep um, so I think a lot of the problems they're trying to solve were keyed around where maybe your client is like making So like here, say if I want to play spend four nights in to calculate that are, and like, oh, that's a little to do like two nights there, and maybe So, here we have like, this fetcher API And We're storing it locally, know, so like as soon as I leave this I go back. oh, so, this is, this is the Yeah, that's gonna be like, reset. So, um, so, let So, to kind of like it's kind of like a tricky situation, why I, run into this problem is 'cause this UI down here the user's submitting So, you know, so if you notice calculate all this UI is disabled. So, um, the way that I was handling same fetcher with the same key. So, you can ignore the ID for But basically, I have a SaveFetcher, ResetFetcher. So, the SaveFetcher and the I have this hook where it's So, um, in my example, it's not really great Think about if you're building a to be using this you're going to be show that, hey, somebody's making a So on all of my UI elements, I'm basically So I have to use that key, that same key to look Um So, basically, like, the way that ID, but I needed it to be known. So, um, I need to put it in a case, I put it in the loader. where is it? So, okay, so right now I'm just in here, but, um, here I'm going fetcher, and then from that reuse So, it sounds really crazy, but this is through so now, like, we have this random I set up my fetcher, make those requests. And also in my hook, Um, passing that same and now, so, whenever I like 320 like say if I made another Portugal, now, so can so, before, that, but, you stale loaders come in, so, Right now, so here, to kind of like, go off if I go provider and I go back and is here, T era? I don't to spell so so like if I I add and then, hit calculate, see, once it finishes, it'll add another fetcher here this new ID, and then also So, again, you that problem, like, we have just getting overrun with these It's not ideal, but the But yeah, I just kind maybe see solutions or things that yeah. you guys have any go for it. You raised your I was going to say, is or another library for How think does a better job can potentially learn from? Yeah, that's a good question, um, RuneX provides for this, Um, just most of the time you're actually haven't really done, like other, some other big guys to So, I haven't haven't really used Astra that much, know be like a instead of actually, doing a getting a kind of similar, I don't know, like there's, with loaders, right, you can do that value, so, you know, maybe there's that split it's harder this is just is just, like, a really simple thing I wanted to call out here is, There's a lot of form elements, interactable and disabled, or loading. And we create a local copy of some as well as the server driven one. So we have the server driven results, to put on top So, yeah, that's just think Oh, that has Uh, so, once it goes in the data that's keyed, far as I know, yeah, so I was going to like a million off and just so you can is, until you like hard refresh the managing Yeah, I don't know. I've like read all the comments like there's kind of like, maybe, there's like a preference of not I think it's because of that, like, But, you know, I think this is an Like, um, and like, I try to make maybe it's an expensive server, server in that a business If you have, like, a we don't want to just naming it. Dangerously reset. Yeah, exactly, Yeah. That's all I had. is there like an path large obstacle to doing optimistic UI updates? Oh, yeah, so, I mean, I can Um, accessing the Fetcher, the form I guess like problem is, um, example, I didn't show the fetcher doesn't, level. And so, yeah, so maybe it might be So I guess if you have, if you the error on that fetcher, saved a copy it back, Yeah. I mean, action. I mean, it's nice when all that is abstracted for you, but I just wasn't optimistic UI more difficult or easier. Yeah, that's a good yeah, I'm not sure. but I will say like this bug, like, or like, running into that can like, stand out to you if case, um, when you have like a local can be really I was working on this two weeks ago, I thought it was something that just hopefully like, calling show. it. Thanks uh, for that talk on measure reset. Uh, yeah, it definitely is you bringing up another use case. Uh, yeah, It's a tough one. It's hard to figure out all your data in sync or not? Like, did you reset, but you still have a in with more data, and then that's a complicated question, so we just definitely not something trying to on that discussion, but hopefully so yeah, next we have Jeff talking So I wanted to talk a little bit about remix and Remix Stacks. The reason for this is that at last month's discussion. So I think there was a end of the meetup. people wanted to know, hey, the full stack remix Or a really good discussion a number of different frameworks that have been know, sort of described as the next full stack right. uh, JavaScript framework. Uh, one of the ones that came up a couple for Next and so forth. But I wanted to talk about some of stuff that's available for remix. Uh, just because when there wasn't a lot of talk about it, So, my name is Jeff Linwood, to the Remix Remix meetup. It's kind of fun. Uh, I enjoy Remix, but at this point, I real project type of thing in Remix. So, you know, that kind of fun. I got a chance to work with, uh, Remix last year, and, uh, to write up, uh, some on how to use our platform with Remix. So I got some experience with it, but, uh, this kind of got me a little else you can do with remits. So, here's like kind of a short agenda. We'll just talk a little bit about some of the stack decisions you could make, uh, overview of the four major stacks that, uh, of been out there creating your own Remix stack, was actually super easy and it's not going to be really impressive. But still pretty All right, So what I wanted talk about Your stack So, how many of you, like you start a project, dive right away into, okay, I want to work with this technology. I want to work with that technology. Handful people. Awesome. Okay. How many people are like, I'm not quite what use and I'm going to do a lot of All right. some of the same people. So, I get it, right? And, there are a lot of choices, right? So, So, other platforms, other providers. Uh, other, you know, technologies, They might have sort of a, a blessed path, So if I was to pick another framework, um, it might have preferred deployment they're the the people that want to deploy on, it's sort of first class, right? Another ones, they might come with the object relational mapping, right? So if I was to start a a new project, Ruby on Rails, right? Chances are, I'm going to probably use something else, be using ActiveRecord if you're Um, Databases. Obviously, this is kind of So, if you're going to use an ORM, ORM, then, you know, that might constrain which database, which You might not want use a relational database at all. You might want to use a couple, DynamoDB or something like that. Um, end to end testing, right? So you could choose Playwright, anything new out there in end I'm not using it yet, but like pretty cool platform testing. So, I don't know anything about that. What does that do? Do you know? Uh, a little bit about it. It's, uh, so, uh, at my company we use uh, maintain our SLOs and stuff like that. And so, with Datadog Synthetics, it sort Chrome extension, run through the actual You can, uh, set up the and then uh, through a Datadog system, and if the test happens to fail, uh, to production, it'll let you know. And so, I think this is a little Oh, sounds pretty cool. So, thank you. Yeah, and so, you know, that might be something you use That might be something you want to use. But there are a lot of Authentication is a whole other thing. There are providers, are open source. Um, keep you up on that, Plenty of choices out there, right? So, you might want to use that, might not want to make all You might want to start with You can do that with Remix. you choose, so if there, there's this whole idea of templates and stacks out there. Now, almost everybody probably is going to use a go to like the getting started, you start with the, the basic Remix, you're going to use some sort of template and project But, you can actually generate any kind of repo that's a Remix project, that can And you can actually generate your project based on theirs. So. if you were to go down this path, there talk through The first that I want to talk about are So these are the three that are actually the RemixRun Has anyone of people. Um, anyone here use BlueStack? Okay, and then how about Grunge? Okay. Honestly, that's what I would expect a little bit more approachable. I'll kind of talk about those real quick. Uh, Let me just pop up the GitHub. for these of you that don't know what I'm talking about, uh, Remix itself in the Remix organization on GitHub, has a couple of And one of these is the IndieStack. I feel like my mouse is There we go. These have some awesome cover graphics. So we've got this IndieStack here. They're all named after music. And you can see what's the most important thing to kind of notice here might do npx create remix at latest with, new project, If you pass it the dash and then in this particular case you pass it the github and the github repo, Uh, that'll actually create a new So the cool thing about this is that this one Indie, comes with all this stuff, right? So you want to see what's in it, we've got, uh, uh, io. Uh, we've got SQLite If you set up in a volume, of other stuff. Uh, you have GitHub Actions. You have Prisma. Tailwind's kind of out of the box anyway. He's a Cypress. Pretty, pretty excellent texture. So much stuff you might already want to set up. One catch with this particular stack is that, you know, there's wrong about using Fly, right? Fly. io is a hosting provider, uh, platform. But if you're currently hosting with everything to use Fly, right? Again, nothing or wrong about but you might want to And so This Indie stack sort of roll your own stack on the IndyStack. You'll see that that's actually what I'll talk about that in a little bit. Bye. This gives you more than of the box. So, you got all this stuff in here. Alright, next step up from Indy is stack. And the biggest change here, I is going to be that you're using multi region app deployment on Fly. io. And if you're familiar with Fly, that's one of their big value adds compared to other providers. So I don't want to get too much into that, here, I'd say, between these two stacks. The idea, I believe, would be that you would start your and if you want to move to region deployment on Fly. io, you can take a look the last one I wanted to get touch on this one, is the Grunge stack. Again, it's another Remix stack that's official. Uh, Uh, I haven't actually but it uses DynamoDB as the database. you're not using Prisma. It's not, you know, no object Dynamo's not a relational you You're Cypress. It already comes with Tailwind, all that stuff. But you're doing your AWS Arc. Arc. Codes, uh, Architect, I'm not a way to deploy your application again, a very different deployment these are all three, repos that pretty well supported, You know, You can look at the, uh, you can look at the updates. This one's got its last update from two weeks ago. I think BlueStack is. A lot more recent, like two hours ago. IndyStack I think is also like So, you know, these are of the things would kind of point out to you is that if you're going to build on top of one of these or templates, Choose one that's actively maintained, so So you don't have to all the catch up, all the technical debt, you were to start your project on this So huge plus. Um, the other one that I want to point out is not an official Remix organization stack, but it's also extremely well supported. and that would be the Epic stack. Does anyone use this Okay. Two people. Awesome. What do you like about the Epic Choice choice. A lot of stuff built in, but yeah, he he's already made, but it helps out. Yes. And actually I think decisions is kind of a key Epic stack. Cause one thing I really is that there's a lot to it. But if you click into the docs, there's this awesome folder called Decisions. Check it out. Uh, it's under docs slash every decision been made for this stack, right, is in with sort of a decision document some justifications. So if you were curious about whatever it is, I'll just pick this one because and we're using a headless UI library. So this would be sort of the because really you're kind of picking And this is really useful. you can figure out I like or I don't like whatever at least you know why they chose it, and you can probably also figure out what your decision So, I really like this about this repo in I also want to point out that I can't speak for the other But you were to go to github. com slash topic slash remix stack, this is going to be a list of all the remix stacks or templates that remix remix stack topic. And so this is really useful You You're not tied to just the three official ones, perhaps Epic, of course, being out there. But But you can kind of see Oh, look, Um, maybe we'll come back to that, but, uh, yeah, so you can kind of see that there with different components. you know, I sorted these by updated just because kind of of useful. So you can also use the default, which is like by Anyone use any stacks templates that kind of aren't one of That are maybe a little bit more It's a progressive web app. as a Maybe a little bit more than made. Do you know what the name of that one is? Remix PWA. that one helpful to learn, It's at the code base and I don't know if I can find that one easily anyway, there's a bunch out if you were kind of interested something else I want to point out is that there are a lot of these templates So, I'm not going to like call it any names or something like just say, deployment don't provide deployment directions for Remix. So, they don't come with, hey, add our configuration format, we it is, add that, add this, add a health on our platform. In a lot of cases, what they do instead because it's a good one to got a It's got an example application. uses the database. You can set up sort of a full stack look The problem is sorry, they're telling you to start your But the problem is that their fork you'll see it's like six commits ahead of IndieStack, but it's like 179 commits behind. You know, but I'll just say that of maintaining open source example is that it's really hard to do to keep up with everything. So, you know, I'm not picking on any it's, it's definitely more than one, but I would encourage a lot of of only providing directions for how to start from a deployment directions on their here's what you to modify a template. Bye. Save the Indie Stack stack to get it to run on our platform. Uh, so I would just The reason I'd stay that also, like, servers. So I start Provider A, I to move to Provider B. I don't want to go regenerate do a diff against out what commits and then apply them onto mine. It's all possible, but And so, would be else I'd consider. is just, if you're a provider, deploy onto your platform. All right. Now for sort of something that's creating your own remix template. Let's just say that you've got So you're not, you like the IndyStack, you like the stack. You like whatever it is, but you don't use your own stack because you want to have own preferred provider with your drizzle or whatever you decide to choose. You can do that. Uh, all you really need you need a Remix project, pretty much that's it. If you want to make it public on GitHub, just That's how that Jeff Render Don't expect that to live forever. I also choose not to maintain that too far into the future. Uh, this But, uh, that's that's one way to do it. You may want to include a Remix. init index. js script for automatic file creation. So I thought this was a kind of a cool is that inside Indie remix in it folder and here we've got an Index. js. And what this does is it creates, And particular for this one, it's going to create a whole bunch that are specific to this application, And so the thing about that is rather than ship a sample project that has a whole bunch of modify, you can actually ask So if you go into Epic Web and create one of those, it's going to ask get your fly IO set up, uh, which I fly. io user before. uh, setting up Indie, uh, recently, which was their primary region needs to Indy stack. It did ask me that with Epic Web stack. So clearly someone had kind of you can ask all these questions, you can set up all these files, you can make sure that, need to create a a, uh, it's, or something like that, it's like the fly create that for you as well. And so it's really a provider, want to make these templates and you for people. This is where you do it. And you can actually rerun this init script, um, after the I think it's like, MTX remix So, you know, this can be rerun again, for your new project. All right. a little bit of time left. Um, actually, I'll probably just skip the demo just All I did was I forked, I forked, uh, the Remix, Render example. Render's another deployment platform. and, uh, I hadn't used that before either, but, Their example has you set JavaScript project, over, you fork theirs. They support infrastructure as code. And so I created my own template with a render. yaml file. That happens to be their format. So, more or less you add a few uh, things about the web service name. You add the go command, start command, and then it picks up session secret and node environment. then you're kind of off. So it's kind of nice. If you take, uh, this uh, you would, Uh, in this particular case, uh, you create a new one from it. Uh, you could create I've a local copy here. And this is just running an NPX remix, remix, uh, create, remix And so, uh, oh no, it's invalid. Um, oh, cause I'm in the wrong directory. it actually copied over my template. And then it'll a new GitHub repo, install the And if I followed Render's directions, I deploy it, is my, uh, new project. you can see it's got the, it's got the Render. yaml, and it's got all the So it really was that simple. and again, just to deploy this on Render But I want to have a little bit of discussion here at the end. And we're running a So I do want to cover the reasons not to use And this is me personally. of like adding stuff to my project. Kind of of like knowing where it came from. And also, I like simple in a lot of ways. And sometimes you pull in something start working on it and it's like, And you mixed up with Y, and Z, And you don't really need it yet. Like as an example, If I'm just working on this project and I'm deploy it right away. but I don't necessarily need to do that. I just don't need it running locally. And so if I need to set up like all account on this provider or whatever, So, that's one thing to do. I think another thing is that sometimes you don't know why the decision was made to use that about the Epic, uh, Epic So, I feel like it's got that You can go in there and figure out why things are if you don't like it, at least you know library, testing library, whatever it is. Um, one suggestion that I would have, That would be kind of cool remix stack slash template directory. So in addition to kind of browsing cool if someone built like a, doesn't have to be like anything fancy, but Single page application type thing. So some filters, some examples, some docs. Nothing too fancy, but just place to go to check this And again, I don't think that needs be someone's like side project type Um, let's see. Any thoughts or discussion? you could go to remix. run slash resources. I know a guy who built out And it's got some stacks on there. Nice. Okay. Yeah, yeah. There's actually an even better one Guide. Oh, yeah, yeah, Yeah, yeah, yeah. That's exactly Cool, I I just couldn't not exactly, but it's very good. yeah. Like that? What I built is supposed to be a a of of this, and then I, priorities. Cool, I like it. Okay. Yeah, it's very nice. Oh, it disappeared, but that's okay. Uh, yeah, Remix. Guide. I would definitely recommend and then the resources, Remix. Run. That's good. Slash resources good template. Perfect. Yeah. Cool. So you can search and you can other things people built. Um, so yeah. Awesome. Yeah. Um, Edmund, um, I'm He wrote Conform, which is a Oh, got tags and everything. I like it. Yeah, it's, it's, yeah, that's more I couldn't find it. Nah, no worries, It's, It, it still works. Um, I don't know if he's actively actively like work and you can. You can like, log into GitHub and add a fully functioning thing, but it's not time, Hi guys, I know mentioned Astra lately, and I will say one of the things I I don't think Next is incentivized to do being like, deployment provider agnostic, could and do this, the adapter, uh, thing. So, like, When I started my Azure project, going to deploy on Purcell and not going to do that to Netlify because Netlify had it. And this was literally as easy as this whole it and like that was, it was that It's like not you. Making that decision for you. You make when you're And it's Yeah, I mean, to me, that's the experience, is something like that, Re kicking off another template easy, not like, it's not as easy to do the like, there is some work with that, but it's nice to have, like, they have and Versal and Vercel, and Node. js, that all you gotta do make that one command, and boom, you've downloaded your new loader and, and when you run dev, it will tell you used on the old one doesn't work anymore. Cool. Cool. Yeah, here's the player All right, Anybody else have any questions? All right, then I'll stop sharing. good job. All right, Yeah, that's good. Um, Sweet. Thanks to our two speakers. Um, hopefully you enjoyed those talks. Definitely. Uh. thank you. Feel free to, you know, catch them, ask them you like their talk. this has inspired you to keep speakers. Here's a myriad of random ideas, Because mostly, I don't any of these have been talked about at this, uh, meetup. So React Router 7, um, is, I confident by the time we're here. Next time, we'll have a pre release out. So, don't tell anybody, And by the time I get this recording Otherwise it might delay this recording. Uh, we'll Um, but yeah, React Router seven comes with a couple new features. We'll have, uh, rough documentation on all these things. So, all this stuff shouldn't You know, come, like X amount of days. so yeah, if you want to look into that and kind the bleeding edge of stuff that's But also, lazy route discovery, that at this meetup, Single fetch, I'm sure that's pretty new feature that's really going to if you're familiar with that, or you to do some research, and tell other people, that's great topic. Vue Transitions, those are now, which is really awesome. So that's going to become of just the web as a whole. So if you haven't messed that would be, that's a great to learn and teach other people about. And then teach other people how Transitions, you to be able to use which, um, uh, Erwin's actually talk about a little bit last, uh, last time, we also have there some other That's just, that's a handle for a, can go look that and find more things. So this is both me just saying, like, on actively, and also invitation Speaking of which, not that one, uh, our next meetup probably is November 6th, I haven't with HTTP, but okay, sounds good. Yeah, so should be, um, day after the election, easy to remember. Um, so yeah, November 6th, I'll a meetup as soon as I can. Um, if you want to give a talk, again, You can find my or Discord pretty easily, but we also do have a form get emailed when you submit something. So I will see that if you use that form, it's a really good way to do it. So we don't have to go back and forth, and have to be like, And then you're like, oh, And I'm like, okay, what do you, that's all the information. You can just give it to me one shot, And then you're like, almost. Almost definitely auto accepted. I think I've only rejected like didn't want to talk about Remix. They want to talk about Um, I think one of them was like spam. It was Like, just, just not what we're talking about. Uh, go to their other videos for Um, and then finally, Nothing about AI? There was one that was, or maybe that was it. was just like, just vague, like general AI, it It wasn't like, I've definitely seen people, meetups, talk about Remix you can talk about, you know. You can use server cern events to like stream your data and use the open AI, all sorts of cool stuff you can do, but if you're just like, ah, I Whatever, sorry, I'm ranting way too much now. out with you right now. All right, uh, we also have do have a website, RemixAustin. com, Um, we have a GitHub where, um, and Mark are working on, uh, kind a new version of this. So you want to get plugged into that, talk to them afterwards, looking shifty. Um, and, uh, also can just jump in on the GitHub and check Um, and hopefully we'll be making some progress on that pretty soon here. Um, I think that's it in So thank you H B for hosting us, and thanks everyone for coming.