If you want to learn about computer science and the art CS50 is considered by many to be one of the This is a Harvard University course and we are proud to bring it to Throughout a series of lectures, Dr. Malan will teach you And make sure to check the description for a lot of [MUSIC PLAYING] DAVID MALAN: All right, this is CS50, to the intellectual and the art of programming, back here for the first time in quite a while. So welcome to the class. My name is David-- OK. [CHEERING AND APPLAUSE] So my name is David Malan. And I took this class myself It was sophomore fall and I And I was a little curious feel like the field for me. I was definitely a computer felt like something altogether. And I only got up the ultimately, because the professor allowed me to take the And that is what made I quickly found that about programming and working It's really about problem And there was something that was, like, actually fun for perhaps And there was something that I discovered, along to actually create something and bring and sort of bring to bear something but didn't really know how to harness, and definitely challenging Like, to this day, you're going to run up against in programming, that And you feel like you've hit a wall. But the trick really is to take a step back, take And there's nothing better, I daresay, and pride, really, to work, and in a class like at term's end, something like Now, this isn't to say that In fact, just this past week, I looked have from some 25 years of what was apparently the very first and quickly received minus 2 points on. But this is a program that we'll does something quite simply like to the screen. And to be fair, I followed the directions, which is But if you just look at this, especially you might have heard but you've never typed undoubtedly it's going to look cryptic. But unlike human were a lot more sophisticated, a grammatical rules, programming, once it is and how it works and what these you'll see, after a few to start teaching other languages, as they may So what ultimately matters is not so much where you end but where you end up relative And indeed, you'll begin today. And the only experience that matters And so, consider where you are today. Consider, perhaps, just how looked a few seconds ago. And take comfort in knowing just will be within your own grasp. And if you're thinking that, OK, surely to the right, behind me, knows more than 2/3 of CS50 students have never taken you're in very good company So then, what is computer science? I claim that it's problem solving. And the upside of that is something we sort of do all the time. But a computer science I think kind of cleans up your thoughts. It helps you learn how to think more correctly, more precisely. Because, honestly, the to do what you want unless you are And so, as such, there's of just learning to think like a And it doesn't take all This, for instance, is perhaps the sure, but really problem Problems are all about taking input, You want to get the solution, a.k.a. output. And so, something interesting in here, when you're trying to Now, in the world of we need to decide in advance how we We all just need to decide, whether else, that we're all going to speak of our human languages as well. And you may very well know that what language, so to speak? Assembly, one, but binary, And binary, by implying two, has just two digits at And indeed, we humans have many more and ones alone. But a computer indeed And yet, somehow they can do so much. They can crunch numbers in create images and artwork And so, how do you get from something to all of the stuff in our pockets and laptops and desktops? Well, it turns out that If a computer were to want to do what could it do? Well, in our human world, like 1, 2, 3, 4, 5, using so-called on your fingers where one finger if I'm, for instance, taking attendance. Now, we humans would typically And we'd go past just those five using zeros through nines. But computers, somehow, only So if a computer only somehow how does it even count Well, here are 3 zeros, of course. And if you translate this to a more familiar number in decimal, Enough said. If we were to represent, with it would actually be 001, is exactly the same as we but we might not bother writing But a computer, now, if it it doesn't have the digit 2. And so it has to use a different And that happens to be 010. So this is not 10 with It's indeed zero one zero And if we want to count we're going to have to tweak these And then if we want 4 just kind of toggling these bits, for binary digits that represent, different numbers that you of course, as the so-called dec implying 10, 10 digits, So why that particular pattern? And why these particular zeros and ones? Well, it turns out that is just really simple for a computer. Why? At the end of the day, they're And it's a really simple thing to or don't store some electricity. Like, that's as simple as 1 or 0, so to speak. So, in fact, inside of a these days that's is some number of switches, And they're tiny. You've got thousands, millions of them And these are just tiny little switches And by turning those things a computer can count from 0 on up And so these switches, really, you like this. Let me just borrow one of Here's a light bulb. It's currently off. And so, I could just think in my laptop, a transistor, But if I allow some electricity Well, how do I count higher than 1? I, of course, need another light bulb. So let me grab another one here. And if I put it in that same kind of That's sort of the old finger I want to actually take of these things being on and off. So if this was one a moment ago, what I and let the next one over be on, a.k.a. 010. And let me get us a And that feels like enough. Here is that same pattern now, So here is 000. Here is 001. Here is 010, a.k.a., in our And then we could, of course, This now would be 3 and dot dot dot. If this other bulb now goes and all three stay on-- AUDIENCE: Seven. DAVID MALAN: OK, so, seven. So it's just as simple, But how is it that these Well, these patterns actually You and I don't really anymore because we've probably been school or whatnot. But if we consider something in I immediately jump to that. This looks like 123 in decimal. But why? It's really just three symbols, with a couple of curves, that just assign meaning to. But if we do rewind a few years, because you're assigning meaning The 3 is in the so-called ones place. The 2 is in the so-called tens place. And the 1 is in the And then the math ensues This is technically 100 times 1, plus 100 plus 20 plus 3. And there we get the sort of Well, nicely enough, in binary, It's just these columns mean If you use three digits in decimal, the tens place, and the hundreds place, They're technically just powers of 10. So 10 to the 0, 10 to Why 10? Decimal system, &quot;dec&quot; meaning 10. You have 8 and 10 digits, 0 through 9. In the binary system, if you're just change the bases if you're So now it's powers of 2, 2 to the 1 and 2 and 4, respectively. And if you keep going, it's going and so forth. So, why did we get these Here's your 000 because it's 4 times This is why we got the This is why we got the number 2 0, plus 2 times 1, plus 1 times 0, and and now 7. And, of course, if you wanted to what do you have to do? What does a computer need to AUDIENCE: Add a bit. DAVID MALAN: Add a bit. Add another light bulb, another switch. And, indeed, computers many zeros and ones, they throw at these kinds of problems. And, in fact, most computers would And even if you're only counting you would still use eight and But that's OK, because the have so many more, thousands, that that's quite OK. All right, so, with that said, if or, frankly, as high seems to make computers like number crunching. But computers, of course, write documents, and so much more. So how would a computer represent like the letter A of the English all they have is switches? Any thoughts? Yeah. AUDIENCE: You can represent DAVID MALAN: OK, so we could OK, so what's a proposal? What number should represent what? AUDIENCE: Say if you were starting you could say 1 is A, 2 is B, 3 is C. DAVID MALAN: Perfect. Yeah, we just all have to agree going to represent one letter. So 1 is A, 2 is B, 3 is Maybe we can even take into We just have to agree and sort of And humans, indeed, did just that. They didn't use 1, 2, 3. It turns out they started Capital A has been And capital B has been And you can kind of imagine And that's because whatever ultimately, can only be stored, at And so, some humans in a room before, or, really, this pattern of zeros in the world, 01000001. So if that pattern of zeros and it might be interpreted then as indeed at a time. But I worry, just to be clear, we It might seem, if I play how do I now actually do If now Excel displays 65 is So how might a computer have this mapping from numbers to It feels like we've given something up. Yeah? AUDIENCE: By having DAVID MALAN: By having a prefix? AUDIENCE: You could have DAVID MALAN: OK, so we could like some pattern of zeros and ones-- I like this-- that here comes another pattern Here comes another pattern that So, not bad. I like that. Other thoughts? How might a computer Yeah. AUDIENCE: Have a like, odd text or just DAVID MALAN: Indeed, and that's spot-on. Nothing wrong with what you suggested, The reason we have all of these like JPEG and GIF and PNGs and Excel files and so forth, is and decided, well, in the context more specifically, in the Excel versus Photoshop versus we shall interpret any patterns of for Excel, maybe letters in, like, a or maybe even colors of the rainbow So it's context dependent. And we'll see, when we you the programmer some hints to the computer that tells So, similar in spirit to that, but prefixes. So this system here actually has a Code for Information Interchange. And indeed, it began here why it's actually a little and a bit of punctuation as well. And that quickly became a problem. But if we start simply now, itself is fairly straightforward. So if A is 65, B it 66, that you received a text and underneath the hood, looked inside the computer, what you or this email happened to or, really, the underlying What might your friend have sent you AUDIENCE: Hey. DAVID MALAN: Hey? Close. AUDIENCE: Hi. DAVID MALAN: Hi. It's, indeed, hi. Why? Well, apparently, according to this It's not obvious from but indeed, this And anyone want to guess, AUDIENCE: Exclamation point. DAVID MALAN: Exclamation point. And this is, frankly, not the But it's easily accessible by a So this is an ASCII chart. When I said that we just need to this is what people did. They wrote it down in And, for instance, here is our and here is our 33 And computers, Macs, PCs, just know this mapping They've been designed to So here, I might have received &quot;hi.&quot; Technically, what I've received is But it's important to note that when in any format, be it they do tend to come with a certain number of And this happens to be 8 plus 8, plus 8. So just to get the message you would have received at least, But frankly, bits are so tiny, that we don't tend to think or You're probably more B-Y-T-E-S is a byte, A byte is just 8 bits. And even those, frankly, aren't How high can you count Anyone know? Say it again? Higher than that. Unless you want to go 256, technically 255. Long story short, if we actually got and ones, and we figured out what to in decimal, it would if you want to represent So this is useful because now we can but, if the files are bigger, megabytes is millions of bytes, terabytes are trillions We have a vocabulary for these The problem is that, if you're using byte per character, and can only represent 255 characters. And that's actually 256 total And that's fine if you're using plus a bunch of punctuation. But there's many human that need many more symbols So, thankfully, the world support not just the US of the accented characters that And heck, if we use enough not only can we represent all as well as some emotions can capture the latter with And indeed, these are very You probably send and/or receive These are just characters, like of zeros and ones that you're receiving, For instance, there are represented with And when you receive them, your displays them as such. And this newer standard So it's a superset of And Unicode is just a mapping of many or characters, more use eight bits for with the old way of doing things with And if you have 16 represent more than And that's getting up there. And heck, Unicode might even use 32 and punctuation symbols and emojis. And that would give you up And, I daresay, one of the reasons we have so much room. I mean, we've got room for So, in fact, just as a has anyone ever received this decimal has anyone ever received this pattern in a text or an email, Well, if you actually look this up, happens to represent And notice that if you've got you might be seeing different things. In fact, this is the Android This is the iOS version And there's bunches of other as well. So Unicode, as a has standardized the descriptions But the companies themselves, have generally interpreted And this can lead to some In fact, for like, literally, I started being in the habit of like this because I thought it was I didn't realize this because whatever device I was using And that's because of their This has happened too when pistol in some manufacturers' eyes. And so it's an interesting dichotomy want to represent and how we Questions, then, on these be it numbers or letters, or soon more. Yeah? AUDIENCE: Why is decimal if binary is the basis for everything? DAVID MALAN: Sorry, AUDIENCE: Why is the decimal popular DAVID MALAN: Yeah, so we'll come There are other ways Binary is one. Decimal is another. Unary is another. And hexadecimal is yet a fourth that through 9 plus A, B, C, you can similarly count We'll see in a few weeks But hexadecimal, long story And so, four bits, if you have two And it's just a very And it's also human convention in But we'll come back to that soon. Other questions? AUDIENCE: Do the lights on the DAVID MALAN: Do the lights on the Well, if we had thought in advance that would seem to give us 8 giving us just that. Maybe. Good question. Other questions on 0's and 1's? It's a little bright in here. No? Oh, yes? Where everyone's pointing There we go. Sorry. Very bright in this corner. AUDIENCE: I was just going like with the maximum characters. [INAUDIBLE] DAVID MALAN: Ah, sure, and we'll in the coming days too, we have, with eight bits, two and then two for the next, two So that's 2 times 2 times 2. That's 2 to the eighth means you can have 256 total But as we'll see soon computer software often starts counting at 0 by patterns, 00000000 to represent you only have 255 other patterns left That's all. Good question. All right, so what then might we and numbers? Well, we of course have things like Photoshop and pictures and photos. Well let me ask the question again. How might a computer, do you think, something like a color? Like what are our options if all we've Yeah? AUDIENCE: RGB DAVID MALAN: RGB. RGB indeed is this acronym that and some amount of green and can represent colors by just doing that. Remembering, for instance, this dot. This yellow dot on the screen that these days, well that's some amount some amount of blue. And if you sort of mix you can indeed get a very specific one. And we'll see you in So indeed earlier on, humans And it was only once they decided, got extended ASCII and a solution to the same problem of in those patterns of zeros and ones that you might want. But even that wasn't enough and that's and long past 7. So if we come back now to RGB was proposed as a scheme, Well, consider for instance this. If we do indeed decide as a group to with some mixture of some red, we have to decide how to represent Well, it turns out if all we have let's do just that. For instance, suppose a computer we're no longer in the context of but now in the context of something and creating graphical files, could be interpreted as representing respectively. And that's exactly what happens. You can think of the first digit as And so ultimately when you combine that that amount of blue, it turns out it's And indeed, you can come up for each of those colors to mix any And you can actually Even though our screens, on our phones and laptops such that you You might have heard Pixel's just a dot on got thousands, millions of them these If I take even this to be one company's interpretation and zoom in a bit, maybe you can actually start Things get pixelated is each of the individual dots And apparently each of are probably using 24 bits, eight bits bits for blue, in some pattern. This program or some other like and it's white or yellow or So if you look sort of awkwardly, but or maybe your TV, you can All right, well, what watch every day on YouTube or the like? Things like videos. How would a computer, represent something like a video? How might you represent a video Yeah? AUDIENCE: As we can see here, [INAUDIBLE] sounds of [INAUDIBLE] DAVID MALAN: Yeah, exactly. To summarize, what video really It's not just one image, it's it's presumably some kind of So with a whole bunch of images, if you fly them by the interpret them using our eyes movement and therefore video. Similarly with audio or music. If we just came up with some convention on a musical instrument, could we have And this might be Let me pull up a quick video here, version of the same idea. You might remember from childhood. [MUSIC PLAYING] [CLICKING] So granted that particular of a paper-based animation, but is some sequence of these images, are just zeros and ones because they're Now something like musical notes like might just naturally play but computers can certainly For instance, a popular called MIDI and MIDI each note that you saw a moment ago But more generally, you might for instance, A through G, maybe you might have the duration like how on a piano or some just the volume like how hard press down on that key and It would seem that just remembering we can then represent really all of So that then is really that we can just represent information. Again, computers or digital have but at the end of the day and as are, it's just zeros and ones, tiny if you will, represented in some that you and I and others and ones in ways we want to get more powerfully. Questions, then, on this representation is ultimately what problem solving and producing new via Any questions there? Yeah, in back. AUDIENCE: Yeah, so we talked about how you to interpret information. How does a file format like .mp4 within itself as a value? DAVID MALAN: So a really good question. There are many other You allude to MP4 for video are these things called It's not quite as simple when in more modern formats that a for instance. Why? If you stored that many images like 24 or 30 of them per second, And if you've ever taken you might know how many megabytes or might be. So humans have developed over that uses much more math to represent just using somehow shorter than are most simplistic And they use what might If you've ever used a zip somehow your computer is to represent the same ideally without losing any information. In the world of multimedia, which we'll there are both lossy and Lossless means you lose But more commonly as you're alluding where you're actually throwing You're getting some amount look perfect to the human, but heck to distribute. And in the world of multimedia, and other MPEG containers different formats of video, different but there, too, do So more in a few weeks, too. Other questions, then, on Yeah? AUDIENCE: So I know and taking up like a Is the reason they've gotten this information piecemeal or what? DAVID MALAN: Exactly. I mean, back in the day you might tube, which is like some might have only stored some 0 or 1. Yes, it is the miniaturization that has allowed us to store as many closely together. And as we've built more can sort of design this hardware we're just packing more and But there, too, is a trade off. For instance, you might know by for quite a while, maybe on So there are these literal of this where now some This is why like a data might need more air conditioning because there are these In fact, if you'd like to see one of across the river here in now Allston is the Harvard Mark 1 computer that of just that. Well if we come back now being computer science or I daresay we have more to represent information, input and on something and thankfully all things like ASCII and Unicode. Not to mention MP4s, word But what's inside of this proverbial going in the outputs are coming? Well that's where we get this An algorithm, which is just step-by-step incarnated in the world When you write software are implementing one or more algorithms, for solving some problem, and maybe but at the end of the day, you use the computer is going using just zeros and ones. So what might be a Nowadays you might use to make calls or send texts have a whole bunch of Nowadays, of course, but whether on iOS or you might have a whole and/or last, as well as numbers You might be in the habit of like all of those names to find It's probably sorted alphabetically by or some other symbol. This is frankly quite the same as when we just used a physical book. In this physical book of names alphabetically corresponding to a So suppose that in this we want to search for John Harvard. We might of course start here, looking at one page at a This is like literally step-by-step to this problem. In that sense, if John is this algorithm page-by-page AUDIENCE: Yes. DAVID MALAN: Yes. Like if John Harvard's obviously I'm eventually going to get to Is it efficient? Is it well designed, would you say? No. I mean this is going to take forever depending how this thing's sorted. All right, well let I'll start like two pages at a time. 2, 4, 6, 8, 10, 12, and so forth. Sounds faster, is faster, is it correct? AUDIENCE: No. DAVID MALAN: OK, why is it not correct? Yeah? AUDIENCE: So if you're you're only going odd number of pages, you'll miss it. DAVID MALAN: Exactly. If I start on an odd number of I might miss pages in between. And if I therefore conclude of the book there was no John This would be again one of these bugs. But if I try a little harder, We don't have to completely I think we can probably go But what should we do Yeah, in back. AUDIENCE: [INAUDIBLE] DAVID MALAN: Nice. So I think what many of us, most of us, these days, we might go roughly just to kind of get us started. And now I'm looking down, I'm looking and it looks like I'm in the M section. So just to be clear, AUDIENCE: [INAUDIBLE] DAVID MALAN: OK, and would be to the left of this. So here's an opportunity to this particular problem in half, It's actually pretty easy The hard way is this way. But I've now just decreased the So if I started with 1,000 pages I'm down to 500. And already we haven't but that's a big bite I do think it's correct because if he's definitely not I think if I repeat this again here I might have gone a little too far. Now I'm in like the E section. So let me tear the problem in half and again repeat, dividing until finally, presumably, I end book on which John Harvard's but because of the algorithm I know that he's not in So traumatic is that to be, it's actually just harnessing Indeed, this is what It's not about learning but really just how to harness intuition have and take naturally them now more succinctly, using things called Why is an algorithm like that if I found just doing the first and maybe doubling back Well let's just look Again, we don't have to get but if we've got like a chart here I claim as the size of the problem. So measured in the numbers So the farther you go out here, the And here we have time So the higher you go going to be taking to solve So let's just arbitrarily say that like n pages, might be No matter the slope, because there's presumably between numbers of pages and number Why? If the phone company adds because some new people going to require one One to one. If, though, we use the second unless we double back a little bit that's too going to be a going to be a different slope because relationship because I'm So if the phone company adds that still only just one more step. You can see the difference If this is the phone book in it might take this many to represent or to find But of course on the first it's literally going to And what do the n here mean? for computer scientist or programmer So if the number of pages the number of steps the second would be in the worst case n over 2. Half as many because But the third algorithm, actually looks a little something like this. There's a fundamentally between the size of the problem and that technically is but it's really the The implication there is that if, two different towns here in and there's just one phone no big deal for that Why? You just tear the problem taking one more byte, bytes just to get to the solution. Put another way, you way out here to a much bigger that green line is barely So this then is just a way of about what the performance or Before we now make one more any questions then on this notion of Yeah. AUDIENCE: How many phone DAVID MALAN: (LAUGHING) A lot and if you or your parents have any use them because they're hard to find. Other questions? But thanks. Other questions here, too? No. Oh, was that a murmur? Yes, over here. AUDIENCE: You could get Harry DAVID MALAN: Sorry, say again. AUDIENCE: You could get Harry DAVID MALAN: (LAUGHING) Oh, yeah. Hopefully. Then we'd have a little So now if we want to formalize we can go ahead and introduce this. A form of code aka pseudocode. Pseudocode is not a specific we're about to start coding in, it's in English or any human correctly toward an end of getting So for instance, here formalize the code, the pseudocode Step one was pick up the Step two might be open to as you proposed that we do first. Step three was probably to And step four gets a because I had to quickly make a If person is on page, then go ahead and call that person. But that probably wasn't the and I opened the M section. So there's this other ask else if the person then I should tear the problem to speak, and then not just open to the but really just go back to Why? Because I can just repeat what I having taken this big bite. But, if the person as might have happened with a then I should open to the middle again go back to line not going to get sucked doing because I keep shrinking Lastly, the only left, if John Harvard is not on and he's not to the right, AUDIENCE: He's not there. DAVID MALAN: He's not there. He's not listed. So we need to quit in some other form. Now as an aside, it's kind of deliberate at the end because this is what whether you're new at just not considering all possible that might not happen that often, in your own code, this is when and why or you might say stupid little or your computer might reboot. Why? It's doing something if a human, maybe myself, Like what does this program do if if I had omitted lines 12 and 13? I don't know. Maybe it would behave because it's sort of undefined behavior. These are the kinds of omissions going to make, bugs mistakes you're going to make early But you'll get better at and handling anything that can your code will be all the better for it. Now the problem ultimately especially if you've or even if you do but you is that they all look a little But they do share certain commonalities. In fact, we'll use this Highlighted in yellow we're going to start calling functions. Lots of different programming have what we might call or verbs that solve That is to say, you might use to solve a bigger problem something very specific or precise. These then in English might be code, to these things called functions. Highlighted in yellow now are Conditionals are things based on the answer to some question. You can think of them kind Do you go left or go right based on the answer to some question? Well, what are those questions? Highlighted now in yellow or what we after a mathematician last name Bool, Or, if you prefer, true or false answers We just need to distinguish The last thing manifests is what I might highlight Some kind of cycle, some kind of again and again so that I don't a 1,000-page phone book, I can get of repeat myself inherently in order to last step. So this then is what we and indeed there are of programs that we'll touch on before values, variables, and more, but including some we will very and that everyone in the real its programs tend to look like this. This for instance, is a distillation I wrote in 1996 in CS50 itself just In fact, this version here just tries Which is, dare say, the most any programmer ever gets a but look at this mess. I mean, there's a hash symbol, words like int, curly braces, quotes, slashes. I mean there's more overhead than there is an actual idea. Now that's not to say that you won't because honestly there's not that many have typically a much smaller vocabulary but at first it might But you can perhaps infer I have no but &quot;Hello, world.&quot; is will be printed on the screen. But what we'll do today, and set the stage for these exact same ideas in something that you when you're quite younger but to those ideas. The upside of what we'll soon do using language from our friends down the start to drag and drop things that together if it makes but without the distraction curly braces, angle brackets, that are quite beside the point. But for now, let's go ahead and when we resume, we So this on the screen C something that will dive this now on the screen is that we'll also take a look at with other languages along the way. Today though, and for this first we use Scratch because us to explore some of those that will be in C and in Python and in but in a way where we don't have to So the world of Scratch looks like this. It's a web-based or downloadable that has this layout here we'll soon see is a palette of puzzle represent all of those And by dragging and or blocks over this big area if it makes logical start programming in this environment. The environment allows you to have Multiple characters, things else, and those sprites exist up here that you can full screen to is Scratch, who can move up, down, left, Within its Scratch's as perhaps a familiar which is helpful only when it comes Right now Scratch is at the default, If you were to move the cat way y would be positive 180. If you move the cat all the way but y would now be negative 180. And if you went left, x would become or to the right x would be So those numbers generally don't move relatively in this but when it comes time some of these sprites be helpful just to have that mental Well let's go ahead and make perhaps I'm going to switch over to the now for a tour of the left hand side. So by default selected here are which has a whole bunch of puzzle And whereas Scratch as categorizes things by the type we'll see that throughout we'll have functions and and Boolean expressions and more So for instance, moving 10 steps would be functions categorized Under looks in purple, you that you can create by these that might say &quot;hello&quot; or Or you could switch costumes, change or anything else in between. Sounds, too. You can play sounds like &quot;meow&quot; or yourself. Then there's these things Scratch calls is the first, when green flag clicked. Because if we look over to the this rectangular region has sign up above, one of which is and so that's going to allow us to when that green flag But you can listen for other types of or something else, when this sprite Here you already see like a you and I take for granted like Any time you tap an icon or drag your These are what a programmer things that happen and humans and things that a program or C or anything else can Indeed, that's why when you tap the phone application wrote software that's listening for a So Scratch has these same things, too. Under Control in orange, can wait for one second some number of times, can change anything in these There's another puzzle which implies some kind of loop where Even though it seems a not much room to fit is going to have these however we want to fill Here are those conditionals. If something is true or false, And that's how we can put in Some form of Boolean expression, a or one/zero answer and decide You can combine these things, too. If something is true, do this, And you can even tuck if you want to ask three Sensing, too, is going to be a thing. You can ask questions aka Boolean the mouse pointer, the So that you can start to What is the distance between You can do simple calculations if the enemy is getting Under Operator some lower level to pick random numbers, because then you can kind or what's happening in a game the same way every time. And you can combine ideas. Something and something must be true before. Or we can even join two words together. Says apple and banana by default, whatever you want there to larger sentences. Then lastly down here, there's in In math we've obviously In programming we'll to store in these named symbols, Numbers or letters or words or But in programming you'll see that use simple letters like x give variables full singular or plural Then lastly, if this isn't you can create your own blocks. Indeed, this is going to be a and with the first problem set whereby pieces and you realize, oh, would have have just been replaced by one one puzzle piece, you yourself by connecting these all together, a new puzzle piece will exist. So let's do the simplest, here, starting up with to click and drag and drop this Then I'm going to grab one and under Looks I'm going something like initially not Hello comma world. Now you might guess that in I can go over here now and Hello comma world. So that's my first more user friendly than typing out saw on the screen that you, But for now, we'll just focus on So what it is that just happened? This purple block here is and it seems to take some form of input comma world. Well this actually fits at earlier of just inputs and outputs. So if I may, if you consider it actually fits this model. The input in this case is going The algorithm is going to be implemented and the output of that is going like the cat and the speech So already even that mimics exactly this relatively So let's take things further. Let's go ahead now and make the that it says something like or Hello to you specifically. And for this, I'm going And you might have to poke around around, but I've done this a few times and what color. There's this function here. Ask what's your name, so we can change the we want, and it's going to wait for This function called Ask from the Say block, which just had bubble to the screen. The ask function is even more powerful something in. This function is going they typed in in the form of is stored ultimately and by This little blue oval here one of these variables be called just x or y but in So I'm going to go ahead and do this. Let me go ahead and and I want to ask the question but you'll notice that going to realize I want to and it's just going to I'm going to let go and ask the And now if I want to go ahead let's just do Hello don't know when I'm writing the So let me now grab another looks block let me go back to Sensing and now by this other puzzle piece, and Notice it's the same shape, even Things will grow or shrink as needed. All right, so let's now zoom out. Let me go and stop the old version world anymore. Let me hit the green All right, David. Enter. Huh. All right, maybe I just wasn't Let me try it again. Green flag, D-A-V-I-D, Enter. This seems like a bug. What's the bug or Yeah? AUDIENCE: Do you need to somehow add DAVID MALAN: Yeah, we kind of want And it's technically a bug because It's just saying David I'd like it to say but it's just blowing past But let's put our finger You're right for the solution, but In back. AUDIENCE: So it says hello, so quickly you can't see it. DAVID MALAN: Perfect. I mean, computers are It is saying Hello, all of us to even see it because it's then saying So there's a couple of solutions but just to poke around, of how many ways in programming be else, that there are going We'll teach you over the sometimes some ways are but rarely is there a because again reasonable And what we'll try to teach is how to kind of think And it's not going to be but the more programs you you get, the more bugs the more you'll get your footing with So let me try this in a couple of ways. Up here would be one MIT anticipated this kind of issue, and I could just use a say the following for or whatever, then do the and it might be kind Hello, one second, two seconds, David, it would look a little But I can do it a little more Let me go ahead and throw and you can just drag and let Let me go down to Operators because So even if you're not sure what goes Let me drag this over here. It grew to fill that. Let me go ahead and Now it could just say by but let me go back to and that's going to drag and drop there. So now notice we're sort of stacking so that the output of one becomes the Let me go ahead and zoom All right, what's your name? D-A-V-I-D, Enter, and voila. Now it's presumably [APPLAUSE] (LAUGHING) Oh, thank you. Thank you. No minus 2 this time. So consider that even with it still fits the same mental model, Here's that new function And notice that in this case too henceforth as an argument speak for just an input in If we use our drawing as before we'll see that the input now is going The algorithm is going to be implemented the function called Ask, and the is not going to be the but rather it's going So instead of the visual side effect now nothing visible is happening yet. Thanks to this function it's sort of with whatever I typed in written on it times even like I did. Now what did I then do with that value? Well consider that with we had this Say block, So we have this variable with that first argument, Hello. So already we see that can take not one but two arguments, The output of Join is presumably going or whatever the human typed in. That output notice is essentially Say, just because we've or nested them on top of one another. But methodically, it's The input now are two things, from the previous Ask function. The function now is going to be Join, But that Hello, David to become the input to another function, and that's then going to have the side on the screen. So again as sort of sophisticated are going to get, they really do of inputs and outputs and you just have and to know what kinds of puzzle But you can ultimately really Let me go back to my using the speech bubble at the moment. Scratch's inside has some pretty I click the Extensions button And let me go ahead and choose This is using a Cloud service, so it can actually talk to the and this one is going to give me a the ability to speak instead of just saying it textually. So let me go ahead and drag this. Now notice I don't have to interlock and I want to move some things around. I just want to use this as Let me go ahead and put it there, let me throw away left and letting go, and so I've now changed my program So now let me stop the old version. Let me start the new. What's your name? Type in David. And voila: PROGRAM: Hello, banana. DAVID MALAN: (LAUGHING) All right, so what I accidentally for instructional purposes, that came back from the ask block. That's embarrassing. So now if I play this again, What's your name? David. And now: PROGRAM: Hello, David. DAVID MALAN: There we go. Hello, David. All right, thank you. [APPLAUSE] OK, so we have these functions then Well what about those conditionals How can we bring these programs clicking a button and voila, Let's go ahead and make this Let me go ahead and throw and let me just spice things up I'm going to go to Play Here we go, green flag. [MEOW] OK, it's a little loud, but it Let's hear it again. [QUIETER MEOW] OK. It's kind of an underwhelming since you'd like to think that the [MEOW] I have to keep hitting the button. Well this seems like an opportunity So all right, well if I let me just grab a few of these, or you and you can Copy Paste Let me play this now. [THREE MEOWS] All right, so now like happiness in quite the same way. It might be hungry or upset. So let's slow it down. Let me go to Control, wait which might be a little less worrisome. Here we go, Play. [THREE SLOWER MEOWS] OK, so if my goal was to make I dare say this code or But let's now critique its design. Is this well-designed? And if not, why not? What are your thoughts here? Yeah? AUDIENCE: You could use the forever DAVID MALAN: Yeah, so yeah, agreed. I could use forever or repeat, But why? Like this works, I'm kind of done with AUDIENCE: There's too much repetition. DAVID MALAN: Yeah, there's If I wanted to change the to a different variant of meow or I could change it from the but then I'd have to change it here and God, if this were even longer and you're probably that you're going to to miss one of the dropdowns or Or, if you wanted to change the you've got to change it in Again, you're just and potential bugs in the program. So I do like the repeat or the forever And indeed, what I copy pasting earlier, doesn't And in code, generally start to copy and paste puzzle you're probably not doing So let me go ahead and throw away most keeping just two of the Let me grab the Repeat block for now, block, it's going to grow to fit and change the 10 just [THREE SLOW MEOWS] So, better. It's the same thing. It's still correct, but to let the cat meow, for instance, 40 times by changing one thing, or and just walk away and it If that's your goal, A better design but still correct. But you know what? Now that I have a to have a cat meow, wow like why? I mean, MIT invented why is there no puzzle This feels like a missed opportunity. Now to be fair, they gave with which we could implement that and really computer science going to now start calling Abstraction. We have step-by-step instructions and the Wait that collectively that we humans would call meowing. Wouldn't it be nice to abstract pieces into just one that literally Well here's where we Let me go over here to Scratch here and let me click Make a Block. Here I see a slightly where I can choose a name for it I'm going to keep it simple. That's it. No inputs to meow yet. I'm just going to click OK. Now I'm just going to Let me drag and drop Play And you know what? I'm just going to drag this here because now that I'm I'm going to literally abstract out of mind, because now notice at piece called Meow. So at this point, I'd argue it doesn't Frankly, I don't know how Ask They abstracted those Now I have a brand new puzzle And this is now still correct, Why? Because it's just more it's more maintainable a year from now for the first time back at the very first It says what it does. The function itself has semantics, If you really care about you could scroll down and start implementation details, but otherwise Now I feel like there's an here for abstraction and to factor It's kind of lame that I lets me call the Meow function, three times. Wouldn't it be nice if I could aka use the Meow function, and pass piece how many times I want it to meow? Well let me go ahead and Let me right click or Control click on or I could just start from scratch, Now here, rather than just give this and add an input here. I'm going to go ahead and for number of times to this even more user friendly I'm going to add a label, it's just an aesthetic, to say Times, just to make in this case that tells me Now I'm going to click OK. And now I need to refine Let me go ahead and grab let me move the Play, Sound, I don't want 10 and I What I want now is this n that is is creating for me that represents provides. Notice that snaps right in place. Let me connect this and now voila, I that is parameterized. It takes input that affects Now I'm going to scroll back up, I just care that Meow exists. Now I can tighten up my code, so to do the same thing by reconnecting this new puzzle piece here now we're really programming, right? We've not made any forward The thing just mouse three times. But it's a better design. As you program more and of instincts still start you can start to take a big assignment, for homework even, that feels kind of where do I even begin? But if you start to identify what are Then you can start making progress. I do this to this day where if I have to it's so easy to drag my feet and ugh, until I just start writing and I start to modularize the what do I want this thing to do? Meowing. What's that mean? I've got to have it say All right, I need to have it some number of times. Like literally a mental or written if you will, in English on a and then you can decide, need to do for homework to I just need a Meow function. I need to use a bunch but I need to create a now you have a piece of the problem book there, but in this case, we'll All right, so what more can we do? Let's add a few more Let's actually interact Let me go ahead and now when the and ask a question using an event here. Let me go ahead and to do something like implement So if the cursor is touching the it'd be cute if the cat meows So I'm going to ask the question, if let's see I think I need Sensing. So if touching mouse but again the shape is Grew to fill. And then if it's touching that is if the cat to whom any time I attach puzzle or like a program, if you will, let and say play sound meow until done. All right, so here it is to be clear. When the green flag is if the cat is touching the mouse Here we go. Play. [SILENCE] All right, let's try again. Play. [SILENCE] Huh. I'm worried it's not Scratch's What's the bug here? Why doesn't this work? Yeah, in back, who just turned. AUDIENCE: [INAUDIBLE] DAVID MALAN: Yeah, the problem is Scratch asks the question, is the And obviously it's not because the and it's not down there. It's fine if I move the cursor The program already asked the question. The answer was no or false or zero, so no sound was played. So what might be the solution here be? I could move my cursor like never going to work out right. Other solutions here? Yeah, in way back? Could you use the forever loop? The Forever loop. So I could indeed use this Forever to just constantly listen to me, well or at least forever as running until I explicitly hit Stop. So let me grab that. Let me go to Control, let let me move the If inside of this go back up here, click the green but let me try moving my cursor now. [MEOW] Oh. So now. [MEOW] That's kind of cute. So now the cat is actually going to keep doing So now we have this idea of taking these pieces, assembling them into I could definitely put a name to this. I could create a custom let's just consider what kind Let me go ahead and do this. By again grabbing a, let me go ahead and and I'm going to rotate the going to get a little inception thing the camera is up there. So I'm going to go reveal to here while we rotate this. Now that we have a non video Instead of the green flag going to say when the video motion measurement of motion, I'm going to go And then I'm going to So here's the cat. We'll put them on top of there. [MEOW] OK. All right, and here we go. [MEOW] So my hand is moving faster whatever the unit of measure is. [MEOW] AUDIENCE: Aw. DAVID MALAN: (LAUGHING) Thank you. So now we have an even [MEOW] But I think if I sort of slowly. [LAUGHING] (LAUGHING) Right? It's completely creepy, but I'm [MEOW] Until finally my hand And so here actually is something a former student did. Let me go ahead here and-- [MEOW TWICE] OK, got to stop this. Let me go ahead and zoom out [MEOW] If someone would be-- [LAUGHING] (LAUGHING) If someone coming up not only masked but I thought we'd play one of your former Would anyone like to volunteer Who's that? Yeah. Come on down. What's your name? AUDIENCE: Sahar. DAVID MALAN: Sahar. All right, come on down. Let me get it set up for you here. [MEOW] [APPLAUSE] [MEOW] All right, let me go ahead So this is whack-a-mole by one It's going to use the camera focusing to position inside of this rectangle. Have you ever played the AUDIENCE: Yeah. DAVID MALAN: OK. So for those who haven't, and with a very fuzzy You though, if you to use your head to do this virtually. So let's line up your head with we'll do beginner. [MUSIC PLAYING] All right, here we go. Sahar. Give it a moment. OK, come a little closer. [DINGING] And now hit the moles with your head. [DING] There we go, one point. [DING] One point. [DINGING] Nice. 15 seconds to go. There we go. Oh yeah. One point. [LAUGHING] [DINGING] Six seconds. AUDIENCE: Oh no. DAVID MALAN: There we go. Quick! [DINGING] All right, a round of Thank you. [APPLAUSE] So beyond having a the goal was to some fairly simple, primitive, but assembling them in a fun some new costumes or artwork, you But at the end of the day, the were ones like the ones I just because there were So the student probably created a few but at least four different moles. They had like some kind of graphic where to position her head. There were some kind of that every second was counting down. So you can imagine taking what looks at first glance, and to solve yourself, but just think about And pluck off one piece of the So indeed if we rewind a little bit. Let me go ahead here that I myself made when Scratch was first Let me go ahead and open something that I called back looks a little something like this. If I fullscreen it and hit Play. [MUSIC - SESAME STREET, &quot;I LOVE TRASH&quot;] OSCAR THE GROUCH: DAVID MALAN: So you'll notice I can click on it and drag and as I get OSCAR THE GROUCH: (SINGING) DAVID MALAN: It wants And if I let go-- OSCAR THE GROUCH: (SINGING) Yes, I-- DAVID MALAN: One point. Here comes another. OSCAR THE GROUCH: (SINGING) If you DAVID MALAN: I'll do OSCAR THE GROUCH: (SINGING) I have here DAVID MALAN: There's a so another sprite of some sort. OSCAR THE GROUCH: (SINGING) A gift from my mother-- DAVID MALAN: I can also and just let them fall into the So you can see it doesn't have it has to do apparently Let's listen a little further. I think some additional trash Presumably there's some kind of variable OSCAR THE GROUCH: (SINGING) I love-- DAVID MALAN: OK, let's see OSCAR THE GROUCH: I have here some newspaper, crusty and DAVID MALAN: OK, and thus he continues. And the song actually and I do not have fond memories this song for like 10 a good example to just consider How did I go about implementing And let me go ahead and that I wrote in advance see how these things are assembled. Honestly, the first thing to do something a little like this. Here is just a version I set out to solve of planting a lamp post in the program. Right? I kind of had a vision of what I wanted. You know, it evolved but I knew I wanted a cute little Oscar of the trashcan, and some other to just tackle all at once. I'm going to start easy, download and then drag and drop it into the version one. It doesn't functionally do anything. I mean, literally that's the All I did was use like and drag and drop and but it got me to version Then what might version two be? Well I considered what frankly might be the easiest to That seems like a pretty It just needs to sit So the next thing I for instance, the trash can version like this. So this time I'll show There is some code, but not much. Notice at bottom right I change the instead, but it's the same And then over here I added this code. When the green flag is to something I arbitrarily So I found a couple of a trash can, one that looks and eventually one that and I just gave them different names. So I said Switch to Oscar 1, which then forever do the following: then switch the costume to That is to say, I just wanted to and closing, even if it's not I just wanted to make So here, when I run this program by Nothing yet, but if I get it indeed pops open because for whether the sprite, is touching the mouse pointer. And that's it. That was version 2, if you will. If I went in now and added the lamp now we're starting to make progress. Right? Now it would look a little I intended ultimately to create. What piece did I probably Well, I think what I did let me implement one of the pieces of all at once. Let's just get one piece of So let me go ahead and open this one. And again, all of these examples will so you can see all of It's not terribly long, I so we could flip Here's what I did here. On the right hand side, I turned this time instead of a cat, and I also created, with Carter's help, It's literally just a black line to have some notion of a if the trash is touching the floor. Now without seeing the code yet, why might I have wanted the second with the trash intending What might I have been thinking? Like what problem might Yeah? AUDIENCE: You don't want the DAVID MALAN: Yeah, you don't want go through, and then boom, That would not be a very useful thing. Or it would seem to maybe eat up more if the trash is just endlessly It might be a little traumatic and you can't pull it back out So I just wanted the thing to stop. So how might I have implemented this? Let's look at the code at left. Here I have a bit of randomness, There's this blue y that lets me move a up, down, left, right, I picked a random negative 240 to positive 240, and then This just makes the It's kind of lame pretty quickly if the Here's this a little bit of randomness, that spices things up. So now if I click the green flag, nothing interesting is does stop when it touches the black I'm forever asking the question if is to the floor is greater Change the y location by negative 3. So move it down 3 pixels, down 3 is not greater than zero, it is zero it should just stop moving altogether. There's other ways we could but this felt like a nice, made it make sense. OK, now I got some trash falling, I I have a lamp post, now I'm a We're making progress. If we consider one or two like the dragging of the trash, let me Dragging the trash requires Let me zoom in here. Here's the piece of trash. I only need one sprite, no want the human to move it up, not going to physically be able If we zoom in on this code, the way We're using that And conjunction the green flag is clicked, we're these questions, plural, and the trash is touching the logically to clicking on the trash. Go ahead and move the So again it takes this that you and I take for granted and dragging and dropping. How is that implemented? Well Mac OS or Windows are For every icon, is the mouse down If so, go to the location while the mouse button is clicked down. So how does this work in reality now? Let me go ahead and click on the Play. Nothing happens at first, but if down, left, right. It doesn't move thereafter. So I now need to kind of combine but I bet I could just start Right now I'm using separate but now that's another If we do one last one, is interesting, because recall that into the can, Oscar popped out So let me go ahead and find and let me zoom in on this one. This one is longer because we So this is the kind of thing that I have no idea how I would from nothing, from scratch literally. But again, if you take your into these smaller, could take these baby solve everything collectively. So what's new here is this bottom one. Forever do the following: Oscar, the other sprite that change the score by 1. This is an orange and we'll see that orange is a variable, changing it means to add 1 or Then go ahead and have the What is this all about? Well, let me show you what it's doing Let me go ahead and hit Play. All right, it's falling, I'm clicking and I'm letting go. All right, let me do it once more. Letting go, let me stop. Why do I have this function at the Like what problem is this solving here? Yeah, in way back. AUDIENCE: Just the same after you put it in the trash can. DAVID MALAN: Yeah, exactly. Even though the human perceives from the sky, it's of trash, just kind of being as though it's a new one. There, too, you have this If you were constantly copying and creating 20 pieces of trash, 30 want the game to have that many Reuse the code that you wrote, and that would give you not just Well let's take a look at one that we can compose particularly interactive as follows. Let me go ahead and me propose that we implement something Let me go ahead here. So I want to implement looks at first glance like this. Let me hit Play. It's not a very fun game yet, shield, a couple of black lines, this but notice you can't but I'm using my arrow keys to go down, but if I keep going right, right, right it's not going anywhere. And left, left, left, left, left, left, left it eventually stops. So before we look at the code, What kinds of scripts, might collectively What do you think? AUDIENCE: [INAUDIBLE] DAVID MALAN: Perfect, yeah. There's probably some question being and it happens to be a couple is just literally a vertical black line are you touching it? Is the distance to it And if so, we just ignore the left So that works. But otherwise, if we're what are we probably doing How is the movement working presumably? Yeah and back. Oh are you scratching? OK, sure. Let's go on. AUDIENCE: [INAUDIBLE] DAVID MALAN: Sorry, say a little louder. AUDIENCE: Presumably it's continually and then moving when you do. DAVID MALAN: Exactly. It's continually, forever listening for and if the up arrow is changing the y by a positive value. If the down arrow is pressed, and left and right accordingly. So let's actually take a quick look. If I zoom out here and take a look there's a lot going on at First of all, let me drag because it's kind of especially if you, for instance, were 0 just to get inspiration, are going to look until you start to wrap your But in this case, we've from the get go to explain to at the code what's going on. This is that program with the two black down, left, and right. It initially puts the shield forever listens for keyboard, and it feels for the walls, as Now how is that implemented? Don't know yet. These are custom blocks we created those implementation details all I need to know right now. But, as aspiring programmers, let's scroll down to the of listening for keyboard. This is the one on the left but it's a lot of similar structure. We're doing the following, if the up Go up. If the down arrow is pressed, Go down. Right arrow, left arrow, and that's it. So it just assembles all into one new block just because let's just implement it And if we scroll now over to this now is asking the if I'm touching the left wall, change my a little bit. If I'm touching the right to move a little bit away from it. So it kind of bounces off the wall. Just in case it slightly went over, we All right, then a couple of What if we want to actually add to this game? Well, let me go ahead to maybe this one might, for instance, be designed to This is like a maze and you're trying to to the top or vice versa. Uh oh, Yale is in the way and it back and forth here. Well, let me ask someone else. Hypothesize. How is this working? This is an idea you have, Let's reverse engineer in How might this be working? Yeah, in back. AUDIENCE: If the Yale symbol is then have it bounce. DAVID MALAN: Yeah, so touching the left wall or the right And indeed we'll see there's a that technically off but there's another way we can do this. Let's look at the code. The way we ourselves that idea bounce is just So here's what this version It's moving Yale by default to 0,0 pointing it direction 90 degrees, which and then it's forever doing or touching the right wall, We're just turning 180 degrees. And the nice thing have to worry if we're going from 180 degrees is going to And that's it. After we do that, we just move but we're doing it forever so and the Yale icon is Well one final piece want another adversary, a more advanced to go and follow us wherever we want the other sprite to but literally follow us How might this be I bet it's another forever AUDIENCE: So forever get the and move one step towards it. DAVID MALAN: Yeah, forever point at and go one step toward it. This is just going to go on forever if I Notice it's sort of twitching pixel then one pixel then one pixel. It's sort of in a frantic state here. We haven't finished the game yet, but if It didn't take much to Go to a random position just initially, then forever which is what we called the Harvard Suppose we now wanted to What's a minor change I could to make MIT even better at this? AUDIENCE: Change the DAVID MALAN: All right, change So let's try that. So now they got twice as fast. Let me go ahead and just Oops, let me make it a fair fight. Green flag. All right, I unfortunately am so this isn't going to end well. It caught up to me. And if we're really aggressive and click the green flag. Jesus, OK, so that's how you might harder and harder. So it's not an accident that we here involving these particular demonstration we thought if we could get one other what was called by one of your Let's see, you in the middle. Do you want to come on up? What's your name? AUDIENCE: Celeste. DAVID MALAN: Say again? AUDIENCE: Celeste. DAVID MALAN: Come a Sorry, hard to hear here. All right, round of applause [APPLAUSE] OK, sorry, what was your name? AUDIENCE: Celeste. DAVID MALAN: Ceweste AUDIENCE: Celeste. DAVID MALAN: Celeste. AUDIENCE: Yes. DAVID MALAN: Come on over. Nice to meet you, too. So here we have on this other written by a former CS50 student. I think you'll see that it The maze is clearly a The goal at hand is to initially move the way on the right so that you but you'll see that and different levels of sophistication. So if you're up for it, you can use just You'll be controlling the could raise the volume just a little Here we go, clicking the green flag. [MUSIC PLAYING] Feeling ready? AUDIENCE: Yep. DAVID MALAN: Spacebar. [MUSIC - MC HAMMER, &quot;U CAN'T TOUCH MC HAMMER: (SINGING) Can't touch this. You can't touch this. You can't touch this. Can't touch this. My, my, my, my music-- DAVID MALAN: Excellent. MC HAMMER: (SINGING) so hard. Makes me want to say, oh my Lord. Thank you for blessing me-- DAVID MALAN: Two Yales now. MC HAMMER: (SINGING) Feels A super dope homeboy-- AUDIENCE: Oh! DAVID MALAN: Oh! Keep going. MC HAMMER: (SINGING) I told you, homeboy. Can't touch this. Yeah, that's how living-- DAVID MALAN: All right. MC HAMMER: (SINGING) Can't touch this. Look at my eyes, man. You can't touch this. You let me bust the funky lyrics. You can't touch this. Fresh new kicks and pants. You got it like that and So move out of your seat and get [LAUGHING] Hold on. Pump a little bit and let them know Cold on a mission, so fall on back. Let them know that you're too-- DAVID MALAN: There you go. There you go. [APPLAUSE] MC HAMMER: (SINGING) Can't touch this. Why you standing there, man? You can't touch this. Yo, sound the bell. School's in, sucker. Can't touch this. Give me a song or rhythm, making [CHEERING] They know. You talking the Hammer when That's hyped and tight. Singers are sweating so them DAVID MALAN: Second to last level. Oh! MC HAMMER: (SINGING) That chart's legit. Either work hard or That word because you know-- DAVID MALAN: Oh! Keep going, keep going! Yes! MC HAMMER: (SINGING) DAVID MALAN: You're almost there. MC HAMMER: (SINGING) Break it down. DAVID MALAN: There you go. Go, go, go! Oh. One more. Yes! [CHEERING] There you go. MC HAMMER: (SINGING) Stop, Hammer time. &quot;Go with the flow,&quot; it is said. If you can't groove to this, So wave your hands in the run your fingers through your hair. This is it. For a winner. Dance to this and you're Now move, slide your rump. Just for a minute let's all do the bump. [CHEERING] DAVID MALAN: Yes! [APPLAUSE] Congratulations. All right, that's it for CS50. Welcome to the class. We'll see you next time. [MUSIC PLAYING] DAVID J. MALAN: All right. So this is CS50. And this is week 1, the one in which is something we technically said played with this graphical language was a programming language. But today, as promised, a little more traditional, not puzzle piece- or This is an older language. It's been around for decades. But it's a language that underlies so among them something called come to in a few weeks' time. Indeed, at the end of is for you to feel that you've not learned C, or but fundamentally that you've Unfortunately, when you with a more traditional language like Last week I described all of the that you see in this, like the parentheses, curly braces, Well, today we're not going to reveal mean. But by next week, will this no to you, a language that, presumably, before. But to do that, we'll explore some So recall that, via Scratch-- and we took a look at things called And related to functions And related to some functions Then we talked a bit about conditionals, Boolean expressions, which are questions, loops, which let you do like in math, that let you and then even other topics still. So if you were comfortable on the realize that all of these topics So really, today is just about acquiring you translate those ideas into, a new syntax, frankly, simple in some ways than be it English or something else, because There's actually far less have in, say, a typical human language. But you need to be with these computer so that you're most, and ultimately will see to your code as well. So if you think about the last time knowing what you were doing might not have been that long ago, first time, or Old Campus or the like, you didn't really need to know how You didn't need to where everything was, how Harvard or worked. You sort of got by day to day by just And anything you didn't you sort of turned a blind And that's, indeed, what And really, for the next focus on details that and try to wave our hands, so to speak, we'll get to, might be interesting. But for now, they might be distractions. And by distractions, I really to which I alluded earlier. So by the end of today-- and your first foray, presumably, you'll have written some code. And you'll be asking yourself-- just how good is that code? Well, first and foremost, per or phone book form, code ultimately You want the problem So that one sort of goes without saying. And along the way this term, we'll so you don't have to just sit there checking the output, trying There's a lot of automation and in this class and will help facilitate you answering correct, according to our But then something that's and you're probably not going to feel the first weeks, is just how It's one thing to speak but it's another thing-- or But it's another thing to And we spend all these years in middle writing papers and other documents, as to how well formulated your your paper was, and the like. And there's that same It doesn't matter necessarily that If your code is a complete visual it's going to be really to wrap their mind around what your code if it is correct. And honestly, you-- the the next time you look at what you yourself were even thinking. But you will if you focus, getting your algorithms efficient, and even making sure your we'd describe as a matter of style. So in the written human world, having capitalization and the like-- the but not necessarily relates to style, for instance. And so good style in a few of these characteristics that are But you just have to start to get in the So these three axes, so to speak, are really the overarching ultimately is going to look like this. So this program we what if you run it on a Mac or What does it do? Yeah? AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: It just And honestly, that's kind need to hit your keyboard keys this to get a program to say, Hello, world. So a spoiler-- in a introduce other, more modern you can distill this same logic And so we're getting there, ultimately. But it's helpful to understand because even though this there's nothing after this week and, be able to understand even about a little something like this. So how do you write code? Well, I've given us sort How do you print, Hello, So what do I do with this code? Well, we're in the habit of typically Word or Google documents. And yeah, I could open up Word or and just literally transcribe save it, and boom, I've got a program. But the problem, per last week, is what other language, so to speak? AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Yeah, so And so this, obviously, So it doesn't matter if I put it in or the like. The computer is not going to translate it to zeros and ones. And honestly, none of those are really appropriate for programming. Why? Well, they come with features and sort of fluffy, aesthetic stuff you're trying to do with your code. And they don't have seem, to convert that code But tools that do have be called Integrated Development or, more simply, text editors. A text editor is a tool that a to write their code. And it's a simple program-- here, called Visual Studio Code, or VS Code. And at the top here, you created in advance before class a very Why? Well, .c indicates by convention that there is C code. It's not .docx, which would mean in or .pages is a Pages file. This is .c, which means in this file is C. This number 1 here is just an me keep track of how long And the cursor is just for me to start typing some code. Well, let me go ahead and type For me, it comes pretty So I'm going to go ahead and include more on that later. I'm going to magically type int we'll come back to that later-- one of these curly braces and then a Then I'm going to hit Tab And then I'm going to type not print, close quote, close And I dare say this was essentially 25 years ago. I wrote it to say, &quot;Hi, CS50.&quot; Now it just says the more canonical, But that's it. That's my very first program. And all I need to now do is to save the file. And voila, I am a programmer. The catch though, is, Like, on your Mac or PC, Well, usually double-click an icon. On your phone, you tap an icon. In this environment that we're using say most programmers-- use, you don't to double-click on. That's very user friendly, Especially when you get more you're going to want to type commands and clicking a mouse. And you're going to which is a lot easier if it's all to mouse and muscular movements. And so here I have my program. It lives in this file called &quot;hello.c.&quot; I need to now convert it, Well, how do I go about doing this, so-called code-- or source code, as it's to this, these zeros and ones that The zeros and ones from last to represent numbers and letters, It can also represent instructions to a or delete a file, or save a file. All the sort of basics can be represented by other And just like last week, in which these numbers are stored. Sometimes they're interpreted as Sometimes they're interpreted as colors. Sometimes they're interpreted as to do very low-level operations, So fortunately, last week's definition is a nice mental model for I have some input, AKA source code. I want to output ultimately I certainly don't want to do So hopefully there's an algorithm that does exactly that. And those of you who do this program might be called a? A compiler. So a few of you have, Not all languages use compilers. C, in fact, is a language And so I just need to find myself-- on my computer somewhere, a program whose purpose in life is And source code written textually is source code. The machine code is the So let me go back to the same Visual Studio Code or VS Code. This is typically a program you can download onto their own Mac or computer you own writing some code. A downside, though, of that have slightly different We have slightly different They may or may not be up to date. It's just a technical support nightmare especially for an introductory be on the same page so we can And so I'm actually using a cloud-based that you only need a browser to access. And then you can be on any By the end of the semester, we're so to speak, as best we can and so that after this class, especially if you feel like you can continue even with CS50 behind you. But for now, wonderfully, the should pretty much be identical version of the same would be. And you'll see in problem and how to get going yourself But I haven't mentioned this this bottom part of the screen. And this is an area where we have So this is sort of old-school technology to interact with a computer, wherever or even, in this case, in the cloud. So on the top-hand is my text editor, like tabbed I can just create files and write code. The bottom of the screen here, gives me the ability to that currently I have So because I logged into VS I have my own sort of virtual otherwise known as, in This has its own operating system if you will, where I can save separate from yours and vice versa. And it's at this very is conventionally-- but not always-- has nothing to do with currency. It just means, type your commands here. This is where I'm going to like compile my source So it's a Command Line Interface, or that you might not have ever used called Linux. Odds are almost all of us in this room but we're all going to start using an is in a family of operating systems line interface, but are used not websites and developing And it's, indeed, a familiar and very So how do I go about making this There's no icon to double-click, I can type, make hello, at this dollar and nothing appears to happen. But that's a good thing. And as we'll see in if you don't see anything go wrong, So this is going to but this is a good thing that But now there is in the in this on the cloud And it's a bit of a weird command, before long. . just means go into my current folder. /hello means run the program called So ./hello, and then Enter, and voila, but running my actual code. So what have I just done? Let me go ahead and do this. I'm going to go ahead and open and you'll see in problem And this might look a little different Even the color scheme I'm using might because it supports a So you can have different colors on your mood or the time of day. What I've opened here, though, is and this is just all of the And there's not many right now. There's only two. One is the file called because I've got it open right there. And the other is a file called and was created when I ran that command. And what's now worth noting is that like Mac OS and Windows. Like on the left-hand side, you have But on the bottom here, again, you These are just different ways and you'll get comfortable with both. And honestly, you're certainly familiar so it's the command line one Now suppose that I just more than compile this program. Suppose I wanted to go Like, uh-uh, no, I made a mistake. I want to say, &quot;Hello, I could just hover up here, like in and I could poke around, and So most of us might have You right-click or Control-click, But in a command line interface, The command for removing in the world of Linux, this is just a type rm for remove, It's a somewhat cryptic confirmation are you sure? I'm going to go ahead And now when I hit at top left in the Explorer, the Voila, it disappears. Not terribly exciting, this is a graphical version And in fact, if you want to I'll go ahead and close it you can forever just type And you will see in the all of the files in your current folder. So anything you can do do with this command line interface. And indeed, we'll see many more But the inventors of this, this were very succinct. Like, the command is rm for remove. The command is ls for list. It's very terse. Why? Because it's just faster to type. So before we forge ahead with making just &quot;Hello, world,&quot; if there's questions on code or compiler or this Yeah? AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Really good If I were to make run it, and then maybe make other would those changes be reflected, Well, let's do this. I already removed the old version. So let me go ahead and point I'm going to see some kind of error No such file or directory, so but it's saying what the problem is. Let me go ahead and remake Now if I type ls, I'll see not one is even green with a little asterisk It's sort of the textual you could double-click So now, of course, if I run hello, we're But now suppose I change it to Let me go ahead and save the file with let me run ./hello again, and voila. Huh. So let me ask someone else What's the missing step? Why did it not say, &quot;Hello, CS50.&quot; Yeah? AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Yeah, so So sort of newbie mistake, you're going before long. But now let me go ahead It's going to seemingly But this time when I run Any other questions on some And we'll come back to all the But for now, we're focusing Yeah? AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: When it creates a new version So it keeps changing the hello program There's no make file, per se. AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Good question, no. If I open up that directory, you'll And it doesn't matter how three, four, five-- it just So it's kind of like just saving in Word or the like. But there's an additional step today. We have to then convert my words to Yeah, in front. AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Oh, what So let me go ahead and do ./hello.c, make early on. Permission denied. So what does that mean? This is where the error to the people who designed the operating It's not that you don't It means that it's not executable. This is not something you but you do have permission to read AUDIENCE: [INAUDIBLE]. DAVID J. MALAN: Oh, So if I have named my file, hello dot C, of the things that picks the file name for me. And we'll discuss a bit-- we'll discuss this a bit more next week. Make itself-- is kind of the itself is not a compiler. It's a program that knows how to find and automatically create the program. If I use, as we'll discuss next I have to type a much longer sequence what do I want the name Make is a nice program, because it just automates And so here, we have now a something on the screen. So let's not put this we left off last time in the context So we discuss the last time, of Functions, again, are those actions and And the arguments were the generally in those little white could type words or numbers into. We'll see, in all of the languages have that same capability. And let's just start to translate So for instance, let's put in the context of Scratch. This is what Hello, World looked like This week, of course, And then the parentheses, deliberately designed in the world of Even though this is a that it's kind of evoking that Technically the function It's not even called print. It's called printf. The F stands for formatted, but we'll But printf is the closest for say in the world of want to print something like you don't just write the You also had an add what, what's missing from this version. Yeah, so the double quotes So, that's necessary in C whenever And I'm using that word deliberately. Whenever you have multiple words as we'll see. And you have to put it in double You have to put it in double quotes. There's one other stupid thing in order to get this function to do Semicolon. So just like in our human got into the habit of using, at Semicolon is generally what in the world of programming with C. All right, so we have Now, what does this really fit Well, functions take arguments. And it turns out functions can And we've actually seen One type of output from a function And it generally refers like something appearing on the screen It's sort of a side effect of And indeed, last week we saw this in like Hello, World as And we saw on the screen Hello, It's one and done. You can't actually do anything other than consume it, But sometimes, recall last week, we actually returned me some value. Remember the ask, what's your name. It handed me back whatever It didn't just arbitrarily The cat didn't necessarily It was stored, instead, in that special Because some functions have not They hand you back an output unlike the side effect, which, You can't sort of catch So, in the context of last And that had this special In C, we're going to we could translate this as follows. The closest match I can is a function that we're going String is, again, a word, a or a sentence in programming. It, too, is a function insofar as this isn't always true-- you have a word in C followed by an open it's most likely the name of a function. And we're going to see that But for now this indeed because it matches that pattern. If I want to ask the question, and I'm even going to deliberately the cursor a little bit over so that after the question mark. So that's just the nitpicky aesthetic. This is perhaps the closest analog But because the ask the analog here forget string is It doesn't just print the human's input. It hands it back to you in the form that I can then use and reuse. Now ideally it would be as saying answer on the left equals. And this is where from math and sort of our human world. This equal sign, henceforth, It is the assignment operator. To assign a value means to And you read these things, So here is a function called get string. I claim that it's going the human types in as their name. It's going to get stored of this so-called assignment But it doesn't mean It makes things equal. But it does so by copying the value on Unfortunately, we're not And this is where, again, it where Scratch just let us express In C when you have a give it a name like you did in Scratch. You also have to tell the computer it is storing. String is one such type of value. Int, for integer, is And there's even more than that And this is partly an answer to the last week, which was how does a computer and ones from this. Like is this a letter, a number, And I just claimed last week that It depends on the context. And that's true. But within those on what the human programmer If this specifies that interpret the following are stored in my program as If it's an int for integer, it would treat the following zeros and an integer, not a string. So here's where this which is kind of figures out what you you have to be this pedantic There's still one stupid thing What's still missing here? Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: And we still And I'm sort of impugning it here. Because honestly, these are you're going to make today, a few weeks from now, until you as well as you do English or Yeah, question. Good question. Suppose I mix apples and and I try to put a string in the compiler is going to complain. So when I run that make it's not going to be nice and blissfully It's going to yell at me looking error message until we get Other questions. Ah, what happened to the backslash n. So, we'll come back to that Because I have deliberately omitted And we'll see the different Other questions. Yeah, not at all nitpicky. These are the kinds of And it's going to take time to recognize Everything I've typed here except, And the W is capitalized Everything else is lowercase. And this kind of varies by So, in many languages the convention for your variable names. Other languages might use But we'll talk about that before long. But this is the kind and is hard to see at first, especially different when it's on your tiny But you'll start to All right, so besides let's go ahead and consider how we can So let me switch back to VS Code here. This was the program I had earlier. And let me go ahead and And this time just rerun it. Rerun Make on Hello with the original Enter, nothing bad So dot slash Hello, enter Hello, World. Now, if you're curious, to start to acquire what Well, I'm probably not going So let's try. Let me go ahead now and do Make Hello. Still compile. So it's not a really bad mistake. So let me go ahead and What's the difference here? Yeah, what do you see that's different? Yeah, the dollar sign, my so-called Why? Well, we can presumably n is some fancy notation for move the cursor, so to Notice that the cursor will move to If I keep hitting it, by nature of hitting enter, does it. But it'd be kind of stupid if when simple as it is, if weirdly spaced in the middle of it just looks sloppy. It's really just an aesthetic argument. And notice that it's not acceptable or Let me go ahead and save that, Let me go ahead now and Oh my god, like four errors. This is like, what, 10 lines of And this is where, again, you'll start reading this stuff. These kinds of tools, like were not designed necessarily That's changed over the on it's really just meant to be So what did I do here? Missing terminating long story short, when your double quotes just have to Now, there's the slight white lie. There's ways around this. But the best way around it is to To escape something means generally a special symbol like n for new line. And this is just the agreed upon way OK you don't just hit your enter key. You instead put backslash n to move the cursor to the new line. So again, kind of cryptic. But once you know it, that's it. It's just another word So now let me transition to making Instead of just saying change it like last week or whoever is interacting So I'm going to do string quote unquote, what's your name. I'm not going to bother I could. This is now just a judgment call. I deliberately want the human to just because. And how do I now print this? Well last week recall we used say. And then we use the So the idea here is the same. But the syntax this week is It's going to be printf, which I'm going to go ahead And let me just go with this initially Let me go ahead and recompile my code. Whoops, damn doesn't work still. And look at all these errors. There's more errors than code I wrote. But what's going on here? Well, this is actually somewhat often, at least initially. And let's start to glean So here, if I look at the very first so even though it jumped I wrote Make Hello at And then here's the first error. On Hello dot C, line 5-- technically character 5, but generally there's an error, use of Did you mean standard in? So, I didn't. And this is not an But you'll start to recognize It turns out that if I want to use I have to include another library rather, called CS50 to what this means in just a moment. But if I now retroactively say, do for us up here. Before I added that new line, Well, if you think were a few examples with the camera and Remember I had to poke around And then I had to load it into Scratch. It didn't come natively with Scratch. C is quite like that. Some functions come with the language. But for the most part, if you want to like printf, you have to load that more traditionally So there is a standard I/O where I/O just means input and output. Which means, just like was an extension for doing text In C, there's an extension, a.k.a. a library, for doing And so if you want to use any functions like text from a keyboard, you H. And then can you use printf. Same goes here. Get string, it turns out, is a And as we'll see over makes it way easier to C is very good with printf at C makes it really annoying and to just get input from the user. So we wrote a function but the only way you can use a.k.a. load the library called CS50. And we'll come back in time, like, But for now, standard gives you access to printf and CS50 is a second library with access to functions that include something like get_string. So with that said, we've at a high level what lines Let me go ahead and rerun make hello. Now it worked. So all those crazy error messages so key takeaway is not to get of errors. Let me now do ./hello and if I type What do you think? Yeah, hello answer, because the And it turns out that if answer&quot; all in the double quotes, English as the input you're not actually And unfortunately in easy to plug things in to Remember in Scratch, there but the Join block, you can combine apples and oranges-- or was it apple and banana? Then we changed it to hello and then In C, the syntax is going You tell the computer inside of your a placeholder there, a so-called put a string here eventually. Then outside of your quotes, you in whatever variable you want the for you. So %s is a format code which And now the printf function ago to figure out how to thing of joining two words together. It's not nearly as user-friendly but it's a very common paradigm. So let me try and rerun No errors, that's good. ./hello. What's my name, David? If I type Enter now, now it's hello. David. And the printf, here's the F in printf. It formats its input for you by using strings, represented again by %s. So a quick question then, if I focus and even zoom in here, how many A moment ago, I'll admit that it was quote unquote. How many inputs might you 2. And it's implied by this comma here, quote, unquote, &quot;hello, %s&quot; And then just as a quick safety Because there's obviously Why is it not actually AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Exactly. The comma to the left is actually that's all, so same syntax. And, again, here's where early on because we're using the different things, it just And so now is actually all of the somewhat pretty colors that here-- even though I wasn't going to a format I certainly wasn't changing that's because a text editor like This is a feature of so many different VS Code does it as well. If your text editor understands the C, in this case-- it highlights in different colors the So, for instance, string and but get_string a function is in here right now, but that's just The string, though, here in red and that's marginally useful. The %s is in blue. That's kind of nice, because And so it's just using different colors pop so you can focus on and, honestly, when you For instance, let me accidentally And now all of a sudden, the colors start to get a little awry. But if I go back there and put it What's another feature Notice when my cursor is next demarcates the end of the notice that highlighted in green Why? It's just a visually useful you start writing more and sure your parentheses are lining up. And that's true for these curly braces We'll come back to those in a moment. If I put my cursor there, you can to one another. So it's nothing in your code trying to help you, the human, program. And you can even see it, see these four dots here That's my indentation. I configured VS Code to is a very common convention. Any time I hit the Tab key, this once we have more interesting that everything lines Phew. All right, any questions Yeah. AUDIENCE: [? Would ?] DAVID J. MALAN: Short can handle more than one %s is one. We're going to see %i is another You can have multiple i's, multiple We'll come back to that printf can take many more This is just meant to be representative. Yeah, over here. Can you declare variables No. The only variable I'm and it's got to be done outside Good question, we'll see Yeah, in back. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: How do we So we will show you in problems It's automatically done for you in If, ultimately, you program on your own on, it's also installable online. But if you want to ask that we can point you in the right direction. But PSet 1 will itself. Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: String is the type the data type of the variable. int is another keyword I alluded int, for integer, is going to be AUDIENCE: OK. [? Thank you. ?] DAVID J. MALAN: Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Oh, good question. Could I go ahead and just kind of like we did in Scratch, and just do this, which I did in Scratch by plopping Am I answering that right? Can I put string in front of get_string? No. You only put the word string that you want to make string. And even though I'm apparently let me go ahead and zoom out, Seems to compile OK. If I run ./hello, type in David, voila. That, too, works. And so, actually, let's go down Clearly, it's still correct-- at least, based on my limited testing. Is this better designed Let's open that question Yeah? Yeah, I kind of agree with that. Reasonable people could agree that this seems harder to but wait a minute. get_string and then it's going to So, yeah, it just feels like it I would say. Your thoughts? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. And so this is useful if I only want If I want to use it later in a and so I haven't saved it in a variable. So I think, long story short, we But in this case, eh, if you can way or the other, that's a But, invariably, to disagree, whether first-time So let's frame this one last example of taking inputs and outputs. The functions we've take inputs, otherwise now known as synonymous. That's just the fancy word And some functions have either printing something, saying sort of visually or audibly-- or they return a value, which is a in this case. If we look then at what we did last the input was what's your and the return value was answer. And now let's take a look at this block, version of what we just did with the %s. Last week we said save, then But the interesting takeaway there It was the fact that in Scratch like the green join, could become the purple say. The syntax in C is but the idea is essentially the same. Here, though, we have but we have to, in this what we want to plug in It's just different. But that's the way to do it. When we get to Python and other there's actually easier ways to do this. But this is a very common you want to format All right, let's then take a which was with that whole and it had int main(void) and This Scratch piece last week whenever you want to have a It's not the only way to You could listen for clicks or other But this was probably the most popular In C, the closest analog is So just like last week, if you were when green flag clicked, the first thing you would do is like I did with hello.c, main(void) open curly and then you can put all of your So just like Scratch had to it where the puzzle pieces would snap tends to use these curly braces, one And anything inside of is part of this puzzle piece, a.k.a. main. So what was atop them? We went down this rabbit hole moment ago even though I didn't But, indeed, when we have a whole Just have the one green flag There's no special syntax. After all, it's meant to be very In C, though, you technically can't just You also need this. Because, again, you need to tell code that someone else wrote-- so that You have to load the you want to use get_string or as we'll soon see. Otherwise, the compiler won't You just have to do it this way. The specific file name stdio.h, cs50.h, is what C programmers We'll see eventually what's But long story short, it's like a menu So in cs50.h, there's a menu and a bunch of other stuff. And in stdio.h, there's a menu of And that menu is what to know how to implement All right, let me pause here. Question. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Not quite. A library provides all of the A header file is the very specific And we'll discuss this more next week. For now, they're essentially nuances between the two next week. Yeah, the library would be standard The corresponding header Indeed. Other questions. Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Indeed. That, too, is on the menu. We'll come back to that. But the word string-- incredibly common in the world of but in C, there's technically no We have sort of conjured it up That's a training wheel that we'll take away, and we'll see why we've Because C otherwise makes things which then gets besides Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yes. Early on, you will have to use whatever That will include CS50's functions. Long story short, you referred, I called scanf, we won't Long story short, in C, it's pretty easy The catch is that it's really And C, because it's an older, that gives you pretty much ultimate It's very easy to make mistakes. And, indeed, that's too so your code won't crash unintendedly. All right, so with this in between the Scratch Let me just give you a quick tour of types that students will start seeing as In the world of Linux, here of commands with which you'll get by playing with problem sets. We've only seen two of these so But I mention them now feel too foreign when you see them cp is going to stand for copy. mkdir is going to stand going to stand for move or rename. rmdir is going to be remove directory, and let me show you this only because it's something If I go back to my code here on and re-open the little GUI on the revealing that I've got two so nothing has changed since there. Suppose now that it's and I want to start writing so that I have a folder or maybe a folder for I can do this in a few ways. In the GUI, I can go up would do instinctively on a Mac or PC. You look for like a and then you name a Voila, you've got a folder called PSet1. I can confirm as much with my command How can I list what's in my folder? Yeah, so ls for list. And now I see hello-- and it's green with an my executable, my runnable program-- hello.c, which is my source at the end, which just implies All right, I didn't really I'd like to do it more advanced. So let me go ahead and right-click I get a scary irreversible But there's nothing Now I've deleted it using the GUI. But now let me go ahead and start doing And if you're wondering how if you hit Control-L in your terminal it will delete everything you previously In practice, you don't need I'm doing it just to keep our If I do-- what was the command AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, so Let me create PSet1, Enter. And notice at left, there's my PSet1. If I want to get a little here's my PSet2 directory. Suppose now I want to open those I could double-click on see this little arrow is moving. It's not doing anything because there's But suppose again I want to get more Notice if I type ls now, I Let me change directories And now notice two things One, my prompt has changed just to keep me sane so that I don't So here is just a visual reminder If I type ls now, what should Nothing, because I've only And, indeed, I see nothing. If I wanted to create a folder called called Mario this week, I can do that. Now if I type ls, there is Mario. Now if I do cd Mario, to change to be a little more precise. Now I'm in PSet1/Mario. And notice what's happening at top left. Nothing now, because these But if I click the little Nothing's going on in there But suppose now I want to I could go up here, I could click the Or I can just type code mario.c. Voila. That creates a new tab for me. I'm not going to write any code in here And now at top left, you'll So at some point, you can Because, again, it's not providing It's maybe more nothing you can't do at the command All right, but now I'm kind of stuck. How do I get out of this folder? In my Mac or PC world, the Back button or something like that In the terminal window, Dot dot is a nickname, if you That is, the previous directory. So if I hit Enter now, notice I'm a.k.a. directory, and Or, if I want to be fancy, let me If I type ls, there's If I want to do multiple things which goes to my parent to my And voila, now I'm back in my And one last little trick of the was a moment ago, and you're if you just type cd and away back to your default to worry about getting there manually. Recall a bit ago, though, that I If dot refers to my parent, what does a single dot mean instead? It means this directory, Why is that necessary? It just makes super that I want the program called not in some random other folder I want the one that's All right, so besides going to be others that Those are kind of the basics. That allows you to wean yourself off and start using more comfortably, a command line interface instead. Well, what about those other Those commands were not C. Those are interface, like in Linux, which, It's an alternative Back in the world of C now, we've I mentioned int or integer, In the world of C, we've If you want a bigger integer, there's If you want a single character, If you want a Boolean value, And if you want a floating-point value-- a fancy way of saying a real number, that is what C and other And if you want even more numbers is more precision, you can That is to say, here is, again, where it's up to you now to provide that it will rely on to know what Is it a number, a letter? Is it a sound, an image, These are the types of data types What are the functions that come in We talked about standard I/O, and In the CS50 library, you can The C50 library exists largely of the class to make our lives easier So if you want to get a string, you use get_string. If you want to get an integer from When you want to get any of those you use get_ something else. And they're indeed all What about printf? If we have the ability now to and we have functions with which how might you go about printing Well, we've seen %s for string, %f for a float or a double, those and then %li for a long integer. So here's the first In an ideal world, that would It's %li instead in this case. That's printf and some What more might we do? Well, in C, as we'll see-- no pun intended-- there is And, indeed, computers, one was a lot of math and calculations, so Computers, and in turn, C, really multiplication, division, which is the remainder operator. There's a special symbol just for getting the remainder, when There are other features in the world And there's also what is of makes it easier over time but express your thoughts the same. So just as a single example consider this use of Here in Scratch is how you might In C, it's going to be similar. If you want the variable you literally write the word counter, You then use the assignment and you assign it whatever its initial So, again, the 0 is going to get copied because of that single equal sign. But this isn't sufficient is missing on the right-hand Even if you've never Yeah, in front. AUDIENCE: Semicolon. DAVID J. MALAN: A semicolon at the end. And one other thing, I Again. AUDIENCE: A data type. DAVID J. MALAN: A data type. So if we can keep going what data type seems appropriate int for integer. So, indeed, we need to creating a variable what and we need to finish our So there might be a counterpart there. What about in Scratch if we wanted We had this very user-friendly that was change counter In C, here's where things get And pretty commonly done, you might with a semicolon. And this is where, again, it's it's not equality. Otherwise, this makes no sense. counter cannot equal That just doesn't work if we're That's because the equal So it can certainly be the counter plus 1, whatever that is, from right to left to be that new value. This, as we'll see, to do in programming just to kind of You can write this more succinctly. This code here is what we'll of a fancy way of saying the same thing on the screen. This also adds 1, or whatever to the variable on the left. And there's one other form of syntactic and it's even more terse than this. That too will increment counter by 1 Or if you change it to minus You can't do that with can do it by default with just plus plus Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Ah, so when you are has been created, as we did with you no longer need to remind the Thankfully, the computer is It will remember the type of Other questions or comments on this? All right, that's quite a lot. Why don't we go ahead and And we'll be back, we'll All right, so we are back. We've just looked at some even if it doesn't But now, let's actually on writing more and more code, code, kind of like we dove So here I have these code open. I've closed the GUI. I'm going to focus more on my Many different ways I can create new called a calculator. So, again, within this I can literally write the code and it just creates a new Or I could do that in the GUI. I'm going to go ahead and create and I'm going to go ahead and So I'm just going to go ahead and I'm going to go ahead from more on that next week, why it's And now let me just implement We saw some mathematical So let's actually use this. So let me go ahead and called x, sort of like grade Let me go ahead then and but I mentioned this exists. And then let me just ask the user The thing in the quotes is that I'm printing on the screen. I'm just going to say x colon Now I'm going to go ahead and I'm going to get int again. And now, I'm going to And I'm just very nitpickly to move the cursor so it doesn't And then lastly, let me go ahead and In an ideal world, I would just But that is not valid in C. The has to be a string in double quotes. So if I want to print out I need to put something in quotes if I want to move the cursor as well. So, again, we only glimpsed do I replace these question marks with AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, so %i. Just like %s was string, %i is integer. So I change this %i. And now if I want to add x and y, for doesn't do much of anything other I think this works. And, again, it looks definitely It would be if programming Other languages will But, again, if you focus on the which is a format string with some placeholders, maybe-- then it takes potentially more like the value of x plus y. All right, let me go ahead which, again, compiles pictured above, and converts code, or zeros and ones. No error messages. so that's already good. Now I do ./calculator. Let's do 1 plus 1 and Enter. Voila. Now I have the makings of a calculator. Now let's start to tinker What if I instead had done this? int z = x + y and then plug-in z here. If I rerun make calculator, Enter, still equals 2, and let me claim that which of these versions If both seem to be correct at very or is the previous one without the z? OK, so this one is arguably better variable called z that I if my program is longer, Counterthoughts? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. Debatable, like before, because And, honestly, I think can be made for the first version. Because if I have no using that variable Maybe I might as well do one less thing to think about. It's one less distraction. It's one less line of code It's just a little tighter. So here, again, it does But this field is pretty reasonable. And I think, as someone I did the same thing with get_string, s line because get_string and the it was just so much longer. But x + y, eh, it's not that hard going on inside of the printf argument. So, again, these are the kinds acquire the instinct for the same answer as someone process is what matters here. All right, so how might I enhance Let's just talk about So x and y, at least in this case, Why? Because that's the go-to when you're adding two things together. So x and y seem pretty reasonable. I could have done something like, should be called first should be called second number. And then down here, I to first number plus second number. Like, eh, this isn't really to help my comprehension. But that would be one other So if you have very simple expressed with common variable names What if I want to annotate this program Well, I can add in C With a slash slash, two forward slashes, like prompt user for x. And then down here, I could for y, just to remind And down here, perform addition. Now, in this case, I'm not adding all that much. Because in the time it took me to write I could have just read But as our programs and you start to learn more syntax-- that, honestly, you might forget the next month-- might be useful reminds you of what your how it is doing that thing. With these early programs, doesn't really add all that but it is a mechanism can help you actually remind else what it is that's going on. Well, let me go ahead and rerun make calculator. And here, too, you might not really. I'm hitting Tab a lot. So it turns out that we're using here in the cloud-- but, actually, Windows and Mac supports autocomplete. So if you only have one you don't have to finish writing and the computer will The other thing you can do is you'll scroll through your So there too, I've been by hitting Up quickly rather than and again. So, again, just another to make programming and interacting with All right, let me go ahead and just make The comments have no functional impact. These green things are Let me run calculator with Instead of 1 plus 1, whoops, let's do that again. Wa, da, da. 1 million, 1 billion, and another 1 All right, so that seems correct. Let's run this program one more time. How about 2 billion Did you know that? So, apparently, it's not so correct. And, clearly, running 1 plus 1 was here. What might have gone wrong? What might have gone wrong? Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. The computer probably ran So it turns out with these data types-- and also float and char and those and, most importantly, finite It can vary by computer. Newer computers use more bits, older It's not necessarily standardized But in this case, in this environment, That's a lot. So with 32 bits, you This is 64 light bulbs on the An int is only using half of these, or Now, if you think back to last week, And if you have 8 bits, 8 zeros and just a good number to 8 bits gives you 256 32 gives you roughly how It's 2 to the 32 power. So it's roughly 4 billion, 2 to the 32. If you don't know that, it's fine. Most programmers, though, eventually So it's roughly 4 billion. So that feels like enough. 2 billion plus 2 billion And that actually should The catch is that my Mac, also like to support negative numbers. And if you want to support both positive means with 32-bit integers, as roughly 2 billion positive in the other direction. That's still 4 billion, give or in one direction or the other. So how could I go about implementing What might the solution be? Yeah, so not just li, I have to make one more change, So let me go back up here and change long integer. And then let me change y as well. And then let me change the format code a few minutes ago to li. Let me recompile the calculator-- seems to work OK. Let's rerun it. Now let's do 1 plus 1. That's should obviously be the same. Now let's do 2 billion and cross our fingers this time. Now we're counting as high as 4 billion. And we can go way higher than kicking the can down the street a bit. Even though we're now using-- with a long-- 64 bits, which is as long as this It might be a really big And we'll come back at the of fundamental limitations. Because arguably now, my calculator billions of possible inputs but not all. And that's problematic to use my calculator for any ones that are roughly less than, All right, any questions then on that? But it's really just a that we're going to have to AUDIENCE: [INAUDIBLE] DAVID J. MALAN: A good question. Yes. If we were still using z, we would Otherwise, we'd be ignoring had been added together via the longs. Good question. All right, so how about we spice things how about something Let's start to ask So a moment ago, recall that we had Now let's look back at looked a little something like asking questions by way and then these Boolean expressions like x is less than y. In C, this actually maps pretty cleanly. It's much cleaner from left to right Here, we have just code If, a space, two parentheses and then we have something like So here, it's actually Notice that, just as the is kind of hugging the that's effectively the role that They're sort of encapsulating The parentheses represent that needs to be asked and answered to And here's an exception to Usually, when you see a word and and then closed parenthesis, I And I'm still feeling pretty But there are exceptions. And the word if is not a function. It's just a programming construct. It's a feature of the C language for different purposes How about something like this? Last week, if you wanted to go this way or that way, In C, that would look a And if we add in the printf's, but it adds, of course, the word else As an aside, in C, It's not strictly if you have only one line For best practice, though, do so anyway, and ultimately anyone that you intend for just that one How about this from last week? Here was a three-way fork in the road. If x is less than y, else if x is Now, here's where you have some and C. Scratch uses an equals sign C uses a single equals sign to left, minor difference In C, we could implement the same just this additional else if. And if we add in the printf's, it This is correct both in the But could someone make a claim that Exactly. We don't need the last if. We need the else, at least, Because, at least in the it's either going to be less There is no other case. So you can save a few of your program running-- a blink of and then inferring what must be just by nature of Now, why is that a good thing? If, for instance, x and y I type in 1 and 1 for both values, in the case of this version, asking three questions, all of even though the answer is no, no, yes. That is false, false, true. That seems to be unnecessary because get rid of the unnecessary if and else print that x is equal to y-- now if x indeed equals y because now you're only going to ask two and then you're going to get So, again, a minor detail, you should be thinking you write your code to it to be well-designed as well. All right, so why don't we into the context of an I'll create a blank window here. And let's do something with points, problem set. Let me go ahead and That's just going to And then up here, I'm going to include stdio.h. int main void. So a lot of boilerplate, so to And now, let's see. Let's ask the user, how lose on their most recent CS50 PSet? So sort of evoke my photograph of where I lost a couple of points myself. So int points = get_int. Then I'll ask a question in English question mark, space? And then once I have this answer, So if points is less than 2-- borrowing the syntax that we let's go ahead and print like you lost fewer points else if points greater than 2-- which is, again how many I lost-- I'm going to go ahead and print out you else if-- wait a minute, else seems I'm just going to go ahead like you lost the same number So, really, just a straightforward but to a concrete scenario here. So let me go ahead and save this. Let me go ahead and No errors, that's good. Run points. And then, how many points did you lose? How about, it's 1 point? All right, you lost How about 0 points? Even better. How about 3 points? And so forth. So, again, we have the ability to from last week in reality, which is questions. There's something subtle here, though, that someone might call a magic number. This is programming speak There's a bit of redundancy unrelated But is there something I typed twice Exactly, I've hard-coded, so to speak, in two locations, in this case-- that did not come from the user. So, apparently, once I You're always comparing which for better or for worse, But this is an example too of like, wait, where did that 2 come It feels like we are setting the of screwing up down the road. Because the longer this code gets, elsewhere-- 2, 3, 4, 5 places-- am I going to keep typing the number 2? Like, yeah, that's fine. It's correct. It's going to work. But, honestly, eventually, and you're going to miss one of the because maybe I did worse the And you don't want these So what would be a logical rather than hard-coding the in two or more places? Yeah, why don't I make a So, for instance, I like this, another integer called mine. And I'm just going to And then I'm going to change And mine is a pretty reasonable as it refers to exactly There's a risk here, I could accidentally Maybe I forget what mine represents, So there's a way to tell the because I'm going to by making a variable constant too. So a constant in a this did not exist in Scratch-- is just an additional hint to the you to program more defensively. If you don't trust screw up later, or if you know that number should and never think about it again. This tells the compiler to make sure change the number 2. And another convention in C and other it's often common to just Kind of like you're visually makes it stand out. So it's kind of like that helps you realize, oh, Capitalization alone does The word const does. But the capitalization that this is somewhere, So just a minor refinement, sort of getting better at these kinds of heuristics. Questions, then, on conditionals Yeah. AUDIENCE: Why do you not use DAVID J. MALAN: Yeah, why do you Just because. This is the way the And it's confusing early on. Generally speaking, when you're we'll see loops-- there's no semicolons involved. For now, assume that semicolons usually That's not 100% reliable of a heuristic, there. And just because. Left hand was not talking to the right were designed. All right, so let's do something else. How about this? If I have the ability to ask is this thing true or could I write a very simple program tells me if a number the Well, let me just get the Let me go ahead and is a fancy way of saying even or odd. And let me go ahead and include cs50.h, again, more on those down the road. But, for now, I'm going to go ahead by calling get_int and asking And then now I'm going to So here's the first honestly, that I'm not So let me just resort to some Eventually, I'll get rid of But if n is even, then print-- actually, let me just print that. Let me just go ahead and say because I know how to use printf. else-- all right, I so let me just say printf, So here, I've sort of taken a bite And let me go ahead and put I want to do some kind of conditions. So if, question marks now, let me go else I'll put this here. So I think I'm OK now. I'm getting closer to solving this. But I still have this How, using syntax we've seen, might What do you think? Nice. There's this little operator I operator, that will let If you divide any number by is going to tell you if it's even a remainder of 0 or 1. And that's nice because the alternative like if n == 0 or if n your code would be infinitely long if But if I do n divided by 2 it's a little cryptic, but So the percent sign is It does numerator divided by denominator but, rather, the remainder of that. So if you divide anything by 2, And if, indeed, 2 divides then you're going to print even. Else, it's got to be odd. But there is something odd-- pun What is another new piece of syntax, What's a little off there? Yeah. Yeah, so that's not a typo. And I even caught myself just because it's so ingrained. What must this mean here? Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, if So now this is the equality operator. It's not assignment from right to left. And this one too is an humans not really planning not talking to right hand let's use the equals And then some number of minutes or how do we now compare for equality? Well, let's just use two. And if you think this is a little weird, there's a third version where So, again, it's humans that So if you're ever frustrated by them, it might just not have But we just kind of have So let me go ahead and zoom out here. Let me go ahead and make parity here. So make parity-- and, again, parity ./parity, type in a number like 2. That's indeed even. 4, that's indeed even. 3, that's indeed odd, and so forth. If we continue testing, presumably, How about something else? Let me go ahead now and let me start because, admittedly, it's getting all of that boilerplate at the top. Let me create a program reminiscent of any of to agree to online with a checkbox So let me throw away all the and now ask something like this. Let me go ahead and prompt I'm going to go ahead and say, how whatever the question might be-- for yes or no, respectively. So if it's only a single can actually get by with just get_char. Not used it before, of functions from the CS50 library. And if I want to get the return value should be So now we've seen strings, if we only care about a single letter. And now let's go ahead, So how about if c == &quot;y&quot;, then let me print out agreed or some else if they did not type Let's be explicit here, type z or b or some random letter. else if c==&quot;n&quot; n for no, then let me or something like that. And I'm just going to ignore and they type z or b or All right, let me go ahead now and All right, do I agree? Yes. Let's go with the default. No, I don't agree this time. That seems to work. How about my caps lock key is on or It ignores me. Capital N, it ignores me. So, obviously, a bug, at least if I want which is kind of reasonable. So what would be the possible How do I solve this and tolerate Maybe what's the simplest, AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, so why Or you know what, even more simplistic if you will, let me just copy Change this to an else-- whoops, And then I bet I could But here too, just like as you start to find you're probably doing something wrong. And what you said verbally, Because you're implying that I could or, down here, c == &quot;N&quot;. The catch is, you can't use the word OR So you can express one You only need one of the and you use two vertical bars. By contrast, just so wanted to check if something is equal you could use two ampersands. This logically would make Certainly, what the human typed can't That just makes no sense. So in this case, we do want OR. But that allows me to I don't have to start copying I can now ask two questions at once. Questions, then, on this variation? Really good question. Can you convert the Absolutely, you could. We don't have the capability yet. It turns out that's going to require-- to be easy, another library, ourselves knowing a little bit about But, yes, that would be an alternative, Other questions? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Good question. Unfortunately, you have to be explicit even though that's kind of You have to ask a complete question in this case. Let me ask a question now too. It's not a typo. I deliberately used single quotes Why might that be? Previously, we used double quotes Yeah. Correct, string is double quotes for technically, but yes. And single quotes for single characters. Because my data type is different. I chose the simple route of In fact, this program or N-O. That's not supported at the I had to use single quotes If you're dealing with a.k.a. chars, use single quotes. If it's a string-- even if it's one single as though you're starting to write that would be double quotes. And we'll see why this But, again, just things to keep in this particular language. Yeah, down here. So, short answer, if I'm understanding And this would be even more incorrect. But if you don't mind, let me on this as to why this doesn't work. The most pleasant way to do this would But even this is a slippery if the user does something weird, You can imagine this I like your idea earlier to lowercase just to standardize things. Unfortunately, you cannot compare for, again, reasons will So for today, we're keeping it not nearly as user-friendly to And there's a question over here. On the US English keyboard the backslash key above Return, it will vary. All right, so let's at something we did a Let me go ahead and open because, recall, that's what Let me include not the but just stdio.h because I Let me go ahead now and And then if I want the cat to meow meow, meow, meow. Save it. make meow, ./meow. Voila. The program is written-- It ran. It compiled OK. But, again, this was the last week of not being And if someone wants to maybe why is this not Yeah, it's just repetition, right? Again, I literally That should be the signal doing something wrong or, at best, So the solution, as you is probably going to be one So let's just take a look at some But, again, no new ideas, that'll take some getting used to. In Scratch, if you wanted to meow there's not a forever keyword in C, so But this is the best we can do. It turns out there is a And that kind of has because it's like while I do that's the best I can do. But just like an if condition those took a Boolean a while loop also takes a Boolean So I have to ask a question. Now, if I want to do something say while 2 is greater than or just something completely arbitrary. But that should rub you the wrong Why 3-- if you want true, just say true. So it turns out in C, there are that are literally true I could also put the number 1 for but most people would just So it's a little hackish, if There's no forever keyword in C. If I'm going to just use So, again, not perfect to the other, but absolutely This is a little more common a finite number of times, like repeat 3. There's a few different ways we can And here's where C-- like a you kind of have to whip out that blocks and think about, build a little machine in software that Well, let me give myself a variable Let me create a loop whose Boolean the idea being here, why don't So how do I implement I give myself a variable, Now, I ask the question, If so, go ahead and print out meow. And just intuitively, even if before Scratch, what I've left room here for Yeah. We have to increase counter. So I need code like I showed earlier, And so here's where becomes a bit more like plumbing. You can't just say what you You have to build a little that initializes a value, does And so it's kind of like but together, that's just using But this is pretty common. Just like in Scratch, you of times, pretty common in C. So can we tighten this code up? This is correct, but here are If you're going to count, just say i. A convention in languages like C-- is just use i is to count from like, 0 on up. Counter is not wrong. It's not bad. It's just more verbose Just call it i. You don't need more semantics than that. All right, what else can I do here? There's another opportunity Do you recall? Yeah. Yeah, that syntactic sugar but it does it more succinctly. I can change this to either the format of just i++. Now, this is pretty canonical. This is how most people three times using a loop in C-- using a while loop, that is. Turns out that it's so common to do something finitely many times, In this model, to be is that we start by initializing the We then ask the question, If so, everything that's gets executed-- namely, Then the computer is going to to make sure that i hasn't gotten But if not, it then does this And then it repeats, constantly and executing what's in the and executing what's in the block. After three times of that, the condition and that's it for the code. It just proceeds to whatever's It jumps to the next blocks down below. All right, what's another Well, I've deliberately and that's a programming We started last week with all So it's pretty reasonable to like you would here. Like, no fingers are up, this is 0-- fingers on your hand. But if you prefer, you could But then you don't want to you want to do i is On most keyboards, there's no symbol for or equal to, so in C, you and then an equals sign That just means less than or equal to. We could change it to set i to 2 or equal to 4. We could make this be a 10 But, again, just stick with the basics. Start at 0 and count on up Or if you prefer to count Set i to 3 and then do this so but you have to decrement So, again, we could There's literally an infinite number And that's why I keep Call the variable i for initialize it to 0 for something like unless you really prefer to count down. Again, just certain human conventions. All right, how about This is what's called a for It's not quite as straightforward to bottom in exactly the same way. This kind of has a lot more But it does exactly the same thing. What happens here is-- notice that inside the there's two semicolons-- which They're not at the end in the middle of the parentheses. But that's what the The first thing before the semicolons The next thing is the condition checked every cycle through this loop. And the last thing is going to be in this case is going to be count up. So, again, if I rewind We then ask the question, If so, execute what's Then the computer does this, it does And then it's not going It's going to check again the Then it's going to meow if so. Then it might go ahead and increment So, again, this does not read quite You kind of read it left to But, again, the initialization, being checked, and the does the exact same thing as what we saw Which one is better? Eh, they're the same. I think most people would a for loop once comfortable, but just All right, any questions, then, on Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: A for can both be used to do There are subtle differences which we'll discuss before create a variable in a for loop-- notice that it was, again, inside technically means it's only going to By contrast, with the while loop, of the loop. That variable is going to continue So that's one of the Good question. But you'll see some others over time. All right, so we claim then to do this with loops. So let's actually jump back to the code. Let me go ahead and now re-implement So how about for int i Then inside my curly braces, let me go with a newline and a semicolon. So I did it pretty quickly just because But if I now make meow, no errors there. Run ./meow. And I see meow, meow, meow. Well, let's do now what was to begin to make our own by using our own in C. So here's but we'll explain over time what If I want to create a because the authors of C did not create I need to give it a name, like meow. I need to specify if For now, I'm going to say no. And I'm going to explicitly say no It's also necessary when which was not necessary in Scratch-- to specify what its return type is. But for now, I'm just going to say it takes no inputs-- and that's what the void and it does not return or like get_string or get_int does. meow's purpose in life is just to by printing something on the screen. So what is meow going to do? I'm going to have it quote unquote, &quot;meow&quot;, backslash n. And now, just like in a brand new function called meow. And here's where too, if you technically speaking, you can only one line of code inside your loop. But, again, stylistically, you to preserve them to make what it is that's going on. Let me go ahead and save Whoops. Darn. All right, what did I do? Something stupid. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, so I meant to hit parenthesis. So let me rerun make meow. OK, fixed. My mistake. All right, it's still working OK. But recall what I did in Scratch, And just to make a point, let me way down in the file. Because, again, now that meow I just know a meow function exists. I want to be able to use it. So let me scroll back up. My main function is the same. Let me go ahead and make meow again. And now, just by moving that function, And let's look at the first. Again, the rule of thumb but it says meow.c in bold-- which is 5 is the line number, So line number is enough alone. Let's see. Oh, this is what happens Sorry. This is the error we're I was looking at the old error message meow.c line 7. All right, apparently, C does not Implicit declaration of Well, what does that mean? Declaration of function means Like, I'm declaring that meow defined it yet. And then C99 is the version which we generally use here, it's So why is that the case? Can you infer from the mere fact of the file-- which was fine why is that? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, C is It reads your code top to bottom. And if it does not know what meow it just freaks out and prints So the solution is, quite simply, don't But you can imagine this getting a because main is, by name, the And, honestly, it would just at the top of your code. Because if you want to it makes sense to just Well, there is a solution to this. You can put functions in different as you-- and this is perhaps the so long as you leave a little at the very top of your repeats the return value, to that function, semicolon. This is, so to speak, and the real fancy way It's like, what is this But the semicolon means I'm not I'm going to actually or implement it down below here. This is kind of a stupid detail. More recent languages you can put your functions in any order. But, again, if you just of programming languages and as you noted-- it must just be reading So annoying, yes, but So let me go ahead and make meow one And let me make one final enhancement Let me go ahead now and Let me go ahead and say, be nice if my meow function could do So suppose I want to do this. This meow function at the moment But suppose I want to meow some number provided by the user. Well, just like in Scratch, I just presently am saying void. But if I change this to int n, hey, meow still doesn't but it does take something as input. It takes an integer, So this is another way but a way of declaring a as input, the function. So now if I tighten up main here, now just like in Scratch, which is this. If I now look at this now my main program is really that it just says what it This works, though, because I an integer called n, and then using There's one change. You might have caught my one mistake. I also have to remind myself up Again, this is one of the only that's sort of reasonable. But there, I have now a better version. So let me go ahead and rerun Voila. So, again, no change again, we're sort of And, heck, what you could do now-- and down the road-- those header files we talked this is the kind of modularization We, the staff, wrote a function called we put it in a file called CS50, and we these things called prototypes-- in cs50.h. So that when you all, as aspiring you are sort of secretly telling the what the menu of available functions is. Why? Because in CS50 is lines like but for get_string, And stdio.h is the same lines So that's all that's going on there. It's just a way of telling the computer All right, any questions, Correct. So if you don't mind, I my hand at that detail for today. Indeed, int main void is a little weird, We have no mechanism And what does it mean for Like, who is it returning to? For another day, if we may. They're going to come into today is just something you as necessary copy-paste So meow is a function that takes an but it didn't actually have a But what if we actually want not only takes 0 or but also returns some value, maybe an else altogether? Well, it turns out, in C, Let me go ahead and create a And let's implement a we can discount some regular as though there's a sale Let me go ahead and include our usual Let me give myself int And inside of main, let's go Let's give ourselves a representing the regular Let's go ahead and get a float what that regular price is. Then, next, let's go ahead and declare called sale, ultimately after some percentage discount off. And let's go ahead and simply And, say, 15% off is a So let's go ahead and discount which is equivalent, of course, to by 0.85. Of course, if we're taking off 15%, Now, let's go ahead and Let me go ahead and say let me go ahead and %f, %.2f because, at least in US currency places-- followed by a newline. And then let me go ahead and All right, let's go down here So far, so good-- ./discount. And the regular price is maybe $100. So the sale price should be $85. So our arithmetic seems But let's fast-forward now in time. Suppose that we find a lot of prices in an like Amazon where they're offering And it'd be nice to have just does this arithmetic for So let's go ahead and to give ourselves our own for instance, that takes an input-- like the regular price and then it also returns a value. It doesn't just print it out. It returns a value, namely, a float So let me go down and define a function that's because we're dealing The function is going And it's going to take one input, like In here, I'm going to do I'm going to say float sale equals And then I'm going to go Now, for that matter, I can If I'm only declaring a variable returning with this keyword return, I So I can delete the second line. And I can actually just go ahead altogether and immediately result is of taking the price input, times 0.85. So very simple function that As always, let me go the only time it's OK to copy-paste-- the top of the file, so that main has already seen And now let me go into the code here. And instead of doing let me presume that we in our toolkit called discount that and return that value. And then down here, my code I'm still going to print out storing that result. But I've sort of abstracted of taking a discount by creating my price, or anything else as input. It does a little bit of math, and then it returns a value. But notice that discount It's literally using return so that I can hand back that back a value, just like get_int for you-- so that I up here on that value in a variable if I want Let me go ahead now and recompile Let me go ahead and do ./discount. And let's, again, do $100. Sale price is going to be $85 as well. Now, it turns out that functions don't as input. They can actually take 2 or 3 or more. So, in fact, suppose we wanted to now and take in as input to the discount that I want to discount but thereby allowing us to support not just points off. Well, let me go up here and declare And let me ask the user points they want to take off. So I'm going to say percent_off get that int called percent_off. And now in addition to to the discount function, I'm But I need to tell the computer and the way I do this down here in the Here is going to be a percentage per the comma. And I'm now going to use that I don't want to just do percentage that's going to increase I actually need to do a little bit a percentage off, like the number I need to do 100 minus that thereby giving me 100 minus 15-- 85. And then I need to divide to give myself 0.85 times But if I go ahead now and save this, I notice that I've What have I done wrong? Well, I need to change And, again, this is admittedly that you have to maintain But that's fine. I'm just going to go up percentage-- spelling incorrectly. And now let me retry crossing my fingers this time. Worked OK. ./discount, and voila, $100. And percent off, say, 15 points. And, voila, $85. Now, it's worth noting returned the results of my I haven't just done the math on the In fact, if we take a look where discount is now taking a price notice that I'm not doing I'm not just saying price minus percentage divided The problem there is that to be scoped to that discount function. And we'll encounter this again just refers to where in which a or is accessible. So it turns out if I change price function, that's not going If I actually want to to the function that used the I actually do need to take this the value explicitly so that ultimately All right. Well, let's go ahead and use these primitives in How about a little game of And in the original Super Mario so you have these look like this where there's some coins marks. So let's just use this as a I start to make Like, not actual colors or fanciness, just something like printing Well, if I go back over here, that I alluded to earlier. So let me code up mario.c. Let me go ahead and include which we'll continue to And then let me just go ahead and and a newline. All right, this is what we just means graphics but really just And if I make mario and do ./mario, as this, but it's the beginning Well, if I wanted to now print let me go back to my code here. And instead of printing I could do something like four int i And then inside here, I could just Let me save that, make mario. And, at the risk of but I made a mistake, The prompt is not on the new line. How could I move it? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, I need an But should I put it here? OK, no, because that's going and it's going to make this thing So, logically, just like in Scratch, put out here. And just print out, for instance, And now if I do make We're back in business. But a little better not repeating myself multiple times, But let's do one other Let me go ahead and ask the user how The catch here is that there's another and it's called a do A do while loop is but it checks the condition Recall earlier on the open parenthesis, closed parenthesis. And I kept claiming that we check it was, 3 in advance again and again. A do while loop just inverts the do something like this. At the top of this program, and give myself a variable And then I'm going to do, literally, n equals get_int-- and I'm going like the number of And I'm going to do this So this is a little cryptic, are the Boolean expression is now not at the top. Now, why is this? Well, the difference whoops. I need to add cs50.h, because If I now compile this version a do while loop is helpful when you want and then check some condition or some in this case, the user cooperated. It would make no sense if because there's no work to be done. It'd be really weird if because that makes no sense logically. So with this simple construct while n is less than 1. The implication is that as soon I'm going to break out of a variable called n containing, through 2 billion or so. And I can now use this, for so now my program is completely dynamic. Let me go ahead and do And I'll do 4, still works. I'll do 40, still works. And the difference here with the involves getting user input, The user hasn't given you anything yet. So you have to do something first, if the human has, for instance, All right, well why don't more like this in the same game, and this is like a two-dimensional It looks like a 3 by 3, for And it's like, made of bricks, so Well, it turns out that we can nest-- that is, combine-- some of Let me go ahead now and And I'm going to keep the And I'm going to ask, what's the size of this square? I'm going to assume it's n by So I'm just going to ask for the And now, how do I do this? Well, I'm going to go ahead, how about for int i = Let me just keep it simple like this, just a single and a newline after it. All right, let's make mario. Run mario of 3. OK, that's close to being it. I've got a column. All right, but I need it to be wider. So the solution last time and then maybe put the All right, so let's do make mario, All right, so I kind of need to So how might we solve this problem? I want to print rows and How do I do this? Yeah. AUDIENCE: Add another DAVID J. MALAN: Yeah. Add another loop in the for loop, right? If you use one loop conceptually to bottom, and then sort of typewriter style-- do like, character, character, I think we could do exactly So how about this? Let me get rid of this line and And let me just give myself And since I'm already using i, here would be to say something like j. So j also gets 0, j is less than n, j++. And now, what's going to happen? Let me go ahead and print out just And let me save and let me run this. Let me see how close we are. Make mario 3. OK, three, that's clearly wrong, but So we're close. What's the one fix I need now to down to the next row when appropriate? What do you think? Yeah, I need one of these backslash n's. And let me add some comments now to For each row, for each column, just to kind of explain the logic? And so I add that because I could do something like So here is where the comments, actually kind of illuminates Let me go ahead and recompile It's not a perfect square, are a little taller than they are wide, Now I've done something that's quite All right, so let me pause here Again, the code's getting but we're just building more with familiar puzzle some loops, some conditionals. It's all the same as before. Yeah. Can you multiply strings in C? No. But ask that same question again in and the answer will be yes. Other questions. Yeah. In C, you must specify of the function, and the to the function in that order. And if none of them are applicable, So same question as earlier, let and we'll come back to But for now, just take on faith Because main is a little when green flag is clicked. It too was a little special as well. Yeah AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yes. If you want to get out of a So let me answer this question this way. An alternative to a do while loop How about while true-- so do the following forever-- let me go ahead and get an inch from If n is greater than 0-- that is, a positive integer-- then go ahead and use a This is identical to what we just did. It's just a little longer. It's like a couple extra And so it's just an alternative. But a do while does the same if that's in answer to your question. All right, so let's now introduce, that I've kind of been though we did see a little bit when we tried to add 2 and it overflowed the number Let me go ahead and code up a But I'm going to go ahead now So I'm going to change x to a float, And a float, again, is just which is a fancy way of saying a real And down here, I'm going to And I'm going to go ahead Instead of addition, I want to do so divide x by y. And I'm going to give myself as we did at the beginning of today. And I'm going to print out z So I'm going to go ahead now and And let's do something like, oh, 2/3. 2 divided by 3 is 0.66667. So that's what you would rather expect. Let me run it again, 1/10. All right, so 0.1, and a bunch of zeros. That too is what you But now let me get a little curious. It turns out that in C, you can codes a little bit. By default, you get 6 or so digits. Suppose that you want You can more succinctly say 0.2 This is the kind of thing that's and you find that, OK, uses 0.2 to do two decimal points. So let me do make calculator How about 2/3? 0.67. So it handles the display of And now let me go ahead So it's adhering to that. Well, maybe I really want I've got a really powerful computer. Let me see 50 numbers That's a lot of significant digits. Let me remake the Let me remake the calculator, And how about 2/3 again? Well, that's interesting. Pretty sure it's supposed to be In grade school math. All right, well, maybe How about 1/10? OK, that's really getting funky. So what's going on? It seems that my program cannot we eventually hit we can't even do very What's going on? Exactly. In a nutshell, the computer's using that many numbers But the problem very similar to that integer And I'm using that now as a term of art. Integers can overflow if you're trying have available to you. You sort of change them all to ones, and Same thing here, but in the if you only have 32 change to double and only have 64 but it's not infinite. And, yet, pretty sure there's an In the world, which is to say a computer represent all possible Because, again, there's of permutations of 32 or 64 bits. It might be a lot, in the billions And so, indeed, this is the to what's actually going on there. And so this is an example of what floating-point imprecision. Floating-point imprecision refers to the to represent all possible precisely, at least by default in the world of scientific there are solutions to this problem But the problem fundamentally So there's a reason I Let's see what would And instead of using floats for x and y, And let's go far back thereby giving us integers x and y. Let's still leave z as a float, we want to be able to handle But let's go ahead now and having changed x and y now to ints. make calculator, ./calculator, and 3 for the denominator. And it's not 0.666, and it's It's just all zeros this time. So why is that? Well, it turns out that C, when is always going to give you The problem is that floating-point Only the integral part to the Everything at and beyond the decimal known as a feature in When dividing an integer by an But if you're trying to then store result in that integer, C is just at and beyond the decimal point, in just the 0 from what should So let's see one more example, in fact. Let me go back to my terminal here. Let me do ./calculator again. And let's do 4/3. This time, It should be But let's see, 4 divided by 3, both as but there too the But the floating-point part is leaving us with just 1. So how do we solve this? Well, certainly, we could just use But if, by nature of your program, or maybe even longs, for which what we can actually do And we can explicitly tell want to treat this int as though And we can do that for both x and y. So let me go back to my code here, and I can convert y to a float by by literally writing the type right before the y. And if I really want to be explicit, But, strictly speaking, it suffices not necessarily both. Let me go ahead now and do make and let's try 2 divided by 3. And now, we're back to an But, indeed, we're still having Let's run it one more There too we're closer to But we still have that but that's going to be another And here in a little of integer overflow, which Suppose that we think back to and we counted from 0 to I think I asked the question, Someone proposed, well, That's fine if you have a to another light bulb or transistor. If you don't, though, the next number But if you don't have space for you might as well just be So in the world of integers, if those three bits eventually Because what should be 8 can't fit, so And as arcane as this we humans have done You might recall about the Y2K problem, thought the world was going to end. Why? Because on January 1st of presumably, were going to update their The problem is, though, for were honestly in the habit of Why? Because that's just a lot of space don't happen that often. So a lot of computer systems, hardware was very expensive just stored the last The problem, of course, on January 1st But if you don't have room for And if your code assumes a prefix of 1999 back to the year 1900. Thankfully, long story short, a in a lot of old languages and so the world did not end. The next time the world might end Now, that might feel but so did the year 2000, at one point. Why might clocks again break in might you think? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Indeed. So this refers to some So it turns out that the way is they count the total number is defined as January 1, 1970. Why? It was just a good year when computers really Unfortunately, most computers used 32 since January 1, 1970, the can only count up to 2 billion seconds is going to are going to roll over as follows. That number 2 billion, because if you're representing recall that you can only count or negative 2 billion-- looks like this. This is roughly the number It's all ones with one If I count one second past that that means, all right, it's just like 9's If I keep this sort of simple carrying the 1, carrying the 1, 1 second I have this number in So there's still 1 bit that's Unfortunately, that bit whereby if that first bit is negative, somehow represents a negative number. It's not negative 0. There's a fancier representation. But a very big, positive becomes a very big, negative number. And that number is roughly That means computers are going to accidentally been negative 2 billion seconds since computers potentially think it's 1901. So what is the solution to Y2K was because we were What about 2038? More bits. And, thankfully, we're getting a and computers now are And all of us will be long of that number of seconds, so many, many years from now. But that's really the If you're running up against just kick the can further and And, frankly, because hardware computers are so much faster, as it might have been decades ago. But that's indeed the solution. But this arises in very common contexts. In fact, let me go ahead and write a You might think that just converting might be simple, but let In pennies.c, I'm going to And I'm going to include stdio.h, And now down here, I'm going to do this. I'm going to get a float going to ask the user for some amount and I'm going to store that Then I'm going to simply convert that about amount times 100? And then I'm going to go ahead and print because that's just an backslash n, quote All right, so if I didn't make any ./pennies. And suppose I have, say, $0.99, so 0.99. That's 99 pennies. Suppose I have $1.23. That's pretty good. Suppose I have $4.20. Huh. There's that imprecision issue. And this isn't even Now, not a big deal if the cashier gives but you can imagine this adding up. You can imagine this being worrisome for financial transactions, for My program can't even handle this. Well, there are some solutions here. And it looks like what's if I print it out using the %f with a points-- presumably, the computer is struggling It's probably storing 4 dollars So it's close, but it's not quite there. So I could at least solve this And it turns out there is And it turns out that it's in a And you would know this by looking as we'll point you to. And if I now make pennies again and And, voila. Now it's correct. So at least in this context, it But it's certainly something I Unfortunately, even professional, have not been particularly And in a class like this, the goal but to really teach you what's going so that you have a bottom-up is represented, how computers so that you are not on the failing And so that we as a society are not too. And this happens, This is a Boeing airplane to be rebooted after every 248 days. Why? Because this Boeing airplane software tenths of a second to keep related to its electrical power. And, unfortunately, after 248 days of which in the airline uncommon to make every dollar count, all the time-- the 32-bit number would would shut off on the airplane of undefined behavior in that case. The temporary solution by Boeing at sort of operating system style, And that was indeed the fix until they This stuff really matters. And the more hardware we carry use these kinds of devices, we're going to run into down the road. That's it for CS50. We'll see you next time. [MUSIC PLAYING] DAVID MALAN: This is Now that you have some programming in this more arcane language called c. Among our goals today is to help been doing these past several days. Wrestling with your first programs in up understanding of what And, ultimately, what more So this recall was the very I wrote in this language certainly, than the Scratch equivalent. But at the end of the day, VS Code doesn't understand What's the format into which we need to recap? AUDIENCE: [INAUDIBLE] DAVID MALAN: So binary, Right? The 0s and 1s that your computer So somehow we need to And up until now, we've been which is aptly named, because And the invocation of that Make hello looks in your current hello.c, implicitly, and then it which itself is executable, so that you can then do ./hello. But it turns out that make is It does help you make programs. But make is this utility that comes on to actually compile code by the program that converts source code or whatever cloud environment In fact, what make is running a command automatically And, so here, for instance, in VS this time in the context and I could compile Let me go ahead and use the And we'll see in a moment why we've I'm going to run clang instead. And then I'm going to run hello.c. So it's a little different It needs to know, explicitly, I'll go ahead and run Nothing seems to happen, which, Because no errors have popped up. And if I do ls for list, you'll see But there is a curiously-named This is a historical convention, And this is, just, the default that you might compile yourself, Let me go ahead now and kind of a stupid name for a program. Even though it works, But if you actually want to we could just resort to make, what make is doing for us. It turns out, some support what are called and more on those later today. But these are literally words or after the name of a program that just It modifies its behavior. And it turns out, if you read you can actually pass a -o, for lets you specify, your outputted program to be called? And then you go ahead and type the want to compile, from Let me hit Enter now. Again, nothing seems to happen, Now we still have the old a.out, And I do have hello now. So ./hello, voila, runs And let me go ahead I could, of course, resort to using Which, I am in the habit of closing, But I could go ahead and right-click if I want to get rid of it. Or again, let me focus on And I can use-- anyone recall? We didn't really use it much, AUDIENCE: rm. DAVID MALAN: So rm for Remove regular file, And now, if I do ls All right, so, let's to do the second version we ever did, so that we have access to functions Let me do string, name, gets, question mark. And now, let me go ahead and say hello comma, name. So this was version 2 of that very easily compiled with make If I want to compile this that same lesson learned, clang-o, hello, just so I get a better And a new error pops up that some of So it's a bit arcane here, and there's with temp for temporary there. But somehow, my issue's in It somehow relates to hello.c. Even though we might not have seen but there's an undefined As though get string doesn't exist. Now, your first instinct might be, well I didn't. That's the very first But it turns out, make is doing Just putting cs50.h, or any header for that matter, just teaches the It, sort of, asks the compiler to trust that I will, eventually, like get string, and cs50.h, But this error here, some kind of that there's a separate finding the 0s and 1s that That authors of this operating in the form of printf. We need to, somehow, need to link in code the actual machine code that someone So to do that, you'd have to at the end of the command. So additionally, telling clang a file called hello, and you want you also want to quote-unquote that collectively implement So now, if I hit enter, And now if I run ./hello, it works But honestly, this is just going to Notice, already, just I have to run clang-o, and you're going to have If you wanted to use the math library, you would also have to specify give me the math And the commands just So moving forward, we won't have but clang is, indeed, the compiler. That is the program that converts But we'll continue to use make because And the commands are cryptic the more sophisticated and And make, again, is just a tool Let me pause there to see if take a look further under the hood. Yeah, in front. AUDIENCE: Can you explain again what DAVID MALAN: Sure, let me What does the -lcs50 mean? We'll come back to that, But it means to link in the implement get string and printf. But we'll see that, visually, in a sec. Yeah, behind you. AUDIENCE: [INAUDIBLE]. DAVID MALAN: Really good question. How come I didn't have Because I used printf in version 1. Standard I/O is just, literally, it just works for free. CS50, of course, is not. It did not come with the We ourselves wrote it. And other libraries, even though they might not be enabled by default, So you're not loading more 0s than you need to. So standard I/O is special, if you will. Other questions? Yeah? AUDIENCE: [INAUDIBLE] DAVID MALAN: Oh, what does the -o mean? So -o is shorthand for and so -o is telling clang to because the next thing I recall was clang -o hello, then And this is where these commands It's just through muscle that you'll start to remember, oh what are the command line arguments But we've seen this before. Technically, when you run make hello is the command line argument. It's an input to the typed at the prompt, that tells Even when I used rm a moment the command line argument and it's telling rm what to delete. It is entirely dependent on the programs whether you use dash this see over time, which ones So to come back to the first question let's consider the code more closely. So here is that first again, with stdio.h and only Until we add it back in where we actually get the human's name. When you run this command, that are happening won't dwell on these we'll abstract it away by using make. But it's worth understanding how much automation is going on, so it's not magic. You have this bottom-up So when we say you've been that's a bit of an oversimplification. Technically, every time you're having the computer do And this is not four distinct things every time you run your but it helps to break it as to how we're getting from source It turns out, that when you compile, speaking, you're doing four things Preprocessing it, compiling it, Just humans decided, let's just But for a moment, let's So preprocessing refers to this. If we look at our source code, and therefore get string, notice that And they're kind of special we've written, because they start And that's sort of a that these are, technically, Fancy way of saying they're handled In fact, if we focus on that I provided a hint as to what's What was the one salient thing that why we were including AUDIENCE: Get string? DAVID MALAN: So get the prototype for get string. We haven't made many of but recall that any time and we've written them we've also had to, somewhat the prototype of the function just to teach the compiler that it does down there, but it will exist. Just trust me. So again, that's what these So therefore, in my a function like get string, they're not implemented they're implemented elsewhere. So I need to tell the compiler implemented somewhere else. And so technically, is installed somewhere in the that you all are accessing via VS Code, A prototype for the get string function get string, it takes one input, and that type of that Get string, not surprisingly, has a So literally, that line and a So rather than you all having you can just trust that You can include cs50.h to go find that prototype for you. Same thing in standard must clearly be in stdio.h, motivates our including stdio.h, too? Yeah? AUDIENCE: Printf. DAVID MALAN: Printf, the and I'll just change it here And it turns out, the format-- the prototype for printf because, as you might have noticed, something to print, 2, if you want So the dot dot dot just It's not quite as simple a prototype another time. So what does it mean to The very first thing the is doing for you when it reads your notices, oh, here is hash include, And it, essentially, finds those files and does the equivalent of copying into your code at the very top. Thereby teaching the compiler will eventually exist somewhere. So that's the preprocessing just doing a find-and-replace of It's plugging in the files get all the prototypes OK. What does it mean, then, Because at this point now looks like this in It doesn't change your of this in the computer's But it, essentially, looks like this. Well the next step is what's, Even though again, we use Compiling code in C now looks like this in and turn it into something Which is way more cryptic. But it was just a few were taking a class like we wouldn't be using C it didn't exist something called assembly language. And there's different types of, But this is about as low level as understands, be it a before you start getting And most of this is cryptic. I couldn't tell you what this is doing and rewound mentally, years but let's highlight a Notice that this assembly language for you automatically, and it has mention of get string, So there's some relationship to And then if I highlight these are what are called At the end of the day, your phone actually only like addition, subtraction, division, load from memory, print something to And that's what you're seeing here. These assembly instructions feeds into the brains of the computer, And it's that Intel CPU, that understands this instruction, and And collectively, long is print hello, world on that the machine understands how to do. So let me pause here. Are there any questions on Which finds and replaces the hash and compiling, which technically once preprocessed, and converts it to AUDIENCE: [INAUDIBLE] each CPU has-- DAVID MALAN: Correct. Each type of CPU has Indeed. And as a teaser, this is why, we used to install software from this is why you can't take a program and run it on a Mac, or vice-versa. Because the commands, the instructions are actually different. Now Microsoft, or any company, could like C or another, and they can and saving a Mac version. It's twice as much work and sometimes but that's why these steps You can now use the same code and or systems, if you'd want. All right. Assembly, assembling. Thankfully, this part is fairly To assemble code, which is step happening for you every time this assembly language, which the for you from your source code, So that's the step that, last when you compile your code, you convert to machine code. Technically, that happens But no one in normal say compile for all of these terms. All right. So that's assembling. There's one final step. Even in this simple program and then plugging it into printf, I'm if you will. My own, which is in hello.c. Some of CS50s, which is is in cs50.c, which is not but it stands to reason, that if turns out, the actual and other things are in cs50.c. And there's a third file that's involved in compiling hello.c, cs50.c, and by that Yeah? AUDIENCE: stdio? DAVID MALAN: Stdio.c. And that's a bit of a white lie, that there's actually multiple files and we'll take the simplification. So when I have this code, I get those 0s and 1s that end up taking into 0s and 1s that are combined with So let me rewind here. Here might be the 0s and 1s for my code, Here might be the 0s and 1s for what Here might be the 0s and 1s that someone The last and final step that links all of these essentially stitches them together or called a.out, whatever you name it. That last step is what combines all of And my God, now we're Who wants to even think about You shouldn't need to. But it's not magic. When you're running make, that are happening that humans over the decades, that breakdown to 0s and 1s, or machine code, But henceforth, you can Questions? Or confusion? Yeah? AUDIENCE: Can you explain DAVID MALAN: Sure. What does a.out signify? a.out is just the conventional, that you compile directly It's a meaningless name, though. It stands for assembler output, and from this assembling process. It's a lame name for a can override it by outputting Yeah? AUDIENCE: [INAUDIBLE] DAVID MALAN: To recap, there are cs50.h, stdio.h, technically, they're even though you, strictly but they are there, just in And finally, any other questions? Yeah? AUDIENCE: [INAUDIBLE] DAVID MALAN: Does it matter what order Sometimes with libraries, what order they are linked in together. But for our purposes, it's It's going to-- make is going to take All right. So with that said, henceforth, is these four things. But we'll focus on it as a higher known as compiling itself. So another process that we'll more this week because, invariably, ran up against some challenges. You probably created your very first and so let's focus for a moment on As you spend more time to come If you continue to program, going to write bug Though your programs are going to get and we're all going to start to And to this day, I write And I'm always horrified But hopefully, that But when it does, it's a process, to find the mistakes in your program. You don't have to stare at your code, There are actual tools use to help debug their So what are some of the techniques Well as an aside, if you've ever-- a bug in a program is a mistake, If you've ever heard this tale, This is an entry in a log book written as-- named Grace Hopper, to record the very first discovery of a This was like a moth at the time, a very sophisticated system very large, refrigerator-sized in which an actual bug caused an issue. The etymology of bug though, but here you have, as any computer of a first physical bug in a computer. How, though, do you go Well, let's consider a very for instance, when we were trying to like this column of 3 bricks. Let's consider how I might go about Let me switch back over to VS write a program. And I'm not going to going to call it knowing that I'm going But I'm going to go ahead And I'm going to define main, as usual. So hopefully, no mistakes just yet. And now, I want to print those just hashes for bricks. So how about 4 int i get 0, i less Now, inside of my to go ahead and print out a hash All right, saving the file, doing So there's no syntactical errors, But some of you have probably because when I run this this picture, which was 3 bricks Now, this might be jumping out but I've kept the program don't have to find an actual bug, we can know about, in this case. What might be the first strategy rather than staring at your code, through the problem? Well, let's actually try to diagnose And the simplest way to do is, honestly, going to be to Printf is a wonderfully for formatting-- printing just looking inside that you might be curious So you know what? Let me do this. I see that there's 4 coming So clearly, something's So let me be a little more pedantic. Let me go inside of this say something explicit, like, i is-- &amp;i /n, and then just Right? This is not the program I want to writing, because now I'm going And if I look, now, some helpful diagnostic information. and I get a hash, 2 and I OK, wait a minute. I'm clearly going too many forgot that computers are, and now, oh, it's less than or equal to. Now you see it, right? Again, trivial example, you can see inside of by just printing stuff out like this. And now, once you've figured it out, oh, or I should start any number of ways I could fix this. But the most conventional is Now, I can delete my temporary print And, voila, problem solved. All right, and to this day, I do this. Whether it's making a command line or mobile application, printf, or some equivalent just to poke around and see what's Thankfully, there's more Let me go ahead and And let me reopen my Let me now recompile the code And I'm going to run a Which is a command that's known as a debugger. And this debugger is And all debug50 is doing for us is VS Code's built-in debugger. So this isn't even a just given you a debug50 to start it up from the get-go. And the way you run this debugger the name of the program So, in this case, . /buggy. So you don't mention your c-file. You mention your already-compiled code. And what this debugger is going walk through my code step-by-step. Because every program we've written even if I'm not done thinking With a debugger, I can and say pause execution will let me walk through my code one one minute at a time, Which is super compelling when and they might, otherwise, So I'm going to click And notice that these And if I click on one it And I'm going to run debug50 on ./buggy. And in just a moment, you'll see that a It's doing some Let me zoom out a little bit here so And sometimes, you'll see in VS which looks very cryptic, just go back Because at the terminal window is where And let's now take a If I zoom in on my notice that we have the same program is line 5. Not a coincidence, that's the line The little red dot means break And the yellow line has But if I, now, at the top of my There's one for Play. There's one for this, says Step Over, there's another there's a third that says Step Out. I'm just going to use the And I'm going to do this, and moved from line 5 to line but hasn't yet printed out that hash. But the most powerful thing here, It's a little cryptic, because going on that will make more there's a section called variables. Below that, something local to my current function, main. And notice, there's my variable So now, once I click Step Over We go from line 7 back to line 5. But look in the terminal window, But now, it's printed at my own pace. I can think through this step-by-step. Notice that i has not changed, yet. It's still 0 because the yellow But the moment I click Step Over, Now, notice at top left, i has become because now, highlighted is line 7. So if I click Step Over If I repeat this process at my I can see my variables changing, I and I can just think about I can pause and give going on without trying to race the I'm going to go ahead and know what this particular problem to my default terminal window. But this debugger, let me so it doesn't keep will be your friend to step through your code step-by-step, where something has gone wrong. Printf is great, but it gets annoying if print this, print this, print this, print this, print this. The debugger lets you do the Questions on this debugger, which you'll Questions on debugger? Yeah? AUDIENCE: You were using What do the other DAVID MALAN: Really good question. We'll see this before long, but those step into and step out of, actually if I had any more than main. So if main called a and something called a function stepping over the entire execution of and walk through its So any time you have working on that has multiple functions, if you want, or you can set it inside to focus your attention only on that. And we'll see examples All right, so what else? And what's the sort of, elephant is actually a duck in this case. Why is there this duck and Well, it turns out, a third, genuinely is talking through problems, talking Now, in the absence of having or a roommate who actually wants to generally, programmers turn to a if something animate is not available. The idea behind rubber duck is that simply by looking at your code I'm starting a 4 loop and OK, then, I'm printing out a hash. Just by talking through your finds you having the proverbial because you realize, wait a minute or I just said something wrong. And this is really just a proxy for any or friend, colleague. But in the absence of any you're welcome to take, One of these little, rubber ducks and you want to talk through one or maybe life more generally. But having it there on to help you hear illogic might, otherwise, be logical code. So printf, debugging, rubber-duck you'll see over time, to that you will write that has mistakes. Which is going to happen, all the more to solve those mistakes. All right, any questions on debugging, Yeah? AUDIENCE: [INAUDIBLE] DAVID MALAN: What's the difference At the moment, the only one that's is Step Over, because it means If, though, I had other functions maybe lower down in the file, I and walk through them one at a time. So we'll come back to this but step into will allow In fact, this is a perfect segue to Let me go ahead and open And, actually, we'll And we're going to write one Let me go up here and Let me include stdio.h. Let me do int main(void). So all of this, I think, And let's do this, let's and let's ask the user This is not a function that But I'm going to assume, for the Then, I'm just going to print whatever the human typed in. So at this point in the story, Except for the fact that a function in the CS50 I'm going to need to invent it myself. So suppose, in this case, that I declare It's return type, so to speak, should I want to hand the user back to take no input to keep it simple. So I'm just going to say void there. No inputs, no special Let me, now, give myself And let me do something familiar, Let me give myself a variable, within this block of code. Assign n the value of get int, asking get int's own prompt. And I want to do this while want to get a negative from the user. And recall, from having I can now return n as the whatever the user has typed in, so an actual negative integer. Now, I've deliberately and it's a subtle, but let me compile this program after so I don't make that mistake again. Let me do make buggy, Enter. And now, let me do ./buggy. I'll give it a negative Uh-huh. That did not take. How about negative 5? No. How about 0? All right. So it's, clearly, working backwards, So how could I go about debugging this? Well, I could do what I've done before? I could use my printf technique and new line, comma n, just to print let me rerun buggy, let OK, n is negative 50. So that didn't really because that's the same as before. So let me do this, debug50, ./buggy. Oh, but I've made a mistake. So I didn't set my breakpoint, yet. So let me do this, and I'll I could set it here, on line 8. Let's do it in main, as before. Let me rerun debug50, now. On ./buggy. That fancy user interface It's going to highlight the line Notice that, on the left i is defaulting, at the moment to 0, yet. But let me, now, Step Over this and you'll see that I'm being prompted. So let's type in my negative 50, Enter. Notice now that I'm All right. So clearly, the issue seems to be So, OK, let me stop this execution. My problem doesn't seem to be in So that's fine. Let me set my same breakpoint at line 8. Let me rerun debug50 one more time. But this time, instead of just stepping So notice line 8 is, again, In the past I've been Let's click Step into, now. When I click Step Into, jumps into that specific function. Now, I can step through these I can see what the value of I can think through my logic, and voila. Hopefully, once I've solved the issue, and move on. So Step Over just goes over Step Into lets you go into So let's go ahead and do this. We've got a bunch of can take to solving some and pace ourselves today, though. Let's take a five-minute break, here. And when we come back, we'll take we've been talking about. See you in five. All right. So let's dive back in. Up until now, both, by way of week 1 we've just translated from Scratch into like loops and conditionals, So sort of, more of the same. But there are features in C that like data types, the types of variables but that, in fact, does In fact, a few that So to summarize the types we saw last We had ints, and floats, and there's also Booles and also string, But today, let's actually start to and actually what your Mac and PC as an int versus a char, versus And see if we can't put more tools so we can start quickly writing programs in C. So it turns out, that on though this can vary by is how large each of the is in C. When you store a Boolean value, it actually uses 1 byte. That's a little excessive, you only need 1 bit, But for simplicity, to represent a Boole, true or false. A char, we saw last week, And this is why ASCII, which uses 1 on, was confined to only 256 Notice that an int is A float is also 4 bytes or 32 bits. But the things that we call long, 8 bytes or 64 bits. So is a double. A double is 64 bits of precision And a string, for today, we're We'll come back to that, as to how much space a string it's going to take up a depending on whether the But we'll see exactly what So here's a photograph of inside of your Mac, or PC, or phone. Odds are, it might be a little This is known as RAM, Each of these little black board, the green thing, are where 0s and 1s are actually stored. Each of those stores Maybe megabytes, maybe So let's focus on one of those chips, Let's consider the fact that, even how this kind of thing is made, if for the sake of discussion, if this thing is storing 1 then we can number them, arbitrarily. Maybe this will be byte Then, maybe, way down here in the bottom We can just number these things, Let's draw that graphically. Not with a billion squares, And let's zoom in further, At this point in the away all the hardware, and just think of memory as taking as taking up some number of bytes. So, for instance, if you were to store was 1 byte, it might be stored of this black chip of memory. If you were to store something like it might use four of those bytes, back-to-back-to-back, in this case. If you were to store a long or a double, So I'm filling in these how much memory and given variable 1, or 4, or 8, in this case, here. Well, from here, let's abstract and really focus on Or, really, like a canvas that onto that we want. At the end of the day, all of this But it's up to you and I to build Things like actual numbers, But we'll start Suppose I had a program A simple program whose purpose scores on an exam, or some such thing. Suppose that your three scores were which is particularly low. Let's write a program that does Let me go back to VS Code, here. Let me open up a file called scores.c. Let me implement this as follows. Let me include stdio.h at the Then, inside of main, let me Give me another score, 73. Then, a third score, called Now, I'm going to use printf to print and I can do this in But I'm going to print out %f, and plus score 3, divided by 3, Some relatively simple arithmetic to if I'm curious what my average grade assessments. Let me, now, do make scores. All right, so I've somehow But this one is, actually, germane won't encounter too frequently. What's going on here? So underlined to score 1, plus Format specifies type double, but what's going on here? Because the arithmetic Yeah? AUDIENCE: So the computer is doing the just gives out a value at the DAVID MALAN: Correct. And we'll come back to but, indeed, what's happening here obviously, because I And I'm dividing by another is, recall that C when it performs math, But integers are not So if you actually want to get a without throwing away the remainder, it turns out, we're going to have to-- we're going to-- aww-- we're going to have to-- [LAUGHTER] we're going to have to to a float. And there's a few ways to for now, I'm going to go I'm going to change the Because it turns out, long story short, participating in an like this is something will be treated as promoted to So let me, now, recompile this This time it worked OK, because Let me do . /scores, Enter. All right, my average is All right. So the math, presumably, checks out. Floating point imprecision But let's consider the What is, kind of, bad about it, or if are we going to regret the What might not be ideal here? Yeah? AUDIENCE: [INAUDIBLE] DAVID MALAN: Yeah, so in this case, So, if I'm hearing you is only ever going to tell I'm not even using or get float to get three different And suppose that we wait I think other problems could arise. Yeah? AUDIENCE: Just thinking that you can't reuse that number. DAVID MALAN: I can't haven't stored the average in some a big deal, but certainly, if that's a problem. Let's fast-forward again, a I don't just have three maybe I have 4, or 5, or 6. Where might this take us? AUDIENCE: Yeah, if you the average of any number of DAVID MALAN: Yeah, I've sort And honestly, this is, kind Even though the variables, yes, have score 3. Imagine doing this for a Having to score 4, 5, 6, 11 10, 12, You can imagine just to get if you're just defining variable So it turns out, there are if you want to have multiple happened to be of the same data type. Let's take a look back to see what these things Here's that grid of memory. Each of these recall represents a byte. To be clear, if I store how many bytes will it take up? AUDIENCE: [INAUDIBLE] DAVID MALAN: So 4, a.k.a. 32 bits. So I might draw a score 1 as It's up to the computer as to whether it I'm just keeping the pictures clean If I, then, declare another it might end up over there, And then score 3 might end up here. So that's just representing what's going But technically speaking, to really being stored in the computer's 32 total, in this case, But again, it gets boring at binary all the time. So we'll, generally, abstract decimal numbers, in this case, instead. But there might be a better way to but maybe four, maybe, by declaring one variable to store or more individual variables. The way to do this is by way An array is another type of data that of the same type back-to-back-to-back. That is, to say, contiguously. So an array can let you create or even more than all using the same variable So for instance, if, for one but I don't want to messily declare I can do this, instead. This is today's first the square brackets This line of code, here, is or int score 1 equals 72 semicolon. This line of code is declaring for And that array is going Why? Because the type of that The square brackets tell the In this case, 3. And the name is, of course, scores. Which, in English, I've so that I can describe this array So if I want to now assign values I can do code like this. I can say, scores bracket 0 equals and scores bracket 2 equals 33. The only thing weird the square brackets which are still new. But we're also, notice, To zero index means to When we've talked about have, generally, been zero indexed. Arrays in C are zero indexed. And you do not have choice over that. You can't start counting at 1 you'd be sacrificing You have to start in So out of context, this but it, definitely, is than, even, three scores here. In fact, let me change Let me go back to VS Code. And delete these three lines, here. And replace it with a ready to store three total integers. And then, initialize them as as before, scores bracket 1 is is going to be 33. Notice, I do not need to say because that's been for me on line 5, where I already is going to be an int. Now, down here, this code needs three variables, score 1, 2, and 3. I have 1 variable, but I'm going to, here, then, do scores plus scores bracket 2, which is giving me back those three integers. But notice, I'm using the same And again, I'm using this new square index into the array to get at the first and then, to do it again down here. Now, this program, still not really I still can only store three to something like that before long. But for now, we're just introducing whereby, I can now store multiple Well, let's enhance this a bit more. Instead of hard coding these scores, let's use get int to ask Let's, then, use get int to Let's use get int to ask storing them in those And, now, if I go ahead and save I've messed up, here. Now these errors should be What mistake did I make? Let me give folks a moment. AUDIENCE: cs50.h DAVID MALAN: cs50.h. That was not intentional, so still I need to include cs50.h. Now, I'm going to go back to the bottom OK. We're back in business, ./scores. Now, the program is getting So maybe, this year was better and I got my average is 99.0000. So now, it's a little more dynamic. It's a little more interesting. But it's still capping the number But now, I've introduced another, There's this expression in programming, [SNIFFS AIR] something And there's something off here in Does anyone see an opportunity to if my goal, still, is to get three without it smelling [SNIFF] kind of bad? Yeah? AUDIENCE: [INAUDIBLE] use a 4 loop? That way you don't have to copy DAVID MALAN: Yeah, exactly. Those lines of code And honestly, the only thing and it's just incrementing by 1. We have all of the building So let me go ahead and improve this. Let me delete that code. Let me, now, have a 4 loop. So for int i get 0, i Then, inside of this 4 loop, of those lines into like scores bracket i equals get once, via get int, for a score. So this is where arrays You don't have to hard type in all of these magic You can start to do as you propose with a loop. So now, I've tightened things up. I'm now, dynamically, getting but putting them in three And so this program, ultimately, is Make scores, ./scores, and 100, 99, But it's a little better designed, too. If I really want to that still smells, a little bit, here. The fact that I have indeed, this has to be the same as this number here. Otherwise, who knows So what might be a to cleaning that code up further, too? AUDIENCE: [INAUDIBLE] how many input scores [INAUDIBLE]. DAVID MALAN: OK, so we could leave And so we could, actually, Let me take this a few steps ahead. Let me say something like, int n gets then I could actually change this and, indeed, make the Ask the human how many tests Then, you can type in because the loop is going And then you'll get the average well, lost another-- or however specified by the user Yeah, question? AUDIENCE: How many bits or DAVID MALAN: How many AUDIENCE: [INAUDIBLE] point of DAVID MALAN: So the purpose of It's to eliminate having because that gets very messy quickly. If you have score 1, score 2, that's, like, 99 different that you could collapse into one At different indices, or indexes. As someone would say, is whatever is in the square brackets. AUDIENCE: [INAUDIBLE] DAVID MALAN: So it's a good question. So if you-- I'm using and honestly, we don't because I'm not likely to get a And so you could use And that list we had on the screen, There's a data type called short, you could, technically, use char, in Generally speaking, in tend to be over optima-- Everyone just uses is going to get a test score that's 2 kind of, the go-to. Years ago, memory was expensive. And every one of your spot on because memory is so tight. But, nowadays, we don't Yeah? AUDIENCE: I have a question Could it-- when you're doing a DAVID MALAN: So what is the and not getting an error, as in a program like cash, and getting an error The problem with the scenario I created And I was telling printf to use a %f, of dividing integers by another integer. So it was printf that was yelling at me. I'm guessing in the scenario you're printf was not involved in So that's the difference, there. All right. So we, now, have this And an array can store multiple values. What, then, might we do that's more in memory? Well, let's take this one step further. As opposed to just storing 72, 73, 33 or because again, an array gives you one or indices therein, bracket 2 on up, if it Let's, now, start to consider something Chars, being 1 byte each, they take up much less space. And, indeed, if I wanted hi I could use three variables. If I wanted a program to print, I could, of course, store those in And let's, for the sake of discussion, Let me create a new This time, I'm going to call it hi.c. And I'm not going to bother I just need the standard int main(void). And then, inside of main, I'm going And this is already, hopefully, But we'll go down this with c1, and c2, and, finally, c3. Storing each character in and I'm going to print this Now I'm dealing with chars. And we've, generally, dealt with But %c, %c, %c, will let me print out So, kind of, a stupid way So we already have a solution But let's poke around at what's So let's make hi, ./hi. And, voila no surprise. But we, again, could with a string and just one But let's start converting to their apparent numeric equivalents Let me modify these %c's, And let me add some spaces so there Let me, now, recompile Just to guess, what should Any guesses? Yeah? AUDIENCE: The ASCII values? DAVID MALAN: The ASCII values. And it's intentional that hi, because it should be, hopefully, Which, is to say, that c knows about and can do this conversion And it seems to be doing it Notice that c1, c2 and but printf is able to tolerate If I really want it to be pedantic, known as typecasting, convert one data type to another, And we saw in week 0, are just numbers, like 72, 73, and 33. So I can use this parenthetical [LAUGHTER] three chars to So that's what I meant There we go. Strike two, today. So parenthesis, int, take whatever variable comes after this, The effect is going to be no different, then running ./hi still works the same, to ints. And we can do this all day long, ints to floats. Sometimes, it's equivalent. Other times, you're going Taking a float to an is going to throw away everything because an int has no decimal point. But, for now, I'm going to that just did implicit-type just to demonstrate that we can, indeed, All right. Let me go ahead and do This was kind of stupid. Let's just do printf, quote-unquote-- Actually, let's do this, string and then let's do a simple printf So now I've rewound to last but you'll notice that, if we whoops, what did I do here? Oh, and let me introduce the C50 library Let me go ahead and we seem to be coding in circles, here. Like, I've just done the same But there's clearly between sequences of chars and strings. And if you do it the have three different variables, c1, c2, or you can just treat them all together But it turns out that implemented by the computer What might a string actually be Where are we going with this? Let me try to look further back. Yeah, in way back? Yeah? AUDIENCE: Can a string like DAVID MALAN: Yeah, a string an array of characters. So last week we took for Technically, strings exist, as arrays of characters, some interesting possibilities for us. Because, let me see, let Let me try to print out, But if string s is but an array, as you s bracket 1, and s bracket 2. So maybe I can start poking even though we didn't can get at those individual values. So make hi, ./hi and, It's the same 72, 73, 33, but like, wrapping my mind around a string is just an array of can index into them using this So I can get at any one of and, heck, convert it to an Let me get a little curious now. What else might be in Well, let's-- I'll go back to the Here might be how we with three variables, c1, c2, c3. Of course, that map to these these binary values. But what was this Literally, when you create a string s equals quote-unquote hi, underneath the hood, so to speak. Well, as an abstraction, a string, it would seem, 3 bytes, right? I've gotten rid of the think of a string as a type, I'm just But technically, a string, we've and the array is of size 3. So technically, if the s bracket 0 will give s bracket 1, the second, But let me ask this question now, is the only thing in and the ability, like a canvas to draw or whatever on it, but is what your Mac, and PC, and Suppose that I'm running a piece and now I write down Well, where might that go in memory? Well, it might go here. B-Y-E. And then the next thing I type My memory just might get with things that you or But then how does the computer know if, is right after H-I exclamation point begins? Right? All we have are bytes, or 0s and 1s. So if you were designing implement some kind of Or figure out what the What do you think? AUDIENCE: A nul character. DAVID MALAN: OK, so the right and for those who don't AUDIENCE: It's special. DAVID MALAN: Yeah, so Let me describe it as Humans decided some what, if we want to delineate and where the next one begins, And the symbol they'll use is This is just shorthand notation 0, 0, 0, 0, 0, 0, 0, 0. And the nickname for eight is nul, N-U-L, so to speak. And we can actually see this as follows. If you look at the like you could do by doing out like we've done in code, you would but then 1 extra byte that's sort of And now I've just written The implication of this is using, not 3 bytes to store Whatever the length of the string is, that demarcates the end of the string. So we might draw it like this instead. And this character is, again, So that's all, right? If humans, at the end of the day, they just needed to how do we distinguish It's a lot easier with a lot easier with ints, it's Because, per that chart earlier, Every int is always 4 bytes. Every long is always 8 bytes. How long is a string? Well, hi is 1, 2, 3 with Bye is 1, 2, 3, 4 with David is D-A-V-I-D, five And so a string can be so you somehow need to to separate in memory So what's the implication of this? Well, let me go back to code, here. Let's actually poke around. This is a bit dangerous, but I'm going past my string here. So let me go ahead and Whoops, what did I do here? I forgot a format code. Let me add one more %i. Now let me go ahead and There it is. So you can actually see in the previously, that there's indeed And if I were to make one let's get rid of just this So let me give myself for instance, just this common Let me, then print out with %s. And let me also print out with %s, Let me recompile this program, ugh-- this is what happens All right, third mistake As I was missing. Make hi. Fourth mistake today. Make hi. Dot slash hi. OK, voila. Now we have a program that's only so that we can consider what's If s is storing hi and demarcates the end of that going to fit into the And it's wrapping around, but that's But bye, B-Y-E exclamation 1, 2, 3, 4, plus a fifth byte, as well. All right, any questions on this And we'll contextualize so that this isn't just This is going to be the source In fact for problem set 2, like and scrambling actual human messages. But some questions first. AUDIENCE: So normally if you would just make a character how many characters there are so going to be there. DAVID MALAN: A good me summarize as, if we were we would indeed have to know in advance string that you're storing, how, then, because when you CS50 wrote we obviously don't know going to be that you all are typing in. It turns out, two weeks from uses a technique known as And it's going to grow or shrink But more on that soon. Other questions? AUDIENCE: Why are we using a nul value? Isn't that wasting a byte? DAVID MALAN: Good question. Why are we using a nul value, Yes. But I claim there's really no other way from the start of another, unless we All we have, at the end of the day, Therefore, all we can do is spin to solve this problem. So we're minimally going to spend Yeah? AUDIENCE: How does our memory device the /n if we don't have DAVID MALAN: If you don't-- how does the computer know to move So /n, even though it it's actually stored as just 1 There's a mapping between And you can see that, for instance, AUDIENCE: So with that being DAVID MALAN: It would be. If I had put a /n in my code here, and here, that would actually shift need to make room for a /n So it would take two Other questions? AUDIENCE: So if hi exclamation too as 72, 73, 33, if we are to and convert them into binary how and what's 8? DAVID MALAN: And what's AUDIENCE: 8, for example. DAVID MALAN: It's context sensitive. So if, at the end of the day, all like 72, 73, 33, recall to decide, based on context, And I simplified this story in week 0 as RGB colors, and iMessage interprets them as letters, and How those programs do it is by way and float. And in fact, later this a data type via which you can represent and red value, a green So we'll see other data types as well. Yeah? AUDIENCE: It seems easy enough to just so why do we have integers Why can't we make everything DAVID MALAN: Really Why could we not just make all And some languages, some C is an older language, and memory was limited. The reality was you standardizing the size of these things. You also get performance that if you know every int is and we'll see this next week, to another in memory just by adding You can very quickly poke around. Whereas, if you had variable kind of, follow, follow, follow, Follow, follow-- you would have to So that's a topic we'll come back to. But it was generally for efficiency. And other question, yeah? AUDIENCE: Why not store the DAVID MALAN: Good question why not store the nul You could-- let's see, why You could do that. You could absolutely-- If you were to do that short answer, no. OK, now I retract that. No, because I finally thought If you store it at we'll see in just a moment how to figure out where and the problem there know if you eventually hit a because it's the number 0 in the or if it's the context of some So the fact that we've standardized-- the fact that we've standardized means that we can reliably distinguish And that's actually a to actually using this our own code that manipulates So let me do this. Let me create a new file called length. And let's use this basic idea to is after it's been stored in a variable. So let's do this. Let me include both the CS50 give myself int main(void) again Let me prompt the user for for a string like their name, here. And then let me name it more Now let me go ahead and do this. Let me iterate over every in order to figure out So initially, I'm going int length equals 0, because So we're going to start at 0. And then while the following is true-- while-- let me-- do I want to do this? Let me change this to i, this, while name bracket i does not So I typed it on the slide is N-U-L, you actually use its numeric equivalent, While name bracket i does not equal the and increment i to i plus plus. And then down here I'm going to see what we actually get, All right, so what's Let me run make length. Fortunately no errors. ./length and let me type in something And I get 3. Let me try bye, And I get 4. Let me try my own name, David, Enter. 5, and so forth. So what's actually going on here? Well, it seems that we are specifying a i initialized to 0, because we're as we go. I'm then asking the that is i in the name string, does it not equal /0? Because if it doesn't, that means it's So let's increment i. Then, let's come back around to line Now i equals 1. So does name bracket 1 not equal /0? Well, if it doesn't, and it won't based on what I typed in, we're Fast-forward to the end of the story, technically, one space name bracket i will equal /0. So I don't increment i anymore, I So what we seem to have here with some is a program that figures out the length Let's practice our abstraction maybe, a helper function here. Let me grab all of this for the sake of discussion for a moment, string length. And the length of the string and then I'll go ahead and print the length of that string. So now I'm abstracting away the length of the string. That's an opportunity for to If I want to create a I'll claim that I want to and what should I have this What should get string Yeah? AUDIENCE: Int. DAVID MALAN: An int, right? An int makes sense. Float really wouldn't measuring things that are integers. In this case, the length of something. So indeed, let's have it return an int. I can use the same going to paste what I The only thing I have to change Because now this function, that I'm going to call it So I'm going to look at s And I don't want to print it at the What's the line of code I should want to hand back the total length? Yeah? AUDIENCE: Return i. DAVID MALAN: Say again? AUDIENCE: Return i. DAVID MALAN: Return i, in this case. So I'm going return i, not print it. Because now, my main function can and print it on the next line itself. I just need a prototype, so that's I'm going to rerun make length. Hopefully I didn't screw up. I didn't. ./length, I'll type in hi, again. That works. I'll type in bye again, and so forth. So now we have a function that Well, it turns out we didn't It turns out that we can get rid of my I can definitely delete the Because it turns out, in which is a new header file today, we called, more succinctly, literally does that. This is a function that comes with C, and it does what we just So here's an example of, admittedly, a We don't have to do that. And how do what kinds Well, let me pop out of my is a CS50's incarnation of It turns out that in a lot and Linux systems, including instance that we have are publicly accessible They tend to be written very not very beginner-friendly. So we have here at of manual pages that have this give you a, sort of, cheat helpful functions in C. And notation to things that a So, for instance, let me go ahead and You'll see that there's documentation but more interestingly a whole bunch of that we haven't even seen most of, yet. But there's indeed one calculate the length of a string. And so if I go to strlen here, I'll for this function. And the way a manual whether in CS50's format is you see, typically, a files you need to use the function. So you would copy paste You see what the prototype that you know what its inputs are, Then down below you might see a is pretty straightforward. This function calculates Then you see what the and you might even see an example, like So these manual pages here, and we'll link to these in are pretty much the place to has a wheel been invented already? Is there a function that might help so that I don't have to really of those lower-level steps as I've had. Sometimes the answer is going to be But again the point of our is to reveal that even the granted, they all reduce to some At the end of the day, this is is 0s and 1s. We're just learning, and how to manipulate them ourselves. Any questions here on this? Any questions at all? Yeah. AUDIENCE: We did just see that we would have to DAVID MALAN: Good question. Is it so common that you would You do need to include its where all of those prototypes are. You don't need to worry about And in fact, moving need to worry about linking in We, the staff, have configured make to We want you to understand but we'll take care of But the onus is on you for the Other questions on these Yeah? AUDIENCE: [INAUDIBLE] exclamation mark. How does it actually define DAVID MALAN: A good question. If you were to have a string with actual what would the computer actually do? Well for this. let me Which is just a random website that's of ASCII. This is, in fact, what we had And if you look here, it's a little If a computer were to store a space, it 32, or technically, the pattern of 0s All of the US English keys that can be represented with a you express even things like Yeah? AUDIENCE: Are only strings or let's say we had a series of be accompanied by nuls? DAVID MALAN: Good question. Only strings are accompanied because every other data type is of well defined finite length. 1 byte for char, 4 bytes If we think back to last week, we did Integer overflow, because 4 bytes, heck, We also talked about Thankfully in the world of scientific there are libraries you can from this idea of a use 9 bytes for an integer that you can count really high. But they will then start to and what they're really probably doing and somehow remembering how That's how these higher-level All right, this has been a lot. Let's take one more break here. We'll do a seven-minute break here. And when we come back, we'll All right. So we just saw strlen as an comes in the string library. Let's start to take more of these So we're not relying only on the Let me switch over to VS Code. And create a file called, say string.h. to apply this lesson Let me include cs50.h, string.h as well, at the top. I'm going to do the usual And then in this program suppose, that I didn't know about maybe early on there And so there was no easy Well, at least if we know that we could use %c as a sort of, contrived problem. So let me ask myself for a and I'll ask the user for some input. And then, let me print out say, output what the user typed. Now, the simplest way to do this, of printf %s, and plug in But again, for the sake of or someone didn't implement %s, Well, in pseudo code, or in English this problem, printing out the string How might we go about solving this? Just in English, high-level? What would your pseudo code look like? Yeah? AUDIENCE: You could DAVID MALAN: OK, so And maybe, more precisely, Like, let's iterate over and print one at a time. So how can I do that? Well, for int i, get 0 is kind of the i is less than-- OK, how long do I want to iterate? Well, it's going to but that's why we have strlen now. So iterate up to the length of plus on each iteration. And then let's just print because I want everything whatever the character And then at the very that new line, just to move the so the dollar sign is All right, so let's see if I make string, Enter, so far so good, like, hi, Enter. And I see output of hi, too. Let me do it once more with Notice I very deliberately two spaces here and one space wanted these things to line up properly, But that was just a So this code is correct. Which is a claim I've made before, It is well-designed in that I'm using like, I've not reinvented or below, I didn't implement So I'm at least practicing But there's still an This one's really subtle though. And you have to think What am I doing that's Yeah, in back? AUDIENCE: [INAUDIBLE] DAVID MALAN: Yeah, this But if you think back to the and recall when I highlighted Well, the first thing Then we check the condition. How do we check the condition? We call strlen on s, like 3 if it's a H-I exclamation point and then we print out the character. Then we increment i from 0 to 1. We recheck the condition. How do I recheck the condition? I call strlen of s. Get back the same answer, 3. Compare 3 against 1. We're still good. So we print out another character. i We check the condition. What's the condition? Well, what's the string like the best? It's still 3. 2 is still less than 3. So I keep asking the same because the string is, presumably, And indeed, every time that function is going to get called. And every time, the answer 3. 3. So it's a marginal suboptimality, Don't ask multiple times questions So how could I remember the answer to How could I remember the Let me see. Yeah, back there? AUDIENCE: Store it in a variable. DAVID MALAN: So store That's been our answer most any time So how could I do this? Well, I could do something like this, Then I can just change Let me fix my spelling here. Let me fix this to be comparing Because now strlen is only And I'm reusing the value length, again, and again, and again. So that's more efficient. Turns out that 4 loops let you so we can do this a little And this is just some I could actually do something and then I could just say n But heck, while I'm being succinct So now it's just a marginal declared two variables i is set to 0. n extends But now, hereafter, all of my condition i less than n, and n is never changing. All right, so a marginal Now that I've used this use some other functions Let me write a quick program here changes to uppercase some So let me code a file Up here I'll use my new friends, So standard I/O, and string.h So And then inside of main, what is let's ask the user for a string for the before value. And then let me print So that it-- just so I can see what And then after this, let me equals 0, oh, let's so n equals the string length of So really, nothing How do I now convert characters from In other words, if I type I want my program, now, to uppercase Well how can I go about doing this? Well you might recall you might recall that So let's just consult this We've looked at this last week capital B is 66, capital lowercase a, lowercase b, And if I actually do some Right? So if I want to go from I can do 65 plus 32 will give me across the board for everything else. 66 plus 32 gets me to 98 or lowercase b. Or conversely, if you have a subtract 32 and boom, you have capital But now that we know that and we know that characters, are just binary I think we can manipulate a Let me go back to my ask the question, if the current is lowercase, let's So how am I going to do that? If the character at s bracket i, is greater than or equal to i is less than or equal to expression but it's completely s is a whole bunch of characters because that's what a string is, be a little nonsensical compared numbers to letters? But we know from week 0 lowercase a I don't even remember. AUDIENCE: 132. DAVID MALAN: What's that? AUDIENCE: 132? DAVID MALAN: 132, We know. And so that would allow us to answer lowercase? All right, so let me If it is, what do I want to print out? I don't want to print I want to print out the Because if it happens to be a gives me 65, which is just from having stared Else if the character is not I'm just going to itself by printing s bracket i. And at the very end of this, I'm to move the cursor to the next line. So again, it's a little wordy. But this loop here, which I just iterates over the string, a.k.a. array, character-by-character, This line 11 here is if that current character, is greater than or equal than or equal to little z, that we're going to go ahead and All right, and let me zoom And sorry, I misspoke 122, which There's only 26 letters. So 122 is little z. Let me go ahead now and So make uppercase, ./uppercase, and And there's the capitalized Let me do it again, with and now it's capitalized as well. Well, what could we do to improve this? Well. You know what? Let's stop reinventing wheels. Let's go to the manual pages. So let me go here and search for lowercase. And there I go. I did some auto complete is saying that, OK there's check whether a character is lowercase. Well how do I use this? Well let me check, is lower, now I see Now we see, include ctype.h. So that's the protot-- that's the header file This is the prototype for is-lower, and returns an int. Which is a little weird. I feel like is-lower should So let's scroll down to the It returns, oh this is interesting. And this is a convention in C. This if C is a lowercase letter and 0 So it returns non-zero. So like 1, negative 1, something that's and 0 if it is not a lowercase letter. So how can we use this building block? Let me go back to my code here. Let me add this file, include ctype.h. And down here, let me get rid of was kind of painful to come up with, That should actually work but why? Well is-lower, again, returns a non-zero Well, what does that mean? That means it could return 1. It could return negative 1. It could return 50 or negative 50. It's actually not Just, because. This was a common convention to any other value to represent true. And so it turns out, that if you put a value like a function that's going to be equivalent to false. It's like the answer But you can also, in of the function and its arguments, Because we could do something like it must be lowercase. Because that's the definition, it's lowercase. But a more succinct way to do that If it's is lower, then print So this would be the common is- functions to check if AUDIENCE: [INAUDIBLE] DAVID MALAN: OK, well we might be done. OK. AUDIENCE: [INAUDIBLE] DAVID MALAN: No. So it's not necessarily 1. It would be incorrect to check for You want to check for the opposite of 0. So not equal 0. Or more succinctly, like I did by Let me see what happens here. So this is great, but some of you to this problem. A moment ago when we were on for things related to lowercase, block we can employ here? Based on what's on the screen here? Yeah? AUDIENCE: To-upper. DAVID MALAN: So to-upper. There's a function that would literally so I don't have to get into the I don't have to consult that chart. Someone has solved this And let's see if I can There we go. Let me go ahead, now, and use this. So instead of doing let's use a function that someone else i. And now it's going to So if I rerun make uppercase, and then now it's working as expected. And honestly, if I read the by going back to its man page, is that it says if it's lowercase, thereof. If it's not lowercase, it's already it will just return Which means, thanks to this tighten this up significantly, there, and just print out and leave it to whoever wrote if something's uppercase or lowercase. All right, questions on Again, it all reduces to building these abstractions on top. Yeah? AUDIENCE: I'm wondering to import all packages under of having to do multiple kind of like a star [INAUDIBLE] DAVID MALAN: Yes. Unfortunately, no. There is no easy way in C That was for, historically, They want you to be explicit In other languages like we'll see later this term, you But that, actually, tends to be best execution or compilation of your code. Yeah? AUDIENCE: Does to-upper DAVID MALAN: Ah. Does to-upper accommodate special Yes. If I read the documentation we would see exactly that. It will properly hand me even if I passed it in. So if I do make uppercase here, ./uppercase, hi with an exclamation pass it through unchanged Yeah? AUDIENCE: Do we access to a but just to the screen DAVID MALAN: Really good question, too. No, we do not have access to a function with CS50's library that will just In C, that's actually In Python, it's trivial. So stay tuned for another language All right, so what does There's just a-- let's to where we began today where we arguments. Recall that we talked about rm The file you want to delete, taking command line modify the behavior of the program. How is it that maybe you and I actually take command line arguments? Well here is where I we've been typing int and just asking that you take on faith Well, by default in C, at least there's only two official You might see other formats not consistent with the This, again, was sort of a function we might write last been doing this the whole time. (Void) What that (void) means, for all and you have written thus far, that we've written take That's what the void there means. It turns out that main is the way you in fact, take command is words after the command If you want to actually not you want the human to be able to and hit Enter. And just run-- print You can use command line arguments, on your command line. So we're going to change this in a but something that's now a bit If you change that (void) in main int, argc, comma, string, argv, you are now giving yourself that take command line arguments. Argc, which stands for to be an integer that stores how many The C automatically gives that to you. String argv stands for going to be an array of all of the words So with today's building we have the ability now to let or as few words, as C is going to automatically put and it's going to tell us how many The int, as the return type here, Let's use this definition just a couple of simple programs. But in problem set 2 this to control the Let me code up a file called Let me include cs50.h. Let me go ahead and include-- oops. That is not the right name of a Let's go ahead and code up argv.c. And here we have-- include cs50.h, include let's actually say int, argc, string, No numbers in between because how many words the human's Now let's go ahead and do this. Let's write a very simple program that whoever the name is that gets typed. But not using get string, let's type their name at the prompt, just like so it's just one and No additional prompts. Let me go ahead then and do this, comma, and instead of world whatever the human typed in. So let's go ahead and do But I don't think this is quite that's going to literally print I need a placeholder, so let me So if argv is an array, but then argv bracket 0 is And so it can be plugged Let me go ahead and save my program. And compile argv, so far, so good. Let me now type in my name So no get string. I'm literally typing an extra word, OK, it's apparently a little I forgot my /n but But apparently, inside of that humans typed in including So logically, how do I print out hello, the actual name of the program? What needs to change here? Yeah? AUDIENCE: Change the index to 1. DAVID MALAN: Yeah. So presumably index to 1, if that's has typed at the prompt. So let's do make argv Huh. Hello, nul. So this is another form of nul. But this is user error, now, on my part. I didn't do exactly what I said I would. Yeah? AUDIENCE: You forgot the parameter. DAVID MALAN: Yeah, I So that's actually, hm. I should probably deal so that people aren't and printing out random But if I do say argv, David, I can get a little curious, Well we can see, make argv, All right, so just nothing is there. But it turns out, in a couple of weeks, and see if we can't crash because nothing is oh what's at location 2 We could really start to get curious. But for now, we'll do the right thing. But let's now make sure the human has So let's say this, if argc equals and one more word after that, go as you proposed, is the person's name. Else, let's go ahead and default like, well, if we don't get a name like always. So now we're programming defensively. This time the human, even if they or they give us too many names, because I now have some Because, again, argc is argument typed at the command line. So make, argv, ./argv. Let me make the same mistake as before. OK. I don't get this weird nul behavior. I get something well-defined. I could now do David. I could do David Malan, but I would need to alter my logic to after the prompt. So what's the point of this? At the moment, it's to actually give myself a way of taking Because, consider, it's this new, command-line-interface world. If you had to use get string it'd be kind of annoying, right? You type make, then you might get a Then you type in hello, or cash, or it just really slows the process. But in this if you support command line arguments, Like, scrolling up and down in You can just type commands more quickly And you don't have to keep pedantically, for more and more info. So any questions then on Which, finally, reveals why but what more we can now put in main. That's how you take Yeah? AUDIENCE: If you were to put-- if you were to use argv, and you would it still give you, like, a string? Would that still be considered string? Or would you consider [INAUDIBLE]? DAVID MALAN: Yes. If you were to type at like, not a word, but that would actually be Why? Because again, context matters. So if your program is as though its characters or strings, are, they will be interpreted If we therefore go to the chart here, then how do you distinguish numbers like chars and strings? Well, notice 65 is a, 97 is a, So the designers of ASCII, realized well wait a minute, that let you type things even though they're not we need a way in ASCII and So here are your numbers. And it's a little silly that we have But again, if you're in the you've got to come up with And notice here, here's the dot. Even if you were to represent 1.23 even the dot now is going to be So again, context here matters. All right, one final example and what it's been So I'm going to add one that I'm going to call exit.c. So an exit.c. We're going to introduce something that It turns out this is not but it's just useful to know about. Especially when automating When it comes to figuring out if It turns out that main has one An ability to signal to the user And that's by way of So I'm going modify this Suppose I want to write requires that the user So that argc has to be 2 If argc does not equal 2, I want to I want to insist that the user So I might give them an error message But now I want to quit Now how can I do that? The right way, quote-unquote, to do Now it's a little weird right, main just gets but the convention is wrong in a program you should 1 is fine as a go-to. We don't need to get into the weeds of so to speak. But if you return 1, that is a clue to device that's something went wrong. Why? Because 1 is not 0. If everything works fine, like, let's go before, quote-unquote argv bracket 1. So this is just a version of So this is the same an else here like I did earlier. I want to signal to the And so I return 0. But strictly speaking, if I don't technically need, if I don't technically need the I'm going to get to line 11 So what's going on here? The only new thing here logically, I'm returning a value from main. That's something I because main has always been defined by By default, main automatically, If you've never once use the haven't in main, it just and the system assumes But now that we're starting sophisticated with our the programmer, something went You can exit out of them by returning And this is fortuitous 0 means everything worked. Unfortunately, in programming, there are that can go wrong. And int gives you 4 that you can use, a.k.a. exit So if you've ever on your Mac that an error happened, sometimes, Maybe it's positive, It might say error code 123, or What you're generally seeing, are values from main in a program or Apple, or somewhere else they are unnecessarily showing you, If only, so that when you call you can tell them what exit what error code you encounter. All right, any questions which is the last of our new Any questions at all? Yeah? AUDIENCE: [INAUDIBLE] You know how if you want to make [INAUDIBLE] DAVID MALAN: No. The question is can you at the command line like you Which, by default, designed to keep prompting until they give you an int, or a arguments, no. You're going to get an you're going to be And it's up to you to type Good question. Yeah? AUDIENCE: [INAUDIBLE] DAVID MALAN: If you explicitly main will that is the way C simply works But now that we're starting if something goes wrong, to also start returning a value and there are no errors. So let's now get out of this for some actual problems that by way of problems set 2 and beyond. So here for instance-- So here for instance, is a to when you were a kid the the grade level in which If you're a young student, you or third-grade level in the US. Or, if you're in college reading at a university-level of text. But what does it mean or in an essay, or something to some kind of grade level? Well, here's a quote-- a One Fish, Two Fish, Red Fish, Blue Fish. What might the grade level be for Maybe, when you were a kid or if these things, what might the Any guesses? Yeah? AUDIENCE: Before grade 1. DAVID MALAN: Sorry, again? AUDIENCE: Before grade 1. DAVID MALAN: Before grade So that's for really young kids? Why is that? Well, let's consider. These are pretty simple phrases, right? One fish, two fish, red-- I mean there's not even they're just nouns and adjectives, And so that might be a When analyzing text, well if the sentences are kind of that's probably a very And so by one formulation, it might for someone quite young. How about this? Mr and Mrs. Dursley, of were proud to say that they were They were the last to be involved in anything because they just didn't And, onward. All right, what grade AUDIENCE: Third. DAVID MALAN: OK, I heard third. AUDIENCE: What? DAVID MALAN: Seventh, fifth. OK, all over the place. But grade 7, according to And whether or not we can debate exactly and maybe you're feeling ahead But here, we have a snippet of text. What makes this text assume an older a higher grade level, would you think? Yeah? AUDIENCE: [INAUDIBLE] DAVID MALAN: Yeah, it's longer, there's commas now in So there's just some kind So it turns out for the among the things you'll do is and analyze them. Considering , well, how How many sentences are in the text? How many letters are in the text? And use those according to a exactly, the grade level of some might actually be. Well what else are we going Well I've alluded to this notion This notion of scrambling that you can hide the from someone who might The earliest form of this might and you're in class, and you're passing from yourself to someone else. You don't want to necessarily or some other written, to scramble it somehow, or encrypt it. Maybe you change the As So that if the teacher snaps they can't actually written because it's encrypted. So long as your friend, knows how you manipulated it. How you added or subtracted they can decrypt it, which So formally, in the world of this is another problem to solve. Your input, though, when you have a is what's generally known as plain text. There's some algorithm that's that information, into what's is the scrambled version that intercepted and your message unless that intercept you used inside of this process. So that would be generally The ciphers typically take, If, for instance, your cipher B becomes C, C becomes D, you're essentially adding one to Now that would be, You and the recipient both have to in advance, what number you're or change all of these letters by. Because when you add 1, they have to subtract 1 to For instance, if the input, and the key is 1, the ciphertext using otherwise known as the Caesar cipher, So it's similar, but it's at And unless the teacher what algorithm are they using today, it's probably sufficiently How do you reverse the process? Well, your friend gets this So I becomes H, J becomes I, remain untouched at So let's consider one If the input to the algorithm this time is negative 1. Such that now B should become A, and C So we're going in the other direction. How might we analyze this? Well if we spread all the letters and we start subtracting one letter, T becomes S, X becomes W, A, was, D, T-- this was CS50. We'll see you next time. [APPLAUSE] [MUSIC PLAYING] DAVID J. MALAN: This is CS50, and And even as we've gotten much more and some of the C stuff is all the more cryptic looking, like, everything we've been doing So keep that in mind, seem like they're getting more It's just a process of learning lets us express this process. And of course, last week we really inputs and outputs are represented. And this thing here, a photograph This is what? AUDIENCE: RAM. DAVID J. MALAN: RAM, I heard-- Random Access Memory or just And recall that we looked at that contains all of the bytes-- all of the bits, ultimately. It's just kind of a grid, allows us to think about every as just having a number or Like, this might be byte and then, maybe way down here if you have 2 gigabytes of memory. And so as we did that, we started to to create kind of our own information, just the basics like ints But we also talked about strings. And what is a string as you now know it? How would you describe in Yeah, over there. AUDIENCE: I was gonna say-- [AUDIO OUT] DAVID J. MALAN: An array of characters. And an array, meanwhile-- How might someone else define an What would be an array? Yeah. AUDIENCE: Kind of like DAVID J. MALAN: An indexed And I think a key characteristic to does actually pertain to memory. And it's contiguous memory. Byte after byte after byte And we'll see in a couple of more interesting ways to use this same things that are sort of two directional to them. But for now, all we've talked about from left to right, top to bottom, So today, we'll consider still an array. But we won't focus so of strings or other data types. We'll actually now focus on of inputs becoming outputs, algorithms. But we have to keep in mind, even though thus far, certainly on the board have the luxury of the whole thing with a bird's eye view are. If I asked you where a like zero, odds are your eyes and boom, problem solved But the catch is, with a computer the human, can [INAUDIBLE] see It's better to think of your or more specifically an as really being a set of closed And only by opening the computer actually which is to say that the have this bird's eye view of all It has to much more maybe look here, maybe look here, and Now fortunately, we already have some Boolean expressions, and the like-- where you could imagine that very methodically goes from left more sophisticated that actually And just remember that the now is that these arrays are To be zero indexed just means that the So this is location 0, 1, 2, 3, 4, 5, 6. And notice even though there the right-most one, just because we've So in the general case, if you 0 would always be at the left, and n That's sort of a generalization of just All right, so let's revisit the problem with in week zero, which was And what does it mean Well, to find information-- and Anytime you take out your phone, you're Any time you pull up a browser, So search is kind of one of the of any device these days. So let's consider how the Googles, the are implementing something as So here might be the problem statement. We want some input to What's that input going to be? Maybe it's a bunch of closed doors to get back an answer, true or false. Is something we're You can imagine taking this one where is the thing you're looking for. But for now, let's just take Can we tell ourselves, true or of these doors or lockers in memory? But before we go there and start algorithms. Let's consider how we might comparing whether one algorithm We talked about goes without saying that any code you had better be correct. Otherwise, what's the point if it But we also talked about design. And in your own words, what do we designed at this stage than another? How do you think about Yeah, in the middle? AUDIENCE: Easier to understand DAVID J. MALAN: OK, so easier to understand. I like that. Other thoughts? Yeah. AUDIENCE: Efficiency. DAVID J. MALAN: Efficiency, and what do AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Nice. It doesn't use up too much So you can think about of these axes-- sort of but also the quality of the performance. And as our programs get bigger and those kinds of things are And in the real world, not just by yourself but with right is just going to make it easier write code, with just So let's consider how we might focus the efficiency, of an algorithm. And the way we might talk about the or how slow they are, is in That is to say, when they're And we might measure this in or just some number of because presumably fewer steps, to So how might we think Well, there's one general So computer scientists tend to describe or a piece of code, for that matter, in This is literally a And this generally means that the is on the order of such and such, is just going to be a very It's kind of a way of waving to convey the idea of just how fast without getting into took this many milliseconds or So you might recall then from week but without much context. At the time, we just use this to Recall that this red straight one page at a time. The yellow line that's still That line represented what Looking out and back. What is that second algorithm? Yeah, over there. AUDIENCE: Like, two pages at a time. DAVID J. MALAN: Two pages at a time, which potentially double back a page if maybe book. So it had a potential bug This last algorithm, though, was strategy where I sort of unnecessarily and then in half and as dramatic as that was unnecessarily, bites out of the the first time, another 250, another And so we described its there, though I didn't use that But indeed, time to solve abstractly in some unit of measure-- seconds, milliseconds, minutes, pages-- via this y-axis here. So let's now slap some numbers on this. If we had n pages in that a generic number, the we might describe as taking n steps. Second algorithm we might describe maybe give or take one if we n divided by 2. And then this thing, if you was sort of a fundamentally log base 2 of n or just So this is of a fundamentally But what's noteworthy is that even though, yes, the second I mean, literally twice as fast-- when you start to zoom out and if these first two start to look And if we keep zooming out out as n gets really large-- that is, the x-axis gets really long-- these first two algorithms start And so this is where computer Instead of saying specifically, And this one n divided by 2, a eh, each of those algorithms or on the order of n over 2. But you know what? On the order of n over 2 when n gets really large as being So yes, in practice, it's obviously But in the big picture, when n the numbers are already that these are as, the pretty much functionally equivalent. But this one still as n gets large because it's And so here, a computer that that third algorithm was on the And they don't have to because it's a smaller mathematical a constant, multiplicative factor. So in short, what are This is just a new to use when we just want to describe To make this more real, if a for loop at this point in any of your where maybe in was the height was something else that you wanted or you implemented an algorithm if you will. So this is just a way now describing with somewhat been doing in practice for a while now. So here's a list of commonly seen This is not a thorough list with an infinite number of But the common ones we'll discuss probably reduce to this list here. And if you were to study this list would get longer and longer. But for now, these are sort of the All right, two other pieces before we start to use this stuff-- so this, a big omega, is used now to describe a lower bound So to be clear, big O is is, an upper bound-- on how take, on the order of so many steps. If you want to talk, though, how few steps my algorithm take? Maybe in the so-called if we had a notation to bound is because some in these so-called best cases. So the symbology is almost the with the big omega. So to be clear, big O describes describes a lower bound. And we'll see examples And then lastly, last one here, big when you have a case where both running time is the You can then describe it in one breath instead of saying it's in big O All right, so out of context, sort but all they refer to is upper they happen to be one in the same. And we'll now introduce over time apply these to concrete problems. But first, let me pause to Any questions here? Any questions? I see pointing somewhere. Where are you pointing to? Over here-- there we go. OK, sorry-- very bright. AUDIENCE: So, um, smaller-- DAVID J. MALAN: Smaller n So yes, if you have something If you have a formula like n that take more steps So the larger the the slower your algorithm is because the AUDIENCE: So you want your DAVID J. MALAN: You want your n function, And in fact, the Holy would be this last one here either when an algorithm is on That means it literally takes constant 100 steps, but a fixed, That's the best because even even as the data set you're if something only takes a finite then it doesn't matter how big Questions as well on these notations-- This is actually very helpful. I'm seeing pointing this way? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: What is the input It is an expression of how So in fact, let me go more concrete with an actual So on stage here, we have if you will, an array of memory. And this array of seven integers, seven integers that And if we want to search we go about doing this? Well, for this, why don't Would a volunteer like to come on up? Have to be masked and on the Both of-- oh, there's someone putting Yes, OK. Come on down. And in just a moment, is going to help me find a that we have here on the screen. So come on down, and I'll get things Come on down nice to meet. And what is your name? AUDIENCE: [? Nomira. ?] DAVID J. MALAN: Minera? AUDIENCE: [? Nomira. ?] DAVID J. MALAN: [? Nomira. ?] Nice to meet. Come on over. So here we have for Nomira seven And behind each of And the goal, quite simply, as input, to return, true or false, is So suppose I care about the number 0. What would be the simplest, apply in order to find us the number 0? OK, try opening the first one. All right, and maybe just step I think you have not found 0 yet. OK, so keep the door open. Let's move on to your next choice. Second door, sure. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Oh, go ahead, second door. Let's keep it simple. Let's just move from left to And what do you see there? Oh, 6, not 0. How about the next door? All right, also not working If you want to go on to the All right, I see a 2. All right, it's not so good yet. Let's keep going. Next door. 2, 7-- no. OK, next door. No, that's a-- all Oh. All right, so I kind of set you but let me just ask you you did by following AUDIENCE: I just went one DAVID J. MALAN: You went one if you want to talk into here. So you went one by And would you say that algorithm AUDIENCE: No. DAVID J. MALAN: No? AUDIENCE: Or, yes, in the scenario. DAVID J. MALAN: OK, yes in this scenario. Why are you hesitating? What's going through your mind? AUDIENCE: Because it's not the DAVID J. MALAN: OK, good. So we see a contrast here I mean, I do think it was correct you eventually found zero. But it took some number of steps. So in fact, this would be an algorithm. It has a name, called linear search. And, [? Nomira, ?] as you a line going from left to right. Now let me ask. If you had gone from right have been fundamentally better? AUDIENCE: Yes. DAVID J. MALAN: OK, and why? AUDIENCE: Because the zero is But if it was like, the zero is in DAVID J. MALAN: Yeah, and so here is becomes a little less obvious. You would absolutely have if you would just happened or if I had pointed you But the catch is if I asked her to well, that would have backfired. And this time, it to find that number because And so in the general case, going is probably as correct as you can about the order of these numbers-- and Some of them are smaller, There doesn't seem to Linear search is about as good as you a priori about the numbers. So I have a little thank you gift Round of applause for Thank you so much. Let's try to formalize what I because indeed, no matter which I could have kind of to make sure that it But it is correct. If zero were among those doors, and indeed did. So let's now try to translate what pseudo code as from week zero. So with pseudo code, we like, or any language, syntax So here might be one formulation For each door, from left to right, return true. Else, at the very end of the program, And now you got lucky. And by the seventh door, returned true by saying, But let's consider if this an accurate translation. First of all, normally, when we've And yet down here, return Why did I not indent the return why did I not do if number is behind Why would that version of this Way in back. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: OK, I'm not sure Let me go ahead and If I had instead done don't think it's so much redundancy Let me bounce somewhere else. Yeah, in front? AUDIENCE: Um, maybe after just checking one number. DAVID J. MALAN: Yeah, it would even though I'd only had only looked at one element. And it would have been as though if she opens this up and says, nope, That would give me an incorrect at that stage in the algorithm, through any of the other doors. So just the original indentation without the [? else, ?] if I get to the bottom of this it make sense to conclude gone through all of the doors, the number I'm looking for is, So how might we consider now the We have a few different And if we consider now how let's start to translate it from to something a little lower level. We've been writing code using So let's take this higher level get a middle ground Let me propose that we think about as being a little more pedantic. For i from 0 to n minus 1, if number Otherwise, at the end of Now I'm kind of mixing but that's reasonable if the or some similar language. And notice this pattern here. This is a way of just saying in pseudo Start at 0 and then just And recall n minus 1 is not one N minus 1 is the end of started counting at 0. So this is a very common way from the left all the way Doors I'm kind of implicitly like it's a variable from last an array of integers in this case. So doors bracket i means that When i is 1, it's this. When i is 7 or, more generally n minus-- sorry, 6 or, more generally, n So same idea but a translation of it. So now let's consider what the If we have this menu of possible how efficient or inefficient let's take a look in the We don't even have to bother How do we go about analyzing Well, let's consider this. This outermost loop here for i from is going to execute how many times? How many times will that loop execute? Let me give folks this How many times is that Yeah, over there. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: n times, right? Because it's from 0 to n minus 1. And if it's a little weird to this is essentially the same And that's perhaps a intuitively n total steps. So I might just make a note to myself What about these inner steps? Well, how many steps or seconds If the number behind-- if the number you're looking well, as [? Nomira ?] did, So you open the door and boom. All right, maybe it's two steps, So this is some constant Let's just call it one for simplicity. How many steps or seconds I don't know exactly in but that feels like a single step. Just return true. So if this takes one but only if the condition like you're doing a constant Or maybe you're doing So in short, the only thing in terms of the efficiency or is what are you doing again and again the thing that's going to add up. Doing one thing or two things Not a big deal. But looping, that's going to add up over the bigger n is going to be and the which is all to say if you how many steps does this what might your instincts say? How many steps is this algorithm on the Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Say again? AUDIENCE: O n. DAVID J. MALAN: Big O of n. And indeed, that's going Why? Because you're essentially, doing n things as an upper And that's, in fact, what with [? Nomira. ?] She had before finally getting But what if she got were looking for was not but was at the beginning of the array? How might we think about that? Well, have a nomenclature for this Remember, omega notation So given this menu of possible running what might the omega notation be AUDIENCE: Omega 1. DAVID J. MALAN: Omega of 1, and why that? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Right, because if and the number she's looking she begins the algorithm, that's it. It's one step. Maybe it's two steps if you have but it's a constant number of steps. And the way we describe is just with a single number like 1. So the omega notation for linear because in the best case, she might just But in the worst case, we need to might indeed be big O of n. So again there's this way about best cases and worst cases Theta notation, just is it applicable based on the AUDIENCE: [INAUDIBLE] DAVID J. MALAN: OK, no, because you when those two bounds, to be the same for shorthand So it suffices here to talk about Well, what if we are a Let me go ahead and sort rearrange these numbers. But first, how about One other volunteer-- you have and your being on the internet. How about over here? Yes, you want to come on down? All right, come on down. And don't look at what I'm take your time and because I need a moment to And actually, if you could stay just an awkward few seconds behind these doors for you. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: I will be right with you. Actually, if-- do you want to and I'll be right back? So you want to introduce yourself? AUDIENCE: Yeah, hi, guys. I'm Rave. Yeah! DAVID J. MALAN: All right, Thank you for stalling there. AUDIENCE: Of course. DAVID J. MALAN: And I didn't catch your name. What was your name? AUDIENCE: I'm Rave. DAVID J. MALAN: I'm sorry? AUDIENCE: Rave, like a party. DAVID J. MALAN: Rave, OK. Nice to meet. Come on over. So Rave has kindly volunteered now. And I'm going to give you an AUDIENCE: OK. DAVID J. MALAN: Unbeknownst to you, I but I sorted them for you. So they're not in the same were for [? Nomira. ?] to know that the numbers are AUDIENCE: OK. DAVID J. MALAN: Given that, and given perhaps with the phone book, where might you With which locker? AUDIENCE: To find zero? DAVID J. MALAN: Let's find Let's make things interesting. AUDIENCE: OK. I'll start in the middle. DAVID J. MALAN: OK, so the middle. There's seven total. So-- AUDIENCE: OK. DAVID J. MALAN: --that would be right here. Go ahead. Open that up. And you find, sadly, the number five. So what do you know now? AUDIENCE: I know to go up. DAVID J. MALAN: OK. AUDIENCE: OK. DAVID J. MALAN: All right, and just like I did, I opened to the AUDIENCE: Yes. DAVID J. MALAN: Let's keep it similar. Yeah. AUDIENCE: All right. DAVID J. MALAN: All right, even though I know you AUDIENCE: All good, all good. DAVID J. MALAN: And now we're AUDIENCE: Over here in the middle. DAVID J. MALAN: Right, and All right, so very nicely done. A little stressful for you as well. Thank you again. So here we see by nature still being open sort of an it would seem, of this was given the assumption that on the left to large on the right, and conquer algorithm from week zero binary search. And simply by starting in OK, too small, then by going to went a little too far, then by Rave able to find in just the number six in this case that So you can see that this would Let's consider for just If I had used different numbers but would it still have You're nodding your head. Can I call on you? Like, why would it still AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, so are always in the same or, heck, they could even be in reverse the decisions that Rave was making-- would guide us to the And it would seem to take fewer steps. So if we consider now the let's take a look how we So binary search we might If the number is behind the middle then we can just return true. Else if the number is so if six is less than whatever then Rave would have Else if the number is Rave would have searched the right half. Else, if there are no doors-- and this up top just to keep things clean. If there's no doors, what should Rave if I gave her no lockers to work with? Just returned false. But this is an important because if in the process of we might have whittled down the to one door to zero we might have had no So we have to naturally have a if there were no doors. So it's not to say that maybe I don't But as she divides and if she runs out of lockers to ask those if I ran out of phone book I too might have had to So how can we now describe just to give ourselves a variable Well, I might talk about And so if I want to express the middle say doors bracket middle. I'm assuming that to figure out what the middle door And then doors, if the is less than doors bracket zero through doors middle minus 1. So again, this is a more pedantic way of search the left half, but start to now describe it in like we did with our array notation. The last scenario, of is greater than the then Rave would have wanted to so 1 over-- through doors n minus 1-- through n minus 1. So again, just a way of sort of what it is that's going on. So how might we translate Well, in the worst case, how many algorithm have taken? Given seven doors or given how many times could she go left or go or no doors left? What's the way to think about that? Yeah, in the middle? AUDIENCE: Log n. DAVID J. MALAN: Log n. So there's log n again. And even if you're not feeling wholly still, pretty much in programming and any time we talk about some algorithm in half, in half, in half, it's probably involving And log base n essentially of times you can divide n by 2 until or equivalently zero doors left. So log n. So we might say that indeed, because the door that Rave happened to be three doors away. And actually, if you do works out to be exactly that case. If we add one, that's sort of out we were able to search it What about omega notation, though? Like, in the best case, Rave She opened the door, and there it is. So how might we describe a lower bound Yeah. AUDIENCE: 1. DAVID J. MALAN: Say again? AUDIENCE: 1. DAVID J. MALAN: Omega of 1. So here too, we see that in some cases like, they're pretty equivalent. And so this is why sometimes case in the worst case who really cares if you just and your algorithm is super fast? What you probably care about How long are my users-- how long am I going to be sitting or beach ball trying to give myself Well, odds are, you're going to So indeed, moving talk about the running time of a little less so in terms of omega. But understanding the depending on the nature of the data that All right let me pause and Any questions here? Yes, thank you. AUDIENCE: So this method but it requires that the information How do you ensure that you in a particular order at scale? DAVID J. MALAN: Yeah, it's And if I can generalize it, how do at scale, which algorithm is better? I've sort of led us down that Rave's second is better because it's so much faster. It's log of n in the worst But Rave was given an advantage when already sorted. And so that sort of well, given a whole either a small data set or, heck, billions of pieces of data, from smallest to Or should you just dive right Like, how might you think about that? If you are Google, for got millions, billions of web pages, because it's always going to work Or should they invest the time we'll see how in a bit-- and then search it more efficiently? Like, how do you decide AUDIENCE: If you're sorting have to go through all of the data? DAVID J. MALAN: Yeah, if you had and we don't yet formally But obviously, as humans, we You do have to look at And so you're sort of wasting your then to go in search it. But maybe it depends a bit more. Like, that's absolutely searching for one thing in life, to sort it and then search it because But what's another scenario worry about that whereby it might Yeah. AUDIENCE: [INAUDIBLE] you can go to find out what's happening. DAVID J. MALAN: Yeah, exactly. So if your problem is a you have more than just one user website page, probably you and sort the whole thing because is going to be faster, going to [INAUDIBLE] algorithm of binary that's going to add up than doing linear search multiple times. So again, kind of and kind of depends on And this happens even I think back always to graduate to analyze some large data set. And honestly, it was actually to write pretty inefficient code because you know what? I could just go to sleep for eight hours set. I didn't have to bother writing to run it more efficiently. Why? Because I was the only user, and I And so this was kind of reasonable until I woke up eight And now I had to spend another eight But even there, you what is your most precious resource? Is it time to run the code? Is it time to write the code? Is it the amount of memory These are all resources we'll start depends on what your goals are. Any questions, then, on or each of these two Yeah. AUDIENCE: So just, when you're does the sorting step DAVID J. MALAN: When analyzing running If you want it to if you actually do it. At the moment, it did not apply. I just gave Rave the luxury of But if I really wanted to charge it took to find that number six, to sort plus the time to search. And in fact, that's Why don't we go ahead and Let's take a 10 minute break here. And when we come back, we'll So we've seen a couple of searches-- to be fair, we saw back in week zero. But let's actually translate at using this building block from define an array if we want, like an So let me switch over to VS Code here. Let me go ahead and start And in numbers.c, let me go ahead here. And how about let's include So css50.h. I'll include standardio.h that we can And now I'm going to go ahead No command line arguments today. So I'll leave that as void. And I'm going to go an array of how about seven numbers? So I'll call it int number 7. And then I can fill Like, numbers brackets 0 can be could be the number 6, and numbers And this is the same list that ago where it was 4, then 6, then 8. But you know what? There's actually another If you know in advance want an array of certain values and you you want, you can actually do this You can say, don't worry It's going to be implicit by Here, I can do 4, 6, 8, 2, So it's a somewhat new But this has the effect of giving of which are a whole bunch of integers. How many? The compiler can infer it from what's And it seems to be of And all seven elements will be respectively. So just a minor optimization what would have otherwise been Now let's go ahead and implement And you can do this in a bunch of For int i get 0, i is Then inside of my loop, I'm if the numbers at location i [? Nomira, ?] the number 0, then I'm like printf found backslash n. And then I'm going to return 0. Just because of last week's a value for main when all is well, just to signal that indeed, Otherwise, on what line do I want to and return something other than 0? Right, I don't think I want an else So on what line would you prefer I of not found and I'll return an error? Yeah, over here? [INTERPOSING VOICES] DAVID J. MALAN: Nice. So at the end of the want to give the earlier a chance to go through all But if you go through the whole at the very end, you probably just and then return just to signify that an error happened. And again, this was a Any time main is successful, the That means all as well. And if something goes wrong, like you you might return something other than or even negative numbers if you want. All right, well, let me Let me do make numbers. Hopefully no syntax errors. All good so far. dot slash numbers, enter. All right, and it's found, And just as a little check, let's not there, like the number negative 1. Let me go ahead and recompile Let me rerun the code and hopefully-- whew, OK, not found. So proof by example seems But let's make things a Right now, I'm using just Let me go ahead and introduce And maybe this time, I'll store a but actual strings of names. So how might I do this? Well, let me go back to my code here. I'm going to switch us over to And in here, I'll go I'll include standardio.h. And I'm going to go ahead and from last week, string.h, which gives Int main void because I'm not going arguments for now. And now if I want an array of strings, string names bracket 7. And then I could start Names bracket 0 could be someone could be someone like But there's this new Let me just let the compiler figure And using curly braces, I'll do Bill George and then Ginny and then Percy and All right, so now I have Let's do something similar. So for int, i get 0. i is less than 7 as before, And inside of the, loop lets this and suppose we're searching He is there, so we should Let me go ahead and say if names bracket of my if condition, I'm going to And I'm going to return 0 And I'm going to take your and, at the end of the loop, print out I have not printed found, and So I'm just going to go ahead and All right, let me go ahead and Make names this time. And it doesn't seem This is perhaps a new have seen yet in names.c line 11. So that's this line Result of comparison against a Use an explicit string I mean, that's kind of a mouthful, you're probably not going to But it does kind of draw our with the equality checking And here's where again sort of a white lie for Strings are a thing in C. Strings But recall from last there's no such thing technically because it's not and a float and a bool are that are You can't just use equation You actually have to use in this header file we talked In that header file was But there's other Let me, in fact, go ahead And if we go to string.h-- let me scroll down a bit. In string.h you can perhaps infer the place of equals equals for today. What do we want to use? Yeah. AUDIENCE: Strcmp? DAVID J. MALAN: So strcmp, S-T-R-C-M-P, And if I click on that, And indeed, if I click on strcmp, that, OK, I need to use the CS50 header Here is its prototype, that strcmp takes two are presumably going to be compared. And it returns an integer, So let's read on. The description of this function is sensitively. So uppercase or lowercase And then let's look it The return value of this function if S1 comes before S2, 0 if S1 is the if S1 comes after S2. So the reason that this function bool, true or false, is allow us to sort these things if two strings come in this order or you need three possible return values. And a bool, of course, but an int gives you like 4 billion So 0 or a positive number or a negative And the documentation goes on to explain Recall that capital A and it's those underlying numbers that a computer uses to figure or after it like in the dictionary. But for our purposes now, So I'm going to go ahead and do this. If I want to compare names I use stir compare or strcmp, names So it's a little more using equals equals, which and certain other values. But for strings, it turns out we Why? Well, last week, recall It's an array of characters. And so whereas you can use equals strcmp, as we'll to compare multiple characters for us. There's more logic there. There's a loop needed, and that's But it doesn't just work out of That would literally be comparing And we'll come back to really going on under the hood. So let me go ahead and fix one I want to check if the return because per the documentation, All right, let me go ahead Now it compiles. Dot slash names, Enter, found. And just as a sanity check, let's Searching now for Hermione after rerunning the code. And she's not, in fact, found. So here's just a similar not for integers this time the subtlety really being we need to actually do the legwork for us of All right, questions on either of these AUDIENCE: So, if I do [INAUDIBLE] DAVID J. MALAN: Ah, good question. If I had not fixed what I claimed was and we saw an example of If a function returns an integer, when you get back 0, the will be considered false. So 0 equals false always. If a function returns any positive that's going to be if it's positive or negative, whether And so if I did this, this So if I were to say this, if str compare implicitly like saying this does not but you don't want to check comparing integers here. So the reason I did 0 that it explicitly checks for the return And yeah. Follow up? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yes, you might but you can express the want to check if this is use an exclamation point, that inverts the meaning. So false becomes true, So this would be another This is arguably a worse design, though, says you should be checking or a negative value, and this and I think you can make a reasonable And I would argue instead checking for equals equals 0 instead. And if that's a little We'll come back to little syntactic Other questions on linear Is there another hand or hands? Two hands? No? OK, just holler if I missed. So let's now actually take Suppose that we want to write a a little more like a phone book that just integers but actual phone numbers. Well, we could escalate We could now have two arrays-- one And I'm going to use the phone numbers, because phone numbers might have dashes, that really looks more like a string Probably don't want to use an int lest So let me switch back to VS Code here, in a file called phonebook.c. And now let me go ahead and do the same. Let me include cs50.h. Let me include standardio.h, I'm going to again do int main void. And then inside of my program, I'm the efficient way this time. String names will be How about Carter and me? And then I'll give myself-- If I want this to be an array, I The compiler can count for me. But I do need the square brackets. Then for numbers, I'm again going to the curly braces that how about And how about my own number here-- 1-949-468-- oh pattern appearing-- 2750 will be mine. Why mine? Well, I'm just kind of lined things up. So Carter's number is and I'm claiming that he'll be I, David, will be the first-- and second in the numbers array. If you want to have a little fun or call me some time at that number. So now let's actually use Let's go ahead and actually search So let me do. For int i, get 0. There's two of us this time-- so i less And now I'm going to practice and I'm going to use str compare And I'm going to say if strcmp of names and that equals 0, then just as before, I'm going to But this time, I'm going to and not just say found or not found. Now I'm implementing a phone book, like So I'm going to say something s backslash n and then actually to correspond to the And then I'll return 0 as before. And then down here if we get and David's not there for some reason, and then return 1. So let me go ahead and compile this and it seems to have found the number. So this code I'm going It's kind of stupid because I've app that only supports two people. They're only going to be me and Carter. This would be like downloading and you can only call There's no ability to That, of course, could come later But for now for the just hardcoded two But for what it does, I It's going to find me But is it well-designed? Let's start to now consider if but are we using them, well? We started to use them last week, And what might I even mean by this program well? Any critiques or concerns be the best road for us I want to implement something like a It seems all too vulnerable For instance, if I screw up the actual such that it's now more or less than it feels like there's not a tight of data, and it's just sort of that any time I use names bracket i And that's fine. If you're the one writing not going to really screw this up. But if you start collaborating is getting much, much longer, the remember that you're sort of just like this is going to fail eventually. Someone's not going to realize that, And you're going to start out putting is to say it'd be much nicer if pieces of data, names and numbers, that you're not just trusting that and numbers, have this kind of So let's consider how A new feature today that we'll introduce In C, we have the ability to if you will-- data types ago just didn't envision were necessary because we can implement just as you could create or in C, you can create So in C, can you create that go beyond the built in ints You can make, for instance, a type in the context of more generically that might So how might we do this? Well, let me go here and propose wouldn't it be nice if we and then we could have And maybe that array is our in it, two persons in it. But somehow, those data would have both a name and a So we don't need two separate arrays. We need one array of persons, So how might we do this? Well, if we want every or in this program to we literally right out Give me a string called name. Give me a string called And then we wrap that, with this syntax, which at first It's a lot of words all of a sudden. But typedef is a new keyword today This is the C key word that type for the very first time. Struct is another related key word that a simple data type, like an int or a It actually is a structure. It's got some dimensions to it, like or even 50 things inside of it. The last word down here is the name and it weirdly goes But this is how you invent And what this code is the compiler clang will know that a a string and a number that's a string. And you don't have to worry You can just have an array So how can we go about using this? Well, let me go back to I was implementing a phone book. And why don't we enhance the by borrowing some of that new syntax? Let me go to the top of and define a type that's structure that has a name inside of And the name of this new structure Inside of my code now, let me go ahead Let me give myself an array And I'm going to use the I'm not going to use the curly braces. I'm going to more pedantic spell out at location 0, which is the because you always start counting at 0. I'm going to give that person And the dot is admittedly one The dot means go inside and access the variable called Similarly, if I'm going I can go into people bracket 0 dot as before plus 1-617-495-1000. And then I can do the people bracket-- where should I go? OK, one because again, two elements. But we started counting at zero. Bracket name equals quote unquote David. And then lastly, people bracket 1 1-949-468-2750. So now if I scroll I don't think this part I'm still, for the sake of discussion, is 0 on up to but not through 2. But I think this line How should I now refer to the What should I compare quote Let me see. On the end here? AUDIENCE: People bracket i dot name. DAVID J. MALAN: Yeah, people Why? Because people is the name of the array. Bracket i is the i-th person that we're first zero, then one, maybe Then dot is our new syntax for and accessing a variable therein And so I can compare So it's a little more verbose, but because now these people are full There's no more honor that this is going to line I'm going to fix this one last And if I can call back on change numbers bracket i to this time? AUDIENCE: [INAUDIBLE] dot number. DAVID J. MALAN: Dot number, exactly. So gone is the honor that bracket i in this array lines up Now why? There's only one array. It's an array called people. The things it stores are persons. A person has a name and a number. And so even though it's kind that this is a short program and look more complicated now laying the foundation for just can't screw up now the with numbers because every person's encapsulated inside And that's a term of art in CS. Encapsulation means to related pieces of information. And thus, we have a person that and number. And this just sets of the cool stuff we've talked What is an image? Well, recall that an image is a bunch Every one of those dots with it-- red, green, and blue. You could imagine now creating maybe you have three values, one called green, one called blue. And then you could name the And now you could store in C three some green, some blue-- and collectively And you could imagine doing something Music, you might have three the duration, the loudness of it. And you can imagine coming up with So this is a little low level. We're just using like a But we now have the way in code that we might want to implement So any questions now on struct the purposes for which are to use now in a better design but for implementing cooler and cooler Yeah. AUDIENCE: What's the [INAUDIBLE] DAVID J. MALAN: What's the difference oriented language? So slight side note, C Languages like Java and C++ and of, programmed yourself, had friends languages in those languages they have are interrelated. And objects can store not Objects can also store functions, and But it's not sort of conventional. In C, you have data In languages like Java and C+, you have together. Python is an object-oriented So we'll see this issue in a few weeks, Yeah. AUDIENCE: Could you DAVID J. MALAN: Yes. Could you use this struct to Short answer, yes. We talked a couple of times And most recently, you might have seen that was literally related That's the result of ints only or even as long as 64 bits or 8 bytes. But it's finite. But if you want to implement or some scientific or allows you to count way bigger you could imagine John coming And in fact, in some called big int, which allows you How? Well, maybe you store inside of And you somehow allow yourself based on how high you So in short, yes. We now have the ability now to do even if it's not built in for us. Other questions. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Could you define a name Sort of. It starts to get so I did it a little more Good question. Over here. AUDIENCE: [INAUDIBLE] function at the bottom of the [INAUDIBLE]. Could you do something DAVID J. MALAN: Prototypes-- have to define anything you're going to use before you actually use it. So it is deliberate that I put it Otherwise, the compiler would not know use it here on what's line 14. So it has to come first, or it has to so that you include it at Other questions over here. Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, good come back to this later in the term when and storing things in actual databases. Generally speaking, even though we or in the US, we have social security often have other punctuation in it, and so forth. You could not store any of that syntax You could only store numbers. So one motivation for I can store whatever the human wanted and so forth. Another reason for even if they look like of zip codes in the United States. Again, we'll come back to this. But long story short-- I was using Microsoft And eventually I switched to Gmail. And this is like 10 plus years ago now. And Outlook at the time lets you export Comma Separated Values. More on that in the weeks to come too. And that just means I file with all of my friends and Unfortunately, I open that same CSV just to kind of spot in there was what it was expected. And I must have instinctively hit, And Excel at least has this habit If things look like numbers, And Apple Numbers does this too. Google Spreadsheets But long story short, I then imported And now 10 plus years later, I'm still members whose zip codes are in which is missing the 0 because And that's because I treat what looks like a number and now leading zeros become a mean nothing, but in the sending envelopes and such. All right, other final questions here. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, so could I have array to solve the problem Yes, but one, I would argue as I get lots of names and numbers. And two, that too is also kind It would be all too easy to omit some dimensional array. So I would argue it too is not More on that down the road. Two dimensional arrays just means All right, so now that to store different types of data having names and take a step back and solve one of the original problems by given in advance and considering, costly, how time consuming is the scales in favor of sorting, not sorting and only searching. It'll give us a sense of just sorting something actually is. Well, what's the It's the same thing as week zero. We've got input to sort. We want it to be output as sorted. So for instance, if we're we want the sorted output as if we've got numbers like these-- 63852741, which are just we want to get back out 12345678. So we just want those So again, inside of going to be one or more algorithms So how might we go about doing this? Well, just to vary things a bit for a bit more audience participation. But this time, we need All of you have to be comfortable OK, so this is actually quite How about 1, 2, 3, 4, 5, 6, 7-- oh, OK, and someone volunteering Come on down. Come on down. And if you could, I'm If you all could join Valerie, to give you a prop to use here, and try to find some numbers at hand. In just a moment, each of our volunteers And that integer is initially And I claim that using an algorithm, we can probably sort these folks in So they're in wardrobe right now just with a Jersey number on it, which will Give us just a moment to finish They're being handed And let me ask the As we have these numbers up here on the They're just in random order. And let me ask the audience. How would you go about sorting How would you go about sorting these? Yeah, what are your thoughts? AUDIENCE: [INAUDIBLE] the number DAVID J. MALAN: OK. AUDIENCE: The following number is DAVID J. MALAN: OK. AUDIENCE: If not, then [INAUDIBLE]. DAVID J. MALAN: OK, so just with one of the numbers on the end. You would look to the number to depending on which end you start at. And if it's out of order, you And that seems reasonable. There's a whole bunch because things are pretty out of order. But probably, if you start to you can achieve the end result of Other instincts, if you were you might go about sorting them? How might you? Yeah, in the back. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: OK, I like that. So to recap there, find the smallest if I heard you correctly. And then presumably, you could do And that would seem to give you And if you all are attired here-- do you want to come We had some [? felt ?] volunteers too. Come on over. So if you all would like facing the audience in whoever is number zero and whoever is number five Feel free to distance as much as you'd if you could. OK, all right. And make a little more room. So seven-- let's see. 5, 2, 7, 4-- AUDIENCE: [INAUDIBLE] DAVID J. MALAN: 4, hopefully 1. Yeah, keep them to the side. OK, 1, 6, and there we go-- 3. Come on over, three. I was looking for you. All right, so here, we have eight integers if you will. And do you want to each say AUDIENCE: Hello, I'm Quinn. Go [INAUDIBLE]. AUDIENCE: Hi, everyone. I'm [INAUDIBLE]. AUDIENCE: Hey, I'm Mitchell. AUDIENCE: Hi, I'm Brett. And also, go [INAUDIBLE]. AUDIENCE: I'm Hannah. Go [INAUDIBLE]. AUDIENCE: Hi, I'm Matthew. Go [INAUDIBLE] AUDIENCE: Hi, I'm Miriam. Go Winthrop. AUDIENCE: Hi, I'm DAVID J. MALAN: Wonderful. Well, welcome all to the stage, perhaps organically, how you So we currently have the numbers Could you go ahead and just AUDIENCE: Thank you. DAVID J. MALAN: OK, so what did they just do? OK, yes. First of all, yes, very well done. How would you describe Well, let's do this. Could you go back into 52741630? And could you do exactly Sort yourselves. All right, what did-- OK, yes. Well done again. All right, so admittedly, there's kind except number four, are doing something And that's not really how Just like a computer can only look at at a time, so can a computer only move a locker, checking what's So let's try this more methodically If you all could randomize let's take the second of I'm going to look at these numbers. And even though I as the human and I just kind of have the we got to be more methodical got to translate this to So let me see. I'm going to search for, as you And I'm going to start I could do it right to left, but left All right, 5 at this moment is So I'm going to remember that Now I'm going to take one more step-- 2. OK, 2 I'm going to compare to the I'm going to forget about 5 and only elements. 7, nope-- I'm going to ignore that I have in mind. 4, 1-- OK, I'm going to because that's indeed smaller. Now obviously, we the humans Maybe it's the end. I have to check all values to see because 6 is not, 3 is not, but 0 is. And what's your name again? AUDIENCE: Celeste. DAVID J. MALAN: Celeste. Where should Celeste or number 0 go All right, I'm seeing a lot of this. So at the beginning of the array, let's have you pop out in front. And could you all shift Is this a good idea to have all move everything in the array and number 0 over there? No, probably not. That felt like a lot of work. And even though it happened pretty to happen just to move her in place. So what would be marginally a little more efficient, perhaps? What's that? AUDIENCE: Swapping. DAVID J. MALAN: Swapping. What do you mean by swap? AUDIENCE: Replacing swaps. DAVID J. MALAN: OK, replace two values. So if you want to go back to where he's not in the right place. He's got to move eventually. So you know what? If that's where Celeste belongs, So if you want to go ahead and Notice what's just happened. The problem I'm trying to Instead of being size Now granted, I moved 5 to But if these numbers it doesn't really matter where 5 goes So I think we've improved. And now if I go back, my loop I can ignore Celeste and make this because I know she's in the right place. 2 seems to be the smallest. I'll remember that. Not 7, not 4-- 1 seems to be the smallest. Now I know as a human this But why, intuitively, should I can't sort of optimize as a let's get you into the right place. I still want to check the whole array. Why? Yeah. AUDIENCE: Perhaps there's another 1. DAVID J. MALAN: Maybe there's could be another problem altogether. Other thoughts? Yeah. AUDIENCE: Could be another 0 DAVID J. MALAN: There could but I did go through And I kind of know there isn't. Your thoughts? AUDIENCE: You don't know that So maybe there's a [INAUDIBLE] You you're working with. DAVID J. MALAN: Yeah, I don't And honestly, I only stipulated earlier I could use two and remember the I could use three variables, four. But then I'm going to start to use So if I've stipulated that I only have I don't know anything because the only thing I'm is number 1 is the So I'm going to keep going. 6? Nope. 3? Nope. 5? Nope. OK, I know that number AUDIENCE: Hannah. DAVID J. MALAN: --Hannah is I could have everyone move 2? You know, even though you're I'm just going to keep it So granted, I've made the But on average, I could get into the right place. Now let me just accelerate this. I can now ignore Hannah and Celeste, So it's getting smaller. 7 is the smallest. Nope, now 4 is-- 2 is the smallest. Still 2, still 2, still 2. So let's go ahead and swap 2 and 7. And now I'll just kind of 4, you're about to have to do something. So we now have 4, 7, 6 3, 5. OK, 3-- could you swap with 4? All right, now we have 7, 6, 4, 5. OK, 4, could you swap with 7? Now we have 6, 7, 5. 5, could you swap with 6? And now we have 7, 6. 6, would you swap at 7? And now perhaps round of applause. They've sorted themselves. OK, hang on there one minute. So we'll do this one other approach. And my God, that felt so much but that's, one, because I was But two, we were doing one thing at a had the luxury of moving brains, if you will-- were all And computers like that exist. If you have a computer with that's like having a can do multiple things at once. But software typically, at least can only do one thing at a time. So in a bit, we'll add But for now, let's take If you all could reorder 52741630-- let's take was recommended by just fixing small So we're back in the original order. 5 and 2 are clearly out of order. So you know what? Let's just bite this problem off now. 5 and 2, could you swap? Now let me take a next step. 5 and 7, I think you're OK. There's a gap, yes, but that 7 and 4-- problem. Let's have you swap. OK, 7 and 1, let's have you swap. 7 and 6, let's have you swap. 7 and 3, you swap. 7 and 0, you swap. Now let me pause for just a moment. Still not sorted. So I'm clearly not done. But have I improved the problem? Right, I can't see-- like before because 0 is obviously not here. So unless they're still way back there, to 7 to 6 just yet. But have I made any improvements? AUDIENCE: Yes. DAVID J. MALAN: Yes. In what sense is this improved? What's a concrete thing you Yeah. AUDIENCE: Sorted the highest number. DAVID J. MALAN: I've sorted the And conversely, if you prefer, Celeste Now worst case, Celeste is going to So I might need to do this to move her all the way over. But that might work out OK. Let me see. 2 and 5, you're good. 5 and 4, swap you. 5 and 1, let's swap you. 5 and 6, you're good. 6 and 3, let's swap you. 6 and 0, let's swap you. 6 and 7, you're good. And I think now-- notice that the high are sort of bubbling up, if you 2 and 4, you're good. 4 and 1, let's swap. 4 and 5, good. 5 and 3, swap. 5 and 0, swap. 5, 6, 7, of course, are good. So now you can sort of see And let's just do this part now faster. 2 and 1, 2 and 4. OK, 4 and 3, 4 and 0. All right, now 1 and 2, So we do have some optimization there. We don't need to keep going 1 and 2, you're good. 2 and 0, all right, done. 1 and 0-- and big round OK, so thank you all. We need the puppets back, Thank you for volunteering here. Feel free to make your And let's see if, here, we can't now formalize a little I claim that the first algorithm is what's called selection sort. And as the name implied, we selected and again, working our putting Celeste into the right place, So selection sort, as can be described, for instance, 4i from 0 to n minus 1. And again, why this? This is just how talk about arrays. The left end is 0, the right end n happened to be eight people. So that's 0 through 7. So for i from 0 to n I found the smallest number between n minus 1. It's a little cryptic at is just a very pseudo find the smallest element because if i starts at 0 and n minus 8, 8 people, so 8 minus says find the smallest number and numbers bracket 7, if you will. Then what do I do? Swap the smallest number So that's how we got Celeste from We just swapped those two values. What then happens next i, of course, goes from 0 to 1. And that's the technical find the smallest element among ignoring Celeste this time because she So the problem went And if we repeat, size 6, it's all done at the very end. So this is just one way of we did a little more organically volunteered out in the audience. So if we consider, then, the maybe abstracting it away where the left most again is always or equivalently, the second to last is n minus 3 where n might how do we think about or quantify Big O of what? I mean, that was a lot It's probably more than n, right, again and again. It was like n plus n Any instincts here? We got like the whole Let me propose we think about it this So the first time, I had to n was 8 in this case, but generically, in order to decide who was the smallest. And sure enough, Celeste She happened to be all But I only knew that once I looked So that took me n steps first. But once the list was swapped my problem with size n minus 1, to look through. So that's n minus 1 steps. Then after that, it's n minus 2 plus dot until I had one final step. And it's obvious that I only So we might wave our hands at and just say dot dot dot Now what does this actually equal? Well, this is where you your high school math has a little cheat sheet at the end That happens to work n times n plus 1 all divided by 2. That's just what that recurrence, So if you take on faith that just now multiply this That's n squared plus n divided by 2 or And here's where we're starting Like, honestly, as n gets really or a billion web pages in Google search is going to matter the if n is a really big number? Is n squared divided by or is n divided by 2 AUDIENCE: n squared. DAVID J. MALAN: Yeah, n squared. I mean, no matter what n the bigger raising it to So you know what? Let's just wave our hands at this as n gets really large, the dominant And you know what? Even the divided 2, as I claimed earlier the two straight lines if you looked the same when n is large enough, squared. So that is to say a computer scientist on the order of n squared steps. That's an oversimplification. If we really added it up, it's squared divided by 2 plus n over 2. But again, if we want to just be able performance, I think it's going to order term to get a sense of what the or what it even looks like graphically. All right, so with that said, as being in big O-- sorry, selection sort as But what if we consider now the to talk about a lower bound? In the best case, how many Well, here, we need some context. Like, what does it mean to be when it comes to sorting? Like, what could you imagine meaning trying to sort a bunch of numbers? I got the whole crew here again. Yeah. AUDIENCE: They would already be sorted. DAVID J. MALAN: All right, they're I can't really imagine a better scenario but they're already sorted for me. But does this algorithm Even if all of our humans I'm pretty sure I would have And yes, Celeste happens to be here. But I only know she needs to be here And then I would have realized, I can leave Celeste be. But then what would I have done? I would have ignored her position I would have done the same thing now So every time I walk through, But I am doing those don't know until I do the work that So this would seem to imply that scenario, even, a lower bound on the AUDIENCE: [INAUDIBLE] DAVID J. MALAN: A little louder? AUDIENCE: N squared. DAVID J. MALAN: It's still in fact, because the code I'm giving from any of that scenario because to do this again and again. So in this case, yes, I would claim that is also big O of n squared. So those are the kinds It seems like the upper bound sort are indeed n squared. And so we can also describe as being in theta of n squared. That's the first algorithm we've which is to say that it's kind of slow. I mean, maybe other but this isn't the best starting point. Can we do better? Well, there's a reason that I guided us Even though you verbally proposed this second algorithm we did is And I deliberately used saying the big values are to kind of capture the fact that, differently. But let's consider if So here, we have pseudo You could write this But let's consider what We repeated the following We initialized at least, even though a variable like i from 0 And then I asked this question. If numbers bracket i and numbers then swap them. So again, I just did it more but this would be a way, to describe what's going on. But notice that I'm doing something I'm iterating from if Why? Well, if I'm comparing two I'd still want to start at 0. But I don't want to go because then, I'd be going past would be bad. I want to make sure that my stops at n minus 2 so that when I'm looking at the last two and then pass the boundary. That's actually a common that we'll undoubtedly beyond the boundaries of your array. So this pseudo code, then, allows me to and swap them if they're out of order. Why do I repeat the whole Like, why does it not suffice Think what happened with Celeste. Why do I repeat this whole Yeah, in the back? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Indeed, and I think think back to Celeste again. And I'm sorry to keep calling Each time through bubble And so in total, if there's n she needs to move n minus 1 steps to get And so this inner loop, if you that just fixes some of the problems. But it doesn't fix all of the problems and again and again. And so how might we quantify the Well, one way to see it is to just The outer loop repeats n It literally says that. The inner loop, the for loop, Why? Because it's going from 0 to n minus 2. And if that's hard to think about, if you just add 1 to So that means you're doing n So I literally multiply how is running by how many times the sort of FOIL method n minus 1 squared. And I could multiply Well, let's consider this just If I have n minus 1 on the let's go ahead and FOIL this. So n squared minus n like terms-- n squared minus 2n plus 1. And now which of these terms is clearly The-- AUDIENCE: N squared. DAVID J. MALAN: --the n squared. So yes, even though because it's subtracting off plus 1 is not that big a thing, n gets really large, like certainly, that bubble sort 2 It's not the same exactly But as n gets big, going to be able to notice And so it too might be said to And if we consider now the lower here's where things get What might you claim is the running And the best case, I claim, is when Is our pseudo code going AUDIENCE: N DAVID J. MALAN: OK, n. Why do you propose n? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yes, and that's the key word. To summarize, in bubble sort, I do have don't look at all n elements, just guessing if it's sorted or not. Like, I obviously at every element to decide yay And my original pseudo code, It's just going to blindly go back and and that's going to add up. But what if I add a that you might have glimpsed where if I compare two people and I don't swap them, and I go all the every pair of adjacent it would be kind of not to do that same process again I'm not going to make I'm going to do nothing So at that point, it would be stupid, and back and forth. So if I modify our pseudo code with I bet we can speed this up. Inside of that same pseudo code, what Like quit, prematurely before One of the loops has gone But if I do a loop from have made no swaps, which you one other variable that's plus plusing swaps-- if I've made no swaps I'm not going to make any swaps So let's just quit at that point. And that is to say in the when the list is already sorted, might indeed be omega of n so as to short circuit looping to do it only as Let me pause to see if Yeah. AUDIENCE: [INAUDIBLE] to optimize the DAVID J. MALAN: Good question. If the running time of selection sort of n squared but selection sort is in in omega of n, which sounds better-- I think if I may, should we Yes if we think that we from a lot of good case However, the goal at going to be to do even So hold that question Yeah. AUDIENCE: [INAUDIBLE] n minus 1? DAVID J. MALAN: No. So yes, good question. So I say omega of n, but is it Maybe, but again, we're And that's an advantage because we're Just like I plotted with the I just want to get a sense of so that when n gets really is going to matter the most? At the end of the day, it's to use selection sort don't have that much data because My God, our computers 2 gigahertz, 1 billion things per But if we have large data sets, and as you might in the real world, then you're going to want And that's where we're going today. All right, so let's actually see In a moment, I'm going to open up what is a little a sense of how these things actually than our humans are able So here is another visualization of a Short bars mean small numbers, So instead of having the we just have bars that are small or tall Let me go ahead, and I to operate somewhat quickly. Let's go ahead and do selections And you'll see some pink bars flying by. And that's like me walking to select the next smallest number. And so what you'll see happening on is Celeste, if you will, and are appearing on the left while problems to the right. So again, we no longer have to So that's why the problem is getting over time. But you can notice now we're retracing our steps. This is why things to be frowned upon if avoidable because and again. When I was walking through, I again and again. And that adds up. So let's see if bubble sort looks Let me re-randomize the thing, and let And as you might infer, there's not all of which we'll look at. But here's bubble sort. Same pink coloration, but it's It's two pink bars going through the adjacent numbers. And you'll see that the largest to the right, but the smaller is only slowly making its way over. Here's a comparable. Here's the number one. And it's going to take a while And here too, notice how are becoming pink, how many times the its steps. Why? Because it's only solving one And each time we do that, we're stepping And now granted, I could speed this but my God, this is only, what, like This is slow. Like, this is what n squared And now I'm just trying to until we get to the finish line here. Like, this would be annoying if and this is why I sort of secretly because it would have taken to get that in place for her. So those two algorithms are n squared. Can we do, in fact, better? Well, to save the best algorithm for break here. And when we come back, we'll All right. So the challenge at hand is to and better than bubble sort better but fundamentally better. Just like in week zero, that third was sort of fundamentally So can we do better than something Well, I bet we can if the problem a little differently. The sorts we've done as comparison sorts-- the reality that we were doing a huge And you kind of saw that in the vertical was being compared again and again. But there's this programming a mathematical technique that we've actually seen before. And this is a building we can bring to bear on the problem sort of fundamentally differently. But first, let's look at it A little bit ago, I proposed this pseudo And notice that what was even though I didn't call it out at the Like, I claim this is and yet it seems a little unfair inside of the algorithm for search. It's like an English sort of Normally, you shouldn't But there's something here because even though this and I'm using my own algorithm to the key feature here happen in English when you is that when I search the left I'm doing the same thing. I'm using the same algorithm. But the problem is, by So this isn't going to be a This approach, by using is going to whittle the problem down one door or no doors remains. And so recursion is a whereby a function calls itself. And we haven't seen this yet in C, and But in C, you can have And the form that using the function's name inside of We've actually seen an opportunity Think back to week zero. Here's that same pseudo code in an actual, physical phone book. And notice these yellow lines here. We described those in week zero And this is a very procedural approach, are very mechanically, me to go back to line three to But really, what that's doing in the book is it's just telling me to search I'm doing it more mechanically what line number to go back to. But that's equivalent to just telling search the right half, the have and the right half are It would be a bug if I just said search because obviously, you But if you search the problem gets smaller and smaller. So let's reformulate week zero's phone but recursive whereby in AKA binary search, formerly going to literally use also Notice among the benefits kind of tightens the code up, even though that's kind But it's an elegant a problem by just having to solve a smaller puzzle at hand. So let's now consider a version than the one you've dabbled this half pyramid from Mario. And let's throw away the parts and just consider how we might, up this left aligned pyramid, if you will. Let me go over here, and let me create And in this file, I'm going to And I'm going to include stdio.h. And the goal at hand is to implement in this and exactly this pyramid. So no get string or any of that-- and print exactly this So how might I do this? Well, let me go ahead, and in main, well, we'll go ahead and generalize it. Let's go ahead and ask We're using getint as before. And I'll store that in a And then let me go ahead draw passing in that height. So for the moment, let me has implemented a draw function. And this, then, is the All right, unfortunately, C does So let me go ahead and invent one. It doesn't need to return a value. It just needs to print So I'm going to define a function I'll call it n for number, but And inside of this. I'm going to go ahead and print out a to bottom. The salient features here are that this of height four. And now in height four, the The second row has two. The third has three. The fourth has four. That's a nice pattern that I So how might I do this? Well, how about 4 int i gets-- let me do it the old school way-- 1. And then i is less than or equal to n. And then i plus plus-- so I'm going from 1 to 4 just And then inside of this Well, let me keep it Let me just change this to to n even though it might not be I want one brick. On row 1, I want two On row 3, I want four. So it's kind of offset now. But I'm being more conventional. So on each row, how many Well, I think I want to do this. For int j, for instance, common to let's start j at 0 and do this and then do j plus plus. So why i plus 1? Well, again, when I equals 0, that's When i equals 1, that's the second row. I want two bricks. And dot dot dot, when i So again, I have to add 1 to i that I want to print to the screen. So inside of this nested for loop, with no new line. I'm going to save the new All right, the last is copy and paste the prototype So that I can call this. And again, this is of Wouldn't necessarily come to might to mine after all this practice, of what you yourself did a pyramid that hopefully in a So let me go back to my code. Let me run make iteration, and I'll type in 4, and voila. Seems to be correct, and let's assume as well. Oh, thank you. So this is indeed an example again and again. And it's very procedural. Like, I literally have a function But I can think about implementing kind of clever. And it's not strictly because this problem honestly to solve once you have Certainly the first time around, But now that you kind of with one brick, row two with two with these for loops. But how else could we Well, this physical structure, is a recursive structure, a structure Now what do I mean by that? Well, if I were to ask you the question, look like, you would point, But you could also kind of it's actually a pyramid of And here's that cyclical Kind of obnoxious to do typically because you're defining one What's a pyramid of height 4? Well, it's a pyramid of But we can kind of leverage Well, what's a pyramid of height 3? Well, it's a pyramid of Fine, what's a pyramid of height 2? Well, it's a pyramid of And then hopefully, this process the pyramid is getting So you're not going to have this infinitely many times because when the end of the pyramid, fine. What is a pyramid of height 1? Well, it's a pyramid of no And at that point, things no pun intended. Things just would otherwise go negative. And so you can just kind of stop. The base case is when So there's a way to draw a line in the But this idea of defining a physical or code in terms of itself actually lets Let me go back to my code here. Let me go ahead and create one that leverages this idea of this Let me include cs50.h. Let me go ahead and include And then inside of main, I'm going height equals get int, And then I'm going to go ahead So that's going to stay the same. I even am going to make my prototype And now I'm going to with that same prototype, of course. But the code now is going What am I going to do here? Well, first of all, if you ask I'm going to be kind of a wise draw a pyramid of n minus 1-- done. All right, but there's still What happens after I print or according to our structural What remains after drawing a pyramid AUDIENCE: [INAUDIBLE] We need one more row of hashes. OK, so I can do that, right? I'm OK with the single loops. There's no nesting necessary here. I'm just going to do this-- for which is the height that's And then inside of this going to print out a single hash. And then down here, I'm going to So that's good, right? I might not be as comfortable This is nice and simple. What does this loop do It literally prints n hashes by but not through n. So that's sort of week one style syntax. But this is kind of trippy boiled down the implementation of drawing the thing above it. But this is problematic as my drawer function, notice, is always in some sense. But ideally, when do I want When do I want to not call draw anymore? Yeah, when n is 1, right? When I get to the top of or heck, when the pyramids I can pick any line in sort of at the end of the process. Then I don't want to call draw anymore. So maybe what I should do is this. If n equals equals 0, there's So I'm just going to go Otherwise, I'm going n minus 1 rows and then one more row. And I could express this differently. I could do something like this, I could say something like if n then go ahead and draw the row. But I like it this way first. For now, I'm going to just to ask a simple question and if n equals 0. And heck, just to be the user types in a just check if n is a negative number, Don't do anything. I'm not returning a value because It doesn't need or have a return value. So just saying return suffices. But if n equals 1 or 2 it is reasonable to draw a pyramid of of 4, 3, and then go ahead So this is an example now of code Draw is calling draw. But this so-called base case that we're not going to do this forever. Otherwise, we literally would and something bad is All right, let me go ahead and OK, no syntax errors-- dot slash and voila. If only because some of you have run let me get rid of the base case Make recursion. Oh, and actually, now So the compiler is smart that all paths through this AKA, It's going to loop forever. So let me do the first thing. Suppose I only check for n equaling 0. Let me go ahead and recompile And now let me just be When I run this program, still What if I do like negative 100? Have any of you experienced a OK, so no shame in this. Like, this means I have somehow And in short, I actually called accidentally, it would seem bailed on me because I eventually that I shouldn't have. That'll make even more sense next week. But for now, it's simply a bug. And I can avoid that probably not your own pset context, allow for negative numbers at all. So with this building can we now do in terms of Well, it turns out there's a And there's bunches of others too. But merge sort is a nice one to discuss is going to do better than sort that is better than n squared. But the catch is it's a In fact, I'll act it out myself with rather than humans because recursion to wrap your mind around, But I'll see if we can't enough such that this comes to light. So here's the pseudo code I propose In the spirit of recursion, literally calls itself by using So how does merge sort work? It sort of obnoxiously says, well, if go sort the left half, then and then merge the two together. Now obnoxious in what sense? Well, if I just asked you to sort well, go sort that that thing, what was the point But the key is that sorting a smaller piece of the problem. So eventually, we'll be into something that doesn't go on there's a base case too. There's a scenario where we if there's only one Quit then because you're all done. So there has to be this base to make sure that you don't You've got to stop at some point. So let's focus on the What does it mean to merge two just because this is a key ingredient-- so are two halves of a list of size 8. We have the numbers 2-- and I'll call 2457 and 0136. Notice that the left half at the and the right half, 0136, So that's a good thing because sorted the left half already. I've sorted the right half I just need to merge these two halves. What does it mean to sort two halves? Well, for the sake of going to turn over most of the numbers of these halves. There's two halves here, left and right. At the moment, I'm the leftmost element of each half-- and the one on the left here. How do I merge these two lists together? Well, if I look at 2 and I look at 0, The smaller one. So I'm going to grab to put it into its own place And now I'm going to consider, the beginning of this list and So I'm now comparing 2 and 1. Which one's smaller? I'm going to go ahead and grab the 1. Now I'm going to compare the and the new beginning of Of course, it's 2. Now I'm going to compare the and the beginning of It's of course 3. Now I'm going to compare the 4 it turns out, of the second list-- 4, of course. Now I'm going to compare the and the beginning of the right list-- 5, of course. I'm realizing this is not going too much distance between the numbers. But that has nothing to 7 is the beginning of the left list. 6 is the beginning of the right list. It's, of course, 6. And at the risk of if I now make room for this sorted the whole thing by having merged So in short-- thank you. I'm a little worried that's but we now have merged two half lists. We haven't done the guts of the and sort the right half. But I claim that that merge two sorted halves. You keep looking at the and you just kind of on which one belongs So if you agree that to merge two lists together, on what it means to and sort the right half of And for this, I'm going in this seemingly random order. And I just have a little cheat And I'm going to start at And hopefully, these will But I'm just deliberately putting And then we have 1630-- 1630. Hopefully this won't fall over. Here is now an array of And I want to sort this. I could use selection sort and just I could use bubble sort and just But those are going to be on My hope is to do So let's see if we can do better. All right, so let me I'll keep it on the screen. How do I implement merge sort? Well, if there's only There's obviously not. There's eight numbers, I'm going to go ahead and All right, here's the left half-- 5274. Do I sort an array of size 4? Well, here's where the How do you sort a list of size 4? Well, there's the pseudo I sort the left half So here we go. I have a list of size 4. How do I sort it? I sort the left half. All right, now I have a list of size 2. How do I sort this? Well, sort the left half. So here we go. Here's a list of size 1. How do I sort this? I think it's done, right? That's quit, right? If only one number, I'm done. The 5 is sorted. All right, what was the next step? You have to now rewind in time. I just sorted the left half of What do I now sort? The right half, which is 2. This is one element. So I'm done. So now at this point in the story, the 5 assorted, and the 2 is sorted. But what's the third and final step Merge the two together. So here's the left, How do I merge these together? I compare the lists, I only have the [? 5 ?] So now we see some visible progress. But again, let's rewind. How did we get here? We started to sort the left half of the right half. And now where are we? We've just sorted the left So what comes after sorting Right half. All right, here's the sort Here's a list of size 2. Let's sort the left half. Done. Let's sort the right half. Done. What's the third step? Merge them together. So that's the 4, and that's the 7. What have I now done? In total, I've now sorted the So what happens next? Wait a minute, wait a minute. I have not done that. What have I done? I have sorted the left and I've sorted the right What do I now need to do lastly? Merge those two lists together. So again, I put my of this list, the And if you want, I'll do the same to be clear what I'm comparing. 2 and 4-- the 2 obviously comes first. What comes next? Well, the 4 comes next. What comes next? The 5 comes next and then Notice that the 2457 are now sorted. So the original left half is sorted. And I'll do the rest a little this feels like it takes forever. But I bet we're on to something here. What step remains next? I've just sorted the left Sort the right half of the original. How do I sort this? I sort the left half of the right half. How do I sort this? I sort the left half of the left half. Done. I sort the right half of the left half. Done. Now I merge the two together. The 1 comes first, the 6 comes next. Now I sort the right What do I do? Sort the left half. Done. Sort the right half. Done. What do I do? Merge them together. So that's the third step of that phase. Now where are we in the stor-- oh We have sorted the left and the right half of the right half. What comes next? Merge. So I'm going to compare, down just to make clear the beginning of both sublists. What comes first? Of course, the 0. What comes next? What comes next? The 1. What comes next? The 3. And then lastly comes the 6. All right, where are we in the story? We've now sorted the and the right half of the original. What step remains? Merge. All right, so I'm going And this is actually because I deliberately demoed those and a 0. This comes out first. What comes next? 2 and 1. The 1 comes out next. What comes next? The 2 comes next. What comes next? The 3 comes next. What comes next? The 4. What comes after that? The 5. What comes after that? The 6. And lastly-- this is when the 7 over there is actually in place. OK. OK, so admittedly, a and honestly, it gets a so easy to forget about because we're constantly and then backing back out of it. But in code, we could and, it turns out, pretty I was doing, even though it's I was touching these elements a I wasn't going back and forth, back again and again. I was deliberately only ever merging So every time we merge, even my fingers were only touching And how many times did we divide, Well, we started with and there were eight of them. And then we moved them So the height of this visualization, If I started with 8, turns this is log n height But for now, just trust And how wide is the shelf? Well, it's of width n because they were on the shelf. So technically, I was kind of is the first time I've needed shelves. With the human examples, we just had the of them. Here, I was sort of using In fact, I was using like even though that was just Merge sort actually requires that you to move the elements into when But if I really wanted and if I honestly, I could have just gone back That would have been sufficient. So merge sort uses more memory but the advantage of that the total running time, if you can The big O notation for is actually going to be n times log n. And even if you're a little we saw in week zero and again That's a good thing. Binary search was log n. That's faster than linear So n times log n is, of course, So it's sort of lower on this little which is to suggest that it's running And in fact, if we consider turns out it's not quite as good where you can just sort of abort I've done no work. Merge sort, you actually have to do that So it's actually in omega and So again, a trade off happen to have a data set honestly, you might want But in the general case, n log n as sounding Well, what does it Give me a moment to just change And we'll see with this example depicted with now these vertical bars. So same algorithm, but instead here is a random array And you can see it being And you see sort of remnants Actually, that was unfair. Let me zoom out here. Let me zoom out so you can Let me go ahead and randomize There we go. Now you can see the second array and And even though this one looks way it does seem to be moving faster. And it seems to be merging halves So let's actually see, in conclusion, and consider that moving forward the goal is, again, not just to be And one measure of design is So here we have, in final, a selection sort, bubble from top to bottom. And let's see what these algorithms Oh, if we can dim the selection's on top, bubble on [MUSIC PLAYING] [MUSIC PLAYING] [MUSIC PLAYING] DAVID J. MALAN: Well, this is CS50, and recall that last began to explore the inside of We talked about arrays, which back to back to back that really to bottom, and this is actually a new to programming, You've seen this approach of just using like images, for instance. So for instance, here is a photo taken and this is an opportunity to if we start to zoom in and zoom in and any TV show like CSI, or explores forensic information might on an image like this to see is because that reveals the license just drove past. Something that's a little but there's an opportunity here to For instance, let's zoom on zoom in a little more to Let's zoom in a little There's only finite if you have an image We're using pixels-- these dots on because if you're only using then at the end of the day, you can only At least I don't really see in this or something like that that you So today we'll explore these of how you might use memory to represent now, very start to explore what some of the But consider after all that this doesn't as many pixels as something you can imagine just doing something And if you think of an image as these rows otherwise known we'll explore in the coming week-- by just using two different Or yellow and purple, or vice versa, Now in practice, recall we talked but maybe an R, a G, and a B value-- but we'll come back to that. That would just be a But for fun, if today you want to tackle if you go to this URL here, to do a bit of pixel art. If you go to this URL here, that'll If you have a laptop look a little something like this, which So if you'd like to go ahead and use feature to color in those see if you can't make something a little and we'll exhibit some of the best or So let's transition then to something And not all of you have but you're probably generally familiar and creating images And here is a screenshot via which you can going to draw with the paint going to fill in with the paint bucket. It's representative of any And there's a lot of but there's perhaps some R, G, and B. In fact, right of saying you're about to fill with the color black, represented with an R, a G, and Or alternatively, using a And if some of you have and you know a little you probably are familiar a hash symbol and then six, or And if we look at a few different here might be the Now the R, the G, and the B values Or alternatively, it looks like could represent that same And let's just do a few others. Here is red, and it turns out that but no green, no blue. Or, a.k.a. FF0000. So there's perhaps a Here is green, zero, 255, zero, a.k.a. 00FF00, or lastly, here no green but apparently a lot 0000FF. Now some of you, again, might these zeros and these F's and all of but this is another form of notation. And in fact, we'll explore is just a precondition for But the ideas, ultimately, What we're about to see is not just binary, not just we're about to call hexadecimal. But first, recall that with RGB Any RGB value-- red, some amount of red or green or blue. So here we have 72, 73, 33, which in the said what-- a couple of weeks back? Just hi with an exclamation of a Photoshop-like program, this collectively, this shade when you combine that much red So here is the same idea. If you've got a lot of together that's going to give us red. If you've got no red, a that's going to give If you've got no red, no green, is going to give us blue. So there's a pattern emerging here and FF is apparently a lot. And it's maybe somehow equated with 255, Meanwhile, if we combine one last a lot of blue-- that's actually going to give us All right, so think back. Here was binary-- in the world of binary Could have been anything else-- A or B, X or Y, but the world zero and one. In our world's decimal system, of As of today though, we're going to in the context of images and also and there's some conveniences to it. Where now, you're going to F in a notation called hexadecimal. From zero through nine, then you keep the idea being each of these, a letter of the English alphabet, It's not one zero for 10, or 1 1 these digits, so to speak, are and that's a characteristic of just So how do we get from 00 and FF to Well, this hexadecimal system, a.k.a. Base 16, just does the math grade school, a little bit differently. For instance, if you have a or hexadecimal digits as of today, the Instead of powers of two or powers of respectively, it's powers of 16. So if we just do the math this is the 16s column, and so forth. Things get actually pretty big But now let's just consider how we If you've got two hexadecimal just placeholders, zero, zero equal the decimal number you Why? Same thing as week zero-- 16 times zero plus one times zero is And we can count up from here. This, in hexadecimal, represents the number we know as one. It would be zero one in this case. This would be two, three, four, in decimal, we're about to go to 10. But in hexadecimal, to be So, apparently A, so 0A, 0B, which So using hexadecimal is of using single symbols to count from zero through 15. And we'll see why it's 15 in a anyone want to conjecture how do we now count up one position higher? What comes after 0F in hexadecimal? So, one zero-- it's the once you're at the highest or in our decimal world you add one more, nine wraps F wraps around to zero. You carry the one and voila-- the number you and I know as 16. And we could keep going This could be 17, 18, but let's just wave our as high as we can-- dot, we could count in hexadecimal would be what, in hexadecimal? Something, something. FF, I heard. So yes, that's the biggest digit So how high can you count in hexadecimal Well, it's the same math as always. 16 times F, a.k.a. 15, so that's 16 times 15 plus that gives us 240 plus 15 in decimal, is 255. So this hexadecimal system-- you may and if you haven't we'll get to or we just saw in the has this shorthand notation of counting Now it's marginal, but that's like you need in order to count as high 255 is three digits. In hexadecimal you can count and that difference is going to get Let me stipulate for now, you're in terms of just how many symbols bigger and bigger numbers than that. All right, let me pause here just to on what we've called hexadecimal, which as well as A through F. And if it feels like we're we're not really going to see other These are the go-to three in a But there are some others. Yeah. AUDIENCE: Does the hexadecimal than the decimal system? DAVID J. MALAN: Good question. Does hexadecimal require more storage Theoretically no, because this is and we'll see in a concrete But inside of the computer, at the end And using hexadecimal is not think of this as how on a piece of paper, just how or on a computer screen, how many but it doesn't change how the because all they're representing at So in fact, let's go there. If this-- a moment ago let's just rewind to week to count to 255 in binary, that's with eight bits. And there's only a few are useful to memorize, like 255 is as if you start at zero, because two to the it's zero through 255. So in binary, recall if you have and I won't do out the but if I do do this plus dot-- that's also going to give me 255. So this is what's interesting It turns out that an upside of is that we're going to the left half of all these bits, represents the rightmost So it turns out hexadecimal want to treat data in units of four. It's not quite eight, but units Which is why-- if you use two 00 or FF or anything in between-- that's actually a convenient way of One hex digit for the first four And again, there's nothing new it's just a different way of zeros and ones. So in what context do we see this? Well, we talked about going to talk more about it this week. If this is my computer's you can again think of each byte as its address or location. This might be zero, this might I've described these as just Here's byte zero, one, two, three, would be here, and so forth. But it turns out in the world of memory, tend to count memory Partly just by convention, because it's a little more represents four bits, typically. So what comes after F here? Well, if I think about I normally might do But instead, one zero, one is not 10, 11, 12, 13, because I claim As per the previous going into A's through see here a possible problem. Why is this now worrisome, seeing seemingly familiar We didn't really stumble when it was all zeros and ones before. Yeah. AUDIENCE: Try to do math [INAUDIBLE]. DAVID J. MALAN: Yeah, so if you're doing some math, you or the computer might accidentally if they look in some context the same. Any number on the board is ambiguously hexadecimal and so how might we resolve this? Well, it turns out that what By convention, any time you that's a human convention of saying-- signaling to the reader that this So if it's 0x10, that that is the hexadecimal number one is how you count up to 16. And again, these are not the it's really just the system for So henceforth today, we're going in a bunch of contexts. When you write code, you might even but again, it's just a different and humans have different All right, so with that said, any But here on out, we'll start Any questions? Nothing so far? All right. So, let's go ahead and consider Something where involving code, to a value like 50, in this case. And then let's start to tinker on inside of the computer's memory. In a moment I'm going to load and I'm going to go ahead and whip a value like the number but today, keep in mind that is going to be stored somewhere and it turns out today we'll introduce see where things are being stored. So let me click over to VS Code here. I'm going to create a to explore computer's going to do an include stdio.h, No command line arguments for now. I'm going to declare that and then I'm just going to So nothing very interesting but I'll to print out that value. Nothing here should be very but I'll do it just to make Looks like as expected, it simply But let's consider then, what this when it's actually run on your machine. So here we have that grid of memory. That variable n is an int, how many bytes typically Yeah. Four, so four bytes, or 32 bits. So if each of these squares represents in my memory, or RAM, is Maybe it ends up over here just used elsewhere, for instance. Though I don't really don't really care where it ends So the variable-- the value 50 is Even though I've written it as let me again remind that this is 32 it's just going to be very tedious if so I'll use the more comfortable So that's what's going on So what if I actually wanted to or maybe just knowing its location? Well, this variable n that's a label of sorts for it-- technically at a specific address, 0x123, and it's 123 care what it is, I just want an So way over here off screen might be It's in hexadecimal So how can I actually see where in memory if I'm curious to do so? Well, let me go back to my change this just a little bit. Let me go ahead and introduce, here and another topic So a pointer is a variable that the location of some value the specific byte in which So again, if you think of your memory zero at top left, 2 billion depending on how much RAM you have-- each of those things has A pointer is just a variable So it turns out that in the world of we can use if we want to see what and those two operators, You can use the ampersand We already saw it very briefly it's kind of and two in the context of a conditional. This is different. A single ampersand is So literally, in your code, if you've and you write &amp;n, C is going to figure variable n in the computer's memory. And it's going to give you a number, If you want to store that even though yes, it's a number like that you want to store not an int And the syntax for doing that-- to use an asterisk here, say this when creating the variable. If you want p to be a pointer, that you do int star p. And the star just tells the computer, this is the address of but we're just being more precise. So on the right hand side you As always with the equal sign, Because &amp;n is by definition the address in a pointer, and the way to declare a whose address you're storing, and then indeed a pointer and not So let's see this in practice. Let me go back to my own me make just a couple of tweaks. I'm going to leave n to go ahead and initially just do this. Let me say int star and then down here, I'm going to the variable p. And then even though yes, it's just for integers, there's actually a special pointers or addresses, and that's %p. So now let's go ahead and so far so good-- ./address, but perhaps understandably now, at which the variable n happened to as 0x123. This computer has a lot it was stored at 0x7FFCB4578E5C. Now that has no special It could have ended up but this is just where, in my server to which I'm connected that just happens to And strictly speaking, I don't even I could get rid of p print not just n, but the address You don't need to temporarily Let me just do make and now I see this address here. And notice if I keep running the There's other stuff presumably Maybe it's actually randomizing it so That can actually be a security but this happens to be at that moment quite like our picture a moment ago. All right, so let me pause any questions on what we just did. Yeah? AUDIENCE: Is there any you are storing something in memory? Does it even matter if matter that you could go in DAVID J. MALAN: Really good question. Is there any way to control Short answer is yes, and this is and we're going to do this today because with this power of going to or I could just arbitrarily that stores a value at byte 2 billion, But that also means potentially, around at all of the computer's memory, Maybe other programs, maybe and indeed, this is a if suddenly you're able you want in the computer's memory. Now, I'm overselling it a little bit there are some defenses and in our operating systems that But this is still a very and later today we'll called stack overflow, it is a problem that you can encounter. Heap overflow, and more there's just so many things that can and if any of you have encountered I think we saw a few You touched memory and odds are you did it most recently Going to the left, or negative in an you shouldn't have. And we'll explain today why it Other questions on Yeah, from Carter? AUDIENCE: [INAUDIBLE] pointer star p, Is it called star p or p? DAVID J. MALAN: Good question. Earlier, we used star p. Let me rewind in time to the where I actually had Just like with variable once you've declared a variable to star, a.k.a. a pointer, keep using the word Once you've declared it, that's it. You only refer to it by name. And so it's very saying that the type here is int star-- that is a pointer to an int-- but here I just said the name I didn't repeat int, and But at the risk of bending is unfortunately one other use for the If you want to print out not but what is at a specific If I want to print out the integer I can actually use the star here, which said but it has a different So let me go ahead and do I'm going to leave this but I'm going to add that prints out what apparently So %i backslash n, and I could So there's really nothing just adding a sort of So make address, ./address-- there's the current address of But what's kind of is if you know that a value is there's one other use for this You can use it as the which means go to that address. And so here what we actually have which is an address like But if you say star p now, you're because I didn't mention int-- you're going to that address in p. So let me recompile this now. Make address, ./address, what should I see? I'm first going to see the What's the second line of output Shout a little louder. So I'm hearing 50, and that's true of n and print it in line seven, but that's indeed going to just the value of n again. All right, any questions now on I think this is confusing-- use the star for that we use the star but then we use a star in a third and go to the pointer. It's just too confusing, honestly, Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Good question. Do you-- when you are using to get the address of is on you at the moment to know Is it a string? Is it a char? Is it a bool? Is it an int? I wrote this code so I trying to get the address AUDIENCE: What about line eight? DAVID J. MALAN: In line to worry about that-- good question. Notice in line eight, I didn't tell what kind of address I'm going I told the compiler is going to be the address of an int. That's enough information in advance so still knows on line eight and that way it will print out not just part of it, and not Good question. Yeah, next to you. AUDIENCE: Do pointers have pointers? DAVID J. MALAN: Do Yes. We won't do this today by but yes, you can use star I'm sorry. We won't do that today and In fact Python, another language, away, so hang in there. Almost there. A question back here? Was there? That was-- more verbal is helpful as we forge into Other questions? Yeah. AUDIENCE: What's the DAVID J. MALAN: What's the AUDIENCE: Like, using the DAVID J. MALAN: Sure. What's the point of doing this? If you don't mind, let me-- This is not the common use case, who really cares? At the moment we care only We're soon going to start So hang in there just a but it will solve some So let's actually just now depict what memory just a moment ago. So if I toggle back here, let now let me plop into the memory n, the number 50. Where is p in my computer's memory? Specifically, I don't know and run the program so for let's just propose that if 50 ended p ends up over here, at address-- whoops-- at whatever But notice a couple of curiosities now. If p is a pointer, it's So the value in p should be an address, 0x123, and technically there's not there's not even a 123 a pattern of bits that But again, that's weak zero-- So if this is p, and this I claimed Can someone conjecture here? Because it turns out whether n which are different it turns out that p is always going but why might that be? What might explain that? Yeah, thoughts? AUDIENCE: Perhaps it but it doesn't know the type DAVID J. MALAN: OK, fair. Maybe it's allocating eight bytes Turns out that's OK because It's really up to the programmer to Other thoughts? AUDIENCE: Maybe the first four for is some null that [INAUDIBLE] DAVID J. MALAN: OK, possibly. It could be that pointers have or something curious like that, Turns out that's not the case. It turns out that pointers always are eight bytes, a.k.a. 64 bits, because you and heck-- even our phones have a lot Back in the day, a been 32 bits, or even only It's considered 32 bits, because How high can you count, What's the number we keep rattling off? 32 bits is roughly 2 to and I keep saying it's 2 billion if you there's a reason I keep saying because for a very long time that a computer could have. Why? Because the pointers that were only, for instance, 32 bits. And with 32 bits, depending on whether you can count as high as 2 billion, but you know what-- your could not have had five gigabytes of You certainly couldn't have had which might be 8 gigabytes of memory-- 16 gigabytes of memory. Why? Because with 4 bytes, or 32 can't count that high, which means if I would run out of numbers to describe would just be unusable. So pointers nowadays are That's really big. I can't even pronounce but it's plenty for the we've drawn it that Now let's just abstract this away. Let's get rid of all are storing something or start to abstract away this to your question earlier-- what is this useful for, or care about these addresses? Generally, no. We're doing this so that We're just moving things around But what a person would typically would literally be to I really don't care so it suffices when general, when having a discussion you just draw an arrow from the because neither you nor I probably care There's your pointer-- it's literally So it turns out that these are not that dissimilar to what in the form of a postal system. For instance, here is a post office-- here, no-- here is a that this is a mailbox labeled p. It's a pointer, and suppose way over there, which is just What are we really talking about? Well, you store in a computer's or the word &quot;hi&quot; inside of your But today we can also use to store the address of things. For instance, if I see OK, the value inside of this it's actually an address-- 0x123-- that's like a from one location in memory to another. And in fact, would someone who's do you mind getting the mail over there? Any volunteers over in this section? Just need you to get to Who's being volunteered? Oh yes, please. Whoever is gesturing most Sure. What's your name? AUDIENCE: Anfoo. DAVID J. MALAN: Say again? AUDIENCE: Anfoo. DAVID J. MALAN: Anfoo? OK, come on up to the edge of the if this is p, that is what we're talking about when like 0x123, that's maybe pulling out something abstractly pointing or if you prefer, OK, all right. Thank you. All right. This is akin to me and if you want to go and reveal to the crowd what's All right. Thank you. We have a little CS50 stress Thank you for coming up. So that's just to put a visual on because it can get very abstract, talking about addresses and memory and But if you think about just walking complex that's got a lot of essentially are a big of those mailboxes has an address-- this is apartment one, two, And inside of those that can be represented as information. It could be a number prefer it could be a the address of another mailbox. And this is akin, really, if and your parents have moved, It's like having the put some kind of piece of paper actually forward it That really is all a pointer is doing. At the end of the day, but it's a number being and it's the syntax not just int but int star, to treat that number in Are there any questions then, on this? Yeah, in back. AUDIENCE: If you had a variable, DAVID J. MALAN: If I did int c and-- say the code again? Once more? Equal to n, so let me If I give myself another one last time what to type. So this is OK, and I can't draw it but this would be like creating another down here, that stores because the assignment operator to another. So that would just add one to this particular picture. If I'm answering your OK, so that is week one style use of I could, though, start copying come back to some of that complexity. Any other questions here? AUDIENCE: That was a great question. Does the pointer point-- does the same pointer point DAVID J. MALAN: Ah, good question. Short answer, no. And to repeat for the camera, if I int c equals n, and I claim without that this gives me another rectangle, p does not get touched. And this is what's important of C. Nothing happens p is not going to be updated so creating a third if you're copying its that has no effect on A good question. So what have we seen that's perhaps Well, recall that we talked quite a to recap in layperson's terms, what is So say-- well, let me What's a string? How about over here. AUDIENCE: An array of characters. DAVID J. MALAN: OK, sure. Both of you are right. An array of characters. An array of characters, and we-- I claimed-- or revealed last week a feature built into C. It's but every programmer refers to sequences of paragraphs-- as strings. So the vernacular exists but exist per se in C. So what for dramatic effect, is take The CS50 library implemented in the we claim has had a Prototypes for GetString, and all of those other it also is what defines the that you all can use it So let's take a look at an Here, for instance, that uses the word &quot;string,&quot; and then storing quote Let's consider what this looks I don't care about all the other and this per last week is h-i exclamation point and then observed, that sentinel value-- just means eight zero bits to just in case there's the computer can now distinguish So last week we introduced Well, if strings are you can then very cleverly use and go to location zero or one but they're relative to the string. This could be at 0x123 or 0x456, zero is always the beginning two is the next, and so forth. So that was our array syntax But technically speaking, we technically speaking, if hi is it stands to reason that i is at and the null is that 0x126. Now, I don't care about 123 per se, this is correct math. Even in hex, if you just add the next number is four, I don't have to worry because I'm not counting So if that's the case, and laying out the word hi in memory What exactly is s if, H-I exclamation point null is storing-- Where is s? Now that I've taken off and showed you where H-I what happened to s? Well s, as always, is Even in the code I s is apparently a data type but CS50's library makes it exist. s is a variable of type string, Well, it turns out that Again, I'm just drawing it anywhere but s is a variable What s is storing, I actually don't really care about these s is apparently, as of now, today, to a character. Specifically, the first character in s. And this is the last Last week we had this clever way Well, it turns out that strings are as a variable that is a is the address of the first So if s points at the can trust that backslash zero that's literally all you need to figure So what do I mean by this? Well, let's be a little more concrete. In terms of this picture, if I've it turns out all this time since semi-secretly been an I know, so char star. So why does this make sense? It's a little weird still, we were able to store the address of called p, as int star p-- well, if as of now strings of the first character in a string, then because that means s is the first character in the string. Now, the string might have three letters if it's a long paragraph, because you can trust that null character at the very end. So this is a general purpose using this new mechanism in C. So in fact, let me go ahead a couple of manipulations of this. Let me go back to my code here, and and let's instead now Let me add in the CS50 library, I'm going to go ahead give myself a string s I don't type the backslash zero. C does that for me automatically by Now let me just go ahead and print it. So this again is week 1 style stuff No pointers yet. So let me do make address, Enter, so nothing new there. But let's start to peel back Let me first of all, get rid of and let me change string to char star. And it's a little bit weird is to say char, a space, then the the name of the variable. Strictly speaking though, you might do it like this or like is typically to do it like that. So now no more CS50 library, no I'm just treating strings Let me go ahead and do so far so good-- ./address-- and that, too, still works. So %s is a thing that comes with printf terminology but strictly speaking It's always been char star, can start to have some fun even though this is not purposeful But if s is this-- let me go back Let's put those training wheels so that I can do one Here's my string s, as before. Well, let me go ahead and and let me store the first character s bracket zero, and And then just for kicks, let whoops-- let me go ahead and do and see what this Let me go ahead and So we're just playing around. So make address-- so All right, so what have I just done? I've just created a char c and is the same thing as s bracket I, then and that's apparently 0x7FF whatever. So that's the address. But I technically Let me go ahead and do two things now. Instead of just printing p, let me go Let me go ahead and do so far so good-- ./address and-- damn it, what did I do wrong. Oh shoot, I didn't want to do that. Oh, I really made a mess of this. What did I want to do here? That was supposed to be impressive So let me turn it around. So if I intended to do this, printing different values? Didn't really intend to go here, Why are we seeing different addresses, and then 0x7FF for p? Any thoughts? Yeah, over here. AUDIENCE: [INAUDIBLE] its own sort of location and it's taking off just DAVID J. MALAN: Correct. So if I really wanted to this is a great answer to the what if I introduce another variable, and not in this case an Here, I've made c be a copy of the but that's indeed a copy. So if I were to draw would give me a different would actually be stored. So I didn't intend to seeing is yes, the address of s-- and apparently that's at a here-- then you're But even though each one is at a different address in memory. And this has always been happening. Any time you created one variable or here, or here, or Now for the first time all we're the computer's memory to So let me actually back and do what I intended to do here, So if string s equals quote and give myself a pointer, called All right, so now let me go ahead and %p, printing out p. So we're just going to So make address, Enter, ./address. There, at the moment, is the What I meant to do now, was this. If I want to print out let me print out not only what p is, Because if I claim that everyone from s bracket zero just representing by definition of strings Then s, as of today, is itself the first one in s. So if I now do make this time I see the same exact things. Thank you. This is really the lamest sort but what we're demonstrating here is of the first character in c. So if we borrow some of our well, if s bracket zero is the first that expression should be the same as s. Now this isn't to say that we all the time with this much syntax, that s is in fact, as I claimed a moment Not even multiple characters, it's but the key thing is it's the address and per last week we to look for that null to make sure it knows where All right, a question came up over here. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Correct. To summarize, on line that just means print a pointer I'm passing it s. Previously, when we used %s, printf knew of s, but h, i, exclamation point, and zero. p is different. %p tells the sorry, tells the computer to So this is where %s all The reason printf worked was because printf was designed to go to the address that's s-- and print out after character until it sees the and then stop printing it. So that's-- you're getting a lot Today we're using which just literally prints what s is. And the reason we is just because this to be interesting when is hi or hello, world, or the like. But now what we're what's been going on this whole time. And let me make one other example here. Let me go ahead and get here and let me just print out a I'm going to print out not just s and print out every-- the address of every character in s. So let's get the first letter and I'm going to do copy but not something I would do frequently. So let me print out the address of the the third, and actually is the backslash zero, by doing this. So when I compiled this program-- I should see two additional values that In my diagram a moment ago, my addresses Now it starts at, by chance, 0x402004 is the same thing saying go to the first character Those are one in the same now. And then after that because that is just like the diagram. Go to the i, to the exclamation So all I'm doing now is using my ampersand does and what the star I'm poking around in Just to demonstrate there's no magic. It's all there very deliberately else put it there. Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Really good observation. So it's indeed the case is ending up at a very low address, That's actually because, are often stored in a different more on that later There's actually only going to be one point, and the computer is going to but other values like like-- they end up lower But a good observation, because All right, so a couple final details Let me go ahead and claim that or rather, string as a As of last week we As of this week, we can now start specifically, we invented But it turns out you've seen a way Recall this thing here. We played around last time with data and briefly the typedef keyword, And if I highlight the way we invented a was to define a person as having a structure that encapsulates a Now even though the syntax is a little thing, notice that this could be a If I want to create a type called then I use typedef to make So this is literally all in addition to those prototypes typedef char star string that brings the word string and that's all that's ever been there. But the star, the char star, We wait until this point are any questions, then, What star or the ampersand are doing? Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Oh my God. Massive spoiler, but yes. If that is-- is that why when you did, or almost did, problems arise. And in fact yes, last STRCMP-- for a very deliberate accidentally would have compared two at those addresses. Other questions here. All right, well, before we give we have lots of pieces of paper. If anyone wants to come on up and if you want to make your own to share with the class if you're Otherwise, let's take 10 minutes All right, so let's come we can start to use these pointers in an interesting way. The goal ultimately to use these addresses to really structures than just persons, in the context of an if you will, and actually really use to represent not just and other two-dimensional But for now, let's come back whittle it down to just a hi initially, underneath the hood. So let me re-add the use our synonym for a moment, and I'll redefine s as a string. And what I didn't mention before that you've been using for some The double quotes are that what is between them is in which means the compiler will where to put the h, the and even adding for you And what the compiler is figure out what address ended up at and store it So that's why it just happens with or even stars explicitly, but the star string is just synonymous It's not really as readable, So I'll leave string in place 1 style here for a moment, and let's go So I'm going to use %c this time, and and then I'm going to print out literally doing week three a printing of every character So ./address should give And if I really want to get I could print out one more location, make address ./address and there is, I'm not seeing zero because I didn't it's literally eight zero bits if you will, in printf speak. And so what I'm seeing here That just means there is it's apparently all eight even though we're not seeing Well, let's go ahead and and let me go ahead and get rid of therefore, the word string because Nothing else is different. I'm going to now do and it's the same exact thing. And now, let's just focus on the hi So I'm going to recompile one last time Well, it turns out that the was technically some of Sort of a neat way to use but we can see more explicitly today is actually doing. Let me go ahead and do this. Let me adventurously say I zero, but I want to print out So to be clear, what is s now? It's the address of a string. OK, but what is s, really? s is the address of the and again, that's sufficient for the computer will see that there's So s is specifically the address So that means, using my to print out that first s, because recall that star is the repeat the word char, you you just use the star here. That means go to that address. Similarly, if I, in my newfound know that the h comes first, then the exclamation point, then one byte apart, I could I could go to s plus 1 byte and and I could print out in fact, doing what's generally Literally treating pointers hexadecimal or decimal, doesn't really And go ahead and add to them to start at the and just poke around from left to right. So this now is equivalent to what we notation, but now I'm re implementing plumbing, understanding ampersand so if I remake this I should still see But what I'm really doing is hopefully, my understanding is going on in the computer's memory. Now, programmers who are might actually write this syntax. I think the more common syntax s bracket zero, s bracket one. Why? It's just a little more need to brag about or care about The square brackets last week on top of what is lower level math. But that's all that's going We're poking around from All right, let me pause here, see if Any questions on this? Let's do one more then, just even specific to strings. Let me go ahead and and let me give myself an array So if I'm going to at once using this funky I can do like 4, 6, 8, 2, 7, 5, 0. So seven different numbers inside initialized like this. I don't, strictly speaking, The compiler is smart how many numbers I put and that just gives me an array So it turns out I can print each of I can do a printf of %i backslash n, and let me just do some quick copy/paste Theoretically, that should But I can do the same sort what pointers now are, So let me actually unwind this and instead of printing numbers bracket let me just go and print out so asterisk numbers. Let me then print out is going to be whatever is at numbers and do whatever is at numbers plus 2, let me do it four more at location three, four, five, and six. And that's seven total numbers So let me just quickly run this. Make address, ./address. There are those seven But there's something Each of these digits-- 4, 6, 8, 2,7,5, 0-- is an int. Why? Because I made an array of integers. But think back-- how big is a Four bytes, or 32 bits, so it's need to worry about that detail. Notice that I did not do plus 4, I, the programmer, need to worry about how This is the power of pointer arithmetic. The compiler is smart enough to know that is the same as saying not just one byte-- so if it's an int, move four. If it's a second int, move eight. If it's a third int, move 12. Pointer arithmetic handles that so you can just think of this after a number that are back to but four bytes apart. Which is only to say plus 1, plus 2, Why? Because the compiler knows what Now, there's one other that I've taken for granted. In the past I was using double and I claim that the compiler's if I have double quote hi, that means and then the backslash zero. Notice this usefulness. It turns out that you can actually treat is itself a pointer, going to be something when we want to pass arrays Notice that strictly speaking on line There's no star, there's nothing new there, and yet I'm pretending that it is the It turns out that an array as the address of the first The difference is that there's no This is just part of the ending in zero-- that's not So this is something we're going to There's this interrelationship that just generally allows you to but the math is taken care of for you. Are any questions then on this before Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Potentially. If you go beyond the end of an array, The problem is that that symptom which means that sometimes it It often depends on how far off the You'll often not induce if you just poke a little too it quite likely will. But we'll give you a tool today exactly that kind of situation. So let's go ahead now and do but that actually comes back Let me go ahead and create a program I'm going to go ahead and not so much for string but so that which is way easier than the way we'll Let me give myself stdio.h, not worrying about command line and get an int i using get int, and then let me give myself an int j, ask and then let me go ahead and kind of if i equals equals j, and print out something like &quot;same,&quot; and print out &quot;different&quot; if So that would seem to be a program that All right, so let's go so far so good-- ./compare. OK, i will be 50, j will be 50-- they're the same. Let's do it once more. i will be 50, j will be 42. They are different. So so far, so good in this But as you might see let's move away from integers and let's to strings. So I could do string s over here-- GetString s over here. Then I could do string t over asking the user for t this time, here. And then I can compare the two. If s equals equals t-- and this is a common convention. If you've used s for string already you for simple demonstrations like this. I'm going to compare the two, just like Make compare-- so far oh, sorry. Wrong program-- ./compare. Let me go ahead and hi, exclamation point and bye, should definitely be different. Let me run it again with hi, exclamation Different-- maybe I messed up. Let's maybe do it lowercase, But no, those two are different. So to come back to what I described the fundamental issue here, to be clear? Why is it saying different sure I typed the same thing twice. Yeah. Yeah, this is where it's now an abstraction-- a training wheel, if still use GetString because but if I change string a little more explicit as to what s and that is the address of to a char, that is Specifically, the first character in t, respectively. So if I'm comparing to reason that they're Why? Because s might end up here in memory Each time I call GetString, it is to know that, wait a minute-- I'm just going to hand That doesn't happen because we Each time I call GetString, a different copy of the A hi over here and a hi over here. They might look the same to they are different chunks of memory, And here, too, we can reveal Well, up until today it was That's not really a thing. Technically, what doing is returning the address and trusting that we put a backslash typed in, and that's enough now to know where a string begins and ends. So GetString has actually It has not returned a quote but there are functions that can Recall that I could do I could actually go let's see, where was it? So if I include str compare here and let's see now what happens Implicitly declaring library and well, there's a star. So you might have seen this error before but there's some evidence of It looks like I didn't include so that's an easy fix. Include string.h which, despite its called string, it just has like str compare. Let's make compare again. Now it compiles, ./compare. Now let's type in hi, exclamation These are now-- oh, I used it wrong. OK, user error. That was supposed to be What did I do wrong? What did I do wrong here? Yeah. Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, it Zero if they're the same, positive negative if the opposite is true. I just forgot that, so like if I want to compare them for I should be checking for Now make compare, ./compare, Enter. Let's try it one last time-- hi and hi. OK now, they're in fact the same. And Justin, thank you. And indeed, not that it's If I type in hi and noticing that difference as well. Well, let me go ahead and Let's do one other thing. Let me go ahead now and just reveal Let's get rid of the string comparison The simple way to print this out would printf knows-- taking an address and start until the backslash n, so let's And then let's do one more, %s,t. This is, again, sort of a because I got rid of the word string. I'm using char star, but I'm still Let me go ahead and run compare I should see the same thing twice. So they look the same, but here to print out the actual So let me just change the s to a p, and print it, it means just So make compare, ./compare, and now and I should see, indeed, two in hexadecimal. One's got a B at the end, and they are indeed a few bytes apart. So this is just confirming what So what does this mean, perhaps Well, let's take a look. I've zoomed out so I have a little Here might be s in memory when I do I get a variable that's of size claimed earlier that on modern systems, nowadays so they can count even higher. And inside of the computer's And I don't know where it ends it ended up down here. That's what was free h-i exclamation point, backslash zero. Maybe it ended up, for the sake of So to be clear, what is s operator copies from right to left? What is s storing if I Yeah. 0x123, the presumption defined by the address of its first is 0x123, then that's indeed And so technically, that's what's operator from right to left. GetString indeed returns but more properly it returns What's been then copied from right to all these weeks is indeed that address. Now technically, we don't really need It suffices to just think about first consider where t might be. created on my second line of code. Maybe it ends up there, For the sake of discussion Where did the second word Well, suppose the second copy of What ended up in t? I'll pluck this one off myself. 0x456, presumably. And so this is now a pictorial and let's abstract away everything else. When I compared s against t using they're obviously not the same. One is over here, one is over here. And per a moment ago, one is Yes, technically they're pointing but that just reveals str compare is apparently takes in the address of and the address of another it goes to the first character in and probably has a for and just goes from left to for the same chars left and right, and boom-- it returns zero. If it does notice a difference it And that's very similar, recall, to how last week. I used a for loop, I was str compare is probably a little similar but comparing, this Are any questions then, and why it is that we use str Yeah. AUDIENCE: Do pointers have addresses? DAVID J. MALAN: Do Yes. So we won't do that today, but I could on s or on t. That would give me the that itself could be That's where it ends. We don't do that recursively forever. There's star and there's star and it's very often useful in the which we haven't really talked about, too. But not today. Good question. All right, so what might we now Well let's go ahead and implement that maybe tries copying some Let me open up a file and I'm going to start So let's include the CS50 library just Let's include-- how about stdio include string.h and maybe Let's do int main(void) as before. And then in here, let's get a call it s for simplicity. And heck, we can actually just or string, since we're But we'll come back to that. Let's now make a copy using a single assignment operator and Let's go into the first character and then let's uppercase that we've used in the past of And actually, I should go back up here. If I'm using toupper or if you use I might not remember this offhand, called C type dot h. There was a bunch of helpful Now at the very last line of the program are by simply printing out %s for each of course, and let's So let me make copy-- oh my God, so many mistakes. What did I do wrong? Oh. OK, that was unintended. String t equals s, sorry, so s and t respectively, Make copy, Enter. There we go. ./copy, and let's how about hi exclamation point and now what gets printed? I don't think that's what I Because notice that I got s from I then copied t into That's what we always Then I uppercase the first at least in my code-- then I printed s and t and then and t got capitalized. So if you're starting to get a going on underneath the hood, Why did both get capitalized? Why did both get capitalized? Yeah, over here. AUDIENCE: Could it be they're DAVID J. MALAN: Yeah, they're So C is really literal. If you create another variable called you are literally assigning which is 0x123 or something like that. And so at that point in the have a value of 0x123, point to the same h-i Nowhere did I tell the computer to give per se, I literally said just copy s. So here's where an understanding of what I'm only copying the pointers. So what actually went on in memory? Let's take a look here at this grid. If I created s initially, And I created hi in lowercase, Then the address was, again, like If then I create a and I call it a string, a.k.a. char But when I copy s into t by that literally just copies s into So if we now abstract away all these with arrows, what we've drawn in Two different pointers but storing the breadcrumbs lead to the same place. And so if you follow the t breadcrumb it is functionally the changing the first letter So what's the solution, then, Even if you have no idea what's the gist of what I I want a genuine copy of s, called t. I want a new h-i exclamation What do I need to do Thoughts? AUDIENCE: I think there's DAVID J. MALAN: So there is a which is a possible The catch with stir copy is that you what the source string is-- you also need to pass in the into which you can copy the string, and and we need one more building We haven't yet seen a way to and then let some other And for this, we're going to introduce allocation. And this is the last and most whereby we're going to introduce two malloc means memory allocate, It's a function that takes a number do you want the operating system to It's going to find it to you the address of the first byte of and then you can do anything you free is going to do the opposite. When you're done using a chunk of you can say free it, and that means you and then the operating system can So this is actually evidence of If your Mac your PC has ever been in really slow, or it's slowing to a one of the possible that the program you're or whoever, maybe they're using asking the operating system-- Mac OS or Windows-- for, I need more memory. The user is creating more images. The user is typing a longer essay. Give me more memory, more memory. If the program has a bug and never your computer might end up using and honestly, humans are not very good Very often programs, computers or get really, really slow because when there's not enough memory left. So one of the reasons for a might be calling for malloc a lot, or Which is to say, you should in concert and free memory So let me go ahead and do this in Let me go ahead and do this. Before I copy s into t using I first need to get a bunch So to do that, let's make this super so I'm going to change my strings and what I technically is the address of an To do that, I can ask the computer and how many bytes. If I want to create a copy I need how many bytes? Good! Four! Because I need the h, the i, the for the backslash zero. It's up to me to understand It's not going to happen magically. Nothing does in C. So I could and that would be correct point or any other three letter word I should probably do plus 1 for the additional Recall that string length it returns the length of the string the fact that I'm going Now let me do this old Let me go ahead and manually So for int i equals 0, i is less than Then inside my for loop, I'm going i, but actually I want so I want to do the length and heck, I think I learned If I'm doing this again do n equals strlen of s plus 1 just as a nice design optimization. I think this for loop will of copying every character from s into Or I could get rid of all of that is to use str copy, which takes as and its second argument the source. So copy from right to left in this case, automatically for me as well. Now I think I'm good. I can now capitalize safely. The first character in t, which than s, and then I can print them both but the other has. So make copy-- all right, Implicitly declaring library So we've seen this kind of error before. What is-- even if you don't what's the essence of the solution? What do I need to do to fix this declaring a library function? What did I forget? Yeah. I need to include the library. And I could look this up in the manual, I just forgot it. There's another library need now called standard lib-- standard library-- that contains and some other stuff, too. All right, let me just clear this Now I'm good. ./copy, Enter, All right. t and s now come back as intended. s is untouched, it would seem, Are any questions, then, on Yeah. AUDIENCE: You said that [INAUDIBLE] DAVID J. MALAN: Indeed. There's a few improvements me actually do those right now. Technically, I should practice what when I'm done with t, free t. Fortunately, I don't have was-- the computer remembers how many all of them, not just the first. I should do free t. I don't need to do free because that is handled s, recall, came from have some fancy code in that at the end of your we free any memory that we waste memory like I described earlier. But there's actually a if I really want to be It turns out that and sometimes malloc doesn't because maybe your stuff there's just no So technically, I should if t equals equals null, then I should just return 1 or something I should probably print but for now I'm going to keep it simple. I should also probably check this. This is a little risky of me. If I'm doing t bracket zero, this is But what if the human just and didn't even type h, let What if there is no t bracket zero? So technically, what I should probably is at least greater than zero, the first letter of it. And then at the very I can return zero, thereby signifying So yes, these two functions, malloc And so if you call malloc you But you did not call malloc for s, Yeah, other question. AUDIENCE: Here's a question. Why do we do malloc plus 1? DAVID J. MALAN: Why So malloc-- sorry, malloc plus 1-- the string length is the would perceive it in English. So h-i exclamation but I know now as of last week and and a string always has an extra byte. The onus is on me to that lesson learned so that I actually trailing null character. And here's just an annoying thing when week, it turns out that It's also zero, but it's zero So long story short, you never and we saw it on the screen. You will start writing N-U-L-L when you is valid or not. And what I mean by that is this. If malloc fails and there's just of the computer for you, it's and that special value is That signifies something went wrong. Do not trust that I'm giving Other questions on Yeah, over there. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Good question. Will str copy not work without malloc? You kind of need both in by definition-- if I pull up its to put the copied characters. It's not sufficient just to That only gives you a pointer. But I need another just as big as h-i exclamation so malloc gives me a and then str copy fills it with h-i So again, that's why we're because once you understand you now have the functions to do it. So let's actually consider So in this next version of the program t was initialized for the and maybe the memory that 0x456457458459. I've left it blank is put there automatically by malloc. I just get a chunk of memory that I then assign t to that return value, Notice there's no backslash zero. This is not yet a string four bytes-- an array of four bytes. What str copy eventually did the i over, the exclamation point And if I didn't want to use str copy or would have done exactly the same thing. Are any questions, then, Any questions? Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Good question. After malloc, if I had then it actually would have recreated by just copying 0x123 from s into t. So then I would have been left with steps ago, I would have-- and this arrow, if I did would now be pointing over here and so the problem, I would have four bytes temporarily that Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: You can-- do you always use malloc Not necessarily. These are both solving malloc's giving me enough memory to However, you could actually use an and you could use str copy on that, and But thus far, it's a to have that if you you use malloc and then str Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Say that once more. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: No. It will-- good question. If I had a-- str copy, per its documentation, plus the null character at the end. It just assumes there will be one there. It's therefore up to you to pass str to have room for that. If I only ask malloc could have potentially whereby str copy would just still four bytes, but technically it should You do not yet have access to the because you never asked malloc for it. Yeah. AUDIENCE: So the number inside DAVID J. MALAN: Correct. The number inside malloc-- It's the number of bytes you want back. AUDIENCE: Does that mean you DAVID J. MALAN: Yes, the onus to remember or frankly, use how many bytes you actually need. That's why I did not ultimately I used str length plus 1. So the plus 1 is necessary if you but using strlen means play around with any types of figure out the length. So suffice it to say, already where you can Let's give you at least one tool for And indeed, in upcoming use this to find bugs in your own code. Not just using printf, not just using here as well. So let me go ahead and deliberately that has some memory-related errors. Let me include stdio.h at the top and so I have access to malloc now. Let me do int main(void) and then I want to allocate space for three integers. Why? Just for the sake of discussion. So I'm going to go ahead and do malloc I want three integers and so technically I could do this-- 3 times 4, or I could do 12 but again, and if I run this program on int might be a different size. so the better way to do this would be And this is just an operator you can use on this computer, how big is an int? How big is a float, or something else? So that's going to give me that many-- that much memory for three ints. What do I want to assign this to? Well, malloc returns an address. Pointers are addresses, so I'm going x and assign it the value. So what am I doing here? This is a little less obvious, The right hand side here gives me a malloc returns the address of How do I store the address of anything? I need a pointer. The syntax for today where the type of data in question Again, it's kind of purposeless, only here, but this is equivalent now to in total, presumably, so I I can go into maybe the first like the other day. Second location, the number 73, and the Now I've deliberately because I'm trying to trip or my greenness with One, I didn't remember that I as zero indexed. malloc essentially returns an array, An array of three ints, the address of a chunk of memory So I can use my square bracket and use pointer arithmetic, but But I have made two mistakes. I did not start indexing should have been x bracket zero. Line eight should have been x should have been x bracket 2. So first mistake. The second mistake that is I'm also touching x bracket 3 would mean go to the that came back. I only asked for enough not four, so this is what's I am accidentally, but going beyond the boundaries of So bad things happen, by just running your program. Let me go ahead and just try this. Make memory, and you'll see here and it actually does which comes back to that Sometimes it does, sometimes it of a mistake you made. But there's a program that can and I'm going to go ahead and expand and I'm going to run not just ./memory, This is a command that comes that's designed to find So it's a new tool in and you'll use it with I'm going to run this now. It's output, honestly, it's hideous. But there's a few things and will help you with sets to see these kinds of things. Here's the first mistake. Invalid write of size four. That's on memory.c line So let me go look at line nine. In what sense is this an Well, I'm touching memory touching it as though it's an int. And an int is four bytes-- size four. So again, this takes some practice to but this is now a clue that not only did I screw up, but and so this is just a hint, if you will. It's not going to necessarily you have to wrestle with write of size four-- oh, OK. So I should not have indexed All right, so I So let me go ahead then and change this All right, so let me go Make memory, ./memory, still doesn't buggy. Let me go ahead and run Valgrind And now there's fewer scary-- less scary output now, but Notice this-- 12 bytes in one blocks-- no regard for grammar lost in lost record one of one. Super cryptic, but this is hinting The blocks of memory are lost in I asked for them but I never-- take a guess-- freed them. I have a memory leak. And this is the arcane way You have a memory leak. So this is an easy fix, fortunately. Once I'm done with this memory I So now let me go ahead it's still runs fine so all the while my code is correct. But let me run Valgrind one more time. Valgrin of ./memory, Enter. Now, this is pretty good. All heap blocks were No leaks are possible. And even though it's still a little and in fact, it's pretty explicit-- contexts, dot, dot, dot. So even though this is one of it's also one of the most that you, the human, might not, and It does a much closer while it's running to figure Any questions, then, on this tool? And we'll guide you after today Just helps you find that you might now be capable of making. All right, let's do one Let me shrink my terminal window here. Let me create one other It turns out there's a term of ours that we can reveal as follows. Let me include stdio.h, how about stdlib.h, and main(void), and then in this let me give myself three notation, just int scores bracket Then let me go ahead and do for i plus plus, then let me go ahead scores bracket i semicolon. That's it. This code, pretty sure is going but what is my logical bug? I've forgotten a step even though the Yeah? Yeah, I didn't provide the initialize the array called scores What's curious about this, though, doesn't mind. Let me go ahead and playfully and it's an apt description are so-called garbage values. When you, the programmer, do not values, sometimes, who knows The computer's been there's a bit of work that happens even so there might be remnants floats-- anything else in is those garbage values, which is as I just did, to initialize And this is actually have been many examples of because of one of these issues and all of a sudden users, maybe people applications, could suddenly see the or remnants. Maybe someone's password that or some other value like that had been previously typed in. There are different to generally make this not very possible, at least to see values that you might be remnants from So this is to say again, you have this but also now you have this great the contents of memory, and this is trying to find ways to exploit systems. Are any questions here? No? All right, let's go ahead and and when we come back, we'll See you in five. We are back. First, just a little programmer will make a little bit of sense to you. And what we'll also do next to take a animates with claymation, if you exactly what happens now if you have values are and how they get there, and It's one thing just to print it's another if you actually mistake because garbage values are just zeros But if you use that new and try to go to a garbage value a valid pointer, bad things can happen. Computers can crash or more familiarly, So allow me to introduce, if we our friend Binky from Stanford. SPEAKER 1: Hey Binky, wake up. It's time for pointer fun. BINKY: What's that? Learn about pointers? Oh, goody! SPEAKER 1: Well, to get going to need a couple of pointers. BINKY: OK, this code allocates two SPEAKER 1: OK. Well, I see the two pointers, but they BINKY: That's right. Initially, pointers The things they point to are called is a separate step. SPEAKER 1: Oh, right, right. I knew that. The pointees are separate. So how do you allocate a pointee? BINKY: OK, well this code and this part sets x to point to it. SPEAKER 1: Hey, that looks better. So make it do something. BINKY: OK, I'll dereference the 42 into its pointee. For this trick, I'll need my SPEAKER 1: Your magic That great. BINKY: This is what the code looks like. I'll just set up the number and-- SPEAKER 1: Hey, look. There it goes. So doing a dereference on x follows in this case to store 42 in there. Hey, try using it to store the number BINKY: OK. I'll just go over here to y and then take the wand of whoa! SPEAKER 1: Oh hey, that didn't work. Say, Binky, I don't think because setting up the and I don't think we ever did it. BINKY: Good point. SPEAKER 1: Yeah, we but we never set it BINKY: Very observant. SPEAKER 1: Hey, you're Can you fix it so that y points BINKY: Sure, I'll use my magic SPEAKER 1: Is that going to BINKY: No, this doesn't it just changes one pointer to SPEAKER 1: Oh, I see. Now y points to the same place as x. So wait, now y is fixed. It has a pointee so you can try to send the 13 over. BINKY: OK, here it goes. SPEAKER 1: Hey, look at that. Now dereferencing works on y. And because the pointers are sharing BINKY: Yeah, sharing. Whatever. So are we going to switch places now? SPEAKER 1: Oh look, we're out of time. BINKY: But-- That's from our friend So let's consider what So here is all the code together. These first couple of lines were not they move the stars to the left. That's fine. Again, more conventional These two lines are fine. It's OK to create and not assign them a value initially So we eventually do We assign to x the return is presumably the address of something. To be fair, we should really but that's not the biggest problem here. The biggest problem is which means go to the memory location That's fine, because the address of some chunk of memory. This chunk of memory is x is therefore going to store big enough for an int. Star x recalls the dereference and put 42 in it. It's like going to the mailbox instead of taking the number But why is this line bad? This is where Binky lost Why is this bad? Yeah. AUDIENCE: We haven't yet DAVID J. MALAN: Exactly. We haven't yet allocated space for y. There's no mention of malloc, even to that same memory. So this would be, go but if there is no known address in which means go to some random address and boom-- that might cause what we've seen in the Now this, fortunately, that if you don't quite have the eye could help you find as well. But it's just another example of of having control now All right. Well, let's go ahead Considering from last week was actually a really common operation. We had all of our volunteers come during bubble sorts and and we just took for humans would swap themselves just fine. But there needs to be code implement bubble sort, selection sort, So let's consider some code like this. We'll keep it simple we wanted to swap some values like Void because I'm not going to return called swap. So here, for instance, But why is it so complicated? Here, let's actually take a step back. Why don't we do this here. I think we have time Could we get someone to come on up? You have to be comfy being asked to help with your-- oh, So whoever has their no? Now they're pointing it over here. Now, literally an arm is being twisted. OK. Come on down. That backfired. Come on over. And what is your name? AUDIENCE: Marina. DAVID J. MALAN: Marina. Nice to meet you. Who were you trying to volunteer? AUDIENCE: My friend Jesse. DAVID J. MALAN: OK. So here we have for Marina two just so that they're super obvious. And suppose that the problem it's just to swap two values, as two people and we want to swap them. But let's consider these glasses in an array, and you know what? I'd really like you to swap the values. So orange has to go in there, How would you do it? And we'll see if we can AUDIENCE: [INAUDIBLE] DAVID J. MALAN: OK, what-- say it a little louder. All right, yeah. So presumably, you're with how you would do this without here. Let me go ahead and we do have a So if I hand you this, how would AUDIENCE: I would go DAVID J. MALAN: No, that's-- Oh. Well, OK. Go do it-- go with your instincts. OK. Sure, go ahead. Go to whatever your instincts are. Yeah, so a little-- so shouldn't have moved the would be like moving so let's actually do it one have to go back where So how would you swap these now, OK, good. Otherwise we'd be completely by just physically moving it around. So you moved the orange into then you copied the purple and now, presumably, excellent. The orange is going to end and this temporary variable, It was necessary at the time, But a round of applause if we could, So the fact that it that you need some temporary variable and in fact this code here, is reminiscent of where A and B, at the end of the Just like the second have to kind of stay put, even but they're going back is kind of like having and you just have a temporary then you change A with B with whatever the because you temporarily stored it Unfortunately, this code doesn't So let me go over to my a program called swap.c, me whip up something really quickly int main(void). Inside of main let me do something Let me just print out as a y is %i backslash n, plugging Then let me call a swap function Swap x and y And then let me print out just to print out again what they are, 2 first, then 2, 1 the second time. Now how is swap going to be implemented? Let me implement it exactly So void swap int x-- or let's call it int A But I could always call Int tmp gets A, A gets B, B gets tmp. So exactly as I proposed as Mariana really implemented I need to now include my prototype, And I'll just copy/paste that up here, So make swap-- so far, so good-- swap-- x is now 1, y is 2, x is 1, y is 2. So there seems to be a bit of a This code does not in fact work, even Yeah? AUDIENCE: Because A and B have different DAVID J. MALAN: Good, A and B do indeed have and in fact what happens when you calling swap, passing in x and by value, so to speak. And this is a term of you are passing in copies of x and A and B in the context of this Now technically, these I could have called this x, I could have changed this to x, The problem would still remain. Just because you use the same names that doesn't mean they're the same. They just look the same to you. But indeed, swap is going to get copies this scope, so to speak-- x and y will be copies of the original. So for clarity, let me just to make super clear that they're but there's indeed a problem there. This function actually works fine. In fact, notice this. Let me go ahead and print out B is %i backslash n, and And let me do that same thing at the does any work. Let me go ahead and rerun. Make swap, ./swap, Initially, x is 1, y is 2, A but then nope-- x is 1, y is 2. So if anything, I've confirmed Mariana's logic is right, but There's something about using one creating a problem here. The fact that I'm passing in copies of So what in fact is going on? Well again, inside of your computer's and we've been talking it's just this grid of memory locations. It turns out that your in a pretty conventional way. It's not just random, where it just it actually uses different parts of And you have control over a lot of for itself. And let's go ahead and consider that within your computer's do is actually store initially, that you compiled in the top of So when you compile a program and or on a Mac or PC you double the operating system first-- loads all Machine code, into just one big chunk Below that it stores global you have created in your program of any functions. Generally, the top of your file. Globals tend to go at the top there. Then there's this chunk of memory and we saw that word and then there's this other And it turns out that up until this Any time you use local variables in Any time you use malloc, that Now as the arrow suggests, like a problem waiting to happen because heap, and more and more like two things barreling down the end well. And that's actually a problem. If you've ever heard the phrase this is the origin of its name. When you start to use memory by calling lots or using lots and lots you use a lot of this stack memory. Or if you use malloc a lot and keep and never really, or rarely calling and eventually these two things might you're just out of luck. The program will crash or So the onus is on you But this is the design, going on inside of Now within that memory, though, focusing on here, the stack. And in fact, let me go and say that this represents the And so here we have a whole bunch of represents a byte of memory might represent four bytes or something like that. So in my original code that I wrote what is in fact going on We can visualize it like this-- when matter, main is the first function and so I'm just going to label And what were the two variables I Yeah. x and y. And each of those was an so it's deliberate a chunk of wood here that's four bytes. So let me just call this x, and I'm just here. And then I had my other variable y, and What happens when main calls swap Well, it has two variables of its and B is initially 2, but it which is a local variable in that are passed in, so I'm going And what is the value of tmp? Well, we have to look back at the code. tmp initially gets the value of A. so tmp initially gets 1. That's step one in my OK, A equals B. So that is assigned into the A So B is 2, A is and erase this and just overwrite that. So at this moment in the story so that's OK though, because says tmp gets copied 1, gets copied into B, so let and now what happens? Now unfortunately, the code ends. swap doesn't actually do anything is that I could have had a return value. I could go in there but which one am I going to return? The A or the B? The whole goal is to seems kind of lame if you to do something as common per as swapping two values. But what really happens? Well, even though when this main is using this chunk of memory and the stack is just like it grows up, like this. Here's main's memory on the stack. Here's the swap function's It's using three ints instead of two-- instead of only two. What happens when the function The sort of recollection that and garbage values are left. So, adorably, we get rid and there's still data there-- are still there in the computer's because the function has now returned. So they're still in there and this of why there's other stuff in memory necessarily. Sometimes you did put swap returns you only should be But we've never actually We haven't returned anything and we So how could we do this? Well, what if we instead passed calling them A and B. What if they sort of a treasure map that and to the actual y? Today we have that So suppose that we There's a lot of stars going on but let's consider what it What if we pass in not x and y, but respectively-- that will lead swap to Then what we do is we still like an empty glass. It's still a glass, so but what do we want to put We don't want to put A into it, We want to go to that and put whatever's at that address. What do we then want to do? Well, we want to then copy we want to copy over to whatever is at location B's want to copy tmp into So again, we're very deliberately because we don't want to we want to go to these addresses and put values there, So what does this actually mean? Well, if I kind of rewind in this story although I'm going to delete its and I still have A, but this time is how I use A and B. That's A on the left, At this point in the with this new and improved version, Well, x is presumably at some address. Maybe it's like 0x123, as always. What then does A get The value of A is 0x123. What is the value of B? Maybe y is that 0x456. What goes in B? Well, I'm going to put 0x456, Based on these three to store in tmp whatever is at the That's this thing here, so Line two-- I'm going to go to B-- all right, B is 456, so going to store 2 at whatever is is 123, so that's this, I'm going to change this 1 to a 2. Last line of code-- get the and then put it at whatever the and change it to be the value That's it for the code. There's still no return value. swap returns, which means are garbage values now. They can be reused by but now, I've actually Which is to say what came as naturally is not quite as simply functions are isolated from each other. You can pass in values but you If you want one function to affect the you have to 1, understand pass things in as by a pointer here. So if I go back to my code here, Let me get rid of these extra printf's. Let me go in and add all these stars. So I'm dereferencing these and I've got to make one more change. How do I now call swap if swap is That is, the address of an int What do I change on line 11 here? Yeah. Sorry, a little louder. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Sorry, So up here on line 11, we do So that yes, we're technically but this time the copy we're passing and as soon as we have an address, just the foamy finger-- I can point at and actually get a value from the if I even want. So let's cross our fingers Oh my God, so many mistakes. Oh, I didn't remember so let me go way up here and made that change already. Make swap, ./swap, and viola-- Thank you. Thank you. The two values. All right, so what more can we do here? Well, let me consider been deliberately using and so forth, but for a reason. These aren't just training wheels they're actually in place And to illustrate this, let me go How about a file called scanf.c. It turns out that the old really, of getting user input, and let me go ahead and include and without using the CS50 library at get functions. Let me give myself an int called x. Let me just print out what the value of or rather, ask the user for And I'm going to use a function in an integer using %i, and I'm going in at this location. And then I'm going to go ahead and, I'm going to print out with %i All right, so line eight Line five and six is week 1 style code. So the curiosity today is this new line. and notice what I'm doing. I'm using the same syntax which is kind of a little clue-- a want to scan in, that is, read and I'm telling it where to put I can't just say x, because we run into I have to give a little where I want scanf to And so this just tells the This is what you would have in week 1 just to get and there's a whole bunch of but that's the cryptic syntax we Let me go ahead and make scanf here-- oops-- user error. Put the semicolon in the wrong place. Make scanf, Enter. Oh my God. Non void doesn't return a value. Oh, thank you. Strike two. OK. Make scanf. There we go. OK, so scanf-- I'm going to type in a number like So that is the traditional way of The problem, though, is when you get dangerous quickly. Let me delete all of a string s, although wait a anymore-- char star to store a string. Then let me go ahead and just prompt the Then let me go ahead and use scanf, ask and store it at that address. Then let me go ahead and print in just by using the same notation. So here, line five is the same thing that layer today so it's char star s. This is just week one this is scanf will also read from the human's But that's OK, because s is an address. It's correct not to do the ampersand. It's not necessary. A string is and has always The problem, though, arises as follows-- if I do make scanf-- oh my God, what did I do wrong-- I can't-- OK, we have certain Let me do clang of scanf.c, an All right, so I'm overriding that we have in place with make. Let me now run scanf of this version, like, how about hi again. So it didn't even store something This time it's in lowercase, What did I fundamentally Why is this getting And let me illustrate What if I type in not just something What if I do like, hellooooo and that still works. Can I do this again? Let's try again. Right, a really long, This is the nondeterminism kicking in. Enter. All right, damn it. I was trying to trigger but it wouldn't, but It's still not working, but what's and it's not storing my actual input? Yeah. AUDIENCE: Do you have to make a space? DAVID J. MALAN: We have So what we're missing here is So I could do that, I could Well, let the human type in so I could do malloc of 3 So let me give them four characters, whoops. Nope, sorry. clang, I have to-- nope. Dammit. Oh, include stdlib.h-- there we go. That gives me malloc, now I'm now I'm going to rerun it, and now I'm That now works. And let me get a little aggressive now Still works, but I'm getting lucky. Let me try a hellooooooo. Damn it, that still works, too. Sort of. But it actually-- not quite. There's some weirdness It turns out I can also do this. I could actually just say an array of four characters. Let me try this one more time. So let me rerun clang ./scanf. Hellooooooo, clearly exceeding there we go. Thank you, all right. So the point here, though, is you would have had to use the because it seemed to work. But if we hadn't given you GetString you knowing about malloc already or and even now there's a danger. If the human types in five letters, like with the Hello input, will So GetString also has in where we have a that we allocate using malloc as and we use malloc The moment you type in h-e-l-l-o, we're allocating more and more memory so that GetString even though this easy to crash your code did it without the help of a library. So where are we all going with this? Well, let me show you a pave the way for what Let me go ahead and open which is available on for instance, a program like and I'm just going to give that you'll see more details on in We're going to introduce a few You're going to see a function called and it takes two arguments-- the that you might manipulate in Excel or separated values, and then something W for write, depending on whether just open it up, or change it. We're going to introduce You'll see that capital file-- which is a little bit a pointer to an actual file so that you can actually access or heck, even images. And we're going to see going to have the ability to write You'll see functions like Or fwrite-- file write-- which now that you'll have the ability to text files, images, other In fact for instance, just as a teaser we focus on this week where and your goal is to from this forensic image of a And the way you're going to do that every JPEG in the world starts in hexadecimal, but these three numbers. And so in fact, just as an example you'll see on the If I scroll through here, that does a little something like this. And again, more on this-- if we could hit the button-- there we go. So here we have the notion of a byte We'll see a data type called byte, This gives me three bytes. And you're going to learn which reads from a file some number We might then use code like this. If bytes bracket zero bracket 1 equals 0xD8 and bytes bracket bytes I just claimed represent a Let me go ahead and run Let me copy jpeg.c into my Let me do make jpeg, and let me run called lecture.jpeg, and I Well, what is that file? Let me open it up for us, called is that same photo with which we began But what we're also is start to implement our own sort we might take images and actually creates different versions thereof. For instance, using a called BMP, which essentially lays out top to bottom, in a grid. You're going to see a struct-- a data struct in C that's than the candidate or the person structure looks like this, which is just but we'll walk you through And we might take a you to run a few different like a black and white filter, to give it some old school feel, or or blur it, even in this way. And just to end on a note of this code ready to go that doesn't it just implements one filter initially. Let me go ahead and just ready I'm going to go into my and you'll see a few a tour of this coming week is a version of this structure that And let me show you this file here, called filter that I've already But the ones we give you for the piece this function called filter the width of an image, and So rows and columns have a loop like this that iterates over to bottom, left to right. And then notice what I'm going to change the blue and the green value to But why? Well, the image I have whereby we have this has old school style-- a And if you don't happen to have in glasses that essentially getting rid of the green in the you can actually-- I'm actually can read this right is hidden behind all of this red noise. But if using my code written here in in the picture and I get rid of essentially implementing this red filter where you only see red-- well, let's go ahead and Make filter, run ./filter I'm going to save it in a and with one final flourish message.bmp, which is the result and hopefully now you All right, that's it for CS50! We'll see you next time. [MUSIC PLAYING] SPEAKER 1: All right. This is CS 50. And this is already week 5, our last week in C together. In fact, in just a few days' and much more cryptic going to be distilled into When we transition to a And with Python, we'll still have our and so forth. But a lot of the low-level plumbing struggling with, frustrated by, especially, now that And it feels like you probably In Python, and in a lot so to speak-- more modern, you'll be able to do so much more And indeed, we're going to start that other people wrote. Frameworks, which is collections of And on top of all that, will you be impressive projects, that actually solve Particularly, by way of So last week though, in week 4, And we've been treating this is like a canvas, right. At the end of the day, it's just And it's really up to you And how you interconnect them, how And arrays, were like We started playing Just contiguous chunks of memory. Back-to-back, to back. But let's consider, for a pretty quickly arise with arrays. And then, today focus on what more Using your computer's memory as to create even To represent information, to solve more interesting problems. So here's an array of size 3. Maybe, the size of 3 integers. And suppose that this And at this point in the story, 1, 2 and 3. And suppose, whatever the context, to this array. Like, the number 4. Well, instinctively, where If this is your computer's have this array 1, 2, 3, from what. Left to right. Where should the number 4 Yeah, what do you think? AUDIENCE: Replace number 1. SPEAKER 1: Sorry? AUDIENCE: Replace number 1. SPEAKER 1: Oh, OK. So you could replace number 1. I don't really like like to keep number 1 around. But that's an option. But I'm losing, of course, information. So what else could I do if Over there? AUDIENCE: On the right side of 3. SPEAKER 1: Yeah. So, I mean, it feels like to these, which seems kind that it probably belongs But recall last week, as we started there's other stuff And if fill that in, ideally, we'd If we're maintaining this kind of order. But recall in the context there might be other stuff there. Some of these garbage but we don't really know As represented by Oscar here. But there might actually Like, if your program has not but also a string that It could be that your computer has after this array. Why? Well, maybe, you created the and filled it with 1, 2, 3. Maybe the next line of Or maybe just hard coded a string And so you painted yourself Now I think you might claim, But that's problematic We don't want to do that. So where else could the 4 go? Or how do we solve this problem and there's clearly memory available. Because those garbage values are junk So we could certainly reuse those. Where could the 4, and OK. So I'm hearing we could Maybe, replace some of And honestly, we have a lot of options. We could use any of these We could use any of these down The point is there is plenty indicated by these Oscars, where 6 or more integers. The catch is that we Or we just got unlucky. And 1, 2, 3 ended up back-to-back with All right, so that's fine. Let's go ahead and assume that And we'll plop the new So I'm going to go ahead The 2 over. The 3 over. And then, ultimately, once I can throw away, essentially, Because I have it now And I can populate it with the number 4. All right. So problem solved. That is a correct potential But, what's the trade off? And this is something we're going to What's the downside of having Yeah. I'm adding a lot of running time. It took me a lot of effort to Now, granted, it's a small array. 3 numbers, who cares. It's going to be over But if we start talking web application data sets, Where you have not just a few, but a few million pieces of data. This is probably a suboptimal move all your data from Because who's to say to paint ourselves into a new corner. And it would feel like you're wasting And, ultimately, just costing In fact, if we put this now into from a few weeks back, what might be for an array? Let's start simple. A throwback a couple of weeks ago. If you're using an array, to of a Search algorithm in Big O notation? So, maybe, in the worst case. If you've got n numbers, 3 in this Big O of what for Search? Yeah. What do you think? AUDIENCE: Big O of n. SPEAKER 1: Big O of n. And what's your intuition for that? AUDIENCE: [INAUDIBLE]. SPEAKER 1: OK. Yeah. So if we go through each element, then Search is going to take If, though, we're talking about And now I'll explicitly stipulate Does that buy us anything? What would the Big O notation be be it of size 3, or 4, AUDIENCE: Big O of n. SPEAKER 1: Big O of, not n, but rather? AUDIENCE: Log n. SPEAKER 1: Log n, right. Because we could use per week zero we'd have to deal with some rounding. Because there's not a perfect But you could use binary search. Go to the middle roughly. And then go left or until you find the So Search remains in Big O But what about insertion, now? If we start to think Like, adding a number to this array, app, or Google finding So insertion happens all the time. What's the running time of Insert? When it comes to inserting into How many steps might that take? Big O of n. It would be, indeed, n. Why? Because in the worst case, you have to allocate, it Maybe, taking over some of But the catch is, even inserting one new number, you have to copy over all the darn So if your original array of is going to take Big O of n plus 1. But we can throw away the plus 1 So Insert now becomes Big O of n. And that might not be ideal. Because if you're in the habit that could start to add And this is why computer programs, could be slow. If you're not being mindful So what about, just for good And maybe, the best case. Well just to recap and Search could just take one step. Because you might just get you're looking for is right there in Or even linear search, for that matter. And insert 2. If there's enough room, and we didn't 1, 2, and 3, to a new location. You could get lucky. And we could have, as put the number 4 right there at the end. And if we don't get lucky, If we do get lucky, it might just take In fact, let me go ahead and do this. How about we do something like this? Let me switch over to some code here. Let me start to make a And in List.C, let's So we follow the breadcrumbs we've So in this List.C, I'm going Int main(void) as usual. Then inside of my code here, I'm the first version of memory. So int list 3 is now implemented So we're rewinding for And then, let me just At the first location will be 1. At the next location will be 2. And at the last location will be 3. So the array is zero indexed always. I, for just the sake am putting in the numbers 1, 2, All right. So now let's just print these out. 4 int i gets 0. I less than 3, i++. Let's go ahead now and %i/n list [i]. So very simple program, inspired Just to create and then print So let's Make List. So far, so good. ./list Now let's start to practice some of what So let me go in now and get And let me zoom out a little bit And now let's begin to So if I'm going to do so that I'm allocating these let me go ahead and do this. Let me give myself a list that's of type of 3 times the size of an int, so what enough memory for that very first Which was the array But laying the foundation which was ultimately the goal. So my syntax is a little different here. I'm going to use malloc and get memory called it last week. Instead of using the stack by just int list 3. That is to say this line of code from identical to this line of But the first line of on the stack, automatically, for me. The second line of code, is creating an array of size 3, And that's important because it was only last week, malloc. That you can actually ask for more When you just use the you have permanently given You cannot add to that in code. So let me go ahead and do this. If list==null, something went wrong. The computers out of memory. So let's just return 1 and There's nothing to see here. So just a good error check there. Now let me go ahead and So list [0] will be 1 again. List [1] will be 2. And list [2] will be 3. So that's the same kind And notice this equivalence. Recall that there's this relationship And arrays are really just doing where the square bracket notation is. So if I've asked myself here, in line it is perfectly OK to treat it now like Because the computer will and find the first location, If you really want to be you could say list=1, That's the same thing pointer arithmetic, which we But this is atrocious to It's just not very user friendly. It's longer to type, so allocating memory dynamically would just use the more All right. So let's go on. Now suppose time passes I really wanted this array to Now, obviously, I could just But suppose that this is And I've realized, at to be able to dynamically add more reason. Well let me go ahead and do this. Let me just say, all be the result of asking for 4 And then, I could do something Now this is buggy, potentially, But let me ask first, what's really The goal at hand is to start with And I want to add a number 4 to it. So at the moment, in line 17, I've asked Just like the picture. And then I'm adding the number 4 to it. But I have skipped a few Yeah. AUDIENCE: You don't know SPEAKER 1: Yeah. I don't necessarily know where It's probably not adjacent to the previous chunk. And so, yes, even though I'm I haven't copied the 1, the 2, or So well let me fix-- well, that's actually, indeed, I am orphaning the If you think of the picture that up here on line 5 that allocates This code is fine. This code is fine. But as soon as I do this, I'm And saying no, don't point Point at this chunk of memory, at where the original chunk of memory is. So the right way to do something like Let me go ahead and give And I'll literally call it TMP. T-M-P, like I did last week. So that I can now ask the computer for of size 4. I'm going to again say I'm going to say bad So let me just return 1. And you know what, free the original list before I quit. Because remember from you use malloc you But this chunk of code here If there's no more memory, I'm just going to clean But now, if I have asked now I can do this 4 int i gets 0. I is less than 3, i++. What if I do something like this? TMP [i] equals list [i]. That would seem to have the effect to the other. And then, I think I need to gets the number 4, for instance. Again, I'm hard coding the numbers After I've done this, I could now set list equals to TMP. And now, I have updated So let me go ahead and do this. 4 int i gets 0. I is less than 4, i++. Let me go ahead and print each of these And then, I'm going to return 0 just Now so to recap, we of size 3 and plug-in Time passes. And then, I realize, wait a And so I asked the computer This one of size 4. Just as a safety check, I make Because if it does I'm out of memory. So I should just quit altogether. But once I'm sure that going to copy all the values from And then, I'm going to add my new And then, now that I'm done playing I'm going to remember the addresses of this And then, I'm going to print So at least, aesthetically, when I except for my missing semicolon. Let me try this again. When I make lists, Oh OK. What did I do this time? Implicitly declaring a What's my mistake any time AUDIENCE: Library. SPEAKER 1: Yeah. A library. So up here, I forgot to do include Let me go ahead and, There we go. So I fixed that dot/list. And I should see 1, 2, 3, 4. But they're still a bug here. Does anyone see the AUDIENCE: You forgot to free them. SPEAKER 1: I'm sorry, say again. AUDIENCE: You forgot to free them. SPEAKER 1: I forgot to And we could see this, even if not If I do something like remember our tool from this past week. Let me increase the size of my The output is crazy cryptic at first. But, notice that I have definitely And indeed, it's even in which some of those bytes were lost. So let me go ahead and back to my code. And indeed, I think what I need to do pointing it at this new chunk I think I now need to say free the old list of memory. And then, change its value. So if I now do Make List and do dot And, if I cross my fingers after increasing my window Oh, still a bug. So better. It seems like less memory is lost. What have I now forgotten to do? AUDIENCE: You forgot to free the end. SPEAKER 1: I forgot to free Because I still have a chunk of So let me go to the very And after I'm done senselessly let me free the new list. And now let me do Make List, dot/list. It's still works, visually. Now let's do Valgrind And now, hopefully, all No leaks are possible. So this is perhaps the best output I used the heap, but I freed So there were 2 fixes needed there. All right. Any questions then on this array-based is statically allocating By just hard coding the number 3. The second version now is using not the stack but the heap. But, it too, suffers from the of having to copy all those OK. A hand was over here. AUDIENCE: Why do you not SPEAKER 1: Good question. Why did I not have to free the TMP? I essentially did eventually. Because TMP was pointing But on line 33 here, identical to what TMP was pointing at. And so, when I finally freed the list, In fact, if I wanted to, I could say But conceptually, it's wrong. Because at this point in the story, I that temporary variable. But they were the same at Yeah. AUDIENCE: Is [? the line ?] part of it? SPEAKER 1: Good question. And long story short, is still in the world of arrays. The only distinction in version 1, when I said int list So-called statically allocated This version now is still dealing with and using dynamic memory allocation. So that I can still use an we started talking about. But I can at least grow So we haven't even now solved this, even That's going to come next. Yeah. AUDIENCE: How are you able to free SPEAKER 1: How am I able to free list? I freed the original address of list. I, then, changed what list is storing. I'm moving its arrow to And that is perfectly reasonable because now list is pointing And TMP is what was given the return So that chunk of memory is valid. So these are just squares There's just pointers inside of them. So what I'm technically pointing I'm not freeing freeing the chunk of memory that begins Therefore, if a few lines later, I Totally reasonable to then touch that Because you're not freeing you're freeing the Good distinction. All right. So let me back up here and So let's finish this with Because it turns out, to actually resize an array And there's another function in stdlib And I'm just going to go in and here so that I can do the following. Let me go ahead and just so we can keep track of what's So dynamically allocate Assign 3 numbers to that array. Time passes. Allocate new array of size 4. Copy numbers from old And add fourth number to new array. Free old array. Remember, if you will, new array And now, print new array. Free new array. Hopefully, that helps. And we'll post this code online after So it turns out that we can reduce Not so much with the printing Turns out c does have a that can actually handle the resizing I'm going to scroll up allocated a new array of size 4. And I'm instead going to say this, Now, previously this wasn't Because recall that we into a corner with the where &quot;Hello, world&quot; happened to But let me do this. Let me use realloc, for re-allocate. And pass in not just the size but also the address Which, again, is this array called list. All right. The code thereafter is But what I don't need to do is this. So realloc is a pretty handy If at the very beginning of class, And someone's instinct was to just plop If there's available memory, And boom, it will just grow the array If, though, it realizes, sorry, there's or something else there, the trouble of moving that whole originally, to a new chunk of memory. And then realloc will return to you, And it will handle the process So you do not need to do this yourself. So in fact, let me go ahead So realloc just condenses, a lot of what Whereby, realloc handles it for you. All right. So that's the final improvement So what now, knowing what can we now do with it that Because the world is And our apps, and our phones, and our if we're just constantly wasting What could we perhaps do instead? Well there's one new that builds on these 3 pieces Recall, that we've is a keyword in C, that just lets Your own variable, if you will, Which lets you say a person has a name Or a candidate has a name You can encapsulate multiple pieces of What did we use the Dot Notation What does the Dot operator do in C? AUDIENCE: Access the structure. SPEAKER 1: Perfect. To access the field So if you've got a person you could say something like if person is the name Star, of course, we've Like way back in week 1, we Last week, we began to see it whereby, you use it Like, int* p, or something like that. But we also saw it in was like the opposite, which Which says if this is if this is a variable like a pointer, then with no int or no char, That means go to that address. And it dereferences the pointer So it turns out that using you can actually start to now use you want. And even next week, when and you start to get a Like a single line of more in Python than it does in C. It And just so you've seen it already. It turns out that it's so to go inside of a structure and that there's shorthand syntactic sugar. That literally looks like an arrow. So recall last week, I was in with the big foam finger. This arrow notation, a denotes going to an address and But we'll see this in So what might be the we saw a moment ago whereby, we had And our memory, a few moments We could just copy the whole existing and go about our business. What would another, perhaps be, that doesn't require Maybe hang in there for know the buzz phrase we're looking for But if we want to avoid but we still want to be able What could we do? Yeah. So maybe create some kind just point at a new location, right. In an ideal world, even is being used by this h in maybe we could somehow use Like an arrow, that says after the to this location in memory. And you just stitch together so that each one leads to the next. It's not necessarily the case That would have the of costing us a little bit of space. Like a pointer, which recall, Typically 8 bytes or 64 bits. But I don't have to copy potentially to add one more number. And so these things do have a name. And indeed, these things would be called a linked list. A linked list captures of linking together things in memory. So let's take a look at an example. Here's a computer's Suppose that I'm trying Let's generalize it as An array has a very specific meaning. It's memory that's contiguous, At the end of the day, I as the 1, 2, 3, 4, and so forth. I don't really care how it's stored. I don't care how it's stored I just wanted to work So suppose that I first And, who knows, it ends up, for the sake of discussion. All right. Maybe there's something already here. And heck, maybe there's but there's plenty of other options And suppose that, for the first available happens to be over here at location So that's where I'm going And where might the number 3 end up? Oh I don't know, maybe The point being, I don't know everything else that's I just care that there are at I can put my 1, my 2, and my 3. But the catch is, now that we can't just naively assume that you're at the next number. Add 2 to an index, and boom Now you have to leave these little to lead from one to the other. And sometimes, it might be Maybe, it's a whole gigabyte away So how might I do this? Like where do these pointers All right. All I have access to here are bytes. I've already stored the So what more should I do? OK, yeah. So let me, you put the pointers So let me at least plan ahead, so that recall from last week, for some for space for just the number. Let me start getting malloc for enough space for the number So it's a little more aggressive But I'm planning ahead. And here is an example of a trade off. Almost any time in CS, when you start Or if you try to conserve space, It's being that trade off there. So how might I solve this? Well let me abstract this away. And either next to or below, I'm for the sake of discussion. So the arrows are a bit prettier. I've asked malloc for it would seem, than I previously needed. But I'm going to use this second chunk And I'm going to use this chunk essentially, stitching So what should go in this first box? Well, I claim the number, 0X456. And it's written in hex because But this is the equivalent of drawing As a little check here, what if the goal is to stitch these Feel free to just shout this out. AUDIENCE: 0X789. SPEAKER 1: OK, that worked well. So 0X789, indeed. And you can't do that with the hands So 0X789 should go here because that's And then, we don't really have This has to have a value, right. Because at the end of the day, it's So what value should go here, AUDIENCE: 0. SPEAKER 1: So it could be 0X123. The implication being that Which is OK, but If any of you have accidentally because you had an infinite loop, to give yourself the accidental What might be simpler than AUDIENCE: Null. SPEAKER 1: Say again? AUDIENCE: Null. SPEAKER 1: So just the null character. Not N-U-L, confusingly, which But N-U-L-L, as we Which is the same as 0x0. So this is just a special value decided that if you store the address There's never going to be Therefore, it's a sentinel that indicates that's it. There's nowhere further to go. It's OK to come back to your But we'd better be remember where did the list start If you start looping around All right. But these addresses, who really if we abstract this away. It really just now looks like this. And indeed, this is how most anyone if having a discussion at work. Talking about what data use to solve some problem We don't care generally We care that in code we can access them. But in terms of the concept the right way to think about this. All right, let me pause any questions on this idea of creating not just the numbers like 1, So that you have little that can lead you from one to the next. Any questions on these linked lists? Any questions? No? All right. Oh, yeah. Over here. AUDIENCE: So does this takes SPEAKER 1: This does take because I now need space And to be clear, I technically Thus far, in the class, we've like, 1, 2 and 3, as I made the claim last week that tend to be 8 bytes or 64 bits. So, technically, this box should It was just going to look a So I abstracted it away. But, indeed, you're using AUDIENCE: [INAUDIBLE]. SPEAKER 1: Oh, how does-- sorry. How does the computer identify So, for instance, garbage For now, think of that So when you ask malloc for memory, malloc keeps track of the it has handed to as valid values. The other type of memory you Because recall we briefly from the heap, which was drawn at the There's also stack memory, which is And where all of the memory And that was drawn in the That's just an artist's The compiler, essentially, keep track of which values are Or really the underlying will keep track of that for you. So it's managed for you at that point. All right. Good question. Sorry it took me a bit to catch on. So let's now translate How could we implement this idea And that's a term of our NCS. Whenever you have some data structure N-O-D-E, is the generic term for that. So each of these might Well, how can we do this? Well a couple of weeks ago, we saw like a student or a candidate. And a student, or rather a person, And we used a few pieces of syntax here. One, we use the struct keyword, We use typedef, which defines the type representing that whole structure. So we probably have the to build up this thing called a node. And just to be clear, what should do we think? It's not going to be a name But what should a node have in Yeah? AUDIENCE: [? Data. ?] SPEAKER 1: So a number like a So let's translate this to actual code. So let's rename person to node And the number is easy. If it's just going to We can just say int number, you want to call that particular field. The next one is a little non-obvious. And this is where things but, in retrospect, it Let me propose that, ideally, we And I could call the word Next just means what comes after So a lot of CS people would the name of this pointer. But there's a catch here. C and C compilers are They only look at code top And any time they encounter seen before, bad things happen. Like, you can't compile your code. You get some cryptic And that seems to be Because if the compiler is reading it's going to say, oh, should be a variable called next. Which is of type node*. What the heck is a node? Because it literally does later, after that semicolon. So the way to avoid this, which is that you can temporarily name this And then, down here inside of the And then, you leave the rest alone. This is a workaround this is teaching the compiler, from a data structure called struct node. Down here, you're shortening the name Why? It's just a little more convenient But you do have to write struct But that's OK because it's now, as of that first line of code. So that's the only between what we did last week We just now have to use this All right. Yeah, question. AUDIENCE: So [INAUDIBLE] have like to another [INAUDIBLE]. SPEAKER 1: Why is the next variable star pointer, for instance? So think about the picture Technically, yes, each of these is pointing at the number. But that's not alone. They need to point at the Because the computer, in turn, needs to know that this It is a whole node. Inside of a node is a number So when you draw these incorrect to point at just the number. Because that throws would leave the compiler Where the heck is the pointer? You have to tell it that so it knows a few bytes away Good question. Yeah. AUDIENCE: How do you [INAUDIBLE]. SPEAKER 1: Really good question. It would seem that just as required twice as much memory, So, technically, twice as much Here, too, it looks like we're And to my comment earlier, it's because these pointers are 8 bytes, and is. The differences are these. In the context of the array, you So, yes, you needed But then you were quickly So you weren't consuming long-term, The difference here, too, is it turns out it's going to be to insert new numbers in here. Because I'm not going to have And even though I might still have is going to take some not going to have to be asking for And certain operations in the computer, back memory, tends to be slower. So we get to avoid There's going to be This is not all upside. But we'll see in a bit just what some All right. So from here, if we go back to the let's start to now build up a How do you go about, in C, Well, at the moment, it would You declare a variable, That itself stores That's what node* means. The address of a node. So if you want to store you just create a variable And you just say that to be pointing at the first node in a Because malloc is ultimately going get at any one particular All right. So let's actually do When you write a line of and I do not initialize it to an equal sign. It does exist in memory as a box, But I've deliberately Why? To connote what exactly? AUDIENCE: Garbage value. SPEAKER 1: It's a garbage value. I have been allocated the Which is going to give me 64 bits with this box. But if I myself have not it's not going to get magically for me. It's not going to even give me a node. This is literally just going to be an So what would be a solution here? Suppose that I'm beginning but I don't have any nodes yet. What would be a sensible thing to AUDIENCE: Null. SPEAKER 1: Yeah, again. AUDIENCE: To null. SPEAKER 1: So just null, right. When in doubt with a good thing to so at least it's not a garbage value. It's a known value. Invalid, yes. But it's a special for with a conditional, or the like. So this might be a better even before you've inserted any All right. So after that, how can we go about So now the story looks like this. Oscar is gone because inside Just because it's nice and clean, and Well, if I want to add the number 1 Well, perhaps I could Borrowing inspiration from last week. Let's ask malloc for enough And this gets to your question earlier, I don't just need space for an int and I need space for both. And I gave that thing a name, node. So size of node figures out And gives me back the This, then, stores the address in what I'll temporarily called n. Just to represent a generic new node. And it's of type node*. Because just like last week when I and I stored it in an int* pointer. This week, if I'm asking I'm storing it in a node* pointer. So technically, nothing new of art in data structure called node. All right. So what does that do for me? It essentially draws a I still have my list variable from to null. And that's why I've drawn it blank. I also now have a n, which I initialize to Which gave me one of But I've drawn it having because I don't know what int is there. I don't know what pointer is there. It's garbage values because malloc does There is another function for that. But malloc alone just says, Deal with whatever is there. So how can I go about Well, suppose I want to insert the A list of size 1, I could And this is where you have to My conditional here is asking the So that is, if malloc and I don't have to quit altogether If n does not equal null, but I'm going to go ahead and do this. And this is cryptic looking syntax now. But does someone want to take a stab to English, in some sense? How might you explain what that number equals 1. Let me go further back. Nope? OK, over here. Yeah. AUDIENCE: [INAUDIBLE]. SPEAKER 1: Perfect. The place that n is pointing Or using the vernacular of going and set it's number field to 1. However you want to think But the * again is the And we're doing the haven't needed to do before because we structures together until today. This just means go there first. And then once you're You don't want to do one So this is just enforcing The parentheses just like All right. So this line of code is cryptic. It's ugly. It's not something most Thankfully, there's that syntactic to just this. And this, even though should eventually feel Because this now is shorthand Go there as by following the arrow. And when you get there, In this case, to 1. So most people would not It's just ugly. It's a couple extra keystrokes. This just looks more like the artist's And how most CS people would think about in some form. All right. So what have we just done? The picture now, after setting number to So there's still one step missing. And that's, of course, to the pointer in this new node So I bet we could do this like this. With a different line to say if n does not equal null, Or more pedantically, go and then update the next field And again, this is just Technically speaking, this to null if we're going to keep But I'm doing it step-by-step so And there's no bugs in But I'm still not done. There's one last thing I'm If the goal, ultimately, was to insert what's the last step I Just been English is fine. Yeah. AUDIENCE: Set the pointer value to null. SPEAKER 1: Yes. I now need to update the actual list, to point at this brand new node. That is now perfectly initialized as Yeah, technically, this But I describe this deliberately I just needed this to get it back from This is the long term So I'm going to want to do List equals n. And this seems a little But again, think about At the moment this is null list at the beginning of our story. N is the address of the beginning, and So it stands to reason that that has the effect of Or really just copying the so that now the picture looks like this. And heck, if this was a temporary And now, this is the picture. So an annoying number to walk through verbally like this. But it's just malloc to initialize the 2 fields inside of you're on your way. I didn't have to copy anything. I just had to insert Let me pause here to see if there's And we'll see before long it all AUDIENCE: So if the SPEAKER 1: Yes. I drew them separately just of doing each thing very methodically. In real code, as we'll I could have and should all inside of one conditional after I could set number to a value like 1. And I could set the pointer All right. Well let's translate, then, that allows us to build up a linked to before. But now, using this new primitive. So I'm going to go I'm going to go ahead now and delete was entirely array-based. And now, inside of my main function, I'm going to first give And I'm going to call that node* list. And I'm going to initialize that But I'm also now going to have to what this node is. So recall that I might do something Inside of this struct node, I'm I'll call number of type int. And I'm going to have with a * that says the next And I'm going to call this whole instead of struct node. Now as an aside, for those of you is between struct and node. Technically, I could Not use typedef and not This syntax here would actually type called, verbosely, struct node. And I could use this throughout Struct node. That just gets a little tedious. And it would be nicer just to refer as a node. So what typedef has again, lets us invent our own And this just has the effect node without the need, subsequently, to Just FYI. All right. So now that this thing exists in Let's add a number to list. And to do this, I'm going to I'll call it n for consistency. I'm going to use malloc to just like in our slides. And then, I'm going to If n equals equals null, I'm going I'm just going to quit because there's nothing useful But most likely my computer is So I'm going to assume we can keep If n does not equal null, and that I'm going to say n []-- I'm going to build this up backwards. Well let's do. That's OK, let's go ahead and do this. N [number] equals 1. And then n [arrow next] equals null. And now, update list to point So at this point in the constructed what was that first This is the corresponding code via Suppose now, we want to add So let's do this again. Add a number to list. How might I do this? Well, I don't need to the same temporary variables before. So this time, I'm just going to say n I'm, again, going to So if n equals equals null, then let's But, I have to be a Technically speaking, to do before I quit out of my Free the memory that did So I think it suffices to free what All right. Now, if all was well, though, let's And now, n [arrow next] equals null. And now, let's go ahead If I go ahead and do I think what we've just done is of this in the computer's memory. By going to the list is synonymous with the 1 And store the address of what was n, And I'm just throwing away, in the All right. One last thing to do. Let me go down here and say, add Let's do it one more time. Size of node. And clearly, in a real program, we And do this dynamically or a function But just to go through the If n equals equals null, out Let's return 1, but we and even the second node, list [next]. But I've deliberately done this poorly. All right. This is a little more subtle now. And let me get rid of the highlighting If n happens to equal equal went wrong they're out of memory, And again, it's not that I'm I'm freeing the addresses But there's also a And it's subtle. Let me ask more pointedly. This line here, 43, what is Can I go to you? AUDIENCE: You're freeing list 2 times. SPEAKER 1: I'm freeing, not so. That's OK. I'm not freeing list 2 times. Technically, I'm freeing But let me just ask the What am I freeing with Which node? I think node number 1. Why? Because if 1 is at the list contains the address And so this frees that node. This line of code, you might it's probably freeing the node number 2. But this is bad. And this is subtle. Valgrind might help you catch this. But by eyeing it, it's You should never touch memory And so, the fact that I did Because I'm telling the I don't need the list address anymore. Do with it what you want. And then, literally one line later, Let me actually go to and look at the next It's too late. You've already given up So it's an easy fix in But we should be freeing and then the first one in, essentially, reverse order. And again, Valgrind would But that's the kind of thing one touching memory at all. You cannot touch memory But here is my last step. Let me go ahead and update The next node of n to be null. And then, just like I think I can do list And that has the effect now of essentially, this data structure. Very manually. Very pedantically. Like, in a better world, we'd that are automating this process. But, for now, we're doing it just So at this point, unfortunately, It's no longer as easy as int Because you cannot just Because pointer arithmetic when it's you, who are stitching In all of our past examples been trusting that all of the bytes in So it's perfectly reasonable for to just figure out, oh, well if you [1], it's one location over. [2], it's one location over. This is way less obvious now. Because even though you might want to list, or the second, or the third, you by doing a bit of math. Instead, you have to So with linked lists, you can't use because one node might be here, You can't just use some simple offset. So I think our code is going And this might look scary at of some of the basic definitions here. Let me do a for-loop that actually to the list itself. I'm going to keep doing this, so And on each iteration to update TMP to be And I'll remind you in a moment But when I print something here Because it's still a number But what I want to print out is the So maybe the ugliest Because it's mixing, not just itself was a bit cryptic weeks ago. But now, I'm using pointers But I'm not violating the Recall that a for-loop has 3 What do you want to initialize first? What condition do you want to And what update do you want to make So with that basic is giving me a temporary that is initialized to So it's like pointing my Then, I'm asking the question, Well, hopefully, not because that is the number 1 node. So, of course, it Null won't be until we get So what do I do? I started this TMP variable. I follow the arrow and go to What do I then do? The for-loop says, is at TMP, by following the arrow That, then, has the result of being No, of course, it doesn't equal is the number 2 node. Null is still at the very end. So I print out the number 2. Next step, I update TMP one more That, then, does not yet equal null. So I go ahead and print Then one last time, I update TMP to But after 1, 2, 3, that And so, I break out of So if I do this in doing, if I now use my finger I initialize TMP to be whatever That's obviously not null is that TMP, follow the arrow Then I update TMP to point here. Then I update TMP to point here. Then I update TMP to point here. Wait, that's null. The for-loop ends. So, again, admittedly much more cryptic and so forth. But it's just a different Yes. AUDIENCE: How does it happen that Because it seems to me that addresses- SPEAKER 1: Good question. How is it that I'm actually printing addresses instead. The compiler is helping me here. Because I taught it, in the what a node is. Which looks like this here. The compiler knows that a node has down here, in the for-loop. Because I'm iterating using a node* the compiler knows that any I'm pointing at the whole node. Doesn't matter where specifically in It's, ultimately, pointing And the fact that I, then, use adjust your finger slightly. So you're literally pointing at the So that's sufficient information for Good question. Other questions then Yeah, in the back. AUDIENCE: How would you-- SPEAKER 1: How would I use a for-loop You will do something like this, We will give you some of the But in this coming weeks materials But let me not spoil it just yet. Fair question, though. Yeah. AUDIENCE: So I had a SPEAKER 1: OK. AUDIENCE: Is line 49 SPEAKER 1: Good question. Is line 49 acceptable, even We didn't free it in line You can only reach line 49, And you do not return on line 45. So that's safe. I was only doing those freeing, if I anyway, at that point. Good question. And, yeah. AUDIENCE: I had a quick question. Is TMP [INAUDIBLE]. SPEAKER 1: Correct You're asking does that mean you You never have to free pointers, per se. You should only free addresses that So I haven't finished But you're not freeing variables. You're not freeing like, fields. You are freeing specific So the last thing, and I because it too is a little cryptic. Here is how you can free, In the world of arrays, You just say free list. You return 0 and you're done. Not with a linked list. Because, again, the what you have stitched together all over the computer's memory. You need to follow those arrows. So one way to do this While the list itself is not null, What do I want to do? I'm going to give myself a And it's a different TMP because It's inside of the while loop instead I am going to initialize TMP to Just so I can get one Why am I doing this? Because now, I can boldly which does not mean the whole list. Again, I'm freeing the is the address of the number 1 node. That's what list is. It's just the address So if I first use TMP 2 slightly in the middle of the picture, at the moment, to free list. That is the address of the first node. Now I'm going to say, all right, once I can update the list And now, the loop repeats. So what's happening here? If you think about this picture, TMP but list arrow next. So TMP, represented by my right hand Totally safe and reasonable to the address of the number 1 node. That has the effect of just telling the computer you can The last line of code I wrote 2, at which point my loop proceeded And only once my finger is the null symbol, will the loop as I'll toggle back to, break out. And there's nothing more to be freed. So again, what you'll see, more on that later, is an opportunity But also these ideas. But again, even though the syntax we're still using basics like We're just starting to now than letting the computer do as we previously benefited from. At the very end of this thing, I'm And I think, then, we're good to go. All right. Questions on this linked list code now? And again, we'll walk through this Yeah. AUDIENCE: Can you explain the while SPEAKER 1: Sure. Can we explain this while loop So notice that, first, I'm just Is the list null? Because if it is, there's However, while the list is not what do we want to do? I want to create a temporary variable that list arrow next is pointing at. So what does that mean? Here is list. List arrow next is whatever So if my right hand represents I'm literally pointing at the The next line of code, And unlike, in our world of ago where that just meant you now have taken over control over the in ways that you didn't with the array. The computer knew how to free malloc the whole thing at once. You are now mallocing the And the operating system does where all these nodes are. So when you free list, the value of the list variable, Then my last line of code, which I'll list to now ignore the And the story then repeats. So, again, it's just a this new syntax of star notation, to do the equivalent of walking Following all of these breadcrumbs. But it does take admittedly Syntax, you only have to do one week. But, again, next week to abstract a lot of But none of this It's just that someone else, the will have automated this stuff for us. The goal this week is is we're going to get for All right. Questions on these length lists. All right. Just, yeah, in the back. AUDIENCE: So are the while for the freeing [INAUDIBLE]. SPEAKER 1: Fair question. Let me summarize as, could we Absolutely. It just is a matter of style. It's a little more elegant to do it But other people will Anything you can do with a while and vise versa. Do while loops, recall, But they will always But for-loops and while loops AUDIENCE: Thank you. SPEAKER 1: Sure. Other questions? All right, well let's just Just to see what some of without getting into the weeds of code. Indeed, we'll try to save some of But instead, let's imagine that we I can offer, in exchange for a to bring to the next game, perhaps. Could we get maybe just Come on up. You will be our linked What's your name? AUDIENCE: Pedro. SPEAKER 1: Pedro, come on up. All right, thank you to Pedro. [AUDIENCE CLAPPING] And if you want to just But you are a null pointer so as though you're pointing at 0. All right. So Pedro is our linked list might look a little something like this Now suppose that we want to go ahead Can we get a volunteer OK. You jumped out of your seat. Do you want to come up? OK, you really want All right. Round of applause, sure. [AUDIENCE CLAPPING] OK. And what's your name? AUDIENCE: Caleb. SPEAKER 1: Say again? AUDIENCE: Caleb. SPEAKER 1: Halen? AUDIENCE: Caleb. SPEAKER 1: Caleb. Caleb, sorry. All right. So here is your number And here is your pointer. And come on, let's say that there That's perfect. So Caleb got malloced, So now if we want to insert Caleb and well what do we need to do? I already initialized you to 2. And pointing as you you're initialized to Pedro, what you should you-- perfect. What should Pedro do. That's fine, too. So Pedro is now pointing at the list. So now our list looks a So far, so good. All is well. So the first couple of these Let's insert one more, if anyone Here, how about right in the middle. Come on down. And just in anticipation, how OK, your friends are pointing at you. Do you want to come This is a pool of memory, if you will. What's your name? AUDIENCE: Hannah. SPEAKER 1: Hannah. All right, Hanna. You are number 4. [AUDIENCE CLAPPING] And hang there for just a moment. All right. So we've just malloced Hannah. And Hannah, how about Hannah, in just some random location. All right. So what should we now do, if the How about? So Pedro, do you have AUDIENCE: No. SPEAKER 1: No. All right. Caleb, what do you have to do? OK. And Hannah what should you be doing? I would, it's just for you for now, so OK. So, again demonstrating the fact we had our nice, clean array contiguously, these guys are So let's malloc another. How about number 5. What's your name? AUDIENCE: Jonathan. SPEAKER 1: Jonathan. All right, Jonathan. You are our number 5. And pick your favorite place in memory. [AUDIENCE CLAPPING] OK. All right. So Jonathan's now over there. And Hannah is over there. So 5, we want to point So you, of course, are And where should you be pointing? Down to represent null, as well. OK. So pretty straightforward. But now things get a little interesting. And here, we'll use a chance point out how order of operations Suppose that I next want to And I want to insert the Yes. This is what the code would look like. But if we act this out-- could How about on the end Yeah. Come on down. We have, what's your name? AUDIENCE: Lauren. SPEAKER 1: Lauren. OK. Lauren, come on down. [AUDIENCE CLAPPING] And how about, Lauren, in here in front, if you don't mind. Here is your number. Here is your pointer. So I've initialized And your pointer will be Where do you belong if we're Looks like right at the beginning. What should happen here? OK. So Pedro has presumed But how do you know where to point? AUDIENCE: He's number 2. SPEAKER 1: Pedro's undoing So this was deliberate. And that was perfect that Pedro Why? You literally just orphaned all of these Why? Because if Pedro was our only variable this is the danger of using pointers, and building your own data structures. The moment you point to Lauren, I have no idea I have no idea how to get back to Caleb, So that was bad. So you did undo it. So that's good. I think we need Lauren Who should you point at? AUDIENCE: Caleb. SPEAKER 1: So pointing at Caleb. Why? Because you're pointing at Pedro, now what are you safe to do? Good. So order of operations there matters. And if we had just done this line That was like Pedro's first And we orphaned the rest of the list. But if we think through it logically and we've now updated the list to look Let's do one last one. We got one more foam finger How about on the end? Yeah. You want to come down. All right. One final volunteer. [AUDIENCE CLAPPING] All right. And what's your name? AUDIENCE: Miriam. SPEAKER 1: I'm sorry? AUDIENCE: Miriam. SPEAKER 1: Miriam. All right. So here is your number 3. Here is your pointer. If you want to go maybe in the middle of So here, too, the goal is So let's ask the audience, who or what So we don't screw up and And if we do orphan memory, this is a memory leak. Your Mac, your PC, your if you keep asking for memory but So we want to get this right. Who should point at whom? Or what number? Say again. AUDIENCE: 3 to 4. SPEAKER 1: 3 should point at 4. So 3, do you want to point at 4. And not, so, OK, good. And how did you know, AUDIENCE: Copying Caleb. SPEAKER 1: Perfect. OK, so copying Caleb. Why? Because if you look at where this and you can cheat on the board If you point at whoever Caleb, that, indeed, leads you So now what's the next step Our voice in the crowd. AUDIENCE: 2 to 3. SPEAKER 1: 2 to 3. So, 2 to 3. So Caleb, I think it's now Because someone is already We haven't orphaned anyone. So now, if we follow got Pedro leading to 1, We need the numbers back, but Thank you to our volunteers here. AUDIENCE: Thank you. Thank you. [AUDIENCE CLAPPING] SPEAKER 1: You can just AUDIENCE: Thank you. SPEAKER 1: Thank you to all. So this is only to say that when you and in the problem set, it's sight of the forest for the trees. Because the code does get really dense. But the idea is, again, really do bubble And if you think about data If you go off in program and your whiteboarding something most people think at And they just assume that, at our textbooks or class notes, we But the important stuff And the idea is up here. Even though, via this week, will we So when it comes to analyzing let's consider the following. What might be now the running time of into a linked list? We talked about arrays earlier. And we had some binary search as it's an array. But as soon as we have a linked list, could be anywhere on stage. And so you can't just jump arithmetically to the middle to the middle one. You pretty much have to follow all So how might that inform what we see? Well, consider this too. Even though I keep drawing all these exposed. And all of us humans spot where the 1 is, where the 2 is, just like with our lockers and arrays, And the key thing with a linked we've fundamentally been remembering He was the link to all And, in turn, each But without Pedro, we would have lost So when you start with want to find an element as via Following all of the arrows. Following all of the in order to get to the node in question. And only once you hit null can Or no, it was not. So given that if a can only see the number 1, or the number or the number 5, one think about the running time of search? And it is indeed Big O of n. But why is that? Well, in the worst case, the is all the way at the end. And so, obviously, you're going to And I drew these things Because, again, even though where the 5 is for can only figure that out by starting So there, too, is another trade off. It would seem that, overnight, to do a very powerful algorithm from It's gone. Because there's no way in this to the middle node, unless And then, remember where And at that point, Linked list, by design, only All right. How about something like insert? In the worst case, might it take to insert Someone else. Someone else. Yeah. AUDIENCE: N squared. SPEAKER 1: Say again? AUDIENCE: N squared. SPEAKER 1: N squared. Fortunately, it's not that bad. It's not as bad as n squared. That typically means And I think we can stay under Yeah. AUDIENCE: Is it n? SPEAKER 1: Why would it be n? AUDIENCE: Because the [INAUDIBLE]. SPEAKER 1: OK. So to summarize, you're proposing n. Because to find where have to traverse, Because if I'm inserting the that numerically I can only find its location At this point, though, in the term. And really, at this should start to question these very Because the answer is almost If I've just got a link to the first question back to would be, well does the list I've drawn it as sorted So that's a reasonable But if I don't care about I could actually insert into a Why? I could just keep inserting into into the beginning. And even though the the number of steps required to insert is not growing at all. You just keep inserting. If you want to keep it going to be, indeed, Big O of n. But again, these kinds are going to start to matter. So let's for the sake of if we do want to maintain sorted order. But what about in the It might indeed be a Big O of 1. And now these are the kinds of decisions What about in the best case here? If we're thinking about then, frankly, we could just And the element we're looking for Or heck, we just blindly insert to the that we want to keep things in. All right. So besides then, how can we We don't need to stop at linked list. Because, honestly, it's Like, linked list allow us because we don't need massive So that's a win. But they still require Big O of if we care about order. We're using at least twice as So that seems like a sidestep. It's not really a step forward. So can we do better? Here's where we can now accelerate the even if you haven't we would seem to have an ability to using pointers . And anything you could you can implement, it So what if we leverage Instead of just stringing left to right, essentially, were bouncing around on the screen. What if we start to leverage a And build more interesting Well it turns out that we could create a tree, If you've ever seen or draw on a family and siblings, and so forth. So inverted branch of a when it's drawn, downward instead But that's something we could Specifically, let's do something Which is a type of tree. And what I mean by Notice this. This is an example of an when we first talked about those. And we had the lockers on stage. And recall that what was nice And 2, all of its numbers which is by definition an array. We can just do some simple math. For instance, if there are 7 elements that's what? 3 and 1/2, round down 0, 1, 2, 3. That gives me the middle element, And even though I have to be simple arithmetic, I can very quickly, find for you the middle of the of the right half, or whatever. That's the power of arrays. And that's what gave us binary search. And how did binary search work? Well, we looked at the middle. And then, we went left or right. And then, we went left or right again, Wouldn't it be nice if we today of dynamic memory the ability to just add another add another element. But retain the power of binary search. Because log of n was much better than Even the phone book So what if I draw this same And I preserve the color scheme, What are these things look like now? Maybe, like, things we A node is just a generic term What if the data these nodes So still integers. But what if we connected these Whereby, every node has not one Maybe 0, like in the leaves But other nodes on the interior Like having 2 children, so to speak. And indeed, the vernacular This would be called Or this would be a parent, The green ones would be The green ones would be siblings And over there, too. So all the same jargon you applies in the world of data But this is interesting because I think structure in the computer's memory. How? Well, suppose that we defined this, a number in a next field. What if we give ourselves And give ourselves a pointer called Both of which is a So same idea as before, but now we as pointing this way and Not just a single direction, but 2. So you could imagine, in code, building That creates, in essence, But why is this compelling? Suppose I want to find the number 3. I want to search for the It would seem, just like Pedro was in the world of trees, is the beginning of your data structure. You can retain and remember this entire ultimately. One variable can hang So how can I find the number 3? Well, if I look at the root node and Notice, I can go this way. Or if it's greater So I preserve that or just assorted array in general. What's true over here? If I'm looking for 3, I can because that number is If I go left, it's going And here's an example Recursion in a physical sense Which was recursively to find. Notice this. I claim this whole thing is a tree. Specifically, a binary search has 2, or maybe 1, or maybe 0 children. But no more than 2. Hence the bi in binary. And it's the case that every left And every right child That definition certainly But it also works recursively for Notice, if you think it is indeed bigger And it's smaller than this right child. And if you look even at The grandchildren here. This root node is bigger than So it's a meaningless statement. And it's less than its right child. Or it's not greater than, certainly, So we haven't violated the definition And so, now, how many steps does any number in a binary So it seems 2, literally. And the height of this And so long story short, especially, with your logarithms from yesteryear. Log base 2 is the number of times you and half, until you get down to 1. This is like a logarithm Here's a whole lot of elements. And we're having, we're So the height of this tree, that Which means that even in the worst case, it's all the way at the Doesn't matter. It's going to take log base 2 to find, maximally, any So, again, binary search is back. But we've paid a price, right. This isn't a linked list anymore. It's a tree. But we've gained back binary search, That's where the whole class But what price have we paid to retain Yeah. It's no longer sorted is a claim sorted, according to Where, again, left child And right child is greater than root. So it is sorted, but it's sorted in Not just 1. But another price paid? AUDIENCE: [INAUDIBLE] nodes now. SPEAKER 1: Exactly. Every node now needs not one A number and now 2 pointers. So, again, there's that trade off again. Where, well, if you want got to give something if And you start using more Like, you've got it. There's always a price paid. And it's very often in space, or time, the number of bugs you have to solve. I mean, all of these that you have to juggle them on. So if we consider now the code here might be the node. And how might we actually Well, let's take a look at, And see here, before we transition Let me go ahead here and let me just So let me, in a moment, copy Which we'll have on And I'll walk you here that I've written for tree.c. All right. So what do we have here first? So here is an implementation of And as before, I've played around and So what's going on first? Here is my definition of a node for a from what I proposed on Here are 2 prototypes for show you in a moment, an entire tree, one node at a time. And then, also allow me to So even though they're I bet if I'm clever about I can reconstruct the idea of So how might I implement Here's my main function. Here is how I might It's just a null pointer called tree. Here's how I might add So here, for instance, is me Storing it in a temporary Here is me just doing a safety check. Make sure n does not equal null. And then, here is me initializing this Then, initializing the left And the right child of And then, initializing the tree itself So at this point in the story, there's containing the number All right. Let's just add manually Let's add another number to the I don't need to declare n as a node* point. Here's a little safety check. I'm going to not bother with my, Just to be safe. Do I want to do this? We want a free memory too, but I'll save that for another time. Here, I'm going to I'm going to initialize the children And now, I'm going to do this. Initialize the tree's So what that's essentially is my root node, the single rectangle has no children, neither left nor right. Here's my new node with the number 1. I want it to become the new left child. So that line of code on the is like stitching these 2 together All right. The next lines of code, are me adding another Just the number 3. So this is a simpler tree with And this code, let me wave Except for the fact that I'm to be this new and third node. Let's now run the code before Let me do make tree, ./tree. And while I'll 1, 2, 3. So it sounds like the data structure But how did I actually print this? And then, eventually, Well let's look at the And this is where Print tree returns nothing But it takes a pointer to a root element Here's my safety check. If root equals equals nothing to print, just return. That goes without saying. But here's where things Otherwise, print your left child. Then print your own number. Then, print your right child. What is this an example of, even What programming technique here? AUDIENCE: Recursion. SPEAKER 1: Yeah. So this is actually perhaps the most It wasn't really that because we had such an easy weeks ago. But here is a perfect application of itself is recursive, right. If you take any snip still looks like a tree, That lends itself to recursion. So here is this leap of faith where I tree, if you will, via Then, I'll print my own root Then, go ahead and And because we have this base case that there's nothing to do, you're You're not going to call yourself infinitely, many times. So it works out and prints And notice what we could do, too. If you wanted to print the tree in Print your right tree Then, yourself. Then, your smaller sub tree. And if I do make tree I've reversed the order of the list. And that's pretty cool. You can do it with a But you can also do it, even with Let's lastly look at And this one's almost the same. Order doesn't matter in quite the Here's what I did with free tree. Well, if the root of the tree is Just return. Otherwise, go ahead and free your Then free your right child And then, free yourself. And again, free literally just It doesn't free the whole darn thing. It just frees literally Why was it important that Why did I free the left before I freed myself, so to speak? AUDIENCE: [INAUDIBLE]. SPEAKER 1: Exactly. If you free yourself first, if I had you're not allowed to touch the left Because the memory address is You would get some The program would crash. Valgrind definitely wouldn't like it. Bad things would otherwise happen. But here, then, is an And again, just a recursive use And what's even cooler here suppose we wanted to Binary search actually gets pretty For instance. here might be the prototype for a search You give me the root of a tree, and and I can pretty easily now return true How? Well, let's first ask a question. If tree equals equals null, Because if there's no tree, there's no Return false. Else if, the number you're looking for which direction should we go? AUDIENCE: Left. SPEAKER 1: OK, left. How do we express that? Well, let's just return the Search the left sub tree, looking for the same number. And you just assume through that you're kicking the can with a smaller problem. Just that snipped left tree instead. Else if, the number you're looking for go to the right, as you might infer. So I can just return the Search my right sub tree And there's a fourth What's the fourth scenario we Yeah. AUDIENCE: The number. SPEAKER 1: If the number, So else if, the number I'm looking then and only then, And if you're thinking an optimization possible, Think back to even our scratch days. What could we do a little better here? You're pointing at it. AUDIENCE: Else. SPEAKER 1: Exactly. An else suffices. Because if there's logically you're wasting your time by asking And else here suffices. So here to, more so than the there's just this elegance And that's it. This is not pseudocode. This is the code for binary And so, recursion tends with these kinds of data structures as we're seeing here. All right. Any questions, then, on binary search Yeah. AUDIENCE: About like third years. [INAUDIBLE] SPEAKER 1: Good question. So when returning a Boolean value, true in a library called Standard With a header file that you can use. It is the case that true is, it's But they would map indeed, yes. To 0 and 1, essentially. But you should not compare When you're using true and false, you AUDIENCE: I meant if SPEAKER 1: Oh, sorry. So if I am in my own code from it is totally fine to return. You just can't return So return just means that's it. Quit out of this function. You're not actually So it's a way of short If you don't like that, upon having code return from functions and do something like this. If the root does not equal And then, indent all three That's perfectly fine too. I happen to write it that there was explicitly a base case Whereas, now, it's But a good observation too. All right. So let's ask the question as It would look like And we can now do things in logarithmic Is this a binary search tree? Just to be clear. And again, a binary where the root is greater than its left That's the essence. So you're nodding your head. You agree? I agree. So this is a binary search tree. Is this a binary search tree? [INTERPOSING VOICES] OK. I'm hearing yeses. Or I'm hearing just my delay So this is one of those trick questions. This is a binary search violated the definition Is there any example of a left child Or is there any example of a right That's just the opposite way No, this is a binary search tree. Unfortunately, it also looks like, AUDIENCE: A linked list. SPEAKER 1: A linked list. But you could imagine Suppose that I hadn't been as by inserting 2, And then 1, and then 3. Which nicely balanced everything out. Suppose that instead, because or whatever you contrive in your and then a 2, and then a 3. Like, you've created a Because if we follow the same logic this is how you might implement if you just blindly keep I mean, this would be If we rotated the whole thing around. And that's totally fine. And those kinds of trees There's trees called AVL There are red-black black There are other types of add some logic that tell you and rotate it, and snip off the But a binary search does not guarantee that it And so, if you consider of even using a binary search tree. If you're not smart about and you just blindly you might accidentally create a tree that essentially Because you're not even using So unfortunately, the literal here is what's the Well, hopefully, log n. But not if you don't maintain Both, in certain search, could actually literally, big O of n. If you don't somehow take going to do the code for that here. It's a higher level thing you It can devolve into something And so, now that we're it's really the onus to consider what kinds of Where the thing devolves that you don't actually All right. We've got just a few structures to go. Let's go ahead and take one When we come back, about some final applications of this. See you in 5. All right. So we are back. And as promised, we'll operate Where if we take for granted that, even to play with these techniques yet, to stitch things together. Both in a one dimension to build things like lists and trees. So if we have these building blocks. Things like now arrays, what if we start to amalgamate of multiple data structures? Can we start to get some of the best something called a hash table. So a hash table is a Swiss in that it's so commonly used. Because it allows you to associate So, for instance, it allows you to Or a name with a number. Or anything where you have and get as output a corresponding A hash table is often a And here's what it looks like. It's actually looks like But for discussion's sake, I've which is totally fine. It's still just an array. But it allows you, a hash table, to That is instantly. So, for instance, there's actually Because I want to, for names of people, for instance. And wouldn't it be nice if the I have a go to place for it. Maybe the first box. And if it starts with Z, So that I can jump using a little bit of exactly to the location that So, for instance, here's 0 through 25. If I think of this, I'm going to think of now in the context of a hash table, So buckets into which So, for instance, suppose that we into this data structure. And that name is say, Albus. So Albus starting with A. Albus might All right. And then, we want to This one happens to be Zacharias. Starting with Z, so it goes all structure in location 25 a.k.a. Z. And then, maybe a third name like according to that So this is great because I can insert and conversely based on the first letter of their name. A, or Z, or H, in this case. Let's fast forward and assume we might look familiar, It's great because every But if you're thinking of names we eventually encounter a When could something go wrong if we wanted to insert even more names? What's going to eventually happen? Yeah. There's already someone with Like I haven't even mentioned And yet, Hermione's So that invites the Maybe, if we want to insert Harry at location I? But then if there's a location And it just feels like the situation But I've deliberately that I claim as a hash An array vertically, here. But what might this be hinting even though I'm drawing the rectangles AUDIENCE: An array. SPEAKER 1: Yeah. Maybe another array, to be fair. But, honestly, arrays are such a pain and so forth. These look like the beginnings Where the name is where the number horizontally now just And this seems to be a pointer But it looks like the array is 26 that is empty. Some of which are pointing at So that's really what a hash An amalgam of an array, whose And in theory, this gives you You get random access with You get to jump immediately to the But, if you run into this perverse already there, OK, fine. It starts to devolve into a smaller length lists. Not one massive linked list, And quite slow to solve. So if Harry gets inserted in Hagrid. Yeah, you have to chain them But, at least you've not And in fact, if we fast forward and the data structure So the chains not terribly long. And some of them are actually some unpopular letters of the But it seems better than in one big array, or We're trying to balance these trade Well, how might we represent Here's how we could describe this thing. A node in the context of a I have an array called And it's big enough to fit the And the plus 1 why, probably? AUDIENCE: The null. SPEAKER 1: The null character. So I'm assuming that longest word in the story. And it's something big Whatever the longest word is or the English dictionary is. Longest word plus 1 should be sufficient And then, what else does it Well it has a pointer to another node. So here's how we might in the context of storing Instead, like this. But how do we decide what Well, if we now have a definition of a or even globally, called hash table. That itself is an array That is an array of pointers to nodes. The beginnings of linked lists. Number of buckets is to me. I proposed, verbally, that it be 26. But honestly, if you get a lot A lot of H names trying Well, maybe, we need to be at the first letter of their name. But, maybe, the first and the second. So it's H-A and H-E. But wait, no, But we start to at least make impactful by tinkering with in a hash table like this. But how do we decide where someone Well, it's an old school The input to the problem is going And the algorithm in is going to be something A hash function is takes as input, a string, a as output a location in our context. Like a number 0 through 25. Or 0 through 16,000. Or whatever the number it's going to just tell you where to So, for instance, Albus, according to as output. Zacharias gave me 25. So the hash function, in the is pretty simplistic in this story. It's just looking at the Ascii in their name. And then, subtracting So like doing some math to get So that's how we got to And how might we, then, resolve this notion of hashing more generally? Well just for demonstration actually some buckets, literally. And we've labeled, in advance, from a deck of cards. So we've got some spades. And we've got diamonds here. And we've got, what else here? Clubs and hearts. So we have a deck of cards And this is something you, if you're getting ready to You're just cleaning up or Like, here is literally What would be the easiest way Well we've got a whole bunch of So I could go through like, And I could, here let me Just so, if you're far in back. So here's diamonds. I could put this here. 3, 4. I could do this in order here. But a lot of us, honestly, And you just want to clean you might do things like this. Well here's my input, 3 of diamonds, 4 of diamonds, this bucket. 5 of diamonds, this bucket. And if you keep going through the cards, 8's bucket. Queen of spades over here. And it's still going But at the end of it, you into 4 distinct buckets. And now you have problems is a little more tenable than You can now do 4, 13 size problems. And so hashing is something that even Taking as input some card, some name, A temporary pile in which you But these collisions are inevitable. And honestly, if we kept going some of these chains would get Which means that instead of by searching for them start taking a decent amount of time. So what could we do instead to If the problem, fundamentally, is popular, H, we need Not just the first letter but So if we do that, we to something more extreme like maybe So that now Harry and Hermione But, darn it, Hagrid So it's better than before. The chains aren't quite as long. But the problem isn't And in this case here, anyone increased to, if we now look at not just AUDIENCE: 26 squared. SPEAKER 1: Yeah. OK, good. So the easy answer to So that's a lot more buckets. And this is why I only showed So that's a lot more. And it spreads things out in particular. What if we take this one step further? Instead of H-A, we do like H-A-A, Well now, we have an Because Hermoine has her one spot. Harry has his one spot. Hagrid has his one spot. But there's a trade off here. The upside is now, arithmetically, in constant time. Maybe, technically 3 steps. But 3 is constant, no matter how many But what's the downside here? Sorry, say again. AUDIENCE: Memory. SPEAKER 1: Memory. So significantly more. We're now up to 17,576 buckets, which Computers have a lot But as you can infer, of someone whose name started with Potter universe. And if we keep going, whose name started with a lot of not useful combinations so that you can do a bit of math the precise location. But they're just going to be empty. So it's a very sparsely So what does that really mean Well let's consider, again, in It turns out that a hash is still just going to give us Why? If you have some crazy perverse has a name that starts with A, or you just get really unlucky. And your chain is massively long. Well then, at that point, It's not a hash table. It's like the perverse if you insert it without any mind for But there's a difference here and an actual performance. If you look back at the this is absolutely, in practice, going Mathematically, asymptotically, It's all the same. Big O of n. But if what we're really caring about there's something to be said That technically, if this data is 26 times faster than And so, there's this tension too and theoretical CS. Where yeah, theoretically, But in practice, for improving this speed by a factor of 26 might actually make a big difference. But there's going to be a trade off. And that's typically some other All right. How about another data Let me fast forward to So a trie, a weird Short for retrieval, A trie is a tree that actually even for massive data sets. What do I mean by this? In the world of a trie, you So we're really getting into of just building things up with that we have here. But the root of a trie For instance, of size 26. Where each element in that which is to say another array. And each of those locations in of the alphabet like A through Z. So for instance, if you wanted to store not in a hash table, not in a linked What you would do is hash on every at a time. So a trie is like a multi-tier Where you first look then the second letter, then the For instance, each of these through Z. Suppose I wanted to that starts with the letter Well, I go to the location which means I need to malloc myself And that's depicted here. Then, suppose I want to store the an A. So I go to that And I see, OK, it's currently null. There's nothing below it. So I allocate another node And now I have H-A-G. And And then, when I get to the I just have to indicate with a Boolean value or something. Like a true value that So that it's clear that the person's or H-A-G-R-I. It's H-A-G-R-I-D. just to indicate there's like some This is the node in And if I continue this logic, here's And here's how I might And what's interesting about the share a common prefix. Which starts to get compelling You're using the same nodes because they share H and an A in common. And they all share an H in common. So you have this data structure Each node in the tree And we, therefore, might implement Every node is containing, I'll I'll call it children because Up to 26 children for Size of the alphabet. So I might have used just to give myself 26 And each of those arrays That many pointers to another node. And here's an example of the Bool. This is what I represented in I also need another piece of data. Just a 0 or 1, a true A name stops in this node or it's just But the upside of this is is only as tall as the H-A-G-R-I-D or H-E-R-M-O-I-N-E. And people are in this data structure, if there were 3 million, it would for Hermoine? H-E-R-M-I-O-N-E. So, 8 steps total. No matter if there's 2 other people, Because the path to her name And if you assume that there's a in the human world. Maybe it's 40, 100, whatever. Whatever the longest That's constant. Maybe it's 40, 100, but that's constant. Which is to say that with a it is the case that your lookup would be big O of 1. It's constant time, because we've looked at, with a trie, the amount or insert one person is many other pieces of data are And this holds true even if one I don't think there was a Daniel or that I could think of. But, D-A-N-I-E-L could be one name. And, therefore, we have And if there's a longer Then, you keep going So you can still have with a substring of another name. So it's not as though we've That, too, is still possible. But at the end of the day, it only to find any of these people. And again, that's what's That you effectively have So that's amazing, right. We've gone through this whole story And then, it went up to n squared. And then, log n. And now constant time, what's the price This so-called trie? What's the downside here? There's got to be a catch. And in fact, tries are not amazing as they might sound AUDIENCE: Memory. SPEAKER 1: Memory. In what sense? AUDIENCE: Much like a [INAUDIBLE]. SPEAKER 1: Exactly. If you're storing all it's, again, a sparsely And you can see it here. Granted there's only 3 names, but most are going to remain null. So this is an incredibly wide It uses a huge amount of But again, you've got to pick a lane. Either you're going to minimize space It's not really possible to get You have to decide where for the device you're writing how expensive it is. And again, taking all of So lastly, let's do one So even higher level to discuss known as abstract data structures. It turns out we could all week, talking about could build with these data structures. But for the most part, Now that we have linked lists are 2-dimensional. And beyond that, there's the arrows can go in multiple Now that we have this ability we can solve all different So, for instance, a very to use in a program, or even our A queue being a data structure Where it has what's First In, First Out. Which is great for fairness, And if you've ever waited outside or some other restaurant if you're queuing up at them store to maintain a FIFO system. First in and first out. So that whoever's first in line gets So a queue is actually a And even if you're still in the there are things you might queues, which also do things in order. The first person to send should, ideally, be printed to send their essay to the printer. Again, in the interest of fairness. But how can you implement a queue? Well, you typically have to enqueue and dequeue. So adding something to it and And the interesting thing here is Well in the human world, you would for humans to line up from left Same in a computer. Like a printer queue, if you send a a whole bunch of essays need a chunk of memory like an array. All right. Well, if you use an that could happen in the world If you use an array to store all of AUDIENCE: It can be filled. SPEAKER 1: It could be filled, right. So if the programmer decided, HP or oh, you can send like a megabyte worth At some point you might which says, sorry out of memory. Wait a few minutes. Which is maybe a reasonable Or HP could write code that maybe or so forth. But at that point, maybe they And they could. So there, too, you could using a linked list instead. You're going to spend more going to run out of space in your array. Which might be more compelling. This happens even in the physical world. You go to the store and you start having And like, for a really busy store, But in that case, it tends to of the physical notion But there's other data structures, too. If you've ever gone to the dining hall tray, you're typically picking up not the first tray that was cleaned. Why? Because these cafeteria trays And indeed a stack is another In the physical world, it's like a stack of trays. Which have what we would Last In, First Out. So as these things they're putting the most And then you, the human, are probably Which means in the might ever use that very first tray. Which is probably fine but would really be bad in the world of were the property being implemented. But here, too, it could be an array. It could be a linked list. And you see this, honestly, every day. If you're using Gmail That is actually a stack, where your newest message at the top of the screen. That's a LIFO data structure. And it means that you see But if you have a busy day, it might not be a good thing. Because now you're ignoring way earlier in the day or the week. So LIFO and FIFO are can achieve with these very And the parliaments is to push something onto a These are here, for instance, might you always wear the same color. Well, if you're storing all you might not ever get clothes at the bottom of the list. And in fact, to paint this picture, Just to paint this here, made Let's go ahead and dim the lights So that we can take a look [VIDEO PLAYING] SPEAKER 2: Once upon a time, When it came to making friends So Jack went to talk to the He went up to Lou and Lou saw that his friend Well, Lou began, just Don't you have any clothes Yes, said Jack. I sure do. Come to my house and So they went off the Jack's. And Jack showed Lou the box, where he at his socks. Lou said, I see you have Why don't you wear some Jack said, well, when I I wash them and put Then comes the next I go to the box and get Lou quickly realized He kept clothes, CDs, When he'd reached for he chose a top book or underwear. Then when he was done he Back it would go on top of the stack. I know the solution, You need to learn to Lou took Jack's clothes And when he had emptied Then he said, now Jack, at the end of when you put them away. Then tomorrow morning when your clothes from the right, Don't you see, said You'll wear everything once And with everything in queues Jack started to feel All thanks to Lou and SPEAKER 1: So just to help you realize [AUDIENCE CLAPPING] Even in our human world. If you've ever lined up at this place. Anyone recognize this? OK, so sweetgreen, little This is if you order your food ends up according to Which actually sounds awfully like a hash table. And in fact, no matter whether did, with an array and linked list. Or with 3 shelves like this. This is actually an abstract And a dictionary, just like in our Words and their definitions. This just has letters of the But here, too, there's In what kind of scenario does devolve into a problem, for instance? Because they, too, are using only What could go wrong? Yeah. AUDIENCE: Run out of space. SPEAKER 1: Yeah. If they run out of space a lot of people whose names And so, they just pile up. And then, maybe, they kind of And they probably don't is going to come by, and just But in the world of a and have to be ever so precise. We thought we would lastly In advance, we prepared a linked Since this has become a bit of a thing. I am starting to represent the And so far as I have a pointer Whoever is in G9, would And what letter is on your sheet there? AUDIENCE: F15. SPEAKER 1: OK, so you AUDIENCE: F15. SPEAKER 1: Say again? AUDIENCE: F. SPEAKER 1: F15. So I see you're holding You are pointing to, if F15, what do you hold? AUDIENCE: S. SPEAKER 1: You have an S. And AUDIENCE: F5. SPEAKER 1: F5. Could you stand up, F5. You're holding a 5, I see. What address? AUDIENCE: F12. SPEAKER 1: F12. Big finale. F12, if you'd like to stand up holding [AUDIENCE CLAPPING] All right. We'll see you next time. [MUSIC PLAYING] DAVID J. MALAN: All right, this is And this is the week in which But the goal is not just to for languages sake, and in the coming weeks from C, where to Python. The goal ultimately is to teach you all so that by the end of this the fact that you learned or learned some weeks back but really how you learned in a paradigm known as as well as with some taste of other aspects of like object-oriented So recall, though, back looked a little something like this. And the world was quite simple. All you had to do was drag But there were still functions and and all of those kinds of primitives. We then transitioned, of course, looked a little something like this. And even now, some weeks be struggling with some of the when you try to compile your But there, too, the been focusing on functions and loops all of those same ideas. And so what we begin to do today we're using, transitioning from C now program in Python, and look but also transitioning can implement these just using a different language. So we're going to see And you won't have nearly as much But that's because so many of the And, really, it's going to be a I want to do a loop. I know how to do it in C. How do I do the same with conditionals? How do I declare and moving forward, not just in if you continue programming and learn if in 5-10 years, there's a new, more it's just going to be a at websites like Stack to look at just basic building because you already speak, you already speak programming All right, so let's do a few quick something might have and what it then looked as of today, what it's going Then we'll turn our attention ultimately, in order to So in Scratch, we had world, a verb or an action. In C it looked a little and a bit of a cryptic mess the you had the double quotes. You had the semicolon, the parentheses. So there's a lot more syntax We're not going to get rid of all in Python, that same statement is going And just to perhaps call is different or, now, simpler in this simple example here? Yeah. AUDIENCE: Now print, instead of DAVID J. MALAN: Good, so it's And there's also no semicolon. And there's one other AUDIENCE: No new line. DAVID J. MALAN: Yeah, doesn't mean it's not It just turns out that one is that, with print, you It automatically gets outputted by But you can override it, How about in Scratch? We had multiple functions like on the screen, but thereby being another function that In C we saw code that like this, whereby that first line sets it equal to the one of the functions and then the same double quotes Then we had this format code to actually print out that same value. In Python, this, too, is going Instead, we're going to have quote unquote &quot;What's your with a plus sign and a But let's see if we can't just it is that's going on. Well, first missing on the left is what? To the left of the equal sign, Feel free to just call it out. AUDIENCE: Type. DAVID J. MALAN: So there's no type. There's no type, like even though that was a type in did we use Int or string or In Python, there are still today onward, but you, have to bother telling the The computer is going the language, really, is going to be from context. Meanwhile, on the right is going to be a and this week, which comes from a But we'll also start to take off see how to do things without using a different function instead. As before, no semicolon, but the rest here. This starts, of course, to get We're using print instead of printf. But now, even though this perhaps, if you've never what might that plus be doing, What do you think? AUDIENCE: Adding answer DAVID J. MALAN: Yeah, so adding and adding, so to speak, but in the form of joining saw the joined block in Scratch, or there. This plus sign appends, in answer to whatever is quoted here. And I deliberately left a space looks nice, after the comma as well. Now there's another way to do this. And it, too, is going to But it just gets easier and You can also change this second So what's going on here. This is actually a relatively new of years, where now what a string, between these but this is what Python would And it literally starts with the letter a little weird. But that just indicates assume that anything inside of should be interpolated, so to substitute the value of And it can do some other things as well. So answer is a variable, declared, This Fstring, then, says to Python, the value of Answer. If, by contrast, you just take a guess, what would happen? What would the symptom of that forgot the curly braces, but AUDIENCE: It would print below it, too. DAVID J. MALAN: Yeah, it would literally going to take you literally. So the curly braces just kind And, again, it looks but it's just going to And if any of you programmed in you saw plus in that context, This just kind of makes your code a So it's a convenient All right, this was an example setting a variable like In C it looked like this, where and then the value, with a semicolon. In Python, it's going to look like this. And I'll state the obvious here. You don't need to mention the And you don't need a semicolon. So it's a little simpler. If you want a variable, just write But the single equal sign Suppose we wanted to In Scratch, we use In C, we could do this, actually, There was this way, if you just say counter There was the slightly less verbose Let me do the first sentence first. In Python, that same is actually going to be almost the And the mathematics are ultimately via the assignment operator. Now, recall, in C, that notation, which did the same thing. In Python, you can similarly do the same The only step backwards were a big fan of counter plus nor minus minus. You just can't do it. You have to do the plus equals 1 to achieve that same result. All Here in Scratch, recall, asking a silly question like is x less In C, that looked a little with the parentheses, the curly In Python, this is going to get a It's going to be just this. And if someone wants to call out what has been simplified now in Python Yeah, what's missing, or changed? AUDIENCE: Braces. DAVID J. MALAN: So no curly braces. AUDIENCE: Colon is back. DAVID J. MALAN: I'm sorry? AUDIENCE: Using the colon instead. DAVID J. MALAN: And we're So I got rid of the But I'm using a colon instead. And even though this is so long as you indent subsequent that's going to imply that everything, should be executed below it, until you a different line of code altogether. So indentation in Python is important. So this is among the reasons just how well styled your code is. And honestly, we've seen, and you've seen in your own code, to be a little lax when it If you're one of those folks on the left hand side of the window, But it's not particularly Python actually addresses this when logically needed. So Python is going to force you to start perhaps, a tendency otherwise. What else is missing? Well, we have no semicolon here. Of course, it's print instead of printf. But otherwise, those seem to What about something larger in Scratch? If an if-else block, like guess what it's going to look like. In C it looks like this, curly In Python, it's going to now but indentation is important. The colons are important. And there's one other difference but we didn't call it out a second ago. What else is different in Python Yeah. AUDIENCE: You don't have any DAVID J. MALAN: Perfect. We don't have any parentheses the Boolean expression itself. And why not? Well, it's just simpler to type. It's less to type. You can still use parentheses. And, in fact, you might if you want to combine thoughts and But by default, you no longer need Just say what you mean. Lastly, with conditionals, an if else if else statement. In C, it looked a little In Python, it's going to It's just if, and this is the So it's not else if, it's literally remain now on each of the three lines. But the indentation is important. And if we did want to we could just indent below each All right, let me pause if there's any questions on Yeah. AUDIENCE: My thought is though, does it matter if there's and why. DAVID J. MALAN: In between, AUDIENCE: So like the left-hand DAVID J. MALAN: Ah, good to spaces and where they go? Sometimes no, sometimes Stylistically, though, you should be whereby you do have spaces to the that they're called, or greater than is a binary two operands to the left And in fact, in Python, there's actually formal Not only within CS50 have we had a for instance, that just dictates how you like everyone else's. In the Python community, they and there's an actual standard whereby but generally speaking, in the real would reject your code, if you're trying if you don't adhere to these standards. So while you could be lax do make things readable. And that's Python theme, for the All right, so let's take a look before transitioning This, of course, in Scratch In C, the closest we could get was never changes. So it's sort of a simple way In Python, it's pretty but a couple of small differences here. The parentheses are gone. The colon is there. The indentation is there. No semicolon, and there's What do you see? AUDIENCE: True is capitalized? DAVID J. MALAN: True is Both true and false are But you've got to start All right, how about a you repeat something a finite number In C, we could do this There's this very mechanical way, to zero. You then use a while loop and the total number of Then you print what you want to print. You increment i using this syntax, with plus equals or whatnot. And then you do it again In Python, you can do it slightly different syntax. You just don't bother saying Python will infer from the fact You don't need the parentheses. You do need the colon. You do need the indentation. You can't do the i plus plus, but as we could have done in C, as well. How else might we do this, though, too? Well. it turns out in like this, which, again, sort became perhaps more familiar, a conditional, and then an update In Python, there isn't really an analog. There is no analog in the parentheses and the multiple Instead, there is a for loop, but like English, for i in 0, 1, and 2. So we'll see in a bit, these square to be called a list in Python. So lists in Python are more like More on that soon. So this just means for i and the And on each iteration of this loop, it first sets i to zero. Then it sets i to one. Then it sets i to two, so that you But this doesn't necessarily scale, Suppose you took this you iterate some number of times At what point does this approach Let me give folks just Yeah, in back. AUDIENCE: If you don't know how you've got the link in there. DAVID J. MALAN: Sure, if you want to loop or iterate, you can't like that, of 0, 1, 2. Other thoughts? AUDIENCE: So you want to say raise DAVID J. MALAN: Yeah, if you're this list is going to and you're just kind of like comma 3, comma 4, comma 5, comma I mean, your code would start So there is a better way. In Python, there is a function, called range, that essentially magically from 0 on up to, but So the effect of this line of essentially hands you back thereby letting you do And if you want to do something just change the 3 to a 99. Question. AUDIENCE: Is there a way to start at a number or an integer that's higher any point to do so? DAVID J. MALAN: A really you start counting at a higher number. So not 0, which is the implied default, Yes, so it turns out the range function but maybe two or even three, that So you can customize where it begins. You can customize the increment. By default, it's one, every two values, for like evens and a few other things. And before long, we'll take a that will become your authoritative Like, what can this function do. Other questions on this thus far? Seeing none, so what else might Well, in the world of C, recall that types, like these here, Bool and char string, which happened to But the language C itself certainly because the backslash 0, the support built into C, not a CS50 simplification. All we did, and revealed, ago, is that string, a synonym for a typedef for char star, In Python now, this list actually for these common primitive data types. Still going to have bulls, we're and we're going to have strings, And this is not a CS50 STR, S-T-R, is, in fact, that's going to do a lot more than Ints and floats, meanwhile, don't need because, in fact, among the too, Ints can get as big as you want. Integer overflow is no Per week 1, the language Floating point is still a problem that remains. But there are libraries, code that discussed in weeks past, scientific or financial computing, on top of these data types, as well. So there's other data types, too, gives us a whole bunch of things called ranges, like I called out verbally, things called tuples, for or latitude, longitude, which allow you to store keys and from last time, and then sets in the out duplicates for you, and you can a whole bunch of words or whatnot, will filter out duplicates for you. Now there's going to be a few functions training wheels that we're then just because, as we'll see today, they user input correctly, without just when you're trying to get Hello, And we'll give you functions, not but a subset of these, and get string, that'll user input in a way that's more But we'll see what those bugs might be. And the way we're going to do Instead of doing include, you're going to now Python supports, but there aren't header files anymore. You just use the name of And if you want to import CS50's Or, if you want to be more precise, and could be slow, if you've got a really in it, you can be more precise and From CS50 import get Int, or you can just separate and only 3 things from a But starting today and to start making much more that other people wrote, so that We're not making our own linked lists, We're going to start standing so that you can get real work by building your software on All right, so that's it for the and the sort of core features. Soon we'll transition But let me pause here to see if there's or otherwise, or otherwise. Oh, yes, in back. AUDIENCE: Why don't Python DAVID J. MALAN: I'm sorry, Python have what kind of operators? AUDIENCE: Why doesn't Python DAVID J. MALAN: Sorry, someone coughed AUDIENCE: The increment. DAVID J. MALAN: Oh, I'd have to check the history, honestly. Python has tended to be a And if you can do something one has tended to not give you multiple There's probably a better answer. And I'll see if I can dig in and post All right, so before we transition let me go ahead and consider exactly In the world of C, recall that it's We create a file called like Hello.c, ./Hello. Or, if you think back to week the layer of what Hello, you could more verbosely type out Clang in our case, command line to specify what name you want to create. And then you can specify the file name. And then you can specify what So that was a very verbose approach. But it was always a two-step approach. And so, even as you've been odds are you've realized that, any time or make a change to your code you're constantly doing those two steps. Moving forward in Python, and it's going to be just this. The file name is going to change, It's going to be something like And that's just a convention, But there's no compilation step per se. You jump right to the And so Python, it turns out, is we're going to start using, it's also assuming it's been pre-installed, This is to say that Python is generally not compiled. And by that, I mean you get to skip, that compilation step. There is no manual step in the world of and then compiling it to zeros and ones, Instead, these kind of into the illusion of one, whereby you, and let the computer figure to something the computer understands. And the way we do that is via this But now, when you have to be passed into an And the best analog of this that, in the human world, if multiple human languages, it can from one language to another. For instance, here are step-by-step in a phone book, Unfortunately, if you don't You could figure this out. You could run this algorithm, but you're or you're going to have to open to English and convert this. And the catch with translating or otherwise, is that you're going And so converting this in is just going to take you in your native language. And that's going to be one of the Yes, it's a feature that you can to bother compiling it manually first. But we might pay a price. And things might be a little slower. Now, there's ways to chip away at that. But we'll see an example thereof. In fact, let me transition now that demonstrate how Python is to use, perhaps yourselves a lot of the annoying syntax, you have to write, and also it you can just do so much more without So, as an example of this, to this image from problem set 4, which River here in Cambridge. And this is the original and it's even higher res if we looked But there have been no filters, a Recall, for problem set four, you And among them might have been blur. And blur was probably among the because you had to iterate you had to take into account what's to the right. I mean, there was a lot And if you ultimately got it, it was But that was probably In a language like be libraries that had been written you can stand, we could Let me go ahead and run a program, or And in Blur.py, in VS Let me import from a library, but the Pillow library, so to and another one called image and say, let me open the current is called Bridge.bmp. So the before version the result of calling image.open and then, let me create So you'll see before and after. After equals the before version And there is, if I I'll see that there's something allows you to blur in box below, left, and right. So I'll do one pixel there. And then, after that's done, let as something like Out.bmp. That's it. Assuming this library I am opening the file And this is somewhat new syntax. In the world of Python, we're going to more, because in the what's called object-oriented And what this means is that you still have variables, are embedded inside of the inside of the data types themselves. Think back to C. When you wanted there was a to upper function that takes And you can pass in any char you and give you back a value. Well, you know what, if that's upper-casing chars is a useful is it embeds into the string the ability just to uppercase any char as though it's a struct encapsulate multiple types of values. In object-oriented programming, you can encapsulate not just Functions can now be inside of structs. But we're not going to We're going to call them objects. But that's just a different vernacular. So what am I doing here? Inside of the image library, and it takes an argument, the Once I have a variable called before, an object, inside of was returned from this called filter, that takes an argument. The argument here happens which itself is a function. But it just returns the filter to use. And then, after, dot save It just saves the file. So instead of using fopen and and that does all of So it's just, what, four Let me go ahead and go Let me go ahead and show you whoops, sorry, let me because I have other examples to come. I'm going to go ahead and do Python I did need to make a command. There we go. OK, let me go ahead and type LS is among the sample code online today. There's only one file I'm trying to get these Let me rewind. Let me move this code into place. All right, I've gone ahead into a folder called there's another file called Bridge.bmp, Let me now go ahead is my interpreter, and also and run Python on this file. So much like running through Google Translate, as input, to get back this is going to translate the this computer, or this understands, and then run the left to right. I'm going to go ahead and Enter. No error message is If I type LS you'll now see out.bmp. Let me go ahead and open that. And, you know what, just to make let me blur it even further. Let's make a box that's not So let's make that change. And let me just go ahead and I still have Out.bmp. Let me go ahead and open Out.bmp which looks like this. That's the original. And now, crossing my fingers, the result of blurring it, as well. So the library is doing all that you all did for encapsulated it all into a single Those of you who might have might have done a little Let me go ahead and open up one And in Edges.py, I'm again going the image keyword, and the image filter. Then I'm going to go ahead and a result of calling image.open then I'm going to go ahead and run a image filter.find edges, which defined inside of this library for us. And then I'm going to do &quot;Out.bmp,&quot; using the same file name. I'm now going to run Python of We'll see what syntax error means soon. Let me go ahead and run Let me now open that new file, Out.bmp. And before we had this, and now, if we did the more comfortable we now get this, after So again, suggesting the power optimized for the tool at hand. And at the risk of really and re-implement, if we could, Let me go ahead and open wherein I have a C set five, wherein you loading 100,000 plus words into memory. And then you kept track of just And that probably took all of those functions in Dictionary.c. Let me instead now go into a And let me stipulate, for that we already wrote which corresponds to Speller.c. You didn't write either of those. Recall for problem set Assume that we're going So the onus on us right now is only All right, so I'm going to go And we're going to see now the syntax I want to go ahead and define was the very first thing I'm going to go ahead, then, and say otherwise known as a hash table. All right, now let me check, which was the first function Check is going to take a word, the syntax is a little different. You don't specify the return type. You use the word Def instead to define. You still specify the name of the But you omit any mention of types. But you do use a colon and indent. So how do I check if a word is in Well, in Python, I can go ahead and return true, else with the check function. All right, now I want to do like load. That was the heavy lift, where you So let me define a function called load. It takes a string, the So I'll call that Dictionary, Let me go ahead and open a file by by opening that Dictionary in read mode. So this is a little similar to fopen, Then let me iterate over In Python, this is pretty pleasant, How, now, do I get at the current because in this file of there's word backslash n, Well, let me go ahead and get but strip off, from the right end the Rstrip function Then let me go ahead and add to my done. Let me go ahead and close And then let me go ahead and That's it for the load How about the size function? This did not take any arguments, it or dictionary in Python. I can do that by returning the And then lastly, gone from the Memory is managed for you. So no matter what I do, The computer will do that for me. So I give you, in these functions, So, I'm sorry, we made But the implication now is that, in a language like Python? Well, encapsulated in is much of what you wrote for your array for all of your all of the linked lists that you to store all of those words. All of that is happening. It's just someone else in the And you can now use it And actually, I can because add is technically not I'm actually treating the dictionary So I'm going to make one tweak, set But set just allows it and it allows me to just throw using a function as simple as add. And I'm going to make because, when I'm checking a word, to me in uppercase or capitalized. It's not going to necessarily come that my dictionary did. I can force every word to And I don't have to do it I can do the whole darn string at All right, let me go ahead and And let me go into, first, And actually I'm going to go ahead And on the right, I'm going to go into But it's also available online, if I'm going to go ahead and and note that it takes Then I'm going to be ready to let's do like the Sherlock And then over here, let me get on texts/homes.txt2. So the syntax is a little I just, on the left, have to and then run it with ./speller. On the right, I don't But I do need to use the interpreter. So even though the lines are let me go ahead and run it on the right. And I'm going to count how for demonstration sake. One Mississippi, two Mississippi, so it's like three Now running it in I spent way fewer hours implementing than you might have in problem set five. But what's the trade-off going to be, do we all now need to Here we go, on the right, in Python. One Mississippi, two Mississippi, five Mississippi, six Mississippi, nine Mississippi, 10 all right, so 10 or 11 seconds. So which one is better? Let's go to the group here, which How might you answer that question, What do you think? AUDIENCE: I think Python's more comfortable for the programmer, DAVID J. MALAN: OK, so is better for the programmer, but C is maybe better for the computer, I think that's a reasonable formulation. Other opinions? Yeah. AUDIENCE: I think it depends that you're dealing with. So if it's going to be something I might not care that it And it could be way faster Whereas with C, if I'm dealing set or something huge, then that it might be worth it to put in the so the process continually will run DAVID J. MALAN: Absolutely, And let me summarize, is it depends If you have a very large want to optimize your code to be as especially if you're running Maybe you're a company like Google. People are searching a You really want to squeeze as you can out of the computer. You might want to have someone and write it at a very low level. It's going to be painful. They're going to have bugs. They're going to have to deal with But if and when it works correctly, it's By contrast, if you have and 140,000 words is want to spend like 5 hours, building a spell you can instead leverage a different and build on top of it, in order to Other thoughts? AUDIENCE: Would you, doesn't it also like convert the words, for a lesson? When we convert that into do we just take that into view? DAVID J. MALAN: That's a perfect wanted to make, which was, is And indeed there is. I'm oversimplifying what this It's not as stark a difference Python is four times slower than C. There are absolutely ways that as they have already done for Python. And in fact, I've configured that I've kind of dramatized It is going to be slower, than the equivalent C program. But it doesn't have as it is here, because, indeed, among is to save some intermediate results. Technically speaking, yes, Dictionary.py and these from one language to another. But that doesn't mean it has to do that As you propose, you can save, or cache, So that the second time and the third And, in fact, Python itself, the thereof, itself is So you can make sure that your And what then is maybe Yes, if you are going to try to out of your code, and Maybe you have very small devices. Maybe it's like a watch nowadays. Or maybe it's a sensor that's installed or in infrastructure, where you and you don't have much to minimize just how And so the faster the code runs, if it's implemented something low level. So C is still very commonly used But, again, if you just want and get real work done, and your time than the device you're you know what, Python is among the And frankly, if I were implementing I'm probably starting with Python. And I'm not going to all of that low-level stuff, because modern languages is to use abstractions And by abstraction, I mean something that just gives you a or the equivalent version that I All right, any questions, No, all right. Oh, yeah, in the middle. AUDIENCE: Could you or is there some, I'd imagine that but it feels like if you can just that would give you the DAVID J. MALAN: Really good could you just compile Python code? Yes, absolutely, this idea of is not native to the language itself. It tends to be native to the So you could actually that would read it top to bottom, left something the computer understands, but C is generally a compiled language. But it doesn't have to be. What Python nowadays is actually It technically is, sort compiling the code, technically into something called byte code, just doesn't take as much time as it And this is an area of research in programming languages, to Why? Well, honestly, for you and I, the one, run the code and not worry of compiling it all the time. Why? It's literally half as many And that's a nice thing to optimize for. And ultimately, too, you might come with these other languages. So you should really you can enable these features, as And, in fact, the only time is from like September to October Almost every other month or another language called JavaScript, which is not to impugn C. It's just that fits for the amount of time I have to that I want to solve. All right, let's go ahead and And when we come back, we'll start All right. So let's go ahead and start writing here, whereby we start small and then we'll build our way up to But what we'll do look side by side at like way back in week 1 and then write the corresponding And then we'll transition just What I've done in advance today is from the course's website, contains all of the pre-written But it'll also have we'll write here together and look at. So first, here is And this was version 0 of it. I'm going to go ahead and do this. I'm going to go ahead and I'm going to go ahead and create And this isn't something laying your code out side by side. But I've just clicked the that looks like two columns, that so that we can, in fact, see with my terminal window down below. All right, now I'm going to go ahead program on the right, which, unquote, &quot;Hello, world,&quot; and that's it. Now down in my terminal to go ahead and run Python of we've got Hello.py working. So again, I'm not going to play It's there just to jog So let's now look at a second from that first week, whereby I'm going to drag that Whoops, I'm going to go ahead and And now, on the right, to look a little more like this I want to get an answer from but I also want to get So from CS50, I'm going to import the We're going to get rid but for now, it's a And then down here, I'm equals getString quote Question mark, space. But no semicolon, no data type. And then I'm going to like the first example on the slide, And now let me go ahead and run this. Python, of Hello.py, all right, David. Hello comma David. But it's worth calling attention to the It's not just that the What is also now glaringly omitted both in this version, What did I not bother implementing? AUDIENCE: The main code. DAVID J. MALAN: Yeah, so I didn't We'll revisit the main function, actually does solve problems sometimes. But it's no longer required. In C you have to have that to kick-start your code. And in fact, if you were missing if you accidentally compiled that contained main, you would In Python it's not necessary. In Python you can just jump right you're good to go. Especially if it's a you don't need the added overhead So that's one other difference here. All right, there are a few other Recall that I could use a format string. So I could put this whole thing in And then let me go ahead and You can perhaps see where Let me type my name, OK, that's the mistake that you need the curly braces. Otherwise no variables are with their actual values. So if I go back in and add those now let me run Python of Hello.py, We're back in business. Which one's better? I mean, it depends. But generally speaking, making tends to be a good thing. So stylistically, the F string is All right, well, what more Well, let me go ahead here and altogether, actually. So same C code at left. Let me get rid of the CS50 in a couple of weeks, anyway. I can't use getString, that comes with Python called input. And, in fact, this is actually a There's really no downside to We implement getString with what you saw in C. Python of Still actually works the same. So gone are the CS50 But we're going to bring to deal with integers or too, because it's going to make with error checking. All right, any questions, before we from week 1, but now in Python? All right, let me go Let's say Calculator0.c, which was one math and operators like that, as let me go ahead and create a new at right, so that I have and my Python code at right. All right, let me go dive into a I am going to use getInt So let me import that. I'm going to go ahead now So x equals getInt, and I'll just like we did weeks ago. No need to specify a semicolon, It will just figure it out. Y is going to get and then down here, I'm going to So this is already a bit new. Recall, the C version required that as printf itself. Python is just a little If all you want to do is print out a Don't futz with any percent It's not printf, it's All right, let me go ahead and Enter, just do a quick sample, As an aside, suppose I had to importing the whole CS50 library, You're not to notice any It's a small library. But notice what does not in C. Python of Calculator.py, Enter, here. So a traceback is just says, here is a trace back that just got executed. In the world of C, you trace, stack being the operative word. Recall that when we talked the stack, like a stack of trays, might get called, one after the other. We had main, we had swap, then swap went So here's a trace back of all of the There's not really any functions Otherwise there'd be more detail. But even though it's a little cryptic, here, name error, so something related is not defined. And this of course, happens All right, so why is that? Well, Python essentially our functions that come from libraries. There was a problem in C. If and thus had access and so forth, you could that had the same function names. They would collide, and know how to link them In Python, and other languages you have support for effectively You can isolate variables and like their own container in memory. And what this means is, you have to say that the getInt you So just like with the image before, where I had to specify image dot am I specifying with a dot operator, want CS50.getInt in both places. And now if I rerun Python now we're back in business. Which one is better? Generally speaking, it depends you're using from the library. If you're using a whole bunch of If you're only using maybe one All right, so let's go ahead Let's get rid of this library too, as quickly as we introduced you'll be able to use all Suppose I get rid of this, and just like I did by Let me go ahead now and run Python of Calculator.py, OK, Huh. All right, obviously wrong, incorrect. Can anyone explain what just What just happened here. Yeah. AUDIENCE: You want an answer? DAVID J. MALAN: Sure, yeah. AUDIENCE: Say you have a number so you would part with them and DAVID J. MALAN: Exactly, Python both x and y as strings, what the input function And so plus is now being interpreted earlier. So x plus y isn't x but in terms of string So that's why we're getting which isn't itself a number. It, too, is another string. So we somehow need to convert things. And we didn't have this We did have like the A to i which did allow you to do this. The analog in Python is actually just So just like in C, you but you use it a little differently. Notice that I'm not doing parenthesis I'm using Int as a function. So indeed, in Python, Int is a function. Float is a function, that to do this kind of conversion. So now, if I run Python now we're back in business, But there's kind of a catch here. There's always going to be a trade-off. Like that sounds amazing that We can throw away the But what if the user accidentally like a cat, instead of a number. Damn, well, there's one Like, now my program has crashed. This is similar in spirit that you might have had in C. But they're not segfaults per se. It doesn't necessarily relate to memory. This time it relates to actual So this time it's not a name invalid literal for Int with So, again, it's written for sort of a typical person, because it's But let's try to interpret it. Invalid literal, a literal is just is the function name, with base 10. It's just defaulting to decimal numbers. Cat is apparently not a decimal number. It doesn't look like it, therefore Therefore, there's a value error. So what can we do? Unfortunately, you would have And the only way to do is by way of another namely, what are called exceptions. An exception is exactly what just They are things that can go wrong that aren't necessarily going to be So in Python, and in JavaScript, and in there's this ability to except if something goes wrong. And in fact, I'm going to here, even though we won't Instead of just blindly converting and try to do that. And if there's an exception, like print, that is not an Int. And then I'm going to do And let me go ahead and do this here. Let me try to get y, except Then let me go ahead and say, again, And then I'm going to exit go ahead and print x plus y. If I run Python of forgot my close quote, sorry. All right, so close quote, Python of But if I try to type in it actually detects the error. So what is the CS50 It's actually doing that try and accept otherwise your programs for start to get longer and longer. So we factored that kind of function and get float function. But underneath the hood, they're but they're being a little more precise. They're detecting a specific error, so that these functions will In fact, the best way to do this is to then print that error And again, let's not get too into We've already put into the CS50 library. But that's why, for instance, by just using these All right, let's do something How about this. In the world of C, we of this code, which actually which actually did division of So let me go ahead and close the C now, doing some of these But I'm going to go that the user is going to So from CS50, import getInt, that X gets getInt, ask the user ask the user for an Int y. And then, let's go ahead and do this. Let's declare a variable called Then let's go ahead and print z. Still no need for a format string, I Let me go ahead and run Let me do 1, 10, and I get 0.1. What did I get in C, What would we have happened in C? AUDIENCE: Zero? DAVID J. MALAN: Yeah, we But why, in C, when you and those Ints are like AUDIENCE: It'll give DAVID J. MALAN: It will give you what? AUDIENCE: An integer back. DAVID J. MALAN: It will give you an the integer part of it is indeed zero. So this was an example of truncation. So truncation was an seem as though this is no insofar as the division operator As an aside, if you want the old is sometimes useful for you can actually use two slashes. And now you get the C behavior. So that now 1 divided by 10 is zero. So you don't give up that does a more sensible default. Most people, especially new programmers, would want to get 0.1, that indeed we had to explain weeks ago. But what about another problem we whereby there is imprecision? Let me go ahead and, somewhat as follows. I'm going to format And I'm going to go ahead and format, the same thing. Notice this, if I do Python I get, by default, just But if I use this syntax in Python, I can actually do in 50 significant digits So now let me rerun Python and let's see if floating point Unfortunately, it is. And you can see as much here, is just showing us now 50 digits So we've not solved all problems. But we have solved at least some. All right, before we pivot away from now on syntax or concepts or the like? Yeah. AUDIENCE: Do you think has merit, how do you comment on that? DAVID J. MALAN: How do you what? Oh, how do you comment. Really good question, if you're with flooring or truncation, how do you do a comment in Python. This is a comment. And the convention is actually like with a capital T here. You don't need a period unless And technically, it should be above So you would use a hash symbol instead. Good question. I haven't seen those yet. All right, let's go ahead and make Let me go ahead and an example called Points1.c, And let me go ahead on the other side This was a program, recall, that lost on the first assignment. And then it went ahead whether they lost fewer points if you recall the photo, more points Let me go ahead and zoom out so And let me now, on the top right here, So I want to first prompt the So from CS50 let's import getInt, Let's then do points the user, how many points Then let's go ahead and say, if points print, you lost fewer points than me. Otherwise, if it's else if points you lost more points than me. Else let's go ahead and handle lost the same number of points as me. Before I run this, does anyone want to Yeah. AUDIENCE: Else if has to be elif. DAVID J. MALAN: Yeah, so else if in It's a single word. So let me change this to elif, and now suppose you lost three You lost more points than my two. If you only lost one point, So the logic is the same. But notice the code is much tighter. In 10 total lines, we did in thrown away a lot of the syntax. The curly braces are The parentheses are So this is why it just tends to using a language like this. All right, let's do In C, recall that we were able to if something is even or odd. Well, in Python, let me go ahead and let's look for a moment Here was the code in C that we used And, really, the key was just the remainder operator. And that one is still with us. So this is a simple demonstration, if in Python, I want to determine Well, let's go ahead and from CS50, and get a number like n from the user, And then let's go ahead and say, then let's go ahead and Else let's go ahead and print anyone want to instinctively, even point out a mistake here? What I did wrong? AUDIENCE: Double equals. DAVID J. MALAN: Yeah, so double equals. Again, so even though some of the stuff are the same. So this, too, should because I'm comparing for equality here. And why is this the right math? Well, if you divide a going to have 0 or 1 as a remainder. And that's going to determine So let's run Python of Parity.py, and hopefully we get, indeed, even. So again, same idea, but now of code instead of the 20. Well, let's now do something and a little representative of tools In C, recall that we had this And then let's go ahead and implement in a file called Agree.py. And let's look at the C version first. On the left, we used get char here. And then we used the to check if C is equal to And then we did the And so let's go over here and OK, get char is not a thing. And this here is another There is no data type for You have strings, STRs, are fine, because if just one character, for it is just a single character. So it's just a simplification. You don't have to think as much. You don't have to worry about In fact, in Python, you can use so long as you're consistent. So long as you're do not mean something So I'm going to go ahead although, strictly speaking, I as we saw before. I'm going to get a string from the quote unquote, &quot;Do you agree,&quot; like a where you have to say yes or no, you or whatnot. And then let's translate the So if S equals equals quote-unquote let's go ahead and print out agreed, equals N or S equals equals little n. Let's go ahead, then, And you can already see, perhaps, Is Python a little more you just literally use the English word But it's ultimately Can we simplify this code a bit, though. This would be a little to add support, not just but Yes or big Yes or little yes or There's a lot of permutations that we ideally should tolerate. Otherwise, the user is going to which isn't very user-friendly. Any intuition for how even if you don't know how to Yeah. AUDIENCE: Write way over it's like the things in the list. DAVID J. MALAN: Nice, yeah, we saw an Why don't we take that same If S is in the following list or heck, let me add to the list And it's going to get a but this is still better than the I could do things like There's a whole bunch more permutations. But let's leave this alone, and change this to, if S is in the and I won't do as, let's just not there, for now. Let's go ahead and run this. Python of Agree.py, do I agree? Y. OK, how about yes? All right, how about big Yes. OK, that does not seem to work. Notice it did not say agreed, It didn't detect it. So how can I do this? Well, you know what I could need the uppercase and lowercase. Let me tighten this And why don't I just S.lower, recall, whether is a function built into that forces the whole So now, watch what I can do. Python of Agree.py, little y, Big Yes, that works, big Y, So we've now handled, in one fell And you know what, we can Here's an opportunity, in Python, What have I done in here Does anyone see an opportunity doing something more Is a stretch here, no. Yep. AUDIENCE: You can do S dot lower, above. DAVID J. MALAN: We could Notice that I'm using S dot lower twice. But it's going to give me So I could do a couple of things here. I could, first of all, get rid of and then above this, maybe I could I can't just do this, because It does the math, but it doesn't It's going to return a value. So I have to say S equals s.lower. I could do that. Or, honestly, I can chain And this is not something we saw in and strings have functions you can chain these functions dot that, dot this other thing. And eventually you want to stop, But this is reasonable, It's pretty tight. It does in one place So I think that's OK. Let me go ahead and do Python Let's try it one last time. And it's still working as intended. Also if I tried those Yeah, question. AUDIENCE: Could you add on like a for and then cover all the functions where where it's uppercase as well, or DAVID J. MALAN: Let me summarize. Could we handle uppercase and I'm actually doing that already. I just have to pick a lane. I have to either be all lowercase and not worry about because no matter what forcing their input to lowercase. And then I am using a If I want to flip that, fine. I just have to be self-consistent. But I'm handling that already. Yeah. AUDIENCE: Are strings no DAVID J. MALAN: A really are strings no longer Conceptually, yes, They're a little more because with strings, Not only do they have because strings are now in what's called And we're going to keep seeing They are also immutable, so Immutable means they cannot be you can't go into a string and You can make a copy of the but you can't change the This is both a little But it's also pretty protective, like I did weeks ago, when I was And then one affected the other. Python, underneath the hood, is and the pointers and all of that. There are no pointers in Python. So If that wasn't clear, all of that is now handled by the language All right, so let's like we've been in the habit of doing. Let me open up Meow.c, which was a bunch of times textually. Let me create a file called And notice on the left, but it was kind of poorly designed. Why? Because it was a missed Why say something three times So in Python, let me do it Let me print out meow. And, like I generally should not, run Python of Meow.py, and it works. OK, but not good practice. So let me go ahead and And there's a few ways to do this. If I wanted to do this three times, I For i in range of 3, recall that rather than arbitrarily enumerate and print out quote unquote &quot;Meow.&quot; Now if I run Python of So it's a little tighter, programs can't really get We're down to two lines of code, no Let's now improve the did in C, by introducing meow, that actually does the meowing. So this was our first both in Scratch and in C. Let me focus here. Let me go ahead and Let me first go ahead and do let's assume for the moment that I'm just going to call. Let's now go ahead and define, using with the speller called meow that takes no arguments. And all it does for now is print meow. Let me now go ahead and run of those trace backs. So this is another name error. And, again, name meow is not defined. What's your instinct here, tripped over this yet in Python? Where does your mind go here? Yeah. AUDIENCE: Does it read top I'm guessing we could find a new case. DAVID J. MALAN: Perfect, as smart, it still makes certain assumptions. And if it hasn't seen a keyword So if you want it to exist, we I could just put it, flip But this honestly isn't Why? Because now, if you, the reader wrote it or someone else, you Like where does this program begin? And even though, yes, it's obvious like, if the file were longer, and fishing visually for So let's reintroduce main. And indeed, this would When you want to start having just put your own code in main, so that, you can solve the problem So let me define a function called meowing three times. But now watch what happens. Let me go into my terminal and Nothing. All right, investigate this. What could explain this symptom. I have not told you the answer yet. So all you have is you've never touched Python before. What might explain this symptom, Yeah? AUDIENCE: Didn't run the main function. DAVID J. MALAN: Yeah, I So in C, this is functionality You have to have a main function. But, heck, so long as you make In Python, this is just a convention, borrowing a very common name for it. But if you want to call that So this looks a little that you have to call your and it has to be at because only once the interpreter have all of your functions But this solves both problems. It keeps your code, that's at the very top of the file. So it's just obvious to you, and where the program logically starts. But it also ensures that main is not included, has been defined. So this is another learning a new language You're not going to have heard Just apply some logic, as to, like, all Start to infer how the If I now go and run this, Python of And just so you have unquote &quot;better&quot; way of doing this, are not going to encounter, Typically, you would see in something that looks like this, where with multiple underscores. That's functionally the same thing, if we ourselves were implementing a But we're going to keep things simpler because we're not going to All right, let's make one change to In C, the last version of meow also took arguments to the function meow. So suppose that I want And I want to just call meow as a say meow this number of times. And I figure out how many times or using getInt or something how many times to say meow. Well, now, I have to define let's call it n, and then use that, let me go ahead and print So again, the only thing is we don't bother specifying return and we don't bother specifying the So same ideas, simpler in some sense. We're just throwing away keystrokes. All right, let me run this one and we still have the same program. All right, let me pause here. Any questions? And I know this is going fast. But hopefully, the C code Yeah. AUDIENCE: Is there any difference DAVID J. MALAN: Good question. Is there any difference between Short answer, yes, and we would if we declare a variable another function is not We can solve that by But we don't have all of like there's no such thing The mentality in the if you don't want some value Like just don't screw up. So there's trade-offs here, too. Some languages are stronger But that, too, is part of the mindset [SIREN] DAVID J. MALAN: Yeah. AUDIENCE: There is really DAVID J. MALAN: Oh, sorry, where's-- say it louder. AUDIENCE: There has only been DAVID J. MALAN: That Let's come to that in just going to recreate also we had like the question marks for So let's come back to that in a second. And your question? AUDIENCE: If strings are immutable, DAVID J. MALAN: Correct, Any time you seem to be modifying you're getting back a copy. So it's taking a little But you don't have to deal with AUDIENCE: So you don't free anything. DAVID J. MALAN: Say it again? You don't need what? AUDIENCE: You don't free DAVID J. MALAN: You don't free anything. So if you weren't a big fan, of malloc or free or of those low level Python is the language for is handled for you automatically. Java does the same. JavaScript does the same. Yeah. AUDIENCE: Each up for the variable, you before the name, correct? Well, if there isn't a main function in DAVID J. MALAN: How do you if there's no main function in Python? Global variables, by definition, always So that's not a problem. If I wanted to have a and, therefore, global to actually, don't use the word global, variable equals Foo, F-O-O, value that a computer scientist would There are some caveats, though, But let's come back But that problem is solvable, too. All right. So let's go ahead and do this. To come back to the question about and create a file now called Mario.py. Won't bother showing the C code anymore. We'll focus just on But recall that, in Python, in Mario, we This was a random screen from of Super Mario Brothers. And we just want to print like three Well, in Python, we could print, oh, sorry, for i in the range of &quot;hash.&quot; And I think this is Python of Mario.py, we You could imagine and getting actual user input. So let's do that. Let me go up here and let me go and then let's get the So it actually is a getInt the height of the column And then, let's go ahead and print So let me run this. Let's print out like five hashes. OK, one, two, three, four, And it's going to work But it's not going to work That just doesn't do anything. But that seems OK. But also recall that it's not going weird, like, oh, sorry, it is going weird like cat, why? We're using CS50's handling all of those headaches for us. But, what if the user indeed We're tolerating that. So that was the bug I It would be nice to re-prompt And in C, what was the used when we wanted to And then, if they didn't cooperate, What was that? Yeah. AUDIENCE: Do while loop. DAVID J. MALAN: Yeah, That was useful, because it's But instead of checking a you do something and which makes sense with user even going to check if the You need that inverted logic. Unfortunately in Python, There is a for loop. There is a while loop. And frankly, those are And the way to do this in is another term of art in the Deliberately induce an infinite loop, And then do what you got to do, asking them for the And then, if that is what you want, like and break out of the loop. So this is how, in Python, you could You deliberately induce So something's going to Then, if you get the answer effectively achieving the same logic. So this is the Pythonic way Let me go ahead and run Python And now I get back just What if, though, I wanted to that CS50 library function, and Well, let's go ahead and Let me go ahead and Give myself a main function, so as I did initially earlier. And let me give myself a function called And inside of that function But I don't want to break in So, recall, that if you return you're going to exit So this would be fine. You can just say return or, if you would prefer could do something like this instead. Break, and then down here, you could return n as well. And let me make one point here This is a little different What have I done here that in C would I claim, in Python. It's super subtle, this one. Yeah. AUDIENCE: So aren't we like like we're using it [INAUDIBLE] DAVID J. MALAN: So similar, it's So it's OK not to declare a We've addressed that before, but on line And then we return n on line 12. But notice the indentation. In the world of C, if we had declared it would have been scoped means as soon as you get out of that n would not exist. It would be local to the Here, logically, curly braces makes clear that n is still inside of But n is actually still The moment you create a variable It is available everywhere within of the loop in which you defined it. So this logic is actually OK in Python. In C, recall, to solve we would have had to do something like define n up here on line 8, and so that it exists on line 13. That is no longer an Once you create a variable, nested, nested inside of it still exists within All right, any questions then on this, rid of the CS50 library again? OK, so let me go ahead and Let's go ahead and create a Let's call this get height function. And then let's use that height value, And let me see if this all works now. Python of Mario.py. Hopefully, I haven't But this is an easy fix now. Yeah. AUDIENCE: Got to call main. DAVID J. MALAN: I got to call main. So again, I deleted that earlier. But let me bring it back. So I'm actually calling main. Let me rerun Python of Now it seems to be working. So let's do one last to tie together that idea now Again, exceptions are whereby you can try to do something. And if there's a problem, you can Previously, I handled it by just yelling But let's actually use this to function. Let me throw away And now let me go ahead and But it's not sufficient What do I have to add to If I want to get back an Int? AUDIENCE: The Int function. DAVID J. MALAN: Yeah, I by calling the Int or I could do it on a separate I could also do n equals Int of n. That would work too, but it's This is not sufficient, because It creates the value. But then it throws it away. We need to assign it. So the conventional way to do this just to keep things nice and tight. So that works fine now. If I run Python of Mario.py, I can I can still type in negative 1, because What I'm not yet handling or some string that is So here, again, is my traceback. And notice that here, let here we can actually see Notice that, just like in C, or just you can see a few things. You can see mention of module, that is my main function, and get height. So notice, it's kind of backwards. It's top to bottom instead on the board the other stacks of trays in the cafeteria. But this is your stack, have been called, from top to bottom. Get height is the most recent, value error is the problem. So let's try to do, let's try to do this So what do I want to do? I'm going to go in here, and I'm Whoops, try to do the following, except then go ahead and say something, that's not an integer exclamation point. But the difference this time is is going to have a chance So if I run Mario.py, 3 If I run Mario.py and type and because I'm still in that loop, because I've caught, so to speak, the here, that's the way in Python that would otherwise end up If I type in cat, dog, If I type in, though, 2, I get my two Are any questions on to spend too much time on to show you what's involved with Yeah. AUDIENCE: Then the hash marks in line. DAVID J. MALAN: OK, so let's do this. That actually comes to about printing the or maybe something like this, in the sky, or little question marks. Let's recreate this idea, as was noted earlier, is you're But what if we don't want that. Well, let's change Let me throw away all the functions. Let's just go to a simpler world, So let me start fresh in Mario.py. I'm not going to bother with Let's just do a very simple program, to this time, because there are Let's go ahead and just to represent each of those bricks. Odds are you know this not going to end as you've predicted, on separate lines. So it turns out that the takes in multiple arguments, not but also some additional arguments, what the default line ending should be. But what's interesting want to change the line quote unquote, &quot;that is this is not sufficient, can have two types of Some arguments are positional, which a comma separated list of arguments. And that's what we did all the time comma, something, we did and in other functions that In Python, you have, not where you just separate them by commas, arguments. There are also named arguments, helpful for reasons like this. If you read the that there is a named argument And if you set that will be used as the end of the default, which the is quote unquote backslash n. So this line here has no effect But if I change it to just quote the default new line character, and on the same line. There's a bit of a bug, though. My prompt is not meant So I can fix that by But, really, it's not nothing, So let me run Python of have what I intended in the first looked like this. And this is just one example But this is a common to not just separate things by because the print function might take And my God, if you had to you're going to screw up. You're going to get Named arguments allow you to So you only specify doesn't matter what order they are in. All right, any questions, then, on And to be clear, you can do but logically expected, like this, by But the right way to would be just to override All right, how about this for cool. And this is why a lot Suppose you don't really like loops. You don't really like because that was kind of three What if you just printed out Python, whoops, Python of So it turns out that, just like can join things together, arithmetic in this case. It actually means, take this and So that's a way of just would have otherwise taken multiple lines in Python, but is really by doing that instead. Let's do one last Mario example, which If this is another part this is like a grid of like So two dimensions now, just not just Let's print out something Well, how about, how do I do this. So how about for i in range of 3. Then I could do for j in range of and that's reasonable for counting. I could now print out a hash symbol, Python of Mario.py, OK, that's What do I need to fix and where So 3 by 3 bricks, instead Any instincts? AUDIENCE: Why don't we create DAVID J. MALAN: OK, so after So maybe like print OK, let's try that. I like that instinct, right, print Let's go ahead and run OK, it's more visible, what What can I, what's the Yeah. AUDIENCE: So right behind the two. DAVID J. MALAN: Yeah, I'm which I don't want So let me do n equals quote unquote, take us the whole way there. Python of Mario.py, voila, now And even this, we can tighten up. Like, we could just use the So we could just say, and we can get rid of one All it's doing is, whoops, all it's But, no, I don't want to do that. What do I, how do I fix this here. I don't think I want Because that's giving So now this program is Same thing, two lines of code. But we're now implementing this All right, any questions here on these? Yeah. AUDIENCE: Is there any practical reason the print function, you DAVID J. MALAN: If I Say that once more. AUDIENCE: Whenever we the print function to stop it from going to a new we did like n equals and then too close. There were no spaces. Did you do that on purpose? DAVID J. MALAN: Oh. yes, good question. I see what you're saying. So in a previous version, let me I did not put spaces. The convention in Python Why? It just starts to add too much space. And this is a little when we talked about around the less than or equal Here it's actually to keep them tighter together. Otherwise it just becomes harder Good observation. All right, let's do, how about, Let's do that. And then we're going to dive into and then ultimately build with some See you in five. All right, so almost all were recreations of And recall that week 1 was like It was when we were first learning we began to focus a bit and other higher-level constructs. And we'll do that again here, condensing into a fewer set of examples in Python. And we'll culminate by actually and doing things that and way more time-consuming to do in C, But how do you go about figuring if you didn't hear it in but you want to see it officially, you docs.python.org here. And I will disclaim that, honestly, terribly user-friendly. Google will often be your you're interested in, to find your way or StackOverflow.com is As always, though, the things like, how do I convert Like that's reasonable to Google. Or how to convert to uppercase or But googling, of course, things like of course, crosses the line. But moving forward, and really with and Stack Overflow are is between the reasonable So let me officially use the to search for something Like, I know I can I don't quite remember how. So let me just search You're going to get, often, an because Python is a pretty big And you're going to want to For whatever reason, more popular or more commonly used than But it's purple, because I clicked So str.lower is probably am interested at the moment When I click on that, this is an example to look like. It's in this general format. Here's my str.lower function. This returns a copy of of the cased characters and the lower-casing So that doesn't give me much. It doesn't give me sample code. But it does say what the function does. And if we keep looking, you'll see I used its analog, Rstrip before, right that is strip, from the end of a like a new line, or even something else. And if you scroll through And we're halfway down the page already. If you see my scroll there's a huge amount of functionality And this is just testament to just But it's also reason to playing around with some new is not to learn it exhaustively. Just like in English there's always going to be ways of presenting the same That's going to be the case with Python. And what we'll do today and this get your footing with this language. But you won't know all of Python, And, honestly, you won't know all of unless you're, perhaps, using and even then, there's more libraries So let's actually now that we'll implement Let me switch back over to VS Code here. And let me whip up, say, a recreation where we averaged like And that was an opportunity to realize how constrained arrays are. They can't grow or shrink. You have to decide in advance. But let's see what's So let me do Scores.py, and let called scores, sorry, let me give myself Set it equal to a list are the same ones we've used meant to be scores, not ASCII values. And then let's just do So average will be another variable. And it turns out I can do, well, I probably had a for loop to add Turns out in Python, you divided by the length of scores. That's going to give me my average. So sum is a function that takes and it just does the sum for underneath the hood. Len gives you the length of the So I can dynamically figure that out. Now let me go ahead and print out, in curly braces, the actual All right, so let's run this And there is my average, in this based on the math. Well, let's actually, now, and make it a little more interesting, rather than hard coding this. Let me go back up here and because I don't want to deal with Like, I just want to use Let me give myself an And this is not something we Because in C, if you tried well, that's pretty stupid, It's a fixed size. So it wouldn't even let you do that. But I can just create because lists, unlike arrays, They'll grow and shrink. But you and I are not dealing with Python's doing that for us. So now, let's go ahead and get a How about three of them in total. So for i in range of 3, let's go using getInt, asking them for score. And then let's go ahead and append, to So it turns out that a list, documentation to confirm as much, and functions built into objects if you've heard that term before. Same idea, but whereas a function a method is a function built That's going to achieve the I don't need the variable. Just like in C, I could tighten this But, I don't know, I It's more clear, to me, at least, that and then appending it to the list. Now the rest of the Python of Scores.py, And I get back the math. But now the program's a little But there's other Just so you've seen it, Python does whereby, if you don't you can actually say scores So you can actually concatenate Just as we used plus to you can use plus to The catch is, you need adding here in a list of its But it's necessary, so that this To do this more verbosely, do, but just for clarity, as saying scores plus this score. So now maybe it's a little more plural, sorry, singular, are both or joined together. So two different ways, not sure This way is pretty common, but .append All right, how about another This one was called uppercase. So let me do this in And let me import from And let me go ahead and say, Let me get a string from the user, And then let me go ahead and say, upper-casing to this string. Let me change my line ending to And this is where things get cool If I want to iterate over all and print them out in uppercase, For c in the before string, go ahead and but don't end the line yet, because I until I'm all done. So what am I doing? Python of Uppercase.py, let me I've just upper-cased the whole string. How? I first get string, calling it before. I then just print out some fluffy and I get rid of the line ending, Notice I hit the spacebar just so letters line up to be pretty. For c and before, this is new. This is powerful in C, you don't have to do like Int i you could just say, for c in the And then here is just upper-casing and making sure we don't But this is actually more Based on what we've seen thus far, can I tighten this up further? Can I collapse lines 5 and 6, If the goal of this program is just how might I do this? Yeah, in back. AUDIENCE: Would it be str.upper? DAVID J. MALAN: Str.upper, like this, after gets before.upper. So it's not stir just represents the string in question. So it would be before.upper, And so let me go ahead and just tweak Let me just go ahead and print out the So this line is the same, I'm I'm creating another variable I'm calling upper on the whole Why? Because it's allowed. And, again, in Python, there aren't There's only strings, anyway. So I might as well do them all at once. So if I rerun the code now, Now I'll type in Hello in all I think I can get rid of printing the whole thing out at So now if I type in Hello before, of the program here. All right, any questions, and what this kind of function, No? All right, so a couple other Oh. Where was that? AUDIENCE: To the right. DAVID J. MALAN: To the right, right. Yes, thank you. AUDIENCE: Could you write, very close to you start creating a variable upper. DAVID J. MALAN: Yes, do I have No, I don't. I could actually tighten want to see something neat, you don't have to just put You can put a small as it doesn't start to look stupid and that it's sort of bad I can tighten this up like this. And now we're in Python of And that, too, works. But I would be careful about this. You want to resist the temptation of inside the curly braces, because But, absolutely, you All right, how about command line we introduced in week two also, so to take input from the user, whoops. So we could actually take input so as to take literally These are a little different, There's no main by default. arg c char, or we called it string, So if you want access to the And it turns out, there's another called CIS, and you can import from So same idea, different place. Now I'm going to go ahead and do this. Let's write a program that just requires after the program's So if the length of argv equals 2, Hello comma argv bracket 1 close quote, total at the prompt, let's just say Hello, world. So the only thing that's new here and we're using this fancy f-string too, it's putting more complex But that's OK. In this case, it's a list called argv, Let's do Python of Argv.py, What if I do Argv.py Now I get Hello, David. So there's one curiosity here. Python is not included in slash whatever was the first thing. If the analog in Python is that is the first thing, in bracket 0, the word Python does not appear in But otherwise, the is exactly the same as before. And in fact, what you can is, because argv is a list, For arg in argv, go ahead So instead of using a of this, if I do Python of argv Enter, If I do Python of argv Foo, If I do, sorry, if I do Foo and If I do Foobar baz, those print out too. And Foo and bar or baz are like for computer scientists, when you So this is just nice. It reads a little more like English, and allows you to iterate very quickly Suppose I only wanted the real after the program's name. Like, suppose I want to ignore Argv.py. I mean I could do something If arg equals Argv.py, you know, let's invert the logic. I could do this, for instance. So if the arg does not then go ahead and print out the word. So I get Foobar and baz only. Or, this is what's kind of neat And let me just take a slice of So it turns out, if argv is you know what, go into that list, and then go all the way to the end. And we have not seen this is a way of slicing a list in Python. So now watch what happens. If I run Python of I get only a subset of the going all of the way to the end. And you can even do If, for whatever reason, you you can say colon, we and use a negative number, which slices off the end So there's some syntactic tricks even if at first glance, you might All right, let's do one and then we'll start actually to make things interesting. So in one last program here, let's do before we introduce some algorithms. And let's do this. Let's import from CIS, import argv. Let's now do this. Let's make sure the user gives So if the length of argv does not and print out something like just to explain what the problem is. And then let's do this. We can exit. But I'm going to use a Let me import two functions from CIS. Turns out the better way to do this is specifically 2, with this exit code. Otherwise, down here, I'm going something like Hello, comma And then I'm going to exit with zero. So, again, this was a in week two, where you can with some number, where and anything else signifies error. This is just the same idea in Python. So if I, for instance, just run the I meant to say exit here and exit here. Let me do that again. If I run this like this, I'm So let me rerun it with So I have exactly two command line Hello comma David. And if I do David Malan, it's because now argv does not equal 2. But the difference here is so that special programs can detect an And now there's one other Suppose that you're and you don't really want and just have all of these without it being clear Let's just import all of CIS. And let's just change our syntax, where we just prepend to all CIS, just to be super-explicit and if there's another that we want to import from a library, So if I do it one last time here, But David still actually worked. All right, only to demonstrate how Let's now do something more like binary search. I'm going to go ahead and open and let's just do some searching on a list of numbers. Let's go ahead and do this. How about import CIS as before. Let me give myself a list of so just a bunch of integers. And then let's do this. If you recall from week three, at the end of the lockers on stage. So let's just ask that No need for a loop or If 0 is in the numbers, go And then let's just exit successfully, let's just say print not found. And then we'll CIS exit with 1. So this is where Python Here's your list. Here is your loop, that's doing Underneath the hood, Python You don't have to implement it yourself. No while loop, no for loop, If 0 is in numbers, So that's one feature and get to throw away We can do it with strings, too. Let me open a file and do something that was because we needed Str Comp and Let me import CIS for this file. Let's give myself a bunch And those were Bill and Charlie and two more, Percy, and lastly Ron. And recall, at the And so we had to iterate doing Str Comp and i plus Now just ask the question, if Ron and, whoops, let me hide that. I hit the command too soon. Let me go ahead and say CIS exit 1, just to indicate if we get to this point, And then we'll just CIS exit 1 instead. So, again, this just does linear search we found Ron, because, indeed, he's But we don't need to deal with All right, let's take In week three, we also of a phone book, that actually But remember, the phone book in Because we first had two arrays, Then we introduced structs, and And then we had an array of persons. You can do this in Python, using But we can also just use a because just like in P set 5, you a hash table, using a try. Well, similarly, can From CS50, let's import get string. And now let's give myself D-I-C-T () open paren closed Or you can simplify and a dictionary again is just keys You can also just use That gives me an empty dictionary. But if I know what I want to put in it with a number of plus 1-617-495-1000, David, with plus 1-949-468-2750. And it came to my attention, that we had a bug in If today, you would like to call we have fixed the code that Spoiler ahead. All right, so this now called people, that's There is some new syntax here in but the colons, and the quotes This is a way, in Python, with values, words with definitions, And it's going to be a super-common when we look at CSS and HTML and are like this omnipresent idea in because it's just a really useful way So, at this point in the story, we if you will, of people, associating just like a real world phone book. So let's write a program that gets whose number they would like to look up. Then, let's go ahead and say, if that go ahead and print out by going into the people to that specific name, within there, So this is similar in spirit to before. Linear search and dictionary lookups in Python, by just asking the And this line is just whoever is in the people So I'm using square brackets, because just like you can index into using numbers, 0, 1, 2, you into a dictionary in Python, And just to make clear what's and create a temporary variable, And then let's just, or, sorry, let's And that will just print In C, and previously in Python, would have been go to a location in But that can actually be a string, And this is what's amazing it's not like a big It's this table, that you can and get back in the So let's go ahead and run found, not that, oh, wait. That's not what's I think I'm in the wrong play. Phonebook.py. What's going on? Print found. I am confused. OK, let's run this again. Python of Phonebook.py, what the-- OK, stand by. [KEYS CLICKING] What the heck? What am I not understanding here? OK, Roxanne, Carter, do you AUDIENCE: I don't. DAVID J. MALAN: What the-- [LAUGHTER] Say again? SPEAKER 47: When you found the test DAVID J. MALAN: Oh, yeah, found, One sec. [KEYS CLICKING] Whoa, OK. All this is coming out of the video. So. [LAUGHTER] [APPLAUSE] Thanks. All right. I will try to figure out The best I can tell, it was I don't quite understand why. So we will diagnose this later. I just put the file into a temporary So let me go ahead and just run type in, for instance, my name. And there's my corresponding number. Have no idea what was just happening. But I will get to the if we can put our finger on it. So this was just an example, now, Let's now consider what we powerful, in these examples, actually keeps this information around. Thus far, these simple phone book But using CSV files, maybe we could actually keep so that, like on your keep your contacts around long-term. So I'm going to go ahead now and And let me just hide this Whoops, I'm going to change So let me go ahead now and I'm going to go into going to import a whole And this is a powerful comes with a library that just A CSV file is just a file And, in fact, to demonstrate here, just to make this To demonstrate this, let's Let me import the CSV library from CS50. Let me import getString. Let me then open a file, open a file called in contrast with read Write just blows it away if it exists, So I keep this phone book keep adding contacts to your phone. Now let me go ahead and get a Let me say getString and Then let me getString again, and And now, let me go ahead and do this. And this is new, and And you would only know this or reading the documentation. Let me give myself a and ask the CSV library Then, let me go ahead and use a function or a method to write out a list containing Notice the square brackets because I'm just printing a list And then I'm just going So what is the effect of all of this? Well, let me go ahead and run and I'm prompted for a name. Let's do Carter's first, plus let's go ahead and LS. Notice in my current directory, which I wrote, and CSV just stands for And it's like a very simple way if you will, where the comma represents There's only two columns But, because I'm writing to let me run it one more time, and let me go ahead and do David And notice what happened It automatically updated, this data to the file in question. So if I wanted to now could actually go ahead and using a read function to But, for now, we'll just leave And let me make one refinement here. It turns out that, if you're in you don't have to even You can instead do this. You can instead say, with the opening in append mode, calling the thing file, here. So the with keyword is And it's used in a few different is to tighten up code here. And I'm going to move my because they don't need to be where the file is open. This just has the effect of don't screw up, and accidentally In fact, you might might have complained at you, if you had you might have had a memory leak takes care of all of How about let's do, want to do this. How about, let's do one other thing. Let's do this. Let me go ahead and propose, here, or online, go to this URL here, And just to show that these CSVs and if you've ever or managed a student group, collected data via Google export all of that data via CSV files. So go ahead to this URL here. And those of you will find that the form since we're only doing this live. But that will lead to going to let everyone input like what house do you sort of an approximation of the And via this form, will we then we'll see, a CSV file. So let's give you a moment to do that. In just a moment, I'll share is going to let me actually And in just a moment, I'll switch over. OK, so this is now my here, where we have 200 plus responses house do you belong in, Gryffindor, If I go over to responses, I'll see all So graphical user interface, And it looks like, interestingly, want to be in Gryffindor, 22% in between the others. But you might have noticed, this Google Spreadsheets link. So I'm going to go ahead and click that. And that's going to automatically open, But you can do the same thing And now you see the raw But in Google Spreadsheets, if I go notice I can download this as a CSV, comma separated values. So let me go ahead and do that. That gives me a file in my I'm going to now go back And what I'm going to go this file, from my so that we can actually And now you can see this open file. And I'm going to shorten its name, I'm going to rename this using the And then we can see, in the file, that house, where you have a when people filled out the form, And then everyone else And the second value, after each Well, let me go ahead here in a file called Hogwarts.py, So in Hogwarts.py, let's that now reads a CSV, in but everyone's sorting hat information. And I'm going to go And suppose I want to answer a the fact that Google's GUI or graphical I just want to count up who's So let me give myself a dictionary with curly braces. And let me pre-create a few keys. Let me say Gryffindor is Hufflepuff will be initialized will be initialized to 0. And finally, Slytherin So here's another example of just being a very You can have keys and values. The keys, in this case, are the houses. The values are initially zero, instead of like four separate variables, to this form. So I'm going to do this. With opening Hogwarts.csv, in read mode, I just want to read it, as Let's go ahead and create that is using the reader function in I'm going to go ahead and ignore because, recall, that the first I want to get the real data. So this next function for ignoring the first line of the file. Then let's do this. For every other row in the get the current person's house, This is what the CSV reader It's handling all of the It figures out where the comma is, it hands you back a list of size 2. In bracket 0 is the time stamp, So, in my code, I can say I don't care about the time And then let's go into my dictionary into it at the house location, by And now, at the end that has the effect of iterating updating my dictionary based on whether someone typed else. And notice that I'm using the name of to essentially go up to this little the 1 to a 2, the 2 to like four separate be much more annoying to maintain. Down at the bottom, let's For each house in those the keys they're in let's go ahead and print the current house has the current count. And count will be the result of indexing And let me close my quote. So let's run this to summarize answered Gryffindor, 54 Hufflepuff, And that's just my now way my God, so much easier than C, to And one of the reasons that Python is so more generally, is that it's actually analytics like this. And let me clean this up slightly. It's a little annoying that that the house name is in bracket Let's clean this up. There's something called a that I can use instead. Capital D, capital R, this means because what a dictionary still returns to me every row from but it doesn't just give me a list It gives me a dictionary. And it uses, as the keys in that for every row in the it makes my code a little of doing this little I can say quote unquote &quot;Bracket because it's capitalized So the code now is but it's way more resilient, especially and I'm moving the columns around where the numbers might get messed up. Now I can run this on Hogwarts.py But I now don't have to worry about All right, any questions on And that's a teaser of sorts, we'll do in P set 6. All right, so some final with what you can do with Python. I'm going to actually switch over so that I can actually use So here's just a terminal I before class have preinstalled that won't really work because they require audio that the But I'm going to go ahead that involves writing a speech-based with speech. And I'm going to go ahead that, again, I pre-installed, and I'm going to go ahead give myself a speech engine, by for initialize. I'm then going to use this to do something fun, like Hello, world. And then I'm going to go ahead and while it says those words. All right, I'm going to save this file. I'm not using VS Code at the moment. I'm using another popular program called Vim, which is a just in this black and white window. Let me go ahead now and run COMPUTER: Hello, world. DAVID J. MALAN: All right, so but it is speech that has been Let's change it a little Let's do something like this. Let's ask the user for their name, And then, let's use the little F but Hello to that person's name. Let me save my file, run David. COMPUTER: Hello, David. DAVID J. MALAN: All right, might struggle with different But that one seemed to be OK. Let's do something else with just a few lines of code. Let me go into today's examples. And I'm going to go into a folder Faces.py. Sorry, Faces. And in this folder, that are a few files, and two full of photos, If you're familiar with the is the cast photo from The Office here. So here's a photo as input. Suppose I want to do where I want to analyze or detect all of the faces in there. Well, let me go ahead I wrote in advance, Much of it is actually comments. But let's see what I'm doing. I'm importing the Pillow library, I'm importing a library called face and installed in advance. But it does what it says. According to its documentation, and you call a function file, to load something and then you can use the Call a function called face and you get back a list of And then down here, a for loop, face locations. And inside of this loop, I I figure out the top, right, bottom, And then, using these I'm using that image library, And the code looks cryptic. Honestly, I would have to look But per the documentation, this around the image. So let me go ahead and zoom out here, All right, it's analyzing, analyzing, here's the original. And here is every face that my, found, within that file. What's a face? Presumably the library maybe without a mask, that has in some kind of arrangement, So it would seem pretty reliable, at faces here. What if we want to look for instance, someone that's Well, we could do something like this. Recognize.py, which is taking two files of one person in particular. And if you're trying to here I conflated the program, draws a box around the given face. Here we have Toby as identified. Why? Because that program, Recognize.py, but long story short, it additionally in order to recognize And that specific face is a but it looks similar enough to the Let's do one other that's a Let me go into, how about my listen online, too. And let's just run Python of Listen0.py. I'm going to type in like David. Oh, sorry, no, I'm going to-- Hello, world. Oh, no, that's the wrong version. [CHUCKLES] OK, I looked like an idiot. OK, hello, there we go. Hello to you, too. And if I say goodbye, I'm talking Now it's detecting what I'm saying here. So this first version of the program is elif elif, and it's just asking And that was my mistake And then, I'm just checking, Is how are you in the user's words? Didn't see that, but it's there. Is goodbye in the user's words? Now let's do a cooler version, using a Python of Listen1.py. Hello, world. Huh. Let's do version 2 of this, that Hello, world. OK, so now it's artificial intelligence. Now let's do something a The third version of this program that said. Hello, world, my name is David. How are you? OK, so that time, it not but it plucked my name out of it. Let's do two final examples. This one will generate a QR code. Let me go ahead and QR.py, that very simply does this. Let me import a library called OS. Let me import a library called QR code. Let me grab an image And let me give you the URL of like a like that, with this ID. Let me just type this, OK, so if I now use this URL here, sure I haven't made any to go ahead and do two I'm going to first save that as a two dimensional barcode, a QR code. And, indeed, I'm going And I'm going to use the OS.system And if you'd like to take you can see the result of my barcode, Hopefully from afar that will scan. [UPROAR] And I think that's an So that's it for CS50. We will see you next time. [APPLAUSE] [MUSIC PLAYING] [MUSIC PLAYING] DAVID J. MALAN: This is CS50. And this is week 7, the Indeed, special thanks to for having created this very festive Today, we pick up where which, recall, we introduced Python. And that was our big transition started to look new again, But also, probably things Well, with that said, problem set and you did some new things. But hopefully you've begun to appreciate is easier to do. You get more out of the box And that's going to be so as we transition further to introducing web programming next So that by term's end, and perhaps you really are building using all of these various So before we do that, what we weren't really able to create and store data ourselves. In Python, we've played around with the And you've been able to so to speak, that is, from files But we haven't necessarily started And that's a huge limitation, because we've done thus far with have involved my providing input But then nothing happens to it. It disappears the moment because it was only But today, we'll start to focus all that is, storing things so that you can actually what it is the human did last time. And ultimately, you can that actually begin to grow, and as might happen if you get more and To play, then, with this new capability let's go ahead and In fact, those of you want to pull up this URL that's going to lead And that Google Form is going to just your favorite TV show. And it's going to ask according to a genre, like comedy, or something like that. And this is useful, used a Google Form before, or it's a really useful mechanism at and then ultimately, putting So this is a screenshot of here in person or tuning in on It's asking only two questions. What's the title of And what are one or more genres And I'll go ahead and that I'll be able to see as the is quite simply a Google spreadsheet. Google Forms has this nice that allows you to export your And then from there, we and download it to my so that we can actually play around So in fact, let me go to this, the live Google Spreadsheet. And you'll see, probably, a whole all coming in. And if we keep scrolling, and only 46, 47. There we go, up to 50 plus already. If you need that URL again you can go to this URL here. And in just a moment, with which we can start to experiment. I'll give you a moment or so there. All right. Let me hang in there a little longer. OK, we've got over 100 submissions. Good. Good, even more coming in now. And we can see them coming in live. Here, let me switch The list is growing, and And in just a moment-- let me give Carter a moment to Carter, just give me a heads to download this file. All right, and I'll begin So I'm going to go up to the File Download-- you can download a whole But more simply, and the one is comma-separated values. So CSV files we used this past Now that you've played with them what's the utility of a CSV file versus Why CSV in the first place? Any instincts? Yeah? AUDIENCE: Because it's just a text file? DAVID J. MALAN: OK, so A simple text file with ASCII or I like that. Other thoughts? AUDIENCE: Structure of it? DAVID J. MALAN: Yeah, well said. It's just a simple text like commas you can represent the backslash ends invisibly you can create the idea of rows. So it's a very simple we might call a flat-file database. It's a way of storing very simple file that's just And more compellingly, I dare it's completely portable. Something is portable in if it means you can use it on a Mac or this other one. And portability is nice because if there'd be a whole bunch of who couldn't download it because or installed it. Or if they have a Mac, or if it's a PC user might not be So a CSV is indeed very portable. So I'm going to go ahead and version of this file. That's going to put it onto And let me go ahead here, and in just a Because it actually downloads And give me just one moment here, on my Mac I have a file I shortened the name real quick. And now what I'm going to do is go I'm going to open my File Explorer. And if I minimize my window here for is that you can just drag and drop a And voila, it's going to So let me go ahead and full temporarily close my Terminal window. And you'll see here a And the first row, by the columns were in Google in Excel online, timestamp, Then, we have timestamps, when people started submitting. Looks like a couple of people started an hour or two ago. And then, you have the But there's kind of a Sometimes I see the genre but sometimes it's like crime, comma, drama. And those things are quoted. And yet, I didn't do any quotes. You probably didn't type any quotes. Where are those quotes Why are they there if we infer? Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, so you Because if you're using to separate your data into what you've painted yourself into has commas in it itself. So what Google has done, what is, they quote any strings have commas so that these are not CSV specific commas. So it's a way of escaping And escaping just means to call so it's not misinterpreted All right, so this is have all of this data with which we start calling a flat-file database. So suppose I wanted to now and I want to store it ultimately, How can I actually maybe clean it up, maybe and actually figure out, what's the most here over the past few minutes? Well, let me go ahead and close this. Let me go ahead, then, and open up, And let's code up a file And let's go ahead and iteratively start and printing out what's inside of it. So you might recall that we can do to give myself some CSV Then, I can go ahead and do something that I want to open in read mode. Quote, unquote, &quot;r&quot; means to read it. And then, I can say as for a variable to say that and essentially store some kind of called file. Then, I can give myself a passing in that file as input. And this is the magic of that library. It deals with the process of opening back something that you can just I do want to skip the first row, Next, reader, is this little trick Because the first one is special. It said timestamp, title, genres. That's not your data, that was mine. But this means now that Everything hereafter is going that you all like, so let me do this. For row in the reader, let's go of the show each of you typed in. How do I get at the title of It's somewhere inside of row. Row recalls a list. So what do I want to at the title of the current What do I want to type to keeping in mind, again, that it Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: So row the second column, 0 index, that is, So this program isn't but it's a quick and dirty way to look like? Let me actually just do a and see if it contains Let me maximize my Terminal window here. Let me run Python of And you'll see now a purely you all seem to like here. But what's noteworthy about it? Specific shows aside, TV tastes, what's interesting or might create some problems for us and figure out what's the most popular? How many people like this or that? What do you think? Yeah? AUDIENCE: User errors [INAUDIBLE]. DAVID J. MALAN: Yeah, or just stylistic differences that is different from the other. For instance, here. Let's see if I can see an Yeah, so friends here is an all No big deal. We can sort of mitigate that. But this is just a tiny example can get messy fast. And that probably wasn't even a typo. It was just someone not caring as much Your users are going to type So let's see if we can't now begin and maybe even clean Let me go back into my file and let's actually do something a Instead of a reader, recall that there just a little more user friendly. And it means I can type in dictionary But now, when I iterate over this When using a DictReader instead is just a peculiarity this gives me back, not a list which is marginally more Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. I can now use open bracket, Because what's coming back a dictionary which has keys and values. The keys of which are The values of which are the So this is just marginally just way more obvious to me, the getting at. I don't remember what Was it 0? Was it 1? Was it 2? That's something you're And God forbid someone changes the the columns in Excel, or Apple That's going to break all And so a dictionary better design because it's and potential errors like that. Now the effect of this change isn't If I run Python of favorites.py, But I've now not made any assumptions actually is numerically. All right. Well, let's go ahead and now Because there's a lot of commonality see if we can't filter out duplicates. If I'm reading a CSV file top to bottom, I want to implement to It's not going to be quite as simple as I'm going to have to build this. But logically, if you're reading how might you go about, in getting rid of duplicate values? Yeah, what do you think? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Sure. I could use a list and I could but first check if I put So let's try a little Let me go ahead and create a variable I'll call it titles, for instance, open bracket, close bracket. And then, inside of my loop let's start to make a decision. So if the current row's I don't want to put it there. And actually, let me invert the logic So if it's not the case that then, go ahead and do something like And recall that we saw where it just allows you to And then, what can I do at done reading the whole file? Why don't I go ahead and go ahead and print So it's two loops now, and we can come But let me go ahead here and Let me increase the size of my Terminal and hit Enter. And now, I'm just skimming. I don't think I'm seeing am seeing some near duplicates. For instance, there's Friends again. And if we keep going, and there's Friends again. Oh, interesting, so that's curious and I have this one here, too. So how might we clean this up further? I like your instincts, and What are we going to have those near duplicates? Any thoughts? AUDIENCE: You could set DAVID J. MALAN: Yeah. What are the common We could ignore the capitalization just force everything to lowercase, Doesn't matter which, but And for those of you who might have the spacebar at the beginning of we can strip that off, too. Stripping whitespace is a common So let me go back into my and tweak the title a little bit. Let me say that the current is not going to be just But let me go ahead and strip off, any whitespace. If you read the documentation for the It gets rid of whitespace to the And then, if I want to force I can just uppercase the entire string. And remember, what's handy about Python calls together by just And that just takes like the whitespace got stripped uppercases the whole thing as well. So now, I'm going to just check whether And if not, I'm going to go massaged into this different So I'm throwing away some information. I'm sacrificing all of the to the form itself. But at least I'm trying to standardize what the So let me go ahead and run Python Oh, and this is just user error. Maybe you haven't seen this before. This just looks like I meant to say not even uppercase. That's completely wrong. The function is called upper, All right. Let's go and increase the size Run Python of favorites.py. And now, it's a little more overwhelming and it's all capitalized. But I don't think I'm seeing There's one Friends I'm back up at my prompt already. So we seem now to be Now, before we dive in further and what else could we have done? Well, it turns out that do get a lot of functionality And I'm kind of implementing If you think back to something with a bunch of values Recall that Python And we saw it really briefly implementation a couple of weeks back. So I could actually define my titles and this would just modestly allow that I don't have to bother I can instead just say the current title, like this. Marginally better design if you know getting more functionality out of this. All right, so let's clean We've now gone ahead and fixed We threw away whitespace in case with some of the input. Let's go ahead now and sort these So instead of just printing out you all inputted them, but filtering and use another function in which is literally take care of the process of Let me go ahead and increase run Python of favorites.py, And now you can really see how many of or do not. Now it's a little easier just because it's at least But now you can really see some of So far, so good. But a few of you decided to stylize Brooklyn 99 is a couple And I think if we keep going we'll see did not fix by focusing on So already here, this is only, Already real-world data and that might not bode want to keep around real You can imagine an actual dealing with this kind Well, let's go ahead and do this. Let's actually figure out the by now iterating over my data, and inputted a given title. We're going to ignore the problems Sorry, yeah, Avatar, that were different beyond just But let's go ahead and how many of you inputted So how can I do this? I'm still going to take this the CSV file from top to bottom. We've used a couple of a list to keep track of titles, But what if I now want to keep For each title, I want to keep around I'm not doing that yet. I'm throwing away the total How could I start to keep that around? AUDIENCE: Use a dictionary. DAVID J. MALAN: We could Elaborate on that. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Perfect, Using a dictionary, store keys and values, that is, else. This is why a dictionary generally are such a useful, Because they just let you remember So if the keys are going the values could be the number of And so it's kind of like just For instance, if I were going I might just have two maybe this is the title that I've This is, in effect, a It's two columns, keys on the And this, if I can implement allow me to store this data, and to figure out which is the most popular. So let's do this. Let me go ahead and change my titles Let's have it be a dictionary instead, two curly braces that are empty gives What do I now want to do? I think most of my But down here, I don't want to the data structure. I somehow need to keep And unfortunately, if I just bracket, title, plus equals 1. This is a reasonable Because what am I doing? If titles is a dictionary and I want the syntax for that, like before, the key you want to use to It's not a number in this case, And you're just going and then eventually I'll come and do things in terms of the order. But for now, let's just keep Let me go ahead and Let me do Python of Huh. How I Met Your Mother is What does that mean? And why am I seeing this? And in fact, just to give a let me zoom out here. Let me open up the CSV And wow, we didn't even get or the first show in the file. Notice that How I Met Your is the very first show in therein. What's your instinct for AUDIENCE: You don't DAVID J. MALAN: I don't I'm adding one to what? I'm blindly indexing into the dictionary that doesn't yet exist And so Python throws because the key you're trying So logically, how could we fix this? We're close. We got half of the problem solved, case of nothing being there. Yeah? AUDIENCE: Creating a counter. DAVID J. MALAN: Creating a-- AUDIENCE: Counter. DAVID J. MALAN: Creating So maybe I could do something like this. Let me close my Terminal window If the current title is in the that's going to give me a Then, I can safely say, titles, And recall, this is just shorthand title plus 1. Whoops, typo. Don't do that. That's the same thing as this just to say plus equals 1. Else, if it's logically not the case dictionary, then I probably want to Feel free to just shout it out. AUDIENCE: Zero. DAVID J. MALAN: Zero. I just have to put some value there All right. So now that I've got this and undo my sorting temporarily. And now let me go ahead and do this. I can, as a quick check, let me as is, Python of favorites.py. I'm back in business. It's printing correctly, no key And I'm not seeing any of the counts. Let me just quickly add a couple of ways I could do this. I could, say, print out the title, and how about just, comma, So I'm going to print both the current title and whatever its value Let me increase my Terminal window. Let me run Python of Huh. Huh. None of you said a whole What's the logical error here? What did I do wrong if I Yeah? Why so many 0s? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Exactly. To summarize, I initialized the but I should have initialized it at Or I should change my code a bit. So for instance, if I go back is probably to initialize to 1, obviously, I'm seeing this Or I could change my logic a little bit. I could do something like this instead. If the current title is not in titles, And then I could get rid of into the titles dictionary. Because now, on line 11, I took care of the initialization Which one is better? I don't know. This one's a little nicer, maybe But I think both approaches are But the key thing, no have to make sure the key exists Oh, this is wrong. This is incorrect code. What did I do wrong? OK, yes. There we go. So otherwise, everyone would have how many people said the same thing. Now the code is as it should be. So let me go ahead and open Let me run Python of favorites.py, Some shows weren't that popular. There's just 1s and maybe 2s. But I bet if we sort these things we So how else can we do this? Well, turns out, when dealing let's go ahead and just So let's reintroduce the sorted function Let me go ahead now and Now it's just a little easier because at least it's alphabetical. But it's not sorted by But sure enough, if we scroll for instance, like, That's definitely for most popular, 15 responses. But let's see what's actually Unfortunately, the sorted function by default, not by values. But it turns out, in Python, for the sorted function, pass in other arguments that For instance, if I want to I can add a second parameter to And it's a named parameter. You literally say, that the position of it in the If I now rerun this after you'll see now that it's Now adventure and Anne of the output instead of the top. How can I tell it to sort Well, let's go ahead and do this. Let me go ahead and define a function. I'm just going to call it And this f function is going And given a given title, it's going So actually, maybe a better name and/or we could come up The purpose of the get is to take it as input a title and Why is this useful? Well, it turns out that the according to its documentation, where you can pass in, crazy that it will use in order to determine or by the value, or in other cases, So there's a curiosity here, Key is the name of the was the name of this other parameter. The value of it, though, It's a function name. Notice I am not doing I'm instead passing in get value, And this is a feature of Python Just like variables, you can around so that they can be called So what this means is that the they didn't know what you're But if you provide them with a function their sorted function to determine, OK, if you don't want to do you want to sort by? This is going to tell by returning the specific So let me go ahead now and rerun this of favorites.py, Enter. Here we have now an example typed in, albeit forced to uppercase And now, The Office is versus Community, versus Game of a lot of variants thereafter. So there's a lot of steps to go through. This isn't that bad once and you know what these know that these parameters exist. But it's a lot of work. That's 17 lines of code that you all created by way of But it took me a lot of work just And indeed, that's going for today, ultimately, is, how It's one thing to learn but if we can avoid writing that's going to be a good thing. And so one other technique that does allow us to is, we can actually get It turns out, in Python, if you but it's going to be used and it's not something you're going it's not like a library function you can actually just do this. You can change the value to be what's called a is a fancy way of saying a function It's an anonymous function. Why does it have no name? Well, it's kind of stupid that I used it on line 16, and If there's only being used in one place, So if you instead, in and then type out the you want this anonymous you can then say, go ahead Now let's notice the When you use this special lambda give me an anonymous function, it then says, Python, this anonymous Notice there's no parentheses. And that's deliberate, if confusing. It just tightens things up a little bit. Notice that there's no return keyword, up a bit, albeit inconsistently. But this line of code is actually identical in But it throws away the word [INAUDIBLE]. It throws away the word get value. It throws away the parentheses, and to tighten things up. And it's well suited where I just want to pass in does something useful. But it's not something It doesn't need multiple It's just a nice, elegant one liner. That's all a lambda function does. It allows you to create an anonymous And then the function you're passing it Indeed, if I run Python of favorites.py the result is exactly the same. And we see at the bottom here Are any questions, then, on The goal here has been to write to analyze or clean up data like this. Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Could you use the lambda It's really meant for one So you don't use the return keyword. You just say what it AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Good question. Could you do more in got to be a more involved algorithm? Yes, but you would just ultimately In short, if it's getting you don't use the lambda You go ahead and actually even if it's a one-off name. JavaScript, another language makes heavier use, I dare And those can actually be but Python does not All right. So let's go ahead and Office was clearly popping out Let's go ahead and write a that maybe just focuses on just focuses on The Office. So let me go ahead and throw most of when I'm inside of my inner loop. And let me go ahead, and I don't All I want to do is focus How could I detect if Well, I could say something like-- how about this? So counter equals 0. We'll just focus on The Office. If title equals, equals The Office, counter plus equals 1. I don't need a key. There's no dictionary involved now. It's just a simple integer variable. And then, down here number of people who like The And I'll put in counter in turn this whole thing into an F string. All right, let me go ahead and run this. Python of favorites.py, Enter. Number of people who All right, so that's great. But let's go ahead now and All of you were very nice in But you can imagine for instance, maybe there, maybe there. And many people might just Didn't happen here, but would have if we had even more Now let's go ahead and rerun this Now only 13 people like The Office. So let's fix this. The data is now as I mutated it to have How could I change my Python code to What could I change up here in Any thoughts? Yeah? AUDIENCE: You write DAVID J. MALAN: Yeah, so I could If title equals The Office, Office, for instance. And I'm still don't have to I don't have to worry about spaces Now I can go ahead and rerun this code. Let me go run it a third time. OK, so we're back up to 15. So I like that. You could imagine this Avatar had three different if we dug deeper that there Could we do something a Well, we could do something like this. If Office in the title-- this is kind of a cool thing It's very English-like, just ask This, interesting, just Now, all of a sudden, we're up to 16. Does anyone know what the other one is? AUDIENCE: Someone put V Office. DAVID J. MALAN: What Office? AUDIENCE: Someone entered DAVID J. MALAN: Oh, interesting. Yes, so they hit The. OK. [APPLAUSE] DAVID J. MALAN: OK. Someone did that, sure. So The V Office. OK, this one's actually going I can't really think of a general-- well, this is actually a good And you could imagine doing could have like 26 conditions if someone right? You could imagine doing that. But then there's surely going to So that's actually a hard one to fix. But it turns out we got lucky and now But the data is itself messy. Let me show another way that just It turns out that there's this feature among them, called regular expressions. And this is actually a that we'll just scratch But it's going to be really useful, in web programming, any time you want And actually, just to make before I switch screens here. And let me open up a Give me just a moment to If you've never noticed this you can do a question. And if you want the user very specific as a short you might know that there's toggles like you can require it. Or you can do response validation. You could say, what's your email? And then you could say something So here's an example in Google Forms But a feature most of you have probably is this thing called a you can actually define a pattern. And I could actually reimplement that I can say, let the user type in anything then something else, then a something else. So it's very cryptic, But this means any This means any character 0 more times. This means a literal dot means any character in Then this thing means any So I should actually be You don't want 0 or more times, So this with the plus means So there has to be something there. And I think I want the same thing Or heck, if I want to restrict this I could change that last And so long story short, I'm sure, pretty cryptic, there's and JavaScript, and Java, and other patterns in a standardized way. And this pattern is actually something And let me switch back to to do the same kind of idea. Let me toggle back to my code here. Let me put up, for instance, a And here's just a quick summary A period may represent any character. characters. So the dot means anything, It can be B or nothing. It can be A, B, A, B, C. It can be any Change that to a plus and you now Question mark means Caret symbol means start matching at Dollar sign means stop matching So we won't play with But let me go over here and Let me go ahead and import a new library import re. And then, down here, let me say this. If re.search, this pattern. Let's just search for Office, quote, Then we're going to go ahead So it turns out that the has a function called search that and then, as its second want to analyze for that pattern. So it's sort of looking for a needle Let me go ahead now and run this And now I screwed up because I forgot Enter. Huh. Number of people who So this seems like a big-- thank you-- big step backwards. What did I do wrong? Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. I forced all my input to uppercase, So we'll come back to Let me rerun it now. OK, now we're back up to 16. But I could even, let's say-- I could tolerate just The Office. How about this, or how about Let me do this instead. And let me use these This caret sign means the This dollar sign weirdly I'm adding in some parentheses just here, the or symbol here. And this is saying start matching Check if the beginning of the string is is The Office. And then, you better be So they can't keep typing words Let me go ahead and rerun the program. And now we're down to 15, which but then we noticed The V Office. How can we deal with that? It's going to be messier How about if I tolerate any in between The and Office? Now if I rerun it, now I really So this is only to say, there are so to solve problems. And some of these tools are This is one that you've actually in the context of Google in the habit of creating these for But it's now something And we're just scratching the surface But let's now do one final example And let's actually a little more general purpose that and figure out its popularity. So let me go ahead and simplify this. Let's get rid of our Let's go ahead and continue And let's go ahead to-- at the beginning of this program, they want to search for. So title equals, let's which is essentially the same thing Ask them for the title. And then whatever they type in, and uppercase the thing again. And now, inside of my loop, I If the current row's title after it to uppercase, too, equals and maybe increment a counter. So I still need that counter back. So let me go ahead and define this And then, at the very let me go ahead and print of whatever the human typed in. So again, the only difference is this time. I'm initializing my searching for their by doing the same massaging of the and getting rid of the whitespace. So now, when I run Python I could type in the office all lowercase 13, why? Oh, that's correct. Because I'm the one that went in and If we fixed those, we If we added support for The V All right, any questions then And if you're feeling is so much Python code just to do And indeed, even though and can solve these kinds of problems, just to ask a single question like this. But any questions on how we did blocks along the way? Anything here? No? All right. That was a lot. Let's take a five-minute break here. When we come back, we'll do it better. So we are back. And the rest of today can we store, and manipulate, more efficiently than we might This isn't to say that you shouldn't that we just did. And in fact, it might be super common from users that you might And maybe the best way to do that is you can make all of the like we did with The Office, and reuse that code, especially coming through. But another theme of that sometimes there are different, And in fact, now at as we begin to introduce not a language called SQL, and next and the week after that, synthesizing together is to just kind you might decide what the trade-offs are or this other tool. Because undoubtedly you can in many different ways So let's give you another you can implement a proper What we just saw in are what we might call Again, just a very simple file, flat It's just rows and columns. And that is all ultimately A relational database, though, closer to a proper spreadsheet program. A CSV is an individual from a spreadsheet when you export it. If you had multiple you would have to export multiple CSVs. And that gets annoying have to open up this CSV, represent different sheets or A relational database is more that you, a programmer, You can write data to it. You can read data from it, and you tables storing all of your data. So whereas Excel and numbers are meant to be reused really by humans clicking, and pointing, and a relational database SQL is one in which the programmer but doing so in code. Specifically, using a language that's much grander In fact, if you try on your Mac got tens of thousands work fine, hundreds of thousands At some point your Mac or to open particularly large data sets. And that, too, is where into play and proper into play, when it's all about scale. And indeed, most any mobile app or might write should probably plan So we need the right So fortunately, even though we're it only does four things fundamentally, SQL, this language for to create data, read data, That's it. There's a few more keywords that that we'll soon see. But at the end of the starting to feel like this it all boils down to these And the four commands functions in a sense that implement They're almost the same but The ability to create or insert data is the R, or read. Update is the same. Delete is the same, but drop So we'll see these and in SQL that, at the end of the day, just data using verbs, if So to do that, what's Well, we won't get into the But here's a representative you can create using this own database, a brand new table. This is so easy in Excel, and Google You want a new sheet, you You get a new tab. You give it a name, In the world of programming, though, if spreadsheet in the computer's memory, like a sheet, that has a name, and then But unlike Google Spreadsheets, you have to decide as the you're going to be storing Now even though Excel, and Numbers does allow you to format it's not strongly typed data like it And heck, even in Python Even if you don't have databases are going to want to Are you storing real numbers or floats? Are you storing text? Why? Because especially as your you give the database about your the faster it can help you So types are about to but there's not going to be Now how can I go about converting, like that from you, into a proper relational database? Well, it turns out that in VS Code on my own Mac, here by just importing We'll see eventually For now, I'm going to use So let me go over to VS Code here. Let me type ls to see I had two files favorites.csv, which Recall that I made a couple of changes. We deleted a couple of Thes But this is the same file have favorites.py, which I'm going to go ahead now So in the world of many different products out there, implements the SQL language. Microsoft has their own. There's something called MySQL Facebook, for instance, PostgreSQL, Microsoft and maybe a whole bunch you might have encountered is to say there's many different and software in which you can use SQL. We're going to use a very lightweight today called SQLite. This is the version of used on iPhones and If you download an app that stores typically is stored using SQLite. Because it's fairly lightweight, thousands, even tens of even using this lightweight SQLite3 is like version 3 of this tool. We're going to go ahead and run SQLite3 It's conventional in the world of I'm going to create a Once I'm inside of the program, now I'm Again, not something just something you And then, I'm going to into a table, that is, a sheet, if Now I'm going to hit Enter and I'm altogether and type ls. Now I have three files the CSV file, the Python file But if I did this right, all of the has now been loaded into a proper this SQL language to access it instead. So let's go ahead again and run SQLite3 And now, at the SQLite to play around and For instance, I can at what the schema is of Now no thought was put into the because I automated the whole process. Once we start creating give more thought to the data But we can see what SQLite by importing the data by default. What the import command did for me a It automated the process of creating called favorites. And then notice, in parentheses timestamp, title, and genres, which All three of which have Again, once we're more comfortable choose our own types and column names. But for now, I just automated to get us started by using this All right. So what now can I begin to do? Well, if I wanted to, for instance, I might execute a couple Let me find the right one here-- Select being one of our to select data from this database. So if I have these three title, and genres, suppose I Doing that earlier in Python opening the file, creating a reader or adding every title to a dictionary and dot, dot, dot. There was a dozen or so lines Now, how about this? Select title from So now, with this particular and it's simulating what it looks like this table, so to speak. Select title from in a different language called I wrote early on when we first SQL is therefore optimized for and ultimately, deleting data. So here's perhaps a better tool Tossing it into a more might allow you now to get without having to reinvent the wheel. Someone else has figured out What more can I do here? Well, let me go ahead and pull of a cheat sheet here. Give me one second to find this. So suppose I want to now select So here's what I just So select typically works like this. You select columns from a Unfortunately, stupid Select columns from table then, is More specifically, I selected one Favorites is the name of the table. Semicolon ends my thought. Suppose I wanted to get two things, like I could instead do select title, and then, a semicolon, and Enter. It's going to look a because some of these titles and-- OK, one of you really went You can see that it's just but it's just now If we scroll up to the very top Black Mirror went all out, too. Thank you. And now, OK, we're going to Game of Thrones, good comedy, yes. Keep going, keep going, keep going. So now we've selected two of There it is. OK, so it's crazy wide because But it allows me to select Let's go back to the titles, though, with some modifiers here. For instance, it turns out, using built into the language. You've got a lot of functions, similar where you can have formulas. SQL provides you with some allow you to apply operations For instance, you can take get the distinct values, force and max, and so forth. So let's try distinct, for instance. Let me go back to my Terminal, how about the distinct titles Enter. I didn't bother selecting want it to be a little prettier. And you can see here that we except for issues of formatting. So whitespace is going Capitalization is going So there's a trade-off. One of the things I was doing in Python and then getting rid of whitespace. But we could combine some of these. I could do something like then get the distinct value. And that's actually going to get And again, I did it all in So let me pull up at the I selected distinct upper and that did everything for Suppose I want to get the total How about select count of all Semicolon, Enter, and now that contains just your So that's the total but total titles that And we could continue to manipulate functions like these here. But there's also additional We can also qualify our selections by So just as in Scratch, and C, and you can have the same in SQL as well, something is true or false. Like allows me to do approximations. If I want to get something but not necessarily I could do pattern Order by, limit, and grouped by are So let me go back and do How about, let me just get, oh, I don't but limit it to 10 results. That might be one thing that's helpful of the data at the top there instead. How about, select all of the titles is like, quote, unquote, &quot;Office?&quot; And this will give me only two answers. Those are the two rows, recall, that I Notice that like allows me too Because if I instead and in SQL a single equal sign For comparison's sake, This is not how you assign data in SQL. I got back no answers there. So indeed, the equal sign that searches just for what I typed in. How could I get all of these? Well, similar in spirit to regular in SQL, I could do something like this. I can select the title from favorites unquote, &quot;Office.&quot; But I can add, a bit weirdly, percent So the language SQL supports the but much more limited out of the box. If we want more powerful we probably do want But the percent sign here on the left, 0 or more So this will just grab any title that order. And now I get all 16, it would How do I know it's 16? Well, I can just get the and get back that So again, it takes some and the syntax that you can use. There's these building But SQL is really designed, again, and deleting data. For instance, I've never really So right now if I do select, where title like, quote, unquote, We can see that there's That's how many exactly. Let's just do a quick count. So that's nine of them. Well, delete from favorites. OK, you and me, delete from favorites, Nothing seems to happen, [APPLAUSE] DAVID J. MALAN: Thank you. So now we've actually changed the data. And this is what's compelling Yes, you could technically write Python but also writes it. You can change using quote, or quote, unquote, &quot;W&quot; for &quot;R&quot; for read alone. But it's definitely a little more But with SQL, you can update And if I were actually running a for a mobile app, that would be reflected everywhere if you're somehow talking So that's the direction we're headed. This other thing has been bothering me. So select, how about title from what was it? The V Office, was it? Yeah, it was that one. How about we update equal to The Office, where title semicolon? And now, if I select I can go up and down with Now there is no The V Office. We've actually changed that value. How about genres? Select genres from favorites, equals Game of Thrones, semicolon. These were kind of long, and I So how about we update favorites, action, adventure, sure, drama? OK, so it's a decent list. Fantasy, sure, thriller, war. OK, anything really but Let's go ahead and hit Enter now. And now, if I select genres again, same We've thrown data away. So whether or not that a bit subjective and argumentative. But I have at least cleaned up my Create, read, update, delete, Beware using delete. Beware worse using drop, whereby But via these kinds of manipulate our data much more And in fact, if you're an aspiring or analyst in the real world, SQL because it allows you to really questions of the data, and get And this is a simple data set. You can do this with much larger Or any questions on what Only scratched the boils down to creating, reading, Questions here? All right. Well, let's consider Recall that if I do .schema, that the so-called schema of my data. This is OK. It gets the job done, and frankly, was arguably text, including the But so the data set But if we look at the data set itself, Select genres from favorites. And let me point out one other I am very deliberately capitalizing and I'm lowercasing all of the This is a convention, and I think, the code when you're and tables with proper SQL keywords. But I could just as easily do but again, the SQL specific keywords So stylistically, we would from favorites, semicolon. So here is where-- oh. OK, that was not intended. I accidentally made The Office about action, adventure, How did I do that accidentally? What did I do wrong? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. So beware, this is funny. I think I did say So the SQL database took me-- setting genres equal to that, I really wanted to say quote, unquote, &quot;Game of Thrones.&quot; Unfortunately, there isn't an with a SQL database, so is, let's actually get Let's run SQLite of favorites.db Let me change myself into CSV mode. Let me import, into my And now, Friends is back, but so are all of our genres. If I now reload the file sorry. Select genres from favorites, It's much messier, but that's But now we're back to the original data. Lesson here, be sure All right. So what more can we Well, I don't love the design of the One, we didn't have but user input is going to be messy. There's just a lot of Let's go ahead and do this. Let me select all the So select title from quote, unquote, &quot;comedy.&quot; OK, so there's all of the shows But I think there might Let me scroll back up here. Comedy, drama. What was a comedy and a drama? How about let's search for the-- oops, OK, so The Office, in this case, was It's Always Sunny in Philadelphia, But notice that I get many more So the catch here is that, because I the way Google did, as it's actually really hard and messy that are somewhere described as comedy. Because if I search for quote, I'm going to get are this one, whatever that show is, this one. But I'm not going to get this one. I'm not going to get this one. Why? If I'm searching for, where genres why am I missing those other shows? Why am I missing? Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Exactly. It's not just a comedy, and a comedy or a news So I have to search for these commas, Let me copy this so I can do this. Let me search for where How about, or genres equals equals this whole thing, I'm going to get more and more results. But that's not going to scale well. What could I do instead all of the different permutations AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. So I could use the keyword is, I could use the like as the genres is like that's going to give me all of them, But let me go ahead and just Let me see if I can open this If we look back at the were all of those radio buttons into which something fell. And if I open this, let me full screen You'll see all of the are that worrisome except for a Where might the like keyword It's not with comedy. I'm OK with comedy. AUDIENCE: Music and musical? DAVID J. MALAN: Yeah, music and musical Because, one, they're separate genres. But if I just search for I'm going to accidentally suck might not be what I intend. If music is a music video or a different type of show, I So it seems just very messy. I could probably hack something together or something like this. But this is just not a Google has done it this simple to actually keep the user's and just as they did, But this is a real by putting comma-separated values Arguably, the folks at because it's just simpler. And they didn't want to or complicate things using some other But I bet there's a better And let me go ahead and do this. Let me go back into my code here. And in just a moment, I'm that I wrote in advance that's going iterate over all of the rows, and load two tables, one called so as to actually separate Give me just a moment to grab the code. And when I run this, I'll Let me go ahead and and I'll reveal the results in a sec. This is going to be version When I do this, let me go Give me a second to move Version 8, OK. So here we have version 8 of that's going to do the following. And I'll gloss over some that we don't get stuck in the I'm going to be using, at as we'll soon see, a CS50 library, or get_int, or get_float, but functionality that we didn't discuss library itself. But inside of the CS50 library we'll SQL that gives you the ability using technically called a URI, that allows And long story short, all is going to iterate over this And it's going to import it but it's going to use two So give me just a moment reveal the actual results. This is going to be And taking a look here, Oh, give me a sec. Come on. Come on. This program should not Sorry. Let's open this real fast. Whoops, not that file. OK. Let me just skim this code real [INAUDIBLE] reader. Reader, title, show ID [INAUDIBLE] genres split, DB execute. All right. This is me debugging in real time. All those times we encourage you to use We'll see how quickly I Python of favorites version 8. OK, so here's me debugging in real time. It's printing it. Oh, maybe I just didn't OK, so here we go. What I'm doing is printing out each row that you all typed in. And we're actually making progress. All right. I was too impatient and So in a moment-- there we go. All right, so all we have Let me go ahead now and open So in SQLite3 I now have a I named it number 8 for consistency. Once I've run the program I can And here's what the two tables in I've created a table called shows, this that are favorites, One is called ID, one is called Title. But now I'm going to start of the other features of SQL. And besides there being text, it turns Besides there being a there's also a special key that the title can never be null. Think back to our use to the keyword none in Python. This is a database constraint that can't have of favorite TV show. If you submit the form, you have to end up in our database here. And you'll notice one other new feature. It turns out, on this called a primary key, More on that in just a moment. Meanwhile, the second table my code gives me a column called the value of which is text And then more on this in a moment. This table has what we're specifically the show ID column So before we get into is now a way of creating the If I have two tables now, not be linked together by a common column. In other words, the shows column-- shows table is going to give an ID and a title. Every title you gave me, I'm The genre's table, meanwhile, is singular with that same idea. And the result of this, to pop back to Select star from shows and you'll see that I've given, in unique identifiers. I didn't filter out duplicates or do to uppercase. So there's going to be some want to get rid of anyone's data. But you'll see that, a unique identifier, from typed How I Met Your Mother, all Meanwhile, if I do select star from a column in the original see a much better design for this data. Notice what I've done here. Let me go all the way to the top and is called show ID, the other And again, I wrote some had to take Google's messy output where I had to tear away the commas and by itself. Even though we haven't we can reconstitute the your genres with your might this be a better design now? Even though I've doubled the why is this probably on the What might your instincts be? Why is this cleaner? Again, first time with SQL, that we've done this Can I come to you? Why might this be better? Yeah. Oh, just because we had the AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Exactly. It's as simple as that. We've cleaned up the data by giving column in the original its own cell in this table, if you will. And now notice show ID Whoever typed in How I Met Your Mother, And so we see that But whoever typed in-- I forget the name of But that person, whoever was a whole bunch of the genre's boxes. That happened again with show ID 3, 4. Persons 5, 6, 7 only checked one box. And so you can see now that we've might call a one-to-many relationship. A one-to-many relationship, whereby it can now have many genres is represented by a separate row here. So again, if I go ahead and let's limit it to the first 10 just How I Met Your Mother, The Sopranos It would seem that now that I've I could ideally somehow search the I don't have to worry about the commas. I don't have to worry about being a substring of musical. But how can I actually Well, let's go ahead and do this. Suppose I did want to get back All of the comedies, no matter whether box or multiple boxes instead. How now, given that I go about selecting only I've actually made the but again, SQL is going to The problem is that if I I have to check the genres table first. And then what's that going to give me? If I search the genres what's that going to Yeah? AUDIENCE: Show ID. DAVID J. MALAN: Maybe show ID. So let me try that. Let me do select show ID from genres, equals quote, unquote, &quot;comedy.&quot; No commas, no like, no percent signs. Because literally, that column now is or the like. Let me go ahead and hit Enter here. OK, so I got back a whole Now this could very It looks like show ID 1, 2, 4, 5, 6, So I could do something really where ID equals 1, or ID equals 2. This is not going to is why SQL is especially powerful. You can actually compose one So let's do this. Why don't I select the title is in the following list of IDs? Select show ID from genres, where the &quot;comedy.&quot; So I've got two SQL queries. One is deliberately nested That's going to give me back But that's exactly what the titles for by selecting title is in that big, tall list. And so now if I hit Enter, that were somehow flagged as checked one box for comedy, Somehow we teased out by using that Python script, into one big table, but instead, two. And if we want to clean this Let's, outside of the This is a way of sorting Now we have a whole list of the And what was the keyword with which Yeah, distinct. So let's try this. Same query, but let's select only the And notice, I've very And to this day, any don't just start at the beginning and just get it right on the first try. I very commonly start will, the thing in one step toward what I care about. Then I add to it. Then I add to it. Then I add to it, just like taking baby steps in order to get to like this one now. And other than this fix because I re-imported the data after we now have an alphabetized But now it's better designed, because we Oh, thank you. OK, just thanks. What questions do we have, if any here? Questions on this approach? Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Oh, now how do we transfer it to a CSV? There are ways to do that. And in fact, there's a that allows you to export If you want to email want them to be able to open it in Numbers, or the like, you can Generally though, once you're probably storing And you're probably updating it, and so forth. For instance, the one command is, suppose someone forgot a show. Let's see, did I see this in the output? All right, so Curb Your Enthusiasm. Saw that last night. It was just, yeah. Did anyone see it last night? No? All right, well, just the one person What's another show that How about Seinfeld? It's now on Netflix, apparently. So insert into shows. What do we want to insert? Well, we want to insert But I don't actually so I'm just going to insert a title. And the value I'm going is going to be, quote, And then, let me go Nothing seems to happen, but from before looking for comedies. And unfortunately, Seinfeld has so let's get this right, too. What intuitively I'm going to Seinfeld with my comedies? I just inserted into the show's table. What more needs to happen before AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Say again? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. So I need to insert into the a show ID, like this, and which presumably is comedy. What values do I want to insert? Well, the show ID, I better grab that. Oh, I don't even know what it is. I'm going to have to So I could do this in a couple of ways. Let me do a one-time thing. Select star from shows, quote, unquote, So now I could do, insert and a genre name, the values 159, and, Enter. And now, if I scroll back in my history again, looking for now Seinfeld has made the list. But I did this manually so I Let's clean that up. Let's do update. Let's do update my shows. Set title equals to Seinfeld semicolon. No? OK, thank you, where title equals, Let's not make that mistake again. Enter. And now, if I execute that really indeed, considered a comedy. So where are we going with this? Well, thus far we've been doing And this is absolutely what an might do if just manipulating to get at interesting answers two, or even many more tables. Eventually, in a few weeks, we're by writing code in Python If you go to most any website and you, for instance, log in, odds are clicking Submit. What's then happening? Well, the website might not but it's probably implemented in some Ruby, something else. And that language is probably using to use SQL to get your and compare the two against And actually, it's hopefully not but something called the hash thereof. But there's probably a When you buy something on odds are there's some that's looking at what it is and then maybe using a for loop of some It's doing a whole bunch of SQL it is you bought. There's other types of databases, or relational databases So let's go ahead and write in Python that now merges these I'm going to use SQL so I can implement my logic step-by-step, line-by-line. But when I want to get at some data I So let me go ahead And let me go ahead and throw away just now add a SQL to the mix. From the CS50 library, let's This will be useful to use that deal with SQL and Python are So I think you'll find Let's then do the following. Create a variable But I could call it anything I want. Let's use that you URI, which is that looks like a URL, but that actually in the current folder. Let's now ask the user for a title by &quot;title&quot; like this. And let's strip off any whitespace And then, let's go ahead and do this. And this is the new logic. I'm going to go ahead now and write to talk to the original favorites.db. So again, I'm not using the two-table I'm using the original that we and I'm going to do the following. I'm going to use db.execute to execute I'm going to select the count table, where the title the user And why I'm doing that is as follows. Just like in C, when we had the analogue is going So same idea, different syntax. Instead of percent S, And using a comma outside of this function I can pass in then any arguments I want to plug So the goal at hand is to going to search favorites.csv, a.k.a., of people that liked a particular show. So this is going to select the count where the title they typed in is like in. This db execute function returns a list. It returns a list of rows. And you would only know that the documentation. And therefore, if I want to I'm going to go ahead and grab Because it's only going And then I'm going to go ahead and But it's going to be a little weird. Technically the column is going to be which is a little weird. Let me add one more feature to the mix. You can actually give that are coming back, especially if they I can just call that column That means I can now say get back the So just to recap, what have we done? We've imported the CS50 We've, with this line of file that you and I created earlier I'm now just asking the user for I'm now executing this SQL plugging in whatever the in order to get back a total count. And I'm giving the count a just so it's more self-explanatory. This function, db execute, no matter even if there's only So this line of code just gives And then, this goes inside of that row, and gives me the key counter So what, to be clear, is this doing? Let's go ahead and run this manually Let me run SQLite3 on favorites-- Well, let's do this. On favorites.db, let me So mode csv.import in from So I've just recreated the gave me earlier in favorites.db. If I were to do this manually, Select, count star from favorites, just manually type it We'll search for the one I get back 12. But technically, notice what I get back. I technically get back a miniature What if I want to rename that column? That's where the as keyword comes in. So select count star as counter. Notice what happens, Enter. I just get back-- same renamed the column to be counter self-explanatory as to what it is. So what am I doing This line of code is returning to in the form of a list of dictionaries. The list contains one contains one column, as we'll So let's now run the code itself. I'm going to get out of SQLite3 and I'm Enter. I'm being prompted for a title. I'm going to type in The Office and Why is it 12? Well, there's a typo again I had deleted two of the Thes, so So there's 12 total that have, in the title like that. So what have we done? We've combined some but we've relegated all of the the selecting of something, of the with keyword, the the reader the DictReader, And it's just one line of SQL now, All right, any questions on what we've works? Any questions here? Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: When does this Was that the question? AUDIENCE: Yeah. DAVID J. MALAN: Yeah. So let's do that by changing This program was designed just Let's go ahead and of the ways you all typed in The Office If I do this in SQLite3, let after increasing my Terminal window. Let's do it manually. Select title from favorites, quote, unquote, &quot;The Office,&quot; semicolon. I get back all of these different rows, There's actually another with some capitalization of the would be an example of a query for multiple rows. So let's now change my Python program. If I now, in my Python program, do containing all of those titles. I can now do, for row in rows, I can and now manipulate all Let me keep both on the screen. Let me run Python of favorites.py. And that for loop now should once for each of those titles. And indeed, if I type in Whoops. Row title. What did I do wrong? Oh, I should not be renaming So that's just a dumb Let me rerun it again. And now I should see after Enter, a whole bunch of The Offices. And because I'm using capitalizations are coming through, It doesn't matter if it's Whereas had I used the equal sign capitalized correctly. All right, any questions on this next? All right, so let's transition set, and consider some arise when actually now using SQL and using SQL for mobile apps, web very large data sets. So let's start with a larger Give me just a moment to switch screens which is an actual relational of a real-world data set from IMDb. So InternetMovieDatabase.com where you can search for TV and so forth, all using their IMDb wonderfully makes their data but TSV files, tab-separated values. And so what we did is, before class We wrote a Python program earlier that read in created some SQL tables for you in SQLite that has multiple So let's go and wrap our minds around Let me go back to VS Code I'm going to go ahead and copy the And I'm going to go ahead and increase Whenever playing around with a typing .schema is perhaps a good of what's in there. And things just escalated quickly. There's a lot in this data going to be tens of hundreds of and also problem set 7, where we'll and not just the TV shows. So what is the schema that from IMDb's actual real-world data? One, there's a table called shows. And notice we've just added whitespace to make it a little more The shows table has an ID and the total number of And the types of those columns are So it turns out there's types that are worth being aware of when In fact, in SQLite there's fortunately, one of which is, indeed, numeric, which is kind of a things that are numeric and not just real numbers, for instance. Real number is what we've generally Text, of course, is that you don't have to Like in Python, it will size to fit. And then there's BLOB, which is for just raw 0s and 1s, like But we'll generally use And so, indeed, when we we decided that every show would be Every show has, of course, a Otherwise, why is it in the database? Every show has a year, to that definition a moment ago. And the total number of episodes for What now is with these primary keys A primary key is the column that In our case, with the gave each of your submissions a unique typed in The Office, had a unique identifier, a number with your genres, just In this version of IMDb, But they don't come from And so a genre has a show ID, and But these are real-world genres Notice, though, just like my A foreign key is the appearance in its own table. So when you have a table cross referencing the original shows called ID, and those same numbers under the column called show ID, by It's the same numbers but that the number is being even though it's officially defined This is what we mean by You have multiple tables with some And those numbers allow you to line that you can reconnect the just like we did with our This logic is extended further. Notice that the IMDb database we've like TV show stars, the actors therein. And that table, interestingly, and no mention of shows, per se. It only has a column called and a person ID, which is an integer. Meanwhile, if we scrolled you will see a table called people. And we have decided in IMDb's world will have a unique identifier that's date, which is numeric, and is going to be their primary key. So what's going on here? Well, it turns out that TV stars and So using this relational database, We're factoring out commonalities. And if a person can be well, we're defining them And then, notice these two The stars table has a show and a person ID, which allows us via this middleman table, if Similarly, the writers table allows by just recording those numbers. So if we go into this data Let's do select star So a huge amount of data is coming back. This is hundreds of thousands of rows So this is real-world data There's a lot of people in the TV show but others as well. It's still going. There's a lot of data there. So my god, if you had to do set it's probably not going And actually, we're up to, what, set, plus, which would mean going to open very well in Excel, or SQL probably is the Let's search for someone from people, where name equals with comedies. All right, so there's Steve Carell. He is person number And that's as much data as How do we figure out what Well, let's see, select There's a crazy number of shows And you can see it here again Feels like we're going to have to to get at all of Steve Carell's shows. So how are we going to do that? Well, god, this is a lot of data here. And in fact, yeah, we shows plus in this data set, too. So doing things efficiently is So let's actually do this. Let me select a specific show. Select star from shows where title And there presumably shouldn't because it comes from the Let's get back to show. Turns out there's been a lot of The one that started in 2005 presumably the most How can we get just that? Maybe we could do and year All right, so now we've got that we care about. And let's do this, too. Let me turn on a timer to get a sense of running time now. Let me do that again. Select star from shows, where and year equals 2005. And let's keep it simple. Let's just do titles for now. Enter. All right, so not terribly long. It found it pretty fast, but it looks 0.02 seconds, not bad for just a title. But just to plant a seed, it speed even this up. Let me do this. Let me create something called an in CRUD for creating something. And I'm going to call this title index. And I'm going to create specifically on the title column. And we'll see in a moment what Enter. Took a moment, like 0.349 seconds, But now watch, if I select star from previously it took me 0.021 seconds. Not bad, but now, wow. Literally no time at all, or so low And I'll do it again just Still quite low. Now even though 0.021 seconds, not crazy a lot of users running a real Every millisecond we can start to So what is it we just did? Well, we actually just created And this is a nice way of our week 5 discussion and our week 3 discussion An index in a database is structure that allows the database Literally, as you just saw, these very linear, that is. And so when I first it was literally doing linear search, what, a million plus rows. That's relatively slow. It's not that slow, 0.021 seconds. But that's relatively slow just doing anything linearly. But if you instead create like this, which I just did, creating an table, that's like giving the hey, I know I'm going to search on Do something with data And so if you think back to our maybe it's using a tree. Maybe it's using a trie or a hash structure is generally going to lift structure. So it's just much faster if it's sorting it now just storing it in one long list. And in fact, in the world the type of structure that's is something called a B-tree. It's not a binary tree. Different use of the letter B, but it we've seen. It's not binary because might have more than but it's a very wide but It's not very tall. And the upside of that is that if the database can find it more quickly. And the reason it took half a second, is because SQLite needed to take to just build up this tree in memory. And it has algorithms for doing so based But you spend a bit of time And then thereafter, wow. Every subsequent query, if I is going to be crazy But an order of magnitude, a previously was earlier. So we have these indexes which But what if we want to now across these multiple tables? How can we do that? And how might these indices Well, it turns out there is indirectly to join two tables together. Previously, when I selected and then I searched for it in the other I was joining two tables together. And it turns out there's a Let's go ahead now and, for instance, Not just The Office Unfortunately, if we look at our schema, oh, shows over here has no And people have no mention of shows. We somehow need to use this And this is called a join table, in the it joins the two tables And so if you're savvy enough with SQL, earlier and like recombine these integers together. So let me do this. Let me go ahead and figure out, So how am I going to do this? Well, if I select star from people, fortunately, there's only one of them. So this gives me back his name, But it's really only his Why? Because in order to get back his shows, So I need to know his ID number. So what could I do with this? Well, remember the schema I've just gotten, from the I bet by transitivity I could to get back all of his show IDs. And then once I've got all of his show and get back all of his shows' titles. So the answer is actually English integers. So let me go ahead and do this. Let me, again, get Steve Star represents everything. It's a wildcard character in SQL. Let me just select the And that gives me back 136,797. And it's only giving me back one value. The thing called ID is just Now, suppose I want to that Steve Carell is affiliated with. Let me select Show ID from stars, happens to equal Steve Carell's ID. So again, I'm building up my answer in On the right, in parentheses, On the left, I am now that have some connection with This answer, too, is not It's just a whole bunch of integers But let's take this one step further. And even though my could hit Enter and format if I were doing this in a code file. But I'm just doing it Let's now select all of the where the ID of the show is in So again, the query is getting long. But notice, it's the Select title from the shows is in the list of all came back from the stars table How did we get that person ID? Let me scroll to the end. Well, I selected, in my innermost So now, when I hit Enter, voila. I get all of Steve Carell's And if I want to tidy this up further, Order by title, semicolon. Now I've got it all So again, with SQL comes I mean, look how quickly to search across three different But my data is now all neatly which is going to be important But let me take this one step further. Let me go ahead and do this. Let me go ahead and point notice that I'm searching on-- let's say I'm searching And at the end here, I'm So let me actually go ahead and do this. Let me go ahead and see This query at the moment Let's see if we can't speed this a few more of those B-trees Create an index called person index, and on the person ID column. Enter. It's taking a moment, taking a moment. That's almost a full second Let's create another index called Why? Because I want to search That was part of my big query. Takes a moment. OK, just more than Now let's create one last one, but I could call these things Why? Because I'm also searching So in short, I'm of the columns that are somehow going from one table to the other. Now let's go back to the previous I think I erased it, 0.091. All right. Well, it was roughly We're not seeing the data now. But let me go ahead and run And boom, we're down to almost nothing. So again, creating has the effect of rapidly Now if you've ever used, for instance, here on campus, or Yale's analogue, you This could be one of the reasons why thousands of courses and I'm only conjecturing, if the If you're building your and you're finding that users and things are spinning and spinning, Well, it could absolutely just be bad Or it might be that you what column should be optimized like I've done here in order Again, from the outside But ultimately, this is explains performance problems as well. All right, let's point out just a and then we'll consider, that might arise in this world. If these nested, nested queries there are other ways, that you can execute For instance, if I want to connect Steve Carell to we can do something more like this. Select title from the people table, ID equals stars.personID. So what am I doing? New syntax. And again, this is not something you'll But just so you've seen other join stars. This is an explicit way to say, take table in the other hand, as I keep doing with my fingertips here. How to join them? Join them so that the people, the ID with the person ID in the stars table. But that's not quite everything. I could also say, join where the stars show ID So what am I doing here? That's saying, go further and join joining the show ID Again, this starts to get a But now I can just say, where name I can do in one query what previously and get back the same answers. And I can still add in my order And if I do this a little more differently. Let me type this out by adding a I'm going to leave it alone for now. We can type it on multiple And let me do one last thing. Do I want to show that? I'm going to show it, you should ingrain just yet either. Select title from If you know in advance that you want you can just enumerate them, And then you can say where And now I'm hitting a little more readably on my screen. And stars.showID equals shows.ID, In short, you specify that you of these tables. And then you tell the database how to that is, the columns that If I hit Enter now, I get more so if I also add Oops. All right. That's why I didn't I have to go back through my history the multi-line query this time. All right. That was a lot all at once. But this is only to say that, even more sophisticated, and we put over here, some of it over here so as to like putting commas in the data, we that we might want across And using indexes, we can so as to handle 10 times as on the same actual database. There is going to be a downside. And thinking back to our structures in past weeks, what might be Because as of now, I created four the title column, and Why wouldn't I just go if it's clearly speeding things up? Memory, so space. Any time you're starting to benefit odds are you're sacrificing And probably indexing absolutely because you're going to waste way more So figuring out where the is part of the process of designing and Now unfortunately, a whole lot of and they continue to in the real And in fact, here on something technical about SQL databases, and passwords leaking out, it is because of what are And just to give you a maybe [INAUDIBLE] enthusiasm was neat how we can With great power comes And so many people introduce by not quite appreciating how it is the So what do I mean by that? Here, for instance, is a And here's the analogue for every day probably, for your your email address and Suppose, though, that whether Harvard's or Yale's, And that website is using to store all of the usernames, passwords, ID all of that stuff. So there's a SQL database Well, what might go Unfortunately, there's just like there is in C and Python. For instance, there are If you do two hyphens, dash, And if you, the programmer, aren't such that you defend against you might do something like this. Suppose that I somewhat by typing my username, a single quote and a dash, dash. Why? Because I'm trying to suss out to a SQL injection attack. Do not do this in general. But if I were the owner of the website I might try using potentially Dangerous how? Because single quote is used for single quotes or double quotes. Dash, dash, I claim now, But let's now imagine what might be for something like What if it's code that looks like this? So let me read it from left to right. Suppose that they are using something and they've got some SQL says select star from users, and password equals that. And they're plugging in So what am I doing here? Well, when the user types their I probably want to select to see if the username So the underlying SQL from users, where username and password equals question mark. Users is the table. One column is username. One column is password. All right. And if we get back one row, exists with that password. We should let him proceed So that's some pseudo code, if What if, though, this code is not is, and isn't using question marks? So the question mark syntax where the question marks just like in printf, percent S was. But this function, db.execute and third-party libraries doing some good stuff and defending against Suppose that you were not using and you were just manually constructing You were to do something like this You're comfortable with You've gotten into the habit of using Suppose that you, the is just using techniques So you have an f-string where username equals, quote, And password equals, quote, As of what, two weeks legitimate technique in Python But notice if you are using and the user has typed in single could go wrong here? Where are we going with this if you're into your own prepared string of text? Yeah? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah. Worst case, they could insert what is as follows. Generally speaking, if you're using to surround the user's hope that they don't have Or you better hope that they Because what if their single quote and then the rest of Well, let's consider Let me go ahead in here. This got a little plug in here-- wow, that looks awful. Let me fix the red. Just change this to white What happens if the They type in, like I 'Malan@harvard.edu,' What has just happened only just begun with SQL today? Well, select star from users, where quote. What's bad about the rest of this? Dash, dash, I claim, means my color coding is going But everything after the The logic, then, of to just say, select not even checking the password anymore. Therefore, you will get So length of rows will equal 1, and so logs the user in, gives them or whatever it is. And they've pretended to be me simply dash in the username field. Again, please don't go on Harvard, Yale, or other websites. But it could be as simple as that. Why? Because the programmer were taught, which was just to in f-strings, values. But if you don't understand how the and if you don't distrust your users out there there's going some adversary who just wants to try into your data set. This is what's known as because the user can type something and trick your database into doing like, for instance, logging the user in. Worst case, they could Maybe the user types a semicolon, then You could imagine doing semicolon name equals Malan, and set the or something like that. The ability to inject means you can do anything you want with or worse, destructively. And now, just a quick, little OK, to, like, one of us, two of us. Awkwardly somewhat funny. All right, so let's move There's one other problem Oh, and I should explain this. So this is an allusion to the son, The word drop, table, students, and This is humor that only because it's the mom realizing, attack onto the database. Less funny when you explain it, but once is an allusion to. All right. So one final threat, now to the world of proper databases Things can go wrong and honestly, even using CSV And thus far, you and in almost every program we've written It's just you using your code. And even if your teaching fellow not at the same time. But the world gets interesting if you on websites, such that now you might to log in at the same time, at the same, or nearly the same time. What happens, then, if to handle requests from two as might happen all You might get what are And this is a problem in computing in with Python, really just any like a database, as follows. This apparently is one of the It is literally just Has anyone clicked on this egg? Like, a couple? Oh, OK. Wow. All right, so yes. So go search for this photo if you'd The account is world_record_egg. This is just a screenshot of If you're in the habit or like any social media site, there's or a heart button these days. And that's actually a Such a simple idea to count has, but that means Your code has to detect the click. Your code has to update the database, even if multiple people are perhaps And unfortunately, bad things can at the same time on a computer. How might this happen? So here's some more code, half as follows. Suppose that what happens when you, on the like button on Suppose that code, like the following, db.execute of select likes from All right. So what am I assuming here? I'm assuming that that It's some big integer, whatever I'm assuming that when the unique ID is somehow so that their code can call it ID. And I'm assuming that Instagram and selecting, from a posts of that egg for that given ID number. Why? Because I need to know how many likes it and then update the database. I need to select the data, then All right. So in some Python code here, likes, whatever comes back in the Again, this is new syntax but a common way of getting back likes therein. So at this point in the the total number of likes, in of that particular egg. Then I do this. Execute update posts, equal to this value, where the What do I want to update the likes to? Whatever likes currently is plus So a simple idea, right? I'm checking the value of I'm changing 10 to 11 and But a problem can arise clicked on that egg at roughly the Why is that? Well, in the world of and the Instagrams of the world have So they can support millions, What can go wrong? Well, typically code like this To be atomic means that it all Rather, code typically is executed, And if your code is running on a server which is absolutely the case if you and I click on the for efficiency, the computer, might execute this line of code for me. Then it might execute Then this line of code for me, then this line of code for me, That is to say, our queries might Because it'd be a little obnoxious I'm blocked out while you're It'd be a lot nicer for efficiency do a little bit of work for me, and back and forth, and back and So that's what typically happens get executed independently. And they can happen in alternating You can get them combined like this. Same order top to bottom, but other So suppose that the number of And suppose that Carter and I both click And suppose this line of and that gives me a value Suppose, then, that the computer takes does the same code for what value for the Also 10 for Carter. Because mine has not been recorded yet. At this point in the story, there's a likes variable There's a likes variable Then this line of code executes for me. It updates the database to be likes Then Carter's code is executed, to 11, unfortunately. Because his value of likes happened And so the metaphor here, that if we actually act out, is something that was systems class, whereby the most similar if you've got a mini And one of you and your roommates comes oh, we're out of milk, was So you close the refrigerator, and and get in line to buy some milk. Meanwhile, your roommate comes home. They, too, inspect the state of your open the door, and realizes, I'll go get more milk. Close the fridge, go to maybe a different store, that you don't see each So long story short, you both eventually now there's milk from there because you both based on the state of a variable And you didn't somehow communicate. Now in the real world, this How would you fix this or avoid Literally, own roommate, own fridge. AUDIENCE: Text your DAVID J. MALAN: Perfect. Let them know, so somehow communicate. And in fact, the terminology can somehow intercommunicate like the iMessage thread on your phone. You could leave a note. You could, more dramatically, thereby making the milk The fundamental problem is computers tend to to happen when it's happening across for scheduling sake. You need to make sure that all execute for me, and then if you want to ensure that And for years, when social media this was a super hard problem. Twitter used to go down all and retweets were a thing with a very high frequency. These are hard problems to solve. And thankfully, there are solutions. And we won't get into the weeds but know that there are called locks, which I use that Software locks can allow you to look at it until you're done with it. There are things called allow you to do the equivalent of out your roommate from accessing but for slightly less amount of time. There are solutions to these problems. So for instance, in Python, might look a little something like this. When you know that something altogether, you first begin a and then you commit the Here, too, though, there's Typically, the more you use potentially the higher that you're going to box someone out or Why? Because we can't interact Or you might make his request something that's already been updated. So you generally want to together in between these transactions And you go to CVS and you get cause these kind of performance things. So things indeed The original goal was just to solve more effectively than Python. But as soon as you have these a whole new set of problems arises. Takes practice to get comfortable with. But ultimately, this is all leading of web programming with HTML, The week after, bringing Python So that by term's end, all of these different languages And over the next few weeks, the goal and comfortable with what each of Let's go ahead and wrap here. I'll stick around for questions. We'll see you next time. [MUSIC PLAYING] SPEAKER 1: All right. This is CS50, and this And if we think back to recall that things started pretty in like week 0, when because with Scratch we had a So even as we explored variables and you had kind of a fun environment And then in week 1, of that away, when we introduced C, and because now, all of your programs became and gone was the mouse, the And so now, fast going to bring those kinds of in the form of web programming. And this goes beyond This will, to this week and next week, stuff that we've been doing using Python, using a couple of other languages, on your own Mac, your own PC, to talk to those back-end services. So indeed, at this end of come together into a user interface All of us are on our phones, And increasingly, even the mobile are implemented, not necessarily if you're familiar with called HTML, CSS, and JavaScript, But before we do that, let's provide a because indeed, we'll start to look itself works, albeit quickly, so that all of this code is running, how you really, ultimately, after poking around other actual websites. So the internet, we're all on it. Literally, right now, what What is the internet? It's this utility nowadays, that How would you describe it? AUDIENCE: Big storage. SPEAKER 1: OK, big how the cloud is described, which is for a whole lot of wires And the internet, other AUDIENCE: Bunch of SPEAKER 1: OK, a bunch reach, by way of being interconnected And so really, the internet, There's a whole lot of servers out via physical cables, via via wireless connectivity, and the like. And once you start to have do you get the internet. Indeed, Harvard has its own network and your own home probably But once you start do you get the interconnected network So there's this whole with the internet, some of you've probably seen before. But let's at least peel and consider what some of So here's a picture of the internet back in 1969, when it ARPANET, from the Advanced And the intent, originally, was just in Utah and California, literally of those areas, somehow so that people could A year later, it expanded to And now fast forward to of systems around the world And, in fact, if I here, that's sort of a visualization of the internet as in the abstract, all of these represent just how interconnected And it just means that there's all the all of the more hardware giving But if we focus, really, on just whether back in 1970, or now in 2021, yes, a server, but a certain type And a router, as the data left to right, top to And so there's all these servers here in Comcast's network, Verizon's you have your own routers out is to take in data and then or this way, or this way, so multiple options with multiple cables. You, in your home, probably have just But certainly, if you're a place like there's probably a whole that the data can then So how do we get data For instance, if you want at Stanford, in California, or if you want to visit your phone, your desktop, actually Well, essentially, your when it boots up at the beginning of the address of that local router is. So if you want to send an my laptop is essentially going to And then, from there, I how it gets the rest of the distance. But hopefully, within some Harvard's router is going to is going to send it to to send it to Stanford's router, until server. And we can depict this, actually, Thankfully, the course's to create a visualization for So here we have some of our TFs Let me go ahead and full Give me just a moment to And we'll consider what happens if we from one person or router, in the bottom right hand corner, in the top left hand corner. So each of the staff members of these routers on the internet. [MUSIC PLAYING] [APPLAUSE] The applause is appreciated. It actually took us a to get that ultimately right. So when, what was it the Here we have just, physically, what So Phyllis started with an was that email, presumably, and she wanted to send it to Brian on And so she had all of these different between her and point B, namely Brian. She could go up, down, in her case, and could go up, down, left, or right, And long story short, figure out how you decide left, or right, so to speak. But they do so by taking an input, and And there's at least a couple of because all of these routers and, and phones these days, TCP/IP, a set of seen somewhere on your in print somewhere, which refers that computers use to Now what's a protocol? A protocol is like a set In healthier times, I might like Carter might extend his hand, on a human protocol of like Nowadays, we have mask protocols, is wear a mask indoors. But that, too, is just a set of rules that's somewhere So computers use protocols how they are sending information And TCP and IP are two such protocols What TCP/IP tells someone if she wants to send an email to Brian, so to speak. But on the outside of that virtual And I'll describe this as destination just like in our human world, address on the envelope. And then she's going to put her own corner, just like you, the address in the human world. But, instead of these addresses Cambridge, Massachusetts 02138, USA, on the internet have unique addresses And an IP address is on the internet, that allows to address these envelopes And you've probably seen Typically, the format of IP dot something dot something. Each of those somethings, is a number from 0 through 255. And, based on that little represents a number from 0 is represented with Eight bits or one byte, which is to an IP address must use if we rewind now to some of the And what that means is, it looks like we have 4 billion some Now, unfortunately, of humans in the world these days, have multiple devices, certainly a laptop, and a phone, and you have all of which need to be addressed. So there's another type starting to be used more commonly. This is version 4 of IP. There's also version 6 uses 128 bits, which gives us a for computers, so we can at least handle have today. So this is to say, what ultimately is the destination address, that is address, that is Phyllis's IP address, to point B, and if need the source and the destination. But on the internet, you presumably know There's web servers, there's chat Like there's all of these different And so, when Brian how does he know it's an email, versus versus something else altogether. Well, it turns out that we of this acronym, the TCP in TCP/IP. And what TCP allows us is specify a couple of things. One, the type of service whose it does this with a numeric identifier. And I'm going to go ahead and write down And I'm going to write that in the So technically, now, is not just the addresses, that represents what kind of service whether it's email, or web traffic, These numbers are standardized, and here not even in the context of email, Port 80 is typically used a web page, or a request when that request is actually know, in URLs, known as HTTPS, More on what the HTTP means later. If it's email, the number These are the kinds of things you But if you've ever had to configure, to talk to another account, have seen these numbers, by typing and then a number, which is only to But they're typically have to care about, because automate much of this process. But that's all it takes, ultimately, for But what if it's a really big message? If it's a short email, It might so to speak. But suppose that Phyllis wants like this, or worse, a video of a cat. It would be kind of inequitable on the internet, just to send Brian a really big picture, It would be nice if we could kind across these routers, so that to Phyllis, a little bit a little bit of time to someone else, gets through the internet. But in terms of fairness, she of the network in question. And this, then, allows us to which is fragmentation, and Phyllis's computer would the big packet in question, and then use, not just a single and a fourth, or more. If we do that, though, to need one other piece of information, Like, if you were implementing this, into four parts, like, want to put virtually on the Yeah. AUDIENCE: The order. SPEAKER 1: The order of them, somehow. So probably something like part part three of four, and so forth. So I'm going to write one more thing here. I put some kind of just a little bit of a in what order to And even more powerfully gives us this simple primitive of in these packets. If Brian receives envelopes like these, field, what other feature enable Brian and Phyllis to implement? This is a bit subtle. But it's not just the What else might be useful about might you think? What might be useful here? Yeah, in back. AUDIENCE: How about if you like missed. SPEAKER 1: If you missed something if I heard that correct. So short answer, exactly, yes, TCP, that we're including, can quote Why? Because if Brian receives one four out of four, but he now knows, predictably, that to resend that packet. And so this is why pretty much you either receive the whole Like sentences and words and be missing from an email. Or if you download a it shouldn't just have a just because that packet of TCP, if it is the protocol being used to ensures that it either all gets there, So this is an important property, other protocols out there. There's something called UDP, that doesn't guarantee delivery. And just as a taste of why you might maybe you're watching like a streaming You probably don't to buffer and buffer and buffer, just because you're going to And then you're going to be the the game that ended 20 minutes ago, when Similarly for a voice call, if our voice is constantly buffered. So UDP might be a good that, even if the person on the other you can hear them. It's not pausing and because that would really slow down So, in short, IP handles the and standardizes numbers that every and TCP handles the standardization can be used, between points A and but presumably, when Phyllis she doesn't really know care what his IP address is, right? These days it's, like, I don't that my friends have. I instead look them up in some way. And, indeed, when you visit a It's typically not something something, where each of What do you typically So a domain name, right? Something like Stanford.edu, or any other such domain name. And so, thankfully, on the internet, one more acronym for And pretty much every network on the your own home network, somewhere, You probably didn't have Someone else did, your campus, your But there is some server connected via wires or wirelessly, that just a big spreadsheet, if you a hash table, that has at least respectively. Where on the left hand call domain name, Yale.edu, an IP address on the a DNS server's purpose in life to IP addresses. And vice versa, if you want and technically, just to be precise, it to IP addresses. And we'll see what those But again, all of this just when you turn on your today, because all of these things So how can we actually start to Well, let's go ahead and poke around, Let's see what we can actually do If we now have the ability to and what can be in that envelope but today, onward, it's really There's going to be content like give me today's home page. And there's content would be the contents of And so, just to go one level deeper, are getting from point A to put something specific inside of them, but something called HTTP, which You've seen this for in the form of URLs, so much so that you Your browser just adds and you just type in Harvard.edu, But HTTP is just a final talk about here, that just servers inter-communicate. So this is a distinction now The internet is really like all of the cables, all of a from left to right, right to left, top to point B. You can do anything you email and web and video and chat So HTTP, or the web, that is conceptually on top of, Once you take for granted you can do really just like in our physical world, you can just assume you can do really without even knowing But now that you'll be it's useful to understand how So let's take a peek at the go inside of these messages. These days, it's usually in play, where, again, More on that later, but the HTTP is go inside of these envelopes. And wonderfully, it's just There is a simple text format that goes inside of these to request information from a server, to that client with information. So here's, for instance, a canonical What might you see at the end of this? You might sometimes see a slash. Browsers nowadays kind of simplify But slash, as we'll see, just folder, the root of the like whatever the base is of it. It's like C colon backslash on But a URL can have more than that. It can have slash path, or multiple words, that sort of That path could actually be like something called file.html. More on HTML in just a bit, or maybe with another slash, or Now these days Safari, and even Chrome are in the habit of trying to hide from you and me. Ultimately, though, it'll what URLs you're at, because that we're ultimately going to write. But this is only to say that refers to, presumably, a specific server, on which you're programming. All right, what's this? Example.com, this is the domain Example.com is the This whole thing, www.example.com, And what the WW is referring of a specific server in that domain. So back in the day, there was There might have been a There might have been a Nowadays, this hostname, or can actually refer to a whole When you go to www.facebook.com, that's thousands of servers nowadays. So long story short, somehow get your data but this whole thing is what we This thing here, hostname, address it might alternatively This thing here, top know that dot com means commercial, Dot org is similar, dot net. Some of them are a bit restricted, dot edu is just for accredited But there are hundreds, if nowadays, some more popular than others. CS50's tools, for instance, use CS50.io. IO sort of connotes input-output. It actually belongs, though, to whose country code is .io, and you see are country specific. Indeed, it's something.uk, refer to countries. But some of them have been because they have these Lastly, this is what That specifies how the server uses to point B. So what is Let's now start poking What is inside of this envelope? It's essentially, for our either GET or POST. And if any of you have dabbled you might have seen some But these two verbs describe from you to the server. Long story short, more GET means put any user input so that things you're searching for, usernames and passwords you're and are therefore visible to your computer and but rather they're somehow provided But for now, we'll focus which is perhaps the most common And what we're going to do is this. Let me switch over just And if we assume that little and I'm connected to the cloud, and want to request the web page it's really going to There's going to be a request, and then, hopefully, that request is going to reply with And other terms that are is the so-called client, it is, is the so-called server. And just like in a restaurant, where the server might bring it to you. It's, again, that kind of One request, one response, for All right, so what's inside these Well, this arrow, this line I representing the request, technically When you visit a web on your phone, laptop, or desktop, and the textual message your Mac or PC looks a little something like this. The verb GET, the URL, or rather slash represents the HTTP/1.1 is just some mention of Now we're up to version 2, and And the envelope contains some the fully qualified domain name. This is because single servers can If you're using Squarespace or Wix or nowadays, you don't get your own You're on the same server as But when your customers, include a little mention of your name in the envelope, know to send it to your web page or altogether. Dot dot dot, there's But that's really the essence Hopefully, then, when your browser what comes back? Well, hopefully, a response so the same version, some and then literally a short phrase like this request was satisfied. Then it contains some other that's coming back. And we'll see that this, Text/HTML means here comes some It could instead be image/jpeg there are these different content that uniquely identify types similar in spirit to file standardized this way. Then there's some more But in general, what you see here, are These keys and values are And your browser has been sending And, indeed, we can see Let me go over, in just a though you can do this kind of I'll go ahead and visit And, voila, I'm at Harvard's The content often changes. But this is what it Well, I typed in the URL, but It actually sent me to even though I didn't type that. But it turns out we can poke around Let me open another page. I'm going to start to use incognito care that people know but because it throws away So that every request is going and that's just useful going to see fresh information. My browser is not going to remember But I'm going to go developer tools, which is something And there's something and Safari and other browsers. Developer tools is going to I don't really care what's new, so I'm And I'm going to hover over the And now I'm going to go and the shorter version. I'm going to hit Enter, just flew across the screen. And it's still coming in. And if I zoom in down here, my God, is downloading, what 17, 18, millions of bytes of information, In other words, a bit of a unbeknownst to me, sent one Then the server said, 110 other things you need, 112 So my computer went back and forth, Why? Well, inside of Harvard's web and maybe sound files and that all need to be what is ultimately the web page. But I don't care about like Let's focus on the very first one first. The very first request And I'm going to click on this And then I'm going to see a To an average person using the just as you probably didn't And even then, perhaps not. But if I scroll down to if I click View source, literally my Mac just sent to Harvard.edu. Two of the lines are familiar, and then other stuff that, for now, But let's look at the response I'm going to scroll up now and And this is interesting. It is not OK. There's no 200, there's no word OK. Curiously, harvard.edu What does that mean? Well, there's a whole that's not that interesting for us. But this line, location, is interesting. This is an HTTP header, a that's part of the HTTP And if I highlight just mm-mmm, Harvard is not Harvard's website is now, and perhaps So what's the value here? Probably someone at Harvard wants So they redirected you Maybe the marketing people want you to Why? Just to standardize things, to use a hostname, and not And all this other stuff is sort now, because a browser that by design, by the definition of HTTP, And that's why, in my browser, all of because I didn't really know or But that's why and how I My browser was told to go And the browser just if you will, at which point it and files, and so forth, that Well, let me zoom out. And let me actually go because it's a little more pleasant to without actually using So now let's just use It's called Curl, for going to allow me to play with without bothering to download and so forth from the website. It's going to allow me to Let me go ahead and run, for instance, line arguments that says as though you're a browser. And let's go to Now, by way of how Curl, works, It didn't bother downloading And you see exactly the same Location is, indeed, this one here. So that's kind of interesting. But let's follow it manually now. Let's now do what it's telling me to do. Let's go to the location, with And now, what's a good Most of it's irrelevant. AUDIENCE: Migrate? SPEAKER 1: 200 OK, that if I were using a real browser, Looks like Harvard's version of HTTP It's using HTTP version But 200 is indeed indicative Well, what if I try like Harvard.edu, when this file does probably doesn't exist, and hit Enter. What do you see now, that's perhaps Yeah. AUDIENCE: Error 404. SPEAKER 1: Yeah, error 404. All of us have seen from time to time, when you or someone deletes the But all that is is a is being sent from the server, the actual problem is, So instead of getting something like OK, or moved permanently, simply, is 404 not found. Well, it turns out there's that you'll start to see over time, 200 is OK. 301 is moved permanently. 302, 304, 307 are all similar in spirit. They're related to redirecting the 401, 403, unauthorized or forbidden. If you ever mess up try visiting a URL you're you might see one of these don't have authorization for those. 404 not found, 418, I'm a by the tech community years ago. 500 is bad. And, unfortunately, on a path now to creating next week, we start writing are going to screw up. We're going to have typos, logical just like segfaults were in the world of 503 service unavailable, means or something like that. And there's other codes there. But those are perhaps some Has anyone, we can get away with has anyone ever visited HTTP://SafetySchool.org, Oh, look at that. Where did we end up? [LAUGHTER] OK, so-- [APPLAUSE] --so this has been like a Someone out there has been safetyschool.org, just for But we can now infer, how did this work? The person who bought that domain DNS to point to their web server, what is their web server whenever a browser requests the page? What status code, perhaps? Well, we can simulate this. Let me go over to VS Code. Let me go back over here. Let me increase my terminal window. Let me do Curl-I-xget and that's all this website does. There's not even an No HTML, no CSS languages It literally just exists on the In fairness, there are others. Let me actually do another one here. Instead of safetyschool.org, some years ago, bought And when we do this, you'll see that, but I do need the www. Let's do this one, Enter. That one is not found. This demo actually But someone has stopped paying recently, apparently. So-- [APPLAUSE] OK, so, fortunately, we to which this thing refers. And so, just to put this been quite a few years, have this long-standing rivalry. There is this tradition And, honestly, hands down, one of the was by Yale to Harvard. It's about a three-minute retrospective. It's one of the earliest so the quality is But let me go ahead and And what used to live at If we could dim the lights [VIDEO PLAYBACK] [MUSIC PLAYING] [CHEERING] - Actually we're going And you pass it down. - This is for you, Yale. - We love you, Yale. - We're here to trip up Harvard. - Go Harvard! - Go Harvard! - Pass from the top one, pass it down. - Pass them down. - It's nice to say the ERA sucks. - Let's go Harvard. - Where does? - You see that [BEEP]? Where they're passing. It's going to have to happen. - It's actually going to happen. I can't [BEEP] believe this. - What do you think of Yale? - They don't think good. - Hah-hah. - Because they don't have it. Doesn't run out of stuff. - OK. - Is there another stuff? - Probably that's going - Garbage. - I know, but-- - Well, what houses? - Says, are we in boats now? - How many extras? - How many extra are there? - Sometimes. - Yeah. [CHEERING] - OK. - You guys are from Harvard, right? - No, vote for. Full timer. - Yeah, these are '05s. - Just make sure everyone has one. - They're probably crummy. - We're still passing. - All the cards needed. - Oh, no. My bad. - Yeah. All right, cue it up. [CHEERING] Go, Harvard. [APPLAUSE] - Hold up your signs. [BEEP] - You suck. You suck. You suck. You suck. You suck. You suck. You suck. You suck. You suck. You suck. You suck. You suck. You suck. You suck. You suck. [SCREAMING] - What do you think of Yale, sir? - Going to be, do one more time. - One more time. One more time. [SCREAMING] - Oh, there it goes again. - Oh. - Harvard sucks. Harvard sucks. Harvard sucks. Harvard sucks. Harvard sucks. Harvard sucks. Harvard sucks. [END PLAYBACK] SPEAKER 1: All right, so thanks to Let's go ahead here and consider, in down inside of the have the ability to get data from, Got to stop doing that. Let's consider for just a moment that we now have this ability to And we have the ability to it is we want from the website. We want to get the home page. We want to get back the HTML. But what is that HTML? In fact, we don't yet have the language are written, namely HTML and CSS. But let's go ahead and take And when we come back, we'll All right, we are back. So we've got three But two of them are not What makes something a programming is that there are these constructs via You might have variables, you You have the ability, HTML and CSS aren't so much about and the aesthetics of a page. And so we're going to create this pair of languages, HTML and CSS. And then toward the introduce an actual that actually is pretty similar to both C and Python, but that's going just static, things that you look at, And then next week again, in week 9, tie all of this together, so that you talking to a back-end the experience that you and I now take today. Well, let's go ahead and do this. Let's quickly whip up something I'm in VS Code here. I'm going to go ahead and create a The convention is typically to And I'm going to go ahead But then we'll more slowly step So I'm going to say doctype and then notice I'm going to do open And I'm leveraging a feature of VS generally, to do a bit of autocomplete. So you'll see that there's this symmetry but I'm not typing all of these things. VS Code is automatically generating the Let me go ahead and Open the title tag. I'll say something cute And then down here, I'm going to and say something like Hello, body. And let me specify at the very top, Lang equals en. So at this moment, I have a file in my VS Code as we're using it, We're using it in a browser, download it and run it on a Mac and PC. So we are in this weird using the cloud to want that web page to also live in But the thing about VS that you might use in a browser, by TCP port number 80 or which is HTTP and HTTPS respectively. But here I am, sort of trying to create my own So it's a bit of a weird situation. But that's OK, because is that you and I can just pick port server, on a web server. That is, we can control by just running our own web server in my terminal window. This is a command that we And you'll notice a pop-up just came up. Your application running That's a commonly used TCP port and 443 is already used, on your own port, 8080 in this case. I've opened that tab in advance, and here I see a so-called directory So I don't see any of my other files. I don't see anything I only see the file that I've created Hello.html. And so if I click on this file I don't see the title. But that's because the nowadays is typically And if I'm full screen in my So let me minimize the window a bit. And now you can see just in this here, that Hello, body, is And if I zoom in, there's Hello, title. So what have I done here? I have gone ahead and created in a file called Hello.html. And then I have opened up configured it to listen which just says to the internet, hey, not on the standard port number, And this means I can develop a website here, which is All right, so now let's consider HTML is characterized really by just and attributes. Most of what I just typed were tags, already. Here's the same source code that I Let's consider what this is. The very first line of is the only anomalous one. It's the only one that starts with and an exclamation point. There's no more exclamation This is the document type declaration, it's just got to be there nowadays. It's like a little breadcrumb says to the browser, you are about to That line of code has changed The most recent version of it and it's just a clue to the is being used by you, the programmer. All right, what comes after that? Well, after that, and I've this is what we're going to or a start tag, open bracket HTML is the so-called start or open tag. Then the corresponding close And it's almost the same. You use the same tag number, you But you do add a slash, and with any of the things because, what is this thing here? Lang equals quote unquote of my page is written The humans have standardized for every human language, right now. And so this is just a clue to the and accessibility purposes, itself is written in. Not the tags, but the words, like which while minimalist, So when you close a tag, you close and the angle brackets. You don't repeat the attribute. That would just be annoying to But notice the pattern here. It's new syntax. But this is another example of The key is Lang, the The attribute is called called, it is E-N. So again, in just yet another context. Probably the browser's using a to keep track of this stuff, like a Again, humans keep using the same What's inside of that? The nesting is important but to us, the humans, that there's some hierarchy here. And, indeed, what is inside Well, we have what The head tag says, hey, browser, And then the body tag here comes the body of the page. The body is like 99% of the user's The head is really just the address like the title that we saw a moment ago. Just to introduce the vernacular, as an element, has two children, which is to say that head So you can use the same kind of when talking about trees, weeks ago. If we look at the head tag, how I'm seeing one, and, ignore all the white space, the there's just one child, a title element. And an element is the terminology that and everything in between. So this is the title element. And the title element has one otherwise known as a text node. Recall, node, from our discussions If we jump then to the body, which it too has one child, which is just that says, quote unquote &quot;Hello, body.&quot; What's nice about this indentation, is not going to care, is that it And this is where we connect, is the tree structure we began to It's not a binary tree, to have no more than two children. It's an arbitrary tree that can But if we have a special node the root node, so to speak, is here, just for discussion's sake. It has two children, head Head has a title child, have text nodes, which I've Which is only to say that when your downloads a web page, and sees the contents that it essentially reads the the HTML code, top to and creates in the browser's or your phone's memory or RAM, That's what's going on And that's why aesthetically, to indent things stylistically, to you, and to other programmers, So that's it for like We'll see a bunch of tags But HTML is just tags and attributes. And it's the kind of thing that Eventually, many of them get ingrained. I constantly check the reference if I'm trying to figure out, It's really just these allow you to assemble the This one is being super simple, Any questions on this start to add more tags, more In the middle, yeah. AUDIENCE: What would happen SPEAKER 1: If we put the hello tag Let's try it. So let me actually go to this, whoops, sometimes you don't want But it did that time. I've gone ahead and changed the file. Let me go and open up, give me a and go back to the URL that has my page. Give me a second. There's my Hello.html. Let me zoom in on this. Let me zoom in on this. And let me go ahead now And in this case, it looks like So the browser is hiding it. Technically speaking, browsers And half the time, when it will display, it might display-- not display as you intend it. It might not display the same on There is a tool, though, can help answer this question for you. For instance, if I go W3 is the World Wide of people that standardize I can click on Validate copy paste my sample HTML into And I should see, an error, what you proposed that I do. The browser just did its which was to show me nothing at least, But if I revert that change, and let me copy my original code back now you can see, conversely, And there's automated But we'll encourage you, for to use that particular manual tool. All right, so let's go ahead by introducing a whole to give you a sense of some So I'm going to go ahead and create And I'm just going to do a bunch of so I'm not constantly typing all because I want everything except I'm going to change my title And inside of the body, I need a And I don't really want So let me go to some random website which if you're involved in like this is placeholder text, kind of looks Here, though, I have a handy way of in something that looks like Latin. And I've put those, And they're indeed long. Look how long the So let me go now into Let me reload this page, and you'll Paragraphs.html, which is Let me click on Paragraphs.html, Yeah. AUDIENCE: One paragraph. SPEAKER 1: Yeah, it's obviously one So that's interesting, but it's just a It will only do what you say. And each of these tags tells the and then maybe stop doing something, Hey, browser, here comes Hey, browser, here comes the Hey, browser, that's it for the title. That's it for the head, So it's kind of having this between the HTML and the browser, So if you want a going to want to use And I'm going to go ahead I'm going to keep things neat, by indenting things here. Let me create another paragraph right after that one, keeping everything nice and orderly. Let me do one more here. Let me indent that, and then let me So again, a little tedious, but now I hey, browser, start a paragraph. Hey, browser, stop that paragraph. Start, stop, and so forth. Let me go back to the Let me hit Command R or And voila, now I have three So there's a P tag for paragraphs. So now we have that What if I want to add, for instance, Well, that's something Let me go ahead and create a Let me copy and paste But now, let's preface each And I'm going to just And here I'm going to say H2, two. And down here I might say H3, three. So this is another tag, As you might have inferred this just gives you headings, like in or subsections, or in have different hierarchies to So now that I've added an H1 tag, two, H3 tag and the word three, reload the page again, reloads, I'll do it with the Oh, what am I doing wrong? Yeah. AUDIENCE: Not in headings file. SPEAKER 1: Right, I'm So let me go back a page. Now there's Headings.html. Let me click on that. OK, now we see some evidence of this. Again, it's nonsensical content. But you can kind of see that H2 is slightly less big, but still bold. H3 is the same but a little smaller. And it goes all the way down to H6. After that, you should probably But there are six as you might use for chapters, sections, So those are headings, as an What's a common thing, too, well, let and get some boilerplate here, Let's create a simple and I'll give this a title of List. And let me fix the title of this So in List.html, suppose I want to have they're like a computer just like a mathematician might say xyz. Foo, bar, baths is in List.html. Let me go back to my There's List.html, and, hopefully, on each line like a nice little And this is not English. Chrome thinks it might be Arabic. But that's curious, too, should be overriding that. So Google is trying to override it. All right, what's the why we're seeing foo, bar, and three separate ones? AUDIENCE: We didn't tell it. SPEAKER 1: We didn't tell it to do that. So we need paragraph tags, Turns out there is something else. There is a UL tag, for an inside of which you can inside of which you can put your words. So there's my foo, there's And, again, notice that VS Code But notice the hierarchy, open close LI, open LI, close LI, close UL. So it's sort of done Let me go back to my browser, reload a default bulleted list, that What if I want this list to be numbered? Well, you can probably guess. If you don't want an unordered list, but AUDIENCE: OL. SPEAKER 1: OL, sure, so let's try that. Not always that easy as just OL is going to do the trick. Let me go back to my other browser. Let me reload the page, and now it's It's a tiny thing, but if you have a very long might add some things in the It would just be annoying to The computer is doing it numbering from top to bottom here. All right, what about not just paragraphs, not just You've got some research some financial data you want to present, How might we go about laying Well, let me create a and I'll just copy paste Let me start to close And in Table.html, this is but I'm going to go ahead and do this. Table and close table, tables So T head is the name of that tag, and So I'm going to add that tag. And this is a common technique, finish your thought, and then go What do I want to put in this table? How about a bunch of names and numbers. So, for instance, like left So let's create a table row, Let's create a table heading with Let's create another table And all of that, to be Meanwhile, in the table body, but this time, it's not a heading. Now I'm in the guts of my table. Let's do table data, which is synonymous in like an Excel spreadsheet In this TD, I'm going to and then lets grab Carter's number Then let's put me into the mix, and which often is not good. But we'll see that there's a lot Let me go ahead and do mine, So we're getting to be I'm using four spaces by default. So long as you're consistent, But let me go back to my That then brings me to my Here's Table.html, and this But you can see that there's Because it's a table heading, TH, In there, in the table, are two It's a little, oh, I forgot my One and one, it's not the I feel like I kind of a little more, maybe put But with HTML alone, I'm really So we'll make this prettier soon. But for now, this is how you All right, let me pause here just But, again, the goal right now some basic building blocks, that, again, But we're going to start Yeah, in the middle. AUDIENCE: How to indent? SPEAKER 1: How do you indent paragraphs? Really good question. For that, we'll probably called CSS, Cascading Style Sheets. So let me come back to For the stylization of these things, we're going to need a All right, well, let's is full of, which is like Let me go ahead and create a new file and change the title And then, in the body of this page, The interesting thing about an going to have a start tag and an end Like, how can you start an image It's either there or it isn't. So some tags do not have end tags. So let me do image, IMG, And let me go ahead, and, I actually came with a photo of Harvard. Let me grab this for just a second. Let me grab Harvard.jpeg and pretend that I downloaded And so I'm referring Harvard.jpeg, that apparently is in If this image were on the I could also say like whatever it is, /Harvard.jpeg, but to your own, the Scode environment, by dragging and dropping this you can just refer to it This would be the same thing go to the current directory and But that's unnecessary to type. For accessibility purposes, though, it's ideal if we also give this like Harvard University, and this is so that what it is the photo is, And if you're just on a slow see the text of what before the image itself downloads, So let's now go back to my open browser I now have Harvard.jpeg, which I Let me click on Image.html, a really big picture of Memorial Suffice it to say I should probably fix But to do that, we're going to probably There are some historical use to control width and But we're going to do it with a language designed for just that. How about a video, though. I also came prepared with, let me grab a file called And let me go ahead and change this I'll change my title to be Video. And let's go ahead and now open bracket video, and then let me go And then inside of the video tag, is going to be specifically I know, is Video/mp4, because I looked And the video tag actually I can have this thing autoplay. I can have it loop forever. I can mute it, so that there's no Most browsers, to prevent ads, don't So if you mute your video, it annoy users. And let me set the width of this thing But I can make it any size I want. So I know this just from having But notice one curiosity. Sometimes attributes don't have values. They're empty attributes. They're just single words, and that kind of makes really does what it says. Like, it doesn't make sense Like it's either muted or not. The attribute is there or not. Similarly, for these others, as well. So let me go back to my other browser There is both my mp4 which is the web page that embeds it. And this is actually a video that was and it was amazing. So we included it in this demo here. This is the video that was on But you can see here that would not have the same effect. This is actually a movie, a small Now there's some artifacts here, like I feel like it'd be But again, we'll come back to a language Well, it's not just might want to put into a web page. Let me create another If you've ever poked around with, if or if you had your own blog or you might have been in the in websites, using like Well, this is possible, too, using an iFrame. And an iFrame is just a tag It has source equals, happens to be a YouTube video, there's per YouTube's documentation. So you might do www.youtube.com, embed, So this is essentially what we do, if videos, in the course's website, or If I want to allow full screen, that I know exists, by just And if I now go back to my browser there's iFrame.html. It's not going to fill haven't customized the aesthetics yet. But it does seem to embed a tiny little if you'd like. So we could change the width, change and so forth. But an iFrame is a way of embedding page, if they allow the more of an interactive experience All right, well, the web is, of Let's go ahead and create And if we want to create a web page that else, let's go ahead and do this, Harvard.edu period. Now, in like Facebook, Instagram, a lot in a domain name, or a it automatically becomes a link. That's because those websites have detects something that looks like a HTML itself does not do that for you. And so if I go back to my web if you type visit all you're literally going to see. But instinctively, even if you've we probably do here What could we do to solve this problem. What do I probably want to add. Yeah. AUDIENCE: Surround your-- SPEAKER 1: Yeah, so I want to surround And you wouldn't necessarily or you looked it up, but the tag for called the A tag for anchor. It has an attribute called which is like a link in So let me type in Harvard's Then I'm going to close the tag. And then I can still say Harvard.edu, But the place they're going to go HTTP or HTTPS, and all. Now if I go back here now it automatically gets underlined. It happens to be purple by default. Why? Because we visited So my browser, by default, is indicating But now I have a link and if I hover over it but don't click, there's a little clue as to where on this link. And without going too but to tie together our discussion what if I were to do Right now you have the beginnings P-H-I-S-H-I-N-G, whereby you can even an email using HTML, that tells but they're really going to And that is the essence of If you've ever gotten a bogus or your bank or some they've just written HTML but the underlying tags might And so having the instinct to look or be a little suspicious when you're it's this easy to socially deceive them, by just saying one Well, what if I want to link my page Well, if I want to link I can just do HREF = equals quote in my same account, that So this is how you can create pages, multi-page websites, yourself. So if I now reload this you'll see in the bottom left But that's because I'm in code and it's appending automatically the file name, Image.html. But this should work. When I click on this, I file we created earlier, with a But that's just a way can link to another page on a website. Let's do one other thing here, because, in fact, that wasn't a Responsive means responding to the is so important when someone or on a screen like this these days. There are special tags we can use to based on the hardware. So let me create a file I'm going to copy/paste some starting And let me go ahead and just grab, let from before, just so that we have a And let me go ahead and And I'm just going to paste And that's it. So I just have a big paragraph, Let me go back to my browser. Let me open up this file, to make the point that Let me go ahead and That looks fine. But here's another trick you can do, these days. You can pretend to be another device. Let me go to View, developer, Last time we used this to was kind of interesting, because we traffic is. But notice, we can also click on that looks like a mobile phone. I can turn my laptop into what looks I'm going to click the dot dot dot Instead of on the bottom, I'm going to move it So that now on the left, like the shape of a vertical phone. And, in fact, if I go I'll choose something like Here's what that same website might that looks pretty damn And that's because the responded to the fairly narrow in question, or Android So let me go ahead and do this. Let me go back into my code. And let me go into the head of add another tag up here. This word is now all over is a metatag that is to specify the name of some kind or property, if you will. Viewport is the technical term that the human sees in a browser. It's essentially the body of the is currently seeing. And you can specify the should have an initial scale of 1. So it shouldn't be zoomed in or out. And the width that the should be equal to the device's width. These are sort of magical statements or copy/paste or transcribe, that assume that the width of the page is the Don't assume the luxury of a Now, making only that change, let here, using Chrome's developer tools. Let me reload the page. And now, it's not very effective on this is there-- well, there we go. Let's do this. There we go. So if I zoom in to 100%, this would be readable than it would even though I realized that demo But it's as simple as to resize the thing to All right, let me pause here to see feels like enough HTML tags. We'll add just a couple of more in. But for the most part, things you Google and figure out over The basic building blocks Some attributes have values. Some do not. And that's sort of the Questions on any of these, though. Yeah. AUDIENCE: Do attributes have an order? SPEAKER 1: Do attributes have an order? No, attributes can be in any I tend to be a little nit-picky, if only because then I can easily if it's not there alphabetically. Most people on the internet Yeah, in the middle. Version. Yeah, good question. I mentioned that HTML other languages for user interfaces. And it's not just HTML alone. It's HTML with CSS, with JavaScript, today. That rather has been the and the ability for companies, to write one version work on Android devices and iPhones It is very expensive. It is very time-consuming to and write an Android app, learn and make an iOS app, not to the same, not to and then remember to I mean, this is just very painful So this standardization on even for mobile apps and web apps, because it solves problems like that. All right, so let's go ahead and now do All of these pages thus of static content, content Well, let's go ahead and do this. Let me introduce one other a little something like it did before. So slash path, but it could slash path question You might not have noticed, the URLs in your URL bar every day. But these things are everywhere. Often when you type into a a search query, whatever you When you click on a link that there might be a question mark, There might be an ampersand Here, again, is that very of just associating keys with values. We can see this as follows. Let me actually go to here, and let me search for something Enter, notice now that my to google.com slash Q equals cats, ampersand that I don't understand or know. So let's just delete it for now, and And that still works. If I zoom out here, years ago Now you get videos of the movie. And then that top query But we can also, of And there are the All right, this didn't used to But anyhow, the point is that the URL And this is such a simple, This is how humans They don't manually create the But when you fill out a form typically the URL suddenly whatever you typed in, the form is using the verb GET. That's not ideal. If you're typing in a a credit card information, because you at your laptop to see literally saved in your history. So there's another verb, POST, And it's just sent a little differently. But things like this are and what that means underneath the making a request like this, Get/search? Q equals, whatever you typed in, the And hopefully what comes back is a page And what's interesting here now is, if and let me go ahead and create a In Search.html, I'm going to start change my title to search. And in the body of this page, I'm And in this form tag, I'm going And the types of inputs are going to is going to be submit. And this isn't that what is happening in the page itself. Let me go back to my directory listing. Let me click on Search.html. I seem to have the beginning It's not very interesting. It's just a text box But let's finish my thoughts here. So let's specifically give which, if you roll back to the late '90s created Google.com, Q represented query, So the name of this shall be Q. The form is Technically it uses GET be explicit and say method Stupidly, it's lowercase in HTML, even uppercase, by convention. The action of this form, specifically, But we don't really have time So we're just going to send the So I'm creating a form, is to send the data to Google's slash It's going to send an input called Q, Let me go back to the Nothing seems to have changed yet, so we can see the URL bar. Right now I'm in Search.html. If I zoom out and search for I'm whisked away to google.com. But notice that the URL is pairs, that key value pair. And I get back a whole And I can very easily now Right now, it's not ideal that like and click in the box. And it's a little obnoxious If I don't want to well, according to HTML's documentation, Autocomplete equals off, to turn to automatically put the If I want some explanatory text, I can &quot;query.&quot; And now if I go back to now it's a little more user-friendly. You see query in kind of gray text. The cursor is already I don't have to even move my cursor. I can search for dogs now, and you Hit enter to submit, and there we go, adorable dogs, instead. So what have I done? I've implemented the front end of To implement the back going to need like a really big We're going to need some code that like or anything else. We're going to need Python And in fact, that's the direction when we implement that back end. But today it's all about this front end. Or any question, then, about forms, transition to making things look And then we'll end by making with JavaScript. Anything at all? No? All right, so let's start to answer came up, by making these pages a Let's go ahead now and introduce to Let me go ahead and create as though I'm making a home And in this page, I'm going And I'm just going to First I'm going to have maybe at the top, that says something like my name, John Harvard, for Then in the middle of the page, welcome to my home And at the bottom of the page, I'm says something like copyright, Harvard, or something like that. All right, so it's like a web page made with text. This isn't that interesting. If I open this page called and create three quick paragraphs, Inside the middle, I'm going to say exclamation point! And at the bottom, a little footer that says a little simple copyright All right, now let me reload the page. And there we go. It's a very simple, very underwhelming Let's start to now stylize so that it's a little more First, these aren't really paragraphs. They're sort of like areas of the page, There's like the main part of my screen. And then there's the So paragraphs isn't quite paragraphs of texts. I might more properly call of the page, which is a very commonly this generic rectangular region to it. It does not do anything aesthetically, It just creates an invisible you can start to style the text. Or I can take this one step further. There's some other tags in HTML, have names that describe the is all the more compelling these for screen readers, for search engines, engine can realize that footer The header might be The main part of the page that I want users to be able to search So let's start to stylize Let's introduce a style inside of which is going to be large, text align colon center. On Main, I'm going to add a medium, text align center. And then on the footer, I'm going small, text align center. What's going on here? Well, in blue is the called CSS, for Cascading Style Sheets. We're not really seeing the But in blue here, notice is It's different syntax describe what you're This is another example of what AUDIENCE: Key value. SPEAKER 1: Yeah, it's just It'd be nice if the world standardized because we've now seen equal signs and all this. But it's just different The key here is font-size, The other key is text-align, The semicolon just separates Just like in the URL, the ampersand The designers of CSS Strictly speaking, this I tend to include it just for because there's nothing after that. This is a bit of a weird example. This is the co-mingling of So as of now, you can use the CSS in the value of a style attribute. We did something a little a week plus ago, when we included So again, languages can kind But we're going to clean is going to get messy quickly, of Harvard's or Yale's, or the like. So let's see what this looks like. Let me go back to my browser And it's not that different. But it's indeed centered, and it's And let me make one refinement. The copyright symbol but there's no key on I can actually magically say using what's called an HTML entity. It turns out there are numeric allow you to specify symbols that but that don't exist on most keyboards. If I reload the page now, now So minor aesthetic, but it So even if you've never can probably find something I did here, like poor design. It is correct, if my goal was small, looks like a bad design, seen this language before. Yeah. AUDIENCE: Same SPEAKER 1: Yeah, I've used like copy/paste, or typing the It has rarely been a good thing. Well, here's where we can take because it supports what whereby children inherit the properties, or ancestors. And what that means is, I can do this. Let me get rid of this text align. Let me get rid of this text align. Let me get rid of this one. I could get rid of the semicolon, And let me add all of that style so that it sort of cascades down to the as well. And let me close my quotes there, too. Now, if I go back to my browser But it's a little Because if I want to change the text I can now reload the page, and I change it in one place, not So that would seem to be And could we do this Well, it's not that elegant that This generally tends to you co-mingle your HTML and your might be really good at laying and the content and the data, and you or just not care about the aesthetics. You might work with a who's much better at all of Wouldn't it be nice if you could work And you don't have to edit the same lines Well, just like we can move or packages in Python, we So I'm actually going Let me get rid of all of and let me now start to practice a with my HTML. Let me instead move it into the instead of an attribute. This is one of the rare are attributes that have the It's not very common, Here's a slightly different syntax for If I want to apply CSS properties, to the header of the page, I say and inside of those I say Then, if I want to apply some properties I again do font-size, say, medium, Then, lastly, on the can assign some properties like center semicolon. And I don't have to do It all just represents But, because of this style the browser knows in encounters a header tag, a it should apply those If I reload the page, other there's no other changes. All we're doing is sort of But now everything's But there's still a bad design here. What could I now do Similar problem to before. Yeah. AUDIENCE: Create it. SPEAKER 1: OK, create a I like that. Let's go there in just one second. But even as we're here, we can probably chip away at. Yeah, get rid of the text-align center doesn't seem necessary, else, if I get rid of text-align center, in order to bring it back, but And the page, if I scroll Yeah. AUDIENCE: The body. SPEAKER 1: Yeah, so the body tag. So let me go ahead and say body. And then in here, put text-align center. And that, now, if I reload the but it's just better factored out that kind of commonality. And so, just to make clear these are all, again, CSS And there's different types And there's this whole taxonomy. What we've been doing thus far are what where the type is the name of a tag. And so it turns out there's And let's head in this direction. Let's go ahead and maybe write because you know what would be nice. I bet, after today, once I start or John Harvard's home to have centered text on other pages. And I might want to have large It'd be nice if I could reuse and kind of create my ultimately putting it So let me do this. Instead of explicitly applying let me create a new rather, for myself, called centered. It has to start with a is inventing my own class, so to speak. This has nothing to do with Class here is this aesthetic feature. And, actually, let me rename dot medium, and dot small. What this is doing for me well-named words, that I or potentially in other web I can now say, if I want I can say class equals centered. On the header tag, I can On the main tag I can On the footer tag, I can But let me take this one step further. As you suggested, why and let me actually get rid copy it to my clipboard. Let me get rid of the style tag here, and let me just save all of that same nothing else, no HTML whatsoever. But let me go back to my is one of the most annoyingly named mean what it does, Link HREF So ideally we would have used the but this is link in the We're linking this file to this other using this hyper-reference, of that file to this one A stylesheet is a file of stylizations, a whole bunch So here, too, it's If I reload the page, nothing changed. But now, I not only have because I can now use those same classes my third page, my fourth page, my bio, making on my website here, I including one line of code, instead of stuff into file after file after file. And heck, if the rest impressed by my centered class, and I could bundle this up, let other and I have my own library, my own CSS Why should you ever invent if I already did it for you, But it would be nice in a way that's usable So this is perhaps the best Use classes where you can, use but don't use the style attribute starts to get messy quickly, All right, any questions, then, on this. No, all right, so When you specify dot you're selecting all of the tags in the and applying those properties. So there's a couple of a taste now of what's possible. There's so much more that you can Let me go ahead and open up a few Let me go ahead and open up VS Code. And let me go ahead and copy Give me one second to grab the source so that I can now go into of the pre-made examples and let me open up paragraphs one here. So here's something, But does anyone notice This is just some generic But what's noteworthy Yeah? AUDIENCE: They're bigger. SPEAKER 1: Yeah, the first Why? Who knows, it's just a stylistic The first paragraph is bigger. How did we do that? Well, we can actually explore One, I can obviously go into But, now, that we're using Chrome and let's again go into them. View developer, developer let me turn off the mobile feature, to the bottom, just so We looked at the Network tab before. We looked at the mobile button before. Now let me click on Elements. What's nice about the Elements tab version of the web page's HTML, for you, so that you can now henceforth code, the HTML source code, of Notice that my own web page There's a bunch of paragraph But notice what I did. The very first one, I gave an ID to. This is something that you, You can give an ID attribute to give it a unique identifier. The onus is on you, not to If you reuse it, you've screwed up. It's incorrect behavior. But I chose an ID of have some way of referring to the If I look in the head of the notice that I have hash first. So just as I use dot for uses a hash symbol to And what this is telling the browser, F-I-R-S-T, without the hash, And that's why the first paragraph, is actually stylized. If I actually go into me go into my source eight directory. Let me open up Paragraphs1.html. Here is the actual file. If I want to change the color of that I can do color colon: green. Let me close the developer And now that page is green as well. You don't have to just use words. You can use hexadecimal. What was the hex code for green in RGB? Like no red, lots of green, no blue. So you could do 00 FF 00, using is the same symbol, but it This is just how Photoshop and Let's go back here and reload. It's the same, although it's a This is pure green here. If I want to change it to red, that and here I can go and reload. Now it's first paragraph red. This actually gets Like, if you're a web designer trying it actually might be fun before you open up your editor and save and reload. That's just more steps. So notice what you can too, in Chrome and other browsers. When I highlight over this notice that, one, it If I move my cursor, it If I move it, it gets highlighted. So it's showing me what But notice over here on see all of the stylizations Some of them are built-in. The italicized ones here at the That means this is what Google makes But in non-italicized which is my code, that I just changed. And if I want to start tinkering with I changed it to blue. But notice, if I go back to VS Code, I This is now purely client side. And this is a key detail. When I drew that picture making a request to the cloud, the coming back, the browser, has a copy of all the HTML and however you actually want. And, for instance, you can Let's go, say, on a field trip So here's Stanford's Let's go ahead here their admissions page, Let me go ahead and view developer developer tools, elements, And notice it's collapsed, Here's their main part, and to just open and close the tags, Suppose you want to kind you can actually like right or control click, Inspect, and that's to the tag in the Elements And notice, if I hover over this as an unordered list from left to right. But it doesn't have to be a They've used CSS to change it to be research, health care, Well, so much for So now, if I close developer tools, But, of course, what have I really done. I've just like mutated So this is not hacking, be how they do it in TV and the movies. It's still there if I reload the page. But it's a wonderfully powerful way different things how you want to design how Stanford did something. So, for instance, if I right click go to inspect, and let Let me keep going up, up, There's going to be a lot going on here. But notice, they have applied to that particular UL tag. But notice, here, this is And we'd have to read more to learn this is how they probably And what you can do is just tinker. Like, all right, well, Well, let me uncheck it. All right, didn't really change there we go. So now the margin is changed, the Let's get rid of this. We can just start turning to get a sense of how I'm not really learning Let me go to the LI here for, let's Margin, there we go, OK. So when there's a that's apparently effectively changing if I turn that off, now Stanford's And there are those bullets. So again, just default styles, and a good web designer how to do these kinds of things. All right, how about a couple before we'll take one more break. And then we'll dive in with programmatically. Let me go ahead and open up, Let me close this tab, let me go And this one looks I go ahead and inspect notice that I was able somehow, which is just many ways to solve just like there is in C and Python. Let me look in the head and This is what we might call that allows us to specify that itself happens to So you can apply CSS to a very There's also syntax for last is supposed to look a little different. So, here, I've just of creating my own unique using this type of selector as well. Well, what more can we do? Let me go into another example and here we have a very simple But notice it's purple been to Harvard.edu before. Let's see if we can't maybe to be a little different. Let me go into Link version And now Harvard is very red. How did I do that? Well, let me right click and I can start to poke around. It looks like my HTML is It's just very simple HTML, So let's look at the style. Let me zoom out. And we can look at it We can literally look at or we can look at Chrome's It looks like my style has changed the color to be red, and the but it's another CSS property, to none. Notice, if I turn that are underlined by good for familiarity, for But, if it's very obvious what maybe you change text But maybe, watch this, maybe the when you hover over it. Well, let's look at how Notice that I have stylization, and I here, as tends to be convention in CSS. Color is red, text decoration is none. But, whenever an anchor you can change the text decoration So, again, just little ways of playing once you understand just different types of selectors. And you might have to remind as to what the syntax is. But it's just another way of scoping Let's look at version 3 of this If I go to Link3.html, maybe I Yale links blue. How might I have done this? Well, let's right click, And here we might have two links, just to, again, emphasize, you can I gave my Harvard link an ID of In my CSS, if we go to the head The tag with the Harvard ID, a.k.a. #Harvard, should be red, and then any anchor tag should unless you hover over it, at which And so, if I hover over Harvard, it's blue underlined. If I want to get rid of the IDs, I Let me go into Link4. Same effect, but notice, How else can I express myself? Well, let's look at the CSS here. The anchor tag has no text unless you're hovering over it. And this is kind of cool. This is what we would an attribute selector, where you based on an attribute. So this is saying, go ahead who's HREF value happens to Do the same for Yale, and make it blue. Now, this might not be ideal, because these equal signs don't a different Harvard or different Yale So let me look at version Look at this style, and I This is new syntax. And, again, just the kind Star equals means, change any anchor Harvard.edu to red, and do the same So star here connotes wildcard. So search for Harvard.edu or and if it's there, colorize the link. And, again, we could do this all to actually achieve the same kind And as projects just you just have more and And so you have certain And, indeed, if I may, of what are called If you're a full-time working for a company doing the same, that you adhere to. For instance, the company might say, Or always use attribute And it wouldn't be necessarily But they might have a But, what many people, and is they do not come up with all They start with something off the shelf, source framework, that just gives for free, just by using And one of the most is something called on all of its websites, It's at getbootstrap.com, and this a website that documents And there's so much documentation here, how about components. It just gives you, out of the can create little alerts. If you've ever noticed little colorful warnings at outs, to draw your attention to things. How did we do that? It's probably a paragraph and maybe we changed the font color. We changed the background color. Or it's a lot of stuff we could but, you know what, the wheel if we can just use Bootstrap. So, for instance, let If you've ever seen on CS50's website let me just zoom in on this. We are just using HTML like this. We're using a div tag, which, a rectangular region of the page. But we're using classes called alert Those are classes that the They associated certain colors and padding and margin so all we have to do Role equals alert, just makes clear is an alert, that should and whatever's in between is what the human would see. How do you use something like Bootstrap? Well, you just read the documentation. Under Getting Started, there is a So let me do this. So in Table.html, we had code like this. Let me actually read Bootstrap's And they tell me... copy/paste this code. I'm going to put this And it's quite long, but which I used earlier for my is this CDN link, content referring to a specific version of And the file that I'm including This is an actual file I If I open this in a separate that Bootstrap has made Crazy long, no white space. That's because it's been waste space by adding lots But this contains a whole lot, that we can reuse, thanks to If I want to use some JavaScript But we'll come back to that before long. Let me now just make a couple If I go into my browser is what it looked like previously, bold, but centered, and then and the numbers were to the right. It's fine. It's not that pretty, but it'd be nice So if we add Bootstrap into it, when I reload the page. No longer are Chrome's Now Bootstrap's default is a way of enforcing similarity Safari, and others. Notice it went from a font, and something cleaner like this. It still looks pretty ugly, but let Let me go under their And if I just kind of these are some good Like, there's some underlining There's a dark line. If I keep going, ooh, if I want to have a colorful table, out myself if I want if I want to have alternating There's so many different stylizations But I care about making a phone book, So if I read the documentation closely, is add Bootstrap's table and watch with a simple reload, what Much nicer, right? Might not be what you want, but, my I just really prettied things up. And so here, then, is the value of It allows you to actually user-friendly websites than you might certainly quickly. In fact, let's iterate one before we introduce a bit of that code. Let me go ahead and open which, recall, looks like this, was this very simple Google search. And suppose I want to reinvent Here's a screenshot of It's got an about link, a store sign in, their logo. It's not appearing well but there's a big text box in Google search, and I'm feeling lucky. Well, could I maybe go about using some HTML, some CSS, just so I don't have to figure out Well, here's my starting point. In Search.html, let's go and add so that we have access to all of And let me go ahead and Well, just like Stanford's site had but they changed it from being a I bet I can do something So let me go into the body based on Bootstrap's documentation, a div with a class of container fluid. Container fluid is with Bootstrap that says, make grow to fill the window. So that way it's going to resize nicely. I'm going to go ahead and If you haven't discovered highlight multiple lines hit Tab and indent them all at once. So now, I have all of Now, just like in Stanford's site, let's an LI, called with a class of NAV item, let me go ahead and say, A which is the real URL And I'll put the about text in there. Then I'm going to close my LI tag because I'm using Bootstrap. Bootstrap's documentation, says to add a class to your links, to make it dark, like black or dark All right, so I think I in a navigation part of my screen. Let me go ahead and All right, so not exactly what I wanted. It's a bulleted list, still, so Let me read Bootstrap's And let me pretend to do If I go under content, oops, and I go to Navs and if you want to create a pretty menu from the left to the I essentially need HTML like this. And this is subtle, but I should have added a So that was my bad. Let me go in here and NAV, and then again, this class NAV link text dark, Let me go back to my page here, But at least the About link is just like it should be Now let me whip up a couple Let me go and do a little we can avoid this kind of copy/paste. Let me change this link The text will be store. Let me go ahead and create So this one's going to go technically it's www.google.com/gmail. Normally it just redirects. And let me grab one more of these. And for Google Images, and I'm I'm going to, come on. I'm going to put this here, too. This is going to be images, and All right, let me go ahead Now it's coming along, right? About, store, Gmail, images. It's not quite what I want. So I'd have to read the how to maybe nudge one of these And there's a couple of ways to do this. But one way is if I want Gmail to move else, I can say that add some margin to This is in Bootstrap's documentation, a just automatically And now, if I reload the page is over to the right. All right, so now we're Let me go ahead and add the So here with sign in, let me go so let's go ahead and do one And then, inside of this LI Turns out there is a class that can turn for button, and then button the HREF for this one is going gle.com/service/login, which is on that big blue button. The role of this link is that of button. And then sign in, is going If I now reload the page, now although it looks a little stupid. Notice that sign in is way whereas the real google.com has OK, that's an easy fix, too. Let me go back into my HTML here. Let me add margin-3. This, too, is a Bootstrap thing. They have a class called m-something. The something is a I believe, that adds just So if I reload now, OK, And now let me accelerate. Just to demonstrate how I can and open up my premade I added to this some final flourishes. If I go to Search2.html, I with just this out of a re-implemented essentially google.com. Here's a text box, here's two a little washed out on the screen. I even figured out how to get dots And if we view source, you can see If I go to view developer tools, and I and I go into this div, you'll see And I added some classes there to make If I go into the form tag, this But, notice, I used with button and button light classes. And then I stylized And so in the end result, if I want and click Google search, something that's pretty without even touching raw CSS myself. And now here's the value, You can just start to use that someone else created for you. But if you want to make like the shade of blue that or you want to curve where you can create the last mile, sort And that tends to be best practice. Stand on the shoulders of others as And then if you really don't then use your own skills and to refine things a bit further. But still, after all of that, all of are still static, other which searches on the real Google.com. Let's take a final 5 give you a sense of what we can next See you in five. All right, so I think about to see our very last language. Next week and final going to be about Thankfully, this language called syntactically to both C and Python. And, indeed, if you can imagine you can probably do it in The most fundamental is that when you have written C you've done it on the server. You've done it in the And when you run the code, it's The difference now today even though you're going to write recall that, when a browser gets it's going to get a copy of the HTML, So JavaScript, that we see today, is on users' own Macs, PCs, and JavaScript can be used on the server, It's an alternative to Python or We are using it today client So in Scratch, let's If you wanted to create a variable In JavaScript, it's You don't specify the type, and there's a few others as well, that If you want to increment that could say something like, or you can do it more or the plus plus is back in JavaScript. You can now say counter In Scratch, if you wanted to asking if x less than y, it looks unfortunately, back. The curly braces here are back, if you But, syntactically, it's pretty much and even for it's else if else. Unlike Python, it's two So quite, quite like C, If you want to do something forever In JavaScript, you can do it a few you just say while true. In JavaScript, Booleans are So it's lowercase true. If you want to do something like repeat three times, The only difference, really, is using And, again, you'll use let to or any other type of The browser will figure out In C we would have said INT instead. Ultimately, this language, and that's There's bunches of other going to be that accessible, The power of JavaScript is going to be that you can Think about most any website, that's It's typically very If you're sitting in front of Gmail on open, and someone sends you another row appears in your How is that implemented? Honestly, it could be an HTML table. Maybe it's a bunch of The point, though, is, you don't R to reload the page to see more email. It automatically appears How is that working? When you visit Gmail.com, HTML and CSS with your You're downloading some is designed to keep talking every to Gmail servers, and they, to add another element, another to the existing DOM, document object in memory that represents HTML, to update in real time. Google Maps, same thing. If you click and drag and drag download the entire world to It only downloaded what's in your But when you click and drag, it's some more images, some more JavaScript, again, behind the scenes. So let's actually use JavaScript How can we do this? We can put the JavaScript in the body of the page, or even So let's take a look. Here is a new version of I just added a form to, because it'd say Hello, title, Hello, body, it said, whoever uses it. I've got a form that I borrowed and that form has an input whose ID is But there's no code in this yet. So let's add a little bit of Suppose that, when this form is How can I do that? Well, let's do it the I can add an attribute called and I can say on submit, call the Unfortunately, this But I can make it exist. But there's another detail here. When the user clicks submit, normally I don't want to do that today. I want to just submit the form to and just print to the screen, So I'm also going to go And this is a JavaScript way of telling to submit the form, return false. Like, no, don't let them But do call this function called greet. In the head of my page, I'm going to add implicitly JavaScript, for those of you who took APCS with but no relation, I'm going to Apparently in JavaScript, the literally say the word You don't specify a return type. And in this function, I could do unquote, how about, Hello, there. Initially I'm going to keep it simple, which is not a good user interface. There are better ways to do this. But we're doing something simple first. Let me now go ahead and It still looks as simple as before, I'll zoom in to make it bigger. I'm going to type my name, to be ignored when I click Submit. It just says, Hello, there. And this is, again, this It literally says the whole is saying this to you. It's really just meant for simple All right, let's have it Well, how can I do this? Well, if this element on the it'd be nice if, just like in CSS, I using code. And I actually can. Let me go ahead and do this. Let me store, in a variable of calling a special function This query selector function of what we were doing using hashes or dots or other syntax. It's the same syntax. So if I want to select the I can literally just pass, in just like in CSS. That gives me the actual It gives me one of these rectangles If I actually want to get at I need to go one step So, similar in spirit saw a lot of dot notation, where inside of an object, Long story short, in JavaScript, called document, that lets you just do itself. One of those functions That function returns to you And dot value means go and grab the actual text So if I want to now say, the syntax is a little I can use concatenation, which but we didn't use it much. I can go ahead and say hello, All right, now, if I go reload the page, to get the latest and click Submit, now Not the best website, but I can start to interact with the page. But let me stipulate that is never a good thing. It's fine to use equals quote unquote and that was not going to scale well, once Same here, once you you don't want to just put your code So there's a better way. Let's get rid of that and literally never use it again. That was for demonstration's sake only. And let's do this. Let me move the script tag, but still inside the body, so after the form tag exists, logically. Just like in Python, your code is And let me now do this. Let me define this function let me do this, document.queryselector, It doesn't have a unique ID. It doesn't need to. I can just reference it by name, form, And let me call this special This is a function that Now this is actually a term Many different languages And pretty much any user interface is On phones, you have touches, and you and you have pinch, and all On your Mac or PC you you have key down, key up, as on the keyboard. This is a non-exhaustive that you can listen for in the And this might be a throwback Scratch let you broadcast events. And we had the two puppets sort of In the world of web programming, game these days, they're And you write code that listens So what do I want to listen for? Well, I want to add an event And when that happens, I want to So this is kind of interesting. Thank you, I have my Greet But I'm adding one I'm telling the browser to to select the form. Then I'm adding an event listener, And when that happens, I call Greet. Notice I am not using I don't want to call Greet right away. I want to tell the browser to call Now let me go ahead and deliberately, here, let me type in my name, All right, Hello, David. All right, but let's now make Right now, I'm defining a But I'm only using it in one place. And you might recall, we where I was like, why are we creating when we're only using And we introduced what type of AUDIENCE: Lambda. SPEAKER 1: Yeah, so lambda You can actually do this If I want to define a function all Let me cut this onto my Let me fix all of the alignment. Let me get rid of the name. And I can actually, now, do this. The syntax is a little weird. But using now just these four I can tell the browser to add an And then when it hears that, call And unlike Python, this function which is actually a nice thing. It looks a little weird. There's a lot of indentation But you can think of this as just when the form is submitted. But if I want to block the form I've got to do one other thing. And you would only know this from being I need to do this passing in this E argument, which the event, more on just allows us to prevent handling of that particular event is. So long story short, this is you might write in JavaScript, with your code, the user's actual form. And we can do interesting things, too. Built into browsers nowadays So here's a very simple example, that one green, one blue. Well, it turns out using the CSS of a page programmatically. I can change the background to red, to green, to blue, just by and then changing CSS properties. Just to give you a taste of this, similar code here, I can that I apparently defined I can add an event listener, this And when it's clicked, I And this one line of code but you can go into the body of and you can change its This is one example of not talking to one another in advance. In CSS, properties that have two like background-color. Unfortunately, in JavaScript, if that's subtraction, which is So in CSS, you can convert background Color, where and you get rid of the minus sign. What else can we do here? Well, back in the day, there And it's one of the of a tag that was removed from HTML, this is what the web looked like. There was a lot of this kind of stuff. There was even a marquee from left to right over the screen. And the web was a very ugly place. I will admit, my very first web page But how can we bring it back? Well, this is a version of the How? I wrote some code in this example, that the CSS of the page to be invisible, because built into So you can just do something Let me go ahead and open up So let me zoom back out. In Autocomplete.html, I whipped up as but I also grabbed the set 5 speller, so that if I want this searches that 140,000 to create what we know in the When you start searching should start to see words And sure enough, if I search here's the three variants of bananas How is that working? Just JavaScript, when it's just updating the DOM, the to show more and more text, or less. And for one final example, this is how and Uber Eats and so work. You have built into browsers today some interfaces, whereby you can ask for For instance, here, I wrote a apparently asking to know my location. All right, let me go ahead if that's something you're It's taking a moment, because sometimes to analyze. But, hopefully, in just a moment, there and as a final flourish today, for what for your structure, CSS JavaScript for your logic, which we'll and search Google for Zoom in here on Google Maps, OK, we're pretty close. We're not on that street, but There is the marker it had put for us. We're indeed here in Memorial Hall. So all that with JavaScript, of the DOM and the we'll pick up where And now add a back-end. See you next time. [MUSIC PLAYING] DAVID: All right. So this is CS50 and this is in terms of programming fundamentals. Today, we come rather full circle that we've been looking at And with HTML and CSS we're going to add back into And with that, do we have the And even though this isn't there, increasingly-- or people and a browser to access applications but it's also, increasingly, the way There are languages there are languages but coding applications means knowing twice as many language, potentially. So we're increasingly seeing, that the world is starting at least for the next some number of coupled with other languages like And so today, we'll tie and give you the last of the to tackle final projects to ultimately, and somehow solve But we need an additional tool today, This is just a program that that you can install written in a language called that we've been using to But you can run it on your own But all this particular serve up static content JavaScript files, maybe images, maybe It has no ability to really interact You can create a web form and serve but if the human types in input into submit it elsewhere to something like it's not actually going to go anywhere process the requests that are coming in. So today, we're going to introduce comes with Python that allows but also process user input. And recall that all that input is or more deeply inside of So here's the canonical URL we talked like www.example.com. And I've highlighted the slash to like the default folder a file called index.html Otherwise, you might have of the actual file named file.html. You can have folders, as you probably set. You can have files in are all examples of what a programmer So it might not just might have multiple slashes and multiple But this is just more But there's another term of our, that we'll introduce today. This is also synonymously a better generic description of what they don't have to to a specific folder can come up with your And just make sure that when the a certain website page. If they visit something else, you It doesn't have to map to a very And if you want to get input from like q=cats, you can add a question The key, or the HTTP parameter name and then equal sum value that, If you have more of these, and then more key equals value pairs The catch, though, is that using the we don't really have the ability to things like q equals cats. You could have appended question to any of URLs in your home but it doesn't actually do unless you use some fancy JavaScript. The server is not going to bother But today, we're going to And in fact, we're going to use a web of using HTTP server alone, look for any key value pairs and then hand them to you in Recall that a dictionary in Python, a That seems like a perfect fit And you're not going to have It's going to be handed to you by So this will be the really, that we look at in the class. And a framework is essentially that someone else wrote therefore, for doing things. So those of you who really this past week to make your home you are using a framework. Why? Well, you're using libraries, code that maybe some of the JavaScript that But it's also a framework in the You have to use Bootstraps have to lay out your divs or in a sort of Bootstrap-friendly way. And it's not too onerous, but that a bunch of humans standardized on. So similarly, in the world of we're going to start using today. And whereas Bootstrap is Flask is going to be used for Python. And it just solves a lot It's going to make it easier and get key value pairs, for us to find files or to see when visiting our website. It's even going to make it easier like when someone fills out a form. You can dynamically, using code, So Flask, and with it it's just going to make stuff And to do this, all we have to do requirements of this framework. We're going to have to create a this is where our web app or If we have any libraries that we want to is to have a very simple text where you list the names top to bottom, in that text file, or the import statements that we We're going to have a static means any files you create that like images, CSS files, they're going to go in this folder. And then lastly, any web pages you want the to go in a folder called templates. So this is, again, evidence of Do you have to make a web app like this? No, but if you're using this is what people decided If you've heard of other frameworks like there are just different conventions Flask is a very nice All you have to do is adhere to to get some code up and running. All right, so let's go Let me go ahead and here, and let me practice by first creating app.py. And let's go ahead and create maybe, says hello to the user. So something that, initially, is not all But we'll build on that So in app.py, what I'm going to do I had on the screen earlier. From Flask, import Flask, with a capital And I'm also going to a couple of functions, More on those in just a bit. And then below that, I'm going Give me a web-- a going to be the result of calling this weird incantation here, name. So we've seen this a few weeks back and we had that if main thing For now, just know that __name__ And so this line here, simple as turn this file into a Flask application. Flask is a function that just figures The last thing I'm going to do for this I'm going to say that I'm index that takes no arguments. And whenever this to return the results of rendering And that's it. So let's assume there's a file it yet, called index.html. But render template that is printed to the The last thing I'm going to when to call this index function. And so I'm going to tell it to define And that's it. So let's take a look at This is slightly new syntax, and that we'll have today in Python. This is what's known in Python A decorator is a that modifies, essentially, For our purposes, just know hey Python, define a route page on my website application. The next two lines, seven define a function called And the only thing you should ever do is &quot;index.html.&quot; All right, so that's it. So really, the next question, what is in index.html? Well, let me go ahead and do that next. Let me create a directory called what I preached earlier. So I'm going to create a new I'm going to go and and then do code of index.html. So here is going to be my index page. And I'm going to do a very I'm just going to borrow HTML language equals English. I'll close that tag. I'll then do a head tag, I'll do a meta This makes my site recall responsive. That is, it just grows and shrink The initial scale for which is going is going to be device width. So I'm typing this out, This is stuff I typically copy paste. But then lastly, I'm going to be hello for the name of this app. And then the body-- whoops, Bobby. The body of this tag will be-- there we go. The body of this page, rather, So very uninteresting and really a But let's go now and experiment I'm not going to bother right now, because I don't have any No images, no CSS, nothing like that. And honestly, requirements.txt I'm going to go requirements.txt and access to the Flask library itself. All right, but that's the only All right, so now I have two files, But index.html thank you is so how do I actually start I would have said HTTP server. But HTTP server is not a Python thing. It has no idea about Flask or HTTP server will just So if I ran HTTP server, and I would literally see my Python code. It would not get executed because HTTP But today, I'm going to run a So this framework Flask that I so it wasn't strictly necessary that I yet, comes with a program called Flask, the word run, and when I do that, you'll week whereby you'll see the name-- your URL for your You might see a pop up saying on TCP port, something or other. By default, last week, Flask, just because, prefers port 5,000. So that's fine too. I'm going to go ahead And once it authenticates just to make sure I'm allowed to access Voila, there's the extent If I view source by right-clicking there's my HTML that's been spit out. So really, I've just reinvented because there's no dynamism But what if I do this? Let me close the source So you can see my URL bar. Let me zoom in now, and I have But the point is that Or implicitly, it ends with slash. This is just Chrome It doesn't bother showing you a slash, But let me do something explicit like So there's a key value typed into my URL bar and hit Enter. Nothing happens, nothing changes. It still says hello, world. But the opportunity today is to from that URL and start So let me go back over here to Let me move that down And what if I want to I ideally want to say something like-- I don't want to hard code going to say hello to anyone else. I want to put like a variable name But it's not an HTML tag, so I Well, here's what I can do. If I go back to my Python code, I can And I can ask Flask to go into its arguments, that is and get whatever the value of That puts that into a variable for me. And then, in render template-- that can take more than one argument. If it takes another in the name of any variable you want. So if I want to pass in my name, I So this is the name of a variable This is the actual variable that And now lastly, in my index.html, is to do two curly braces and that you want to plug in. So here's what we mean by a template. A template is like a blueprint it's plans to make something. This is the plan to make a web page but there's this placeholder with that says go ahead and plug in the So in this sense, it's similar or format strings in Python. The syntax is a little different disagree, different people, with different conventions. The convention in Flask, is to use two curly braces here. The hope is that you, the want to display two curly But even if you do, We can escape that. So now let me go ahead and go Previously, even though to the end of the URL with a question But now, hopefully, if let me go ahead and open Let me restart Flask so it Let me go back to my hello tab and from the server. And there we go, hello, David. I can play around now and I can change Carter. Zoom out, hit Enter. And now we have something more dynamic. So the new pieces here are, in that allows us to access, that's after the And the only thing we have to do that You and I don't have where is the question mark, are the ampersands, potentially. The framework, Flask, OK, any questions then on Yeah, in back. AUDIENCE: Why do you say the DAVID: Why do you need a The short answer is just because that If you're making a GET request the convention, standardized by the after the so-called route or And it delineates what's and what's part of the Other questions? Yeah. AUDIENCE: Can you go over again why DAVID: Sure. This is this annoying When you pass in parameters, you typically say something So let me make a slight tweak here. How about I say name of person here. This allows me to invent my and assign it the value of name. I now, though, have to go into my did I get that right? Name of person, yeah. So these two have to match. And so this is just stupid because So what typically people do is they itself, even though it looks admittedly The thing to the left the name of the variable you plan to use is the actual value you're assigning it. And this is because its general purpose. I could override this and I could equals Emma, no matter And now if I go back to no matter what's in the URL, OK, Emma broke the server. What did I do? Oh, I didn't change my template back. There we go. Let me change that back to be and it's name here. But I've hardcoded only ever going to see Emma no That's all. All right, so this is If, in order to get a greeting have to manually change the This is not how web pages work. What is the more normal mechanism and putting it in that How did we do that last week? With Google, if you recall. AUDIENCE: We have the search to make something in there [INAUDIBLE]. DAVID: OK, so we did make something in And specifically, what was the tag AUDIENCE: [INAUDIBLE]. DAVID: Sorry, a little louder? Oh, no. But yeah. AUDIENCE: Is it input? DAVID: So the input tag, So in short, forms, or of and how we typically whether it's a button or a text box So let's go ahead and add So let's enhance this hello app this time, just doing this. Let me get rid of this have a very simple index.html file the user for some input as follows. I'm going to go back into my the user's name, this is the page I'm from the user. So I'm going to create a form tag. The method I'm going to use for now Then, inside of that form, I'm And I'm going to turn off I'm going to turn on auto focus, so it I'm going to give the name Not to be too confusing, but I'm So it makes sense that the name of the The placeholder I want the will be Name with a capital N, And then type of this text fiel-- type of this input is going to be text. Then I'm just going to give myself, And I don't care what to say the default submit terminology. Let me go ahead, now, and open Let me go to that same URL There we go. So that was just cached from earlier. Let me go back to that same and here I have the form. And now, I can type in anything I want. The catch, though, is when I click Well, let's be explicit. It does have a default value, and let me add, just like we Whereas previously, I said something we're not going to rely I'm going to implement and I'm going to have the user not just slash, how about /greet. I can make it up, whatever I want. Greet feels like a nice operative word, sent when they click All right, so let's go ahead now Let me go ahead, actually, here so that it reloads Let me reload this tab so that I get quick safety check. If I view page source, we has downloaded the latest HTML. So it definitely has changed. Let's go ahead and type in David. And when I click Submit Hypotheses. What's going to happen visually, want to interpret when I click Submit. Yeah? AUDIENCE: [INAUDIBLE] an empty page. DAVID: OK, the user's going Pretty good instinct, because-- no where else, if I mentioned How's the URL going to What's going to appear, Yeah? AUDIENCE: 404? DAVID: 404? No, not in the URL. Specifically in the URL, something's when I click. AUDIENCE: The key value pair? DAVID: The key value pair, right. That's how forms work. That's why our Google I sort of recreated a And even though I didn't get around I can still send the information standardizing-- to your question earlier, that it automatically ends up after if you're using GET. So this both of you are And all three of you are right, You can see it in the tab here. That's the error that has come back. But what's interesting, and most And it went to /greet?name=david. So I just, now, need to add looks for that so-called route. So let me go back to my app.py. Let me define another route for, And then, inside of-- under this, I'll call it greet, but I No arguments, for now, let me go ahead and This time around, I do want So let me say requeste.args and let me store that in Then let me return a what, I'm going to give myself Because this has a different I want to say hello to the and I want to pass, into it, the All right, so now if I go up and Other logical check here. If I go ahead and hit reload or resubmit Any instincts? Let me try, so let's try this. Let's go ahead and reload the page. Previously, it was not found. Now it's worse, and this is error that I promised next week we will But here we have an Because it's an internal error, this So the route was actually found But if we go into VS Code here and window, you'll see that-- this is actually a bit misleading. Do I want to do this? Let me reload this. Let me reload here. Oh, standby. Come on. There we go. Come on. OK, here we have this is where your terminal window In your terminal window, going to go helpful of what it is the server For instance, here's what the Get /greet?name=david Here, though, is the status code Why, what's the error? Well, here's where we get these that help50 might or here, we might just And this is actually pretty seen this error before. What did I screw up here? I just didn't create greet.html, right? Template not found. All right, so that must be And again, representative of how you let me go into my terminal window. After hitting Control C, which let me go into my templates directory. If I type ls, I only have index.html. So let's code up greet.html. And in this file let's Doc type HTML, open bracket Inside of this, I'll have the head tag, The name is viewport, I always forget this to. The content of which is initial scale Quote unquote, title I'll call this greet And then here, in the body, I'm So I could have kept around the old essentially, my second template. So index.html now is almost the and it has a form. greet.html is almost the same, It just has the hello comma name. So let me now go ahead and You have to run Flask wherever app.py So let me do Flask run to Let me go into my other tab. Cross my fingers this time and I get index.html's form, now now we get hello, David. And now we have a full-fledged web slash and /greet, the latter of using a template, spits it out. But something could go wrong, Suppose I don't type anything in. Let me go here and just click Submit. Now, I mean, it looks stupid. So there's bunches of I could require that the user I could have some kind But there's another mechanism I It turns out this GET function, and also in general with you can actually supply a default value. So if there is no name parameter you can actually give it So I'll say world, for instance. Now, let me go back here. Let me type in nothing And hopefully this time, Let me restart Flask Let me go ahead and type nothing And hopefully, we now-- Oh, interesting. I should have faked this. Suppose that the reason this-- Oh. Suppose I just get rid of name Now I see hello, world, that I didn't intend to get into here. When you have question you're passing in When you have greet question you actually are giving a value to name. It is quote unquote That is different from So allow me to just propose would want to require And probably the most would be to go in here, in my HTML, and Now, if I go back to my form and I go ahead and click reload and click Submit, now the But just as a teaser doing in the next problem set you should never, ever, ever rely on Because we know, from last week, that and let me poke around the HTML here. Let me go into the body, the form. OK, you say required, You can just delete what's and now I can go ahead And it appears to be broken. Not a big deal with a silly little But if you're trying to provide input that is necessary for you don't want to trust that the HTML All right, any questions, before we add another feature here? Any questions here? Yeah. AUDIENCE: Do you guys [INAUDIBLE]. DAVID: Sorry, little louder. In the index function-- AUDIENCE: Oh, sorry. [INAUDIBLE] DAVID: Sorry? AUDIENCE: [INAUDIBLE] DAVID: Would it be a problem if what? AUDIENCE: You have to [INAUDIBLE]. DAVID: No. I mean no, this is OK. What you should really do is something where I'm going to start So let me wave my hands at solve this better in just a bit. But it's not bad to do only going to handle one of the Not all of them. All right, so even though here, consider index.html, my first my second template. What might be arguably badly designed? Even though this might ever touched web programming like this. What's bad or dumb about this And there's a reason, too, that I bored Yeah? AUDIENCE: [INAUDIBLE] you said, DAVID: Yeah, there's so much repetition. I mean, it was deliberately tedious The doc type, the HTML tag, And little things did change and certainly, the content of the body. But so much of this, I is a copy of itself in multiple files. And God forbid we have a third template, for a really big website. This is going to get very And suppose you want to you're going to have to change it now in instead. So just like in we have this ability to So do you in the context and specifically to factor out all of The syntax is going to but it functionally is Let me go ahead and do this. Let me go ahead and copy Let me go into my templates by default, is called layout.html. And let me go ahead, and per commonalities into So here I have a file I don't want to give every page the same I'm going to call everything hello. But in the body of the page, have a placeholder for actual So in this layout, I'm and just put in the body of my And this is admittedly new. Block body, and then percent And then I'm going to do end block. So a curious syntax here, but The other template syntax we saw That's for just plugging in values. There's this other syntax with Flask brace, a percent sign, and then some a block. And this one's a little weird nothing between the close curly But let's see what this can do for us. Let me now go into my index.html, which from, and let me focus on The only thing that's really different So let me go ahead and just cut Let me change the first to say this file is going and notice I'm using And this file is going to inside of which is just want to make specific to this page. And I'll keep my indentation And let's consider what I've done. This is starting to look a mix of HTML with templating code. Index.html, first line now says, hey, whatever that is. This next line, three through is what I consider my body block to be. Plug this into the layout placeholder. Therefore, so if I now go back it's almost all HTML by contrast. But there is this placeholder, and I could say-- whoops. If I want to put a put a default value there just in case But in general, that's So this is just a placeholder, plug in the page-specific So if I go now into greet.html, I'm going to cut this content Greet.html 2 is going to extend and then I'm going to have my body block And then I'm going to go These are not HTML tags, Technically, the syntax we keep and these now curly braces with percent J-I-N-J-A, which is a language, for this purpose of templating. And the people who we're not going to come we're going to use these other So again, there starts to be and really in computing, a lot of of code. So Flask is using this syntax, but might also too. All right, so now half templating code, Jinja syntax. Greet.html is almost all but because they both now I think I've improved If I go back to app.py, none I don't change my templates that's already implicit in the fact So now if I go ahead and go back to the same folder all right, my application Let me now go back to the /route I have this form again. And just as a little check, let that my browser is seeing. And there's all of the code. No mention of Jinja, no curly It's just HTML. It's not quite pretty printed in Because now, we're starting to And by that, I mean this isn't That's fine. If it's indented in the doesn't matter what the Let me now go ahead and type I should see, yep, hello, David. Let me go ahead and view And we'll see almost the same So this is, now, web programming I did not hard code a page that says hello comma Emma. I hardcoded a page that has a and now I'm using actual to actually tell the server All right, any questions, This is now a web application. Simple though it is, it's Yeah? AUDIENCE: Is what we did just better DAVID: It better for Both. It's definitely better if we had a third page, start just resorting to copy paste. And as you saw with home page, you might want to include some CSS You might want to have If you had to upgrade the version of so you want to change you would literally have to go into to make one simple change. So that's bad design. And in terms of memory, yes. Theoretically, the server, because it can theoretically do some Flask is probably doing that, but We're using it in means it's typically Other questions on this application? Anything at all? All right, so let me ask a question, What about the implications for privacy? Why is this maybe not the best design I've used a web form, but-- Yeah? AUDIENCE: For some reason, So these private people DAVID: Yeah. I mean, if you have a and they have access to go trolling through your like, literally what you typed into Not a big deal if it's your name, but card or anything else you probably don't want it even if you're in You just don't want to expose yourself So perhaps, we can do better than that. And fortunately, this one Let me go into my And in my form, I can just change It's still going to send key but it's not going to The upside of which is that we but I'm going to have to Because now, if I go ahead and run and I now reload the form to make You should be in the habit View Source, or Developer that what you're seeing in your And yes, I do see what I wanted. Method equals POST now. Let me go ahead and type Now I get a different error. This one is HTTP 405, Why is that? Well, in my Flask application, I've One of which is for slash, One of which is for /greet, But apparently, what Flask is doing So if I want to change this route to quote unquote &quot;POST&quot; inside So that now, I can actually And if I now restart Flask, so Flask Let me go back one screen the page just to make even though nothing there has changed. Type David and click Submit now, Notice that I'm at the greet route, equals anything in the URL. All right, so that's an It's a simple change, but whereas GET But it still works so long to look as a POST request, which It's not going to be as simple Why shouldn't we just always use POST? Why not use POST everywhere? Any thoughts? Right, because it's obnoxious to if you're leaving these little can poke around and see Yeah, what do you think? AUDIENCE: You're supposed DAVID: Yeah. I mean, if you get rid of GET your history, your autocomplete, Because none of the information is go through the menu and hit Enter. You'd have to re-fill out the form. And there's this other Let me zoom out and let Notice that you'll get look different in Safari and Firefox args So your browser might remember what but just while you're on the page. And this is in contrast to GET, Like, key value pairs is And if you looked at an I deliberately linked om/search?q=what+time+is+it. This is, by definition, a GET Because it's going to grab the from the URL, send it to Google And the reason I sent this wanted people to very quickly be able And so I can sort automate the process but that you induce when If Google did not support GET, they is send you all to this has no useful information. I would have had to add to my what time is it. So it's just bad for usability. So there, too, we might have design but also the design when it comes as a computer scientist would call it. Just in terms of what you want So GET and POST both have their roles. It depends on what kind of and what kind of sensitivity All right, any questions, then, on Super simple, just gets someone's But we now have all to create really most anything we want. All right, let's go ahead And when we come back, we'll add to All right, so we are back. And recall that the last was the route to use So gone is my name and But there was a subtle bug or change I did type David into the and yet here it is So that seems to be even though we added support for POST. But something must be wrong. Logically, it must be the case here. Intuitively, that if I'm seeing I gave the name variable. It must be that it's name in request.args, which is this. Gives you access to That's because there's this which is not just These are horribly named, but request.form is for POST requests. Otherwise, they're pretty But the onus is on you, to make sure you're using the right one. So I think if we want and actually see what I think I can just change Still dot get, still and now, if I go ahead and rerun go back to my browser, go I won't even go back to the form. I will literally just reload, and what this warning is the same information to the website. When I click Continue, now I So again, you, too, are all these little subtleties. But if you focus on, really, the like what it HTTP, how how does a POST request have a lot of the mental to solve problems like these. And let me give you one other mental This framework called Flask is just an that all implement the same and the same way of And that's known as MVC, And here's a very simple diagram and I have been implementing thus far. And actually, this is more than In app.py is what a programmer That's the code you're business logic that makes all of the what values to show, and so forth. In layout.html, index.html, greet.html that is the visualizations sees, the user interface. Those things are dumb, they pretty All of the hard work is done in app.py. So controller, AKA app.py, is where And in your view is where your HTML and the curly braces, the curly braces We haven't added an M going to refer to things The model, where do you keep So we'll come back to where you have one of these-- each of another is representative of What we're teaching today, this week, It's not really specific to Flask, It really is a very could implement in Java, C sharp, or All right, so let's now Let me stop running and create a new folder altogether And let me go ahead and create representing freshman intramural that I can now CD into. And now I'm going to code an app.py. And in anticipation, I'm going to This one in the FroshIMS folder. And then in my templates directory, and I'm just going to FroshIMS will go here. I'm just copying my layout of my interesting work, this time, is So what is it we're creating? So literally, the very first 20 years ago, was a site that So I was like a sophomore I'd taken CS50 and a I had no idea how to do web programming. Neither of those two courses taught So I taught myself, at the And I learned a little something about can't even say googled enough, for a couple of years later. Read enough online to figure out how to on campus, first years, via a website for intramural sports. Back in my day, you would and then walk it across the yard to slide it under the dorm and thus you were 1996, 1997. We could do better by then. There was an internet, used much on campus or more generally. So background images was in vogue, apparently, at the time. All of this was like images because we did not have the features So it was really just HTML, and it was not in Python, but in Perl. And it was really just that we hear already today now have. So we'll get rid of all of on the functionality and the if we can whip up a web register for one such intramural sport. So in app.py, me go ahead and From Flask, let's import is that function we need to kick Render templates, so we have the those templates, and request to get at input from the human. Let me go ahead and create using this magical incantation here. And then let's go ahead and define a I'm going to define a But just to be clear, this Foo, bar, baz, anything else. But I tend to name consistent with what But you could call it just the function that will get Now, let me go ahead here Return, render template of index.html. Just keep it simple, nothing more. So there's nothing really I just want to make sure I'm Meanwhile, I've got my layout. OK, let me go ahead, and in my called index.html. And let's just do extends just so that we get And down here, I'm just Just so that I have something I've not screwed up yet. In my FroshIMS directory, Let me now go back to my previous URL, But now, I'm serving Oh, and I'm seeing nothing. That's because I What did I do wrong in index.html? What am I doing wrong? This file extends layout.html, but-- AUDIENCE: You left out the block tag? DAVID: Yeah. I forgot to tell Flask what So I just need to say block body, and or whatever I want to Then end the block. Let me end this tag here. OK, so now it looks ugly, more cryptic. But this is, again, the Let me now restart Flask up Let me reload. Crossing my fingers this To do. So it's not the application know I have some of the All right, so if I want the for one of these sports, index.html to actually maybe got a dropdown menu for all of So let me go into this template here. And instead of to do, let's how about an H1 tag that just says they're looking at. How about a form tag just because it's not really necessary in the URL. The action for that, how a register route so that we're sending So we'll have to come back to that. In here, let me go ahead and create, equals off, auto focus on. How about a name equals going to ask the student for their unquote &quot;name.&quot; And the type of this box will be text. So this is pretty much But if you've not seen this a so-called dropdown menu in HTML. And maybe the first option is going to be, oh, how sports for the fall, which are is going to be soccer, going to be ultimate frisbee for So I've got those three options. I've got my form. I haven't implemented my route yet, to go back now and check So let me go ahead and You'll see there's ways to the server that we'll do for so you don't have to Let me reload my index route It's not though, maybe-- nor was this. But it now has at least where I can type in my name Now, I might be biasing Like UX wise, user experience basketball but not the others. So there's some little Let me go back into index.html. Let me create an empty option up here going to have the name of any sports. But it's just going to have a so I'm actually going to disable this But I'm going to say sport up here. And there's different ways to do this, essentially, a-- whoops, option. Yep, that looks right. Creating a placeholder sees something in the dropdown. Let me go ahead and restart and now it's just going Now you see sport that's but you have to check one of All right, so that's pretty good. So let me now type in David. I'll register for ultimate frisbee. OK, I definitely forgot something. Submit button. So let's add that. All right, so input type equals submit. All right, let's put that in. Restart Flask, reload. Getting better. Submit could be a little prettier. Recall that we can change some of The value of this button just to make things a little prettier. Let me now reload the page and register. All right, so now we really have that I created some years ago to let So let's go, now, and create maybe Let me go into app.py. And in here, if we want to let's do a little bit of error checking What could the user do wrong? Because assume that they will. One, they might not type their name. Two, they might not choose a sport. So they might just submit an empty form. So that's two things we so that we're not scoring bogus So let's create another And then in this route, let's but can be called anything we want. And then let's go ahead, and in and validate the submission. So a little comment to myself here. How about if there is not a so that is if that like quote unquote, or the Or request.form.get&quot;sport&quot; not Basketball, the other one was soccer, Getting a little long, but notice If the user did not if this function returns which is, quote unquote, or literally Or if the sport the user provided is or ultimate frisbee, which I've defined and just yell at the user in some way. Let's return render And that's just going to be some Otherwise, if they get and confirm registration returning render template quote All right, so a couple Let me first go in and in let's create this failure.html file. And this is just meant to that they fail to provide So let me go ahead and in failure.html. not repeat my past mistake. So let me extend layout.html and in I'll just yell at them like that so And then let me create one other similarly is mostly just Jinja syntax. And I'm just going to say for technically registered in any That's what we mean by success. All right, so let me go ahead, directory run Flask run. Let me go back to the form and reload. Should look the same. All right, so now let me immediately click Register impatiently. OK, what did I do wrong. Register-- oh, I'm All right, I spotted the error. What did I do wrong? Unintentional. There's where I am, what did Where did I screw up? Anyone? AUDIENCE: Register, not greet. DAVID: Thank you. So register, not greet. I had last example on my mind, Ironically, the function could be greet, But to keep ourselves sane, let's Let me go ahead now and Let me reload the form just Now, let me not cooperate and be oh my God. OK, other unintended mistake. But this one we've seen before. Notice that by default, So if I want to I have to pass in, by a methods methods that could be don't have no need for a GET in All right, now let's Reload the form to make sure and you are not registered. So it's catching that. All right, let me go ahead and Register. You are not registered. Fine, I'm going to go ahead and be Huh. OK. What should I-- what All right, so let's figure this out. How to debug something like this, unforced error? How can we go about Turn this into the teachable moment. All right, well first, What did I actually submit? Let me go ahead and view page Look at the HTML that you So here, I have an So that's what I Ah, I see it already, even used a select menu, you might is missing from here that I Just intuitively, logically. What's going through my is, all right, if my form thinks how did I create a situation in which Well, name, I don't think because I explicitly gave and that did work last time. I've now given a second input But what seems to be missing here It's just a dumb mistake I made. What might be missing here? If request.form gives you all of have typed in, let me here in my form and name equals sport. I just didn't give a name to that input. So it exists, and the It's still going to it just hasn't given it a unique name So now, if I'm not going I think that's what I did wrong. And again, my process was looking at my code, is this right, is this right? No, I was missing the name there. So let's run Flask, just to make sure it's all defaults in ultimate frisbee, crossing And there. You are registered. So I can emphasize-- I did not intend to but that's exactly the right to diagnose issues like this. Go back to the basics, go back to what and just rule things in and out. There's only a finite number of Yeah? AUDIENCE: Are you [INAUDIBLE]. DAVID: Excuse-- say a little louder? AUDIENCE: I don't understand why DAVID: Why did name equal Well, let's first go back to the HTML. Previously, it was just the reality that but I never gave it a name. But names, or more is how information is sent So if there's no name, there's no key to It would be like nothing equals ultimate The browser is just However, in app.py, I was naively there would be a name called It could have been anything, But I never told the form that. And if I really wanted to dig in, Let me go back to the Let me get rid of the name Let me rerun Flask down here after it finishes being served. And now, let me do this. View Developer Tools, and then let me we played around with And we also played around with Curl, Here's another-- here's done if I still wasn't seeing the error I would have typed in my name as before, I would have clicked register. And now, I would have And I would click on Register here. And just like we did last week, I And there's a whole lot of stuff But here, let me zoom what Chrome's developer it's showing me all of the So this really would have I'm just not sending the sport, And logically, because that must mean I didn't But another good tool. Like good programmers, web developers all the time. They're not writing bug-free code. That's not the point to get to. The point to get to is I would say, in these cases. OK, other questions on this? Yeah. AUDIENCE: What if you want to DAVID: I'm sorry, a little bit louder? AUDIENCE: If you want to in HTML, once you have to fix DAVID: So how would you edit That process we'll It's almost going to be the exact same. Just to give you a teaser for this, but we'll give you some distribution You can absolutely still Link href equals quote CSS rel equals style sheet, that's one The only difference today, using Flask, by convention, should go So the change you would would be to say that styles dot And then, if I go into I can create a static folder. I can CD into it, But if I now code a I could now do something like this body. And in here, I could say background Let me go ahead now and restart Cross my fingers because Go back to my form and reload. Voila, now we've tied together If I answered the right question? AUDIENCE: [INAUDIBLE] change DAVID: If you want to change one page AUDIENCE: Yes. DAVID: That depends. In that case, you might want to have if they're different. You could use different classes in one There's different ways to do that. You could even have a that allows you to plug in sheet in your individual files. But that starts to get So in short, you can absolutely do it. But typically, I would to use different style Sheets per page. They reuse the styles All right, let me go ahead And let's start to add a little I'm going to go ahead and just to not complicate things just yet. And let's go ahead and just play mechanism. In my form here, the dropdown Nothing wrong with it. But suppose that I wanted to Maybe I want students to be able to Well, it might make sense to And let's do this. Before we even get into the checkboxes, Notice that I've hardcoded basketball, And if you recall, in app.py, I also And any time you see copy paste feels like we could do better. So what if I instead do this. What if I instead give myself I'll capitalize the word meant to be constant even though The first sport will be basketball. The second will be soccer. The third will be ultimate frisbee. Now I have one convenient if it changes next semester But notice what I could do to. I could now do something like this. Let me pass into my called sports that's equal to Let me go into my index now, going to hint at the power of Let me go ahead and get rid of all and let me show you some slightly Then end for. We've not seen this end for syntax. There's like end block syntax, So you have a start and an end to your Watch what I can do here. Option curly brace Let me save that. Let me go back into my And if I didn't mess up The red's going to go away And now I still have a sport are still there. I can make one more improvement now. I don't need to mention these I can now just say if the in my global variable, sports, And this is really another sport, for instance, that all I have to do is And if I reload the form now now I have support for a fourth sport. And I can keep adding and adding there. So here's where templating starts now, in this template, I'm using is almost identical to need the curly brace and the percent and for. But it's the same idea as in Python. Iterating over something with a for loop And this is like every For instance, Gmail. When you visit your inbox and you Google has not hardcoded They have grabbed them from a database. They have some kind and are just outputting table row after All right, so now, let's go to, oh, how about little So let me go ahead and do this. Instead of a select menu, I'm going to For each of these sports let me go but let me go ahead and the name for which is quote is checkbox, the value of which is quote unquote, and then afterward output the sport. So you see a word next to the checkbox. And we'll look at the result So it's actually a little simpler because now watch what Different user interface, but it's going to allow users to sign it would seem. Now I can click on basketball or some other combination thereof. If I view the page's source, this I didn't have to type out four And these things all have It turns out with Flask, if it sees it's going to hand them back to you as All right, but suppose we don't want Maybe capacity is an issue. Let me go ahead and change this a radio button is mutually exclusive. So you can only sign up for one. So now, once I reload It now looks like this. And because I've given each of these &quot;sport,&quot; that's what makes The browser knows all four of therefore I'm only going to let And that's simply because Again, if I view page source, notice name equals sport, name equals that each one is going to have. All right, any questions, All right. Well, let me go ahead and that I made in advance that's going So thus far, we're of where this website was, which like in a database, everyone Now, we're literally telling or you are not registered, doing nothing with this information. So how might we go Well, let me go ahead and let me go into what I call version And let me go into my source and let me go ahead and open up app.py. So this is a premade version. I've gotten rid of But I've added one What's, in English, does What would you describe What are we looking at? What do you think? AUDIENCE: It's an empty dictionary. DAVID: Yeah, it's an Registrants is apparently It's being assigned an empty And a dictionary, again, Here, again, is where dictionaries Why? Because this is going to allow me for ultimate frisbee, Carter Emma registered for something else. You can associate keys with assuming a model where you can only And so let's see what the Here in my register route notice that I'm validating Slightly differently from I'm using request.form.get If not name, so if the I'm going to output error.html. But notice I've started to make I'm telling the user, apparently, Well how? I'm apparently passing instead of just failure.html, So let's go down this rabbit hole. Let me actually go into here's a new file I created here, that a grumpy cat as part of the error In my block body I've got an H1 tag I then have a paragraph the error message is that the And then just for fun, I have a that there was, in fact, an error. Let's keep looking. How do I validate sport? I do similarly and I store it in a If there's no such sport, that is the then I'm going to render going to give a different Else, if the sport they did type in I'm going to render error.html, you gave me an invalid sport somehow. As if a hacker went into changed it to add their Even though it's not offered, But that's OK, I'm rejecting it, even tried to send it to me by And then really, the magic is just this. I remember that this by indexing into the using the name the human typed in as the Why is this useful? Well, I added one final route here. I have a /registrants route with a a template called registrants.html. But it takes as input that So let's go down this rabbit hole let me Here's this template. It looks a little crazy big, Here comes the body. I've got an H1 tag that says Then I've got a table This has a table head that just Then it has a table body where in, I'm saying, for each name output a table row, start tag, two table datas, two table data for registrants bracket name. So it's very similar to Python syntax. It essentially is Python syntax, albeit sign. So the net effect here is what? Let me open up my terminal Let me now go into the So gone is football. Let me go ahead and type in David. Let me choose, oh, no sport. Register. Error, missing sport. And there is the grumpy cat. So missing sport, though, All right, fine. Let me go ahead and say no name. But I'll choose basketball. Register. Missing name. All right, and let me Now I'm hacking. Let me go into this. I'll type my name, sure, but let Let me maliciously go down in ultimate volleyball. Change that and change Enter. So now, I can register for Let me click register, So again, that speaks to for checking things on backend It is that easy to hack websites server side. All right, finally, let's David is going to register Clicking register. And now, the output is not I'm at the registrants route. And if I zoom out, I have an HTML table. Two columns, name and sport, Let me go back to the form, letting me and registered for basketball. Register. Now we see two rows in this table, basketball. And if we do this one comes along and registers All of this information is being All right, so that's great. Now we have a database, albeit in But why is this, maybe, not Why is it not great? Yeah. AUDIENCE: You are storing [INAUDIBLE]. DAVID: Yeah. So we're only storing this and that's great until I hit stopping the web server. Or the server reboots, or maybe If the server stops running, RAM is volatile. It's thrown away when you lose So maybe this isn't the best approach. Maybe it would be better And in fact, some 20 years ago, I stored everything in a CSV file. But let's skip that step, or a couple of weeks ago Let's see if we can't to store an actual Let me go back here and version four of this, which adds a bit more functionality. Let me close these tabs and let me So notice it's almost I'm creating a database connection So that's a database So let's go down that rabbit hole. What does it look like? Let me make my terminal window bigger. Let me run SQLite 3 of FroshIMS.db. OK, I'm in. Let's do .schema. and let's just infer what I have a table called registrants, An ID column that's an integer, a name and a sport column that's and the primary key is just ID. So that I have a unique Let's see if there's Select star from registrants. OK, there's no one in there. No one is yet registered for sports. So let's go back to the In my code now, I've got for validation and Looks like my index route is the same. It's dynamically generating Interestingly, we'll come back to this. There's a deregister route to deregister themselves if or undo their registration. But this is the juicy part. Here's my new and Still works on POST, so I'm validating the I'm getting the user's inputted and if it is not a name or I'm going to render failure.html. So I kept it simple. There's no cat in this version. It just says failure. Otherwise, recall how we We're using CS50's SQL makes it a little easier to execute Insert into registrants What two values, the name and the And then lastly, and this is a new explicitly now, Flask to a redirect function, which is how and all these other sites we we're all implemented redirecting This Flask function having imported it at the It handles the HTTP 301 or 302 or 307 It does that for me. All right, so that's it for Let's look at what the Here, we have a new And instead of just iterating we're getting back, let's from registrants. So that's literally the programmatic That gives me back a each of which represents Then, I'm going to render passing in literally just like using CS50's So let's go and look If I go into templates and oh, OK, it's just a table like before. And actually, let me change this We have a Jinja for loop that and for each of them, Oh, but this is interesting. Instead of just having two columns notice that I'm also All right, this is So let's actually go back run Flask, and actually see what Let me reload the page. All right. In the home page, it But let me now register for something. David for ultimate frisbee, register. Oh, damn it. Let's try this again. David registering for OK. So good thing I have deregister. So this is what it should now look like. I have a page at the route called columns, name and sport, But oh, wait, a third column. Why? Because if I view the page source, For every row in this table, I'm also to deregister that user. But before we see how that works, for instance. So Carter will give you basketball. Again, register. The table grows. Now, let me go back and let's And the table should grow. Before we look at that HTML, let's Let's go into SQLite FroshIMS. Let me go into FroshIMS, and let me And now do select star from registrants. And whereas, previously, when I executed there's indeed three. So now we see exactly what's So let's look at this If I want to unregister, deregister how do we do this? Clicking one of those delete the row from the database. But how do we go about linking a web This is the last piece of the puzzle. Up until now, everything's been But what if the user is they're just clicking a button? Well, watch this. Let me go ahead and you could be in the habit of doing now. Any time you're curious how a website And Carter, shall we Let's deregister Carter and If I look at the deregister The status code that but let's look at the request itself. All the headers there we'll ignore. The only thing that is an ID parameter, a key equaling two. What does two presumably Where did this two come from? It doesn't say Carter, it What is it? AUDIENCE: The second DAVID: The second So those primary keys that we started ago, why it's useful to be able to here is just one of the reasons why. If it suffices for me just to I want to delete from the database, If I go into app.py and I look at my notice that I got this. I first go into the form, and I get If there was, in fact, an ID, and I execute this line of code. Delete from registrants where and then I plug-in that number, And I'm not using his name, because two people named Emma or David? You don't want to delete both of them. That's why these unique And here's another reason why. You don't want to store Suppose we went to this Suppose I, maliciously, It doesn't matter so much but supposed I emailed her this URL, Emma, click this. And it uses GET instead of POST. What did I just trick her into doing? What's going to happen Yeah? AUDIENCE: Deregistering? DAVID: You would trick her Why? Because if she's logged and the URL contains her ID just and she clicked on it and unfortunately, GET URLs They have state information in the URLs. And in this case, it's enough she would have accidentally And this is pretty innocuous. Suppose that this was to make a withdrawal or a deposit. Suppose that this were some trying to trick her into Here, too, is another should use POST versus GET, be plugged into emails sent via Slack And unless there's a you want to deregister trick the user into being called a cross-site request forgery. A fancy way of saying you that they shouldn't have, because All right, any question, then, Yeah. AUDIENCE: What do the first [INAUDIBLE] where they What does that mean? DAVID: When three columns, you mean? AUDIENCE: No, three forward slashes. DAVID: The three forward slashes. I'm not sure I follow. AUDIENCE: Yeah, so I DAVID: Sorry, it's in where? Which file? AUDIENCE: It's in [INAUDIBLE] scroll up. [INAUDIBLE] DAVID: Sorry, the other direction? AUDIENCE: Yeah. DAVID: OK. AUDIENCE: [INAUDIBLE]. So please scroll a little bit more. DAVID: Keep scrolling more? Oh, this thing. OK, sorry. This is a URI, it's typical syntax protocol, so to speak, which means :// is just like you and I see in URLs. The third slash, essentially, That's all. So it's a weird curiosity, whenever you're referring to a elsewhere on the internet. That's a bit of an oversimplification, Sorry for not clicking earlier. All right, let's do one here just to show what I was was not only storing these I was also automatically to the proctor in charge of so that they would have sort of a and they could easily Let me go into FroshIMS version and let me go ahead and open And this is some code And it looks a little scary at first I have now added the Flask by adding Flask mail to to automatically install email And this is a little bit copy paste from the documentation. What I'm doing here is application with a few configuration This is the syntax for that. comes with Flask that is automatically on line nine, and I just had to fill values for the default want to send email as, the default the port number, the TCP port, The mail server, I'm going to use Use TLS, this means use encryption. So I set that to true. Mail username, this is going So for security purposes, I didn't and password into the code. So I'm actually storing those in what You'll see more of these and it's a very common in the real world to store sensitive so that it can be accessed but not in your source code. It's way too easy if sensitive stuff in your source or to screenshot it accidentally, So for today's purposes, know that the are called environment variables. And this is like an out-of-band, a pairs in the computer's memory but that never show up Otherwise, there would be so accidentally visible on the internet. So I've installed this in advance. Let me see if I can do this correctly. Let me go over to another And here, I have on my second It's currently empty, and I'm for some sport as John So let me go ahead and run Let me go ahead and Not that one. Let me reload the main screen here. This time, clearly, I'm So name will be John Harvard. jharvard@cs50.harvard.edu. He'll register for, how about soccer. Register. And if I did this correctly, not seeing you are registered, but when he crossing his fingers that this and I promise it did right before class. Horrifying. I don't think there's Let me try something but I don't think this is broken. It wouldn't have said I just tried submitting again, so I Oh, I'm really sad right now. AUDIENCE: [INAUDIBLE] DAVID: What's that? AUDIENCE: Check spam. DAVID: I could check not sure we want to show spam here on Oh, maybe. Oh! [LAUGHTER AND APPLAUDING] Thank you. OK. Wow, that was a risky click I worried. All right, so you are registered and it doesn't have any But back in the day it included the student's and all of the other fields of So let's just take a quick look I did have to configure Gmail what they call, less which is the protocol But besides setting these things, let's It's actually pretty straightforward. In my register route, I validated Nothing new there. I then confirmed the registration All I did was use two new lines of code. And it's this easy to automate I apparently have done which is why it ended up in spam. I created a variable called message. I used a message function that so we'll go back to that. Here's, apparently, the subject And the second argument is the which takes a list of emails that So in brackets, I just and then mail.send that message. So let's scroll back up to see what Mail, I think, we saw. Yep, mail is this, which because I followed the You simply configure your current app And if you look up here here's the new library Capital Mail, capital Message, so that and send a mail. So such a simple thing whether you you want to do password resets. It can be this easy to provided you have the requisite And just to make clear that let me open up my requirements.txt have both Flask and But I ran the command in All right, any questions, No? All right. So what other pieces might actually It turns out that a key application nowadays that but it'll be one of our final flourishes And a session is actually from all of the basics we talked and a session is the technical term for When you go to amazon.com and you start they follow you from Heck if you close your browser, they're typically still your shopping because they want your business. They don't want you to have to Similarly, when you log even if it's not an e-commerce thing you and I are not in into every darn page Typically, you log in once, and then you stay logged into that website. So somehow, the website is And that is being implemented a session, and perhaps that you might know as, and Let's go ahead and take one And when we come back, we'll and these final features. All right. So the promise now is that this notion of a session, which is going them logged in and even implement And the overarching goal here is, quote unquote, &quot;stateful.&quot; Again, state refers to information, remembers information. And in this context, the curiosity a stateless protocol. Once you visit a URL, web page is downloaded to You can unplug from the internet, but you still have the web page locally. And yet we somehow want to make click on a link on that website, Or the next thing you add it doesn't forget what So we somehow want to and we can actually do this using the So concretely, here's a form you might when you log into Gmail. And I say rarely because most of you just stay logged in, pretty And that's because Google to give you a very long session a month, a year, because want to add friction to using their tool By contrast, there's other including some of the CS50 zone, Because we want to make accessing the site, and not a roommate So once you do fill out this know that you are you, and or open a second tab for how do they know that you're still Well, let's look underneath When you log into Gmail, see a form like this And the website responds with some kind of HTTP response. Hopefully 200 OK with the form. Meanwhile, the website might that, last week we didn't care Whenever you visit a website, that the website is putting And you may generally know and they track you in some way, and Without cookies, you could not implement as we know them today. Unfortunately, they can also like tracking you on every website and forth. So with good comes some bad. But the basic primitive for boils down to just HTTP headers. A cookie is typically a big number, that a server tells your browser longer term, store on disk. So you can think of it like a file that And the promise that HTTP a cookie on your computer, that same cookie or that same So when you visit the they plop a cookie on your computer equals value, some long random value. One, two, three, A, B, And when you then visit another page you send the opposite header, not and you send the exact same value. It's similar to going to a where you pay once, you you get checked by they very often take like a little stamp And then for you, efficiency-wise, or later in the evening, you You've been stamped, presumably. They've already-- you've already been searched or whatnot. And so it's this sort back into the club, back into the park. That's essentially what a it's a way of reminding the you already asked me for This is my path to now come and go. Now, unlike this hand stamp, which or duplicated or kept these cookies are really big, seemingly So statistically, there's is just going to guess your cookie very low probability, statistically. But this is all it boils down to is this to send these values back So when we actually let's do something like Let me go into a folder I made And let me code up app.py and So what's going on? A couple of new things up top. If I want to have the ability to and implement sessions, I'm going for sessions. So this is another feature you and not having to implement And from the Flask to import Session, capital S. Why? I'm going to configure Long story short, there's different The server can store these in memory, in RAM, in other places too. We are telling it to store these So in fact, whenever you use sessions you'll actually see a folder inside of which are the for any users or friends visiting your particular application. So I'm setting it to and I don't want them to be when you close your browser, They could be made to be Then I tell my app to support sessions. And that's it for now. Let's see what this application actually Let me go over to my terminal window, and reload my preview URL. Give it a second to kick back in. Let me go ahead and open my URL. Come on. Oops, let me go ahead. Too long of a break. There we go. So this website simply has a login form. There's no password, add that and check for that too. It just asks for your name. So I'm going to log in as And now notice I'm currently But notice this. If I try to go to the slash, which is where most notice that I magically So somehow, my code knows, hey, if to /login instead. Let me type in my name, And now notice I am back at slash. Chrome is sort of annoyingly hiding a single slash. And now notice it says you Log out. What's cool is notice if I reload If I create a second tab and go to I could even-- I could keep doing it's still going to remember me on both So how does that work? Especially when I click Log Out, All right, so let's see how this works. And it's some basic building blocks. Under my /route, notice I have this. If there is no name in the session, So these two lines that automatic redirection using It's handled for me Otherwise, show index.html. All right, let's go What's in index.html? Well, if I look in my-- let me look in my templates at templates/index.html. All right, so what's going on here? I extend layout.html, and then I've got some other syntax. So we haven't seen this yet, again, is almost identical to Python. If there's a name in then literally say you are logged in And then notice this, I've got a simple Else, if there is no then it apparently says you are not link to /login and then end diff. So again, Jinja does Recall the HTML and CSS don't only the human does. But in code with Jinja, end block, end for, end that you're done with that thought. So session is just this have access to because we've and these that handle that whole with a different, unique identifier. If I made my code space visit the exact same URL, all of You could all type your all log in at the same URL And in fact, I would then see, here and my login directory, notice the And if I CD into that and type ls, or actually, I think I I have two files in there. I would ultimately have one And that's what's is it creates the illusion Inside of my session is my name, is your name. And the same is going to apply to Let's see how login works here. My login route supports both GET and And notice this, this login route If the user got to this is that they must have submitted a form. Why? Because that's how I'm going to And if they did submit I'm going to store, in key, whatever the human's name is. And then, I'm going to Otherwise, I'm going to So this is what's cool. If I go to this login literally, slash login, by default, you're visiting via GET. And so that's why I see the form. However, notice this. The form, very cleverly, like the one route/login submits but it uses POST when And this is a nice way of having one of operations or views. When I'm just there visiting /login But if I submit the form, then this and this just avoids my having to have for instance. I can just have one route that How about logout? What does this do? Well, it's as simple as this. Change whatever name none, which is Python's version of null, back to slash. Because now, in index.html, I will This will be false. And so I'll tell the user So like it's-- I want to say as simple as this is a bunch of steps involved. This is the essence of every has usernames and passwords. And we skip the password name step for but this is how every website out And how this works, as you use in Python lines Flask takes care of stamping the and whenever Flask sees the same it grabs the appropriate loads it into the so that your code is now unique Let's do one other that'll show how we might use Let me go into the store example here. Let me go ahead and If I run store in my same we'll see a very ugly just sells seven different books here. But each of these books has a button All right, well where are Well, let's poke around. Let me go into my terminal window again. Let me go into this example, and let me open up about Let's open up index, is the default one, not index this time. So if I look here, notice that uses a for loop in Jinja to iterate and it outputs, in an H2 and then another one of these forms. So that's interesting. Let's go back one step. Let's go ahead and open up app.py, what's ticking all of this off. Notice that this file is It's configuring sessions connecting to a store.db file. So it's adding some SQLite. And notice this, in my /route, which is going to give me each of which represents a row of books. And I'm going to pass that list of is why this for loop Let's look at this actual database. Let me increase my terminal window will show me everything. There's not much there. It's a book-- it's a table called Let's do select star There are the seven books, And you might see where this is going. If I go to the UI and I look for add to cart, just like Amazon might is just a form. And what's magical here, even though I didn't there's another type you to specify a value without the Instead of type equals type equals hidden will put the value in So that's how I'm saying that the idea of this book is two, the idea And each of these forms, to /cart using POST and that would So let's try this. Let me click on one or two of these. Let's add the first book, add to cart. Here's my cart. Notice my route change to /cart. All right, let's go back and There we have that one. And let's skip ahead to the and now we have all three books here. So what does the cart route do at /cart? Well, let's look. If I go back to my terminal window, there's a lot going on So the /cart route which is a nice way to All right, this is interesting. If there is not a, quote we haven't technically seen this syntax. But long story short, these lines What do I mean by that? It makes sure that there's a cart and it's by default going Why? That just means you have But if the user visits this route via they didn't muck with the form in any they gave me a valid ID, then If session bracket cart is a list-- recall from a couple of weeks adds something to the list. So I'm going to add the ID to the Otherwise, if the user is at /cart Select star from books where ID is in. And this might be syntax It lets you look for because if I have a list of session-- list of IDs in my cart, I can So long story short, I am storing, in the cart, the books My browser is sending the same which is how this website knows that and not you or not Carter or not Emma. Indeed, if all of us visited the and allowed that, then we would of our own separate carts. And each of those carts, be stored in this Flask so that the server of us using, again, these sent back and forth via these headers. All right. I know that's a lot, the new Python way of headers from last week in a clever way. Any questions before we look Yeah. AUDIENCE: [INAUDIBLE] understand how How does it use [INAUDIBLE],, Because in order to use a GET there has to be an DAVID: So I think you're and POST in the same function. So this is just a nice If I had to have separate it literally might mean I need And it just starts to And these days, too, in this is maybe only appeals to the is actually a thing. You don't want to have it's nice if the URLs are nice and So it's nice if I can centralize all of only, and not in multiple routes, It's a little nitpicky of me, So what this code here means is henceforth will support both But then I need to distinguish between Because if it's a GET request, If it's a POST request, I And the simplest way to do that In the request variable that we you can check what is the Is it a GET, is it a POST, or There are other verbs. If it's a POST, that must mean, because that the user clicked Otherwise, if it's not POST, it's Then, I just want to show the and I use these lines instead. So it's just one way of avoiding having verbs. You can combine them so long If I really wanted to be pedantic, I This would be more symmetric, because I know there's Hope that helps. All right, let's do one that's going to tie the together to something quite often in real-world applications. And that, for better going to involve tying back in The goal at hand of to necessarily master how you yourself code, the JavaScript code, but just these different languages work. So that for final do want to add JavaScript functionality, you at least have the bare you can tie these languages together. Even though our focus, generally, than on JavaScript from last week. Let me go ahead and open up an example And let me do Flask run. And let me go into my URL here and like by default. This has just a simple Let's take a look at the HTML All right, there's not So there's a form whose It's going to submit via GET. It's going to use a q parameter, just So this actually looks like the So let's see what goes on here. Let me search for something like cat. Enter. OK, so it looks like-- all right, so this is actually What I've gone ahead and done is I've from a couple of weeks ago and I loaded them into this by keyword for any word you want. I just searched for cat. If we were to do this again, we that contain D-O-G, dog, as a So this is a traditional Just like in Google, it uses How does that work? Well, let's just take a Let me go into my zero example app.py and see what's going on. All right, very simple. Here's the form, that's And here is the /search route. Well, what's going on here? This gets a little interesting. So I first select a whole Select star from shows, where And then I'm using some on both the left and the in whatever the user's input was for q. If I didn't use like and I could get rid of these curly but then it would have to be a show to it being like cat or like dog. This whole line returns to me a represents a show in the database. And then, I'm passing all of those So let's just follow that sorry, search.html. All right, so this is So I just passed back hundreds but the only thing I'm and using a Jinja for the titles of each of those shows. And just to prove that this and I actually simplified it a bit, I threw away all the other stuff like and I just have, for instance, limit 10, just so we can see 10 of them. There's 10 of the shows So that's all that's So it would look like this is a It uses GET, it submits the server spits out a response, looks like this, which is a huge or one for each dog match. But everything else All the stuff at the All right, so these days, though, we're And you start typing something you don't have to click a button, Web applications, nowadays, So let's take a look at this Let me go into shows one and run Flask run in here. And it's almost the same thing, but I'm reloading the form, So gone is the need for a submit button. I want to implement autocomplete now. So let's go ahead and every show that starts every show that has C-A in it, rather. T, there's every show with C-A-T in it. I can start it again and do dog, And notice my URL never changed, and it's just immediate. With every keystroke, it is That's a nice UX, user experience, This is what users are But if I look at the source code there's just an empty UL by default but So let's see what's going on here. This JavaScript code Let me zoom in a little bit more. This JavaScript code is first which you used this past week, so that's just getting the text box. Then it's adding an event listener We didn't talk about this when you provide any by pasting, by any other it triggers an event called input. So similar to key press or key up. I then have a function, no worries Then what do I do inside of this? All right, so this is that let's just focus on the JavaScript, nowadays, called fetch that allows you to without reloading the whole page. You can sort of secretly What do I want to fetch? slash search question mark q equals When I get back a response, I want and store it in a variable called shows. And I'm deliberately bouncing like await and await here, but for A response came back from the storing it in a variable called shows. What am I then doing? I'm using query selector to select and I'm changing its inner HTML came back from the server. So let's poke around. Here's where, again, developer Let me go ahead and reload this And let me now open up inspect. Let me go to the Network tab and between my browser and server. I'm going to search for C. Notice that to /search?q=c. So I didn't even finish my cat A bunch of response headers, but let's This is literally the response from the No UL, no HTML, no Just li tags. And we can actually simulate this. Let me manually go to We are just going to get back-- whoops, sorry. slash search q equals c, we are which if I view source, it's The browser is trying to show it to me but it's really just partial HTML. But that's perfect, what I essentially want my into the otherwise empty UL tag. And that's what this JavaScript Once it gets back that response from the to plug all of those li's Again, changing the so-called dom. But there's a slightly better way is not the best design. Because if you've got a hundred shows or unnecessarily. Why do I need to send all Why don't I just create those Well, here's the final flourish. Whenever making a web where client and server keep talking Gmail does this, literally nowadays you load the keeps on interacting reloading or having to change the URL. Let's actually use a format called is to say there's just a designed way to send that same data. I'm going to go into shows And I'm going to go The user interface is exactly the same, Here's C, C-A, C-A-T, and so forth. But let's see what's coming back now. If I go to /search?q=cat, Enter, notice But the fact that it's so This is actually going to-- let or a little worse. This is what's called In JavaScript, an angle-- a square In JavaScript, a curly bracket says And you might recall from-- did we do? Yes, sort of recall that you can now notation using colons like this. So long story short, cryptic and not very human friendly, Because for every I get back its ID and its title, its And this is a very generic format that interface, might return to you. And this is how APIs, nowadays, work. You get back very raw textual and then you can write code that that JSON data into any language So here's the third and final I, again, select my input. I, again, listen for input. I then, when I get input, I fetch slash search q equals whatever I then wait for the response, I'm calling this other function that called JSON, that just parses that. It turns it into a dictionary for me, and stores it in a And this is where you start to see the Let me initialize a variable called using single quotes, but I This is JavaScript syntax for a loop. Let me iterate over every that I just got back in the server, Let me create a variable called the title of the show at that ID. But for reasons we'll replace a couple of scary characters. Then let me dynamically add to this and a close li tag. And then very lastly, let me update the ULs in our HTML to So in short, don't worry because you won't need to use with more advanced features quite soon. But what we're doing is, creating a bigger and bigger containing all of the open brackets, but we're just grabbing the And so in fact in going to use a real world third interface, for which you sign up. The data you're going to get going to be show titles, but ticker symbols and the prices of last-- at which stocks were and you're going to get that And you're going to write a bit of to the requisite HTML on the page. So the final result here is that you and I see and and that's ultimately how it works. HTML and CSS are used to present Python might be used to send or And then lastly, JavaScript to make things dynamic and interactive. So I know that's a whole but the whole point of problem set set the stage for hopefully a Why don't we go ahead and you one last time next week for emoji.