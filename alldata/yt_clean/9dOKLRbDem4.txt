.NET Aspire. Every single .NET developer apart from me. I've waited up until now. I you actually wanted to hear my probably spicy If you've been living under a rock and check the Microsoft docs here. They originally through 2023, announced the original 0.1 release released eight preview versions and managed Availability which the chief .NET developer Now this is fast. This is less than and they added it to .NET 8 even while working on to get you all to upgrade, but no, it was When you actually read it, this isn't quote is &quot;.NET Aspire is an opinionated and configurable Cloud Native applications emphasized &quot;opinionated&quot;, not Well, first we're going to have us take a we'll have a history lesson. If we create projects; we get an API project, AppHost and get a dashboard. This is an actual .NET dashboard We get free stuff. We get a console so we can come through. We've got structured logging which you're actually making web requests, you can see requests and metrics so we can even monitor charts about the performance of your .NET So why is this special? Well, this from the .NET team of what they think whimpers of lots of homemade little cottage dying slowly as .NET Aspire is going But why is standardization important? the days of 2004 when I had hair and was far on Rails was an MVC web framework powered and made massively popular the MVC pattern. The difference between Rails MVC and the philosophy of &quot;convention over &quot;You're not a beautiful and unique snowflake.&quot; special. It just needs to be a normal project whole way Rails was designed. If you wanted controllers were. And if you wanted to edit a be and what the file name was going to be and So at the time, Microsoft only had Web Forms. Web tried to hide and abstract the way the internet increasing in popularity so their response and it was great, absolutely brilliant. It philosophy from Rails and if you needed to edit a we all loved it, and it was so popular that it popular all the way through to when .NET Core It was great for a period of time. We had an where you thought they were going to be and unless we knew what to expect on any new project. API controllers which were a separate branch and concept of a single type of MVC controller. But for some people, that was too difficult. people can't do &quot;convention over configuration&quot; You have to learn what the convention is and Sadly, Microsoft were also missing Web Forms. double click button one onclick event that to actually be able to build software from MVC and made Razor Pages. Razor Pages was Um, it even had code behind. You know, remember okay. The problem here is that Razor Pages and ended up as Blazor. And Blazor, again, because liked, you could put it in the page, you could put else. You really could make your application Then they did Minimal APIs, right? Minimal APIs, get your data out of your database onto your points and leave it up to you. You can call you could use Fast Endpoints, you could off you go. And at this point, there is .NET. It could be Blazor, it could be Razor Um, a really, it was a really, really sad they abandoned any sort of direction many options as possible. And because everything was so free during those Um, I don't know if anybody remembers you don't need ELMAH anymore because suppose you remember Mini Profiler because it started off in Ruby on Rails days don't need this anymore either because Previously, all of these tools were essentially for free. But we are paying and the C# toolkit and our Azure bills. What I'd like to see are more tabs on the left but what about a database browser? Or an API browser? They're doing something with and I hope they don't. But why can't I browse a JSON blob? That'd be nice, wouldn't it? it could be a bit like a built-in I'm sure a healthy ecosystem of plugins will one myself. I'm thinking of taking this and making be quite useful. So if you think that's going So, I'm actually excited about .NET Aspire. some order to the chaos of the previous 10 years an opinionated framework back to .NET as Thanks for watching.