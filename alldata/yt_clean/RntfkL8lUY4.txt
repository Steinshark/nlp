Why are there so many And given that there are so many, how creating more of them? It's a heck of a lot of work to do Why bother? really compelling reasons. They have an idea of how programming how it could be, and they through its paces, explore it further. because they're cherry-picking. &quot;Well, I like Python's C syntax and some of Go's concurrency together in something A bit like recipe making, And other people build a language because JavaScript is the famous example. programming language, so And that's actually my It took you to somewhere you couldn't But all these motivations come together relatively new programming You might not have heard of Gleam, but I'll give you one metric. anything to measure more popular than F sharp. I'm joined today by the very charming creator of the Gleam programming And he's going to tell us why he thought language, how he survived to go from idea to has to offer us as programmers. trying to get a job done. easier, cheaper, more fun? Some of the above? Let's get cracking. This is Developer Voices. I'm joined today by Louis Pilfold. I'm great. Good to see you. Yeah, it's good to see you. since before the pandemic. The event. Yeah, I keep having to bump into you, but They'll have to, even But now I do online. it's similar interests. tech or something with bleeps and bleeps with But no, nothing. Sooner or later, we'll cross paths again. you in my secret tracking cave. You've been busy writing a whole I have. project and grew wildly dangerously useful. See, that's something I want to get into, but first we should and what is your Yes. Why do we need a new language? being always a little bit. which I think you are as well. learn a new one or two And I reached this point where I was just language because when I wished I was writing Haskell. I wish I was writing Erlang. I wish I was writing Rust. that bit from there This would be really easy if I had that. saying, well, what the best bits? cohesive and really nice or the horrible mash of bells and whistles See, I know a few languages that have their answer has been a How are you feeling about your answer? I took a lot of inspiration from Lua and functional program, I I don't mean in the like, it's a very language, but I tried to make the and tried to make it very consistent. And yeah, it's just sort of like what are things from these different think are really interesting? amount of all of them Which I think is not the way a lot of It seems to be like adding more, but I'm And yeah, a bunch of years in, it seems resonating with a lot of people. I'm pretty happy with that. Okay, so tell, tell us what your, what buffet car of languages. sort of in the style of Elm, perhaps. I'm an Elm fan. So, you know, there's, there's the number of features and we functions and they take in and you kind of ignore everything else. But rather than having like an Elm originally have a syntax like familiar to, you know, or C programmers, you know, lots of curly And I originally thought, You know, just syntax doesn't matter. everyone was like, Oh, Now it's like, nothing's changed. So I was wrong. And I sort of miss the old one, but the So, and the thing that is, I think one of that it runs on the Erlang Beam, which is unusual is designed for functional And rather than being like a research functional things are, it was You know, it was built for So it's got loads or it's really built maintaining and debugging, you Oh, that's interesting. other than it's not Beam. Is it's famed for its Yes. So like, we're trying to both think, there's all these arguments people about how do you should deal with Like, oh, you should make it impossible world, you know, making valid which is actually But all the Erlang people are like, no, because like, how do you make impossible in your application? you've got a cluster of struck by bolts of lightning because it's doing, you know, run a Oh, yeah, you can't really So the whole thing is about You just have to lean into that your be able to explode in some And you should be able to survive that. you know, it crowd have and on type thing and breaking your bulkheads where like, oh, wrong in this subsystem. Did that fix it? Okay, let's go one step bigger. What if we discard the corrupted state in like slowly, incrementally So you can kind of see parallels between Kubernetes or something. pod, a deployment of a web service that's goes wrong in it, while the the instance goes down and then up again and then should be a that are in in progress, That's really cool. single instance of a go hundreds or maybe thousands So losing the whole thing sucks. whole pattern, but rather center level, you could have inside your your single VM instance is millions of threads. state shedding at the So maybe you just lose Yeah, yeah, the idea is, I mean, you can things like, you know, try but it's it's so much like, you know, we'll catch it and we how did it swipe it in a much more fine grained and sort of in other languages. Yeah, it results in extremely reliable companies that claim nine nines of I'm not sure I've But the fact that they can claim it and know, I think that says a And it also means you can do things on Right. Like the fact that it's plausible implies really, you know, extremely, And it means you can do things like So like, I just never going I'm just going to And if it fails, well, I don't need to logic in my business logic. out there in the error handling, as they might I've always wondered, does that just constantly trying and crashing loop of let it crash? Sort of. Like there's a there's a company called I That's embarrassing. people who run machine. And they said they had a bug where the 100 frames or something And they didn't notice for eight months. they didn't notice any It would just it would run for 100 frames restart that tiny little Oh, so it was picking up after every 100 this like, oh, we'll just They just didn't know. that, you know, monitoring. you know, so if we in production, we want to we want it to But you also will not want to have a when it does go wrong. crashing, you do want to know about it. And you do want to be able to debug it. But mainly, you don't want to like, you three in the morning with you've got to fix it, got to fix it. most low stress way possible, right? together just well enough for problem is. Because that kind of monitoring, handling baked in from the start in Yeah. platform, the beam, I have And Erlang is really weird. And I say that as a Erlang is weird, right? Yeah, I think that's part of the problem. these amazing properties world requirements, you know, you know, thread, greedy green scheduler and causing problems or anything else. everything continues running. We want it to, if someone, someone says block the scheduler. print on the system or these things. Amazing. love Erlang, I'm just going dreadful. really awkward in lots of I was looking, I was refreshing myself. forgotten about this, but to export a have to export function name slash the Yes, because of my start slash one. just unique name, it's like name, but also the number of arguments. one, main two, main three, I think that's a good question. Functions. take care of for us. that, but like, what is gleam does do that control, you can Like you can actually, You can actually decide if you want to Is that you? You just end up with in You know, it's these sort of things like to, you will find uses who likes, you know, Rust and Elm and looking again, I'm not sure I All the Erlang and Elixir people complain they're trying gleam. damned either way, really. gleam is to make all these wonderful world, make them much less alien seeming So people can, people, you know, because strangeness you can tolerate. Erlang, because they've heard these this, like super concurrent fault met with Erlang, they might This is too much. greater than my curiosity. Yeah, so I want something that looks a that is worse in some people, that'd be better. Always, you know, Yeah, yeah. Let's use the word accessibility because Okay, not weirdness. Not weirdness. I did once ask the creator of, it was beers, I was feeling Erlang, why does it look like that? before we open sourced it. Awesome. Go Armstrong, right? Oh, okay. So did you explicitly when you're going favorite bits of languages, was it compete with, replace, offer an on the beam? beam user for a long time. and I quite quickly ended I quite enjoyed both languages. used very much and I love a lot. obvious choice to use this. like, how could this be useful to people? I really want to use it in my, you know, language that no one's ever They seem like the right way to go. be like, this is for people, the very beginning, I think it would have Um, but I don't see it as being competing the, the, I think the people people are going to come to people. there's lots of people runtime, but we'll say this thing has mishmash syntax and it is dynamically unusual, not quite, not quite quite that, um, patterns and stuff in it. Um, I'll go write And there's lots of people who always got this weird Ruby syntax. about this elixir thing. That's not me. Well, those, the people who don't like the idea of a C looking small, sort of an Elm style type think, I don't think we're going to draw the Erlang and Lix a lot. We're going to bring people to the, um, So I'm hoping we'll work together. built around the idea of and the other languages as well. Well, people can write things in Erlang them, but hopefully it's also We make it really easy to write things in able to use by the Erlang and Okay. that kind of two way interop. You can be both, you can Yeah. The talk, the toolings a bit, um, isn't would like it to be because it building a bit of tooling, but there are Um, yeah, I think there's like, you know, it because we're not, I don't Erlang, elixir because I'll lose. with my closest neighbors? want to be working together. languages thought about it. of the platform, it's directions, but elixir is very much Erlang code, but it's a trickier Erlang and there's certain Um, that's just the trade-off I've made. Well, an interrupt future, if we'll get computing, but take me through who've done this have language is kind of one of those rites of programming for long enough. things from doing that. programming language isn't magic, right? code is actually really But the journey from that hobby project actually put in production is huge. Take me through your journey on that. stubbornness on my part, really. explained these people who don't like, um, a chap who's built a model So it's like a very, very large ornate and realistic representation Like it's just, you look at it and you It's very impressive. a lot of time. Um, but yeah, it was just, um, curiosity there's just so many Um, and so that kept me interested and Um, maybe the first two or so, but I was, um, I was already fairly well because I got onto elixir of, Oh, well, it doesn't have this thing Ruby or Elm or something. Maybe I'll try and make one. forked and is now the system, which is great because I don't Um, I wrote open source Exactly. It's much better than the one I wrote, Um, and I wrote, I wrote a format, um, And so that, that then So just, just from these things, I'll Um, and then when I started doing this fashionable words on like, Oh, that's interesting. chatting a bit cause insistent on, on, um, So even though I wasn't really would look at it and say, Oh, Yeah. a lot more, um, yeah. you know, it gives you a lot more, um, it want to keep working on it. maybe this, maybe this, the ideas I've come to here after, you Maybe this could be useful for something. people are using it, which is why. Yeah. large number of pieces you must have put just adding a type system to a platform Yeah. knowledge and research. That was quite painful. well-typed languages, but never knew how the things in, I think Gleam is doing well is that I'm not a, academic person when it comes to like the Um, I would describe myself more as like compiler implementer or a runtime I think there's a really fascinating want specifically X, you know, I've, I've time like experiment with Like what if, what if the language had loads of code as if it had that feature Go, what would that do? How could I write these programs? loop over and over again. I want this. know people can do this. And I don't have to like find the, the, of, um, understandable papers and stuff It was misery, but, um, I sort of know a So that's good. Could you pass the, uh, exam now? It's not loaded into short-term memory. I'm very good at anything that Gleam has anything it doesn't, I don't because you get to a point where like you And that's because you've successfully And I'd really like to continue learning unrelated thing for the language. Gleam does, which, uh, I think is quite language should do is is, all the bits that you commonly touch, language, not called the language, but Um, so we don't just have We've also got a build tool and package you know, all these sorts of things and rather than leaving those things up to that would be baked in. good experience, but I just means I've systems and I have to go work on like And I never actually That, that how on earth do Cause each one of those could be a It's building a package manager from There are teams of people that do that. So we're package management. cheat a little bit and the, you know, we rest of the beam language. So that the, the, the side of, um, you the server side stuff, somebody's already Bit confusing because no one's really, I integrated ever with that API. Um, so by the time I worked out that, uh, but that's still really complicated. um, you with a bunch of, uh, bunch of constraints Um, but yeah, a lot of it is just working whole startup thing, right? What is the smallest useful, um, approach be small because I think that is a better lot easier to implement as well. Scala, I just never possible with it. make it a little or ago. Yeah. cat in the background. So do you think, because I've followed a say you're doing like I also know you've done things like, um, said, Hey, what syntax this behavior and stuff? design and you're And that allows you to What's been important about Some languages do that well. How do you approach that? stuff's really useful because I, you not, what's the word we said? Um, not to be least surprised. And I just find that, um, I'm often wrong you know, I think it's easy to assume one, but I just isn't. done again, sort of, um, sentence check looks, you know, try Like which two things looks least weird, questions about some example code and people get confused by. else is better idea, I'm probably wrong. Just like you just spend, I think just I know. know, having something that's small where helps because I get to Cause I know I'm, you know, I'll be and I would have had an idea for before I even started that. on this for six months. know, I'm having I'm like, well, what How would I impact this thing? like gently brewing ideas in the back of thinking about these things, you'll have but I would interact with this thing. What about that? accidentally covering all of it just by, it for an extreme amount of time. That's my, um, slow but obsessive. Never stop thinking, Yeah. Cause I know I'm going But there are some languages that look morning with a new feature idea, throwing chipped out of the door. And then there are some Yeah. It feels great to like have an idea, Like I sort of, I dream of, um, finishing some Gleam foundation that can do things. That's all the bad ideas Cause they're always like the really, they're bad and you go, Let's not do that. you go, Ooh, Ooh, Let's do that. um, I don't know. It's always, it's always, it's always I wonder is, um, dangerously good Cause you can do all sorts Like you can model, you can in user land exceptions and try catch Like it's a clearly a And, um, I think a lot of future degree and it would just become normal. such a dangerous idea. But actually would that align with any of What's whether I'm trying to make a, like that's really approachable. Yeah. experimental and a few Um, and it would completely destroy the other direction And stuff like that. it's not particularly smart. Yeah. table, but still be hankering I really want it. Okay. So if you've left that on the table, it Which bits, which bits have you taken gleam, what you think are Oh, this is something I'm thinking about a course for learning. So, um, I've got some funding from the lovely org to try and like grow the, the, um, make a syllabus on exes as you've for, for practicing and learning So, yeah. Yeah. In February, we launched a, uh, a regular which is really lovely of them, which is and challenge, solve it. can have a bunch of tests, um, you can be mentored by, you know, a And it's just a really fab Really recommend using it if you want to, have like another layer on top of that, So as well as having challenges, they teach you individual So if you've got a well-made syllabus, not, you know, you need to know a bit of to, um, from zero to usable of a course, which is really exciting. Not much really. Again, I'm playing on easy mode because but, um, it's mostly just, uh, and, and records and Okay. You're so, but I'm going to need to mix I mean, Erlang is very heavily actor knee deep in the actor model. I, so in, I think it, I think it's always actor framework of Erlang because, um, It's odd, but it's Um, so when you learn Erlang, you spend this much time learning the actor much more than just like, um, async await much more than like a little It's, it's in many ways, much more akin these like independent things and ways you should use so they can look after failure and all this sort of stuff. And I think if you go into beam probably be spending a lot of time quite at the forefront of um, of that community. programming through Alexa, they've got business programming. websites and this sort of And even though your code is all running never actually see, like, I think, I think maybe the majority of Alexa any, um, OTP code at all. the web server that comes with the actors under the hood and their pub these other things are actors. bit that talks with database connection don't worry about it. an application in, well, even perhaps something, because there's not even any it's all just like outside of it wrapping Right. impression that you have to get into that But I could opt into that later once I've Yeah. So the nice thing about, um, the actor callbacks from futures and things like only performs one piece of work. You know, you just write code that says, body off of the request objects. thread and then, oh, and then I'm gonna No async block the thread and then I'm No async block the thread, you know, it it looks like it should And I've code that, you know, causes the be blocked, but it doesn't because it's blocking this one actor. thousands of them for happily. Right. beam scheduler, right? Yeah. Like you should be doing that. you, you write the sim. um, um, Joe Armstrong would say it's can handle a million requests easy to make one web server that can run then run a million of them. of, um, like the early OTP actor thing. really simple for your little, whatever And you multiplex it in a And it also means when something goes discard that one bit of states and then You go, well, it's Like, oof, off it goes. This is something I love in programming. looking at the same problem, that gives Okay. time to play with gleam. Um, so there are two other things I should talk about Okay. mixture of things to keep developing Yes. What's it like being an It's a captifed. has been, I work a job for a while and I job, not because the job's bad, although But just because I wanted to be doing evenings and weekends doing it and and I'm going to work full time on gleam. my bank balance do this. need, you know, rents this much. I should probably get a So I do, I did that like, I Um, but then at some point, uh, get hub which is like, you know, Um, and some people are And I thought, you know, the idea that project that could sustain me. because, um, that just making money from as far as I can tell, unless you've got complicated to sell on top of it. surprise, a few people started, um, yeah, was like, wow, that's, that's amazing. like that level of support. marketing at little more focusing a bit things are actually just good. how these, how, how gleam works and So people keep track of what's going on. grew to a point at which, um, yeah, it, other job I've had in a long time. However, it is actually And yes, how much money am I willing to gleam successful and make it exist, uh, Well, something I care about. So now I'm, I'm have less money, but can, happen, which is really good. little bits on the side to, So if I can find a piece of work that you some money to, you know, help make it worth doing like applying for grants and ecosystem foundation one, which I this course to learn gleam. example of that sort of thing. Ah, cool. answer this question But the, the whole, um, get hub got a few large sponsors, What are the rough numbers in there? Um, uh, the biggest sponsor is fly the Um, it's also a really good product. You should probably use it. Uh, right. Yeah. I like, I know that because I've got, they just do clever And I'm sure, Oh, that's really clever. Um, but, uh, yeah, so they, they give maybe a bit more than a third. could be giving anywhere between like, And then a few people give a hundred, Um, I mean, my, my. the future, the companies that are using you know, amount of money that is almost as clean, but their I think companies should give a small you know, any open source projects that much less scary for me. businesses giving us all that money giving a larger man, because the flying Um, and you know, I do hope that they Um, I'm extremely grateful, but like, know, it may, and point They decide that they want to do That'll be, uh, uncomfortable for me. Yeah. were you ever offered? ended up working for a company that used be their in-house language developer. I had a few organizations sort of, um, we think, because I didn't sound very sort of like gently approached that. single company have such a large control in the language, um, will really, kind of work that gets done. actually, um, if people are sponsoring know, this is a problem for us. I generally, you know, shift the backlog But if it was my employer, um, you know, I'm not sort of deciding, um, you know, I think there's actually going to be a And then I'm not convinced that I'll be you know, the gleam Cause in theory, you know, if all goes decades and decades and decades, you Continue long after I've, um, you know, So, you know, what some company needs to, to separate those So does that mean you're going for the I always, I always joke that it's the Really depends on the author. I mean, so I think that, um, I think some good writing on this about, um, you a language at the start of, not just for Um, assuming you've got a good, uh, you person, I guess, to some degree and they It's really helpful to, to, um, you know, decision making process than a single and not get caught in these things. you're mature enough And now it's, um, much less pioneering I think you can spread out a lot more. Um, I think we're pretty close. burnt out before it got Yeah. you know, what's going on with Elm but it did seem at some point the updates know, he's clearly very smart guy. might be burnout as he, as he suggests, things, um, like having quite a high know, all, all, everyone in that sort of a high degree of control. you know, um, I, I, I'm very No, I'm not old, but I'm very, you know, for a long, for a long time. aspect of creation is super important. know, from the way that we manage the interact with the, um, you know, the people to, to, to get Whether that be, um, you know, this that'd be really hard for me to do and it Awesome. request and it wasn't very good. probably took a lot more time than if I time and now they're a Like those are both wins. And so like, trying to grow, trying to other, um, you know, interactions can And I hope it means if I, you know, if I going to, um, the Do you, so have you got people like contributing to the language itself? Design decisions. The majority of the compiler development share, but the, we, we've got a, um, the discordment, which is lovely. cheeriest bunch of people ever. like, just there to hang out. because they want it really interested language development and They're making like And you know, there's a few academically actually quite long form posts about, um, can interact with each other and like, references to papers and such. of use gleam and they mostly just sort some libraries they've made or like show And there's just some people who don't there because they like it. They like the people like they joined it. ever, have you ever used gleam? I've never run it. But that's quite nice. we're doing something right. If some people are just there because they like the community so Yeah, yeah, absolutely. eventually going to get sponsorship to community or just work the ranch. Yes. When they're burnt out, the Louis pilfold Gone to live in a farm. But what, what, what I mean, if I look at gleam two years from Louis pilfold being the MC of gleam comp. lately to like do a lot less, um, like Um, and I really enjoy it, but it just, time to write a talk. the train on the way over, but maybe it's When I was younger, but it always ends up thing and like doing iterations on it. And like, I could write a blog post in And it would be read by much more people. post for a third or like work on a And you know, at this point in time looking at gleam, you know, it's got a which is really exciting. sharp, which I find bizarre. Yeah. So like now is the time to, to push. time and that isn't conferences at the gleam comp because I'll definitely, Um, but in the next two years, like we're where the language is That doesn't mean nothing will be added think have been, you know, if there was a have to have this, this, And that's always just seem like this it looks like a hill, you know, like it's like it's, it's, um, yeah, it's, it's on And then there'll be decisions about, we do version one now? mean when, um, the binary doesn't have it also has build tools and a language Like, can I have some of those be like one of the language only stability for the language itself. So there's a lot of, there's lots of, um, like to have, um, a good amount of, uh, finding it in, in, in production, confident we've got a good design, but it actually, this thing sucks. And I go, okay, cool. And it'd be really nice if that was like Well, let's do one to two. it'd be the same amount of work. it would just feel quite So you want the major features to be before you put the I think so. some, I just want to have like more data, Like for any decision, you know, if just wait a bit, um, have more, have more and do more experiments. number of actors and Exactly. Yeah. Well, I am going to go and check it out rest of the afternoon off. Louis sounds absolutely great. dirty with a language that isn't as weird Thank you very much Talk to you soon. the gleam community. Good plug. Thank you. And thank you to Louis' cat, Nubie, for With that, I think I am going to head off I've got some spare time at the moment. myself, do it a programming. about gleam head to gleam.run. And if you're anything like me, you'll gleam.run to see what kind Before you head there, this is the part sponsor, but we, we don't So this week's episode is sponsored by Whether you're listening to this podcast a trumpet lesson, why not follow it up and perhaps a biscuit. support future episodes of Developer subscribe and share It would be great if you share it with a And we all know the algorithms are trying So if you found this interesting, tell And with that, I think we're I've been your host, Kris Jenkins. Voices with Louis Pilfold.