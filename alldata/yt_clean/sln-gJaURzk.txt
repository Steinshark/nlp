ANDREW GERRAND: Hi everyone. My name is [INAUDIBLE]. [INAUDIBLE], I'm here with the that don't know, [INAUDIBLE] at Google, and I'm joined 2009 [INAUDIBLE] version 1.0, which is a version for years to come. And I'll just get everyone to from the left, and a bit BRAD FITZPATRICK: I'm I work on the standard library and miscellaneous bugs KEN THOMPSON: Hi. I'm Ken Thompson, and-- [APPLAUSE] --and I'm semi-retired. I worked on Go until the public a little after that, and ROB PIKE: I'm Rob Pike. I work mostly on the libraries and basically make trouble. ROBERT GRIESEMER: I'm I wrote part of Go Doc and Go little bit on the spec. ANDREW GERRAND: He DAVID SIMONS: I'm I worked on the Go runtime for other things in the standard ANDREW GERRAND: And I'm I'm a developer advocate. I'm sort of public interface And so without further ado, come up to the mics. Nigel, my glamorous assistant, Team, and he's going to read [INAUDIBLE]. Oh, yeah. I should mention the other like Russ Cox and Ian Taylor-- Ian Lance Taylor-- who couldn't be here today, just I wish they were here with us. NIGEL: Let's do a couple [INAUDIBLE]. So the first one is, what is the of its time on-- I'll start again. What is the core Go Team since the Go 1 release. What sort of things can we six months? ROB PIKE: Mostly the Go 1 stable language that we knew And so now we're focusing more certainly not exclusively, on trying to get some Go because we made the language productive and helpful So there's been a I wouldn't say it's a majority working more exclusively The longer term, there's a We'll probably do a Go sort of end of year-ish. Do you want to talk ANDREW GERRAND: Yeah, by the end ROB PIKE: And that'll include improvements. We've got some pretty amazing given remarkable speed-ups The libraries probably won't 1.1, we might add a couple The thing is once you commit to sure it's right, and we really, getting the APIs right, so I of API changes until we're that's the right model. That's sort of a bigger thing There's some garbage collector significantly more efficient on precise collector is in the collection much more effective one sort of sore spot. ANDREW GERRAND: We're also other operating system ports, ports, and then there may be supported status. Currently there's only FreeBSD, [INAUDIBLE], and so they should depending on the [INAUDIBLE]. Oh, and there may be some we're not sure how But the long and short of it tightening the screws and making efficient and more reliable. We're not looking at any Go Version 2, and we're not So we don't have a long-term project at the moment. We're really happy to be a something that we think is and a great platform for which reliable software. You can get up and ask Let's take another NIGEL: I know it's been asked recently, but do you plans about Go on Android? ANDREW GERRAND: No. ROB PIKE: Clap? NIGEL: What feature or design surprising impact, or was written the most? Defer, interfaces, reflection? KEN THOMPSON: In just volume of I think they turned out ROB PIKE: Ken designed the I should mention that Robert original instigators of all trying to figure out how arrays knew we wanted some sort of also knew we wanted fixed-size checked, and we had these things don't remember how But it was a real struggle, we Ken walked in one day with this clear it was the right answer, using it, it was obvious. I would add, I think that two parts that question. One is, what made existing Go slices are definitely As far as how I think about a lot of people, it's the been using concurrency longer wasn't as big a deal, although For me, the whole idea of how I think about software The idea that a program is stick together feels so It just changes the way software changes the way libraries get to day programming I do, I single thing. MALE SPEAKER: Anybody else? ROBERT GRIESEMER: Yeah. Maybe the fact that a package as opposed to two files where export, as is still the case programming languages. I think that reduces your number factor of two, and also makes maintain your code. ROB PIKE: I also remember that of the globals in your package order you wanted, you didn't in one day and he said, decision we ever made. ANDREW GERRAND: Yeah, I would entire way packages are packages that consist of kind of fairly loose, has really building software from the straightforward and fluid, and everything becomes really a very can be very difficult Hey Bob. BOB: Hey Andrew. You talked about improving the I'm wondering if you can discuss internal discussions you have of schedule without writing a operating system. ANDREW GERRAND: It's actually the Go lang dev mailing list. One of our prolific who we should thank profusely improving the efficiency of posted a proposal for a revised what's been under discussion. So there's kind of tentative into it now, but if it's all there online. BOB: Thanks. ROB PIKE: I would like to just to implement an operating an operating system. That's really what the runtime it's changing the primitives system doesn't give you. The main thing that Dimitri is by structuring it differently things in a different way, and The thing he's not doing, which at some point, but it's very, some kind of preemptive The current scheduler will or therefore, Go routine only locks, system calls, So if you have an infinite never yield the processor. If you're running on multiple truly parallel, then you independently, but the load unless there's some sort So I think preemption has to difficult subject and we haven't we've been worrying about It doesn't have a huge effect but it does mean you can job of managing resources. But we don't have it yet. AUDIENCE: So I know this was previous session, the synchronization features of Go that it supports really one concurrency, which is really and I guess you could also add queue length as a I'm just wondering if anyone has of design patterns in in Java.Lang.Concurrent or some there are a lot of different concurrency, to see if any of higher order features on top of that are provided So basically the short form of that really, we're just consumer relationships And the next question then is, order features built on top of the low level synchronization the libraries? BRAD FITZPATRICK: Well, there's there, there's like Sync Week CountDownLatch in Java or easy to build your own We have a library that I use in Single Flight where if you have, and three people come in roughly they all want something little function that latches are in flight, and then answer out to everyone. It's a tiny amount of code, but build using existing channels and stuff. There could probably be a puts a lot of these patterns like Wait Group, there's not ANDREW GERRAND: I think also because these primitives are so of shied away from including the standard library because different, and if you just write have total control over the particular piece. AUDIENCE: Although most people code, right? Most people shouldn't synchronization primitives their code to be safe. I don't trust most programmers ROB PIKE: I actually take I think in the last talk, interesting examples that synchronization of any kind. And part of the whole point of is that it's not low level. And I don't object to having primitives where they're pretty firm stand that you can concurrent programming with much reason about, primitives. And I think you're being a you're describing that. I'd also like to say that promote a producer consumer other things with it, too. I mean, the whole idea of a map into the idea of a producer-consumer kind of thing. There are really rich models that don't have the flavors of That said, I completely agree it libraries for some of these would make the libraries not be things like multiplexers, and of thing, much higher level from the locks and AUDIENCE: Right, thank you. DAVID SIMONS: I'll just add to a trap that new Go programmers map concepts from other they start to write Go. So that can be very easy, if writing concurrent coding in immediately look for java.util.concurrent in Go to same code, just with Part of the appeal of Go is that program in a very different way, lot more natural or decomposing because Go routines The more mappings that you people to not take a sit back structured their code. AUDIENCE: In broad strokes, can the problems that led you to and then how your goals have more real world adoption Are they still the same, or ROB PIKE: I actually give a ANDREW GERRAND: Do You could just-- ROB PIKE: Give the talk, yeah. I mean, it's kind of a cartoon accurate that we were doing a the joke, but there's a grain tired of waiting for We were building these massive clusters and it was hour to build a binary. And we thought, why is this the generate 100 frames a second? What's wrong with our world? And we thought about the kind which is basically web servers and that's one branch. But then we also thought about It's mostly because of the And in C++, to a much greater dependency hierarchy is You include a Header file, but need it or not, unless you doesn't compile anymore. With all the ifdef guards and possible to have complete which causes things to be Mike Burrows, who built the a build one day-- we waiting for C++ builds-- and he noticed a file went by need for in his binary, and so a file he'd never heard of business being linked in, and compiled 37,000 times to And you laugh, but that's what use ifdef guards to protect just include everything and let this incredibly dense nest So a key driver behind Go was fixing through the language the totally clear dependencies, making the dependency problem And there's a key point there, talks before, which is you have on a Package B that depends on itself depend on C directly-- so A depends on B and B depends you should not have to compile compile B, it pulls up all of it needs into its object code import B, all it has to read is that's obviously a trivial thousands and thousands of exponentially in the number of and I mean exponentially. And so Go builds take a fraction because the compiler's fairly dependency problem just doesn't and that was a really, really AUDIENCE: And is that still important problem today KEN THOMPSON: For me, the reason about Go is because just about on Go, I read or tried to read and that was the convincer BRAD FITZPATRICK: The thing actually find the code. I read C++ code, even code I and I just try to trace through around dozens of files, dozens able to read code that I've been porting a lot of C++ gets substantially shorter and logic finally, whereas it used files that you couldn't actually picture of what your ANDREW GERRAND: And as somebody different angle who-- I don't have a C++ background at more dynamic languages like what I love about Go is that I want to write with high really verbose code. It's very simple to understand, I read on the page is the When I iterate over a slice, there's an iterative file from a web server in JSON or something. Instead, the language is very contained so that it's very easy you're reading. And as programmers, we tend to other people's code than writing speaks to what Brad is saying is project like the Go standard accessible, and more accessible language that I've worked in. BRAD FITZPATRICK: It's to block for a change. When you come from writing callbacks and callbacks and whatever, where every line of bit more, another anonymous to be able to be like, oh, I there, and I can wait however that client is, and then I go I don't have to name that, lambda, I don't have to I just write code. ROBERT GRIESEMER: I have written my previous life, and I think nice code in C++, but you have And almost every company that I style where they just use otherwise, they just can't And so even if you're very error, it's incredibly difficult Now in Go, it would be really language where these things And the fact is that all or many now in Go actually existed Rob Pike pointed out many of were invented 20 years The ideas about how you organize back all the way to [INAUDIBLE] [INAUDIBLE]. There's a lot of ideas in Go in different languages, which really made it to I thought it would be I want them. AUDIENCE: Is anyone doing a-- ROB PIKE: One more point Is this on? Robert mentioned this thing that they write in their own subset Last week Russ Cox, who's not style guide has all that in should start by saying, you can AUDIENCE: Is anyone writing I've always wanted to have this push services out of the kernel like a micro-kernel, and then time, and then keep going until ROBERT GRIESEMER: I believe completely standalone written in Go and ran BRAD FITZPATRICK: And somebody BusyBox that ran as a [? nit, ?] userland, at least, was shell and all the tools. At least it was a proof AUDIENCE: Another question just Any experience, tips, tools? ANDREW GERRAND: Relating to AUDIENCE: Yes, sorry, ANDREW GERRAND: Well, use talking to Amazon. It works. AUDIENCE: Or not. ANDREW GERRAND: Or not. That may be the case. BRAD FITZPATRICK: I don't do I run a lot of Go code on machines, and it runs fine, ANDREW GERRAND: We support AUDIENCE: So it has been said very small and beautiful out, and it appears that finally So my question is, how would effort by Digital Alexandrescu with [? D? ?] ROBERT GRIESEMER: I don't know I attended a D talk a couple of questions that was asked about paradigm comes along? Is D going to incorporate it, I cannot speak for the D course, but my impression from is going to grow very, very grown, and I think in Go, we're different approach. We're trying to take things reduce them to the bare bones, need to build everything up. And if those little pieces are together, you actually get powerful than when you have a all scratch each other a little weird side effects that are AUDIENCE: Thank you. ANDREW GERRAND: Maybe you guys design process of the language ROB PIKE: It was interesting, some archaeology, and I found a week, actually a thread talking about it. And it was remarkable to me how language emerged in those We knew what we wanted, and rough approach to what I think one of the most its design is that Robert object-oriented, Smalltalk, is Unix and worked on C stuff have this concurrent point And so we have three completely worldviews, and to design a different worldviews, one thing the ideas in, and whoo, But instead, what we did was feature that went into the three of us agreed that it was right design for that feature, important part of why Go works simple language, at least Do you agree with that? ROBERT GRIESEMER: Yeah, I I want to say one thing. I think it was an incredibly I think there were several times at Ken Thompson, and then I said, hey, you don't yell ROB PIKE: Did you yell back? KEN THOMPSON: No, no. I remember one instance, and first day when we wrote a big blackboard, and there was one 10 seconds on. Should the declarations be should they be Pascal-like, And we said Pascal-like, And from then on, decorations MALE SPEAKER: Best KEN THOMPSON: But one that early AUDIENCE: I think it was NIGEL: The next question from biggest mistake in Go's design you worked around it? Is there a billion dollar ANDREW GERRAND: So the billion to [? null point ?], and yes, Go we have the billion dollar ROB PIKE: And some people don't I don't think it's a billion but what do I know? Mistakes. I wish that some of the syntax, simpler in a few places. I think there are too many ways and there's this whole shadowing so on and so on. But I don't think there's that I feel is wrong. Part of the Go 1 process was the things that were bugging And so a year ago, the different from it does today, a lot of stuff got cleaned up, Go 1 release process So we fixed the things But for biggest mistake in the [INAUDIBLE]. MALE SPEAKER: There's the kind of confusing to ROB PIKE: Scoping for That confuses people. I think it's fine, but I can see would also be fine. But this is the kind of thing Once you've decided people using change the semantics of a for ANDREW GERRAND: That's the one why we decided not to change been incredibly subtle to detect it [INAUDIBLE]. AUDIENCE: So what led to your formatting of Go code, the tabs instead of spaces? ROBERT GRIESEMER: Good taste. KEN THOMPSON: If you read the some number of spaces that set appears that that's the there, instead of saying eight tabs or two tabs-- spaces, excuse me-- the answer is a tab. It's the definition. ANDREW GERRAND: [INAUDIBLE] your want it to look. ROBERT GRIESEMER: I wrote Go for writing it was unrelated to wanted to get rid of some silly you format code that But then when it comes to everybody has a different style, be great if everybody could just they want to look at And with indentation, it's Some people really want a lot of with two spaces or And the fact of the matter is But with tabs, you at least have change it in most environments And the idea was that by doing actually adjust it to Now it turns out, probably not true in reality. People don't really ROB PIKE: That's not true. I know Ken uses eight-space use four-space tabs. ROBERT GRIESEMER: OK, Even within the Go Team, different editor and everyone syntax highlighting or variable-width fonts, so I mean, religious one way or another, what we want to use. ROB PIKE: The most important is not the choices it makes The fact that there's a program that formats the code-- I actually would publicly like think he did an amazing It is an incredible tool. But it also enables didn't realize upfront. Because what [INAUDIBLE] does, parses it into a full Go reformats in, or maybe alone, but it depends. But because of that ability to of a Go program, and generate neatly laid-out code, we can your Go program that would automatically, like the Go Fix rewrite your program to bring That would be almost have an automatic And it's such a powerful idea about doing it for some You can imagine a Make File would let you edit your Make conceivably, other languages, from that kind of thing. Being able to rewrite your readable output wasn't the goal turned out to be one of properties about it. And if you get tabs instead of price to pay. KEN THOMPSON: For me, before continual wars about whether or the beginning, or all And while at the time that Go didn't agree on all the wars, there's no arguments, it's that probably saves half of the Google over C and C++. NIGEL: The next question is garbage collection over the next think we covered that earlier So the next question after that, distribute Go Lang threads to to create truly distributed If something like this should what do you see as the considered? ROB PIKE: That's something I think there's two The way the question distribute the threads. That sort of implies some kind which is not the way that A long time ago, I wrote a netchan, which lets you turn connection so that you can have network but using the channel manage their communication. And I think that's a really good API right, so we pulled it out talking again about what really should be. And I think it's a really, But one of the things we want to do that is that all of those previous talk still work. So you should be able to send stuff like that. And getting that done is difficult, but we definitely I can't promise any date for problem, but it's definitely that we had. I remember Ken and I had a first year, we probably had five we were going to get channels never quite figured it out, but see it happen. I should mention Erlang, by the it has a very different model. AUDIENCE: So I love Go problems are better solved using wonder if anyone's using ROB PIKE: Not that we know of. ANDREW GERRAND: Only in the same from C or other languages. It's a sweet idea, the idea of runs on an auxiliary processor but it's not something that a difficult problem. ROBERT GRIESEMER: So my these systems which employ specialized languages for those pretty much change from year year to half year. So I'm not an expert, but I let's say from C, that you're snippets of that ROB PIKE: My understanding is runs on the video card, and we to a video card, but it would MALE SPEAKER: If Russ has NIGEL: The next moderator roadmap, I think we covered The next one, any plans A lot of embedded hardware MIPS, and writing network easier than in C, C++. ANDREW GERRAND: GCC Go should runs on MIPS. ROB PIKE: It's already done. ANDREW GERRAND: We'd would love who's hearing this and BRAD FITZPATRICK: [INAUDIBLE]. ANDREW GERRAND: Yeah, OK. So for those of you who don't that the Go Team work on which is the one that was compiler design, and that's the standard Go distribution. And then in GCC 471, GCC Go will front end for the new And so you can compile Go for can target within some We're publishing a blog within the next week. But with GCC Go, I know people and MIPS, Alpha, IRIX, which is systems we don't support, lot of scope there. But it's not that it's not been well tested, so if you have we'd love for you to get GCC Go know how it goes. ROB PIKE: Both the compiler specs, so as far as implement the same language. Of course, there's probably bugs far as we know, you have no either suite and have it work. AUDIENCE: So is there a plan to or external packages? ANDREW GERRAND: No, AUDIENCE: Because it's kind of some library that you're using use Go Get to get that library, different version, you get check out another. ANDREW GERRAND: Yeah, I I'm sure the other Go developers What we're trying to encourage maintain a consistent interface, and change the interface, it's import path as well, and have supports a different And that's just part of release think it's something that some community do well, and other don't really address Brad has more experience BRAD FITZPATRICK: I was just shouldn't rely on I mean, the responsible thing to to have a script that runs be malicious code. Maybe that GetHub author's taken over or something. So use Go Get during you're going to ship something, version control system, ANDREW GERRAND: Also, you don't your dependencies every time. The default behavior of Go Get update, so get it to a working with Go Get with care. AUDIENCE: Are there already changes being thought of for ROB PIKE: No. But that's not to say there thought about it. Really, Go 2 is in the It's years away. There's been a couple of ideas might be Go 2 things, but we're We're just not. We're thinking about taking what using it, because the ideas in develop using Go 1 and need to make better. ANDREW GERRAND: I think to I think by necessity, Go 2 incompatible changes. Otherwise, it would just AUDIENCE: Are there any plans compiler to Go? BRAD FITZPATRICK: I mean, we're people have discussed it. There's a project called LL that uses the Go AST and Go they're fleshing out the type emitting all the bit AUDIENCE: What's the reason BRAD FITZPATRICK: Some guy's AUDIENCE: No, I mean what's sticking with writing everything moving to self-hosted. BRAD FITZPATRICK: I mean, the no Go to write Go in I mean, look at Rust. They took a long time writing Rust didn't exist. It's a route, but it's just a AUDIENCE: All right. Thank you. ROB PIKE: It's much easier to other people, if the compiler is everybody has. ANDREW GERRAND: Russ made a recent Q&amp;A session that he did language, or if you find a bug compiler is written in that very difficult process to language and in the compiler You have to sort of bootstrap through the chain, and there are way more about that than I ROBERT GRIESEMER: But also, significant part of a front end speak, some people in the completing that part so there at least for a compiler, where end if they wanted to. ROB PIKE: Go is a fine compilers, it's just we haven't And I think maturity will point, but we have no We're working on using rewriting the compiler. AUDIENCE: Are there any plans or DY Sim to Go for dynamically loading code at runtime? ANDREW GERRAND: No. ROB PIKE: There are no plans. I will admit that although Go the first session today, think, said how important that So having a statically-linked part of what makes Go nice I do think there's a real merit loadable module, which is a I actually would kind of like I don't think it's terribly plans to do so. I do understand the and it might be cool. MALE SPEAKER: [INAUDIBLE]. ROB PIKE: Does what? Where would you see Go? MALE SPEAKER: Using DL Open? ROB PIKE: I haven't tried MALE SPEAKER: [INAUDIBLE]. AUDIENCE: How large is the the longest one running ANDREW GERRAND: YouTube's project, which is [INAUDIBLE], approaching 100K. That sounds a bit It's hard to say because I, like the stage today, I don't know probably sizable. But just on the weekend I met company who said, when he met me said, thank you so We use it everywhere And so I had no idea they didn't tell anybody. And so I think there are a lot don't go out and just send us using your product. There's a lot of stuff that But certainly, we're using Unfortunately, we can't go into ROBERT GRIESEMER: You should program is really a ROB PIKE: Go Doc is also quite and it's been running several years now. The YouTube project has been least a year or more, long So there's serious examples of long time in production, the specifics are. AUDIENCE: I'd be very surprised asked before, but given that reflections on trusting trust, that builds a back door into it with itself, how do we know KEN THOMPSON: Well, if you read Somebody said, I think in a that the popularity of a you get your first virus And I've heard that the first ROB PIKE: We're on the AUDIENCE: Are there any plans the old abandoned Go ports, Tiny were proofs of concept and which fully developed? ANDREW GERRAND: I was going experiment and I don't think that further as something The Native Client port of Go serious about at the time, but kind of changed direction a bit, on people exporting [INAUDIBLE] [? Pinochle ?], and it uses an generate machine code on And so that would necessitate that's in LLVM's intermediate that we would love to do and it's not something that we're AUDIENCE: How much do I need to the language? ANDREW GERRAND: How AUDIENCE: Next question, how in front of non-GCC back ROB PIKE: I don't know actively doing it. Certainly, one of the most GCC Go is that it's released as it's not under GPL. And the reason for that is that someone build an LLVM back end, freedom for someone to And we're just waiting for it as a challenge As far as I know, nothing active would be whatever amount of work fairly straightforward unless AUDIENCE: Any plans to create software repository like PERL CPAN, Ruby Gems? ANDREW GERRAND: Absolutely. So there's a fantastic site at Doc that was developed by a and it's a system that allows of any Go Package that's browser, and that's a real And we've been talking about turning it into a package index we've got some really exciting doing it now. But I think the one notable approach we're looking at and CPAN or some of the other going to be human curated but feel like that might yield some BRAD FITZPATRICK: The other Go's name space is DNS, describe your package. So it's not like PERL CPAN where have some central group of allowed to use that name. So we don't have a central kind of implicit with So you can be GetHub.com slash whatever, and that's ROB PIKE: And that was a very this reason. We'd like to make it be challenge to figure out how really what we want to see. AUDIENCE: Are there any plans call Go from C? In order for me to really use need to be able to bind to Most languages have the ability ROB PIKE: You can call BRAD FITZPATRICK: You can't Go needs to be main to set up, and people inside So I think Ian has said he wants Russ has said he wants to make some roadmap. I don't know. ROB PIKE: The issue here, for there's a thing called C Go, program from Go, and that A lot of people use it for critical parts of the library look-ups and stuff. The problem is that the Go stack, and there's a calling boundary, which means that at it to go one way. So Go has to be running main. The piece that's missing but is don't know when, is that C the main program and That's the piece BRAD FITZPATRICK: To be clear, into C, you just have You can go to C back to Go, So you could make a tiny, tiny code as like the first and only That works, it's just ROB PIKE: Also, if C++ is the SWIG interface, Go is fully same kind of constraints apply under the covers I believe, ANDREW GERRAND: There is some towards this goal. I know that there's a Python that you can call into Go code early stages of its development, So there's some momentum. ROB PIKE: And you can also call AUDIENCE: Is there any interest in writing a new operating ROB PIKE: No. AUDIENCE: Are there serious linking of libraries BRAD FITZPATRICK: It just people want it. It's just work, I guess, AUDIENCE: Which is your favorite By that, I mean, which feature most happy Go is missing? Inheritance, exceptions? ROBERT GRIESEMER: I think I'm the [? 00 ?] not present that is in other you to think about your task hierarchy or type system which whatever you want to do. DAVID SIMONS: I like the lack it's pretty good. ROB PIKE: That's not I'd like to echo what Robert have a program in Java or C++, designing your type hierarchy, even do in Go, so that's But a sort of deeper point is to do that, and there's a lot of in order to use the types in that if you find out after hierarchy's not quite the way changing it might not it's too much work. So Go, by not having that type easier to adapt the program as structure just isn't there to rest of the program. Would you agree with that? ROBERT GRIESEMER: I think that's when you write a large In the beginning, you think you you sort of design it. It's not quite right. For the first couple of weeks, you're going to be a good organize, and at some point you or whatever, and at that point, really would require you to do just not going to do it, and to just look ugly and you're ROB PIKE: Also, another thing stuttering, where the C style object-oriented programming see in Java and C++. You get a lot of string string thing, except string is much And in Go, the declaration reasons we went with Pascal chance to elide a lot of the simply derive the type from the a remarkable amount remarkable amount of typing. ANDREW GERRAND: I really arguments to functions so that specific set of arguments and I find in terms of readability, By the same token, things like [INAUDIBLE] operators, these are things that to write, but they make it much When I first started using Go, feeling, oh, I have to again, and so on. But now, the benefits have interoperating with other I think somebody else already really empowering to be able file, and not being enforced to one file per class, or whatever have the file. Just like, you can hack structure it later so it's you don't have to context switch code, jumping around files. ROB PIKE: There was a question process, and another thing that but you can't tell now looking package was. There were endless debates about and how it went together. And it looks like it's sort of difficult thing to And maybe we were just stupid, using the wrong languages for something that worked out AUDIENCE: What's the feedback A lot of people using Go, and is very experienced But what about people new to Go programs? What's their feedback been? ANDREW GERRAND: So I've taught universities in Go, and I've have a very beginner level of languages like C or Java pick The main stumbling block that backgrounds have is But I think that's just a been using a language like Java, just ties them behind the very strange to just deal But then people who came from actually had a few come up to me actually understand pointers It's so much easier than doing semantically, they're pretty But I actually think that Go language, and I would love it training academies would take it I think it's really well-suited AUDIENCE: In the early design consideration in incorporating influence, something maybe polymorphic type system, or like having the API incorporated ROB PIKE: We had to talk Early on, the closures closures, they were just to pass in all the parameters. It took awhile to convince actually do them efficiently and there was a fair There's even a little bit of you run a lambda inside Go. It's not our background I mean, I've written a lot of think they're important, a concurrent programming is the tiny computations, so it's the power, but the short answer We didn't want to push harder now looking back on it, I But I do think that what's there because you do get true ROBERT GRIESEMER: Yeah, I summarizing it. I think having the true closures the language, and it wasn't actually wanted them from day I'm really happy about that. AUDIENCE: I really enjoy and channels, but I've also structures that can be accessed threads in other languages. Is there any interest in adding standard library or to the safely from different ROB PIKE: There is a library, you do the protection I think the question you're there's a notion of the horizon for stuff? Is that what you're AUDIENCE: Well, that's one side lock-free data structures that Java and C++ that might be structures and list data safely, so we don't have explicitly across channels. ROB PIKE: Dmitri Vyukov, who was garbage collector and scheduler good at lock-free stuff as suspect in time, he will start He's actually mooted a few I think there will be some ROBERT GRIESEMER: I want to add, the lessons learned from Java structures were built from day concurrently, and so they all incredibly expensive proposition it's not clear that it's the AUDIENCE: That was definitely for performance. ANDREW GERRAND: Thanks. All right. Well, we've done a full hour of Thank you everybody, for coming guys, for answering