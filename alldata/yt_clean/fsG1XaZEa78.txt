Today we are going to run SQL queries against {{ Maniacal laughter }} {{ Phone call }} What is it, I'm in the middle of a video... You don't say? ALL in RAM?... Well, alrighty then... Today we are going to run SQL queries against records. {{ Maniacal laughter }} But don't worry. By using indexes, we can rapidly speed up phenomenon known as boredom. We will work with a single table called 'person' The first row is an auto-generated primary The other columns are first_name... last_name... To create this table, we randomly generated male names, and last names in the United States. We did not weight the names by frequency when The datasets and the Python code used to generate from Github. Today, we are going to pay close attention So on the right, we will maintain a list of took to complete. These values will vary depending on the specifications We will begin by counting the number of rows There are indeed 100 MILLION records. Notice how long it took to perform this simple 3 seconds and 562 milliseconds. Or 3,562 milliseconds. Let us put this query and the time required As another speed test, count the number of Execute Over 100,000 Smiths... And the query took 4,261 milliseconds. For a second test, count how many people are Execute... Nearly 50,000. And note the time: 4,066 milliseconds. What if we count the number of people born For this we will use the BETWEEN operator. Execute... 166,000... And the query took 4,480 milliseconds. A pattern is starting to emerge. Let's quickly gather a few more speed samples. How many Michaels are in our database? 4,127 milliseconds How many people have the last name 5,315 milliseconds And how many people were born on April 1, 1995? 4,110 milliseconds. We ran 7 queries, and the execution times This is because in order to answer each query, to check each record for a match. Our 7 scans of the entire table took a combined This means on average my workstation was able While this may seem fast, we can do better... MUCH better... And we will do this by building an INDEX. The name 'index' was chosen because of For example, if you want to learn about "normal your entire math book page by page, scanning Instead, you would go to the index, find the see the list of pages. This technique is used by databases. When you create an index, the database will on one or more columns. As our first example, let us create an index To do this, write "CREATE INDEX" and then There are many different naming conventions The important thing is to be consistent. We will use the table name, followed by the this is an index. Next, write "ON" followed by the table Inside parentheses, write the columns to include We will start simply and create an index for Execute. That certainly took a while. Remember, the database had to scan 100 MILLION Let's test our new index by repeating an of people named "Emma." Execute. This time, it took only 508 milliseconds. If we repeat the count of people with last What's going on here? This is about as long as it took last time. It did not speed up because our index was The last name was not indexed. And as you might suspect, if we search for not run any faster than last time. Execute. 4,011 milliseconds. No real change. Our index improved the speed of searches by last name or birthday. However, there are other queries where the For example, count the number of people named Execute. This ran in just 514 milliseconds. By contrast, if you count people with last It takes 4,274 milliseconds. The full name query benefited from the first to use it to quickly find all the "Julies." From this smaller set of records, it then name 'Andrews'. The second query, however, had no index to It had to perform a full scan of the table and then find those with a matching birthday. Fortunately databases are clever about how For example, if you count the number of people of "Mia"... It executes quickly: 512 milliseconds... But why? Wouldn't the database first scan all rows then filter by first name? No! Just because we wrote it in this order does that order. The database will consider all possible ways We call each possibility a "query plan", thinks is best. You'll be happy to know a database can have Better still, each index can be created using Let us create a multi-column index. Write "CREATE INDEX", then an overly long Next, write "ON" then the table name. In parentheses, list the columns you want Important Note: The order matters. Think of this as sorting the data first by Execute... It is now time to take this new index for a test run. How many people named "John Williams" Execute... There are 36 people. And it only took 27 milliseconds to run this query. What about Julie Andrews? 26 milliseconds. Well done, index.. Well done... A word of caution. Indexes are not free. Just as indexes in a book require paper, indexes Furthermore, when you add data to a database, all relevant indexes. So go forth and use indexes, but use them wisely. And before you go, please help us achieve being the first channel with {maniacal laughter