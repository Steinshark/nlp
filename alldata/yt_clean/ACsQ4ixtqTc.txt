- Now, I first heard about Don Knuth when And when I moved into computing, I came under Barron. Who Don just remembered is the editor of Software: A student of Maurice Wilkes and a great fan Don just said he and David didn't met, but David was a great letter writer. And I see the books here Interesting props Computer scientist, author, historian, musician. And his life's work crosses the border of Looking at him there standing like a young He got his Turing award in 1974, so he must He was actually quite young by today's standards. I'm afraid, Don today you'd probably win the age. But clearly, one of the most important people It is my great, great pleasure to welcome - Don't applaud, just read my books. So, she didn't mention the title of my talk And actually, I don't remember the exact words But it was something like, I'm supposed to a respectable discipline. That has lots and lots of great results. Now, actually that doesn't need any proof. So I don't know why I should need any time Instead, what I wanna do is tell you just questions. So, there's two microphones in the middle And after I finish my opening remarks, I plan Try to spend about 30 seconds to a minute Unless there are no questions, in which case Okay so, in the sixties my mathematical friend And I'd say &quot;Oh, computer science.&quot; &quot;Computer science, what's that?&quot; And at that time it consisted of either artificial languages. But anyway, the main thing I wanted to mention I'll believe that computer science is really theorems. So, I don't know exactly what a &quot;deep theorem&quot; by deep learning I think. But, at the time I couldn't claim a thousand And this was, you know, late 1960s. But I think that threshold, by any definition seventies. And now we have thousands and thousands of So computer science shares with mathematics, problems we work on. We don't have to base it on the way nature So we can invent our own universe as we can On the other hand, computer science I'm not science is a subset of mathematics or mathematics But, I suspect that it'll actually confirm they're two parallel subjects, that neither And there's a lot in common, still there's It's certainly clear from the very beginning that there were lots of people who could never in computer science. And vice versa. So in fact, vice versa was probably even more So that was the situation when we started We have lots in common, but we also have this... We're studying things on which we have total So that makes it nice because we can actually a result. But physicists can never be absolutely sure. You can't go to the sun and measure things, So till your dying day you don't know exactly But with mathematics and with computer science, Okay now they said if you want to ask me any I'm gonna start answering them. But while you're walking to the microphone, I got my Turing award in 1974. Now in those days, the amount of money that less than it is today. But And my wife and I use it to serve strawberries Strawberries taste actually, much better out But, what I wanna show you a present that So when I got the Turing award, they presented volumes. I'm gonna hold 'em up so that you can see Look at the type setting in those old fonts. So anyway, this was about the nicest thing I remember that when they gave it to me though, page to see which printing they had. Now I see people are lined up, so I'm ready - [Audience Member] Hi, it's kind of a silly to ask one of my favorite doctors, I was just In the beginning of your book on algorithms, and I was wondering, have you tried applying For instance, would writing a grant application Thank you. - Alright, yeah. Actually, every time I look at an exercise But what exercise did you specifically ask - [Audience Member] Well for instance, writing or zero zero? It's probably zero zero for you but it's more - My life has been about as to Wall Street So the main reason that I was very happy to finances. In fact, I never knew why people bought computers happened to be around where there was a computer But I'm completely worthless as an advisor To me, I have to admit, it's a game and I've Now okay, onto the next question. - [Audience Member] Thank you very much. - Yeah. - [Audience Member] So I recall that when very bold wager. As to the number of bugs that would ever be A wager that doubled with every additional This is the only real useful system I have a bold claim. How on earth did you do it? - So I stopped doubling when it reached 32768. But the beautiful thing about it was that told me about the bugs early on. And so I now review them, I think the next But the bugs, there's a group of volunteers something worth while for me to do they file And every once in a while, I believe in batch So I get a batch of these requests and at two years, every three years, and so on. So the last time was, I think, 2014. And so then seven years from then is 2021. So I'm gonna look at bug reports again then. And I think last time there still was a 32678. - [Audience Member] The real question was system with such purity that you could dare - Well there's something called literate programming But the full example, I wrote a paper called Which goes through and classifies exactly And classifies them into a dozen categories were harmful? Or something like this? It turned out, yes, goto was harmful but that So look for that paper. By the way, it was published in the journal Experience. - [Audience Member] Sorry, I don't have any First, do you think computers will become - Okay so, I think that... I know that they're wonderful aids to composition. And some people may want to trust an algorithm the point. What I like is to have a computer help me. And then I have a smaller space of possibilities And I choose the one that actually works for - [Audience Member] So that's related to my You proved hundreds of theorems in your life. Do you see a role for computer assisted theorem - Yes, also in the present. I mean I've got a program running now at home - [Audience Member] So you talked about a mathematics and computer science and that - No, I didn't mean the difference. I meant when does computer science reach maturity on. - [Audience Member] Thank you for that clarification. The term I've heard about social scientists And that's in respect to reproducibility and I was wondering, do you think that we have envy or something else in computer science? And how should we, especially as far as reproducibility that? - Ah, well those are certainly good questions. I don't think I have a particular answer for Certainly for reproducibility of computer programming. So take a look on the web for all the things And I know the people in the statistics community their papers, they want the programs to be And so the idea of literate programming, I Dijkstra and Hoare and Dahl wrote a magnificent had a book called Structured Programming. And a few years later I came up with the idea so that people who would have to use it. Otherwise, they'd be accused of writing illiterate The idea is that you don't think of a program to execute, but you're presenting to other And so this is a big boost for reproducibility When it comes down to it we have to know how If we're going to do anything like this. But I don't know how to... I think my own thinking process is probably And I think our field is primarily jealous we have thinking that I have and people in And so we discovered each other and we come with each other. But if we have other ways of thinking, then a system for that, I'd rather work in collaboration - [Audience Member] Hi Don. Thanks for your magnificent volumes. Maybe some day you'll hatch another one. In the meantime.. My question is, what do you consider to be both from a practical and a theoretical point - That's the one question I hate the most. What is the question you hate the most? - [Audience Member] There we go I mean it's they like the best. But probably my favorite theorem wouldn't On the other hand, when it comes to a favorite And that's Bob Tarjan's algorithm for strong And it's just the most gorgeous, beautiful, There might be a topper for it someday, but It's short, it's deep, and I use it for lots - [Audience Member] Thank you. - [Audience Member] Hi Don, I just wanted - [Don] No. Next question! - [Audience Member] Okay, nevermind. So these days a lot of people are talking - [Don] I'm sorry? - The potential existential threats from AI - [Don] Existential threats, okay. - And a lot of us, well I won't put in my But I wondered what your thoughts were on - [Don] About what? - [Audience Member] About that AI could run - Right, yeah. I can go both ways on it. I can become optimistic and pessimistic. And Stuart Russell mentioned yesterday that And I think he has the most sensible ideas But it still scares me when I look at his assumption that human beings are rational. And then I look at election results... - [Audience Member] Enough said. - But I'm very serious. That all of these scenarios that they're planning from taking over.&quot; Based on the fact that human beings are gonna in charge. And so we have to get people who don't think them, before we're able to control the robots. - [Audience Member] Thanks. - [Audience Member] Hi Don, I'm asking my scientists. So based on what you know now, if you could would you do differently? - I think I would use decimal internally in - [Audience Member] Hi Don. You've done lots of splendid work concerning But I know that you've expressed concerns historians of science have been investigating I was wondering what you thought were the worth analyzing and documenting just now? And essentially what guidance you would give in that subject? - Okay, I only have a minute and I promised - [Audience Member] You have an extra five! - Okay so, but most of what I said is available Down the History of Computer Science. And it's a talk that I gave in honor of Tom two or three years ago. And basically, I start out by saying, &quot;Why to people who are doing computer science?&quot; And the main reason is that we learn by osmosis. If we can see what other people did, how they work in progress, then that helps us understand But there's been a seat change in the way In the sixties there were papers written about about algorithms and programming and things But now, if you look at the papers that are it says here's the way somebody got funding. Here's the way somebody made a partnership problems with their parents or something. But they don't ever talk about anything that And the reason is that the whole field of they call internal history to external history. And internal history is being played down. And one of the reasons is that historians to write external history. So this recent, really wonderful book about that they couldn't have published any of that Now the universities are falling down. There isn't a single university in America that supports a historian of computer science And so I'm trying to have Stanford come up I recently read a PhD thesis that's going Hove, who studied Edsger Dijkstra's Algol Which, as you know, was written not in a Simula, A machine code. And he studied very carefully and he makes in it and the data structures, and all the And this is the kind of thing that I believe science. - [Audience Member] Thank you, that's very Not least because I'm the examiner on that. - [Audience Member] Hi Don, how are you? You're surviving up there fantastically. You said you were gonna wing it and look, Okay, so I have concerns and I would guess lack of focus in CS education now. And I think, though I love many of the things is the way in which you've done things. Which is intense focus. We rarely get to see you because you're always And trying to get out the next volume and I'm wondering what you would say to those which you approach computer science? - The hardest thing for me is to decide between One hypothesis is that you can take anybody And the other hypothesis, that 2% of the world not. And depending on which way you go, the jury But let's suppose the second is true. It's not for a person who's a geek himself But the people who measure personality, also types of themselves. So it's very hard to actually prove it either But let's suppose only 2%. Then only 2% of the world is able to teach In a way, they'll understand what they're And so when I read it in the latest Communications, computational thinking, what is it? And I'm thinking it might be that the teachers thinking myself so how am I supposed to teach And that to me is the hub of the problem. That deserves the most emphasis. I can't go on much further. By the way, I have one more joke prepared - [Audience Member] I don't know, maybe this your joke into the answer. I hope so. But this is hopefully useful to the breadth And while you're known, really for mathematical of the analysis of algorithms more than anyone Computer Programming. And I believe your department is part of a many of us here, that our schools are part In addition, I think it's the case that our And that we use all sorts of data science, the world around us, from the reaction of So I'm getting back to the point, you compared Shouldn't we be compared and judged also with from data about the world? Also the engineering sciences, because we abstraction, design, and lots of tools? - So when I gave the Turing lecture, I tried of Computer Programming. And the idea is that it's art in the sense Your point is that I was comparing it only that leads to the actual joke that I prepared - [Audience Member] You're welcome. - I think tonight we're all gonna get a free issue. So take a look at Peter Denning's article typo and it calls about &quot;deep earning&quot;. - One last round of applause for a great man.