SQL Tutorial - Full Database Course for Beginners In this course I'm going to teach you everything you Now SQL is a language which is used to interact And a relational database management system is basically just a software application which we can And so, we're going to talk about We're going to start off with the basics. So, we'll just look at what is a database. We'll talk about the different types of databases. We'll talk about what SQL is and what it actually And then we're going to go ahead called a relational database management system. Which like I said, is just software We're going to install a relational database And MySQL is one of the most popular database And also, just in general. So, MySQL is a great first system to learn. And so, once we have that all install, So, we can write out little SQL code, in order to create databases and, you know, input information, And then we're going to get into writing SQL queries. And queries are used to query a database. So, we'll create a database. We'll populate it with information. And I'll show you guys how you can write these little So, we'll start off with the basics And then I'm going to show you guys to getting information out of a database. And finally, I'm going to show you guys So, a database schema is basically just like all of the that the database is going to store. And if you don't understand what any of that means, But this course will cover basically everything all of the things that you need to get started. And we'll also look at database So, it's going to be a pretty awesome course. I'm excited to be bringing you guys this stuff. And just know that all of the code, is going to be available GiraffeAcademy.com. And there's also going to be some that isn't going to be in course just because So, check out the website for more information. But without further ado, lets get into it. Let's learn SQL which is one of the most popular but just for developers in general. [What is a database?] In this video I'm going to give you guys a full So, we're not going to get too specific Basically, I want to show you guys We're going to talk about how databases are used, And the different types of databases So, this should basically just give If you don't know anything about databases, and get you up to speed so you can then go off and start learning So, I just have a little PowerPoint slide here And we'll look at some different So, the first question is, You'll often see databases So DB would stand for database. And, a database is any collection What I'm sharing with you guys here is the absolute A database really, if you want to get down to it, So, that could be something like a phonebook, a shopping lists, a to-do list, All of these are examples of databases. All of these are collections of information So, the phone book, right? This stores people's phone numbers. Their names and their phone numbers. It's a collection of related information. A to-do list - this stores a list of things It's related information. Your five best friends. That's information. It's information that you're storing somewhere. You have - you know, if I came up to you I'm sure you could list them off. That, in essence, is a database. It's a collection of related information. And then Facebook's userbase, right? So, all of the users that Facebook That's another example of a database. So, databases can be stored in different ways. So, you could store a database on paper. If I had a shopping list or a to-do list, I might You could store a database in your mind. So, your five best friends, for example. If I came up to you and I asked you, And you probably don't have it You don't have an app on your phone You just know that information in your mind naturally. And so, that's another way You can just store the information in your mind. You can store information on a computer. And this is probably the most common use case and they'll store all the information This PowerPoint, the PowerPoint This is an example of a database. It has related information on it. And I'm using it to teach this lesson. And then finally like a comment section. So, if you go down to the comment section It's a general database that's storing So, that really, in essence, is everything you need It's a collection of related information So, now that we understand I want to kind of walk you guys through more So, over here I have another slide. It's Computers + Databases equals heart. Now, the point I'm trying to drive home storing a collection of related information And computers are actually great So, I have here two things. We have over here on the left So, these are two examples of situations We kind of talked about how It's a collection of related information, right? A collection of products that you Amazon.com is also a database. Amazon is storing all this product information, They're storing reviews on the products, They're storing all of this information. So, let's take a look and we'll compare and we'll see why computers So, Amazon.com keeps track of products, reviews, So, Amazon is keeping track of so much information. Trillions of pieces of information Over here we have a shopping list. A shopping list keeps track of consumer products We're talking 10 to 20 pieces of information So, Amazon, we need to store With the shopping list, Both of these are databases, The other one we have 10 to 20 things. And so, over here on Amazon, the information and it's critical to Amazon.com's functioning, right? So, the information that Amazon is storing And another thing is that security is essential, right? Amazon stores people's personal information, like Like that information needs to be A shopping list on the other hand, the information It's not absolutely necessary for shopping. Like if you didn't have a shopping list, you could still you'd be able to find everything that you need. Also, with the shopping list, If you drop your shopping list on the ground - and look at it, it's like not a big deal. It's a shopping list. Finally, over here on Amazon, Whereas with the shopping list, the information or it could even just be stored So, maybe you just memorized your shopping list and that's where you're storing So, what I'm trying to show you guys is that and it doesn't just have to be like in your memory Databases are in all of these different environments. But here's the thing, for an application like Amazon, makes it really easy to store And really easy to secure the data And it also makes it really easy and duplicate that information and store So, the main point of this slide is that computers are And so, going forward, we're going to be talking about because computers are so good So, let's talk about how we can go about Now, a database could be as simple Or it could be like an Excel file, right? Microsoft Excel file. But generally, if you're going to be using or you're going to be using a database a lot of times what people will do is which is designed to help you create This is called database management systems. So a database management system that helps users create and maintain a database So, it makes it really easy for us So, if you're a company like Amazon that you need to keep track of, well, can make it pretty easy for you to store It's not like all that information The database management system Database management systems So, they can make it so only certain people with the It'll also help you to backup your data and import So, if you have a bunch of information a database management system can help you do that. Database management systems So, you know, Amazon.com is a website. And it's interacting with the Amazon database which is stored mostly likely So, you could write a program that could interact All right, so let's take a look at So, we have Amazon over here. And this would be like Amazon.com. And Amazon is communicating And I don't work for Amazon so I'm not 100% sure But for the most part, this is the general use case. So, we have our database management system And the database management system is creating So, the database management system The database management system that is creating, maintaining, updating, deleting So, Amazon.com will interact with in order to create, read, update, So, Amazon isn't creating or reading Amazon is telling the database management system And by going through we can be sure that all the data and there's going to be no problems with the data. So, let's talk about C.R.U.D. And this is an acronym that you're going to hear a lot. C-R-U-D. It stands for Create, Read, Update, and Delete. You'll also hear people call this Now, CRUD represents the four main operations So, you're going to be creating information So, creating new database entries. You're going to be reading information So, you know, retrieving or getting You're going to be updating the existing information. And you're going to be deleting the information And these are the core four operations that we want So, any good database management system So, now that we've talked a little bit about I want to talk to you guys about the two main types So, the first is called a relational database. You'll hear people refer to these as SQL[Sequel] And then we also have what are called And you'll hear people refer to non-relational We're going to talk about what SQL is in a second. But I want to show you guys these two types. So, a relational database which we have over here So, each table has columns and rows Now, relational databases are by far And relational databases are going to store So, we'll organize all the data that we want and then we can just insert information into there. A relational database is a lot like an Excel spreadsheet. So, if you've ever used a spreadsheet and we're storing information, And then over here on the right And a non-relational database is basically just any So, like I said, relational databases And so, because they're so popular, that's not technically relational is just referred And non-relational databases, you know, Because any database that's not relational So, non-relational database is organized database So, you'll have things like key-value stores documents which would be kind of like Or like XMl. They'll store data in graphs. Or even flexible tables. So, really non-relational database It's just anything that's not relational. So, let's take a look real quick at a relational database. Or you'll hear people, like I said, So, over here, we have two examples of tables. So, this would be basically how we would store So, over here I have a student table. And this student table might store individual students. So, you'll see over here we have So, for every single one of my students, And you'll notice over here, And that ID will uniquely identify that row in the table. And over here, we have a users table. So, maybe you're creating users for your application. So, they have a username, So, the username is something It's something that uniquely identifies And then we're also storing like password and email. So, we kind of talked about how And when we want to create a relational database, we can use a And a relational database management system, is just a database management system that helps you And some of the most popular are my MySQL, There's a bunch of these that are, And relational database management systems use And SQL is a standardized language for interacting So, remember, is just a software application that we can use and do different things to our relational database. And SQL or Structured Query Language to interact with those relational So, we can use SQL to perform CRUD operations like user management, security, backup, etc. And we can use SQL to define tables and structures. So, a relational database uses tables And we can use SQL to define those tables. And then insert information into those tables. And SQL is a standardized language on every relational database management system. However, different relational database management So, not all SQL code that you use on one will port over to another one So, now let's talk a little bit And in non-relational databases So, a non-relational database stores data So, I'm showing you guys a couple different and how they would store data. So, over here we have a document database. And this would store information inside of like So, we're talking about things like JSON or XML. Basically, I think JSON is kind of a very popular format So, JSON is JavaScript Object Notation. So, there's a lot of non-relational databases They'll also store data in graphs. So, over here we have graphs. And there's like these little nodes. And then there's, you know, connecting lines between And then over here we have a key value hash. So, we would have a key And that could really be anything. It could be a string. It could be JSON. It could be a graph. It could be anything like that. So, these are just three common examples of what SQL or non-relational databases And just like with relational databases we can have And these help users to create So, some examples would be mongoDB, There's a bunch of these popular noSQL databases that have been sprouting up And these are all implementation specific. So, unlike relational database management systems which is just a standard language there isn't a standard language for interacting with So, generally, the non-relational will implement their own language for performing So, now that we've looked at the different types I want to talk to you guys about So, one of the most common things So, a database query is a request that's made for specific information. So, you'll hear the word query thrown around a lot. And generally, a query is you're just asking to give you some information. So, as a databases structure becomes it becomes more difficult to get And if you have a very complex then getting a specific piece of information And that's why we write database queries. So, can write a very complex database query if you've ever used a programming language before. And that query will then instruct the to grab a specific piece or specific pieces So, a good way to think of a query, So, if I go on Google and I would generally And then Google would give me the information That's a lot like a database query. Except with a database query we're like we would with Google. So, I can, you know, go up to my Google search bar and I can type something in in English or Spanish But with a relational database management system or a specific language that's meant for that So, let's wrap this up real quick. We kind of covered a lot of So, a database is any collection It's a very general term. And computers are great for storing databases They can store lots of pieces of information. And they can handle things like security really easily. And database management system and secure a database on a computer. Database management systems will allow you and other administrative tasks on the database. There's two main types of databases, relational Relational databases use SQL and they store data Non-relational databases store data So, things that aren't relational database tables. And then we talked a little bit about querying. A query is just a require that you would make for a specific piece of information. So, that is kind of the basics, And really, if you understand everything then you have a good grasp of database fundamentals. And as we go forward, we're going to learn more and how to store data, and how to organize our data [Tables and Keys] In this tutorial, we're going to look at some So, we're going to talk about how we store Namely, in tables. Let's talk about the different things We're going to talk about things called keys. We're also going to look at rows and columns. We'll talk about different tables can be related and how we can define relationships between tables. So, this will really just give you guys a full introduction which you can then apply when using a relational database management system. So, let's get started. Over here I have an example of a table. And this is a student table. And so, the student table defines So, up here we have the column names. So, the student ID, the same of the student, So, I'm storing three pieces of information They have their ID, their name, and their major. So, over here we have Jack. His student ID is 1. And he's majoring in biology. Down here, we have Claire. Her student ID is 3 and she is majoring in English. So, all tables in relational databases They're going to have columns Now, columns are these vertical sections right here. So, a column would define a single attribute, right? So, we have our name column. And inside the name column We have the major column. Inside the major column we have Makes sense. And then we have rows. And a row is an individual entry So, a row or a horizontal entry So, in a single row we're storing So, the columns represent a single attribute and Whenever we're creating a table we always want to have one very special column And a primary key is basically an attribute which So, it's an attribute about a specific entry So, over here, we have student ID. And notice that I colored this in red And this underline is basically going to specify is going to be the primary key. In other words, we can use this attribute So, over here we have Kate So, we would say that Kate's primary key is 1. Now, let me show you guys why primary keys So, down here, inside of these gold squares So, we have two students, both of which And both of which are biology majors. Now, this isn't that, you know, special of a case, right? You can imagine that in a school you might have who are the same major. But in this case, how can we differentiate Well, we can use this primary key. So, even though the name and the major are the same as the name and the major of this row, The primary key is different. And that's the whole point of a primary key, is that the primary key is always So, even if all of the attributes of the row And therefore we can differentiate So, I can differentiate between this Jack and this Jack And so, generally, whenever we have a table you always want to define a primary key. And a primary key can be anything. It can be a number. It could be a string of text. It could really be anything that you want. But it has to uniquely identify the specific row. So, in other words, another row in this student table So, down here I have another example This is a user table. So, just like that student table, So, over here we have email, password, So, email is going to be our primary key. You can see I put that in red and I also underlined it. And these emails are unique to each entry So, fakemail@fake.co. No, other rows in this table could have And then over here we're storing the password. We're also storing a date. So, a lot of times in databases And then over here we're storing a type. And so, basically whenever you want to store data, So, you're going to define, you know, and then you'll just insert specific pieces And so, over here we have one more example And we're actually going to be looking So, this is an example of an employee. So, imagine that we have like a company database So, we have the employee ID which is the primary key. We're storing first name, And we're storing all of this specific information Now, I want you guys to notice So, employee ID, this is just a, you know, that we've assigned to each employee, right? This employee's ID is 100. This employee ID is 101, etc. And this over here, this employee ID, And a surrogate key is basically a key that has no It's essentially just, you know, like in this case a So this, employee Jan has an employee ID of 100. That doesn't necessarily mean anything. 100 is just a value that we're using to represent And so, we would refer to that as a surrogate key, Surrogate key is a key that has no mapping to We can also have something called a natural key. And over here you'll see that except instead of having employee ID, And SSN stands for Social Security Number. So, Social Security Number is a number in order to uniquely identify each citizen. So, in this case we're using the Social Security Number In other words, we're using the Social Security Number And this is an example of And this is a key that has a mapping or has a purpose So, a lot of times you'll hear people refer to surrogate A surrogate key is a primary key And a natural key is a key that has a mapping to the So, those are kind of the two different types of Another thing I want to talk to you guys And a foreign key is basically an attribute that will link us to another database table. So, over here I have this same exact employee table. And then I also have this And you notice that I colored this in green. And this is what we would call a foreign key. And a foreign key stores the primary key So, here we have our employee table But let's say that an employee belongs So, a company might have different branches. And we can store the information about what branch So, the foreign key over here is actually In our case, a branch table. So, let me show you guys that. So, down here, we have this branch table So, the branch is it's own separate table. And we have - the branch has a primary key And the branch names are Scranton, Stamford, So this in itself is its own table, right? It's the branch table. And over here we can define which branch by referring to the ID, the primary key of the branch. So, here, Jan Levinson, her branch ID is 1, which Because branch ID number 1 is corporate. Michael Scott, his branch ID is 2, So this number is mapping this row over here And that's what a foreign key does. A foreign key is essentially just a way that we can So, a foreign key is just a primary key of another table. So, Andy Bernard, right? His branch ID is 3 which means he belongs And so, that's what a foreign key does. A foreign key allows us to link up or define I can say that Andy belongs to the Stamford branch And over here you'll see on the branch table, I also mgr_id, that would stand for manager ID. And now this is actually going to be a foreign key So, manager ID is going to be the ID of a particular So, let's take a look at the Scranton branch. So, the branch ID is 2. The name of the branch is Scranton, So, let's go check it out. So, over here in the employee table, What that means is that Michael Scott We were able to define that relational So, down here, the Stamford branch, If we come up here, we can see So, Josh Porter is the manager Corporate over here, the manager ID is 108. So, over here we didn't actually include So, obviously, this isn't like, you know, But the manager for the corporate branch whatever that would be inside of this table. So, that's what a foreign key does. A foreign key is able to help us to define relationships I can define which branch by including the branch's ID as a foreign key Similarly, I can define which employee by including that employee's ID as a foreign key And so, that's really why foreign keys And it's also important to note that a particular table So, ever here I have my employee table, right? And it's the same exact thing as we have before. But I also added another attribute And that stands for supervisor ID. And so, what this is going to do is it's going to define And what's cool about this foreign key So, an employee can be a supervisor So, over here we have Angela Martin, right? Her employee ID is 103. And her supervisor ID is 101. And that means her supervisor So, if we come over here we can look. Angela Martin's supervisor is Michael Scott because So, Michael Scott. Michael Scott's super ID is 100. That means Michael Scott's supervisor is the So, we can these this foreign key over here to define relationships between employees. So, before we define the relationship between and now we're defining a relationship between the And so, what's cool about this is we can tell what the different supervisor I can tell that Josh Porter's supervisor is Jan Levinson. And I can tell that Angela Martin's supervisor Defining that information by using a foreign key. All right, so let's take a look at another table. I actually added in another table down here. So, over here we have employee, We have branch. And then we also have branch supplier. And branch supplier is another table So, a branch supplier would basically define So, we have these branches. Maybe they're selling a certain product. Maybe they're selling like paper products. And the branch suppliers would define And you'll notice up here, the primary key actually And this is what we would call And a composite key is basically a key So, this key is made up of two columns, right? It's made up of branch_id and supplier_name. So, branch_id is actually going to refer And supplier_name is going to refer So, we can say over here that Hammer Mill So Hammer Mill supplies paper to Scranton. Uni-ball supplies writing utensils to Patriot Paper supplies paper to So, inside of this branch supplier table, I'm able to define which different suppliers are Now, the reason that I need this composite key is because the supplier name doesn't And the branch_id doesn't uniquely identify each row. Only together can they So, for example, supplier name, Hammer Mill. You'll notice that Hammer Mill shows up here So, Hammer Mill supplies to branch number 2. And they also supply to branch number 3. Uni-ball supplies to branch number 3 So, this column has repeated values, right? This column has Hammer Mill repeated. It has Uni-ball repeated. branch_id also has those things repeated, right? So, branch_id 2 shows up here branch_id 3 shows up here a bunch of times, right? And so, the branch_id column And the supplier name column Only together can they uniquely identify it, right? So, we would say Hammer Mill supplies branch 2. That combination only shows up once. We wouldn't put that combination again So, Hammer Mill supplies branch 2. Hammer Mill supplies branch 3. These two rows are uniquely identified by the And so, over here in these employee and the branch But over here, we define two columns as And that's actually pretty common, where we're going All right, so down here I want And this is going to show you one other way that we So, I actually added in two other tables. We have a client table So, let me kind of walk you guys We still have employee. But over here, we're defining clients. And so, a client might be like a customer, right? So, a client would buy paper products or, you know, So, the client has a client ID. They have a client name. And then they also have a foreign key So, a client is going to be associated So, we would say Lackawana County Which means the Lackawana County The John Daly Law, LLC is going to So, they're going to buy products So, this is a client table. And down here, we have this Works_With table. And what the Works_With table is doing between the employees and the clients. Namely, how much paper So over here we have employee ID. We have client ID. And we have total sales. So, the employee ID is going to refer The client ID is going to refer And then we're going to define how much in product So, employee 101, for example, that is Michael Scott. Michael Scott has sold client ID 401. Michael Scott has sold Lackawana County How about this one, 104. So, Andy Bernard has sold client number 403 - And so, this Works_With table is able to define how And you'll notice over here And the composite key And this is actually a special type of composite key because both of these columns So, employee ID is a foreign key, right? It relates to the employee table. Client ID is also a foreign key. It relates to the client table. And both of those foreign keys together And that is actually a very useful way Because when we do something like this, So, I can define how much product And that is something that can So, as you can see, like these tables can either And the more complex your database design the more complex these tables So, this employee table has a primary key The client table has a primary key and a foreign key. This Works_With table has a composite key. You know what I mean? Both of which are foreign keys. Like it can get very complex, but we can use in order to define different relationships. But really, that is just a, you know, I think a pretty We talked about rows and columns. We talked about primary keys. We talked about surrogate keys and natural keys. You know, the different types of keys We talked about foreign keys. We talked about composite keys. And I kind of showed you guys a few different So, this would be like our company database. And obviously, we would have But this is kind of a good example of and then define the relationships between [SQL Basics] In this tutorial I'm going to walk you guys through SQL So, SQL is a term that you're going to hear when you're talking about databases. And SQL actually is a language. And it's a language that's used for interacting with So, SQL is - it's similar to - A lot of times you'll hear people refer to SQL It's not technically a programming language Although, you can use SQL to provide instructions So, I guess if you want, you could call it So, like I said, SQL, it's a language that's used for interacting with relational database A relational database management system It's a software application that you can use to create You might use a relational database to create a database for an application And then that relational database can make sure that the database and store everything the way So, in order to interact with a relational we need to use a special language. So, I can't just talk to it in English. I can't just be like, "Hey, relational database get me this piece of information." Relational database management systems But what they do speak is a language called SQL. They speak Structured Query Language. And so, if we want to ask a relational database for example, like store a piece of information We can ask the relational database management So, SQL is the language that we can use to And, you know, we can use SQL to get the relational like create, retrieve, update, and delete data. Create and manage different databases. Design and create database tables. So, we can define like a database schema And perform administrative tasks. So, things like security. We could do like user management, importing, So, SQL can be used to tell the relational database Now, here's the thing, SQL implementation So, SQL, the actual language actually does So, there is like an overall formal specification and all the different commands that can be used. But the problem is that there's a bunch of these Some of the popular ones we hear about, like Like all of these relational database are going implement SQL just a little bit differently. So, you could write SQL code that would work on but then if you tried to use it on another one, Now, for the most part, everything but you might just need to tweak So, one thing you want to keep in mind with SQL is that, you know, SQL is used on all of the major but it's used slightly differently. So, certain instructions might work and they might not work on another, or vice versa. Or you might do things just But for the most part, they're all implementing SQL So, the concepts are the same So, let's talk a little bit more about SQL. It's actually a hybrid language. So, it's basically four types of languages in one. And you know, you don't need to but you are going to hear people talking And so, I want to introduce them to you So, SQL, you know like I said, it's four types of So, SQL is a data query language, which means it can So, you can write queries in SQL which tell the what pieces of information And so, a data query language is used to get data SQL is also a data definition language. And what that means is you can use Now, a schema is basically just like the Like what tables are going to be in the database, and the data types that those columns So, we can use SQL to define data in the different, SQL is also a data control language which means it's used for controlling access Basically, you can use it to configure So, I could define a bunch of different users And I can say like, okay, Or this user can read information from this table. Or this user can update So, you can use SQL to control the access to the data. And SQL is also a data manipulation language. So, it's used for inserting, updating, So, these are the four different types And you'll hear people using these terms kind of a lot. And even like database management systems And they'll say like data query language So, it is good to just understand these and how they're broken up into these four But basically, the whole point of this slide And it's super powerful. And that's one of the reasons why it's used in So, now let's talk about queries. And one of the things that we're going to be and you know, if you're working with databases, which is querying. So, query is a set of instructions given to the generally written in SQL, that tell the RDBMS So, if you have a database that has like millions And a lot of times that data is, you know, It's sort of hidden in this complex schema. You know what I mean? Like you have one piece of information and then another piece over here, And you want to kind of grab all that information We can use queries in order to tell So, the goal of writing a query is that we only want Imagine that if you, you know, from the database you had to grab all of the and then find the information that you want. We don't have to do that. Instead, you can write a query which will tell the and it'll be able to grab just that information So, over here I just have a little example of a query. So, this would be like maybe we're trying to get - So, select the employee's name and the age where the employee's salary is greater than $30,000. So, what this will do is it'll give us every employee who makes more than $30,000, right? That's kind of like a general query. Don't worry too much about specifically We're going to get into that in this course. But that's kind of like what a query would look like. We're telling the RDBMS what information we want Not like all the information in the database. All right, so that is kind of an overview of SQL. I mean obviously I didn't get into everything. We're going to look at all of these, you know, that we can do with SQL as we go forward. But for now, that should kind of give you and you know, sort of what it's doing for us [MySQL Windows Installation] In this tutorial I'm going to show you guys and install two things that we're going The first thing and the most important And MySQL is a RDBMS. Which basically means it's a software application which we can use to maintain and create And so, when we have MySQL we can actually set up what's called And that would basically be a server And then we can write SQL in in order to create So, the first thing we'll do is download And the second thing we're going to do which is called PopSQL, or PopSQL. And it's basically a program in order to kind of like write all of my queries. It's essentially a text editor. But it's a text editor that can hook up And it'll just be a really easy interface and get the information back. So, I'm going to show you guys how to download The first thing we want to do is open our browser So, you just want to come up here and you're just going to search in Google So MySQL community server is this first link It's just dev.MySQL.com. And this is actually a free It's basically like the most basic version of MySQL. And it's the version that we're going to be using. So, if you're a beginner, It's kind of just like a great environment It's pretty simple. So, down here you have a couple different options. You can download just like a zip So, you'll see over here there's So, you're going to go ahead and click on that. And then that'll bring you to this menu over here. And you can see here's the MSI installer. So, we're just going to go ahead and download that. And it brings you to this page. It's asking you to like log in or sign up, And it'll go ahead and start the download. So, this installer is really great and it'll allow us to pick and choose what MySQL So, let's go ahead and accept the license Here we have a couple options You can see you can just do like Developer, What we want to do is - Now, here's the thing, if you want, But that's going to install a bunch of stuff Or at least that I'm not going to be using So, I'm going to ahead and click custom So, the first thing we'll do is come down here and I'm just going to click MySQL server 5,700 right here. And I'm going to go ahead and add that over here And then I'm going to come down here And I'm going to come down here to MySQL Shell. And I'm going to do the same thing. So, I'm just going to click down here to MySQL shell. I'm doing the 64 bit version. I'm going to add that over here. So, these are the only two things But if you want, you can download everything. That way, you just have it. So, I'm going to click Next. I'm going to click Execute. And this is going to go ahead So, now you can see they're downloading. And this shouldn't take too long. They should be downloaded pretty quickly. And then we'll be able to move on. All right, once those two things are finished And we can also just click next through here. And you'll see it's asking us what we want. I'm just going to click standalone, That's all we need. And you can just leave all of this stuff, And then over here, it's asking us to create So, whenever we're using this MySQL database server, So, there's already a default admin account But we're going to have to give this a password. So, I'm just going to type in password And again, down here. So, make sure that you remember what this password And if you want, you can add additional users. I'm not going to do that. So, then we can just click Next. And you'll see there's an option here. It says Start the MySQL Server at system start-up. And if you want, MySQL to start whenever you can go ahead and keep that checked. And then I'm just going to click Next. And click Next. And just click Execute. So, this is going to go through and do a bunch of stuff So, you'll notice that it's actually, you know, I mean obviously the installer makes it really easy. But MySQL is a complex program. And that's why there's all these little things But we're almost done So, now that everything is finished configuring, And we can just click Finish. All right, so once we've finished installing everything, now what we need to do is we're going to actually So, I'm going to come over here and we're just going And you'll see there's this option here, So, we're going to actually go ahead and use that. And what this will do when I open it up, So, I'm just going to enter in that password In my case, it was just password. And you'll see here we're actually logged in. So, now we're connected to that MySQL server So, from in here, what we can actually do So, I'm just going to say create database. And I'm going to give it a name. So, I'm going to call it giraffe. And then I'm going to type a semicolon. So, what this will do, is it'll create a database Now remember, MySQL is a database which means it's an application or a software program So, in order to start building a database, So, I'm just going to say create database giraffe. I'll hit enter. And this is going to go ahead and create So, now we've created this database, So, for the rest of the course, what I'm going to be So, we're going to be learning which is used to interact with MySQL Now, if you want, you can do everything here inside of this terminal. So, inside of this little terminal window you can You can type in SQL like this up here. Create database. That's all valid SQL. But I'm actually going to be using a different program And that program just makes it a lot easier It's not like some kind of boring terminal window. So, that's basically a text editor and we'll be able to write our SQL So, I'm going to show you guys real quick You're just going to come up here. I'll make a new tab. And we're going to come up to the search bar And you'll see this link here, PopSQL.io. So, we're just going to click that. So, here there should be an option so we can just click on that So, PopSQL is cool. Actually, it's kind of like Google Docs Now, we're not going to be using that functionality. We're just going to be using it as a text editor. But it's a great way for us to visualize and then also like what gets returned So, once that's done downloading, we can just click on When that's done installing, And you'll see we have to sign in. So, you can either create or you can create an account with your email, So, I'm going to go ahead and sign in. And you'll see it says, "Welcome, Mike." So, we're able to sign in. And I'll open the app. So, now that we have the app open, So, remember, we set up our MySQL database server So, what we can do now is we can connect So, over here, it's just asking us to type in our And the type, if you click down, Host name - so the host name And that just refers to like the local address Port is going to be 3306. Assuming that you used all the defaults then that should be the port number. And then finally down here, the database So, that's what I named it. If you named it different from giraffe, And then username is going to be root and the So, in my case it was just password. So, once all that information is in, and you'll see it's connected us to our database. So, now we basically have a text editor which is hooked up to our database so we can write And it'll actually get run So, now everything is set up. And we're ready to go off Now, I realize that this was kind of Unfortunately, that's just unavoidable because database management systems are, I mean this isn't - they're not designed to be like But now we're ready to go and everything is set up. [MySQL Mac Installation] In this tutorial I'm going to show you guys that we're going to need going forward in this course. Now, the first thing we're going to download And MySQL is a relational database And it's actually one of the most popular relational And a lot of people use MySQL or they're first dive into So, for that reason, I've picked MySQL as the that we're going to use in order to learn SQL. Now it's important to note that the focus of this So, SQL is Structured Query Language. It's an actual language. And MySQL is a relationship database So, we're going to be using MySQL and use and learn all the most The second thing we're going to install in addition You don't have to install it, that we can use in order to So, it's called PopSQL. And it's an awesome program which basically allows And then you can execute them and it'll show you all the results that you get back. So, I'm going to be using PopSQL in order to kind of and just make it a lot easier for you guys So, I'm going to show you guys how to download First thing we're going to do is head over to our So, you just want to type in MySQL community server. And we're just going to type that in to Google. And then down here, this should pop up. It's just download MySQL Community Server So, MySQL Community Server is a free and And if you're just starting off and learning about then this is a great starting point. And then all we have to do down here is scroll down and you're going to see that Basically, what we want to download So, it's just this first one right here. So, I'm just going to go ahead and click Download. And that's going to start downloading for us. Now, it brings you to this page. It's kind of asking you to log in or sign up, You can just click No thanks, just start my download. And then it'll start the download for you. So, this is - it's probably around like 400 megabytes. It's not too too big of a file, You're probably going to need at least over to hold everything that SQL is going to need. All right, once that is finished downloading, and we're going to go ahead and install MySQL All right, so here we just have this like PKG. So, I'm just going to double click on this. And it'll open up this installer. So, we're just going to click through. And you can basically just leave everything Just keep it in the default install location All right. So once that is done running the installer, It says, MySQL Installer. It's giving me this date. And it says "A temporary password Now, when we're using MySQL we're actually going to have to using a username and password. And in order to log in, you're actually going that they provide for you right now. Now, it's root@localhost. So, root is the actual username Localhost is going to be address of the SQL server And then this is going to be So, what you want to do is just copy this. You want to make sure that you keep this. So, what you could do, is you could And you'll see this little like thing comes up. If you just drag around here, And so, now we'll have a picture of this Point is, is you don't want to lose this. So you want to make sure that you have this If you don't, then it's going to be a problem because So, make sure that you record that. And then I'm just going to click Okay And I'll move it to trash. All right, so once we've installed MySQL, which basically means that we're going to be running Now the way this works is MySQL is a relational And it's basically going to act as like And so, we can connect to MySQL. We can login and then we can So, we need to make sure that the MySQL server So, I'm just going to come up here to the search bar. And I'm just going to search for System Preferences. And then down here there should be So, we're just going to click on that. And you'll see it's going to open up So, it says, "MySQL Server Status. The MySQL Database Server is currently stopped." So, what we want to do is start it. And I'm going to put my password in. And then if you want, you can have it automatically It says, "Automatically start MySQL Server If you want to do that, you can. You don't have to. So, basically, now a MySQL database server And what we can do now is we can connect and we can log in and then we can and creating all of our tables and stuff like that. So, now that this is set up, The first thing I want to do is update our password. So, we were given that temporary password. So, I'm going to open up the terminal. And you can just go over here to the search bar And that'll open this guy up right here. So, from in here, we need to start configuring First thing we need to do is get this terminal So, if I come over here and I try to type in MySQL, Basically, our Mac doesn't know about this MySQL So, there's a couple things that we have to do So, all we have to do is basically just tell So, what I'm going to do, and you guys can type exactly what I'm typing. Echo single-quote, export PATH in all caps And then you're going to type a colon$PATH Just like that. And then you're going to end off the quotation mark. So, you're going to do single-quote. And then two greater than signs. And we're just going to say ~ /.bash_profile. So, what this is doing is it's actually adding this line Basically, what this will do is it'll make it so we can use So, I'm just going to hit Enter. And then I'm just going to .tilde/.bash_profile. This will kind of reload that file. And now what you want to do is type in MySQL. And we'll see if this works. So, you notice now when I type in MySQL, we got this error message that says, "Access denied for user 'giraffeacademy'@'localhost' What this means is that So, basically we're able to give commands to MySQL. We're able to do stuff like that. So, I'm just going to clear this out. And now what we want to do is we want to that's running and we want to log in. So, I can just type MySQL just like that. And you're going to type hyphen u. And you're just going to type root. And then you're going to type hyphen p And this is going to ask you to enter a password. And so, now is the time where we want to So, in my case, I took a screenshot of it. So, that screenshot is now going to be stored It's over here. And so, what I can do is I can just look at this So, I'm going to go ahead and type in that password. All right, so now that I've typed in that password, So, basically now we are logged into the SQL server, or to the MySQL server that is running So, what we can do now is we can actually So, I'm just going to type in the following command. ALTER. And then I'm just going to type in 'root'@'localhost'. And you'll notice that I have single quotes around So, then I'm going to type in identified by - I'm just going to set it as password just And then you're going to type a semicolon. And now you want to hit enter. And so, what that's going to do, So, now you can actually login using something So, you'll be able to login using the password So, now what we want to do is just make sure So, I'm going to type in exit. Just like that. And I'm going to clear this out. And now what we want to do is try to log in again. So, I'm going to say MySQL-the root -p. And this time I'm going to enter in the new password And you'll see that I'm able to login. So, as long as that worked and you're able to log in, then you updated your password, So, the next thing I want to do really quick So, MySQL is a database management system. So, what it allows you to do is manage and the information that are in those databases. So, what we want to do before we can actually get So, what we can do is we can just type And then I'm just going to So, I'm creating a database named giraffe. And you can name your database whatever you want. Generally, it's going to correspond I'm just going to be using this as a general purpose But we can just say create database giraffe. And this will create a database for us called giraffe. And then you're going to type a semicolon after that. And then you're going to click Enter. So, now we actually have a database All right, so once you've done all that, Now, here's the thing. If you want, you can actually write out You can do everything that I'm going to be doing So, you can interact with the MySQL database server You can write SQL. You can give it SQL commands. You can do all sorts of stuff like that. In our case though, I'm actually going to be using And this environment, this terminal environment for like visualizing things and seeing things. So, there's actually another program called PopSQL I'm going to show you guys how to download But just know that this part is optional. So, if you want, you can do everything So, I'm going to open up my web browser again. We're going to come back up here. And I'm just going to do a Google search for PopSQL. And this page should pop up It's PopSQL.io. So, basically what this is, is it's a program that in order to do different things. And PopSQL actually has some really cool features. It's kind of like Google Docs In our case though, we're just going to use it So, over here there should be a button So, I'm just going to click that. And then it's going to go ahead Once that's downloaded, then I'm just going to See, over here all we have to do is just drag and then it's going to be on our computer. So, now what we want to do So, I'm just going to go over here to applications. And we'll scroll down to PopSQL. And we're going to open this program up. So, in order to use PopSQL So, you can just sign in with a Google account I'm going to go ahead and sign in. So, you can see it logged me in. It says, "Welcome, Mike!" So, now that we're logged in, what it's going to ask us So, basically what this application is going to do is it's going to connect to that So, what we can do over here So, I'm just going to call this Draft. And it's asking us for the type. So, over here if you scroll down So, we'll just click MySQL. Now, it's asking us for a host name. And the host name is basically the address So, in our case it's just at localhost. Just like that. So, just type in localhost. Leave the port number the same. 3306 is going to be the default port number. And then the database we're going to connect to So, if you remember, like a minute ago That's what you want to put in here. So, if you named it something other than giraffe, And then we need a username. So, the username is going to be root. And then the password which they're asking for down So, in my case, it was just password like that. And then I'm just going to click Connect. And this is going to go ahead So, at this point we installed MySQL. We set up our first database. And we connected everything with PopSQL. And so, now we are able to start using PopSQL. We can start learning all sorts of SQL stuff. And it's going to be awesome. But keep in mind, if you don't want to use PopSQL, You can do everything from inside the terminal here. [Creating Tables] In this tutorial I'm going to We're going to talk about creating tables. We're also going to talk about So, in the last tutorial we set everything up. So, we got MySQL set up. We also downloaded this program PopSQL which is basically just a text editor that we can use So, what I want to do in this tutorial So, we created a database. In our case, we created a database And now what I want to do is start populating In other words, I want to start defining Now whenever you're working with your first step is always to create tables. So, before we can start inserting any information, we actually have to create the physical tables And we can do that by defining the tables layout. And so, what we want to do is we basically want to And then inside of that command or all the different columns And so, the first thing I want to show you guys that we can store inside of our database. So, over here I actually just have a little list. And I'm just going to paste it in here. So, these are all of the basic data types Now, these aren't all of the datatypes. There are actually tons of datatypes. And depending on the relational database a lot of them have different datatypes I would say that these six datatypes Like these are probably the most But just keep in mind that there are a few others. Now, we're using the MySQL database. And all of these datatypes are going to be able to be And all of these are going to be used, for the most But like I said, specific database management systems depending on how they want to implement things. So, let's go through these different datatypes So, INT. This is actually going to refer to an integer. So, anytime you see INT just like that, I-N-T, So, this is any sort of whole number. But it can't have decimal places after it. If you want to be able to store decimals, And the decimal datatype And you'll see, we have And I have M and N in here. Now these are actually both going to So, M is going to be the total number of digits And N is going to be the number of digits So, when we're working with databases you have to And specifically, the amount of digits So, what we could do is I could say like 10 here And what this means is we want to store and 4 of those digits coming after the decimal place. So, you can specify, you know, depending on how you can modify those numbers. Down here we have VARCHAR. And this actually stands for Variable Char This is basically a way that we can store So, VARCHAR, we have these parenthesis after here. And you can put a number in here. So, if I put a 1 in here, then this is going to If I put (100) in here, this is going to So, that means that the maximum amount that you can store inside of a VARCHAR(100) Down here we have BLOB And this is basically just a structure So, if you have - a lot of people will use these Like you can store those inside of a BLOB. And they'll be able to be stored in the database. We also have DATE. So, DATE will be like a specific date and time. And you can see we format a date like YYYY-MM-DD. So, this would be the year, the 2-digit month, You can also have a TIMESTAMP, but it's generally used for recording So, you can record like when an item got inserted So, over here it's just YYYY-MM-DD So, those are all, like I said, the main datatypes But these aren't all the datatypes. So, depending on the database management system you want to check to see But like I said, for the most part, So, now I want to talk to you guys So, what we can actually do is we can create tables and we're going to have use those datatypes to tell what types of data we want to store So, in order to create a table, Now, I'm just going to type out CREATE TABLE. And these are two SQL reserve words. CREATE and TABLE. And you'll notice that I typed them Now, this is actually a pretty common convention A lot of people will write these reserve words But you don't have to. If I wanted, I could write create table just like that. And you'll see it's getting highlighted the same way. The reason that people write these in all caps is because then it's easy to distinguish the SQL So, I would say for the most part, just stick with So, I'm going to say CREATE TABLE. And then I want to type in the name of the table So, what we're going to do is we're going to So, I actually have a database table set up over here. You'll see it's a student table. And it's storing just a list of students So, there's three things that we're storing The student's ID, the student's name, So, we're storing all of this information So, what I can do now is I can actually create So, I can say CREATE TABLE. We'll call it student. And you'll notice that I made this lowercase. So, this isn't an SQL reserve word, And then what I can do is I can just make an open Now, any command that you write in SQL And if you're just starting out, but you want to make sure that you always So, I'm just going to click Enter. And I'm going to down here And what I'm going to is I'm going to start defining or the different attributes on this table. So, what we can do is we can define a column name So, I can come over here So, in my case, the first attribute for this table And you'll also notice that student ID is a primary key. So, on this table, student ID is the primary key. Meaning it's the column on the table So, I'm just going to call this student_id. And now I need to give this a datatype. So, I'm going to give this a datatype of INT because all They're just integer numbers. Now because this is going to be the primary key So, over here I can just say PRIMARY KEY, And what that's going to do is it's going to tell MySQL The next thing we want to store is the student's name. So, I'm just going to say name. And the name is actually going to be a string. So, this could be like Jack or Tommy or Kara, right? It's a name that we're storing about this table. So, over here I'm going to make this a VARCHAR. And then I'm going to make an open Now, remember, with the VARCHAR datatype how many characters we want this to be able to store. So, with someone's name, what you want to do is you basically just want to think like how many to storing someone's name? Because here's the thing, if I allocated like 1000 will in reality, normal people don't have a name I mean maybe your name would be 20 characters but 1000 is just totally out of the bounds of reality. And you have to think if you're storing potentially, you know, allocating 1000 characters is going to take up a lot of extra space So, I think what we should do is maybe say like 20. So, let's say that the maximum length of someone's And really, you know, depending on the domain that's going to be different. But in my case, let's just say it's 20. And then finally we wanted to store So, I can say over here, major. And this is also going to be a VARCHAR. So, why don't we also allocate 20 characters And that should be enough. So, you'll notice that I'm defining each of the And then I'm putting a comma. And then I'm defining the next column. And then I'm putting a comma. And then the final column. So, this right here, this CREATE TABLE statement is basically going to create We have the primary key, which is an INT. And we have a name and a major which are strings. So, that's going to go ahead and do that for us. Now, from inside PopSQL, what's really cool Click on this SQL statement. And I can come over here and click Run. And what this will do is it'll automatically So, I'm going to click Run. And you'll see over here we get a success message So, that actually was able to create So, that is basically how we could create a table. And now we have this table stored in our database. I want to show you guys another thing we can do. So, over here I'm defining the primary key. So, student_id was the primary key, right? It's the one column that's going to uniquely And if you want, you can put primary key over here Or what you can do is you can get rid of this So, instead of defining the primary key up here I can come down here and I could change it. So, I could say now PRIMARY KEY, And in here, I could put the name of the column So, in my case, I'll just say student_id. So, now what this is system is that the primary key So, this is a equivalent to what I was doing up here. It's just another way that you can do it. And so, now we already have our table created, All right, so now that we have let's go ahead and make sure they created correctly. So, what I'm going to do and I'm going to type out another MySQL command. So, I'm just going to type out DESCRIBE. And then I'm going to type in the name of the table. So, in our case it's going to be student. And you'll notice with PopSQL, if I click over here on And if I click down here on this query, So, what you can do with PopSQL And you can run that query or you can click So, I'm going to click on DESCRIBE student. And then I'm going click Run. So, you'll see that it's actually describing So, there's a list of all these different fields. We have student_id, name, and major. It's telling us the datatypes that we're storing. So, like varchar(20). And then it's telling us a bunch of other information which we're going to get into later. So, what this is, it basically described So, now what I want to show you guys So, now that we've created a table if you wanted, you could delete the table. So, what I could do is I can come down here and I can just type the name of the table. So, in our case, it's the student table, and a semicolon. And now I'm going to click on here and I'll click run. And what this is going to do So, now if I came up here in other words, I'm saying And I click run, you'll see that it says Table 'giraffe.student' doesn't exist So, what we can do, is we can actually create again. So, I'm going to click on this CREATE TABLE query And that will go ahead and create it. So, now if we click DESCRIBE student, you'll see So, you can drop the table. You can also modify the table. So, let's say that after the table was created, What I could do is I could add another column. So, I could say ALTER TABLE. And then say student, And then I could say ADD. So, what this is going to do So, why don't we add a column for GPA. So we could store a student's GPA So, I'm just going to click a semicolon. And this is going to go ahead Now, with decimal, remember I showed you So, what we're going to do is generally a GPA Or 4. something something. So, we're going to have this be three total digits with So, now I can go ahead and run this command So, if we were to describe the student table again, if I just click on this and click Run, now you'll see And it's a decimal (3,2). So, that is how we can drop a table If you wanted, you could also drop a specific column. So, I could say ALTER TABLE student. And over here, I can just say DROP COLUMN So, what this will do is it'll drop that GPA column So, let's go ahead and run. We get this success message. Now, if I describe the table and I clicked run, So, I actually dropped that field. So, you can create tables. We can add columns onto tables. We can remove columns from tables. And then we can just remove the table altogether. So, hopefully that show you guys some of the basics Now, obviously whenever the first thing that you want to do In other words, you want to create and then you can start inserting data So, in the next tutorial I'm going to talk to you guys so we'll actually insert some student information [Inserting Data] In this tutorial, I'm going to talk to you guys So, in the last tutorial we set up our first table And you can see it up here. And then down here we described the student table. So, it has student_id, name, major, etc. So, now that we have our table set up, we want to We want to start storing some different data. So, I'm going to show you guys how to do that. I'm going to leave this because we're actually going to But down here, I'm going to So, in order to insert a piece of information into And now I want to type out the name of the table. So, in our case, we have this student table. And then I just want to type out VALUES. So, basically, we're saying insert And then over here I'm going to make an open So, now this is actually a full statement. So, remember, we need to Inside of these parenthesis I can actually So, the way that the table is set up, we have the And that's the order that we want to So, I need to put this student_id first, So, over here I'm just going to type in the student ID. So, we're going to be actually entering in the same So, this is kind of like our little template. So, we have the first student, Jack, And you can see we just keep going from there. So, I'm going to insert, you know, So, the first thing we want to do is put the student ID, And you'll notice that with an integer And then over here we're going So, basically this is going to be a string. Anytime we're typing out strings in SQL, And then in here we can type out the string. So, the student's name is going to be Jack. And then another comma So, we have Jack with the student ID of 1. And his major is Biology. So, insert into student values 1, Jack, Biology, this is going to go ahead So, now when I click Run - and you'll notice all I have to do is It says down here Success. Rows affected 1. So, we affected one row in the student table. So, now what we can do is we can actually see So, what I'm going to do is actually below here, And this is actually a very simple SQL command. What this is going to do is it's going to And we're actually going to spend But for now, just know And this is going to go ahead and give us So, I'm just going to click on this query here And you'll see down here we get this table. So, it says student_id 1. Name, Jack. Major, Biology. So, so far in the student table, we have 1 student So, why don't we actually insert another student. So, I'm going to keep this same line of code except And this student's name is going to be Kate. And she is going to be a sociology major. So, we have Kate who's ID is 2, sociology. So, if I click on this command here and I click Run, this is going to go ahead and insert Kate So, now I'm going to click on Select All And we'll click Run. And now you can see we're getting So, we have Jack and then we also have Kate. So, we added in - so far, So, what you can do is you can basically in order to keep inserting students As long as you have their ID and you have their name But I want to show you guys another thing we can do. So, let's say there's a situation where Maybe they just had no major or we didn't know so we couldn't insert it into the database. Well, in a situation like that we could So, I could say INSERT INTO student I can make an open and closed parenthesis. And I can type out the names of the columns or that I want to insert. So, I can say like student_id and then name. So, you'll notice that I'm not including major in here. And what that means is that over here we can include the student ID and the name. But we don't have to include the major. So, like if I don't know what the major is, So, by saying student open and closed parenthesis I can then just put them over here So, now we can change these values. So, we'll change the primary key to three. And then let's see who the next student So, it looks like it's Claire. So, we'll have Claire. And then we can go ahead and run this query. And you'll see rows affected, 1. So, we added in another row. But if I was to select all this data - so I'm going to click Now you'll see that Claire's student ID is 3. Her name is Claire, but here major is NULL. So, we didn't actually enter in a major for Claire. And therefore, inside the major field, And that's actually pretty common. So, that's basically going to be what happens And so, what you can do is you can specify what by specifying them over here. And then here in the value section, So, that's two ways that you can insert something And it's important to notice So, if I was to try to insert this again, which means I'm not going to be able to because a record with that primary key So, if I was to click Run again, It says Duplicate Entry '3' for key 'PRIMARY'. Basically, what that means is we have a duplicate key But if I was to change this to 4. So, instead of having an ID of 3, it's 4. Now, this is going to work. And we'll be able to see we have but they have different student ID's So, that is the basics of inserting stuff into a table. And really, those two techniques are really useful. So, that's kind of the basics of inserting into a table. Now, there's a lot of more things And in the next tutorial, I'm going to show in order to make inserting into the tables a lot easier. [C] In this tutorial I'm going to talk to you guys some So, in the last tutorial we kind of looked at So, we have our table here. It's the student table. And down here we kind of looked at So, we can insert into the name of the table, And we can pass in the values. We can also say insert into the name of the table. And then over here we could specify And then here in the values So, we've kind of been using this photo over here of And I actually just went ahead for inserting all of these different students So, you'll see we're inserting Jack Kate, sociology. Claire, who doesn't have a major. There's another one name Jack But you'll notice that it has a And then there's Mike who's computer science. So, these instructions will actually insert And you'll see over here So, with PopSQL, if you just click on the SQL statement and then you click Run, it'll go ahead So, you'll see down here we get all that information. So, there database is set up. And that's sort of like the general use case, right? That's like we set up our database table But there's some other stuff we can do. Namely, we can actually set up our database table in order to make it easier for us to insert elements or that we can insert into the database table. So, what I'm actually going to do So, I'm just going to say DROP TABLE student. And we're actually just going to start over. So, again, with PopSQL all you have to do Like I can click on DROP TABLE right here. And then when I click Run, it'll go ahead and drop it. So, now if I tried to SELECT ALL from the student table, So, let's go ahead and I'm going to show you guys in order to make it a little bit easier So, the first thing I'm going to show you guys And NOT NULL will basically allow us to define So, let's say that when we're storing our students, we don't want the student And NULL is basically just a value So, if something is NULL it means So, let's say that we always want the student Well, after I same name VARCHAR(20) And I'm just putting that right after here. What that means is this column can't be null. So, if you insert a row into the table, I could also do something else So, UNIQUE is another keyword which we can use. And basically, what this is going to mean is that the So, if somebody else or another row in the table then that will get rejected. So, NOT NULL and UNIQUE So, now what we can do So, I'm just going to click on this query. And I'm going to click Run. And you'll see that we get a success message. So, we were able to create the table. And so, now why don't we start populating So, I'll come over here and I'll click insert So, we're going to insert Jack. And then we'll select the table and you'll see Let's click on this second one. Kate, sociology. So, we'll run this. And again, we'll just select all from the table. You'll see both of those got inserted. So, now we get down here into this next one. So, insert into student. So, for Claire, we're inserting in But let's actually switch this up. So, why don't we get rid of this and instead So, we're going to say that Claire's a chemistry major. But we're actually going to get rid of this name. So, instead of Claire, And you'll notice up here, So, when I created this table, So, if I come down here and I try to with a name that's set to NULL and click Run, And it says, "You have an error in your SQL." And basically, what that means because we specified that it can't be NULL up here. So, you're actually not going to be able to do that. Now, we also, over here on this major field, So, if I come down here so you'll see, we're trying to insert and they're a biology major. But we already defined one person It was this first one. So, if I try to enter in another biology major, So, I'm going to click run. And you'll see down here it says So, it yelled at us because we entered So, NOT NULL and UNIQUE are really to kind of control the data And actually, funny enough, a primary key is actually just an attribute or a column So, a primary key is basically just something So, there's a couple other ones. We're actually going to drop this table again. So, I'm just going to click DROP TABLE And over here, I'm going to create the table again, So, these are actually what we would call constraints. So, I would say like a constraint would be But there's a couple other constraints So, let's say that we wanted to set a default value. So, let's say that if somebody didn't enter in a major, Well, I can actually say that something has a default. So, I can come down here And then inside of single quotes I can just type in So, in our case, if somebody doesn't provide us with a So, basically if the major field is left blank, So, then down here, why don't we go ahead that doesn't have a major. So, here we can just say INSERT INTO student and we'll go ahead and specify And also the name. But you'll notice that I'm not putting major in here. Which means that we don't have to give this a major. So, now we'll get rid of Jack's major. And when I go ahead and run this, And if I was to select all the entries from the student, His name is Jack and his major is undecided. So, because I didn't insert a major, it's going ahead and populating that major because that was the default value So, that's another really useful constraint All right, so there's one more of these And it's actually really useful for working So, you'll notice that the primary keys I like manually went in and incremented But what you can actually do So, I can come over here right here after students, We defined that down here. I can come ever here and say AUTO_INCREMENT. And AUTO_INCREMENT is basically going to specify is going to automatically incremented So, I could actually come down here and instead of So, I can just insert the name and the major. And then I can add that information in here. So, Jack is going to go ahead and study biology. And actually, let me get rid of these. So, we can kind of see how this works. So, I can copy this for another one. And we'll make this Kate and she's studying sociology. So, notice that I'm not actually All I'm inserting is the name and the major. But because we said that this table In other words because we said that the student_id we don't actually have to do that. So, I can come down here and I can run this. And actually, whoops. I have to create the table again. My bad. So, we're going to create the table. And I can insert in this first entry, Jack, And I'll run this. And you'll see it says 1 row affected. And then I'm also going to insert this next one so I'm just going to click Run. And so, now I've inserted And if I select all from the student table, you'll see But Jack has an ID of 1 and Kate as an ID of 2 even So, I didn't actually add in the ID's and yet they still showed up down here in the table So, that's a great way for you to just like automatically or really any other row in the table So, those are just a couple little things We would call those constraints. So, you can add constraints onto the specific columns like what types of information So, that's - there's a little bit more for you guys to insert information into the database. [Update &amp; Delete] In this tutorial I'm going to talk to you guys about So, in the last few tutorials we've looked at creating But now once we have that information I'm going to show you guys how to update it So, we have here our student database. And this is - or the student table and it's the table And so, down here you can see And they have names, majors, and ID's. So, right now, these are all the students So, these are the database entries The first thing I'll show you guys show to do And so, you know, let's say that we wanted, So, let's say that we wanted to change the name of So, let's say I am the database And we decided that instead of calling the major So, the official name for the major It's just going to be bio. Well, we could actually make that change So, I can use the special keyword called UPDATE. And I can just type out the name of the table So, in our case, it's student. And over here I can say UPDATE student But here's the thing. I don't want to set the major equal to bio I only want to set the major equal to bio for the So, over here we can specify that. I can say WHERE. And here I can put a condition. So, I can say major is equal to 'Biology'. And I'm going to be semicolon. So, this whole thing now is And so, what I'm doing is and I'm setting the major column equal to 'Bio' So, now if I was to go ahead and run this, So, we updated to of the rows in this database. And if I was to select all of them you'll see down here now for the two students it's now saying that they're bio majors, right? So, it updated the database only in those places And that's what we can do here. So, this is just a very basic update statement, So, let's do another one. We can do the same for computer science. So, I could say UPDATE student. SET major equal to 'Comp sci' So, I'm basically abbreviating this major. So, let's go ahead and run this. And again, I'm just going to You'll see down here, Mike, who used to be a So, I was able to update that. Another thing you can do So, I can say like UPDATE student. SET major equal to 'Comp Sci', WHERE. And then over here I can do a different condition. So, I can say like student_id is equal to 4. So, now I'm updating the student's major So, this is like a different type of query. So, down here I'm running that. And then I'm going to SELECT ALL. And so, now you can see that Jack is now a comp sci major So, you can get kind of creative, you know, and then checking different conditions. You can also use more complex conditions down here. So, down here we have bio majors Well, let's say that any student is now going to be a biochemistry major. So, we're combining those two majors together. Well, I could update that here. So, I could say UPDATE student. SET major equal to 'Biochemistry'. WHERE major is equal to 'Bio'. And over here we could say OR. And then we could also say major And this is going to give us some OR logic. So, now if the student has a major of bio we're going to set it equal to biochemistry. So, we're basically combining those two majors together. So, now I'll click Run And I'll SELECT ALL from students. And you can see now Jack and Claire - Claire used to be a chem major. Are both now biochemistry majors. So, you can use OR in order to You can also set multiple things. So, over here I'm actually going to And I can say SET name equal to 'Tom'. And major equal to 'undecided'. WHERE student_id is equal to 1. So, whoever has the student equal to 1 and their major set to undecided. So, let's go ahead and run this. And you'll see it says 1 row affected. So, let's SELECT ALL from the student's table. And you'll see down here, the student with the ID of 1 So, you can change multiple columns All right, so there's one more thing we can do, So, this is actually optional. So, if I got rid of WHERE, I can then set something. So, why don't we set major equal to undecided. So, if I get rid of that WHERE statement, this is just So, now when we run this, And now when we SELECT ALL from the students So, you can either select specific rows or you can just do it to all of them So, now I'm going to show you guys And it's actually pretty similar So, instead of updating a specific row I can actually delete a specific row So, it's like I said, pretty similar to UPDATE. I'm just going to type in DELETE FROM So in our case it's going to be student. And you can actually just end this off right here. I can put a semicolon here. And this will go ahead and delete But why don't we try to get more specific? So, I'm going to try to delete a specific row. I can say DELETE FROM student. WHERE - and now I can specify a condition. So, I can say like WHERE student_id is equal to 5. So, what this will do is it'll delete any students or any So, down here we just have one like that. So, Mike, who is an undecided major has an ID of 5. So, if I was to run this. Now you'll see it says rows affected, 1. And we'll select all from students So, we actually deleted a specific row. And just like update, So, I could say like WHERE name is equal to Tom. And you can also do an AND. So, instead doing OR, we're doing an AND here. And I can say like major is equal to 'undecided'. So, this will delete any students from the table and who are an undecided major. So, now when I run this query, you'll see - that Tom got deleted from the table. So, he's no longer there. So, just like we used WHERE we can use WHERE with the DELETE statements But if you wanted, So, now I'm just going to run this command. And if I query the table, So, we deleted everything. So, updating and deleting is extremely useful. And you can use that WHERE statement in order to and what specific row you want to delete. [Basic Queries] In this tutorial I'm going to talk to you guys about More specifically we're going to and we're going to look at the different ways to give us some information back. So, one of the core tenets of interacting and using SQL is writing these little queries. And a query is essentially just a block of SQL that's for a particular piece of information. And so, one of the things that we need to be aware of huge amounts of information in a database, you want to be able to grab So, let's say that I'm trying to, you know, grab a bunch Well, imagine that we had like a million students I might not want to just grab every single student. I might want to just grab students or students who have a certain major And we can use SQL queries in order to So, instead of the relational database management instead it can just give us back very specific entries So, we're going to talk a little bit Now, this is actually a huge topic and it's the topic that we're going to be talking about So, this is going to kind of give you guys an So, over here, you'll see that I have this query here. And it's just SELECT * FROM student. And actually, if you want, A lot of people will do that. So, this SELECT keyword is a very special word. And this SELECT keyword is basically going to tell that we want to get some information from it. So, I can say SELECT. And then right next to it I can specify And so far in this course we've And basically, the asterisk means But if we wanted, we could specify a specific column. So, we can select specific columns of information that we want to get back and then we can say FROM whichever table. So, SELECT * FROM table could also be read So, over here you'll see when I run this, So, we're getting all of the students in the table. We're getting their student ID's If I wanted, I could change the columns up here. So, I could say like name. And now what this will do is So, if I was to run this query, So, we have the name So, these are all of the names I could also include something else. So, I could say name, major FROM student. And then down here when I run this query, you'll see we're getting the But we're not getting the student's ID. So, we're able to specify You can also pre-pen these So, I could say like student.name. And student.major. And sometimes people will do this it's clear which table the name is coming from. And as we write more and more complex queries, So, for the most part, I'm probably going to be writing But you could do something like this. We can also order the information that we get back. So, here I'm getting the student's name And if I wanted, I could order that information. So, I could use another command which is ORDER BY. And then over here I can just put the name So, I can say ORDER BY name. And now when I run this, but they're in alphabetical order based off the name. So, we get Claire, Jack, Jack, Kate, and Mike. So, these are now ordered in alphabetical order. And by default, these are going to be But if you wanted, you could put them So, you could say DESC and this stands for descending. So, now if I run this, you'll see that all the names So, Claire is all the way at the bottom. And then we go all the way back up to Mike. So, you can order by anything. So, I can even order by like student_id. So, I'm not returning the student_id. In other words, I'm not getting the student ID up here, And so, now these are going to be in descending So, actually why don't we just get all of these now. So, I'll just say SELECT ALL from student. And you'll see now it's ordered in descending order It's a little bit clearer, 5, 4, 3, 2, 1. But I can also get rid of it or I can just say ASC And now it will order them in ascending order. So, you can order by a bunch of different stuff. You can also order by different sub columns. So, I could say like ORDER BY - And then after that we'll do student_id. So, SELECT ALL from student. ORDER BY major. And then student_id. So, it's going to order them by major first. And then if there's any of them it'll order them by student ID further. So, I'm going to run this. And you'll see down here, So, we're getting biology, biology, chemistry, In this case, these two students They also have the same name too. But their student ID's are different. So, the student ID's are now order But I said descending right here. And I run this query. Now you'll notice that the biology major So, it ordered it first by major and then within that, it ordered them by student ID. And you can specify as many of those as you want. You can also limit the amount So, I can say like SELECT ALL from student. And then I can say LIMIT. And here I can put like 2. And now what this will do, So, now instead of getting all the students back, So, if you only want like a specify number of rows And you can also combine these. So, I could also like order them. So, I could say ORDER BY student_id, descending. So, now this is going to select all the students. Order them by student ID So, now when I run this And it's ordering them in So, that can be pretty useful. And that's just another way The final thing that we can do that I'm going to show So, I can say WHERE. So, if you remember in a previous tutorial And we wanted to only update or delete specific And we used this WHERE condition. You can do the same thing for SELECT. So, I could say like SELECT ALL FROM students And so, now this is only going to give us And you can see down here we get back the You can do the same thing for chemistry. So, let's see if we have any chemistry majors. We do. Looks like Claire is a chemistry major. And if you wanted, we can only return So, we can say SELECT, you know, WHERE major is 'Chemistry'. And now we're only getting the name And you can make these more complex. So, I could say like WHERE major is equal to And so, now this will give us all of the chemistry so we get the two Jacks and Claire. And we can also do different things. So, like I said, like WHERE major is equal to And so, now we'll get back any of those students. So, we get back Kate and Claire So, you can play around to get specific entries from the individual table. So, I want to talk to you guys about how we can make So, obviously over here we're using equals, So, this is actually comment in SQL. So, if you put two dashes, then anything But here I have all the different comparison operators. So, we have equals. We also have less than, greater than, less than or - which is these less than/greater than signs. And then AND and OR. So, you guys have seen some of these, So, I can say like major not equal to chemistry. So, this is going to select all the students So, if I run this, now we get all the students except Or we can do the same thing for numbers. So, I can say like student_id. So SELECT ALL the students where student_id And we need to get rid of this. And so, now we'll get all the students Let me get all of these. So, we're only getting students 1 and 2. We're not getting anything - And now this will also give us that student ID And you can combine these. So, like where student_id is less than 3 So, if we run this now, you'll see we get Kate but we don't get Jack who is student ID number 1 So, you can these all these comparison operators And by using them inside of this you can seriously filter the results down to All right, so I want to show you guys one more cool So, instead of just like putting a little condition And then we could say like So, like name. And then I can say IN. And then over here I can put some parenthesis So, if the name is Claire, Kate, or Mike. So, basically what this is saying is SELECT ALL like this group of values, right? So, if the name is Claire, Kate, or Mike, So, now I can click Run and you'll see down here, So, this is a really easy way to compare like So, like we could check to see if the name is in there. We could also do the same thing for like major. So, like WHERE major IN 'Biology' or 'Chemistry'. And now if we run this, you'll see that we get Jack So, we can use IN. And you can also combine all these things together. So, you could say like WHERE major IN 'Biology' and And now I'll click Run and you'll see So, you can combine the SELECTs and all that other stuff to make these But that's sort of the basics of doing these queries. I mean obviously these are very simple queries. And as the database schemas get more complex, the queries that you need to select specific pieces And we're just using one table here, right? We're just getting information from the student table. But if we had multiple different tables, you know, maybe certain tables like getting information can get pretty complex. And as we go forward in the course, we're actually And using that database schema, we're going to learn But for now, that kind of shows you guys the basics. And so, what you want to do is I mean we have our student table. It's very simple. It has three columns. And you know, just play around with getting using these WHEREs and INs in order to select the information that you want. [Company Database Into] In this tutorial I'm going to introduce you guys that we're going to be using And so, up to this point in the course We learned how to create tables, We learned about the different datatypes. We also learned how to update and delete data. And we learned how to query So, we learned a lot of the core concepts in SQL. And up to this point, if you guys then you have a pretty good of the different things Now, obviously we didn't cover everything, And we've been using this student table One primary key. And, you know, we learned how to create this table. We learned how to insert all this information. We learned how to update and delete. And then also just, you know, Here's a problem though, I mean it's one database table But in reality database schemas are going to be The chances sort of your database schema And so, you know, to really master SQL And there are certain features that we haven't We're going to need There's certain things that I just can't show you guys because it's just not complex enough, right? So, what I actually did is I went ahead So, I actually designed a database So, I'm going to go ahead and pull that up. And right here we have our company database. And you can find this .pdf I'll put a link to it. But basically this is the database schema that we're So, this is a more complex database schema. But because it's complex, it's going to give us some In other words, the more complex the more complex the queries we're going to be able Because there's only so many types of queries But this is going to be a better example for us to learn So, I'm going to go ahead and walk you guys through That way you guys understand it. Because if you don't - then you're not going to be able to follow along So, I'm just going to give you guys And that way we have it going forward. So, this database schema maps out So, this would be like the information So, up here we have our first table And so, this is just going to store So, we're storing like the employee ID, So, you'll see here, this is actually a date. Sex which is going to be male or female. Salary, which will be like how much they make. And then over here we have two foreign keys. So, the primary key of this table is the employee ID The foreign keys are going to be And basically, a foreign key is just - it's going to store So, we have two foreign keys. The first here is super_id. That stands for supervisor ID. So, an employee in our company And a supervisor is actually going So, super_id is going to point to We also have branch_id. So, different employees in the company are going to And you'll see down here we have this branch table. And it just has a branch ID, a name, and then also So, an employee can work at a branch, right? And that's kind of what we're storing over here. So, let's take a look at this. We would say that the employee Michael Scott, That means Michael Scott's supervisor So, Michael Scott's supervisor Because David Wallace has an employee ID of 100. Kelly Kapoor has a supervisor ID of 102. That means Kelly Kapoor's supervisor So, it's going to be Michael Scott, right? So, hopefully that makes sense, right? An employee can have a supervisor. And super_id is a foreign key which points And then we also have branch_id over here again. And this will point to the branch. So, branch_id. Angela Martin has a branch ID of 2. That means Angela Martin works Andy Bernard has a branch ID of 3. That means Andy Bernard works So, hopefully that kind of makes sense. And then down here, like I said, And the Branch table just has an ID, a name. And also has a manager ID. So, on the Branch table we're actually storing So, this is actually a foreign key. So, manager ID is going to point to So, we would say that the manager So, the manager of the Scranton branch The manager of the Stamford branch has an ID of 106. So, the manager of the Stamford branch Hopefully that makes sense. And then we're storing the date So, now we'll check out the client table. So, the client table has a client ID, client name, So, we would say that the client Dunmore High Or the client Times Newspaper works So, Dunmore Highschool which is the Scranton branch over here, right? Hopefully that makes sense. The Times Newspaper is a client of branch number 3 So, that's kind of how those are connected. And then over here we have another one So, this has a compound primary key, And the first part of it is the branch_id. So, a Branch Supplier is obviously going to And it's also going to store a supplier name. So, it's important to notice because the branch_id doesn't And the supplier_name doesn't Only together can they uniquely identify each row. And then the last table down here So, this basically defines the relationship So, we're going to go ahead and assume that an employee can work with a client So, employee 105 sold $55,000 Employee number 108 sold $22,500 So, this is kind of mapping the relationships so telling us how much And you'll see this is also a composite key. So, this is the database schema that we're going to be And like I said, in order to kind of show you guys we're going to need a database schema that is, If this isn't super clear to you, what you might pdf that I'm going to include in the description below. And really, what you want to do So, you know, like really make sure that you understand how this how everything relates to each other. And then going forward in the course, So, in the next tutorial I'm going to So, I'm going to actually give you all the code And then from there we'll go ahead and we'll start and some more advanced stuff that we can do. [Creating Company Database] In this tutorial I'm going to show you guys how we can So, in the last tutorial I showed you guys It's this company database. This is basically just an example database And it's a database that we're going to be using in order to learn a little bit more advanced SQL So, this is a company database. And we have a bunch of tables like this employee In the last video I kind of talked about We looked at some of the different relationships So, in this video I'm going to show you guys So, how can we take this database So, not only are we going and we're going to define all of these relationships, We're also going to populate all of that information. So, I'm going to populate these database tables That way we can use that information going forward So, this tutorial is going to be pretty cool because I'm going to show you guys how to build It's a little bit more complex than the student table And before we get started, I just want to say all of is going to be available in the description below. So, there'll be a link that you can click on So, you know, you don't have to type out And in fact, I'm just going to be pasting in a bunch of So, the first thing we want to do is So, I'm just going to go ahead And we'll go ahead and drop that table. That way we don't have to worry about it. And so, once we've gone ahead now we can start creating all of these tables So, I'm just basically going to paste in the code I already have it all written out. And I'll kind of walk you guys through what it is So, here we have CREATE TABLE employee. So, we're going to create this Employee table. We have our employee ID which is an integer. And this is going to be the primary key of the table. And then we also have So, birthday is actually a DATE We haven't used the DATE datatype yet, DATE will allow us to store a date just like this, We're also storing their sex. So, like male or female. And that's just a VARCHAR(1). We're storing the salary. And then we're also storing these supervisor ID And if you guys remember is a foreign key which points to another employee. And the branch ID is also a foreign key Now, here's the thing. We can't actually make these foreign keys just yet because the employee table And the branch table doesn't technically exist yet And so, I can't define these guys We're going to do that later So, I'm going to go ahead and run this So, now we're going to go ahead So, I have the code for the branch table right here. So, we're going to CREATE TABLE branch. And this is just this guy down here. So, it has a branch_id which is the PRIMARY KEY. Branch name. And the manager ID. So, remember, the manager ID is down here in green. The manager ID is also a foreign key. So, the manager ID, we're actually going to be defining And then we have the manager start date, So, down here, I'm defining a foreign key. So, in order to create a foreign key and then inside of parenthesis put the name In our case, it's mgr_id. And then I can say that it references employee. And then inside parenthesis just the name which is going to be emp_id. And then finally, I'm going to do one more thing I'm going to say ON DELETE SET NULL. And we're going to talk more about what But for now, just know that whenever we're going to put Or we can also put something called Which again, I'm going to But just put that in there and that'll make it So, now I'm going to go ahead and run this So, looks like that went well. All right, so next thing we need to do is we need to set the super_id and branch_id So, remember, down here in the Branch table But we weren't able to do that with the supervisor ID because the Branch table and the Employee table So, I'm going to show you guys how we can do that. So, down here I have two little blocks of SQL code. The first one is altering the table employee. And I'm just saying ADD FOREIGN KEY. And then inside of parenthesis So, that's going to be the foreign key. REFERENCES branch, and then branch_id. And ON DELETE we're going to SET NULL. So, what this is going to do is it's going to add So, I'm going to run this. And now this is going to be a foreign key. And then down here we can do the same thing, So, you see supervisor_id right there. I'm going to go ahead and run this. And this will add the supervisor ID as a foreign key So, we needed to do that because the Branch table and the Employee table so we couldn't add them All right, so now we're going to add the Client table. So, you'll see over here, CREATE TABLE client. And we're just storing the client_id as a primary key, And then we're going to make So, over here on the Client table It points over to branch. So, we're going to define that relationship here. I'm just saying FOREIGN KEY (branch_id) And then once again we're just going to say So, let's go ahead and create the Client table. I'm just going to run this. And that'll create the Client table. So, next we have the Works With table. So, the Works With table is actually pretty unique So, the primary key has the employee ID And actually, what's unique is that each So, employee ID is a foreign key. And the client ID is a foreign key. And so, over here, we can create this table. I have employee ID, client_id, total_sales. The primary key is employee ID and client ID. And then the foreign keys are And you'll notice over here, instead of saying ON And again, I'm going to talk more about ON DELETE But for now, just know that you need to have this here So, I'm going to go ahead and run this and we'll be able to insert or create And then finally, we're going to create our last table And this is actually kind of similar to So, down here we have the Branch Supplier table. It also has a composite key. So, its key is made up of multiple columns. And the branch_id column is a foreign key, So, this one is actually pretty interesting as well. So, we have branch_id, supplier_name, supply_type. And then the PRIMARY KEY And the foreign key is just branch_id. And again, with this one, on the foreign key, I'm just saying ON DELETE CASCADE. So, that's going to be what So, I'm to go ahead and run this. And you'll see over here So, now we have all of these tables created, right? We created all the tables for our database schema. And so, what we're going to do now is we're going to Now, when we're inserting information because we have all of these we're actually going to have to do it a specific way. And so, I'm going to walk you guys through And it'll give you an idea of how you can do it. So, I'm actually going to make the text So, over here I'm going to show you guys how we could insert all of information So, inserting the employee Now, you'll notice over here that have foreign keys that point to each other. So, the employee table has an entry over here, branch_id, which points to the branch And each branch has a column here, manager ID, So, there's like this circular relationship. So, when we're inserting these elements, So, over here I'm just starting with, So, I'm inserting into the employee table So, I'm inserting in this David Wallace row over here. And you'll notice that I put all this stuff in here. But when I get to branch_id, which is this last element over here, So, David Wallace should belong But the problem is that the corporate branch So, I'm just going to set this equal to NULL And I'm going to go ahead So, I'm just going to run this. And then the what I'm going to do is I'm going to So, I'm inserting into the Branch table VALUES 1, So, now that I - since I already inserted I can set David Wallace's employee ID And so now I'm inserting in the corporate branch. So, I'm going to go ahead and do that. And then what I need to do now to say that he works for So, down here I'm saying UPDATE employee. SET branch_id equal to 1. WHERE employee ID is equal to 100. So, that will go ahead and update David Wallace. So, the last thing we're going to do now is just insert So you'll see Jan Levinson is actually So, I'm going to go ahead and run this. And so, now we have all of our employees I'm going to do the same thing So, I'll do the same thing for the Scranton branch. And here I have the code to do that. So, again, I'm inserting in the manager So, I'm doing that right now, And then I'm inserting the And then I'm updating Michael Scott And then finally, I'm adding in Angela, Kelly. And I'm also adding in Stanley. So, now I have all of the employees And again, we have to do it that way with the foreign keys between So, then finally we'll do the same thing I'm inserting the manager of the Stamford branch. And then I'm inserting the actually Stamford branch. And them I'm updating the manager of the Stamford And then I'm adding in these other employees. So, Andy Bernard and Jim Halpert. All right, so now that we've done all stuff we can kind of move onto doing the other ones. And hopefully, that shows you how or how you might have to insert information When we're just inserting into the student table, But when we have foreign keys linking it can get a little bit complicated. So, now though that is the most complex inserting So, now we can just insert normally. So, we can INSERT INTO branch_supplier. And I'm just going to go ahead and click through All right, so I've gone ahead So, we inserted everything Now, I'm going to insert everything And again, this information is just the information that's just written out into, you know, So, I'm going to go ahead And then finally, we'll insert So, again, this is just a bunch of numbers All right, so now we've gone ahead and populated So, why don't we check it out? I'm going to say like SELECT ALL from employee. So lets see all the different employees that we have, So, down here you'll see that we have We can do the same thing for like Works With. So, let's see if we got all that data. And you can see that we do. So, now our database is actually populated So, again, you can get all that code But hopefully this kind of shows you guys how, you or, you know, go about creating You can see it's not as straight forward But we can do different things to make it happen. [More Basic Queries] In this tutorial I'm going to show you guys which will allow us to query the company database that we've been setting up So, basically, I'm going to give us some little prompts So, first thing we're going to do So, our first task is to get And you'll see over here, this is essentially So, let's see if we can find all employees. I'm going to say SELECT and I'm just going to say *. So, SELECT * would mean SELECT ALL COLUMNS And this should actually do it. So, just by saying this, I'm going to run this So, down here in the results Cool. So, we were able to get all of the employees. Let's try another one. How about we'll try to find all clients. So, now instead of finding all employees, So, basically it's the same thing. But all I have to do is change employee to client. So, now we're grabbing information So, I'm going to run this and you'll see down here Cool. So, that's, you know, how we can Let's try another one. Find all employees ordered by salary. So, this one is a little bit different. Not only do we want to find all the employees, So, we'll say SELECT ALL from employee. And now we want to order. So, we can just say ORDER BY. And we want to specify what column So, we could say salary. So, now I'm going to run this. And you'll see down here, but they're ordered by how much they make. So, down here, this employee makes 250k a year. And it goes all the way down to 55k a year. Let's see if we can do this though. So, the richest employee, So, we can say DESC for descending. And now this will list them all out in descending order. So, the 250,000 guy starts up at the top. And then we go down to 55,000. All right. So, that's pretty cool. And that shows how we could execute that query. So, let's try another. It says Find all employees ordered by sex then name. So, what we want to do is order And then within those orderings, we want to order So, I can say SELECT ALL FROM employee. It's the same. ORDER BY - this time, we're going to do sex. So, why don't we do first name. And then we'll do last name. So, now when we run this, you'll see here So, we get female and then here's all the males. And then within that, So, we'll start with the first name. So, Angela is first, then Jan, Kelly. And then these are all the girls. And then down here we have the guys. So, Andy, David, Jim, Josh, etc. And then if there were any duplicates or there were, you know, then we would defer to the last name All right, let's try another query prompt. So, we'll ask for a different piece of information. So, it says Find the first 5 employees in the table. So, this is a situation we could say FROM employee. SELECT ALL FROM employee. And here we can limit it to 5 employees. So, SELECT ALL FROM employee. That will give us the first five employees. So, you'll see down here, All right, let's do a few more So, let's try to find the first So, this time we're actually just trying So, up here we could say - instead of SELECT * Just like that. So, over here I'm going to click Run. And you'll see now instead of getting all that stuff, So, I'll actually show you guys So, here's the prompt. It says find the forename So, this is actually similar, but you'll see down here the columns were named first_name and last_name. But there's another keyword So, I can say SELECT first_name. And I can say AS forename. And we can say last_name AS surname. And what this is going to is it's going to but instead of naming it's going to name them forename and surname. So we're going to go ahead and run this. And you'll see we get exactly the same thing except So, that's kind of a useful thing you can do. And there'll be certain circumstances depending on what you need. All right, so there's one more I want to show you guys, and I'm actually going to introduce you So, the prompt is find out all the different genders. So, what we want to do is figure out that employees are stored So, what we can do is we can use So, I can say SELECT DISTINCT. And then the name of the column And what this is going to do is when I run this, So, we're getting male and female. So, those are all of the different sexes I could do the same thing for something else. So, we could do like SELECT DISTINCT branch_id. And this will tell me all the different branch ID's So, you'll see down here So, those are all of the distinct branch ID's And so, that's this DISTINCT keyword is pretty useful what are the different values that are stored All right, so that should kind of show you guys. There's a little bit more about And it kind of gave you guys a chance from the company database schema [Functions] In this tutorial I'm going to show you guys Now, an SQL function is basically just a special little, which will do something for us. So, these will like count things or they'll give us And they can be really useful for getting information So, I'm going to give you guys and then we'll figure out how we could solve them. So, over here, I have a prompt So, this is kind of a, you know, We want to figure out how many employees So, what I could do is I could say SELECT. And I can use a special SQL function called COUNT. So, I can just type COUNT like that. And then open and close parenthesis. And in here I want to put whatever I want to count. So, basically we could just put in like emp_id. And this will basically tell us how many And since the employee ID is the primary key, And then I can just say FROM employee. So, basically what I'm doing here is I'm asking SQL to select how many employees So, when I run this, you'll see down here we get 9 And you can see over here Another thing we could do would be to count So, this is going to be a different number. You'll see over here that 1 employee, So, we could check that out. We could say SELECT. And I can say super_id. And now when I run this, we should get 8 instead of 9 So, this will count how many entries Another thing we can do - which should be kind of interesting to see It says Find the number So, this is a little bit more specific, So, first thing we want to do is count So, I'm going to select COUNT But I want to limit the results that we get. So, I'm going to say WHERE. And here, I'm going to check these conditions. So, I'm going to say sex is equal to female. And birth_date is greater than. And over here, I'm actually going to put in a date. And so, when I put in I date, So, I can say, 1970. And then a hyphen. And then put in the month. So, we'll just say 01 and then 01. So, this would be like January 1st, 1970. So, this will tell us the number Or I guess we would put this as 1971. So, let's run this. And now you'll see that we get a count of 2. So, there are 2 female employees in And you can see over here, Angela Martin. And then one born in 1980. So, that actually makes sense. All right, lets try another one. Here's another prompt. It says Find the average of all employee's salaries. So, this is a little bit different. In this case, we want to find out So, instead of COUNT we can say AVG. And then inside of parenthesis So, I can say salary. And then over here we can say FROM employee. And what this will do is it'll tell us So, I'm going to go ahead and run this. And you'll see down here the average And so, if we wanted, we could filter this further. So, let's say I wanted to find the average So, I could say WHERE sex And now this will give us So, here it looks like it's a little higher, 101,333. That's probably because David Wallace All right, so that's kind of interesting. Let's try another one. So, how about this. Why don't we try to find the sum So, instead of finding the average, So, over here, instead of AVG I can say SUM. And that stands for SUM. And what this will do is it'll add So, this would basically tell us like how much the So, over here I'm going to click Run. And you'll see the company is spending So, that's how much the company I want to show you guys one more thing we can do And aggregation is basically and we can display the data So, I have a prompt up here that will So, the prompt is find out how many males So, this is actually an interesting point. Let's say we want to figure out Well, I can say over here SELECT COUNT. And instead of saying salary, I'm going to say sex. And so, let's say that we just did this, right? This is going to tell us how many employees there are So, we get 9. But if we wanted to also display how many males we're going to have to do a couple things. So, over here I can say COUNT comma. And then I can just say sex. So, what this is going to do is it's going to return but also it's going to return which sex it is. So, I'm going to click run. And you'll see over here there are 9. And it says male. But this still isn't exactly what we want. So, what we can do is we can come down here And what this is going to do, is it's going to group So, now when I run this, you'll see So, it's going to say 3 Female and 6 male. And that's because I'm telling SQL - I'm telling MySQL So, it's counting how many entries or how many And then what it's doing is it's printing this data out And it's giving us that information. So, that is what we would call like aggregation. And its really awesome. And you can use this GROUP BY keyword to do that. So, let's do that again. Why don't we try another one? Here's another prompt that we can look at. It says Find the total sales of each salesman. So, this is kind of interesting, right? Down here we have this Works With table. And this kind of gives the information And you'll notice I have like employee 105, right? Right here, sold 55,000. Employee 105 also sold 33,000 So, what if we want to figure out the total Well, I can do something similar. So, I can come over here and I can say SUM. And here we're going to say total_sales. And then over here we'll print out the employee ID. And instead of grabbing this from the employee table, And then we want to GROUP this BY employee ID. So, basically what this is going to do is it's going to So, you'll see over here, Employee 105 sold 218,000. 107 sold 31,000, etc. So, we're able to get all of that Now let's say if we wanted So, let's say that instead of finding we wanted to figure out how much money Well, instead of using employee ID over here, And we'll change this to client ID as well. And now what this will do is it'll tell us So, I'm going to run this and you'll see So, client 400 spent $55,000. Client 401 spent $267,000, right? And so, we can use aggregation in order to organize So, I can add up the total sales of each client. And I can group them by client ID. And so, that's kind of how that works. And so, aggregation can be extremely useful. And it's definitely something So, we have this entire database schema over here. And so, what you want to do is just kind of, you know, try to give yourself little prompts So, I kind of wrote out these little prompts. And they're kind of like little problems So, we want to, you know, be able to figure out [Wildcards] In this tutorial I'm going to talk to you guys about Now wildcards are basically a way that we want to match specific pieces of data to. So, this would be a way to kind of like grab data And I'm going to show you guys So, I have over here a prompt. And it just says Find any clients who are an LLC. So, this is kind of an interesting prompt. Let's say that we want to query our database And you'll see over here in the Client's table, So, this is a limited liability company. And this is kind of what we're looking to find So, I'm going to show you guys how we can use So, I could say SELECT ALL FROM client And now I can use the WHERE keyword. So, I want to filter the results, right? WHERE - I'm going to say client_name. And I'm going to use this keyword called LIKE. And LIKE is a special SQL keyword Now, we can say LIKE. And then over here we want to write out So, I'm going to make an open And we'll put a semicolon over here. And now, inside of here, I can uses a couple of So, basically what I can do here And if the client's name - if the specific client's name then this condition or this statement here will be true And so, we can basically use wildcards So, inside of these quotation marks There is this percent sign. And this stands for any number of characters. And then there's this underscore And I can use these in order that can be used by the database So, over here I could say LIKE. And I could say %LLC. Basically, what this pattern is saying is if the client's So, in other words, if it's any number of characters So, this percent sign is going to stand So, that means any characters. Anything can come before that. But that would mean that the name So, you'll see over here John Daly Law, LLC And then the last three characters are LLC. And that's kind of standard. Most limited liability companies It'll be like company name, LLC or John Daly Law, LLC. So, this wildcard, if there's any company names is going to catch them because basically means And then LLC. If you're familiar with regular expressions, It's just a more simplified version. So, I'm just going to click Run. And you'll see down here So, that's how we could use these wildcards and this So, why don't we try another one? So, I have another little prompt here So, it says Find any branch suppliers Okay, so this is kind of interesting. Find any branch suppliers Well, over here we're going to change this. So, instead of looking in client And then down here Except here, we're just going So, over here in the Branch Supplier table we have These would be like companies And you'll see there's actually a couple of these And so, if the word Label is in the company's name, And so, what I could do is I could say use a wildcard to see if the word label shows up So, what I could do is I'm actually going to So, basically we're going to have We're going to use this %. And then I'll just say Label. And then we'll make another one with another %. So, actually, why don't we check to see So, it's going to be % and then Label, just like that. So, this is going to be our wildcard. So, this will basically match if the supplier name So, now I'm going to run this. And you'll see down here And so, actually I thought there was two of them. Let me see. Okay, yeah. So, it looks like I have a typo here. So, it looks like when I was inserting the data So, that's going to be why that one is not showing up. But if we had - if I had spelled this correctly, So, that kind of shows you guys So, why don't we find another one. All right, so this one says Find So, this is kind of interesting. You'll see over here on the employee table we're And they're all structured the same exact way. We have a 4-digit year, a hyphen, Now, October is the 10th month. So, let's see if we have any employees. So, we have one employee down here, So, what we can do is let's see if we can design So, over here we can change this to employee. So FROM employee. And we want to check to see So, what we can do is we can It's this underscore. So, the underscore represents any single character. So, the percent sign represented Any number of characters would match it. And the underscore represents one character. And we can use that to our advantage. So, we know the way It's a 4-digit date, a hyphen. Or it's a 4-digit year, a hyphen, So, we could do 1, 2, 3, 4 underscores, And then we can do this percent sign. So, what this is going to match, it's going to match So, this should give us all of the birthdays So, I'm going to run this. And you'll see over here we get Jim Halpert. So, it says Jim Halpert So, you can do this for any month. We can see if there's any And you'll see down here, it looks like we have two employees born in February, So, that kind of gives you an idea Again, we're using these wildcards. All right, so let's try one more. It says Find any clients who are schools. So, this one is kind of interesting. Basically, we're looking for any clients So, what we could do is we could say SELECT ALL So, why don't we search the client name - is LIKE. And then over here we'll define a wildcard. Basically, let's just look for anything So, we could say %school and then %. So, this is obviously like a little bit general and broad, but hopefully it should at least So, I'm going to go ahead and run this. And you'll see down here, And it's Dunmore Highschool. And the branch ID is 2. So, that is really the basics of using these wildcards. So, again, we have the percent sign And then we have the underscore. And the whole idea is we want to build these little So, like the client name And if it does, then we're going to And those can actually be really useful when you're just trying to, you know, So, imagine that you're building and the user entered a bunch of search terms. You could use something like this in order to [Union] In this tutorial I'm going to talk to you guys Now, a union is basically a special SQL operator which we can use to combine the results So, I might have, you know, two or three And if I want it, I can combine all of them and get just a big list or a big table back So, I'm going to show you guys how we can do this. And I'm actually going to give us some prompts So, over here, I have prompt that says So, this is kind of interesting. We can actually use the UNION operator So, first thing, why don we see how we could just grab So, if I wanted to just grab the employee names And why don't we just grab the first name So, that's pretty easy. I mean that's as easy as it gets. We're just getting all the first names Let's do the same thing for branch name. So, I could say SELECT branch_name Again, pretty simple. So, this over here will give us all the names So, if I was to just run this, you'll see And if I was to run this, we get the names But how can we combine those together and then just get a list with Well, I can use the UNION keyword. So, over here I can just say UNION. I'm going to actually going to So, now we have one single SQL query which is going to return not only the employee first names, So, I'm going to go ahead and run this. And you'll see down here Just says first_name. And then we have all of the names of the employees, but down here we also have the names So, Corporate, Scranton and Stamford. We have all that information. And it's all combined So, this is actually pretty cool. And when we're using unions, There are a couple rules though. So, the first rule is that you have to that you're getting in each SELECT statement. So, in this first SELECT statement, In the second SELECT statement, If I was to come up here now when I run this, we're going to get an error because up here we have two columns So, that's the first rule. You can do that. They have to have the same number of columns. They also have to have a similar datatype. So, first_name and branch_name, So, they're both of a similar datatype, But if you had two things then it might not necessarily work out as well. So, that is basically how we can do these. And that kind of just show you guys in order to combine the results If we wanted, we could add in another one too. So, I could say like UNION again. And now we can UNION all of that So, now I'm grabbing not just the names of the So, when we run this now, you can see we're getting Now one thing you might notice is that So, this is saying that it's first_name when in reality, And so, over here you'll see that it's first_name because the first SELECT statement, the column So, that's why that's showing up as first_name. But if you wanted, you could change that. So, I could say first_name AS So, I can just say like Company_Names. And so, now the column name is going to be So, now this is just like all the different names So, hopefully that kind of makes sense I'm going to show you guys a couple So, I'm going to pull up another prompt here. Why don't we take a look? It says find a list of So, this is actually pretty similar. So, we can SELECT client_name FROM client. And then we can also UNION this with SELECT And so, now we're going to get a table with So, let's run this. And you'll see over here we get all that. So, we have all of the clients And you'll notice over here on the Client table both of these have a branch_id column. So, the Branch Supplier has a branch_id column. And the client has a branch_id column. So, what we could do is we could use that. So, I could say like SELECT client_name. And we could also SELECT branch_id FROM client. And then we can SELECT supplier_name and the branch_id from the Branch Supplier. And that will give us now not only but also the branches that they're associated with. So, you can see down here Now, one thing I do want to point to we have branch_id up here So, the Branch Supplier table and the Client table And sometimes in a situation like this because we have the same column name. But associated with different tables. And so, what a lot of people will do is they'll prefix So, let's say like client.branch_id. Or they'll say branch_supplier.branch_id. And what that does is it basically So, now I know that this branch ID And this branch ID You don't have to do that. But in a lot of circumstances, So, I want to show you guys so I'm going to give us another prompt here. And it basically just says find a list of all money spent So, this one is kind of interesting. All the money that the company either spends So, basically, the company earns money And the company spends money by paying So, we can combine those two. So, I can just say like SELECT salary FROM employee. And again, we can UNION that And so, now this will give us that column. So, you'll see over here it's all of this money that's either going in or out of Hopefully, that gives you a good idea Now, obviously, these are very simple examples. But you can take this and kind of extrapolate it out Union basically just combines That's essentially all it does. But again, there are certain rules like you have to have And they have to be like similar datatype But UNIONs can be very useful for sort of combining [Joins] In this tutorial I'm going to talk to you guys Well, JOIN is basically used to combine rows based on a related column between them. So, JOINs can be really useful for combining into a single result obviously find out specific information So, in order to teach JOINs, We're going to insert another branch So, over here I just have the code to do that. I'm inserting INTO branch the VALUES. So, the branch is going to have an ID of 4. The branch is going to be called Buffalo. And it's not going to have a manager ID So, down here in this table that we've been using Corporate, Scranton, and Stamford. Now we're adding a Buffalo branch. But the Buffalo branch doesn't have a manager ID Both of those are NULL. So, I went ahead and inserted this into my database. And you'll see down here So, we have 1, 2, 3, 4. All of these pieces of information. And then the manager ID for Buffalo is NULL So, that's actually going to come in handy for what I'm going to be showing you guys So, if I want to follow along, go ahead and do that. But if you're not going to be following along, just know that Buffalo doesn't have a manager ID So, now that we've inserted that into the database, So, I want to kind of show you guys what a JOIN is So, I'm just going to go ahead I'm just going to paste in here. And then we'll talk about the example and you'll be able to see exactly So, over here I have this. It says Find all branches So, we want to find all the branches in the database. And for each of those branches So, down here you'll notice And the branch has this column here mgr_id, right? And inside the mgr_id So, these ID's relate to employee ID's Now, I want you guys to notice that that we have down here are similar, right? They're both storing employee IDs. And so, this is basically a column that is shared between the Employee table Both of those tables have a column And anytime you have a situation like that, And like I said, a JOIN is used to combine rows from So, in our case, the related column So, over here, in order to find all the branches So, here I'm saying SELECT. And I'm selecting employee.emp_id. employee.first_name and branch.branch_name. Now, up to this point in the course, we've never used multiple table's columns So, normally we just say like employee.emp_id, We wouldn't use - or we wouldn't specify anything But because we're joining the tables, we can actually specify that we want to So, just keep that in mind. So, when we get this table back, the employee's first name, So, that will basically give us the branch And I want to grab that information from employee. And then I'm going to say JOIN branch. And so, when I say JOIN branch, what this is going to do is it's going to join So, it's going to join them together into one table. And it's going to join them together on a specific column. Now, this is the column that both of these So, I'm going to say Join branch ON. And then over here, I can basically just say So, basically I want to combine these two tables. Or I want to combine all of the rows and all of the rows from the Branch table, as long as the manager ID of the branch row So, I'm going to go ahead and run this And this should kind of clear up So, down here we get three columns. We get emp_id, first_name and branch_name. And remember, we specified that up here. I said employee - I want the ID, the first name, So, down here, we're getting the employee ID. So, it's 100. We're getting the first name, which is David. And we're getting the branch name Corporate. So, this tells me that the manager The manager of the Scranton branch And the manager of the Stamford branch And if you look over there in our database table, And so, essentially, we combined a row with the rows from the Employee table, emp_id But we only combined them when the employee ID We have a bunch of employees over here. Michael, Angela, Kelly, Stanley, Josh, Andy, Jim. But not all of these employees have their ID So, only employees whose ID's match were joined together into this combined table So, that is basically what a JOIN is. We can take rows from one table, And it gives us information. So, this is pretty useful information, right? We got the name of the manager for a specific branch even though that information So, this is kind of the most basic version of a JOIN. And this is like just the normal join. You can see I'm just using But there's actually a couple other types of JOINs. So, there's actually four basic types The first is just this general JOIN. And this is what's referred to as inner JOIN. And the inner JOIN is going to combine rows whenever they have the shared column in common. So, whenever the employee ID then that is going to get included But there's a couple of other types of joins. And I want to show you guys what they do. So, there's another which is called a LEFT JOIN. And you can just say LEFT JOIN just like that. And so, now instead of doing a normal JOIN And I want to show you guys So, I'm going to go ahead and run this. And you'll see over here that instead of we also got all of the other employees So, we got Jan, Angela, Kelly, All of the employees got included in the results, right? Not just the employees who are branch managers. So, when we just use an inner JOIN, only the But when we used the LEFT JOIN, And here's the reason why. With the LEFT JOIN, So, in our case, the left table It's the employee table. And the left table is basically So, whenever we use this LEFT JOIN, are going to get included in the results. But only the rows in the Branch table that matched are going to get included There's another type of JOIN we can use And so, I can just say RIGHT. Now, this is going to do the opposite. So, instead of including all of the rows now it's going to include all of the rows So, I'm going to go ahead and run this. And down here you'll see we have all of the rows So, not only did we get the rows with had managers, So, down here, remember, the Buffalo branch So, it didn't actually get linked to an employee. So, therefore, both of these things were NULL. So, in the LEFT JOIN, we got all of the employees. In the RIGHT JOIN, we got all of the branches. In other words, in the LEFT JOIN In the RIGHT JOIN we got all the rows So, in certain circumstances So, those are the three basic types of JOINs There's actually a fourth type of JOIN Unfortunately, we can't do it in MySQL And basically, in a FULL OUTER JOIN, it's basically So, remember, in the LEFT JOIN, and the RIGHT JOIN In a FULL OUTER JOIN you would grab no matter if they met this condition or not. So, like I said, there's not like - we can't just come We're not going to be able to do that. But I just wanted to let you guys know about it So, these JOINs are really simple And they can be really useful So, something as simple as getting the names and what branches they manage [Nested Queries] In this tutorial I'm going to talk to you guys Now, nested query is basically a query where in order to get a specific piece of information. So, a lot of times we're going to and we're going to need to use to inform the results of another SELECT statement. So, this is a little bit more advanced and this is kind of But I want to show you guys how this works because a lot of information that you're going to So, let's go ahead and put a prompt up on the screen. It says Find names of all employees So, we want to get the names of the employees, So, the first thing I would do figure out how to write this query So, down here we have this Works With table. And the Works With table has total sales, right? And each one of these rows defines has sold to a particular client, right? So, employee 105 sold $55,000 So, over here we have part In other words, here we have the total sales. But what we don't have is the employee's first name We don't have the actual employee's name. What we do have though is the ID So, we have the employee's ID. And we can use the employee's ID So, in this case we had part of the data here And we have part of the data up here And this is a situation So, the first thing I'm going to do which is going to get me all of the employee ID's All right, so we're going to start with Step 1, which means we're getting all of the employee ID's So, let's go ahead and write that query. Shouldn't be too hard considering So, I'm going to SELECT emp_id FROM works_with. And I'm going to select it WHERE total_sales And we'll go ahead and end this. And actually, up here, So, I'm going to say works_with.emp_id. And then down here we'll say works_with.total_sales just so it's more clear. Especially when we get into nested queries it's usually useful to prefix everything with the table So, over here I'm going to run this. And this should give us all the ID's of the employees So, you'll see we get 102 and 105 So, it looks like 105 has sold a lot of paper. And so, now we have all of the ID's of the employees And so, what we can do now is we can figure out we want to get those employee's And so, I'm going to go ahead I'm going to say SELECT. And I'm going to say employee.first_name. And why don't we do employee.last_name. And we're going to SELECT this FROM employee. And then over here we're going to say WHERE. And this is where we're going to go ahead So, basically I want to select all of the employees So, what I could do is I could say and remember, the IN keyword is going to is in values that we specify So, what I could do is So, I can go ahead and take this and I can just paste it And one thing you want to keep in mind So, you'll see I formatted this And then I'm going to get rid of this semicolon So, basically what this is saying is I want to get the first name and the last name where the employee ID is IN the result of this query. So, if the employee ID got returned from this query, which gave us the ID's of all of the employees then we're going to return So, let's go ahead and run this. And you'll see over here, So, Michael Scott sold over 30,000 So, that is actually a really cool way So, that's how we can use a nested query, right? A lot of times you'll use this IN keyword. I'll also show you some other examples But in that case, we're basically checking All right, so now I have another prompt here. It says Find all clients who are handled So, this is another interesting one. It says assume you know Michael's ID. So, we're going to assume that we know This is another one where again, in order to inform the data from another table. So, the first thing that we want to be able to do is figure out the branch ID of the branch So, over here we have our branches And so, what we need to do is able to figure out Then once we have that information we can figure out So, over here, the manager ID will map us And the branch ID will actually map us because it has the branch ID as a foreign key. So, the first thing we'll do is we'll figure out So, that should be easy enough. We can just say SELECT. And actually we'll just do the branch.branch_id And remember, we're going to assume So, I can just say branch.branch_id is equal to - So, I can just say is equal to 102. And so, what this should do, is it should give us In this case - actually, whoops. Instead of branch_id this needs to be mgr_id. And this is going to give us 2, right? Because 2 is the Scranton branch So, now that we have this piece of information, all we want to do is just get all of the clients So, we can just say SELECT. And why don't we just get the client name? So, it'll say client.client_name FROM client WHERE. And over here, we're basically just going to say And over here we're going to set So, we're going to set it equal to the result of getting So, down here, we'll put this statement and you'll see, again, So, what's going to happen is when sees an embedded SQL statement like this, And then it's going to execute the outer one. So, it starts inner and then it slowly goes outer. So, we'll be able to get the branch ID And then we can use that information So, over here, I'm just going to click Run. And I'm going to go ahead And now we can go ahead and run this. And you'll see we get all of these clients. So, we get like Dunmore Highschool, Lackawana So, those are all the clients that are managed Now, there is one more thing I want to point out which is you'll notice down here we're setting We're checking to see But here's the problem, is this statement isn't So, if this - so, let's say that Michael Scott it's possible that this would return multiple values. So, what we want to do is just come down here And that'll make sure that we only get 1 of these. So, now if I click Run, you'll see it does the same thing. Although, now we're just making sure So, anytime you're using something like a quality, it's always a good idea to limit it down to 1 where Michael Scott is going to In which case, we can use IN instead. All right, so that's kind of a little dip Now, obviously these can get very complex. And really, you know, what's important is that you If you don't understand the fundamentals that we've then using nested queries is really going to All nested queries are is it's just kind of like maybe informing another query, right? We just use the results from one query And as long as you can break the nested query you should have absolutely no problem writing these. And really, the best way to get good at writing more So, the more you practice writing nested queries and using all these things in combination, [On Delete] In this tutorial, I'm going to talk to you guys when they have foreign keys associated to them. So, this is actually a pretty interesting topic. And over here in our company database we have We have all sorts of foreign keys And I want to pose to you guys a scenario. So, imagine over here I have my Branch table So, imagine that I came over here in my Employee So, let's say that I deleted Michael Scott. So, over here we have this employee, Michael Scott. And his branch ID is 2. So, Michael Scott has a foreign key here defined, So, branch_id, Michael Scott's branch ID is 2 which means that Michael Scott belongs to the But let's pose something. Like imagine that we were to delete Well, what's going to happen this manager ID So, if we delete Michael Scott, What's going to happen to the manager ID? The manager ID is supposed to be linking us But if we delete Michael Scott, then all of a sudden Because Michael Scott is gone. His employee ID is no longer inside of And this is what I'm going to talk to you guys which is different things that we can do So, specifically, I'm going to talk to you guys One is called ON DELETE SET NULL. And the other is called ON DELETE CASCADE. So, there's really two things that we can do And so, the first thing would be ON DELETE SET NULL. And ON DELETE SET NULL is basically that means that the manager ID that was associated ON DELETE CASCADE is essentially whose ID is stored in the manager ID column, then we're just going to delete So, I'm going to go ahead So, over here I actually have the code And this is the code that we used when I was showing you guys You'll notice over here on the Branch table it says FOREIGN KEY (mgr_id) REFERENCES And over here I said ON DELETE SET NULL. Basically, what I'm saying here is that if I want to set the manager ID equal to NULL. And so, let me show you guys So, over here I'm going to go ahead and we'll see what happens. And so, I'm just going to go ahead and type out and we're just going to put Michael Scott's And I'm going to go ahead and run this. And you'll see over here it says 1 rows affected. But I want to show you guys So, I'm just going to SELECT ALL from branch. And let's go ahead and run this. You'll see down here the manager ID And that's because over here - So, we deleted the Michael Scott, And so, now the manager ID which was storing that as And that's because that's what we defined up here. So, in a situation like that, now that entry is just going to be equal to NULL. And the same thing actually happened So, if I was to SELECT ALL from you'll see now that a lot of these supervisor ID's And if you remember back to when we created the employee table, the super_id And so, that's why when we deleted Michael Scott, namely these three employees right here you can see all these employees were All of their super ID's ended up getting set equal to So, that is ON DELETE SET NULL. And that's basically how that works. I want to show you guys also So, we have this Branch Supplier table. And the Branch Supplier table also but instead of saying ON DELETE SET NULL, And when we use ON DELETE CASCADE, that's stored as the foreign key then we're just going to delete the entire row So, down here in Branch Supplier, So, I have like Hammer Mill supplies paper Or Uni-ball supplies writing utensils If I was to delete Branch 2, in other words, then all of the rows that had branch_id 2 here So, I'm going to show you guys how that works. So, over here, we're going to go ahead and do that. So, we're just going to DELETE FROM branch And so, when I go ahead and delete this, is all of those branch supplier rows are going to So, now I'll just SELECT ALL from branch_supplier. And when I run this query, you'll notice In other words, we got rid of all of the suppliers And that what's ON DELETE CASCADE Instead of just setting those equal to NULL, So, now that we kind of understand I want to talk to you guys about the different And actually, the Branch Supplier table So, in the Branch table we used ON DELETE SET NULL. And it was okay for us to use ON DELETE SET NULL because the manager ID on the Branch table It's not actually a primary key. And so, the manager ID isn't like However, if we look down here you'll notice that the branch_id, in other words, Which means the branch ID is absolutely crucial for this row And so, if the branch ID here, we can't set this to NULL because And so, this can't be NULL. You have to just delete the entire thing. And so, that's why we use ON DELETE CASCADE And honestly, you know, But just know that if you have a situation where a foreign key is also a primary key then it always has to be ON DELETE CASCADE So, that's the basics of those different ON DELETEs. So, ON DELETE SET NULL and ON DELETE CASCADE. And both of those are extremely useful when we're [Triggers] In this tutorial I'm going to talk to you guys Well, a trigger is basically a block of SQL code which will define a certain action that should happen when a certain operation gets performed So, I could write a trigger which would when like an entry was added Or when something was deleted And basically I can say like Hey, anytime, you know, I want you to like insert something So, triggers can be extremely So, I'm going to show you guys and we'll just talk about like So, the first thing we have to do, at least to follow And you don't have to create this table. I'm just doing this so we can illustrate But this is not necessary for triggers. But I'm creating a table called trigger_test. And it's just going to have one column And I'm just going to go ahead and create this. So, we're creating this table trigger test. And now what we can do Now, when we're using MySQL - and up to this point which is actually an awesome program for, you know, And it's been really great because it's, you know, But when we're going to write triggers, we're going to have to define And that's just because which is change the SQL delimiter And I'll talk to you guys about that in a second. But in order to do that, we're going to So, if you're on Windows you can just go down So, it's this guy right here. That's what I have open. It might ask you to log in. If you're on the OSX and you're using Terminal, if you just type in MySQL -u root -p. And then hit Enter, it should prompt you for your And so, that's how you can And then once we're in here So, I'm just going to say use giraffe. And giraffe is the name of the database So, whatever the database you created was, And then over here, so once we have all that set up, now we're ready to go So, I need to actually execute the trigger code but we can actually just write it out over here inside I'm actually just going to show you guys and then I'll kind of talk to you about it. So, I'm going to go ahead and paste one over here. And this is actually a very simple trigger. So, the trigger is actually right here, And then you'll see over here, I'm saying DELIMITER. So, I'm going to talk to you guys about the trigger first and then I'll talk to you guys So, we can basically create a trigger We're going to give this a name. I'm just going to call it my_trigger. And I can say BEFORE INSERT ON employee, So, what does all this mean? Basically, I'm defining my trigger. I'm giving it a name. And I'm saying that before something so before anything, you know, any new items for each of the new items that are getting inserted, I want to insert into the trigger test table So, basically what happens that means that before anything gets I'm going to go ahead And in our case, I'm just inserting into trigger tests, So, that's basically all it is. We're basically configuring MySQL to insert whenever a value gets inserted And this can be really useful I can automate something that happens every time Now, over here we have these little DELIMITERs. And this DELIMITER is actually What this will do is it'll change the MySQL delimiter. So, normally, the MySQL delimiter So, if I said like SELECT ALL from employee. I would end this off with a semicolon. That's the delimiter, right? That delimits the different SQL commands. But when we're writing these triggers out, inside of these FOR EACH and this END And so, because I'm using the semicolon I can't actually use that same delimiter So, you have to put the semicolon here But if I don't change the delimiter, that we're done creating the trigger, And so, what I'm doing up here So, basically now instead of the delimiter the delimiter is going to be two dollar signs. And you'll see, I create the trigger to delineate that the trigger is done being created. And then I can just delinear back to a semicolon. Now, the reason that I have to is because in PopSQL you can't So, the delimiter is actually something It's defined like over here. So, basically we have to execute this over there. So, what I'm going to do now is I'm actually going So, I'm just going to change the delimiter. So, I'm going to paste this in. I'll hit Enter. And now I'm going to paste in the actually part So, over here we'll paste this. And I'm just going to hit Enter. And then finally, we're going to change So, I'm going to change this back to a semicolon. So, hopefully now this trigger is all set up So, one thing we can do to test it So, I'm going to go ahead So, we're going to add in Oscar Martinez. And let's go ahead and do that. And so, we added in Oscar. And now what I'm going to do is SELECT So, assuming our trigger got set up correctly, when we inserted an employee it should have also inserted something So, let's go ahead and run this SELECT statement So, you'll see down here we get a message that says So, it looks like it worked, right? The trigger got set up correctly and therefore when we actually ended up updating the Trigger Test table And so, that is basically how we can use So, I want to show you guys I'll show you guys another one right now. I'm actually going to, again, paste it So, this one is actually very similar But instead of over here, Instead, I'm saying NEW.first_name. And so, what this is allowing me to do is it's actually allowing me to access a particular So, again, we're inserting something NEW is going to refer to the row And then I can access specific columns from that row. So, NEW.first_name will give me the first name So, now if I was to come down here and So, we're going to insert Kevin Malone. And let's go ahead and do that. And actually, whoops. I have to update the trigger over here. So, once again, I'm going to do the same thing. I'm just going to paste in all of this code over here So, we'll paste in the trigger. And actually need to change the name So, we'll say my_trigger1 And that's going to go ahead. And then we'll change the delimiter All right, so now let's go ahead So, I'm going to run this. So, we added Kevin. Now if we SELECT ALL from Trigger Test, you'll see down here not only did we add That was that first trigger that we set up. But we also added the employees name So, we were able to grab a specific piece that got inserted and that's going All right, so there's one more thing And it's actually going to be a more complex trigger. So, this is how we can use conditionals. So, I can use something like IF, ELSEIF, and ELSE. So, over here we have this trigger. So, it's basically the same exact thing TRIGGER my_trigger BEFORE INSERT ON employee. And then for each row. This time we're using an IF statement. So, I'm saying IF NEW.sex is equal to male, THEN INSERT INTO trigger_test VALUES ELSEIF NEW.sex is equal to F, INSERT ELSE INSERT INTO trigger_test, So, we're using IF ELSE logic. And basically, it's just if this condition up here is true, Otherwise, we check this condition. If that's true, we do this. Otherwise, we do that. So, if you've ever programmed before, So, this is a very special type of trigger So, I'm going to go ahead So, change the DELIMITER. And then we're going to put this guy over here. And whoops. Again, I forgot to change the name. So, this will be called trigger2. And put this over here. And then finally, we're just going to All right, so now lets - again, So, I'm going to go ahead So, why don't we insert Pam Beesly. So, Pam Beesly is going to be a female. Which means when we insert Pam Beesly, hopefully So, I'm going to run this. And we added the employee. Now, let's SELECT ALL FROM trigger_test. And so all of these triggers are actually going to So, we should have quite a few entries in here. So, we'll see when we added Pam, Added female. So, that third trigger that we just created So, you'll notice over here But you can also create triggers for UPDATE So, anytime they're trying to INSERT, UPDATE, So, you can also do - in addition to BEFORE So, in certain circumstances You'd want to INSERT AFTER. And you can go ahead and control it just like that. So, but basically, that's all the, you know, These are very, very useful. And they'll allow you to do a bunch of cool stuff. We can also drop a trigger. So, I can say like over here in the terminal And it would be like my_trigger. So, this will drop my_trigger. And now, my_trigger is no longer going to be active. So, triggers are, like I said, very useful. And it's a really great way to kind of control And you can automate a lot of the stuff [ER Diagrams Intro] In this tutorial I'm going to talk to you guys More specifically I'm just going to give you guys And we'll talk about how ER diagrams all the different symbols in the ER diagrams Now, when you're designing a database, one of the most important things And a database schema is basically just all that are going to be on those tables. So, maybe you have some requirements that needs to get stored inside of your database and the different relationships that Well, you can use an ER diagrams between database or storage requirements that's going to get implemented So, an ER diagram is a great way data storage requirements And sort of convert them So, we can use the ER diagram to map out and the different entities And it can just be a really great way to organize So, an ER diagram is basically just a little diagram that And it all kind of gets combined together to end up So, without further ado, let's get started. I'm going to show you guys all the different and we'll kind of construct our own ER diagram. And it'll kind of give you guys an idea of all the So, in this example I'm going to be using So, let's say that I'm working for a school "Hey Mike, I need you to design a database schema or So, maybe this database is going to store information And then maybe information So, let's start looking at the different parts So, the first thing I want to talk to you guys And an entity is just an object that we want So, for our school database we might want So, inside of our ER diagram we can put an entity And then we're going to So, it's going to be student. Next we can define attributes. So, attributes are specific pieces So, over here we have our student entity. And then we might want to store like So, like, what grade are they in. And then their GPA. So, we can store all different types of attributes. And we're going to make these little ovals and we're So, the attribute is going to have the name connected to our square entity. We can also define a primary key. A primary key is going to be an attribute that's going So, you'll see over here I actually colored Now, generally, for an ER diagram, I just did that so it's kind of easier But whenever we're defining a primary key, So, a primary key is just like a normal attribute, So, here, our primary key is a student ID. And then I just have the GPA. So, you know, obviously I could put But I'm just using two for now just to keep it simple. So, we have our primary key, student ID, And they're both connected to our entity. Next, we can define composite attributes. So, these would be attributes So, for example, if we wanted to store but we can also store their first name So, name could be broken up further And so, in the case of a composite attribute you'll It's connected to the entity. And then off of that main attribute fname and lname We can also define a multi-valued attribute. So, if there's any attributes in your data model then you can put them in a multi-valued attribute which looks just like an attribute So, it's just two circles. And then inside, the name of the attribute. So, clubs, for example. Like a student might be involved And so, clubs would be a multi-valued attribute. In other words, it could have more than one value. Like a student is not going They're not going to have more than one name. They're not going to have more than one student ID. But they might have more than So, next step is a derived attribute. And a derived attribute is an attribute that we're keeping track of. So, we're not going to actually But it's just a way that we can sort of notate attributes that could be derived from the attributes So, down here I have my derived attribute. And you'll notice that it's just an oval It's called has_honors. So, has_honors is an attribute So, maybe the school is going to say a GPA of 3,500 or above is going to have honors. Well, we could derive that just from the GPA. So, we're not actually going to be but it's an attribute that we can derive So, we can just denote it like that. And sometimes it's useful to denote So, we can also have multiple entities. So, over here you'll see I have my student entity. But I can also define another entity And so, a class would be like a particular class So, if I was in school, I might take like biology That would be what this class is over here. And then you'll see over here we have our primary key And so, when we have multiple entities, we're going to want to define relationships So, what I can do is I can define a relationship. And a relationship is basically And the relationship would basically So, a relationship is kind of like a verb, right? It's the student is related to the class So, the student is going to take a class. And a class can be taken by students. So, you can read this both ways. You can say the student takes a class And we can also define participation. So, you'll notice that the relationship So, the student is connected to the relationship And the classes connected to the relationship So, when you're defining relationships you can define the participation So, when I use a single line, What this means is that So, when I use the single line. I'm basically saying that only some Not all students necessarily have to be taking a class. When I use this double line, Which means that all of the classes need to be taken So, that means all classes must participate So, all classes need to have students So, you couldn't have a class All classes have to have students that are taking it. And, you know, maybe that's not But in this case, that's how So, I could use total participation to denote that In other words, all classes need So, that's basically how we can define relationships. And then obviously, partial participation And so, over here, we can also define attributes So, we have our Takes relationship. And you'll notice that I'm defining at attribute So, a student will take a class and the student So, I might take biology and maybe I get Well, that grade isn't necessarily stored and it isn't necessarily stored on the class entity. It's stored on the relationship, right? So, the only way I can get a grade from a class And so, that's why the relationship attribute And sometimes that'll come in handy. And so, we can also define relationship cardinality. And relationship cardinality is the number of instances that can be associated with the relation. Now, I understand that's And I think relationship cardinality so I'm going to try to give you guys So, over here we have a student But we can define relationship cardinalities on that. Basically, what this means is that a student So, when we say M, that refers to any number. So, a student could take A student could take 2, or 3, or 4 classes. And we can define the same thing for the class. So, we could say a class is taken So, a class can be taken by 5 or 10 or 30 students. That's basically what that would define. So, this would be an NM cardinality relationship. But we can also define So, we could say like 1 to 1. So, in a 1 to 1 cardinality relationship and a class can be taken by one student. We can also say like 1 to N, which would be a student could take one class Or, you could reverse it and say a class but a student can take any number of classes. And then again, you guys saw NM which and a class can be taken by any number of students. So, it's useful to define that relationship because that's actually going to relate to when it's eventually time to do that. And also, like this is something that So, if the requirements comes to you and says well, that's something that you want to be So, that's kind of how And then finally, the last thing are weak entity types So, actually, I think I'm in the way here. But where my head is, it just says class. So, you guys kind of saw it before. So, a weak entity as entity that cannot Basically, a weak entity is an entity So, over here I have an example So, a class can have an exam, right? So, an exam is something - You know, a test or whatever An exam might have an exam ID. But in this case, an exam In other words, for an exam to exist, An exam, you're not just going to like We're only going to have an exam So, this is what would we call a weak entity type. It's an entity that cannot be uniquely identified And we can also define an identifying relationship. And an identifying relationship is a relationship So, an exam can be uniquely identified Which I realize, my head is in the way of, So, I can say that a class has an exam. And an exam is had by a class. The exam doesn't exist on its own. It only exists in the context of a class. And this is kind of more of an abstract idea. And actually, in the next video But this should be at least a little bit of an example and identifying the relationships So, the exam has double square and the identifying And also, one more thing to note. Then whenever we have a weak entity the weak entity always has to have total participation In other words, all exams must have a class, All right, so that is kind of all of the sort of basic things And really, everything that you see right here that you might seen an ER diagram. And really, you can use all of these different symbols And what you'll see is we can take this ER diagram and we can actually convert into And that's why these are really between requirements So, hopefully that makes sense. In the next video we're going to actually walk through so that should be kind of cool. And that should kind of give you guys [Designing an ER Diagram] In this tutorial I'm going to walk you guys based off of some data requirements. So, over here I have this document. It's called Company Data Requirements. And basically, what this document does all the pieces of information and the relationships And this is a good example you might get if you're working for a company Let's say that they want you to design a database Well, they might give you this document. And then your job would be to take this document which you can then, you know, So, this document will describe all the data and But it will do it in, you know, in English, right? It'll do it in a very high-level manner. You know, it's not going to get into So, your job would be to take this information and And so, what you can do is you can take this. You can convert it into an ER diagram and then you can take that ER diagram So, I'm going to show you guys the first step of that which would be to take a document like this Which in the last video, I kind of walked you guys So, let's go ahead and take a look at this document. I'm going to read through it. And then what we're going to do is we're going to So, over here it's just Company Data Requirements. So, we're defining the data So, it says the company is organized into branches. Each branch has a unique number, a name, The company makes its money by selling to clients. Each client has a name The foundation of the company is its employees. Each employee has a name, An employee can work for one branch at a time and each branch will be managed We'll also want to keep track of An employee can act as a supervisor An employee may also act as a supervisor An employee can have at most one supervisor. A branch may handle a number of clients, with each client having a name A single client may only be handled Employees can work with clients controlled If necessarily, multiple employees can work We'll want to keep track of each employee sells to each client they work with. Many branches will need to work with suppliers For each supplier we'll keep track of their name A single supplier may supply products So, this is our Company Data Requirements document. And there's a lot here, right? It kind of took me like over a minute And so, if you're given a document like this, how do you go about converting this So, the first thing we want to do So, what I'm going to do is I'm going to walk through and show you guys how we can create an ER diagram And then in the next video I'll show you guys into an actual database schema. So, let's go ahead and take a look. I'm going to walk you guys through each line and we'll convert it into our ER diagram. So, over here it says the company Each branch has a unique number and a name. So, you'll notice that I've mode bold branches. So, branch is going to be our entity, right? We're defining an entity branch. And it's going to have two attributes, a branch ID The branch has a unique number. So, that, to me, tells me And then obviously, the branch name. Next we have the company So, right away there we have another entity. Each client has a name So, here we have our client And then their client name And then over here it says the foundation Each employee has a name, birthday, sex, salary So, over here we have our employee and we have Birthday, name, so we get first and last name. And salary and then sex. And then so over here we also have a derived So, from the employees birth date we could derive So, here we have our three entities So, now over here it says the employee can work So, over here we have a relationship, Work For, right? This is like a verb. So, an employee over here can work for a branch and So, that's our relationship. And you'll notice over here So, I'm saying that all branches That's this double line right here. And I'm also saying all employees So, both of those entities have a total participation And that wasn't rigorously defined But that's just something that I kind of, you know And then over here So, I'm saying that - basically what this says is that a branch can have And an employee can work for one branch. So, I'm going to say that one more time. A branch can have any number And an employee can work for one branch. That's what that cardinality relationship So, next we have another relationship. It says each branch will be managed We'll also want to keep track of So, over here we have another relationship An employee can manage a branch. So, employee can manage a branch And then you'll also notice over here that So, we want to keep track of when So, when does the employee start as the manager So, we're defining this attribute And now let's take a look at the participation. So, all branches must have someone managing them. So, you'll notice that we have Every branch is going to participate All branches need to have a manager. But over here on the employee Not all employees need to be managers of a branch. In fact, by a large majority most employees And so, that's why we define this as single So, not all employees are going to manage a branch, And then over here So, we're saying that an employee and a branch can be managed by one employee. So, that kind of makes sense. So, down here we also have another relationship. It says an employee can act as a supervisor An employee may also act as a supervisor That employee can have at most one supervisor. So, over here we get this supervision relationship. Now you'll notice that the supervision relationship is So, this is a relationship between employees. So, over here we have an employee and an employee can be the supervisor So, over here, basically we're saying that an employee So you can only have one supervisor. But an employee can supervise So, one more time, I'll just say that an employee can And a supervisor can be the supervisor All right, so over here we have another relationship. It says a branch may handle a number of clients, however a single client may only be handled So, over here we have the new relationship So, I'm saying that a branch can handle a client So, maybe a branch might have a bunch of clients And so, the client has a total participation That means that every client must be handled But if the branch has a partial participation, which means that not all branches Maybe you'd have like a corporate branch Or maybe you'd have like an RND branch But you'd have other branches that do. And so, that's why we would define that relationship. And then also we have our cardinality relationship which would be a branch can handle So, the branch can handle N clients. And a client can be handled by one branch. So, if you're a client, you can only work But if you're branch, you can work And that's what we're defining over here. All right, and then over here And I realize this is getting a little cluttered But it says employees can work with clients controlled If necessary, multiple employees can work So, now we have a relationship So, we have an employee works with a client. And then a client can work with an employee. Now, notice the participation. So, all clients must work with an employee. But not all employees must work with clients, right? So, all clients need to interact with the branch but not all employees need to interact with clients. You'll also see down here it says we'll want to keep each employee sells to each client they work with. So, on this Works With relationship, So, the employee can sell to the client and that's where we're getting this from. And finally, we'll look at the cardinality. So, a client can work with any number of employees. And an employee can work And so, that's basically the relationship All right, so over here we have our final It says many branches will need to work For each supplier we'll keep track of their name A single supplier may supply products So, this is an example where we would need So, over here we have this And it has a supplier name and a supply type, but the branch supplier is going to Now, we want to keep track of which branch suppliers And in order to do that, we're going to So, we can say the branch supplier supplies And you can see that we have So, this is basically our entire ER diagram, right? We have from that requirements document we've all the different attributes on the entities And basically, we get this diagram. And this diagram is - it's just linking It's visually representing all of that information So, what we can do now and depending on the different relationships, the different participations, we can actually go ahead and convert this which I'm going to show you guys So, stick around for that and we'll go ahead and [Converting ER Diagrams to Schemas] In this tutorial I'm going to show you guys how to So, basically we're going to take which we created in the last tutorial. And we're actually going to take this So, from this diagram right here we'll be able to, that we can use in our relational database. So, let's go ahead and get started. I'm going to show you guys basically step by step how we can start converting this So, the first step, Step 1, So, for each regular entity type, which is just a table, that includes So, here we have all of our regular entities. We have branch, client, and employee. And so, what we want to do basically database tables for each one And then the columns of those relations are going to So, from that, from everything that's inside of the So, we have our employee relation. We have the employee ID which is the primary key. First name, last name, birthdate, sex, and salary. And we have the Branch with that information. And then we have the Client. So, I just want to show you guys so this name attribute over here, So, we're just storing first name and last name. All right, so here we have three relations So, Step 2 is the mapping of weak entity types. So, over here we have one weak entity type For weak entity type we want to create that includes all of the simple attributes And the primary key for the new relation should be the partial key of the weak entity In this case, the primary key of the owner is going to In other words, the branch is the entity that's participating in the identifying relationship So, over here we'll see what happens. So, you'll see we get this new table, Branch Supplier. And the primary key is branch_id supplier_name, So, for this table, we included the supplier's name Both of those come together It's a compound key. And then we have supply type So, now we have four tables, Employee, And they all have their associated attributes. So, Step 3 is the mapping of Now, a binary relationship is a relationship For example, all of the actual relationships up here In other words, there's two parties And what we want to do is map 1 to 1 relationships. So, we only have a single 1 to 1 relationship here. It's this manages relationship. So, a branch can be managed by one employee So, for each 1 to 1 binary relationship as a foreign key in the other. And we want to favor total participation. So, in this case, we want to basically include as a foreign key in the other entity's relation. And we always want to favor the total participation. So, if a particular entity has total participation then you want to add the foreign key So, in this case, branch has a total participation, so we're going to add the employee's ID If both of them are partial participation then you can just use your own discretion. But in this case, it's pretty clear So, over here on the branch relation, I added in And this is a foreign key which points to So, that's how we're going to link Step 4 is the mapping of So, unlike a 1 to 1 relation, And you'll see that we have three of them here. So, branch handles a client. An employee supervises or is supervised And a branch has employees working for it. So, basically what we want to do is we want to include the one side's primary key So, basically, what this means is that - okay, so for example, I want to include the one side's primary key, right? In other words, I want to include because that's on the one side as a foreign key So, basically on the employee relation, now we're going to have a branch ID column Same thing down here for a client and branch. So, the branch over here is on the 1 side. And basically, what that means is that we're going to And then same goes for this supervisor relationship. So, on the Employee table we want to And so, over here let's take a look. So, employee we have a super_id And that's because the branch was and the employee was on the N side of the relationship. Which means that we're going to go ahead on the Employee table. And then the same goes for the supervisor ID. So, obviously, with the supervisor ID, So, we have to store it on the Employee table. And then down here in the Client table And again, that's because the branch You see, branch is on the one side And so, that's why we stored branch_id All right, and then Step 5 is the mapping So, in this case, we only have one instance of this. A client can work with an employee So, what we want to do in this case So, we're actually going to create a new table whose primary key is a combination And we're also going to So, over here, the client's primary key is client_id. The employee's primary key is emp_id. So, what we're going to do is create a new table where we have a composite key And actually, this would be because both of it's keys are actually foreign keys. And we want to store in this relationship or any attributes on the relationship So, down here we created a new table And you'll notice the key So, both of these individual parts of the primary key So, this is a special situation. And then over here we have total sales which was the attribute that we stored And so, basically that, in essence, is going to allow us Now if you have more complex relationships, then it gets a little bit more complex In this case, I'm just kind of looking at I don't want to get too complex. So, in this case, in five steps, we're able to basically But if you do have more advanced types of ER But for our cases, there's only going to be five steps And so, now basically what we have here Each of these relations is itself a database table. So, when I'm designing my database now, I know I have to have an Employee table with Client table, etc. And so, what we can do also is people will draw little arrows So, this can get a little bit messy But you can see over here, for employee, on the employee's foreign keys So, for example, super_id, branch_id I have a little line here going over Mgr_id over here, we have a line So, this is basically just like mapping out This, like I said, it gets a little messy. And it's pretty difficult to read But you also - you'll see people doing this a lot, So, now that we have our, you know, we can actually create a database. So, over here I have an example of what So, we have our actually database. So, up here we have all our employees. And you'll notice we have our employee ID so we can define like the supervisor So, like Angela Martin's supervisor So, Angela Martin's supervisor You'll see how it easy it is now for us Angela Martin also works at branch_id number 2. So, that links over here to the branch. So, branch 2 is Scranton, etc. And then we have our Client table over here. And we have our Works With table. So, the Works With table And then we have our Branch Supplier table. So, all of these got basically put into our database And so, really what this is, is it's a way for us like we saw in the last video, to our actual In designing relational database schemas, and you know, the schema It's not super easy. If you have a very simple database, you know, or requirements, then obviously the schema and you might not need something like an ER diagram. But with something like this, So, here's the thing, you don't necessarily You don't need it. But it's a really, really great way into an actual database schema And so, that kind of show you guys Now, here's the thing with ER diagram. I only showed you guys one example. And I think this is actually a pretty good example But, you know, the only way that your going to get and, you know, converting them into database And so, just by practicing. So, obviously, I'm not going to spend, you know, but hopefully this example kind of shows you guys and, you know, design your own ER diagrams and then convert them into database schemas And all of the rules that I showed you guys for converting ER diagram into relations So, what we talked about in this video will, you know, you can basically take any ER diagram