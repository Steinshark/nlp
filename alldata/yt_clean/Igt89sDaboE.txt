A couple of hours ago Next.js version 15 was released, so the next big major new version of Next.js, though I'll say right away, unlike previous major Next.js versions like 13 and 14, Next.js 15 actually, thankfully I guess, doesn't change too much, though it does contain some important changes or updates to be aware of. Now there is an official announcement blog post, which you find below the video, and in that blog post you for example learn that upgrading should be pretty easy thanks to a code mod, so a command you can execute in your existing Next.js projects that should ensure that all important changes are made to your code automatically. That's the idea. But speaking of changes, there actually are only two really big changes that could have an impact on your code and or how your application works in my opinion. And the first change is the async request APIs change. Now the idea here is that certain Next.js APIs, certain functions that are built into Next.js that you can call, like the cookies function, are now actually async. Though for a transition period until the next major version of Next.js you can also still use these functions synchronously as you used to, but in the future you'll have to use them in conjunction with async await, so you won't be able to use them synchronously once Next.js version 16 is released, at least that's the plan. Other than that, those functions still do what they did before, you just have to use them slightly differently. So that's one change, but in my opinion a bit more important change brought upon us by Next.js 15 is that with that newest major version the caching behavior of Next.js applications becomes a bit less aggressive, because Next.js when using the app router, and pretty much all these changes here affect the app router to be honest, but when using the app router Next.js used to be pretty aggressive regarding how it caches stuff, and that could lead to some weird behaviors or bugs if you were not prepared for it, if you forgot about it, and so on. Now you could always change the caching behavior, and I show you all about that in my Next.js course where I teach you Next.js from the ground up, step by step, in great depth, but now with Next.js 15 some parts of the built-in caching behavior get a bit less aggressive. Most importantly when using the fetch function on the server side with Next.js, it does support that, when using that there now by default it's not going to be cached. So now with Next.js 15 when using the fetch function you're going to send more requests to whichever API you're reaching out to. With Next.js 14, and I show that in my course as mentioned, with Next.js 14 you could use fetch and after the initial fetch no subsequent requests would be sent to the backend API unless you told Next.js to do so. With Next.js 15 that changes, now you'll see more requests being sent to the backend simply because now there is no caching by default. Specifically it's the cache setting you can set on fetch which is now no store by default and it used to be force cache by default so that switched now with Next.js 15 and therefore you can of course go back to the Next.js 14 behavior if you want to by setting the cache setting on the fetch function to force cache. Again that is still an option. Now in addition to the fetch function caching behavior which is arguably the most important change, get route handlers are now also cached differently. They are no longer cached by default so if you're exposing an API route in your Next.js app router application, a get request API route, it's now no longer cached by default when using it in your Next.js application and so on. And the client router cache where on the frontend router page data would be cached and reused is now also less aggressive which should also help you work around some weird behavior. behaviors you might have encountered if you weren't aware of that caching behavior. Now there still are some scenarios where router data or page data therefore in the end is cached and reused on the frontend, for example for back-forward navigation, but when switching pages through the regular page navigation for example, there no longer is this aggressive page caching behavior. So that's also important to know of course. And these are basically the most important or impactful changes that might need code adjustments in your applications if you want to update to Next 15, though you can try using that code mod I mentioned to simplify this upgrading process. Now besides those changes, Next 15 also is ready to support React 19 whenever that will come out. I updated my React book for React 19 and I'm desperately waiting for React 19 to be released to drop it, though you can pre-order if you want to, but that's just a side note. So Next.js 15 is ready for React 19 and it also has experimental support for the React compiler which was essentially announced together with the React 19 release candidate earlier this year so that the React compiler hopefully can also optimize performance of your Next.js applications in the future. Other than that we got some error message improvements and that might also be interesting, TurboPack is now marked as stable, though to be very honest with Next.js things are sometimes marked as stable if they're not super stable yet, but maybe it's different here. So the idea is that TurboPack is essentially a different build tool running behind the scenes when you start your development server and by using next-dev-turbo for starting the development server instead of just next-dev without dash dash turbo, by adding this flag you're using TurboPack and the idea here is that it gives you faster builds, a faster development server and that's a great thing to have because Next.js with the app router could be pretty slow, the development server could be pretty slow. So that's awesome, that being stable is awesome, let's hope it is really stable and therefore this of course at some point will probably become the default, right now you still have to use this flag to use TurboPack but I guess with future Next.js versions that will be the default build tool running behind the scenes. It of course shouldn't require any code changes though because it's just a thing that powers and builds and runs your application in the end. Now one other interesting new feature introduced by Next.js is the form component, a new component built into Next.js which you can use in your React components which you can use if you're building a form that primarily is there to navigate to a different page. So not so much a sign up form or anything like that where you want to create a resource on the backend and then redirect to another page but instead if you're building something like a search bar, that's the example they're also giving in their announcement blog post. The idea here is that you enter a search term and you in the end then just want to send a get request to go to a different page with that search term passed to that page so that you can perform the search there, things like that. In such cases you can use this form component that's now built into Next.js and it will do things like prefetch the page you're about to navigate to and therefore this component can simply help you save some time if you're building such kind of page navigations in your application. Again if you're building a sign up form or any other form where you're submitting a resource or data for a resource to be created on the backend you would typically probably still use the regular form element that exists in HTML and not use this component but for other cases where you're trying to send a get request essentially this component can be pretty interesting and useful. Now there also are some other changes, some other features and tweaks which might matter for some applications. There are interesting behind the scenes changes like enhanced security for server actions which essentially is a change that should ensure that your server actions are harder to be called from outside your application so that people can't abuse your server actions or call them in ways you don't want them to be called. There are useful changes like this but the most important changes regarding code impact are the ones I mentioned initially but as you can tell Next.js 15 is really just another release that tries to make the Next.js app router experience smoother, a bit easier and faster to use, a bit more predictable I guess you could say with the caching changes and therefore in my opinion it's a good step into the right direction because Next.js still is an absolutely amazing framework, great for building full stack applications with React but it had some issues with the app router and so on and therefore it's good to see a release like this in my opinion.