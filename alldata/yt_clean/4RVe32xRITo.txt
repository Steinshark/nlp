When it comes to debates around cloud native tooling, few things get more conversation started than this classic battle between Argo and Flux. In this episode of KubeFM, we dive deep into the famous rivalry between two of the most popular GitOps tools in the CNCF landscape, Argo CD and Flux CD. Our guest, Andrei, is a founder of Enix and a cloud systems architect. In this episode, he breaks down the strengths and weaknesses of both tools, helping you understand which one might be the best fit for your team. We'll discuss user experience, access control, extensibility, and how each tool addresses different business themes. Plus, Andrei shares insights from his experience with Tilos Linux, KubeVirt, and LINSTORE, as well as the importance of staying up to date with emerging Kubernetes technologies. This episode is brought to you by DigitalOcean. Now with NVIDIA H100 GPUs available on DigitalOcean Kubernetes. Whether you're a startup building the next big AI model or an enterprise. Scaling complex machine learning workloads, DigitalOcean helps you scale from initial experiments to full production deployments with powerful, cost-effective infrastructure for your Kubernetes workloads. Explore more at digitalocean.com. Okay, Andrei, so can you tell me which three emerging Kubernetes tools you're keeping an eye on? Well, I can put four. The first one is Talos Linux because... This is Kubernetes specific distribution and it is built right how Kubernetes is working but in terms it will be running as distribution as Linux distribution on the node. This is very cool, it's based on controllers and fully API driven so you can configure this system just by sending a configuration file into it so you don't need to use SSH anymore. The second tool is kubevirt. It's more likely Kubernetes add-on which allows you to run traditional virtual machines right in Kubernetes. I really like how Kubernetes API works and I like patterns Kubernetes implement. So, kubevirt implement the same patterns and consuming Kubernetes API for running traditional virtual machines. This is very cool. The second tool is LINSTORE. I believe This is not very popular storage for now, but the popularity is growing every day. But I think that it is fastest and reliable storage in Kubernetes. It can replicate your data right in kernel. So you need to have DRBD kernel module for make it working. But after all, you got really fast and reliable storage for Kubernetes. It can also be used together with kubevirt so you can run virtual machines and they will consume LINSTORE provisioned volumes. And the last project which I keeping an eye on is etcd-operator. It is not yet existing in terms of CNCF because CNCF just started an initiative for creating official etcd-operator. I can say that previously we started our initiative for creating etcd operator and now we're trying to put our code base and donate this project to CNCF. So I have to keep eye on this project at least in terms of form, make it merge it and to control this process as well. Now to get started, can you just let me know about what do you do and who do you work for? For now I'm working for myself. Previously I was working in such companies like Palark and Wedos, it is biggest Czech hosting company. I got a lot of experience on how to operate these bare metal servers, how to make them, how to provision, as well as all the things working under the hood. So when you're working with Kubernetes, you actually, if you're using Kubernetes in cloud, you don't worry about many things like routing, volumes provisioning. I know networking and things like that. So I'm expert in this sphere and I can say you, how can you prepare such environment, especially Kubernetes based environment and how to run it on bare metal. How to run it on bare metal. So for now, I started my own company which packs all this experience into product. So we do open source plot. which helps you to get managed services out of Kubernetes provisioned on bare-metal nodes. How did you get into Cloud Native? Well, I contribute a lot to open source projects. I'm a member of multiple CNCF organizations like Kubernetes, KubeVirt, LINSTORE, Cilium. Lately, they just applied our patch for force device detection. So I'm happy to communicate with these people, even we're trying to organize our processes the same way like... is it done, it is done for CNCF projects. So we have public meetings where everybody can join. And I can say that we are open source company and we're trying to build our processes to be open to for everyone. And what were you before Cloud Native? I was very open to the community. I was still writing a lot of articles. One of my article helped me to get to the place where I'm right now. And I found the power of the articles, of technical articles, because I can collect feedback and you can get more popular. So I think many people see my articles and videos, and I start visiting conferences. So that was my activity. And how do you keep updated with... you know, the Kubernetes ecosystem, cloud native world, it moves very quickly. What works best for you? I visit a lot of CNCF meetings, for example, platform engineering meetings, and also we're trying to focus on the projects we use for solving our own needs. In CozyStack, there are a lot of open source projects and a lot of projects belong to CNCF. It is always needed to keep it updated. So you see you're visiting their meetings and you just watch for those technologies. Sometimes you're trying to fix, to solve your needs. For example, how can you access service running in Kubernetes API, just having access to Kubernetes API? And you can find some tools that are existing, Mirrord or or Telepresence, which can solve that. just google and you find the tool you need if you could go back in time and share one career tip with your younger self what would it be well for now i'm trying to build my own business and i would definitely say that you have to learn product view because it is always fine to be funny cool engineer but you still need to understand how do you sell this technology and what really matters for business, because business gives you money and money makes a progress or technical progress. Excellent. You know, as part of our monthly content discovery, we found this article that you wrote, ArgoCD versus FluxCD. We can call this, you know, the great get up showdown. So we want to take this topic a little bit further with some questions. We've been recording, you know, the KubeFM podcast for a little over a year now on our fourth season, and when we ask our guests about their favorite tools, Argo or Flux are likely to be part of the answer. Why do you think that's the case? I think that both tools are good for their own purpose. So yes, if we're talking about GitOps tool, they're both GitOps tool, but they're doing their job different way. To answer this question, I can mention what is GitOps itself, or what is what process it solves. So if we're talking about GitOps, we usually talk about continuous delivery. So if we need to deliver some software to your environment, we can split this process to CI and CD. So continuous integration and continuous delivery. In CI, we have the set of actions needed to get result in predictable artifact and CD. is the tool which will be used for delivering this artifact to the end environment. So ArgoCD and Flux, they both do CD. So if you have some artifact, Helm chart especially, or Kustomize, they know how to deliver it to the end environment. But I think they do that slightly different. First of all, ArgoCD is good for developers and it is cheap for administrators to implement it in their infrastructure. So if you need to if you're trying to solve how to organize development, how to help your developers to deliver their application to the production or to staging or to dev environment, it might be really good because it gives a lot of features which can be just used out of the box. From the other side, FluxCD is very good for administrators. For example, if you're delivering not an application which you develop by your own, but you want to deliver some infrastructure services like cert-manager, github, NGINX ingress controller, I know, Prometheus and things like infrastructure things, FluxCD works better. FluxCD can also be used for preparing reproducible environments for that reason we also use FluxCD for preparing our platform so you can use FluxCD for bootstrap, I know, 100 clusters and to fill them with the same configuration. But FluxCD is more likely to be automated and ArgoCD is more about interacting with developers. With that in mind, how do ArgoCD and FluxCD implement GitOps? They do that different way. So we can say that ArgoCD is usually used, they implement it different way. We can say that ArgoCD implements pattern when you have one single ArgoCD instance, and you can add multiple clusters to this ArgoCD, and you use this ArgoCD for a central point for controlling all of your deployments. From the other side, FluxCD can be used as component of your cluster, so it implements the controller pattern in Kubernetes. It just extends your Kubernetes to add the opportunity storing the desired state in Git or other sources. So for that reason, ArgoCD has really good, beautiful UI, which you can give to your developers and can use for seeing the process of your deployment. And FluxCD since it is based on, it is more like a Kubernetes add-on. It has really cool CLI interface, which allows you to quickly connect FluxCD to Git repository. So it can automatically issue tokens and configure your cluster to use Git repository. Now, you wrote an article that compared Argo CD and FluxCD. How did you devise a list of comparison criteria? And what are they? First of all, if you're considering these tools, then we need to understand that you're solving some business need and what the business need you're trying to solve. If you want to provide simple interface for your developers, if you want to deliver the code and manage the releasing cycle, if you want to have staging production and development environments and you want to just push your code into them, ArgoCD might be better because it provides you all everything need to quickly start doing this. But if you want to configure reproducible environments, for example, if you have tons of Kubernetes clusters, or at least if you have just three, but you want to have have them similar, configured similar components, FluxCD might be better. So I think that FluxCD is very well for delivering system components and Helm charts. And also it is nice if you want to build reproducible environments or platforms with components which you're going to use in multiple Kubernetes clusters. Let's take a look, a closer look at the interface and user experience. Wouldn't we say that this is an easy win for Argo CD? From one point of view, yes. If we will consider how people choosing the technologies, First of all, they're looking at the face, actually how it looks, and ArgoCD looks very well. So it is easy to start using it. You can install it in Kubernetes cluster, then access web interface, and then you can put everything you want in this. You can configure ArgoCD especially through this web interface. It gives you a lot of multiple needed features out of the box so your developers can control. They can automatically add the git repositories, they can see logs, restart pods, you can even do exec into the pod which might be really useful. And one of the killer feature of ArgoCD that if you use it for developers, you don't need to provide any access for Kubernetes API anymore to them. So if you need to show them the state of the deployment, you can do that directly using ArgoCD. They will see this in dashboard and do the need actions for them. From the other point of view, This approach is not very declarative. So, FluxCD, it forces you to keep all the configuration in Git and describe it in Kubernetes resources. You can organize the same mechanism for developers. You can use FluxCD for developers as well for delivering business applications. But it might take you to some advantages. For example, if you want to provide logs you need to organize access to Grafana or to Elastic. You can also face the... There are a lot of issues like that, especially it is very good as framework, but it does not provide you end-user interface. But this is cool that it uses native Kubernetes or kube resources. And... It have really cool CLI interface, which allows you to connect Kubernetes cluster to the Git repository. So it might be really useful for administrators who really work with CLI with in common line they packing Helm charts. So it shouldn't be a problem to them to connect Git repository storing Flux configuration with Kubernetes. To follow up, does a graphical user interface make onboarding easier in the Kubernetes cluster? Could we say that Argo CD is easier to start with? I think yes, but you can face with some difficulties. For example, ArgoCD approach is not very compatible with existing Helm charts. ArgoCD has its own RBAC model, so you can configure roles the way you think would be better for ArgoCD, but it's not the same roles like you have in Kubernetes. They implement different approach for this. It might be difficult to install ArgoCD and configure it declaratively, because the configuration format is like CSV files inside YAML. It looks really weird. I think ArgoCD is intended to provide you this web interface and provide this configuration through the web interface. One time we also had this flow when we had two ArgoCDs once. for staging second for production we were configuring staging ArgoCD through the web interface then downloading this configuration from the staging and putting it into production with some modifications but if you want to just to try i think ArgoCD is a good thing to start there's still there is a question what the problem you saw if you want to just configure your cluster to install common charts like cert-manager, prometheus and things like that. It might be better to use FluxCD because you will tire to fix all of your charts to make it working in ArgoCD. With FluxCD you can just simply connect your cluster to the git and just say what the charts with which parameters should be deployed and it will deploy all of these Helm charts automatically. This is very cool. So I think ArgoCD is good if you're looking for a tool which would help you to deliver your own application. But if you're a Kubernetes administrator and if you want to deliver standard application stack into Kubernetes, choose FluxCD. And is FluxCD better if you have a lot of Helm charts? This is a slightly weird question. I think I have both. and ArgoCD can also work with a lot of Helm charts. They think they're doing that different way. So if you want to deploy official... if you want to deploy standard ordinary Helm charts in ArgoCD, they usually should be fixed somehow. FluxCD used native Helm to install Helm charts and native tools. So you can see them in Helm LS, for example. You can see... you can... operate them with them the same way like usually using helm but in declarative format from my point of view FluxCD should be better at scale That means that if you use ArgoCD, it is intended to have single ArgoCD instance for everything. In case of FluxCD, usually every Kubernetes cluster should have their own FluxCD controller installed. Most companies might not want to grant unlimited access to deploy anything you want. How do Argo CD and Flux CD handle access control? What options are available to restrict deployments? This is an interesting question. because one of the power of... because one of the feature of GitOps, it allows you to do inspection of what exactly happening right now. So if you do some changes, if you deploy something in ArgoCD, you can always see diff between the desired state and the state... existing state in the cluster. And it will show you exactly what exactly will be changed. That those lines... Chrome manifest will be removed and these ones will be added. You can control it in this phase, but GitOps also means that you can do this at the review phase, so before the changes came into repository to the branch from which GitOps tool is syncing them from. In this way you can prepare the model that, for example, if you have Git repository and your tools, your GitOps operator looking for it, for main branch for example, if you have a Git repository with main branch, you can configure GitOps operator for watching for changes in main and you can restrict any pushes to this branch and follow pull request or mesh request model So you will control all the changes get into this main branch and you will see and predict what exactly will happen. Is ArgoCD's idea to reinvent RBAC good? I don't think this is a really big trouble. This is not convenient to have CSV files in YAML, but they still need to store this data somewhere. And this is cool that storing this in... configuration file. I think it might be worse if they're storing configuration in database. So still it might be difficult to template, but still it is possible. You can configure ArgoCD declarative way. You might feel the pain at the beginning, but if you will came up with good interface for this, you can just template it and use it as is. From the other side, we can see that FluxCD fully utilizes Kubernetes controller pattern. So it has its own custom resources and all the configuration is stored in it. So even standard kube model is working for FluxCD resources. Now, let's talk about extensibility. Engineers might want to integrate ArgoCD or FluxCD to pull secrets from their secret stores of choice. Or... they might want to customize the tool used to template kubernetes resources how can they extend ArgoCD and FluxCD to support those use cases this is good question i think ArgoCD yes for now ArgoCD does not provide you any certificate management so you have few options you can customize ArgoCD by providing additional configuration plugin or you can use secrets which expanded themselves right in Kubernetes. So you can use sealed secrets, for example, put one common encryption key in Kubernetes and they will be unsealed every time you apply these secrets, sealed secrets through the ArgoCD into Kubernetes. This is one of the solutions. From the other point of view, FluxCD have an integration with SOPS. This is a very nice and easy tool for keeping your secrets. in Git repository. It allows you to use it just as is. And this is very cool. And I really appreciate that FluxCD maintainers implemented this feature out of the box. And in your particular case with CozyStack, why did you choose FluxCD for your platform? Mainly because of the standardization. We really like how it works, and we believe this is a feature for our platform. platform building but we don't use FluxCD the usual way we implemented our own approach when FluxCD is used just as Helm operator. So we deliver container with Helm repository and all the needed Helm charts needed be installed in Kubernetes. And then FluxCD syncs the information from those Helm charts and installs them into the same cluster. This allows us to do reproducible environments and do the releases, which ships and update all the components in the cluster. We also implemented very cool development experience for our platform, so you can use standard deps, so you can see for every chart you can do local development and see what will be changed after you apply it. However, we still use ArgoCD to organize delivery of business applications for our customers. So even if we use FluxCD for delivering infrastructure components of the platform. It is also used for the dashboard, for the application they choose to install. But if they need to organize development process, where developer would see the process of the deployment of the business application, they use ArgoCD because they really like how it works and how it looks like. And now the million dollar question, Andrei. We... spoken about different aspects of getting the two tools but I promise I won't tell anyone if you have to choose one that the best which one is going to be i can't say you for sure but i think it depends on the your business need so both tools are very cool and very good from my point of view you have to use it on specific purpose so ArgoCD is good for developers and FluxCD is good for infrastructure administrators. You are a busy person, but you still have enough motivation to write these articles. What was the primary motivation with that? Were you fed up with all the Argo versus Flux fights that are at the order of the day on Reddit? Well, I just came across another dispute in community. They were fighting which tool is better. And I say, hey, both tools are cool. So I decided to write some points. then there were so many points, I decided to put them into an article and publish as I always do. I like to write technical articles to summarize my experience. Sometimes it allows me also to collect feedback from the community if I'm not very sure about something. It might be really useful. So sometimes I can even do some research, like if I write an article about some technology which I don't understand fully. It allows me to find right people and people can correct me. I really like how the community works in this way. And on the article that you wrote, did you get any feedback? Did any fights start? How did the community react to your article? Especially this article was very popular, I think because of the versus. People really like to read articles when you're comparing some technologies. I have experience. in writing and comparing Kubernetes storages. This article also was very popular. So if you want to write a popular article, just compare some technologies. What's next for you? Well, I'm working on my business and I want to put it on track. We are very successful at this phase we're having right now. For now, we are looking for investment. We have a growing amount of customers. We have a really cool team. And this is main point for me right for now is to finish setting our business on a track. Of course, I want to continue contributing to open source projects. The technologies we use in CozyStack, they are all open source and we make partner relationships with them. So we have cross-marketing activities and we're promoting each other. This is very cool because the many technologies we use, they're not very popular and they still need to find a way to get more popular. If we... So CozyStack is somehow combined all of these amazing technologies together and now we're just fighting and for now we're just conquering the world this way. What's the best way for people to get in touch with you? You can follow me on LinkedIn, Twitter, Medium. You can check out our product. So just go on site cozystack.io. So just go to the site cozystack.io. And you can try to attend our community meetings. This is the best thing we did. Every week we make community meetings where everybody can join. And we're discussing really interesting subjects. And you can make influence on the product itself. Andrei, thank you very much for joining us today. Looking forward to the next steps in your company and articles that you'll be writing. As always, being a community-focused person, giving back so that others can learn and make the right choice depending on their use case. Keep up the great work. Thank you. Bye. Bye-bye. Take care.