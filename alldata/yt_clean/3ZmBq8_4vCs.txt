&lt;b&gt;Flowise offers two extremely powerful&lt;/b&gt; &lt;b&gt;solutions for building&lt;/b&gt; &lt;b&gt;complex agent workflows.&lt;/b&gt; &lt;b&gt;Multi-agents and sequential agents.&lt;/b&gt; &lt;b&gt;Deciding which solution to go&lt;/b&gt; &lt;b&gt;with can be rather confusing.&lt;/b&gt; &lt;b&gt;So in this video we'll compare these two&lt;/b&gt; &lt;b&gt;different features by&lt;/b&gt; &lt;b&gt;creating the same project in both.&lt;/b&gt; &lt;b&gt;Let's start by having a look at the&lt;/b&gt; &lt;b&gt;multi-agent example.&lt;/b&gt; &lt;b&gt;Here we have this supervisor node which&lt;/b&gt; &lt;b&gt;is responsible for delegating the tasks&lt;/b&gt; &lt;b&gt;between the different worker nodes.&lt;/b&gt; &lt;b&gt;For example the software developer node&lt;/b&gt; &lt;b&gt;and a code reviewer.&lt;/b&gt; &lt;b&gt;And if we compare this to&lt;/b&gt; &lt;b&gt;the sequential agent example,&lt;/b&gt; &lt;b&gt;you will notice that this&lt;/b&gt; &lt;b&gt;flow looks way more complex,&lt;/b&gt; &lt;b&gt;but this also gives us way more control&lt;/b&gt; &lt;b&gt;over the behavior of our application.&lt;/b&gt; &lt;b&gt;First let's have a look at creating a&lt;/b&gt; &lt;b&gt;multi-agent team using multi-agent.&lt;/b&gt; &lt;b&gt;First I'm going to save my chat flow and&lt;/b&gt; &lt;b&gt;let's call it multi-agent&lt;/b&gt; &lt;b&gt;software development team.&lt;/b&gt; &lt;b&gt;Let's save this and for this example I&lt;/b&gt; &lt;b&gt;simply want a team with two workers.&lt;/b&gt; &lt;b&gt;A software developer and a code reviewer.&lt;/b&gt; &lt;b&gt;With multi-agents this is super simple.&lt;/b&gt; &lt;b&gt;Let's go to add nodes and under&lt;/b&gt; &lt;b&gt;multi-agents let's start&lt;/b&gt; &lt;b&gt;by adding a supervisor node&lt;/b&gt; &lt;b&gt;and let's also assign&lt;/b&gt; &lt;b&gt;an LLM to the supervisor.&lt;/b&gt; &lt;b&gt;So for this I'll use&lt;/b&gt; &lt;b&gt;the chat openai node.&lt;/b&gt; &lt;b&gt;So for the chat openai node&lt;/b&gt; &lt;b&gt;I'll select my credentials,&lt;/b&gt; &lt;b&gt;I'll select the model name as GPT40 and&lt;/b&gt; &lt;b&gt;let's set a temperature of 0.4.&lt;/b&gt; &lt;b&gt;And lastly let's connect our chat openai&lt;/b&gt; &lt;b&gt;node to the supervisor node.&lt;/b&gt; &lt;b&gt;Great! The supervisor is responsible for&lt;/b&gt; &lt;b&gt;delegating the task between&lt;/b&gt; &lt;b&gt;the different worker nodes.&lt;/b&gt; &lt;b&gt;If we open up the additional parameters&lt;/b&gt; &lt;b&gt;we can see that the system prompt was&lt;/b&gt; &lt;b&gt;pre-populated for us&lt;/b&gt; &lt;b&gt;and in this prompt we can see that the&lt;/b&gt; &lt;b&gt;team members is actually a variable&lt;/b&gt; &lt;b&gt;which is dynamically populated for us.&lt;/b&gt; &lt;b&gt;And in this prompt the supervisor is&lt;/b&gt; &lt;b&gt;instructed to decide on which team member&lt;/b&gt; &lt;b&gt;needs to be called next&lt;/b&gt; &lt;b&gt;or to respond with the word finish to&lt;/b&gt; &lt;b&gt;terminate the execution.&lt;/b&gt; &lt;b&gt;We don't have to change anything here.&lt;/b&gt; &lt;b&gt;Let's simply save this prompt, let's&lt;/b&gt; &lt;b&gt;close this popup and&lt;/b&gt; &lt;b&gt;let's assign our workers.&lt;/b&gt; &lt;b&gt;Let's go to add nodes and under&lt;/b&gt; &lt;b&gt;multi-agents let's add two worker nodes.&lt;/b&gt; &lt;b&gt;So I'll simply copy this node and let's&lt;/b&gt; &lt;b&gt;assign the name and worker prompts.&lt;/b&gt; &lt;b&gt;For the first worker let's&lt;/b&gt; &lt;b&gt;call it software developer.&lt;/b&gt; &lt;b&gt;And for the worker prompt let's enter&lt;/b&gt; &lt;b&gt;something like you are&lt;/b&gt; &lt;b&gt;a software developer.&lt;/b&gt; &lt;b&gt;Build an app based on&lt;/b&gt; &lt;b&gt;the user's requirements.&lt;/b&gt; &lt;b&gt;Use technologies like&lt;/b&gt; &lt;b&gt;React, JavaScript and Talwin CSS.&lt;/b&gt; &lt;b&gt;Pass the code to the&lt;/b&gt; &lt;b&gt;code reviewer once done.&lt;/b&gt; &lt;b&gt;You can complete your task once the code&lt;/b&gt; &lt;b&gt;reviewer provides a suitable response.&lt;/b&gt; &lt;b&gt;Great, let's have a&lt;/b&gt; &lt;b&gt;look at our second worker.&lt;/b&gt; &lt;b&gt;For the worker name let's&lt;/b&gt; &lt;b&gt;call this code reviewer.&lt;/b&gt; &lt;b&gt;And for the worker prompt let's enter&lt;/b&gt; &lt;b&gt;your job is to perform a code review.&lt;/b&gt; &lt;b&gt;Check that the code is well written,&lt;/b&gt; &lt;b&gt;performant and&lt;/b&gt; &lt;b&gt;contains suitable comments.&lt;/b&gt; &lt;b&gt;Always pass your feedback&lt;/b&gt; &lt;b&gt;back to the software developer.&lt;/b&gt; &lt;b&gt;Let's save this and let's also attach our&lt;/b&gt; &lt;b&gt;workers to the supervisor node like so.&lt;/b&gt; &lt;b&gt;When using multi-agents to create AI&lt;/b&gt; &lt;b&gt;teams this is&lt;/b&gt; &lt;b&gt;actually all you have to do.&lt;/b&gt; &lt;b&gt;Let's save this flow and let's test it.&lt;/b&gt; &lt;b&gt;Let's ask you to build an app for us like&lt;/b&gt; &lt;b&gt;build a to-do list app.&lt;/b&gt; &lt;b&gt;The execution is complete and let's have&lt;/b&gt; &lt;b&gt;a look at what we got back.&lt;/b&gt; &lt;b&gt;First we can see that the supervisor&lt;/b&gt; &lt;b&gt;correctly determined&lt;/b&gt; &lt;b&gt;that the next step should&lt;/b&gt; &lt;b&gt;be the software developer.&lt;/b&gt; &lt;b&gt;So the software developer was executed&lt;/b&gt; &lt;b&gt;and produced all of this code.&lt;/b&gt; &lt;b&gt;This was then passed&lt;/b&gt; &lt;b&gt;back to the supervisor&lt;/b&gt; &lt;b&gt;who then determined that the code&lt;/b&gt; &lt;b&gt;reviewer should be called next.&lt;/b&gt; &lt;b&gt;And the code reviewer therefore returned&lt;/b&gt; &lt;b&gt;these refinements to the solution.&lt;/b&gt; &lt;b&gt;This feedback was then passed&lt;/b&gt; &lt;b&gt;back to the software developer&lt;/b&gt; &lt;b&gt;and the software developer and the code&lt;/b&gt; &lt;b&gt;reviewer went back and forth a few times&lt;/b&gt; &lt;b&gt;and then finally&lt;/b&gt; &lt;b&gt;returned this final feedback.&lt;/b&gt; &lt;b&gt;Great, this was very easy to set up&lt;/b&gt; &lt;b&gt;and we can easily add more workers to&lt;/b&gt; &lt;b&gt;this project without&lt;/b&gt; &lt;b&gt;having to change anything else.&lt;/b&gt; &lt;b&gt;One limitation with this though is that&lt;/b&gt; &lt;b&gt;we have very little&lt;/b&gt; &lt;b&gt;control over our application&lt;/b&gt; &lt;b&gt;and we are relying on the supervisor to&lt;/b&gt; &lt;b&gt;make the right decisions for us.&lt;/b&gt; &lt;b&gt;The best we can do is try and adjust the&lt;/b&gt; &lt;b&gt;supervisor system prompt&lt;/b&gt; &lt;b&gt;or the worker prompts effective behavior&lt;/b&gt; &lt;b&gt;of this application.&lt;/b&gt; &lt;b&gt;Now in order to understand&lt;/b&gt; &lt;b&gt;how sequential agents work&lt;/b&gt; &lt;b&gt;we will try to replicate this application&lt;/b&gt; &lt;b&gt;using only the nodes&lt;/b&gt; &lt;b&gt;available to the sequential agents.&lt;/b&gt; &lt;b&gt;Let's create a new flow and let's call&lt;/b&gt; &lt;b&gt;this sequential agent software team.&lt;/b&gt; &lt;b&gt;Let's save this and let's start by adding&lt;/b&gt; &lt;b&gt;a node to the canvas&lt;/b&gt; &lt;b&gt;and instead of going to multi-agents we&lt;/b&gt; &lt;b&gt;will now scroll down&lt;/b&gt; &lt;b&gt;to sequential agents.&lt;/b&gt; &lt;b&gt;Sequential agents need a starting node&lt;/b&gt; &lt;b&gt;and this represents&lt;/b&gt; &lt;b&gt;the start of our project.&lt;/b&gt; &lt;b&gt;Let's also attach a chat model so under&lt;/b&gt; &lt;b&gt;add nodes and on the chat models&lt;/b&gt; &lt;b&gt;I'm going to add the chat&lt;/b&gt; &lt;b&gt;openai node to the canvas.&lt;/b&gt; &lt;b&gt;I'll select my credentials, let's select&lt;/b&gt; &lt;b&gt;the model name as GPT40&lt;/b&gt; &lt;b&gt;and let's set the&lt;/b&gt; &lt;b&gt;temperature to something like 0.2&lt;/b&gt; &lt;b&gt;as we do want our models to follow our&lt;/b&gt; &lt;b&gt;prompt instructions.&lt;/b&gt; &lt;b&gt;Let's attach our model&lt;/b&gt; &lt;b&gt;to the starting node.&lt;/b&gt; &lt;b&gt;We don't actually need agent memory for&lt;/b&gt; &lt;b&gt;this example but we do need state.&lt;/b&gt; &lt;b&gt;So let's go to add nodes&lt;/b&gt; &lt;b&gt;and under sequential agents&lt;/b&gt; &lt;b&gt;let's add the state node and let's attach&lt;/b&gt; &lt;b&gt;our state node to our starting node.&lt;/b&gt; &lt;b&gt;Great! We will have a look at why we need&lt;/b&gt; &lt;b&gt;the state node in a second&lt;/b&gt; &lt;b&gt;but let's first&lt;/b&gt; &lt;b&gt;continue with our application.&lt;/b&gt; &lt;b&gt;Once the application starts we want a&lt;/b&gt; &lt;b&gt;supervisor node to be executed.&lt;/b&gt; &lt;b&gt;The supervisor will be responsible for&lt;/b&gt; &lt;b&gt;determining which node&lt;/b&gt; &lt;b&gt;should be called next.&lt;/b&gt; &lt;b&gt;So let's go to add nodes&lt;/b&gt; &lt;b&gt;and with the sequential agents&lt;/b&gt; &lt;b&gt;we need to think which node&lt;/b&gt; &lt;b&gt;we will use for our supervisor.&lt;/b&gt; &lt;b&gt;We can either set an&lt;/b&gt; &lt;b&gt;agent node or an allyl m node.&lt;/b&gt; &lt;b&gt;For the supervisor I will&lt;/b&gt; &lt;b&gt;be using the allyl m node&lt;/b&gt; &lt;b&gt;and this won't make sense in a second.&lt;/b&gt; &lt;b&gt;Let's connect the starting node to the&lt;/b&gt; &lt;b&gt;allyl m node and let's&lt;/b&gt; &lt;b&gt;call this supervisor.&lt;/b&gt; &lt;b&gt;The supervisors function is simply to&lt;/b&gt; &lt;b&gt;determine which node to call next&lt;/b&gt; &lt;b&gt;and to set a variable in state.&lt;/b&gt; &lt;b&gt;So the allyl m node would be perfect for&lt;/b&gt; &lt;b&gt;that as the allyl m nodes&lt;/b&gt; &lt;b&gt;allow us to extract information from the&lt;/b&gt; &lt;b&gt;output and then update a state variable.&lt;/b&gt; &lt;b&gt;So let's set up the supervisor node.&lt;/b&gt; &lt;b&gt;Within additional parameters let's start&lt;/b&gt; &lt;b&gt;by setting a system prompt.&lt;/b&gt; &lt;b&gt;Let's enter you are a supervisor tasked&lt;/b&gt; &lt;b&gt;with managing a conversation&lt;/b&gt; &lt;b&gt;between the following workers.&lt;/b&gt; &lt;b&gt;With a multi-agent node the list of&lt;/b&gt; &lt;b&gt;workers was simply a variable&lt;/b&gt; &lt;b&gt;which was dynamically populated for you.&lt;/b&gt; &lt;b&gt;But with the sequential agents we&lt;/b&gt; &lt;b&gt;actually have to list&lt;/b&gt; &lt;b&gt;the names of the agents&lt;/b&gt; &lt;b&gt;or workers within this flow.&lt;/b&gt; &lt;b&gt;This provide further instructions like&lt;/b&gt; &lt;b&gt;given the following user's request&lt;/b&gt; &lt;b&gt;respond with a worker to act next.&lt;/b&gt; &lt;b&gt;Each worker will perform a task and&lt;/b&gt; &lt;b&gt;respond with their results and status.&lt;/b&gt; &lt;b&gt;When finished respond with finish.&lt;/b&gt; &lt;b&gt;Select strategically to minimize the&lt;/b&gt; &lt;b&gt;number of steps taken.&lt;/b&gt; &lt;b&gt;Let's save the system prompt and let's&lt;/b&gt; &lt;b&gt;also add a human prompt.&lt;/b&gt; &lt;b&gt;The human prompt is a special kind of&lt;/b&gt; &lt;b&gt;prompt which will be appended at the end&lt;/b&gt; &lt;b&gt;of the list of messages.&lt;/b&gt; &lt;b&gt;Let's enter something like given the&lt;/b&gt; &lt;b&gt;conversation above who should&lt;/b&gt; &lt;b&gt;act next or should be finished.&lt;/b&gt; &lt;b&gt;Select one of software&lt;/b&gt; &lt;b&gt;developer or code reviewer.&lt;/b&gt; &lt;b&gt;So at the start of our application the&lt;/b&gt; &lt;b&gt;system prompt will be added&lt;/b&gt; &lt;b&gt;at the very top of our prompt.&lt;/b&gt; &lt;b&gt;Then each of our workers will run and&lt;/b&gt; &lt;b&gt;append their messages to&lt;/b&gt; &lt;b&gt;the conversation history.&lt;/b&gt; &lt;b&gt;Then this human prompt will be added at&lt;/b&gt; &lt;b&gt;the very end of the conversation&lt;/b&gt; &lt;b&gt;and then instruct this model to figure&lt;/b&gt; &lt;b&gt;out which node to call next.&lt;/b&gt; &lt;b&gt;I hope that makes sense.&lt;/b&gt; &lt;b&gt;Now the result of executing this node&lt;/b&gt; &lt;b&gt;will be either software developer,&lt;/b&gt; &lt;b&gt;code reviewer or the word finish.&lt;/b&gt; &lt;b&gt;So we just want to extract that single&lt;/b&gt; &lt;b&gt;word and we can do that&lt;/b&gt; &lt;b&gt;using the JSON structured output.&lt;/b&gt; &lt;b&gt;Let's click on add item and let's extract&lt;/b&gt; &lt;b&gt;a value called next.&lt;/b&gt; &lt;b&gt;Next we'll have a type of enum which is&lt;/b&gt; &lt;b&gt;simply a list of possible values.&lt;/b&gt; &lt;b&gt;These possible values&lt;/b&gt; &lt;b&gt;will be software developer,&lt;/b&gt; &lt;b&gt;code reviewer, so I'll simply paste these&lt;/b&gt; &lt;b&gt;into this field, comma, finish.&lt;/b&gt; &lt;b&gt;So looking at the values we've got&lt;/b&gt; &lt;b&gt;software developer,&lt;/b&gt; &lt;b&gt;comma, code reviewer, finish.&lt;/b&gt; &lt;b&gt;And for the description I'll&lt;/b&gt; &lt;b&gt;enter the role to act next.&lt;/b&gt; &lt;b&gt;That's it.&lt;/b&gt; &lt;b&gt;So the end result of this node will&lt;/b&gt; &lt;b&gt;simply be either software developer,&lt;/b&gt; &lt;b&gt;code reviewer or the word finish.&lt;/b&gt; &lt;b&gt;In fact let's go ahead and test out this&lt;/b&gt; &lt;b&gt;node by itself by adding&lt;/b&gt; &lt;b&gt;an end node to this project&lt;/b&gt; &lt;b&gt;and let's attach the LLM to the end node.&lt;/b&gt; &lt;b&gt;Great.&lt;/b&gt; &lt;b&gt;Let's save this flow and&lt;/b&gt; &lt;b&gt;in the chat let's enter,&lt;/b&gt; &lt;b&gt;build a to-do list app and the result&lt;/b&gt; &lt;b&gt;from executing this&lt;/b&gt; &lt;b&gt;will be a JSON structure&lt;/b&gt; &lt;b&gt;with a property called next and a value&lt;/b&gt; &lt;b&gt;of software developer.&lt;/b&gt; &lt;b&gt;Now we need to figure out how we can use&lt;/b&gt; &lt;b&gt;the results from the LLM node,&lt;/b&gt; &lt;b&gt;so this value over here to conditionally&lt;/b&gt; &lt;b&gt;calling the correct agent.&lt;/b&gt; &lt;b&gt;So let's close the chat, let's delete&lt;/b&gt; &lt;b&gt;this end node and&lt;/b&gt; &lt;b&gt;let's add a condition node.&lt;/b&gt; &lt;b&gt;So on the sequential agents&lt;/b&gt; &lt;b&gt;let's add this condition node&lt;/b&gt; &lt;b&gt;and let's attach the LLM&lt;/b&gt; &lt;b&gt;node to our condition node.&lt;/b&gt; &lt;b&gt;Let's call our condition node, determine&lt;/b&gt; &lt;b&gt;next node and within the conditions,&lt;/b&gt; &lt;b&gt;let's add two conditions.&lt;/b&gt; &lt;b&gt;So for the variable we could try and use&lt;/b&gt; &lt;b&gt;the output from the previous node,&lt;/b&gt; &lt;b&gt;so the LLM node, but a better&lt;/b&gt; &lt;b&gt;implementation is to use state.&lt;/b&gt; &lt;b&gt;So what we could do is take&lt;/b&gt; &lt;b&gt;the output from this LLM node&lt;/b&gt; &lt;b&gt;and install it in state and these state&lt;/b&gt; &lt;b&gt;values will be available to all the&lt;/b&gt; &lt;b&gt;agents within this flow.&lt;/b&gt; &lt;b&gt;So within state let's click on additional&lt;/b&gt; &lt;b&gt;parameters and let's&lt;/b&gt; &lt;b&gt;create a new property&lt;/b&gt; &lt;b&gt;which I'll call next.&lt;/b&gt; &lt;b&gt;For the operation let's select replace&lt;/b&gt; &lt;b&gt;and initially this value will be blank.&lt;/b&gt; &lt;b&gt;Let's go to update state, let's click on&lt;/b&gt; &lt;b&gt;add item and when we&lt;/b&gt; &lt;b&gt;double click on the key value,&lt;/b&gt; &lt;b&gt;we can see the property that we just&lt;/b&gt; &lt;b&gt;created in the state called next&lt;/b&gt; &lt;b&gt;and for the value we can now assign the&lt;/b&gt; &lt;b&gt;value which we created&lt;/b&gt; &lt;b&gt;in the structured output&lt;/b&gt; &lt;b&gt;which we called next as well.&lt;/b&gt; &lt;b&gt;So for the value let's click on flow dot&lt;/b&gt; &lt;b&gt;output dot and let's call this next.&lt;/b&gt; &lt;b&gt;This flow dot output is actually&lt;/b&gt; &lt;b&gt;referring to the output&lt;/b&gt; &lt;b&gt;of this node, the LLM node,&lt;/b&gt; &lt;b&gt;and in this output we have&lt;/b&gt; &lt;b&gt;this property called next.&lt;/b&gt; &lt;b&gt;So we're simply assigning the value of&lt;/b&gt; &lt;b&gt;next to the state value of next.&lt;/b&gt; &lt;b&gt;Great, so back in our condition for the&lt;/b&gt; &lt;b&gt;variable we can now select that next&lt;/b&gt; &lt;b&gt;property within state&lt;/b&gt; &lt;b&gt;and now we can say that if state is equal&lt;/b&gt; &lt;b&gt;to a value of software developer,&lt;/b&gt; &lt;b&gt;then we want to trigger the&lt;/b&gt; &lt;b&gt;output of software developer.&lt;/b&gt; &lt;b&gt;Then let's create another condition also&lt;/b&gt; &lt;b&gt;on the next value in state&lt;/b&gt; &lt;b&gt;and if this is equal to code reviewer,&lt;/b&gt; &lt;b&gt;then we want to trigger&lt;/b&gt; &lt;b&gt;the output of code reviewer.&lt;/b&gt; &lt;b&gt;Let's save this and you will now notice&lt;/b&gt; &lt;b&gt;that on the condition node&lt;/b&gt; &lt;b&gt;we now have different outputs&lt;/b&gt; &lt;b&gt;for code reviewer, software&lt;/b&gt; &lt;b&gt;developer, and an end state.&lt;/b&gt; &lt;b&gt;This end state will be triggered when the&lt;/b&gt; &lt;b&gt;LLM node returns a value of finish&lt;/b&gt; &lt;b&gt;or anything that's not code&lt;/b&gt; &lt;b&gt;reviewer or software developer.&lt;/b&gt; &lt;b&gt;Let's start by adding our two workers&lt;/b&gt; &lt;b&gt;under add nodes under sequential agents.&lt;/b&gt; &lt;b&gt;Let's add the agent node.&lt;/b&gt; &lt;b&gt;I'm actually going to duplicate this node&lt;/b&gt; &lt;b&gt;and let's start with&lt;/b&gt; &lt;b&gt;our software developer.&lt;/b&gt; &lt;b&gt;For the agent name let's set software&lt;/b&gt; &lt;b&gt;developer and for the system prompt,&lt;/b&gt; &lt;b&gt;let's enter something like&lt;/b&gt; &lt;b&gt;you are a software developer.&lt;/b&gt; &lt;b&gt;Build an app based on&lt;/b&gt; &lt;b&gt;the user's requirements.&lt;/b&gt; &lt;b&gt;Use technologies like react, javascript,&lt;/b&gt; &lt;b&gt;development, and node&lt;/b&gt; &lt;b&gt;for creating the app.&lt;/b&gt; &lt;b&gt;Always pass the code&lt;/b&gt; &lt;b&gt;to the code reviewer.&lt;/b&gt; &lt;b&gt;The process may be completed once the&lt;/b&gt; &lt;b&gt;code reviewer provides a suitable review.&lt;/b&gt; &lt;b&gt;Then let's have a look&lt;/b&gt; &lt;b&gt;at our second worker.&lt;/b&gt; &lt;b&gt;Let's give it a name of code reviewer and&lt;/b&gt; &lt;b&gt;for the system prompt let's enter&lt;/b&gt; &lt;b&gt;your job is to review code&lt;/b&gt; &lt;b&gt;from the software developer.&lt;/b&gt; &lt;b&gt;Ensure that good coding practices were&lt;/b&gt; &lt;b&gt;followed and that the&lt;/b&gt; &lt;b&gt;code is well commented.&lt;/b&gt; &lt;b&gt;Pass your feedback back to the software&lt;/b&gt; &lt;b&gt;developer once done.&lt;/b&gt; &lt;b&gt;Now let's attach our code reviewer from&lt;/b&gt; &lt;b&gt;the conditions output&lt;/b&gt; &lt;b&gt;to our code review agent.&lt;/b&gt; &lt;b&gt;Let's do the same for the software&lt;/b&gt; &lt;b&gt;developer and let's&lt;/b&gt; &lt;b&gt;also add an end state.&lt;/b&gt; &lt;b&gt;So let's go to add nodes.&lt;/b&gt; &lt;b&gt;Let's grab our end node and let's attach&lt;/b&gt; &lt;b&gt;this end output from the condition&lt;/b&gt; &lt;b&gt;and let's attach it to our end node.&lt;/b&gt; &lt;b&gt;Great.&lt;/b&gt; &lt;b&gt;We will improve this end&lt;/b&gt; &lt;b&gt;state in a few minutes,&lt;/b&gt; &lt;b&gt;but let's first focus on getting these&lt;/b&gt; &lt;b&gt;two worker nodes working.&lt;/b&gt; &lt;b&gt;So the first time we run this&lt;/b&gt; &lt;b&gt;application, the next state&lt;/b&gt; &lt;b&gt;will be blank and the supervisor&lt;/b&gt; &lt;b&gt;node will try to determine&lt;/b&gt; &lt;b&gt;which agent to call next.&lt;/b&gt; &lt;b&gt;Initially that's most likely going to be&lt;/b&gt; &lt;b&gt;the software developer.&lt;/b&gt; &lt;b&gt;Therefore the condition node will call&lt;/b&gt; &lt;b&gt;this software developer&lt;/b&gt; &lt;b&gt;node who will produce some&lt;/b&gt; &lt;b&gt;sort of output.&lt;/b&gt; &lt;b&gt;Now each of these agent nodes&lt;/b&gt; &lt;b&gt;need some sort of end state.&lt;/b&gt; &lt;b&gt;So after this node is executed, what is&lt;/b&gt; &lt;b&gt;it supposed to do next?&lt;/b&gt; &lt;b&gt;This can either be an end node or a loop.&lt;/b&gt; &lt;b&gt;And for this example, we do want a loop.&lt;/b&gt; &lt;b&gt;So under sequential&lt;/b&gt; &lt;b&gt;agents, let's add a loop.&lt;/b&gt; &lt;b&gt;Let's attach the agent to the loop node&lt;/b&gt; &lt;b&gt;and we want to loop&lt;/b&gt; &lt;b&gt;back to the supervisor.&lt;/b&gt; &lt;b&gt;So I'll actually copy the name of the&lt;/b&gt; &lt;b&gt;supervisor and paste it into the loop.&lt;/b&gt; &lt;b&gt;Let's do the same thing&lt;/b&gt; &lt;b&gt;for the code reviewer agent.&lt;/b&gt; &lt;b&gt;Like so.&lt;/b&gt; &lt;b&gt;This simply means that after the software&lt;/b&gt; &lt;b&gt;developer has executed,&lt;/b&gt; &lt;b&gt;it will append its output to the message&lt;/b&gt; &lt;b&gt;list and then loop back to the supervisor&lt;/b&gt; &lt;b&gt;node over here.&lt;/b&gt; &lt;b&gt;The supervisor will now attempt to figure&lt;/b&gt; &lt;b&gt;out which node to call next.&lt;/b&gt; &lt;b&gt;And that will most&lt;/b&gt; &lt;b&gt;likely be the code reviewer.&lt;/b&gt; &lt;b&gt;So the condition node will then trigger&lt;/b&gt; &lt;b&gt;the code reviewer who&lt;/b&gt; &lt;b&gt;will then review the output&lt;/b&gt; &lt;b&gt;of the software developer&lt;/b&gt; &lt;b&gt;and provide some feedback.&lt;/b&gt; &lt;b&gt;The code reviewer will then loop back to&lt;/b&gt; &lt;b&gt;the supervisor, etc.&lt;/b&gt; &lt;b&gt;At some point, the software developer is&lt;/b&gt; &lt;b&gt;actually going to&lt;/b&gt; &lt;b&gt;respond to the supervisor&lt;/b&gt; &lt;b&gt;saying that the process can be completed,&lt;/b&gt; &lt;b&gt;at which point this&lt;/b&gt; &lt;b&gt;end state over here will&lt;/b&gt; &lt;b&gt;be triggered.&lt;/b&gt; &lt;b&gt;But of course, we don't want to just&lt;/b&gt; &lt;b&gt;terminate this&lt;/b&gt; &lt;b&gt;process without any output.&lt;/b&gt; &lt;b&gt;So let's add one more node to summarize&lt;/b&gt; &lt;b&gt;all the previous&lt;/b&gt; &lt;b&gt;messages and provide something&lt;/b&gt; &lt;b&gt;for our end user.&lt;/b&gt; &lt;b&gt;Let's go to add nodes&lt;/b&gt; &lt;b&gt;under sequential agents.&lt;/b&gt; &lt;b&gt;Let's add an LLM node.&lt;/b&gt; &lt;b&gt;Then let's connect this end&lt;/b&gt; &lt;b&gt;condition to the LLM node.&lt;/b&gt; &lt;b&gt;And let's attach our LLM node&lt;/b&gt; &lt;b&gt;to this end state over here.&lt;/b&gt; &lt;b&gt;Let's give this LLM node a name, which is&lt;/b&gt; &lt;b&gt;summary and under conditional parameters.&lt;/b&gt; &lt;b&gt;And let's add a human prompt like given&lt;/b&gt; &lt;b&gt;the above conversations,&lt;/b&gt; &lt;b&gt;reasonings and instructions,&lt;/b&gt; &lt;b&gt;generate a final summarized answer.&lt;/b&gt; &lt;b&gt;And remember, the reason we're using a&lt;/b&gt; &lt;b&gt;human prompt is because&lt;/b&gt; &lt;b&gt;the human prompt will be&lt;/b&gt; &lt;b&gt;appended at the bottom&lt;/b&gt; &lt;b&gt;of our messages list.&lt;/b&gt; &lt;b&gt;So therefore, this model will have a view&lt;/b&gt; &lt;b&gt;of all the previous&lt;/b&gt; &lt;b&gt;outputs from these different&lt;/b&gt; &lt;b&gt;nodes.&lt;/b&gt; &lt;b&gt;So it will be able to summarize those&lt;/b&gt; &lt;b&gt;conversations for us.&lt;/b&gt; &lt;b&gt;That's all we have to do in this node.&lt;/b&gt; &lt;b&gt;And I think that's all we have to do for&lt;/b&gt; &lt;b&gt;this project, actually.&lt;/b&gt; &lt;b&gt;Let's save this flow&lt;/b&gt; &lt;b&gt;and let's test it out.&lt;/b&gt; &lt;b&gt;So in the chat, let's&lt;/b&gt; &lt;b&gt;enter, build a to-do list app.&lt;/b&gt; &lt;b&gt;Our supervisor is running.&lt;/b&gt; &lt;b&gt;And we can see that the next property in&lt;/b&gt; &lt;b&gt;state was set to software developer.&lt;/b&gt; &lt;b&gt;The software developer was then executed&lt;/b&gt; &lt;b&gt;and they produced some code for us.&lt;/b&gt; &lt;b&gt;This then looped back to the supervisor,&lt;/b&gt; &lt;b&gt;who now determined that&lt;/b&gt; &lt;b&gt;the next node to be called&lt;/b&gt; &lt;b&gt;should be the code reviewer.&lt;/b&gt; &lt;b&gt;And therefore, the code reviewer was&lt;/b&gt; &lt;b&gt;correctly called, which then provided&lt;/b&gt; &lt;b&gt;some feedback as well.&lt;/b&gt; &lt;b&gt;And this time, the software developer was&lt;/b&gt; &lt;b&gt;called to make those revisions.&lt;/b&gt; &lt;b&gt;After some back and forth between the&lt;/b&gt; &lt;b&gt;agents, our supervisor&lt;/b&gt; &lt;b&gt;finally set the state to finish.&lt;/b&gt; &lt;b&gt;And therefore, our summary node was&lt;/b&gt; &lt;b&gt;called, which then provided the final&lt;/b&gt; &lt;b&gt;output of this chain.&lt;/b&gt; &lt;b&gt;I hope this video helped you to better&lt;/b&gt; &lt;b&gt;understand the inner&lt;/b&gt; &lt;b&gt;workings of sequential agents.&lt;/b&gt; &lt;b&gt;If you would like to learn more about&lt;/b&gt; &lt;b&gt;using sequential agents,&lt;/b&gt; &lt;b&gt;then definitely check out&lt;/b&gt; &lt;b&gt;this crash course over here.&lt;/b&gt;