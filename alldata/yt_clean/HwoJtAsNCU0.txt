Hey guys, in this video we are going to build a Data entry form for Excel. So when I input some data and press the submit button, the data is going to be saved in the spreadsheet. To build the entry form we are going to use Python, but the fun part is we are not going to write any line of code ourselves. Let me explain. So to create the GUI, so the graphical user interface, we will use Figma. Figma is fairly easy to use. You can just simply drag and drop different elements into your canvas and then style your application however you want. Once you're happy with your design, we will use a tool to transform the Figma design into actual Python code. And once we have the Python code, we will use ChatGPT to create our functionality, which is saving the data to a spreadsheet. And once all of this is done, we are going to turn our Python code into a standalone executable file. That means even people who don't have Python installed on their machine, they can still use your application. Okay, so without further ado, let us dive in. Alright, as mentioned in the intro, head over to figma.com to create the GUI. The first step is to draw a frame on the canvas. On the right side, you can specify the dimensions. For this entry form, I'll go with 650 by 350 pixels. Next, let's draw a rectangle on our GUI. This will be our background. For the color, I am going to pick a dark blue. For the header, I will use another rectangle and simply leave the default color. With that in place, I will also insert an image in our header section. For that, simply drag and drop any image you have onto the canvas. On the left side, you can also adjust the layer level. So this image should be above our background rectangles. Next I will resize and reposition the image. Ok and next to the image, I will insert the form title. that you can use the text element. On the right side, you can specify again the properties like the font size and weight. A quick note here, sometimes after converting the design to Python code, the text element gets messed up if you don't resize it correctly. So I suggest selecting the text element and then double-clicking on the corners. This way, the label field is automatically resized. As the next step, let's create the input fields. For the label, we can again use the text element and change the font size and weight. Again, I'll resize the label by double-clicking on the corner. For the actual input field, you want to use a rectangle again. This time, I'll change the color to a light yellow. And to make it visually more appealing, I will also want the corners. Okay, next, let me just reposition the field slightly, and then I'll select both the label and the text input field and press Ctrl D on my keyboard to duplicate those fields. You can also see that the fields have been duplicated here on the left side. Now I will simply drag down the duplicated fields. And this is how I am going to create all the other input fields. Just select them and then duplicate the fields. Once done, we can rename the labels. On the left side, I will have inputs for the first name, last name and email address. To align these fields, you can simply select all of them and then click on the alignment icon. Okay, and now let me repeat those steps also for the other labels. Great, with that done, let's take care of the submit button. For that, I'll use another rectangle and use a light red color. For the button text, you can simply use the text label again. This time, I'll center the text vertically and horizontally and change the size so that the text is centered. Next, let me group those two elements, so the rectangle and the text. If you select them on the left, you can press Ctrl and G on your keyword to group them. Once grouped, you want to rename it to button. The naming here is actually important, because only the elements with the correct name can be exported later on to Python code. In the description box below, I'll also leave the link to the documentation for the TK designer package, so that you can check the correct naming. I'll also show you the naming reference here on my screen. For the input fields, I'll rename the rectangles to textbox. I'll do this for all the different 6 input fields. The labels don't need to be changed, you can just leave them as they are. However, the images should be called image and for our background rectangles, you want to remove the numbers. Alright, and with that, we can now convert this design to Python code. For that, let me navigate to my desktop. I've already opened my terminal. Note that I have created a separate environment. Usually I use Python 3.12, but the TkDesigner package we are going to install has some dependency conflicts with newer Python versions. So that is why I have installed Python 3.10 in this virtual environment. Now, if you don't know what virtual environments are and how to set them up, then I would suggest just head over to ChatGPT. As you know, ChatGPT is great at explaining stuff and can guide you through all the steps of setting up your environment. OK, so with that said, in this environment, I will now install the TkDesigner package. You can do that by simply running pip install tkdesigner. And another side note here, there are actually multiple ways to convert the GUI design to Python code. In my previous video, I showed you another way where we first cloned the GitHub repo locally and then converted our design. I am just mentioning it here so that you don't get confused. Both ways are totally fine. For this tutorial, I'll use the command line and write tkdesigner and after that, you want to paste the URL to your design. You can get your design URL by clicking on the share button in Figma and then copy this link to your clipboard. Now, back in my terminal, make sure you paste this link inside quotation marks, Otherwise, you might get an error. Also, and I guess this is actually a bug, but in my case, I always got an error when I used the file URL. So what I needed to do was change design to file in the link. So let me quickly do that. Ok, with that in place, we also need to insert our access token. You can find yours by navigating back to your Figma dashboard. Here, under settings, you will see the following section if you scroll down a bit. Next, click on Generate New Token and give this new token a name like TK Designer. And with that, you should now see your token. Copy this token to your clipboard and paste it into your terminal. Ok, and now you can execute this command. Once done, you should see a new folder called Build in the directory from where you ran this command. So, let me navigate to that folder. And here, I will open VS Code. Alright, and here is our Python file. If I execute this file, we will have our input form. As you can see, those yellow fields are now converted to text input fields. However, for now, not much is going to happen when you click the submit button. If you click on it, we will just see the click event in the terminal. By the way, the button itself and also the rectangles for the background are actually just simple images. All of those are saved in the assets folder. Ok, now that we have our GUI, we need to write the code to save the entries to a spreadsheet. Of course, this is just one example. You could also adjust it to your use case like saving the data to a database or Google Sheets. But before going further, let's have a quick look at the code. First of all, you will notice that the whole GUI is based on Tkinter. And Tkinter comes already with Python, so there is nothing extra to install. Next, we have the path settings. I won't explain every line here in detail. For that, as you know, you can just ask ChatGPT. But in general, the idea is as follows. First, we create the GUI with our dimensions. On this GUI, we place a canvas. Now on that canvas, we place all the different elements like the labels, the rectangles and the images. At the bottom, you will also see our button. Now here in the command option, we specify the action that should happen when someone clicks the button. For now, it will just print that the button has been clicked. So I could now go ahead and code the action to store the data into a spreadsheet, or I could be a bit lazy here and just ask ChatGPT for that. So let me switch over to ChatGPT. The key here is to be as specific as possible with your prompt. I will also leave my prompt in the description box if you want to use it as well. So I wrote the following. Adjust the Excel data entry form to save submissions to submissions.xlsx using OpenPyXL. Create the file if it doesn't exist and assign an auto-incremented ID to each submission. After submitting, clear all the fields and display a success message. Ensure all fields are filled, show an error if any are empty, and validate the email before submitting. Ok and after my prompt, I'll simply paste the complete code from before and press enter. Alright and once done, we'll have our updated code. At the bottom, you'll also see the additional features that ChatGPT has created. Ok so let me just grab the whole code, go back to VS Code and paste it in here. Now obviously it would be a good idea now to first check the code in detail, because as you know, ChatGPT is not perfect. However, I'll just give it a go and run the script to see what we've got. But if you're following along, make sure you also have OpenPyXL installed, because that is a third-party package. If you don't have it installed, you can install it by running pip install OpenPyXL. Okay, with that said, let me execute our code. Alright, so far so good, we can see our entry form again. So, let me go ahead and add some data. Ok, and now, when pressing the button, we get a message box that the submission has been saved. Also, you will see that we now have a new spreadsheet. But before opening that, let me also test if the email validation is working. If I input an invalid email and try to submit the data, we get an error message saying that the email format is invalid. Ok, cool, so that is also working. when I input a valid format and press the button again, the data is submitted again. Also notice that all the other input fields are also cleared just as specified in our prompt. Ok, so now let's see how the submitted data actually looks like. For that, let me navigate to my folder and open the spreadsheet. Alright, and here it is. We can see that the data has been saved correctly and we also have an ID column filled out correctly as well. By the way, you can now also style the data and insert new sheets after this one. It will still work. And of course, if you are curious how it works, you can just inspect the code or simply turn back to ChatGPT and ask any question you might have. Alright guys, and this is how easy it is to create a data entry form for Excel using Python and ChatGPT. Now, the only issue is that everyone who wants to use this entry form needs to have Python installed on their machine. So, I've got a little bonus tip for you on how you can turn this GUI into a standalone app. This means our app will work even without Python installed. To do so, first we will import sys and then change the path settings up here. I'll adjust the output and asset path as follows. Before we had an absolute path where the directory of the assets was hardcoded. Now we change that to a relative path that gives us the current working directory. In just a moment, we'll also use a package called pyInstaller to convert it into a standalone app. When we open that standalone app later, this condition will be true, ensuring that our images are still loaded and the Excel file is saved in the current working directory. And of course, I'll also upload this code to a GitHub repo, so you can just copy and paste the code from there. You will find the link to that repo in the description box below. Alright, so before converting our app, let me quickly check if everything is still working. Great, so even after our path adjustments, we can still see our GUI. Now, let me go to my terminal and install PyInstaller, simply by running pip install pyinstaller. Once you have that package installed, you want to run the following command. Here, we are explicitly telling PyInstaller to include our images stored in the assets folder. So, let me run this command and once finished, we should have a new folder in our directory. In this new folder, you will find our GUI application. And to test things out, I will create a new folder on my desktop and move that executable file in there. Ok, and in this new folder, let me open the entry form. Alright, so this is already working. Now when I enter some data and press the submit button, we get a new excel file. If I open it, we will see the data we just entered. Alright guys and there you have it. As I mentioned, feel free to adjust the code to your needs and also play around with ChatGPT. It is not always perfect, but it can definitely help speed up the development process. And as always, thanks for watching and I will see you in the next video. Thanks for watching!