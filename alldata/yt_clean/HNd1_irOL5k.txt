This is a Tale of Two Agile Teams. More correctly, into two Agile Teams. It was more than an organisational separation. It was also an Agile separation. My name is Gary Straughan Welcome to the 100th episode of Development If this is your first time here, please consider and hit the bell icon to make sure you don't We do an episode like this every Wednesday. Actually not quite like this one. This one is a bit of a epic. A re-telling of a tale that first aired in A tale that seems to have captured people's imagination. A Tale of Two Agile Teams It was 2012 when I first walked into the offices The same time and the building as these guys Never saw them. Funny that. The software team I joined was one that 'did At the time, I knew very little about 'Agile'. But I could see from the get go that they There'd clearly been lots of training. They had all kinds of tools. They were doing all kinds of 'rituals'. We'll get into the specifics of how the Fast forward a year and the department reorganised. My team was split in two. Although reporting lines changed, the seating There was one outward indication of change: where there had been one agile board, there And we did two stand-ups every day: ours at 10:00am, theirs at 10:15. Ever-observant, it took me a couple of weeks the other team was doing a different 'flavour' I hadn't realised that there was more than What my team was doing was, called Scrum. The other team was doing something called Kanban? Really? This was a word I knew from way back. But I knew it in the context of manufacturing. I couldn't immediately see how it applied So went to see Lead Developer of 'Team 'What the difference between Scrum and Kanban?' I asked He was ready with an immediate answer: 'You Guys Talk About Work. We Do Work.' Ouch! In that moment, I learned an important lesson It can be an emotive issue. Beliefs can be deep-seated. The Team Kanban Lead Dev clearly thought that I held the opposite view. My view was both strongly held and completely without evidential foundation. I'm a little older now. And, I hope, a little wiser. I can now see that the team split was a perfect You know the kind of thing: "Take two identical twins. Separate them at birth. Feed one Scrum. Feed the other Kanban. Observe the result." So I hope you'll join me on a little forensic Starting with a 20,000 view of each team's My team - let's call it &quot;Team Scrum&quot; - worked At the beginning of a Sprint, we'd take for a Sprint Planning session. The Product Owner would select items from and we'd play "Planning Poker" to estimate We'd continue until we had roughly one "Sprint's Sprint Planning over, each developer would Every morning there'd be a stand-up - 10 And so it would go on day after day, with the cards gradually making their way By the about the Tuesday of the second week, we'd expect all of the cards to have moved It was then a race - a &quot;Sprint&quot; - to get everything We didn't always succeed in getting everything Any item that failed to make it would be "recycled" On the Friday morning, everything in the release Oh, and one last thing to round out the Sprint: A chance for the team to get together to reflect to discuss what could be improved and to commit to one or two action items for Taking stock of the evidence: There's a Product Backlog, an Agile Board, There's a Two week Sprint with a sprint Each day after that, a Daily Scrum Meeting. (aka a Stand-up) At the end of the process, all those cards are packaged for release. And on the afternoon of the last day of the Moving on to the other team: "Team Kanban". As with Team Scrum, there's a Backlog, an - they called it a Kanban board - and a 'Done Pile'. But there's no Sprint. Instead of a group of cards making their way cards flow across the board continuously. With no specific release day, it's up to They'd typically wait for a fairly significant packaging. In practice that meant releasing once or twice Taking stock of the evidence: There's a Product Backlog, a Kanban Board No Sprint. No Sprint Planning. No two week period. No Retrospective. There is a Daily Standup. And they are packaging and releasing. And doing so 2 to 3 times more often than So much for our 20,000 foot view of the two As good forensic investigators, we should We know that Team Scrum works in two week Team Kanban works in a continuous fashion. Team Scrum has a formal Sprint Planning session. Team Kanban must have some process to choose but we don't have any details. Team Scrum does Retrospectives. We're not sure if Team Kanban has anything Between Sprint Planning and the Retrospective, Team Scrum loses around half a day of development The two week period doesn't mean anything so let's convert the number of days into percentages. One last piece of data to record: Team Scrum releases once every two weeks; Team Kanban releases 2 to 3 times in the same Looking at the two lists, it's clear that It's also releasing more often. But is it performing as well as the evidence No photographs from the time have survived, but we have been able to piece together a Exhibit 1 is Team Scrum's board. Nothing out of the ordinary here. Given the position of the cards, I'd guess from somewhere close to the end of a sprint. Exhibit 2 is Team Kanban's board. Blimey. A bit crowded, it's it? And if I zoom out a little bit... there. Your eyes don't deceive you: the column of cards goes all the way to the (And it's not that we've caught it on a bad the board always looked like this) If I tell you that Team Kanban had four developers, you'll start to get an idea of the scale of There must be 20 cards in this column! Even if we assume that half of them are blocked, it still means that each developer is working - never a good thing. What's gone wrong here? It seems to me that in the move from Scrum something got lost in translation. Actually, two things: 1. An effective transition from Backlog to Development 2. A limit on Work in Progress - the number of With so many blocked cards on the board, it's clear that they are not doing a good And it looks like they're on a quest to maximise What's interesting is that Team Scrum is doing And not because it has a particular focus it's happening as a natural consequence of An effective transition from Backlog to Development And a limit on work in progress is a natural Can we draw any conclusions from what we've I'd suggest the following: Scrum done well beats Kanban done badly. Which begs the question: what about Kanban done well? One of our teams is about to find out. In a most unexpected way. It was a dark time for Team Scrum. Our super-awesome project manager left the News came in that an external &quot;Agile Coach&quot; Someone looked him up online. Very high profile. Very expensive KANBAN! As I said earlier, people who "do Agile" And our ongoing grudge match with Team Kanban that Scrum was awesome and Kanban was rubbish. So we were ready for this so-called &quot;Agile We expected him to be pushy and directive. And we intended to push back. Hard. As it turned out our new Agile Coach - let's was neither pushy nor directive. At our first meeting he said that he had a But only if we wanted to to. He unrolled the A2 paper that he's brought The key to it, he, explained, it that each note. And high enough for five. That's it. "This is important. By limiting the number of cards in each column, we make sure that things get across the board A couple of team members raised concern whether Would it be necessary to I smiled to myself. If our "resistance" centred around the BluTak, the Agile One had already won. And so our Kanban journey began. The paper board - together with our winning - taught us to to keep our work in progress We had learned our first lesson. At the time of his arrival, several cards The Agile One asked about one of them. &quot;We're waiting for so-and-so to get back to "What can we do to move that along?", " I'll email him today". I replied. WRONG ANSWER! "Where's his office?" "In the next building." &quot;Let's go and talk to him.&quot; "When?&quot; &quot;Right now" And off we walked off together. And we found the person. And we had a relaxed conversation. The Agile One asked questions. And what was blocked became unblocked. Effortlessly. None of us could match The Agile One's ability but we did - in time - learn the value of unblocked. And - in the case of new cards - to make sure place. That was our second lesson. Little did we know, there wouldn't be a At least, not from the Agile One. A quick note to say I have Cheat Sheet for you: The Scrum vs Agile Cheat Sheet. Created with the help of the Development That It's by far my most downloaded Cheat Sheet. And getting your hands on it couldn't be You'll find a link on our around this video. Click the link, follow the instructions, and Okay let's get back to the action. One morning, The Agile One brought a guest It transpired that The Agile One was moving The new person was his replacement. If The Agile One was a little bit Obi Wan a little bit annoying, and very into &quot;basic Where the teaching of The Agile One had been with the New Guy it was more the school of He didn't waste any time: &quot;Release more often, you must". We explained that releasing in this place time consuming and prone to error. New Guy let us know that it was his belief you should do it more often. The last thing we wanted to hear. And the first thing we needed to learn. It wasn't long before we were releasing more And doing so with the lowest failure rate. We had learned our third le... Actually... that wasn't the third lesson. At least, it wasn't ALL of the third lesson. New Guy also forced us - against our will And then there were his views on test failure. The man had a eagle eye. The moment he saw a card moving to the left, he'd want to know why, and he'd wanted Had this guy never heard of the cost I'm sure he had. But he wanted us to feel the pain of card You see, what he was teaching us was the importance of moving to the right. THAT was our third lesson. Earlier this year I gave a talk. You know, in front of a room full of people. It was on the subject of Agile, and it concerned In preparing for the talk, I tried to classify I came up with a hierarchy of sorts: Superficial, Mechanical, Competent and Enlightened The Agile Team that I joined in 2012 was still There was no deep understanding of Agile, at following rules and systems It was a perfect example of Mechanical Agile. Mechanical or not, it worked. It was effective. More effective than any non-Agile team I've Under the tutelage of The Agile One and New my team achieved Competence, and was on the Which leaves us with Team Kanban. The members of Team Kanban thought they'd saw in Scrum. But they removed more that they'd intended.. They ended up with something... that was less They ended up with something... superficial. They ended up with something... that didn't That's my story of my &quot;Agile Awakening&quot;. And now I've shared my story with you I hope you'll share YOUR story with me. Tell me all about it in the comments below. I can't wait to read your stories. Thank you very much for joining me for this Episode of Development If you enjoyed it, Please click to like Share it with your friends And click the logo right here For a new episode every Wednesday I look forward to seeing you again soon. Cheers for now.