- So what we're gonna So this is the first-principles and Access Management. And you know what that really is? That really is, I think as a builder, this is the most fundamental that you can acquire. Now, I know we're at a security and sure, IAM is definitely there's no two ways about that. But actually I'm gonna make the case that by knowing your way around IAM, this is actually, I think for just plain learning Now, why do I say that? Well, at AWS we have hundreds of services, all doing different things to do this and that, but you know what they all have in common? They all use IAM for And by understanding how it's actually kind of a learning So this, when people ask me, how do I start learning the cloud? I actually tell them one of it's actually get good at IAM. So that's what we're gonna be doing today. It's IAM, IAM, IAM. we're gonna talk about You know, how do you put And that's the main focus here, 'cause I know that most of you, if you came to a session like this, this is really what to acquire this skill. But I'm also in the course I'm also gonna share with why it is the way it is? 'cause there's some history and also a little bit about how it's actually working in AWS. Now I include those parts First of all, you know, and I've learned many over my career and I find that I can learn a lot more effectively if I know just a few things about why and how something works. And the other thing is, we're We're all curious about So I'm gonna share it with Although, you know, the truth get you up to speed on of cloud skills. So let's get started. I'm gonna tell you a a little bit of history, I myself have worked at AWS since 2013. So I've been on most of the not the entire thing. So I'm relating history that that I didn't quite live personally, but one thing you might not realize is that there was an AWS Maybe you knew that, maybe you didn't. But S3 launched in 2006, EC2 launched two years later, in 2008. And of course, this cloud thing was new. And well, how do you do, as a customer, how do you do business with any of the businesses out there You have an account, right? And the account represents if you're gonna sign into that account, you're gonna have some you're gonna pay a bill to them. So AWS came out of Amazon, you probably had an account with Amazon, you may have used it to buy And it has had a username and a password. And today in AWS, that concept is now called the You use it a lot less today but you were a customer, you had an account with Amazon, and along with the books that you bought, you could also now buy some storage in S3, buy some compute in EC2. So it was me, my account at Amazon, and the cloud infrastructure that I own. IAM only showed up on the scene in 2011. And in fact, what I'm showing you here is the AWS blog post on the And I'm gonna actually underline for you kind of the salient part as You can now add users to your AWS account, set groups and permissions Oh, so what's happening here? Well, what's happening here they could use AWS, S3 and EC2, and maybe a They saw that it's me, and the cloud infrastructure that I own, with my username and password, and as customers started to see that, oh, this cloud thing's actually pretty useful, we want to use it to at our company, the picture was a little bit more like this, rather than me and my it was gonna be we and And what I am was responding was responding to the need to have, well there's not just one me, there's a couple of different each of them is gonna have different, each of them has a different job, and each of them is gonna need in this AWS account. So there were IAM users, and IAM users, they had and you could give them, you could give each So that's how things got started. And you know, it was a picture like this, we had we and our cloud infrastructure. AWS at this point had a number of regions that you could deploy resources And that's why, if you can use a lot of different AWS regions in an accountant it's just this picture actually explains And in fact, one of the things to notice is that these IAM users, what this is sort of is starting to look like an in your AWS account. Now, hang on a minute that story's gonna get a lot better. But here we were, us and the next year in 2012, IAM innovated with the Now this was a new kind that rather than the long-term credentials that these user has, these users had, this role had short-term credentials. And it was suitable, one of its earliest If I launch an EC2 instance, let's say the EC2 instance from an S3 bucket, 'cause So rather than having to create a user to represent that EC2 instance, and somehow doing credential management to make sure that these were deployed securely well I could create an IAM role, tell EC2 that I want these credentials delivered to that EC2 instance, and I no longer need to manage EC2 manages it, and the up to date credentials for this IAM role. Other nice thing about this IAM role is no long-term credentials for me, as an administrator of this account to manage, and track, and So this was the early IAM. And we've already encountered and that is the IAM principal. An IAM principal is and For nearly all use cases today, you're gonna be using IAM roles. And an IAM role is an that authenticates using There's a whole bunch of ways come into play, we're gonna And then there's also, IAM users. You'll notice that I and I did that on purpose. That's because those IAM users with the long term credentials, like the initial launch of 2011, actually there's fewer where that's your best option, So IAM roles, we're almost exclusively gonna talk about those for The other thing is, I've got There's an English word principal, and there's an English word principle, and they're two different words and they're spelled differently. And I'm gonna spell them in this talk. So principal, al, that is in our context, word means a lot of things in English, but in our context here is and principle, le, is how things work, we're And in that vein we're gonna talk about some principals of principles. Okay, I just said that short term credentials, you how does anybody get these credentials? So here we have an IAM role, IAM role credentials they're temporary, they expire at a certain point. So who gave us these credentials? Well, there's a service in AWS. It's closely linked with IAM, it's called the AWS Security This is a service that and its entire job is to produce for use by an IAM role. Now the next question you if it's just producing the it's gotta know who it's Like the roles credentials and not others. Well, there's a number that it knows how to recognize. Here's a few examples, there's a lot of examples you'll find when you're working in that you've given permission and you do that by creating an IAM role that that AWS service can get into and take actions on your behalf. You can also go with the go from one IAM principal And then finally, the other credentials to as long as all are user identities. And user identities are are or OIDC tokens from an identity provider. So that's how you prove an identity from one of those systems, and security token service verifies that and then will give So all of these different go to STS. They go with an API the result of which are some credentials. And you'll notice that the if you ever look at an assumeRole we'll see those three components later. Access key ID, not a that is a secret, and a session token. We'll see all of those and they expire at a certain time. So that's what's happening. And if you're wondering where that name assumeRole comes from, Well, to assume the role, if they're handing back means that whoever's asking is about to assume that identity, become that identity until the credentials expire and use those to authenticate to AWS. Okay, but how did I tell whichever one of these original Well, if you go to the AWS now bracket, with your usually you're gonna be some sort of automation some other kind of infrastructure as code. You're gonna be doing not by clicking through the console, but as you're getting you almost certainly will as you're kind of getting started and seeing what's going on. And when you ask the IAM this is the first thing you get shown. Who can assume this role? That's what it means The first option here is AWS service, so maybe let's go with that. And then below that are some starting with EC2, then Lambda, then a whole nother list that's below where I cut off this screenshot. So let's say we've because you're gonna run a Lambda function and you want your Lambda function code to have access to some act as an IAM role in your account, you wanna give the Lambda read whatever it needs out of S3. So what you just asked for to deliver some credentials And the way that works is by telling IAM that you want Lambda to be So here we're gonna look You don't need to worry about what this, what exactly is going on here yet, by the end of this talk you'll understand every part of this. But I'll just show you what the IAM policy that gets created because of that screen. And you know, if you just look at this, you can probably reason We're saying that the AWS service, Lambda, is able to assume this role, is able to get delivered behind the scenes, and deliver So that's what's gonna happen, Like I said, roles are not to compute environments in AWS, they also work for compute About a year or two ago we and to my great disappointment, it did not mean that Rather IAM Roles Anywhere anywhere, including that are outside AWS. What this service does it distributes those credentials to workloads that you might And then finally, IAM when you're configuring access So let's go back to this we morphed from me and my but we were still using one account, which was more common And you know, if you operate your environment might We in our cloud infrastructure will, our cloud infrastructure probably isn't one AWS account anymore, it's And I have three accounts but it might be 3000, it's just hard to draw that in PowerPoint. And in fact, the word account here, if you look at this picture, the word account now no longer at so many other businesses or what account meant customer, account doesn't really seem Account is now kind of, you can think of it more that go together in a workload. And each of those, IAM is so IAM is local to an account. Each of these accounts now has a little role-based access controller which is, you have IAM in the account, IAM has some roles that to act in the account. And that's kind of what we looks like today. And you'll notice that because if I had had in each of these 3000 accounts, that means people would a lot of these long-term credentials, usernames and passwords and And you know, we know that's So, but how do we get we into in our cloud environment? Well, let's talk about who we is today. We often is a corporate identity Now most of you will have one of these, there's a few providers out And you know, and for custom- Well, I'll get to that in a minute, but we, we have we, and what you're looking to accomplish here is that often these people as defined by the directory. Different people should in these different boxes So it's completely possible to Everything here is done with public APIs that you can build on and But for most of our customers, the best way to do that called IAM Identity Center. So IAM Identity Center connects up to your corporate identity provider. It supports a synchronization from your identity provider using a well-known protocol called SCIM. So if you have a source of truth over here and can synchronize the that's gonna work. If you don't have a that you can do that to or to be able to hook that up, Identity Center also supports So you can directly create in Identity Center. But the nice thing any individual user is gonna to keep track of, either whatever their credentials or from the built-in pool. And in Identity Center, you're gonna be able to map to these different roles so IAM Identity Center is closely in AWS that's actually, is a really important AWS Organizations. AWS Organizations kind of defines, well that sort of defines it defines all of the and it's in a one-to-one relationship with IAM Identity Center. We don't have enough time go through all the things you but I'm just gonna point out here that this is a really important if you're in charge of One thing to know about Identity Center, sort of as a more advanced feature, it can even do attribute-based Specifically What that means from your directory, attributes and when these users assume it's actually able to add tags so that those attributes carry So let's talk about how you set that up in IAM Identity Center. Let's say in my directory, I have a group. And this group is called Network Admins. And the reason they're is because these are the to configure the networks in So what I'm looking for is I want an IAM role in all of that has whatever the to do network stuff. And then this group of people, I want them to be able to in any of the accounts in and do their job. The word for this in IAM Identity Center, to look for, is called permission sets. You can configure a permission either by using one of network administrator is one of them, and you can even define your own. And what Identity Center does and then assign users in groups to the permission sets and the accounts is it actually creates IAM roles in the appropriate AWS accounts. We'll look at those roles but I'm gonna show you the who's trying to sign in. And I'm gonna say, let's say for a data scientist's groups. Like we have a group of data scientists, we have some accounts that hold our data, there's some permissions should be able to do. So we have a data And let's say I'm using in Identity Center. So they get shown an AWS If I had been using say like they'd have been redirected and been signing in in So they sign in, they then for each account that I've mapped them to in Identity Center, here but there might be multiple, For each account that I've mapped them to, you're seeing that they can choose the different accounts they choose what hat they're as they enter the console. And so once Blue Jay data scientist role in you can see that they're operating under the data scientist role, and the thing after the named after the user. So that's what happens. This is that mapping in action, the Blue Jay is a data scientist, data scientists get to go and they chose an account and So those are the principals of principles. We talked about a couple that you can get into an IAM role. One is an AWS compute environment, your SageMaker Notebook, your EMR Cluster, the list goes on and on and on. There's also IAM roles that are outside AWS, And there's also IAM roles for when people in your organization are your AWS environments, like we just saw or the the CLI works equally well there. Okay, so I assumed an IAM role, somebody gave me some what do I do with them now? How do I use those credentials So we're gonna work through an example. Here in this example, I have Maybe it's running on a Lambda function, and it's going to read an object from S3. So it's gonna send a request to S3, and somehow we need to do So first I'm gonna kinda show you the code that I might have written for this Lambda function to do this. The example I'm giving you which is a little bit different And if you use a different they all kind of follow the same pattern. The salient point here for calling the S3 service, and I send the GetObject command, 'cause I want to get the object, called when I wanna read an object in S3. The first thing to notice here There's no credentials here, I just instantiated an S3 client, and somehow I expect this to work. And that's because for for EC2, for Lambda, for they're delivered to you know you can read in the documentation where they get delivered to find them in the right place, and you get those by default. So there's no handling of Just gets picked up at runtime. Now of course you can, you know there are all kinds of parameters to the constructor here, you credentials if you have a need to do that, but generally it's gonna And to show you exactly what happens next, I'm actually gonna switch with our CLI, or command line interface. Why? Because that actually for getting kind of good on what exactly is going on. So the way you make a is like what you see here, And let's say the user using IAM Identity Center. So before they even get they're doing AWS SSO log, and it's a really nice integration. They get taken through an way of signing into IAM Identity Center. All that happens, the to a well-known location in the CLI, and then we make our S3 request. So we're gonna actually how exactly did we authenticate ourselves? Now you never need to do this, right? The CLI, the SDKs, all of these things take care of all of the But I'm gonna show you So there's CLI --debug superfund, can see a lot of things not just the IAM stuff, but we're gonna focus on the IAM stuff. So you get a lot of spew here, but I'm gonna show you kind So the first thing to notice, I sort of had two parameters the bucket and the path to the object, or the key, is what S3 calls it. So you'll notice that the bucket name actually seems to have gone into the host. The bucket's name is example bucket, and it looks like the DNS name to which we're going example-bucket.S3.amazonaws.com. So that's where this request is gonna go. And then the path is So that's how we're Now you might wonder where is example-bucket.S3.amazonaws.com, Well we can figure that out, And if you look up that that example bucket seems to be taking you to S3 in the US-East-1 region. That's because the bucket we at AWS actually hold onto it. The bucket named example bucket exists, it exists in our US-east-1 region. And you know of course S3 in any region has lots and lots of IP addresses, but this is the one that DNS gave me when I resolved that name right then. So that's where our request is going. So now I can start to paint a little bit more of a I'm sending a request to read This request is going to the S3 service in whatever region the bucket So okay, request is going to S3, but I didn't quite explain how Well for this we need to look at headers. So the debug output is gonna I trimmed that aggressively authorization header. But if you looked at all the headers that you sent on a you'll see lots of things about or any other service. So here we have our authorization header, and I'm gonna point out a few things that are of interest here. First is the credential field. And you'll notice that when the credential's gonna This will typically start which is not, has no It's actually has to do with are base-32 encoded, and that's the letters that So that's our access key ID. Notice that that is not secret, so it's going right there in the header. That's okay cause this is not, Second field to notice is the signature. Now the signature was produced by the CLI, by the console of using it. The signature's produced client side with the secret access key that it has. Now the secret access key is secret, so we're not sending it across here, we're sending a signature of the request that's gonna be verified So we're sending a signature here. And then the third part that's the session token, this is gonna be a base-64 encoded value. If you try to decode it, you'll be disappointed But what it contains is a about your IAM session. Any tags that it had, any there's a lot of things that the name that it had, a lot of things that that get carried along, so this So this is what goes into This is the authentication. And like I said, we have documentation on how to produce one of these signatures, but you're probably never gonna do that. Okay, so we've sent a request, the request is going to Well, S3 needs to figure out if this request is validly signed. If the person making the request is actually who they said they are, and that's done by checking the signature. Now it's not S3 itself but rather it's the IAM data plane in that same region as S3. You might be wondering, Nobody ever showed me an IAM data plane. And that's because the it exists in each of our All of our services use it to authenticate your SIG V4 signed requests. You use an IAM service, that's called our IAM you use this IAM service, you call put role policy, it's how you set up all of your IAM stuff, that's not what we're looking at here. What we're looking at data plane service, the one that's handling a very, in each of our regions, figure out the signature, figure out if this is a valid And once it figures out who okay this is who it is. In fact it tells S3 a lot Tells S3 a lot of because it's part of Not just what IAM principal it is, but what account they're in, what organizational unit they're in? Are there any tags, is it an AWS service? Lots and lots of properties and might have a bearing Things that you might have been mentioning in your IAM policies. The IAM data plan in some other information like what permissions Which can be one or more policy documents. These are documents that you've definitely seen. So the result of a is a bunch of stuff about the principals, properties, its policies, and by the way, you can see we've sort of already started to take the first step But hang on a second, So when we authenticate over on the client side, it gets signed, the way you just saw, the The service then goes under the hood in the same region. IAM comes back to the service and says, okay, here's your principal, and now we are ready to begin And by we I mean S3, the doing the authorization. Now if you've ever looked at an IAM policy without really knowing you're like okay, we've got You know, and it might But the little secret here, is actually this is not This is string matching, and exactly how this happens because all of IAM authorization of the same pattern. Once you understand the pattern, you're actually gonna be in fact, very complicated IAM policies 'cause there's just one concept here. So what goes on is S3, or whatever service you builds a giant property bag. Properties of the principal, and then a bunch of other the action, what they're service helps fill up a Over on the right hand side Policy documents full of a and it's matching them, it's and then what should we do with it. So when we're writing IAM permissions, there's no sort of formal taxonomy here, but I've observed that two general categories. The first category is policies for non-human things, for Like the one you're looking at here, I'm running some software on EC2, that's clearly gonna maybe write some items So with these I can write very 'cause I know exactly is expected to do, so I should give a permission Very nice clean world here, I'm gonna guess that a hundred got into working with computers 'cause they do exactly and they don't do anything So the EC2 instance, it's so what do we say about that? Well you can sort of, but how exactly I constructed this policy, but you can sort of see I've said Dynamo, I've said the table, what you're looking at there, the thing with all the colons, that's an ARN, Amazon Resource Name, we'll talk about exactly how And for reading the objects it talks about that, S3 GetObject. You'll notice the ARN looks for historical reasons. And you'll notice that because maybe I'm trying under the example bucket. Now when you're writing policies, well when you're writing for production workloads, with infrastructure as 'Cause that's repeatable, it's auditable, it's got all that kind of good stuff. But when you're getting started, you're probably gonna use our IAM console. There's a really useful that gives you feedback on your policies, tells you when IAM thinks you And so it's worth looking for those. You can see that I've written So I've got, it's not telling me anything, but it's a very useful And then there's the other permissions for people. Well people, eh, our worlds These network admins, like actually requires a lot An IAM Identity Center went around and dutifully put all of these IAM roles in all of my accounts and the IAM role that it It gives it a name like AWS reserved SSO network administrators. And you can go look at it's policy, and you'll see it's quite a bit longer than the one that I wrote Lots of stuff here, all the stuff that it takes So that's what's going on here roughly. There's no formal distinction but roughly two ways to write a policy. One kind of a general policy the other very specific that you know exactly what it's gonna do. So let's go back to the string matching. If you understand this, So we get a property bag of requests, we get a bunch of policy documents and each of those policy documents has one or more statements, sometimes they have a lot of statements. And actually you'll see from the order doesn't matter at all. So these policy statements and they're all gonna Some of them are gonna say effect allow, some of them are gonna say effect deny, all of them are gonna So what we do is we apply We match the request and the statement, looking at all the it's either gonna match So if I'm making a request to S3 and I have a statement that's it doesn't match. For the ones that don't match, I don't take them into account, I take the ones that do I need to see at least one allow, and I need to see no deny statements. So if you imagine I do this matching and three of my statements so I discard them and one of and it says allow, then I'm good to go, the request is allowed. If instead I match these two statements, one says allow one says gets denied. And then finally, if as you might imagine, And by the way, as you're and trying to figure out match the request here, you're gonna get into this And so when nothing matches, it's a deny. So back to building this property bag, we said that the IAM data plane started to build up what we A bunch of properties about the principal that's gonna get matched But S3 is gonna put a bunch S3 sees that the action S3 also sees what object and it knows a whole lot 'cause S3's storing the metadata for the object you're trying to access. So it knows things about, are Was it encrypted, and how? What organization does this does this object and bucket belong to? And many, many other that you might have So S3 starts collecting up all of that. And then finally, one is it also knows what take to get to me? Did it arrive on my public endpoint? Which was the case here to the general S3.amazonaws.com endpoint, or did it arrive over of VPC endpoint to S3 from It knows that and it's gonna include in that property bag. So we've got a property bag here, we've got some policies here. So what happens here is and again, doesn't matter doesn't matter what statements they're in, you get the same answer regardless, we're gonna do a match here, which means as we're doing the matching, some of these statements because they're not relevant. And then of everything at least one allow and no denies? That is the whole story. This is the whole story. You do matching, you do Alright, but how did I This is the part you need to know, right? How are you gonna go, you know exactly what it's gonna do, you wanna write an IAM policy for it. So let's go back to we it's gonna call GetObject, how did we know how to write that policy? Well cut to the chase, this should sort of make this was the policy, but how did I figure out that S3:GetObject? How did I figure out that ARN colon thing with all the colons in Well for that you need the best page of the AWS documentation. You should bookmark this one. Actions, resources and But they should entitle it, the best page of the AWS documentation. So over on the left rail of this page, you're gonna see a list down that we have. So we're gonna go to the S3 one 'cause that's what On each page there's a table. Each row of the table Now the actions are typically as the API method that you're calling. You'll see here that it is. The top of the page tells to pre-end before the colon, And you'll notice a couple are telling you how to There's the resources telling in a GetObject evaluation And we'll look a little an S3 object. And the column on the here are all the conditions if you're writing a And all these things do different things, you'll see like S3 existing object tags if I wanna write a policy that's specific about how the object is And if I follow that link or just scroll to the bottom of the page, it's gonna show me how to And so this is how to do it. So it just shows you kind of these Amazon Resource Names, and it shows you for an You'll notice S3 for historical reasons, doesn't have the account number and region in the ARN like which is why you see But that's how I did it, I got the action, I got the resource, and that's how it's done, and I could have gotten a but I didn't. Okay great. So we're off to the races. But you know what, my application, not just needs to read objects, but it needs to list the get all the names of the objects under it. Well why might it wanna do this? Maybe it's a compute some kind of a query that before it goes and reads them one by one, and that would be a So the API to call this Well there's also a list objects, why do I say list objects V2? Just as an aside and S3, that But they do the same thing, they're controlled by the So list the objects in the bucket. So if that's successful, it's gonna give me a list of Well I know how to do this now I'm gonna go find the row And I actually chose this 'cause this is one of where the name of the IAM permission is a little bit different The action in IAM is S3:listbucket, the API name was called list List bucket, and you'll notice telling me something different. It's not an object anymore, it's a bucket. Well that kind of makes sense, right? Because the parameter to not an individual object. So I can do that, right? Follow the cookbook, write we have list bucket, two and S3 bucket, and so now we're ready to And you'll notice here that has nothing to do with IAM, useful tool if you use the CLI a lot, it kind of limit the output to the fields that you're interested in. Here I'm only interested in so I have that filter here, but it's not really germane to IAM. So what happens here, give Well what happens here is it's successful, and I get a list of, well, all of the objects in this S3 bucket. Now you might be wondering, is that actually what she Well maybe yes, maybe no. I was very specific for to say I can only get the But here are the list buckets giving me lots of other things. Now maybe I'm okay with that, hey, we're only really path/something and yet I don't have the permission of yet another path/MyData.csv, but maybe I didn't even So if I needed to do that, well I can go back to I can see, oh there's a So I'm gonna use the string Cool, that seems to be So let's go back here, let's try it again. What do you think happens? Give that a think. Ah, I get access denied. I was hoping to get just why am I getting access denied? Well I'm getting access denied because, well IAM's very literal and pedantic. It's like your cousin who and you say, can I take your coat? Says, I don't know, can you? Like that is what IAM does. IAM concerns precisely and are you allowed to make that request? Actually has nothing to So what happens here is your IAM statement said you had to say and it had to match path/star. You seem to have said So that second statement, even though you were hoping it would And that's why you're there was no allow. We could fix that. If we start saying prefix path/, now we're matching that second statement, now we get an allow, and what we see is what So it's a good sort of sort of very literal and that IAM does against your request. So and that pattern repeats everywhere. And just to show you another example, just to give you a flavor in other services in AWS, if I were trying to write a permission to allow this role to you'll notice here that the resource here, this Lambda functions ARN and a region in it, and so In other services, their All of these services will tell you how to construct their All right, so, so far how to write policies for in one account, accessing a But back to this picture of I'm gonna guess that if you with more than one AWS account, it is not too long until where you need to do this, right? Why is that? Because you know, say that S3 has some shared configuration data that the workloads in all of the and I should be able to set this up. So let's talk about how to set that up. We'll go back to our picture GetObject on an S3 bucket. We'll change the picture a in their own account boxes. Principals in account one, Well, okay, we're pros at this right now. So let's write this policy GetObject. We wrote this policy should this succeed? No, this doesn't succeed. Well why doesn't this succeed? Well, just sort of thinking in the world. You had account two owns the resource, but said nothing about should be allowed. And S3 buckets and all the other resources are secured by default, so about letting account one to their bucket, so account one can say all day long that it's allowed to get into account two, but it shouldn't actually be able to. And to throw a little bit 'cause jargon helps explain everything. You have two different authorities issuing policies over the You have the authority in to the principal in account one. But you also had this that hasn't said anything yet. So how do we let the issue a policy? Well we give them a policy to issue. And that in IAM is called Now our different services often for what they call the but that's a general term that that lets you put a In S3, you'll see these It's a resource-based policy that you can figure on an S3 bucket. And now account two has all right, we're gonna allow account one to access this object. So you'll notice that resource-based policy, there's it has to say who. When you have an IAM policy you don't have to say who But when you attach it to the So that's what goes on here. So now we're gonna go back to our picture, we're gonna put a resource and let's see how our string So two authorities have and we're gonna say that both of them have to be explicitly allowing this. At least one allow, no denies, so we do two separate authorizations, and unless both of them And that sort of makes from first principals. So these two policies, You notice that they're kind except the one on the left, issued by the principal account. The one on the right, also issued by the resource owner account, and that's how this works. And just for completeness, resource based policies are there, and so they get included in as well when the are in the same account. That looks a little bit more like this, they get evaluated together all in one go, we scoop up all the statements, do the string matching in one go. That's why you'll notice that if you write an S3 bucket policy that kind of assigns permission directly to an you don't need an allow role in order to work, 'cause you just did this and you saw the allow. Of course, if they have a deny, then there's gonna be a deny and it's gonna fail. So back to that policy that on the IAM role that and I said, don't worry now is the time to worry 'Cause now you're gonna be So this policy, it's a So it's not the permissions that's something else. This is the resource-based IAM has an IAM specific name you'll either see it or an assume role policy document, they all mean the same thing, they all mean resource-based policy. And here the role is saying, the action that can be taken STS you can give my Lambda.amazonaws.com. You can give my credentials because I'm expecting the Lambda service to obtain my credentials so That's what's going on here. So I'll give you just another example from another part of AWS, So S3 has this really neat functionality where you can set up event Like so you can have a every time there's a new Super useful customers do And the notifications can go, we have a few options for they can trigger an SNS notification, Lambda function invocation, send a message to SQS, and also send an event to EventBridge. We're looking at the SQS example, let's say I want the notifications So what I'm trying to say, then I have this SQS queue an account that represents the S3 service, is gonna need to send messages into. So I have to write a policy and I need to issue a policy So I say that the S3 event notifications, send SQS send message, Now I wanted to point 'cause the condition here writing a policy to allow an AWS service to access your resource. You'll notice here that source account, and source ARN. I find a source, you don't need both, but I have them both here. Source account I actually of the two. This is, to use a little jargon here, this is a confused deputy control. Basically I'm saying I when S3 sends the message to this is on whose behalf I'm delivering a message because there's an event on So each of these is in the conditions, and I can write a specific can send messages to this queue, but only if they're doing so on behalf of this specific Like I said, I prefer to So that's one more thing to allow AWS services So this was an intro, but hopefully I've given you the tools to go and get started with IAM, I'm hoping that you that you didn't quite know before. And there's a bunch of I would definitely go and learn Because once you're comfortable with IAM, this is how you scale IAM. It's a feature called so you'll wanna learn about that. You'll also learn, wanna learn are network based, like on EC2, you'll wanna learn about VPC endpoints. VPC endpoint policies, you on your network that kind on all of the activity so that's really useful too. Of course, another concept to if you search the internet you're gonna find a really, that many of our solutions that show you how to build a scalable, straightforward parameter using IAM around all of your resources So really good actionable once you know what you're doing with IAM. And then finally, the only is start building some stuff. Start building some stuff and try to get the IAM exactly right. I kind of recommend going for serverless, 'cause there's a lot of IAM just because you have so there's IAM at every point. So if you're gonna try to that's actually my recommendation. And one more thing I wanna AWS was recognized in within the access management category. This distinction you get based of IAM, so we're glad to see as much as we do. So thank you so much, I hope Hope you have a great and thank you so much for (audience clapping)