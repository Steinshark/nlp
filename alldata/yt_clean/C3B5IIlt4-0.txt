The only time, the only time, when it is reasonable to use both hierarchical re-use If you only want one or the other, then inheritance will make the code worse. Let me explain. If you only need but you don't need subtype polymorphism, inheritance, So if you have a superclass and two children, two subclasses but without overriding any of the members So as you can see here, called Method1, But called Method2, and in the other subclass So these methods are not at all And what happens in Method2 and Method3 Well, as you can see here from They call the method one from the parent. So the purpose here is that we want code We want to reuse the implementation of We want to reuse that in both Method2 And so we've learned inheritance. We look at our problem and we say oh okay actually But that is not a good solution. Because here we are only looking for There is no subtype of polymorphism, And so what should we do instead? We should just use object composition. We should not do We should do what's here in the bottom. So we should have two regular classes. Notice how these two classes are unrelated in terms of the fact Up here, but down here However we have these two methods again, and both of these methods But this time by accessing an object So objects of these two types will have a reference where you find this instance to share, that we wanted to use So regular object composition. It's has-a rather than is-a. Has not is. composition over inheritance. And I've used the dependency arrow to indicate that it doesn't really matter whether we are talking about a field in these two classes, The point is that just the fact does not justify the use of inheritance. To use inheritance, we must both need hierarchical reuse of code But if we don't need subtype polymorphism, inheritance Okay, what about the other way? What if but not hierarchical reuse of code? Then you should also not use inheritance. You should just use a regular interface. A lightweight way Because that is the more flexible your subtypes rather than just inherit So if we have this scenario called parent that defines some method Child1 and Child2 But notice here in this non snippet, I'm trying to say that the implementation of these two overridden They're not accessing anything And so if they're not accessing anything in using inheritance because there is no So we only have the second part. We only have subtype polymorphism, but So what should we do instead? Well in that case because that is the appropriate solution We should define an interface that says that in order you need to define this method called Method and then we have We have Class1 and Class2 here subtype one and subtype two. So we have these two subtypes that both The implementation over here is of course over here. All the regular rules of subtype Do check out my other video on But if we assume that you are using if we assume that you want subtype but that you don't actually need then the point is you should use something simpler Because the purpose of inheritance and subtype polymorphism at the same time both pieces, then it is not the So does that use inheritance when we're satisfying You probably guessed it. No. Personally, for subtype polymorphism So we should just do this. We should have an interface that specifies of this interface, you need to define and then we create two subtypes subtype supply implementations for this method And of course again These implementations So that our use of subtype But what about the code reuse part. what if the method in this first subtype piece of code that this method Where do we put that code? Well, object composition. Just use has-a rather than is-a. Just put that in another class both of these subtypes So in my mind all of this is just simpler of confusing inheritance. But you know, each to their own. And again rather than the association arrow at this level of abstraction it doesn't really matter if the object or a property However, what should be said to a concretion. Right? They're coupling to an actual class. And of course, if you've seen I would argue that you should couple So, of course, there are many cases where Check out my other videos But if you just take this at face value, you can maybe Maybe this other class so these two subtypes And the point here is that class, rather than saying class, rather than saying So let's Let's say maybe there are two different One is like a backpack and both of these So would we and that the backpack is a list, and the warehouse both have lists, that Because the point is We don't want to duplicate all of the code Probably, I assume you would agree with me and warehouse should have lists But you know, So I tend to favor composition over inheritance and the way I think about responsible if we want hierarchical reuse of code and never when we only want one responsibly in that way, then I mean, who am I to argue I do it too sometimes. So inheritance is only reasonable when we want hierarchical reuse of code But never Subscribe.