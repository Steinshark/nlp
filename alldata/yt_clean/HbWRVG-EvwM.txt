Hello everyone, welcome to this new livestream where we're going to talk about what I think is one of my favorite topics, how to get started with Swift and iOS when you're a complete beginner. I see a few messages in the chat, welcome everyone. So don't forget as always, if you're watching live, don't hesitate to ask questions, make remarks, that's the point of these livestreams, making it interactive, so that I don't feel like I'm speaking to myself for one hour. So what's the topic of today? You've seen the title in the thumbnail, we're going to talk about Apple's official method to learn Swift and iOS. What's this method? It's something that Apple released quite recently, but you see, they released it in May, just before WWDC, and I think that because of that, it flew a bit under the radar, because I remember people talking about it in May, but then there were so many new announcements, including some big ones like Apple Intelligence, that, well, I mean, WWDC always takes priority. And so I remember that I had never talked about this new resource during a livestream. I made a newsletter email, I think end of June, beginning of July, you can find it as a blog article version on my website, but I never spoken about it in a livestream and I really wanted to do it. So I was like, hey, let's finally do it. And here I am. So this resource, this method, this guide, I don't know how I should call it, I chose method because the simplest term, but maybe guide is actually more appropriate. So it's what you can see in the Safari window, it's called Pathways. I've put the link to it in the description and you will see that if you used to follow John Sandel's website, so Swift by Sandel. Sorry, I just drank a lot before and now I'm starting to feel it. End of the day for me and I feel it also. What I want to say, yes, if you had been following John Sandel's website, so Swift by Sandel a few weeks, a few years ago, it might remind you of something that John had introduced. He had created these discover pages, which were basically pages about how can you learn combined SwiftUI and they were linked to his articles, but with some extra information to make everything fit together. You will see that Apple maybe took inspiration. Actually, I didn't ask them, but personally, I think there might have been some inspiration there. And I did get the chance to attend a meeting with the developer relation team at Apple at WWDC and they mentioned this new resource and they shared that their vision was for this resource to stay updated and to have it as the entry point for newcomers that want to learn iOS. Because when you think about it, we are very lucky in the iOS community to have a lot of content creators. I'm very lucky myself to have been able to create content and to have some people, some amount of people watching it. But think about it. If you're someone who is enthusiastic about Apple and iOS, maybe you've bought a Mac, you have an iPhone, you want to start learning Apple and iOS, but up until recently there wasn't any resource from Apple to start from scratch. You had a lot of videos, a lot of documentation, but nothing to take you by the hand. And the resources that you would would be either the very famous Stanford course, so CS193p that I myself used to learn, but maybe not everyone will be aware of it. Maybe a Stanford course, even though it's pretty accessible, will feel too daunting for many people. And then you have the content creators. But if you're someone that only knows about Apple, why should you trust me? Why should you trust Paul Hudson's website, John Sandel's website when you've never heard of these people? So I think just for that, having a set of resources aimed at beginners and made by Apple with the Apple brand is really great because it will really reduce the friction to get that initial knowledge. And from there, once you have that initial knowledge, you can look elsewhere. You are knowledgeable enough that you can already tell apart what is good content, what is bad content, what seems like a scam, et cetera, et cetera. So I think that was more than enough for the intro. Let's get into the meat of the topic. So I've put the link to the website that I'm covering in the description, so feel free to check it out. It's called Pathways and it's titled Your First Step Toward Developing for Apple Platform. So Pathways, they are meant to be simple and easy to navigate collections of the videos, documentation, and resources you need to start building great apps and games. They're the perfect place to begin your Apple developer journey. All you need is a Mac and an ID. And maybe even, I would say, even if you're already an Apple developer to learn new topics that you might not be familiar with, because as you can see, we find the usual suspects. We find Swift, Swift UI, distribution on the App Store. So these three, I would say they are the must if you want to create your app or other work as an iOS developer. But you can see there is a section about design. I know a bit about design, but I'm not super knowledgeable. I'm sure I would learn something if I were to explore it. Good thing that we're going to explore it in a few minutes. You have a section about games, which could be interesting because developing games is quite different. It's still programming, but it's quite a different way to do programming than programming apps, which will either interact with web services or store data locally. So you understand why they would put it aside. And you've got also Vision OS. Granted, if you are a newcomer, I wouldn't necessarily recommend that you start with Vision OS immediately unless you have a very strong enthusiasm or you need to create an app for Vision OS. But it's still great that they created this also pathway that would allow for developers to start, developers with existing experience in iOS and Swift, to start picking up skills about Vision OS in a much more streamlined way than if they had to pick information left and right, finding which WWDC video to watch, which documentation to read, etc. what we are going to do is that we're going to have a look at these, maybe not six of them. I want to keep this live stream to one hour, but we'll check design definitely, Swift and Swift UI, and maybe games and Vision OS if we have time. But I'm not going to cover them in detail. Of course, the goal is just to give an idea of what's inside of them. I'm also curious because I checked out Swift and Swift UI, but I don't think I checked out design. So I also want to learn a few things there. So let's go ahead. Let's start with design. Let's see how we can learn the foundations of great design. So it's the design pathway where you learn foundational design principles from Apple designers and the developer community. So what do you learn when you start your path? Pathways are simple and easy to navigate. So I've already read that. When we talk about great design, we're not talking about something that's just well-organized. Great design is guided by an understanding of humanity. Well-designed apps satisfy the emotional and practical needs of the people you are designing for. I think the emotional part is quite obvious when you look at Apple devices. Like very recently, I thought about it on Twitter. I saw the new MacBook Pro with the nanotexture coating, which has been improved compared to the first iterations. And I really like the very warm and engaging and cinematographic feel it was giving to the screen. And I really felt that it was typical like Apple emotional design. I'm waiting to try it with the MacBook Pro I got. It actually got delivered like a few hours before. So it's sitting in the other room. I will maybe have time to set it up after this live stream. So I'm very curious to try it, believe me, and to see if I will feel indeed this emotional aspect. By the way, I'm digressing a bit, but a device from Apple that is great at being emotional and I didn't expect to carry an emotional side is the Vision Pro. It might seem... When you see a person like wearing the Vision Pro, it feels always a bit ridiculous because it's such a big thing. But watching a movie in the Vision Pro is really an amazing experience. And when you see like the size of the head of an actor at a very big size, like if you had a huge cinema screen in front of you and you watch the movie in 4K and you see all the details on the actor's face in the actor's eye, it really gives you a feeling of like connecting. I think it tricks the brain into thinking that you have a person in front of you and it gives a very emotional response. And I was surprised that the Vision Pro is such an emotional device. I did not expect it, but I think it might be one of the most emotional devices that I have used from Apple. So I do understand why Apple would highlight the emotional part of their design already in a beginner's tutorial. I see a question. I might be asking an obvious question, but do you need a MacBook to be an Apple designer? Good question. You need an Apple laptop or iMac, an Apple computer to build an iOS app. Technically to design you don't need to because you can design with Figma and you can find like graphical resources for iOS on Figma without using a Mac. So actually you can design a MacOS app without needing a Mac, just using Windows. However, to build a project in Xcode, then you will need a Mac. Yeah, that's one of the questions. That's why I'm not going to lie, digressing a bit, but since we are in the holiday season in France, and I think it's the same in the US, if you buy something from Apple right now, you have until January 8th to return it. So that's why I got it now because this way I can try it at home for like a bit more than a month and see if I like it or not. And if I don't like it, I will just return it and get the normal version and maybe get a bigger SSD for the price difference. But that's why I got it. So if you're curious to try it and you can afford to advance, if you have the cash flow, now can be a good time to give a try to this screen technology. See what you think about it. As you can see, I have a lot of lights in my office behind me. For example, I really like Philips Hue lights, but it means I have a lot of glare in my home. So maybe I will enjoy it just because of that. But we'll see. And going back to the topic, I should not have started to digress that much. So such apps, they feel stable and trustworthy. They have streamlined and simplified workflows and they offer aesthetically pleasing, enjoyable, and even delightful experiences. The caveat being that when they don't work, it becomes even more frustrating. Like when my Airpods don't want to connect to my Vision Pro, it's especially frustrating because it's so magical when it all works normally. MacBook Air 2020 I have is OK for SwiftUI. I would say yes for a basic project. Yes. The rule of thumb is if your MacBook Air has an Apple chip, so M1 or above, you are more than OK for a simple project. And if your MacBook Air is an Intel, it will be OK for a simple project. Don't buy a new computer just to start learning. But if you start to see that at some point it becomes a bit too slow and you have the means to buy something better, do it. But I would say don't buy something just to get started because most of the time when you're getting started, you will be working on small projects where having a faster computer will not make that much of a difference. The big computers, the fast computers, they make a difference when you are working on a large app where there is maybe like 10 ,000 files. But when you have only 10, 20, 30 files, very often the difference is not that big. And to tell you, when I was a student, so it's quite some time ago, more than 10 years ago, but I had like the original MacBook Air at the beginning and you're doing only Java project, for instance. So it was more than enough. And even when I started doing iOS, like I didn't buy the most fancy computer at the laptop at the beginning because even for content creation today, today I mostly do content creation with Xcode, to be honest. And when I create a project for content creation, well, I have only like two, three files at maximum. So like, yeah, just use whatever you have and only buy something when it's needed, but don't do it preemptively. But if you have something that slows you down and you feel that you would be better with something faster, yes, of course change, but don't think that you need to spend. What I want to say is that don't put like a barrier thinking, I need to buy a new computer to learn iOS. And so until I have the money for the new computer, I cannot learn iOS. That's not the case at all. That's really the message that I wanted to get across. But thank you for this question, because I think many people watching this live stream or the replay might have it. So thank you for voicing it. Is 16GB of RAM enough? Yes, definitely. Definitely. And I think even if you have 8GB of RAM, it's still enough to get started. To tell you like right now, the computer I'm using to do this, this live stream has 16GB of RAM. And the one I use also, I have another one which I use for other topics. It also has 16GB of RAM. So it's really like if you buy a new one these days, maybe and you have the money, maybe getting like, I think now the base is 24, but maybe 32 is a bit more future proof. But to get started, 16 is more than you need. And even 8 is okay. And I'm not sure that you can have less than 8 when you have an Apple Silicon chip anyway. But basically, like I said, any Mac with Apple Silicon is more than enough to get started. And even to start working on projects of a fairly decent size. But thank you for asking this question, because also I think people watching might be asking themselves and I wouldn't want someone to be like, no, I cannot get started until I have bought this expensive computer. Because that's just not the case. So what do you learn in this pathway? You learn where to download Apple design tools and resources. So I'm sure we will see the Apple Human Interface Guidelines pop up. Exactly. Just below. I didn't try it, but just below. We learn also what the Human Interface Guidelines are and how to benefit from them. Good point. So previews might be what doesn't run super smoothly. So if you feel it's an issue, honestly, you might want to get a 16GB one. Between the refurb on the Apple Store, sometimes also Amazon has some nice deals on the previous generations. You might be able to find one at a good price. To be honest, like my 14-inch MacBook Pro, I bought it. It's an M1 Pro. I bought it on the refurb when they announced the M2 Pro and I got it at a very nice price back then because it was almost two years ago. So looking at the refurb is a great option also. Another question. Do you think that learning design starts really makes sense when creating an app is not so easy by using AI, but only create UI can help you stand up? So I am a big believer that you should not rely on AI if you cannot, if you don't have the knowledge to tell apart good results from hallucinations. So you don't need to be an expert in design, but you still need to be able to evaluate whether what the AI is telling you is good. Another way to say it, like I wouldn't definitely not ask an AI for a medical diagnosis because I'm not a doctor and I have no way of knowing if the diagnosis is correct or not. My only way to do it would be to go ask a doctor to check it. And I might just do that to begin with. So I try to have the same logic. If I cannot check what an AI gives me as the results, I would rather not use the AI. So it means that either when I get the results, I need to do some research to check it or I need to have already the knowledge and then use the AI as a recall box. So I would really recommend you to be careful about that, because it's very easy to rely too much on an AI and not realize when they suggest things that are a bad practice. I'm noticing that it was showing part of a cutoff letter on my picture and picture, and it was triggering me a bit. So I'm moving my camera a bit. So yeah, AI is great, but make sure that you always understand what the AI is suggesting. Well, we will see. For this question, which topics should you learn? We'll see in the Swift and SwiftUI pathways and otherwise. Another resource that I always recommend when you want to learn iOS, it's the 100 days of Swift and 100 days of SwiftUI from Paul Hudson. So on his website, hackingwithswift.com. There are tutorials which are divided in 100 steps, so you can do them one per day if you want. You can, of course, do multiple steps in a given day. And I think they do a nice job of breaking things up and nicely introducing concepts. So I would really recommend that you check that out. All right. And what do you need to follow this pathway? Just an open mind, apparently. So first, you learn the building blocks of design. So foundational design principles don't tell us how to do specific things. They tell us why we should do those things. These building blocks express core truths about how we process information, make decisions, and interact with the world around us. Start your design path by peeking behind the curtain of Apple's design principles in these three videos sessions from Apple designers. Sorry, I'm too used to reading engineers from Apple designers and evangelists. You'll find out how Apple team members and the developer community get inspired, learn how to create welcoming, empowering, and gratifying user experiences, and find ways to simplify your navigation without compromising personality. So I won't play the video because I'm pretty sure that if I do, Apple might strike my video. I've had issues with that in the past, so I won't be doing it. But I checked and basically they are, most of them, they are like WWDC sessions, but sometimes they are quite old ones. So sessions that wouldn't be easy to find just by looking on the WWDC website. So it's nice that they give this, that they share these sessions. I haven't watched them. I would really recommend these three videos. So the first three, the fourth one is of course very interesting, but unless you have a specific interest in Vision OS, I think it's okay to skip it. But these three videos seem very, very interesting. They might be a bit old, especially this one, because it still shows the Apple logo with the rainbow, and that hasn't been used in quite some time by Apple. So might be an old one, but you know, as I said, like all this, but goodies. And plus like the principles of designs, I don't think that they have changed. Like what humans find aesthetic, arguably might not even have changed like for millennia. So like the golden ratio still stands. So old content is not necessarily bad content or outdated content. It's not like if you're looking at SwiftUI content and the APIs from three years ago might no longer be relevant. And then of course, as you could imagine, there is a big section about what's called the HIJ. So the human interface guidelines, these big documents that Apple releases that basically says how your app should look like, how it should interact with its users, what are the best practices and the preferred UI and UX patterns on the Apple platform. So it's basically the Bible of how to design for the Apple platform. So I would really recommend going through it. As they say, it's pretty big, but they give you some pointers for some specific parts, like how to design an app icon that makes sense, how to design your app to be inclusive, how to deal with typography, how to hierarchize information with different fonts and different font sizes and font weights, some patterns. So for instance, for your onboarding, to offer a search, to give feedback to your users, to point them into the right direction. Also a few pointers to some specific technologies, if you're interested in them, for instance, augmented reality, game controls or gestures, which I think is more relevant because arguably every interaction we have, especially with iOS, iPadOS, VisionOS, watchOS devices, are almost only gestures, unless when you use one of the physical buttons, but it's not the majority of the interactions. Granted, most of the gestures are encapsulated because when you have a button, you listen for the tap event, but this tap event is listened to by a gesture, another hood. And so understanding how these gestures work is very useful. And most of the time these days, we don't necessarily need to deal with gestures directly in the sense that the more popular gestures are already encapsulated either in events or in specific views, like a scroll view that will encapsulate a drag gesture, for instance. But gestures, when they were released, they were really one of the reasons why iOS was so successful. If you were around when iOS was first released, I mean, it was still called iPodOS, iPhoneOS, sorry, back then. But when it was released, one of the reasons why it was so popular and so groundbreaking is because it was offering a touch interface which was so much better than what competition would offer. And one of the reasons was that gestures, they were very intuitive, they were very, they felt responsive, they felt snappy. And it was not the case at all for the competition. Often you had to maybe tap two times to tap on the actual button. Really, it wasn't great at all. If you used, for instance, a Nintendo DS in the 2000s and then an iOS device, you would have immediately noticed the difference because the DS, you would use, of course, a stylus. But if you try to use a DS with your thumb like some games would ask you to do it, you would immediately notice that it was not the same level of snappiness and responsiveness. And also, it wasn't as joyful to use, to navigate in an interface as it was in iOS. And we get back to this idea of emotional, it was really joyful to navigate the touchscreen interface on the original iPhone and original iPod Touch. And actually, just this interface was already a feature of its own. There were not that many features on the original iPhone. You only had the music apps, the Safari, big feature, a fully-fledged browser in your pocket. But there was no App Store back then. But just having this touch interface, which felt really magical, was already a feature of its own. And it was amazing to use it in its own respect. So yeah, I would really recommend reading a few of these pointers. So pretty neat, right? If you want to learn about design, watch these three videos and then read a few sections in the HIJ. And you will have learned some foundations. And to answer the question about AI, I think you will have learned from these three videos enough that you can start to have a critical look at what an AI would suggest. I will be honest, full disclosure as always, I haven't watched these videos entirely. I skimmed through them, but when I have time at some point, maybe, I don't know if I take a long flight one of these days, I will watch them because design is a topic on which I think I could be better. And even though I don't design apps, I need to design YouTube thumbnails, for instance. And if I had some better foundations to know on which directions to go and not go, and how to better make my decisions on what I should put in my thumbnails and not, maybe that would help me. So I will look at these videos in the future. Now, let pathway into a topic which I know much more this time, Swift. So let's see what they have for us in the Swift pathway. So as you may or might not know, Swift is the foundation of great apps and games across Apple platforms and beyond. I think these days, it's safe to say that almost virtually all new apps are starting in Swift. I don't think anyone is crazy enough or fanatic enough to start a new app in Objective-C these days. So yeah, Swift is really the key skill. And as you can see, they don't mention Objective-C anywhere. I definitely agree. It doesn't make sense to learn Objective-C if you're starting with iOS. UIKit might be a bit more of a more difficult question to answer, but Objective-C is clear cut. Don't spend time learning it unless you have a specific need for it. But otherwise, it's not super useful. If you have gained some knowledge and you want to learn maybe the basics of how the Objective-C runtime works, I think that's good, because it's still used by iOS and macOS up to this day. But learning how to implement an app in Objective-C, there is zero value in trying to do it. If you want to see what Objective-C apps look like, by the way, I have a replay of a past live stream from two years ago, I think. It's called something like, I react to my old apps or something like that, where I look at the code of a few very basic apps that I had open source like 10 years ago, more than 10 years ago, maybe more like 15 years ago. And it's interesting. You will see what Objective-C looks like, and you will see how lucky we are that we have Swift today. So let's see. The Swift programming language is approachable, safe, fast, and powerful. I think I would agree with that. It's also backed by an extensive open source community that has one goal, to make Swift the best general purpose programming language in the world. I would say it's even maybe more approachable than Python, because Python, the fact that your scoping is done through indentation I think can be confusing, especially when you're a junior developer. So I would agree with the fact that Swift, I think, is very approachable when you want to learn. So what do you learn here? An overview of the Swift programming language, a basic expression of Swift-specific features and syntax, where you can learn about Swift on other platforms, if you're interested in Swift on the server, for instance, and how you can continue to learn about advanced features of Swift. And what do you need? An understanding of basic programming concepts. I think you need to know things like what's a variable, what's a loop, this kind of thing. So programming 101, I would say. And then you need to know a bit about, so here they give two pointers to the Swift programming language guide and standard library. I don't think you need to read these before you start. I think it's more like, it might be useful to refer to these documents if you are looking for something. But honestly, I mean, if you read these two documents and you understood everything in them, you don't need to read the rest of the pathway because you will already have learned everything. So they are more like resources. Yeah, it's what you need. But I don't think it's a prerequisite. This one is, kind of, but these two, they are more like resources to help you to be honest. One question, does Apple provide any architecture guides? I mean, Apple typically has been very cautious in promoting architectural choices. They've been a bit more opinionated in the W3C videos recently, talking about view models a bit more, for instance. But I think most of the time, they still leave this topic out of the way. And for instance, there is nothing equivalent to TCA to the comparable architecture made from Apple, for instance. So for better or for worse, to be honest. But they don't really do that. I mean, they just started to make some resources to learn from scratch. So, you know, maybe they will move on to more advanced topics in the future. Who knows. But up until now, they were quite discreet on that topic. And it was up to the point that some people were saying that Apple was out of touch with how very large apps like the Uber, the Airbnb, etc. were being built at scale. We'll see the changes in the future. But I wouldn't necessarily expect it. And one reason is that releasing new APIs enables new use cases, which enables ultimately to sell more apps, more devices, and more in-app purchases. So that's in the direct interest of Apple. Defining an architecture, advocating for it, and all of these things, honestly, I think it's a bit more remote to Apple's immediate goals. And I think that's why they don't mention it. They don't focus on it as much, to be honest. But it's my own interpretation of it. It's not backed by any kind of official statement from Apple. So we have a Swift overview. So developed by Apple and announced at the WWDC conference in 2014. Unfortunately, I wasn't in the room for this one. I was in the room when they announced SwiftUI, but not Swift. I was still a student back then. I was a last year student doing my final internship when they announced Swift. Swift was designed to be a safe, approachable, high-performance, general-purpose programming language. I remember that they used to emphasize a lot the performance because it was much better than... I mean, Objective-C, for the object-oriented part, was fully runtime. And so it had some impact on the performances, in the sense that there were things that would be not performant if you were to implement them in the object-oriented way. And Swift lifted that limitation, in part, by introducing protocol-oriented programming. But I remember it was a big focus of talking about how Swift was high-performance. These goals are achieved through various features, including Swift's modern and expressive syntax, type safety system, interoperability with C, C++, and Objective-C code. These are more advanced topics, but it's good to know that, indeed, you can interoperate Swift with these languages. In 2015, Apple announced that Swift would be released under an open-source license. It's true that the compiler is available on GitHub, and so is the Swift standard library, which is implemented in Swift, so you can check out the code. Actually, I also did some live streams to check this code out. Fair warning, it's among my first live streams. I think it's even my very first live stream is looking at how some functions of the standard library are implemented, so you will definitely see a difference in the production value. But feel free to check it out if you want to take a trip down memory lane. This announcement helped Swift grow and evolve in the coming years, and it quickly became the preferred language for developing for Apple platforms. Granted that Apple has a large power in skewing what is the preferred language for developing for Apple platforms, but it's true that it is the case, and I think very few people are missing Objective-C. Some people are still very fond of this language, maybe for emotional reasons, because when you work maybe 30 years with a language, of course, you get attached to it. But I think most people these days are quite happy that we use Swift and not Objective-C. Collaboration between Apple and the open source community has also enabled Swift to expand beyond Apple with added support for different tools and platforms. This expansion into more and more use cases promotes a growing community of diverse developers and contributors, all solving different problems, which in turn benefits all Swift language users. I think the most typical example of this is Vapor, a project that uses Swift on the server to implement a backend using Swift. Overall, Swift has become a powerful and flexible programming language that developers can use to create modern apps for Apple platforms and beyond. And to be fair, I've never used Vapor myself, but one thing nice with Vapor, I don't know if it's still the case today, but in the past, Vapor used to be quite enthusiastic about using new Swift features, sometimes even before Apple used them themselves. For instance, when keypaths were added in Swift, Apple was making almost no use of them. I think they were only used for an API that was wrapping the old key value observing pattern. And then SwiftUI made a big use of keypaths, but there was a gap of one or two years between when Swift released keypaths and when SwiftUI released. But Vapor started to introduce a lot of syntaxes based on keypaths in their API. And it was really nice because it was giving a lot of inspiration for iOS engineers that wanted to replicate the same kind of patterns in their own apps, in the model or domain layer of their own apps. So learn the basics. Once you've gotten this overview of Swift's history and community, it's time to take a look at the features of Swift. Although this pathway is focused on developing for Apple platforms, the foundations here apply to writing Swift code on any platform. To get started with Swift, you can begin by reading a Swift tour or watching the video session of the same name. These resources give an overview of the features and syntax of Swift and will act as your introduction to the Swift programming language. The guide is the definitive source of information on Swift and all of its features. And it is a great reference manual to come back to as you continue on your learning journey. In this pathway, there are callouts, specific chapters in the guide that are especially helpful to read when first approaching Swift. So it's this very big, long documentation page, but which gives a very thorough and very structured, in several small chapters, tour of Swift. So I would definitely recommend reading it and maybe reading it step by step. So you have pointers. Don't read it in one go, or read it step by step, because in one go it might be a bit too much if you're getting started. But step by step is the good way to go. Question, how often developers use obfuscation on their code and where? Honestly, it really depends. But to be honest, I don't think I've ever used an obfuscator on iOS. I know my Android colleagues used to do that because it way easier to decompile JVM, so code for the Java virtual machine, than assembly, which is what iOS generates. So I've never really used it, honestly. So I don't think I can share any recommendation on that topic, unfortunately. And yeah, as you're saying, unlike Google for Android, so I guess Apple doesn't really provide anything as far as architecture best practices is concerned. Most people end up creating their own version of a clean architecture. Exactly. So some people are very minimalistic, and I would say when you're just getting started, using just a view model is often the nice level of abstraction. And then TCA seems to have gained some ground. I know that at work, the Photoroom iOS app now uses more and more TCA, from what I understand. I know that I've never used TCA myself in production, but I covered it one year ago when I did the official TCA tutorial, and I really liked the principles. I really liked the way that they had done it because there wasn't too much overhead. It's kind of like the issue that I had, and I wasn't the only one with Viper. So if you've never heard about Viper, consider yourself lucky. But Viper, it stands for View Interactor Presenter something. And it was the clean architecture version for iOS. There used to be so many conference talks about it around 2015-2016. I think it kind of died. I think people realized it was maybe a bit too much, a bit too many files for what was needed. So yeah, I think for a amount of architecture, I would recommend going with TCA these days. I think I've heard enough positive feedback, and I've liked what I saw when I checked it out. So I think TCA would be my go-to if you want to start having some amount of architecture or robustness. And if you want to look for a more robust architecture, you can look at what Uber has open-sourced. They've open-sourced the RIB, so R-I-B architecture. But fair warning, RIB is meant when you have hundreds of engineers working on an app. Don't use it when you have only like one person or even a small team. It makes sense when you have a large, very large, distributed team across time zones, across business verticals, where it's very hard to synchronize everyone. But don't do RIBs just because Uber does it, because Uber has a scale that you probably don't have yet. Maybe you will one day, but you probably don't have it yet. And you say, I prefer the Pikachu architecture. I don't remember. Was this one an April Fool's joke? I'm not. It rings a bell, but I don't remember exactly what there is behind it. Oh, interesting question. I'm going to answer it because it's relevant for beginners. Many companies have switched to Flutter or similar, so some kind of cross-platform framework. It may just be an original thing. I'm from South America. How could you convince a client to stay with iOS? It's tough because most of the time it's going to be a business decision more than a technical decision, to be honest. It's going to be like either business or C-level stakeholder that will push for it. And very often with an idea of reducing costs. I've already talked about it. I think I have a short video maybe on my channel somewhere, but my opinion is that it's very hard to build a best-in-class app using a cross-platform system. For instance, I'm not sure that the PhotoRoom app as it is today could have been built at the same level of quality on both iOS and Android using Flutter. I still think that it can make sense for situations where the business needs to have an app, the app is not the differentiator. Thinking, for instance, in France, you have a very popular service to book appointments with doctors and other medical professionals. They have an app, which last time I used it was awful. It felt like a website encapsulated into a web view, basically. But it doesn't prevent them from being super successful because their service is being able to easily book an appointment with a doctor. And if you're sick and you need some medicine, you're not going to care that the app is maybe not super intuitive. It's not what's going to make you use the app. Because if they had the best app, but almost no doctors listed on it, the app wouldn't be successful. So you see what I mean? So I would say if the app is not a huge differentiator, if you don't need to build an habit where you want people to use your app daily and to come back to the app daily, then indeed, maybe from a business point of view, using a cross-platform framework makes sense. But if you want to build an app that will allow you to differentiate, I think it's going to be very difficult with cross-platform. So that's my opinion. You can agree, you can disagree as you prefer. I'm fairly focused on native iOS engineering. So of course, my opinion is skewed because native iOS is what has paid the bills for quite some time. So that's my opinion. Make whatever you want with it. Yeah, at some point also you might hit a wall. And also it's very cyclic stuff because you could imagine a company starts doing native, then a new CTO comes in and wants to change things. Then six years later, another new CTO comes in and goes into the other direction. It's when you start to see a natural business cycle start to take hold. But what I would always say if the question is what's the best way to find a job is look at the market in which you're looking for a job and be realistic. If you're looking to find a job in your local market and the local market seems to have moved to Flutter, then maybe it makes sense for you to learn more about Flutter. I mean, don't stick to native iOS and stay jobless. That's what I wanted to say. Kotlin multiplatform looks promising and indeed it works by allowing you to share the business logic between two codebases. But I think you can still implement the UI part natively. And that makes sense a lot. And also because there are many successful apps that build their own version of this level of abstraction to encapsulate their engine, their web clients, all of these things. And so this is a good engineering recipe if your project is big enough. And yeah, would agree. I mean, just as microservices have lost in popularity with the end of the zero interest rate era, there are probably many companies that were building two apps and now they need to reduce spending while moving to only one codebase is one way to do it. I do find it sad as someone that likes native development, but it's economical cycles. And as an individual, you don't have a strong grasp on them. You're not a central bank. You don't decide interest rates. So your best guess is to try and adapt yourself as best as you can. But it's very unlikely that you will be able to change your local market just by yourself. And when I say very unlikely in the sense that the probability is zero, you know. So let's see. So then they show you some of the chapters. I won't go over everything because I see it's almost been already one hour and I would like to cover the SwiftUI one, but they go over the basics like variables, loops. So how to declare data, how to handle the control flow, then type safety and type inference, which are two big features of Swift, collections. So arrays and dictionaries typically. Oh, and then you have some sort of control flow and functions come here. So how do you structure your code? How do you write loops? How do you write functions? What's the limit of what a function can do? Like all the subtleties of the signature of a function, I'm thinking about things like default value for arguments, overloads, this kind of thing. Then about structuring your code. So once you've learned the basics, how to build something that's scaled. So the difference between value and reference types is super important. Structs versus classes also very important to understand it, especially so that you don't go into the wrong direction. And also, as we said earlier, if you ask an AI to generate code this way, you will be able to know if it's using the right patterns or not. And that's very important because AIs have been trained on existing code. And for iOS, there is much more code with the older APIs than the more recent ones. So it's even more important to be able to know when the AI is suggesting something that goes in the right direction or when you need to ask it to correct course. Knowing how to choose between structs and classes and enumerations, which are quite an important concept in order to design code that is type safe by construction. And then when you want to go further, so when you already have learned the basics, so there are a few topics. So protocols, which is called interfaces in other programming languages. So how to define a set of requirements that will be implemented by a part of your program that can be used independently of the part that implement it. So how to separate what a part of your code does from how it does it. Generics, which is how to write code that can be applied to different situations. One of the very nice features, one of the most powerful features of Swift, I would say. Concurrency, super important. How do you write code that is asynchronous, so that doesn't block your app while it interacts. So how do you make a file download from the internet without blocking all user interactions until it's complete. Super important. And Swift has a very nice syntax to handle this. Now, macros. Honestly, putting a link to the video on how to write Swift macros in a beginner's guide is quite bold, because I'm not going to lie, I wouldn't know top of mind how to write a complex Swift macro. So a Swift macro is a compiler plugin, so it's very tough. But knowing how to use them is good. Knowing what's under the hood is good also. But writing a Swift macro, it's a stretch goal if you're a beginner. But good on them to mention it here. But I would have put it in an advanced topic or with a warning, like fair warning, this is a fairly advanced topic. Don't feel ashamed if you don't fully understand it. An embedded Swift, for when Swift is embedded in a microcontroller, so on small cards, on connected objects, that kind of thing. I've never used it. What's the link? Okay, it's a W3C video from this year. So oh yes, I remember. They mentioned it in the State of the Union, I think that there was now an embedded release of Swift where you have a smaller, like the lib Swift, the sound library is smaller. So you have less features, but it takes less space, both in ROM, but also in RAM when executing it. So it's new, and that would be an interesting read. Maybe I will do a live stream on this topic in the future. You know what? I'm going to make a screenshot to remember that. When I see a message in the chat about the cross-platform, so the trade-off is time and less lines of code, but you gain operational overhead and jumping through platform-specific groups. Yeah, absolutely. What my colleagues in my previous job had told me is that at best, they estimated that they would gain like 30% by using these cross-platforms, but you never gain more than 30%. You will never gain the promised 50% cost reduction because you still need to test on both platforms, you still need to fix some bugs, some platform-specific bugs. So 30% is like the target of what you can hope to gain. And of course, it can be anywhere between zero and 30%, depending on how well you execute, how appropriate your app's complexity and your app domain is for such platforms. And then you have a look at some frameworks which are built for Swift. So frameworks that were built with the Swift syntax in mind. It's worth making a distinction because many iOS frameworks were built back in the days of Objective-C. And so they were built with Objective-C in mind. Typical example is UIKits. But now we have frameworks built with Swift in mind. So the most famous is, of course, SwiftUI, but more recently, SwiftTesting that was announced this year to write tests for your code. And SwiftData to persist data locally and sync it across devices using iCloud, which was announced a couple of years ago, WWC23. And which uses many Swift features, typically macros. SwiftData was the first framework to make use of Swift macros and an extensive use of Swift macros. All right, we've covered this pathway. Let's look at SwiftUI and maybe quickly games and vision OS, but I will go very quickly for this use. So SwiftUI, what do we have here? So here you need to have Xcode. There is no way around it because even though there are some online tools to build Swift that can work because you can build Swift on Linux using the open source version of Foundation, to build with SwiftUI, there is no way around using Xcode on a Mac. That's the only official way to do it. So in this pathway, you'll learn why SwiftUI is a great choice for creating apps, the basics of developing apps with SwiftUI, how to develop and preview your SwiftUI apps in Xcode, and where to go next. The where to go next is super important because it gives you pointers to keep learning after you've finished going through this pathway. So meet SwiftUI. To explore what SwiftUI is and what it can do, it's important to understand how you develop with the framework. SwiftUI employs declarative programming, so a very trendy pattern because React on the web and Composable on Android also use the same pattern, which focuses on writing your specific desired outcome and letting SwiftUI do the work of translating your code into a functional UI. Here it's functional in a way, not in a functional programming sense, but in a way that's something that works, something that is functional, something that performs a function. Writing declaratively can be a powerful tool for UI design as it allows you to more easily iterate on your ideas and can make your code more succinct and readable. What does it mean to have a declarative framework? For instance, when you have an imperative framework like UIKit, you would have a line of code that says, oh, I want to present this screen modally, so to have it cover up the UI to show another screen, and then another piece of code that says, okay, now I want to dismiss the screen. In a declarative framework, you will say, okay, when this property is true, I want the screen to be shown. When it's false, I want it to be hidden, and then you will only change the value of the property from true to false. This way, it's easier for you to write tests and also you have the guarantee that whenever the value goes from true to false, well, the right side effects, the right updates of the UI will be triggered, because it was very easy with imperative frameworks like UIKit to forget in one code path to implement the fact that you need to show a new view or hide a view in response to a user interaction, and then your user would be stuck with no way to move forward, and these bugs, they were way more frequent than we would have liked them to be, to be honest. To get started, watch SwiftUI Essentials to learn how to take advantage of fundamental features. From there, dive into tutorials where you'll get hands-on practice using SwiftUI to create projects in Xcode, and it's true that Apple had released, even a couple years ago, some great SwiftUI tutorials, so we'll see if it's the same ones. Xcode is the integrated development environment that enables you to develop, test, and distribute apps for all Apple platforms, then challenge yourself by explaining the structure of a SwiftUI app in a guided workflow that explains what's happening in each line of code and why. This looks super cool. So let's see, there is this video which I won't play because of copyright issues, and so this is... so what is this one? I'm trying to see. I will check check if I've already covered this content in a live stream because otherwise I might want to cover it, but it might ring a bell, but these tutorials, like all of the SwiftUI tutorials from Apple, they are super high quality. Every one I've done during a live stream, I was very impressed by what they've released, so I would definitely recommend them. So there is some pointers about which view you should use to display your data. So customizing views with properties, here something to display, an about view, it would seem. Let's see if we can see an example of what these views, there are no previews, but this reminds me, I might have done... I don't know if I've done all of the sample apps, but I've done some of them, and they are really great, and there is even one about machine learning. Maybe I should, I've been wanting to do a CoreML live stream for a long time, so maybe I will have a look at that, but these tutorials, they are great, so I would really recommend that you check them out. I see a message in the chat, so in a phrase that took me a while to get is, a view is a function of its state. When I got it, I realized they meant that literally, as in a literally function. Yes, absolutely. Absolutely, yes, that's a very, very, very good remark, because indeed, body is a complete property of SwiftUI view, the body, but a complete property is just like a function with no arguments, and since it's re-computed whenever the state changes, then it's okay, indeed, to see a view as a function that takes in the current state, which is all of the properties, all of its state properties, and everything it listens to in the environment, and the preferences, and everything like that, and whenever one of these changes, then it returns a new view to its body, so that's a very insightful way to say it, and I agree that it's not easy to grasp it at first, but once you do, it really helps you also better architecture your app, because then you can understand that a view is a way to go from one, so what you say is true is that a view is a function from a state to a UI, that's true, but you can also see a screen of your app as often a function from one user action to a result, and that's also a great way to write down a workflow of how your user would navigate through your app, and seeing every top-level view as a function from one input to one output is also a great way to do it. By the way, this is not specific to computer science or programming, there are many engineering methodologies that date back decades that are about defining what are the inputs, what are the outputs of a machine, and what does it do internally, so there is nothing new under the sun, I've done the same approach with mechanical engineering in high school, but it's always something that works because you can always think of things as having an input and an output, and an internal processing to go from the input to the output, so it's a very natural way of splitting things up, and you're saying that I have covered most of these tutorials, I remember that last year, no, not last year, earlier this year, we're still in 2024, I covered a lot of them, but I guess I covered so many that it's hard for me to remember which one I've covered and which one I haven't. So thanks for reminding me. And yeah, it's very difficult when you're used to the life cycle of a view controller, where you had specific methods, where you would implement specific actions directly. It's a bit of a paradigm shift in the literal sense of the word, and I would say the trickiest thing to understand is usually how you deal with showing a model view, that's why I mentioned it, because that's the one that is completely at the opposite of what you would do in the imperative world, and often once you've understood that one, then the rest gets easier, because the rest is always some kind of variation on how you show a model, like how do you select the tab of a tab view, for instance, the active tab of a tab view, same logic, how do you select the active segment of a segmented picker, same logic. So once you've gotten that, then it gets easier. And you say someone once said programming is just about moving around variables. Yeah, it's the assembly line and you're moving stuff from one state to the other, and you could also see the interaction with the user as you move the user from one state to the other, like a food delivery app, you're moving the user from the state, I want food to the state, I have food coming, and then I have food delivered. So you can also see it like that, you can see like watching a movie on the Vision Pro, it takes you from the state like I want to be entertained to I have been entertained, and I have experienced like some emotional stuff. It's basically everything can be described as like going from one set of inputs to one set of outputs when you think about it. Then there is something about taking a structured approach to design. So picking the right view for your app is the first step. And now it's about how do you put them together. So here there is a tutorial about designing interface, laying out views, building layouts with stack views, so the VStack and the HStack, the typical building blocks of SwiftUI. Then a link to the human interface guidelines with layout design best practices, and then a link to download the app design workbook, which is downloading. It's a keynote file, the app design workbook, actually. So I'm going to try and open it and try to see if I can show it. But I did a full live stream and a full video on this topic in May last year. No, you can't see it because I'm sharing on eSafari. So you will have to trust me on this one. But it's a great document that I went over a few months ago. So you have the replay of the live stream and you have a three minute recap video. And it's basically a methodology made by Apple. So an official methodology on how to design an app, but from the functional point of view. So how to find a good idea for an app, how to define the use cases, how to prioritize the features, how to design the UI once you have your prioritize your features, et cetera, et cetera, or to get feedback from users. Also super interesting document available for free. I would recommend you check it out. Or if you don't want to spend too much time, just check out my three minute video recap video of it and you will get the gist of it. But it's a great document that is unfortunately quite hidden on Apple's website. Even here, you can see that it's hidden as like the last link in a series of links. It deserves a better visibility. And yeah, yeah, my wallet is full. I buy Apple product. My wallet is empty. It's the typical one. It's the typical one. It's like when I went to the US in May and in June, it was the, it was my typical, my typical loop. I can relate to that. Then navigation. So navigation, how do you navigate inside the app? How do you navigate in a way that makes sense for the user? That is intuitive. You need to think about it because navigation is kind of like the outline of your app. You could make this argument that navigation is like the hierarchy of the app, the outline of the app. So it's super important to get it right. And there are some rules for that and also some best practices from the technical point of view. So here you have resources to learn more about that and then diving into the data part. So here it's about using Swift data. To be fair, you don't need to use Swift data to implement an app. You can implement an app, for instance, that stores data in the cloud using Firebase or Superbase or one of these popular app building services. But if you want to store data locally, you can use Swift data and you have some tutorials about it. A question, do you think Apple will ever or should ever make a cross-platform framework or acquire an existing one like Skip? Well, I don't think it suits their interest because Apple's interest is that we all use an Apple device and we stay inside the world garden and inside the ecosystem and we are all super happy like that. So I don't think they will ever release one. I think in their mind, Swift might be enough of a cross-platform because you can use it on the server. You can even run it on Windows. They're in the process of making foundation open source and the foundation used by iOS and macOS and all of the other OSs is open source. So I think in their view, that might be already a big stretch and an effort in the sense of being cross-platform. But I don't think that Apple has any interest in having something compatible with Android, to be honest. Unless there is like one day a regulation forcing them to do it. I don't think it's in their interest to offer something like that. And thinking back, I don't think back when Microsoft was like king of the computer world, I don't think they ever tried to do something to allow you to run a Mac app on Windows. I mean, back when Macs were using Power PCs and Microsoft was using Intel, it would have been quite hard to do it. Not impossible, I guess, but quite hard. But even when Apple started using Intel, there was never any effort made from either side. So I don't see why it would be different between iOS and Android, to be honest. It's true that if there is a regulation, it might probably come from the EU, but it might be a bit too technical and low level. And I don't think that having such a cross-platform would lift that many barriers to entry. I think it's more about interoperability, for example, making sure that if Apple uses iMessage on iOS, then they have to offer a way for third-party apps to interoperate with it. But that seems maybe a bit like a stretch. But yeah, having to run Android, I think this is definitely Apple's leadership nightmare. I think that's definitely their nightmare. But when you see that there was never anything like that on laptops and on computers, even back when Microsoft used to have a super dominant position, we'll see. But it's not on my bingo card. I might be completely wrong on that one, but at least it's not on my bingo card. And if you want to go further with SwiftUI, you can check out documentation, developer forums, video sessions. What can you do to go further with SwiftUI? I think I would then recommend the websites of your usual iOS content creators, because they all have SwiftUI content. And when you've covered the full content of the pathway, then you know enough to be able to pick up other topics by yourself. So let see. It's already a bit more than 9pm, and I don't want to finish too late, because I woke up early this morning. But let's see quickly, what do they have in the Vision OS pathway? I haven't tried to build an app for Vision OS, by the way. I do have one, a Vision Pro, but I use it almost exclusively for home theater. But I haven't tried to build an app from it. But of course, there are a lot of resources to learn the basic building blocks of spatial computing, which adds one more dimension to building an app for iOS, because it's all flat, it's all in 2D. And now you have to deal with 3D. So you have to get started with building apps for spatial computing, develop your first immersive app, which not all apps need to be immersive, by the way. Some apps are not on the Vision Pro, like the mail app is not immersive, and arguably it has no reason to be. No one wants to be immersed in their emails. It's more like a nightmare than a use case you would want to have. But some apps can be immersive, and then it's a bit different to develop for an immersive app. How do you make accessible spatial experiences? That's an even more important topic, because since you can only interact with your hand, but not touching actual hardware, it's very important that the app responds as the user expects to, because if it's not the case, well, since you're not touching anything tangible, it can be very hard for the user to course correct. I've experienced it, like when the button doesn't want to tap. Well, what do you do? Except keep doing that and hoping it will register. It's quite a weird feeling, but it can also be a frustrating feeling. So I understand the importance of that. And then how to use SwiftUI in Vision OS, and how to use UIKit also in Vision OS. Yeah, immersive spam email. I know that there is a guy that has a career in developer relation. I think he started by doing an AR client for Twitter, back when the Twitter API was super open and super free. He did that back then, and that's what got him started. So honestly, of course, Twitter was more popular than email, and Twitter didn't have like the... I mean, these days Twitter has a negative connotation, so it would be closer to email in terms of public sentiment. But back then, it was still like the shiny new thing. But maybe as an April Fool's joke, doing like a design concept of it would be pretty nice. Oh, yeah. I think it was the dev rel of Revenue Cat, who had tried... He got the Vision Pro when it released, because it's based in the US. And he had tried to display a paywall that would take the entire size of the wall in his house. So yes, you can imagine ads. You can imagine also paywalls in a way that could feel quite daunting. And yeah, that could be the stuff of nightmare. I haven't experienced ads a lot in apps with immersive state, immersive space, but I can see how it could become a very aggressive experience. Then there's a lot of focus on designing. What are the principles of spatial design? How do you design for spatial user interfaces? So definitely, you can see that you need to learn a lot of new foundations when you want to develop for Vision OS. How do you design for spatial inputs? What I was saying, the fact that people are not touching anything tangible, anything real world, they are just like doing gestures in the air. So it's very important to get things right. Share play experiences. I haven't tried it, but watching two movies in sync with... I mean, watching one movie in sync with two or more Vision Pro must be quite impressive. Immersive sound design. I have seen how spatial audio is impressive on the Vision Pro, so it would be great. And then taking into consideration, like vision and motion. Don't make your user feel motion sickness. I tried playing Resident Evil 4 on my Vision Pro by sharing the screen of my MacBook Pro, and it made me nauseated in a matter of seconds, which was never the case when using the Vision Pro, like to watch movies or to use the Vision Pro apps. So you want to be mindful of that, especially to do custom graphic stuff like games, because making people feel nauseated comes fast, and it's a really bad feeling. It's even worse. We tend to say that making the app crash is the worst experience you can give to your user. When you're in the Vision Pro, making them want to throw up even tops that. So that's something you want to be aware of. And then it seems like there is even like, there's even a tutorial. So there is lots of resources here. You can see that they put like some big effort. You can see that they want to have people start creating apps for Vision OS, because I'm not going to lie, there are not that many apps on the Vision Pro. It's a bit sad. So I understand why they would push that. So if you want to learn Vision OS, honestly, I mean, read this page. And I think you will have more than enough to get to get started and to get you occupied for at least a couple of weeks. And let's before we finish what they have to say for games. And you're saying, Yash, as someone with a visual impairment, I'm very curious as to how accessible it is as far as visual activity is concerned. That's a good point. So I don't know anyone who has tried it with visual impairment, but I did see that, for instance, you know that you point with your eyes, the mouse or the trackpad are basically your eyes and where you're looking at. And I know that you can, for instance, say that by default, it will use both eyes, but you can say only use one specific eye in case where you have someone that doesn't have the two eyes, like always looking in the same direction. So I know there are some options about that. I don't know how far they go, but I saw that as Apple often does, they did put an emphasis on accessibility. I guess that there must be like a limit in the sense that for a very visual device, well, like it's capped by the capacity of the person using it to perceive shapes and colors. I don't know if there are some safety things that you should be aware of, so it might be worth checking it. But I saw that there were some options at least. And it's kind of nice because I don't remember seeing the same level of accessibility options when using the competitor's headsets from competitors. And these options can also be useful. Let's imagine that one day you have something like an infection in your eye and one of your eye is making the Vision Pro misdetect what you're doing while being able to say, OK, only use my currently good eye is also a good thing. I'm not sure that using a Vision Pro is the best idea if you have conjunctivitis or something like that. But still, it could also be useful if you have like a temporary disability. A new saying snub in SwiftPathways, link on choosing between structure and classes didn't work. Oh, that does show how hard it is to keep links, to keep like to find dead links in documentation. If even Apple screwed up on that one, then it shows that it's it's definitely a tricky one. And yeah, I don't know if there are other accessibility options. I know that you can plug in a keyboard in the Vision Pro and even like a user that has their full vision can plug a keyboard just for like a better experience typing, because typing in the Vision Pro isn't that great. I don't know if you can also plug in a mouse or a trackpad. I have no idea. It might be that you can. And and I just like haven't looked into all of the accessibility options, but. Trying to think about it, like from a technical point of view, I don't think that just like I mean, it's kind of like having like a trackpad on the iPad when you think about it, like they were able to do it. But you can if you can put a trackpad on the iPad, I would say there is no reason you can't do it on the Vision Pro. Not sure if you have the feature, but maybe it would come. But technically, when you think about it. Yeah, because you're I mean, when you look somewhere with you, with your eyes, basically, you are pointing to a to a to a coordinate on the sphere. Basically, it's like you did launch a ray from your eyes to like whatever window is going to hit. But it means that you're basically giving like X, Y, Z, I mean, angle positions on the sphere. So you could always this could be replicated by moving a cursor on the on that project on the sphere using the trackpad. I don't know if it makes a lot of sense what I'm saying. But basically, maybe trackpads work. They could work, I think. I don't know if they if they have supported it. And so for the games pathway, the last one I will cover, because I'm starting to feel a bit tired and I didn't want to to do more than one one and a half hour for this for this live stream. So find out how Apple tools and technologies can help you create the next generation of games, whether you're bringing your game to other platforms or starting from scratch. So what do we have here? So you have something about designing for Apple devices. Here an interesting article about how to adapt a game interface for smaller screens, because if your game is meant, for instance, imagine like you want to to port a game from the Nintendo Switch to iOS. Well, the screen of a Switch is bigger than the screen of an iPhone. So you need to find a way maybe to make sure that the UI stays like readable. Everything still stands out as it should. It's not crowded. And this can be can be a challenge. I can give an example if anyone has tried to play the Witcher 3 on the Switch because they port it on the Switch and it's a decent port. But the UI feels so crowded because it was meant for like a PC monitor or like a TV and not the small screen of the Switch. And it didn't like it didn't feel like a great interface when I tried it on the Switch. And then when I played it like on a PC, on my TV, it felt much more like natural. So it's something that you definitely don't want to skip. Otherwise, it can make your game feel very clunky and not agreeable to play at all. And then it the big topic, creating beautiful graphics. But that means learning how to use Metal, which is Apple's version of OpenGL. I think that they use different patterns and architectures, but it's the equivalent of OpenGL on the DirectX on the Apple platform. So there are some sample codes. Same thing, maybe one day I would like to do a live stream about Metal, but I need to find a great tutorial for it because it's such a complex topic. And I'm not going to lie, I only know the very, very, very, very, very basics of it. And then it's about providing intuitive experiences, because think about it. Games, most of the time, they don't use UIKit or SwitchUI, they use like Unity or other frameworks. And so they don't benefit from all of the nicely designed UI controls that apps use. So they need to make sure that everything works well. And I'm sure you've all experienced games where the buttons in the UI, they felt a bit more clunky than your typical buttons on iOS apps traditionally feel. That was the reason, it's because they have to implement their own gestures and they don't always do it as well as Apple does it with its own UI frameworks. Oh, that's sad, if the document points to like, oh, wow, yes, that's an old one. That's the old UI for documentation on Apple's website. So the fact that there hasn't been any more recent documentation on Metal is not a great look. So I think if I want to find a nice tutorial for Metal on Apple's website, it's not for tomorrow. I need to wait a bit. So nice of you for calling it out. So I'm not sure if they are still, I hope that they don't show like deprecated stuff that they are just like in the archive part. But I wouldn't say that Metal is rusty in the sense that it's still used, but it's very possible that maybe the API has evolved and the way you would do Metal when it was released, something like eight years ago, something like that, a bit more, it's very different than the way you do Metal today. So yeah, I would be careful about it, to be honest. But granted, there might not be any better resources than the one that they've put there because Apple released these pages in May. So it means that they probably finished making them in like April, end of March, April, something like that. So if they had better resources, they would have put them. So it might be that it's the best resources that they have. Might also be, I don't know, maybe like an AI can help you here if you ask it questions. Maybe ChargPT or Cloud could help because Metal has been there for enough time for it to be like good examples for it to train on. So maybe that's one of the parts where an AI could help. I've never done it, trying to learn something purely by talking with an LLM. So I cannot speak about like how reliable it is, but it's an option to have in mind. Then they talk about like the importance of soundtracks and effects for games, the game center part, the game kit, screen capture, screen capture kits, how to deal with accessibility, always a big focus of Apple. And then we are back to spatial computing. I would really love games to use more and more the Vision Pro because I think there is such a potential. I have downloaded the What If, the Marvel What If app. I still haven't played. It's not really a game. It's more like an immersive experience, but I would love for it to be more games on the Vision Pro, like when I saw that there is a Batman Arkham Asylum or Batman Arkham game on VR, but it's exclusive to the meta headset. I was a bit disappointed that I won't be able to play it on the Vision Pro. Honestly, I hope that Apple Arcade will get better on the Vision Pro because it feels like such a missed opportunity for now. Then it talks a bit about like Unity, putting your own game engine, bringing your game to Apple devices. So you might have seen that being mentioned at the WWDC and the Apple events for something like two years now. There is a strong emphasis on bringing games to the Mac. For now, it's bringing existing games with a few years delay. I mean, they will be bringing Cyberpunk 2077 in a few months, but it's released in a bad state, but it's released at the end of 2020, so almost four years ago. So we're still in the trend of Mac gaming where you get the popular games one to two years after. I hope that will improve. I will be so happy the day I see a big title releasing day one on the Mac. I think that might be the case for Assassin's Creed Shadow because they talked about it quite a lot at WWDC, so that might be the case, so we'll see where that goes. But creating games, I'm not super knowledgeable about this topic. It's a topic on its own, it's a skill on its own and I don't know that much about it. And I think that concludes what I wanted to show about Pathways. So nothing beats Minecraft on Mac. I don't know if you can believe it, but I have never played Minecraft in my life. I have played a lot of video games, but never Minecraft because I think it released just when I was starting to study CS and I had a lot of work and then never got around to playing it. I've never been into multiplayer games also, so I have heard a lot about Minecraft, but I have literally never played it. And when I say never, it's zero. For instance, I've played World of Warcraft once for half an hour, but Minecraft, it's literally zero. I have never played Minecraft in my life. So maybe one day I will play it. I have seen live streams, I have seen videos talking about the lore or the fun stuff that happens in Minecraft, but I have never played it. So now I can relate to how you can go, you can have something that is super popular and that is very common to other people of a given age and it can completely pass you by. Now I can relate to that thanks to Minecraft. I think it's the end of this live stream. Like I said, I've got my new MacBook Pro and I want to go unpack it. So thank you for following it. If you are about to get started with iOS, I hope that now you're convinced that these pathways, they are indeed a great set of resources to get you started. And from there, don't stop exploring, trying to build stuff. I think the most important, the most valuable advice I could give is to always make sure that you understand what you are doing. Never just copy, paste and take something for granted. Try to understand why it works that way. It does take a bit more time, but it really pays dividends because it's what allows you to build a deeper and deeper understanding of what you're doing. And in the end, when you want to get to like, to apply for jobs where the hiring bar is higher, this is what they will be looking for. To have people that have a deep understanding of what they're doing, because this is what allows you to understand which trade-offs you're making, when it's okay to go fast, when you should be more cautious and build better foundations. So that's a super interesting shift. And yeah, it's funny to see that people might have gotten into CS because of Minecraft, because I can imagine that, yeah, games where you can build something like that, very creative. Honestly, I see Minecraft as like the video game version of Legos. So I guess I'm a bit too old that I knew like physical Legos maybe a bit too much to enjoy Minecraft as well. Just the same way that because I saw Star Wars before Lord of the Rings, I think I don't relate to Lord of the Rings as much as people who saw it as like the big fantasy saga in theater. But yeah, I can imagine how it could get people into wanting to understand how something is built and want to go further. All right. Thank you for watching. As always, a big thank you to the people in the chat for the great questions, the great remarks. This is what makes it so enjoyable for me to do these live streams. But also we had many questions that I'm sure the people watching the replay also had coming through their heads. And so by asking them, they've been able to get an answer that's really great. So thank you for that. I really like this format of doing a live stream where I react slash comment to some existing resources and try to provide context and things like that. So if you know other resources that you think it could make sense for me to comment during the live stream, please let me know in the chat, let me know in the comments. I would love to know them so I can do more live streams like this one. And I think after one hour and 33 minutes, it's finally time for me to stop speaking and just say thank you for watching. Have a good rest of your day, evening, or maybe a good start of your day, depending on where you are in the world. And see you next time. Bye-bye. Transcribed by https://otter.ai you