In this video, we'll talk about how different and with standalone applications we'll explore communications between We'll cover all the default Docker host, overlay, and others, and discuss provide some hands-on demos that We frequently use Windows and Mac for local containers on a laptop. While some network may still work, they do have on the Mac, Docker is created inside a can access a container using its IP on Mac. You would need to forward ports to the Now, some networking features of Docker but most of them are used for running external clients on, let's say, a remote in mind that there are two different You may be wondering why not use Kubernetes perhaps you only have one or a few applications in Kubernetes can lead to significant overhead. run many different services, such as kubelet, need to spend a lot of time maintaining The typical example is that you may have clients such as web browsers or maybe mobile application, and for the data tier, You can run your app and the database which is a perfectly valid use case. Don't If you want to get the most out of Let's start with the default bridge network, But first, let's take a look at what a bridge a nutshell, a bridge is a physical or virtual Let's say you have a large number of devices building. Maybe you have 30 devices, when two or more devices on the same network this will lead to a collision, and some packets connected to the same network, the more collisions the network since if the packets are dropped, we say that all those devices on that network In the early days, to solve this problem, divide the local network into multiple smaller network with 30 devices into two networks with 15 collision domain. Fewer devices on the network Now, when it comes to Docker, the two your local host (it can be your you run your containers) and the For example, when you install it will create a default bridge network containers that you create on that host Also, containers that are created in that default bridge network will be able to Now, the default bridge and even Docker itself does not recommend The recommended approach would be to The biggest difference you'll notice you can use DNS to send requests to to communications inside the bridge network to use the container DNS from the host. The start it will become its DNS name. This is Alright, let me run a quick demo for you. First of all, let's list all the default host, and none. Now, we can use the 'inspect' a specific network. For example, the default and the gateway is '.1.' Additionally, you can see Let's go ahead and run the first container. By the in the README file. You'll find a link in the Now, to run a container, we need to specify ARM architectures, and it's public, so you can Use '-d' to run it in the background. On a localhost in order to access the application. you can directly access the container by its For Mac, I'll map port 8081 on the container, where I run a Python application. To get all the running containers, you can run you can add '-a' to get all containers, Well, to get more information about the container, you can see that the container got its IP which is 172.17.0.2. On Linux, you On a Mac, I have to use localhost. Let's application will return the hostname Alright, now let's run the second except we'll give it a different name and Alright, so far we have two containers: 'myapp' and 'myapp-v2.' We can Now, let's verify that both containers can of the containers using the 'exec' command, and containers are based on Alpine Linux, we don't Let's use 'curl' to access both containers we can access the same container and also However, ideally, we would want to use DNS to that with 'curl.' Well, that's the limitation of Before we continue, let me remove both containers. Now, let's go ahead and create a name it 'my-bridge-net,' and, though it's totally List all the networks, and you'll find and inspect it. As you would expect, you'll it's a virtual network only accessible really matter. I would even suggest Now, in order to create a we just need to specify the network. It's Let's also create the second Well, now we can access both containers using come from the CIDR we specified earlier. So, Again, let's SSH into the first container. And now we can actually use DNS. The the container you created. This is the you would want to create a custom bridge Alright, let me clean this up by deleting Now, most of the time when I need to create which is a declarative way to define which exactly the same thing as what we ran 'myapp-v2' containers. By the way, those the network. We also declare exactly the same So, this is exactly the same setup, Now, in order to run it, just execute '-f' to specify the compose file, and can test it with 'curl' in the same just run 'docker-compose down'. It will shut The next networking mode available is your container will not get its own IP address and host where you run your container. Essentially, and it would appear as if you were running a any application running on a different server the host's IP address. This networking driver used in production to expose your services to When you use the host network, obviously to the same port. For example, you won't Now, when using the host network, it does and no 'userland-proxy' is created for each the two main reasons why you would choose and if the container is using a lot of Now, to run the demo, we need to use a Linux box. machines here, both with Docker installed. on the virtual machine, using the host network it will bind to port 8080, which is used Next, let's get the IP address of that VM. And now, from the second virtual machine, it works. If you're following along, don't forget demo. My point was to show you that the container applications, it will appear like any regular The next type is 'None'. This completely isolates running on that server. When you use this option, the container. You won't be able to publish for example, to run batch jobs or some For the demo, I'll use Linux as well. On Docker may create additional network Let's go ahead and run the container, let's get all the network interfaces only the loopback interface is present. isolated from the host and any other That's all for this demo. Traditionally, to expose a container It works just fine but adds additional since the packet needs to go through ports from the container to the host in Now, IPvlan is a new network virtualization it does not use a bridge for isolation network interface. As a result, it is easy to as there is no need for port When you start a container using this type, the container will receive an IP address if my host has an IP address of 192.168.50.55 and from 50.0 and the last IP address for this range the container may receive the 50.2 IP will be able to access your application or another container on a different host. And the For this demo, I'll use two Linux VMs. On network interface, and from the other one, First of all, let's find the parent network note of it; my interface is 'ens33.' We also this in the next step. So, the IP address is Alright, the next step is to create a network. values. The gateway IP address is the don't forget to update the Now, let's make sure the network is created. Let's start the container on the first and note that you don't need to map any ports. Next, let's find the IP address And from the second host, which in my case to test the application. Alright, it works. I'll create a detailed tutorial covering Some applications, especially legacy applications expect to be directly connected to the the macvlan network driver to assign a MAC address will appear as a physical network interface The difference for example between ipvlan your container will get the same Mac address as your host but in case with macvlan, Similar to the previous demo, we need want to use for macvlan. It's going to be the Now, let's create the network. It's very that the host uses, the gateway, and the you choose to use the macvlan Docker take note of the Mac address assigned to List all networks. Next, let's run a container in that network. Let's inspect that container. You'll find that this container your VM. In the case of IPVlan, We can SSH into the container and get all the you can compare the parent Mac created for the container. Now, when you deploy your of course, you will need more than each with the Docker daemon installed. The overlay multiple Docker daemon hosts. This network sits allowing containers connected to it to communicate Most frequently, this type of network is possible to connect individual containers to manage your containers at scale, especially in Most people use overlay with I want to show you how to connect individual for this demo, I also have two Before we can run the demo, I found that the overlay network, and we need to Let's find the network interfaces on both Now we need to disable this on that solution is not persistent across restarts, and automatically run it on boot. There are Even if we want to connect individual containers the Docker Swarm. It's actually very easy. On Then it will give you a command VMs to join the Docker Swarm. Keep in mind So far, we have a manager and worker node. On the manager, let's create an overlay for individual containers to be able to services will be able to use it. Now, on the manager node, let's start the If you list networks on the second worker node, you'll notice that the overlay network is start the container that uses that network. worker node. Now you can see that To verify that we can access containers on we can SSH to the second container and use curl to send a request to the first I have a lot of tutorials like this databases, and other infrastructure consider subscribing to my channel. Thank you