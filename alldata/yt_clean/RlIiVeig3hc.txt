Hey everyone, this is Kevin from Data School. Today you're going to learn my top 25 pandas These are the best tricks I've learned from These tricks will help you to work faster, write better Here's everything you're going to learn. There's also a bonus at the end of this video Before we start, I'm going to import pandas I'm also going to read in some datasets that I'll be moving quickly, but you can download below if you want to follow along. Let's get going! Trick number 1. Show installed versions. Sometimes you need to know the pandas version pandas documentation. You can show the pandas version by typing underscore. But if you also need to know the versions function. You can see the versions of Python, pandas, Thanks to Harvey Summers for this trick. Trick number 2. Create an example DataFrame. Let's say that you want to demonstrate some You need an example DataFrame to work with. There are many ways to do this, but my favorite constructor, in which the dictionary keys are lists of column values. Now if you need a much larger DataFrame, the In that case, you can use NumPy's random.rand and pass that to the DataFrame constructor. That's pretty good, but if you also want non-numeric to a list and then pass that list to the columns As you might guess, your string will need are columns. Trick number 3. Rename columns. Let's take a look at the example DataFrame I prefer to use dot notation to select pandas names have spaces. Let's fix this. The most flexible method for renaming columns You pass it a dictionary in which the keys names, and you also specify the axis. The best thing about this method is that you whether it be just one column or all columns. Now if you're going to rename all of the columns the columns attribute of the DataFrame. Now if the only thing you're doing is replacing is to use the str.replace method, since you All three of these methods have the same result, don't have any spaces. Finally, if you just need to add a prefix can use the add_prefix method or the add_suffix Trick number 4. Reverse row order. Let's take a look at the drinks DataFrame. This is a dataset of average alcohol consumption What if you wanted to reverse the order of The most straightforward method is to use one, which is the same slicing notation used What if you also wanted to reset the index You would use the reset_index method and tell As you can see, the rows are in reverse order integer index. Trick number 5. Reverse column order. Similar to the previous trick, you can also of your columns. The colon before the comma means &quot;select all the comma means &quot;reverse the columns&quot;, which Trick number 6. Select columns by data type. Here are the data types of the drinks DataFrame. Let's say you need to select only the numeric You can use the select_dtypes method. This includes both int and float columns. You could also use this method to select just You can tell it to include multiple data types You can also tell it to exclude certain data Thanks to Vikram Lucky for this trick. Trick number 7. Convert strings to numbers. Let's create another example DataFrame. These numbers are actually stored as strings, In order to do mathematical operations on types to numeric. You can use the astype method on the first However, this would have resulted in an error because that column contains a dash to represent handle it. Instead, you can use the to_numeric function any invalid input into NaN values. If you know that the NaN values actually represent the fillna method. Finally, you can apply this function to the apply method. This one line of code accomplishes our goal, converted to float. Thanks to Chris Moffitt for this trick. Trick number 8. Reduce DataFrame size. pandas DataFrames are designed to fit into the DataFrame size in order to work with it Here's the size of the drinks DataFrame. You can see that it currently uses 30.4 KB. If you're having performance problems with into memory, there are two easy steps you reduce the DataFrame size. The first step is to only read in the columns the &quot;usecols&quot; parameter. By only reading in these two columns, we've The second step is to convert any object columns data type, which we specify with the dtype By reading in the continent column as the the DataFrame size to 2.3 KB. Keep in mind that the category data type will number of categories relative to the number Trick number 9. Build a DataFrame from multiple files row-wise. Let's say that your dataset is spread across into a single DataFrame. For example, I have a small dataset of stock a single day. Here's the first day. Here's the second day. And here's the third day. You could read each CSV file into its own delete the original DataFrames, but that would code. A better solution is to use the built-in glob You can pass a pattern to glob, including list of all files that match that pattern. In this case, glob is looking in the &quot;data&quot; with the word &quot;stocks&quot;. glob returns filenames in an arbitrary order, built-in sorted function. We can then use a generator expression to pass the results to the concat function, which Unfortunately, there are now duplicate values To avoid that, we can tell the concat function integer index. Thanks to Dinesh Nair and Davis Vickers for Trick number 10. Build a DataFrame from multiple files column-wise. The previous trick is useful when each file But what if each file instead contains columns Here's an example in which the drinks dataset file contains three columns. Similar to the previous trick, we'll start And this time, we'll tell the concat function Now our DataFrame has all six columns. Trick number 11. Create a DataFrame from the clipboard. Let's say that you have some data stored in you want to get it into a DataFrame as quickly Just select the data and copy it to the clipboard. Then, you can use the read_clipboard function Just like the read_csv function, read_clipboard for each column. Let's copy one other dataset to the clipboard. Amazingly, pandas has even identified the Keep in mind that if you want your work to is not the recommended approach. Thanks to Priyaranjan Mohanty for this trick. Trick number 12. Split a DataFrame into two random subsets. Let's say that you want to split a DataFrame the rows to one DataFrame and the other 25% For example, we have a DataFrame of movie We can use the sample method to randomly select DataFrame. Then we can use the drop method to drop all remaining rows to &quot;movies_2&quot;. You can see that the total number of rows And you can see from the index that every Keep in mind that this approach will not work Trick number 13. Filter a DataFrame by multiple categories. Let's take a look at the movies DataFrame. One of the columns is genre. If we wanted to filter the DataFrame to only or Western, we could use multiple conditions However, you can actually rewrite this code passing it a list of genres. And if you want to reverse this filter, so those three genres, you can put a tilde in This works because tilde is the &quot;not&quot; operator Trick number 14. Filter a DataFrame by largest categories. Let's say that you needed to filter the movies largest genres. We'll start by taking the value_counts of The Series method nlargest makes it easy to And all we actually need from this Series Finally, we can pass the index object to isin, Thus, only Drama and Comedy and Action movies Trick number 15. Handle missing values. Let's look at a dataset of UFO sightings. You'll notice that some of the values are To find out how many values are missing in then take the sum. isna generated a DataFrame of True and False values to 1 and added them up. Similarly, you can find out the percentage of isna. If you want to drop the columns that have method. Or if you want to drop columns in which more set a threshold for dropna. len of ufo returns the total number of rows, to only keep columns in which at least 90% Thanks to Ratan Rohith and Joanes Madinabeitia Trick number 16. Split a string into multiple columns. Let's create another example DataFrame. What if we wanted to split the &quot;name&quot; column and last name? We would use the str.split method and tell the results into a DataFrame. These three columns can actually be saved statement. What if we wanted to split a string, but only For example, let's split the location column If we only cared about saving the city name and save it to the DataFrame. Thanks to Daniel Kim and Emmanuel Ameisen Trick number 17. Expand a Series of lists into a DataFrame. Let's create another example DataFrame. There are two columns, and the second column If we wanted to expand the second column into on that column and pass it the Series constructor. And by using the concat function, you can DataFrame. Trick number 18. Aggregate by multiple functions. Let's look at a DataFrame of orders from the Each order has an order_id and consists of To figure out the total price of an order, For example, here's the total price of order If you wanted to calculate the total price and then take the sum of item_price for each However, you're not actually limited to aggregating To aggregate by multiple functions, you use such as sum and count. That gives us the total price of each order Trick number 19. Combine the output of an aggregation with Let's take another look at the orders DataFrame. What if we wanted to create a new column listing Recall that we calculated the total price sum is an aggregation function, which means data. In other words, the output of the sum function The solution is to use the transform method, output data that is the same shape as the We'll store the results in a new DataFrame As you can see, the total price of each order That makes it easy to calculate the percentage Thanks to Chris Moffitt for this trick. Trick number 20. Select a slice of rows and columns. Let's take a look at another dataset. This is the famous Titanic dataset, which Titanic and whether or not they survived. If you wanted a numerical summary of the dataset, However, the resulting DataFrame might be If you wanted to filter it to only show the accessor and pass it a slice of the &quot;min&quot; And if you're not interested in all of the labels. Thanks to Alexandru Mircea for this trick. Trick number 21. Reshape a MultiIndexed Series. The Titanic dataset has a &quot;Survived&quot; column the overall survival rate by taking a mean If you wanted to calculate the survival rate use a groupby. And if you wanted to calculate the survival you would groupby both of those categories. This shows the survival rate for every combination It's stored as a MultiIndexed Series, meaning of the actual data. It can be hard to read and interact with data to reshape a MultiIndexed Series into a DataFrame This DataFrame contains the same exact data you can interact with it using familiar DataFrame Trick number 22. Create a pivot table. If you often create DataFrames like the one use the pivot_table method instead. With a pivot table, you directly specify the function. An added benefit of a pivot table is that setting margins=True. This shows the overall survival rate as well Class. Finally, you can create a cross-tabulation from &quot;mean&quot; to &quot;count&quot;. This shows the number of records that appear Trick number 23. Convert continuous data into categorical data. Let's take a look at the Age column from the It's currently continuous data, but what if data? One solution would be to label the age ranges, The best way to do this is by using the cut This assigned each value to a bin with a label. Ages 0 to 18 were assigned the label &quot;child&quot;, adult&quot;, and ages 25 to 99 were assigned the Notice that the data type is now &quot;category&quot;, Thanks to Rafi Islam for this trick. Trick number 24. Change display options. Let's take another look at the Titanic dataset. Notice that the Age column has 1 decimal place What if you wanted to standardize the display You can use the set_option function. The first argument is the name of the option, string. You can see that Age and Fare are now using Note that this did not change the underlying You can also reset any option back to its There are many more options you can specify Thanks to Jeff Hale for this trick. Trick number 25. Style a DataFrame. The previous trick is useful if you want to However, a more flexible and powerful approach Let's return to the stocks DataFrame. We can create a dictionary of format strings And then we can pass it to the DataFrame's Notice that the Date is now in month-day-year and the Volume has commas. We can apply more styling by chaining additional We've now hidden the index, highlighted the the maximum Close value in green. Here's another example of DataFrame styling. The Volume column now has a background gradient And here's one final example. There's now a bar chart within the Volume Note that there are many more options for Thanks to Chris Moffitt for this trick. Now for a bonus trick. Profile a DataFrame. Let's say that you've got a new dataset, and much work. There's a separate package called pandas-profiling First you have to install it using conda or Once that's done, you import pandas_profiling. Then, simply run the ProfileReport function It returns an interactive HTML report. The first section is an overview of the dataset The next section gives a summary of each column. You can click &quot;toggle details&quot; for even more The third section shows a heatmap of the correlation And the fourth section shows the head of the Thanks to Siddhartha, Hamza Belhadj, and Subham Alright, it's your turn. Let me know in the comments section below to start using! And if you have a favorite pandas trick that comments. Thank you so much for watching and I'll see