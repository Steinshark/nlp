In this course, you will learn application using MongoDB for Boot for the back end and react Chaudry teaches the back Gavin Lon teaches the front end these instructors are very many popular courses. The is a great example of the concerns between the client code implementing a loosely coupled implemented using different parallel and independently from learning from Farhan. Hello, with MongoDB course on the freeCodeCamp YouTube channel. I am for Han has ensured three course and I will teach you all using Java EE Spring Boot, and course will be taught by lOn. I'm a full stack developer experience working as a software going to be playing the role of responsibility will be to using React js. The Spy create will use HTTP GET retrieve data from a remote with the relevant API's requests will also be made to appropriately save data on the will be stored within a MongoDB server. So without further ado, on our API. In the beginning of download two new software's from being Java Development Kit, or installed on your system, you But just in case you do not have navigate to The link will be in description. download page for Java, you may available as of the recording of version is Java 19. And the lts C stands for long term updates until September 2020 For JDK 19 On the other hand, will 2023 and will be superseded by are deploying a Java application suggested that you use LTS And for this course I will stick latest LTS. Now depending on course, there may be a new LTS and install that. So I've am on Windows, I will go to installer. As you can see, it's depending on your internet few minutes to download. Once you have downloaded the installed it on your system like before. And since the straightforward, I will not the entire process. After you have finished open up your terminal window and barsha. And if you don't get any errors positive sign and as it says indicates that I have point 17 point 0.5 version of for Java compiler which you may Apart from this command, you can version to check the version of and as you can see it says 17 good to go. Since you have successfully computer Next up you will need a comes to Java, there are plenty into Eclipse or maybe configure suggest that you go with Jet Ian's are known for making comes to Java IntelliJ IDEA is standard. Although the ultimate version is also a free version available Edition. Or to download IntelliJ jetbrains.com/ideas/download. description and look for the flag download button here. And Windows, Mac OS or Linux, you example, if you're on Mac OS, you're on Linux, you will get a I want to download the exe So I'll select exe, and then hit larger than the JDK in size at depending on your internet minutes to download. Once you please go ahead and install it have done before. Congratulations on you're IDEA getting installed. Next up, MongoDB Atlas. Now you may or MongoDB Atlas is a platform from you to spin up MongoDB servers So in order to use MongoDB get to Again, the link will be in button. Once in the sign in page, you GitHub account to log in or you email addresses for a new account on MongoDB Atlas. So I to log into my account off successfully logged into my users, you may have to set up a just put any name as the be good to go. Since we are development purposes, it's okay have. So once you have set up create new projects. So I will And I have to give my project a an API that is related to movie hit Next I will just go ahead and create other member to add. Extra now we are inside our ready to create a new database. Database button here to create a Atlas. So just go ahead and And there are three different there is dedicated and there is purposes, our shared server completely free. But if you're that has some user and have some dedicated Serverless is talk about it in a different Share, and hit create. Okay, next up, they will ask you use, I always go with AWS. Since which is near Bangladesh and has you like you can go with Google whatever region is the nearest getting the lowest amount of choose a dear. Again, for free usage, we use will give us 512 megabytes of for our usage we will have a honest. And then next step there don't have to touch them and the customize the cluster name if Wish but I will just leave it as that way, then hit Create Okay, next up, you will have to cluster. You can also use an SSH with the old trusty username usernames Solid Snake since I'm can name it anything you want. make sure you are always and not ones that are easy to maybe but always use hard to use the auto generated secure And I will also make sure that I clipboard, since I will be hit the Create User button. It shows Solid Snake and the And finally, you will have to the way it works, once you have have to allow a set number of IP server. You know opening up a not a good idea. Security wise, current IP address here. But since this is just a course, for development, I will open up addresses out there. And to do slash zero and in the a view and hit Add Entry. See that finish and close. Okay, they will congratulate you Yes, go to database disclose it. Excellent. Now we have a MongoDB Atlas. And we can use read and write data from and to And using just like a local in your computers, you see beautiful service. I have used for production in the past and I experiences with it. So next up, you can use some connect to this database, maybe so you can go ahead and click on And MongoDB will give you choose from. So first, you can using MongoDB shell, you can using your application that can connect to MongoDB server MongoDB own graphical user databases and I will just show connect using VS code. And let's for now. And I do not have MongoDB will be Windows 64 bit and I will just hit download Once you have downloaded and your computer, you can start the desktop. Once you start MongoDB this where they are giving you database by using this kind of URI. If you come back to MongoDB are actually giving that URI Just use this copy button to to MongoDB compass. Now remove paste it yours. Now as you can Benue username, followed by a a password right. So what we are password that we created earlier we'll leave everything as is and He can say Save and connect. You naming it V Avi, you can change its color if you connect. Okay, so it took a few seconds. successfully connected to our can see, there are two admin. And the other one is have to do anything with these, the clusters out there. So just new databases very soon. To always go and click this plus And inside database name, let's put b What really, let's call it API deep. And inside collection them. Now like MongoDB, or document based know that collections are like database systems. So in database system, you have databases, you have tables. Now, non relational databases, you and then collections. For have a collection of movies about different movies. So we database. So as you can see, we movie API dv, and there is a right now, there is no data at Now in order to work with our we have a bunch of data in our to github.com/ach, si n ch y, movies, you will get the entire written. And inside that folder that says underscore there is a JSON file that you the collection we have just go into this JSON file, then and then hit CTRL S and say this computer. So once you have downloaded the your collection. To do so, come while you have the movies click on this Import Data button select Import File. And our the file from our downloads and also take a stop on errors, then It done. And viola, we have the movies on our database. So as each of this movie is a document then. So inside the collection, document. And what do we have have an ID we have the IMDB ID have the release date, which is trailer on YouTube. Then we have particular movie belongs to five our poster. We have linked to end backdrops the front end application as you empty array for review IDs. Now, on in this course, so just be Okay, so one thing that I'd like the tmdb.org API for this images are TMDb is an excellent to use API for developers as credit. So I do, so I will be images. So now that we have MongoDB. Plus, we have set up a some data into it, it's time for code. Now the first step to writing initialize it first. To do that, Again, links will be in the initializing our project. First, language, which is going to Java familiar with groovy or Kotlin, will have to pick a project And the initializer supports not the most popular build doing with Maven, simply because with this then Gradle. Next up, version 3.0. Point one is the will be using that throughout like to try out some more use the snapshots once you have framework. After that, we will have to fill Now the group is usually written example, my website is Farhan name my group date dot for her. of yourself, you can name it that package group is not project nextra that artifact name, the of the project. So in this case, here, but feel free to call in that. Next there is a description like after that, we will have to pick very popular packaging format archive wire. On the other hand, you may think that will wire is since it's going to be a web but since jar is more widely with. Next speaking the Java version, since we just spent quite some computers. Once you are done focus on the right column. In the dependencies that you would use this add button, and you very long list of dependencies. going to use in our project is library that saves you from code. And you will see what I please be patient. Since we are dependencies, you will have to Windows or Linux and command on right on the right corner press for multiple ads, so I'm will pick Lombok Lombok has been picked. Next up And finally, let's see. No nada SQL under no SQL, we Yeah, that's that's pretty much things here, for example, dev well. Once done, you can exit Escape on your keyboard and have dependencies and make sure you Everything. Now there are other about later on, such as the or Graph QL, or rest maybe spring security, which can authorization. There is more to things like that. But since we authentication and authorization from the get go. Once you are happy with initializer to go ahead and It will take a few seconds to will start downloading you have to extract these movies named your artifact dot c file easily accessible. After you have extracted the your computer, you can go ahead or code editor. In my case, it's extracted my project on my D So I will go ahead and click on Then come to the folder where I will pick it up. Okay, so IntelliJ IDEA will ask project or not. This is a safety malicious code from running on writing it ourself, I just pick And give ideas some time for And once it's ready, you are Let's try to understand the ignore the dot env and folder, don't have to worry about it folder, which is short for program source code as well as going to write any tests. So So inside main there is Java and inside both of these Java. And as you can see, here 400 movies, it it may be depends on what you have chosen should be something similar. Then there is a class that names. So since I have named my application, which is pretty In other movies application of code minus spaces in between. it's doing. The first line is which is pretty self input statements. The first one application. Now this particular Run. And to start your Spring to call this run method, and to it. And then you can also which we are not going to touch the second import a statement application annotation. So used to let the compiler know So other than this class, there this package. So let's try to we can we can have anything on So you can actually click on main method to run the program this play button at the top. Okay, so if your IDE says Lombok processing, just go ahead and processing and it should be Now, if you look at the there is a nice arc that says and there's bunch of logs and There is an exception. That application is failing to at all. Which is true, since we know about our, our cluster, our things like that application database. Now, it's fine if you Or if you want to get rid of you can just first stop that Open the POM dot XML file, which different dependencies that we And then look for MongoDB. It should be here somewhere artifact the Spring Boot starter the entire thing. And press ctrl comment this out. Then right click on form dot XML and then go to Maven and go to reload project now try to run the application No your whatsoever. So if you look at the logs, it port 8080 Tomcat is actually an the web server the development Now, you'd have to switch to a application in action. So let's And then you can navigate to 88080. There you go. Now it says fine. At least we know that the are actually hitting the API page when what is zero states is all. So although we have an API, that makes sense. Now let's go write our first endpoint. But after where it says the we will say Rest Controller. It's another annotation that the framework note that this controller and not just another you will have to say get mapping. And next we'll have to create a the return type will be string. be anything but let's just call this is the route endpoint or or list, let's And we can say return. Have no or I know have our programs are know. So this gate mapping and is that it lets the framework here, API route, is a good right here, and then inside, slash. Let's stop our Let's see if there are any looks fine to me. Let's switch and do a refresh. As you can just increase the zoom level a tell alright. Now instead of putting a forward slash route, rerun the application you will see that the whitelabel navigate to slash route, you Hello world. I hope this makes eight point, we are not going to actually divide our application be a service layer, there will there will be an API layer. So this code and restart to put Now, in my opinion, the first configure the database for our successfully connect to the up previously, and talk to it. To do so, open up the src folder go inside resources, and open dot properties. Now, in this file, you will have application properties that is example, right now, we are dependency. And to do that, you will have to spring dot data dot Mongo DB dot equals to the name of the that we named our database we will write movies API dB, and next spring dot data dot Mongo DB dot URI. actually write that URI to your with Compass. I have my URL already copied to you have saved it somewhere beginning of the course that I right there. And you can get rid of this slash, and it should be fine. our application should be able to test it out. Let's go back to comments. And then let's start our Oh, see, we have forgot to is actually suggested me to load just click this button or you go to Melbourne and reload and see if it works fine or not. Of course it does. Let's run the And now the Euro is called. And about the MongoDB driver sign. If it failed to connect to have screamed at us and whatnot. Now, if you have worked with any applications in the past, you've sensitive data like this in a GitHub repository is not safe at Instead, what you should be things in a dot env file. So we to new and create a dot env file And we can write down a few Mongo database, then Mongo user, then Mongo password, finally, Mongo cluster. Now you can go back to the start moving these values one by going to be the Mongo database. Next up the Mongo user name Solid Snake in my case, good Finally, the cluster. And I sometimes like to put them that if one of the passwords or some special characters in them, disturb the order of things. So marks around each fabs. Okay, to go, what I would suggest that simply called dot env, dot for later reference references then make sure you open up the can see, the Initialize project good Git ignore file already. things for ourselves, right. So copy this thing from here and in the white. Yeah. And then you say.in With not accidentally commit that dot and open up your database to the Now, the only problem with this support reading dot env files So what we'll need is we a new dependencies to our take this opportunity to show dependencies to the project my browser. I'll open up a new Maven dependencies, something like repository. Then let's search for something Ian's. Yeah, I am referring to this one have pronounced his name wrong. Let's select this one. And we plugins 1.0. And it says Central of the thing is made up Paul can guess this is his group, of the artifact or the or the back to our code. Let's open up dependencies bar, make sure you outside somewhere here. After create a new one. So it is a dependency. And the ID helps us by auto that the group ID is mi dot Paul is he h, w A are set just to from here. No one's going to judge you for artifact which is spring dot E now it's not strictly necessary you can do so by saying version and then put maybe the by one. Yeah. So that's it, let's reload And yet now our project has the env artifact and three dot env application properties and with our dot env references. To we need the env so Mongo database Mongo user So you will first have to get with $1 sign and curly braces. And inside the see say e NV dot Mongo. What do they call it? Database? Yeah, Mongo database, and you then replace Solid Snake by Mongo And then they should be Mongo But sore tricked. Yes. And finally a cluster. Cluster Yes. Does this mean? And if you want Singapore, you problem step and have a look at complaining about. So the ignore them from now. Which ones per year? Yeah. Okay, the typos. Okay, Mongo is not a Except let's try running our if our env file has taken any So as it turns out, our MongoDB the end file has been read successfully secured our going out into the world. Now everything inside an env file, dot name of the variable environment variable variable in will not get into that anymore ahead and get along with our Now in our application, there are going to work with. First there are the reviews. So we separate classes for in our application. So first, left click on your project name movie. And inside this movie, we will class as a document. This will let the framework note each document in the movies And we will also define the name Then inside here we will have a private object ID ID this will represent IMDb ID sorry, string IMDb ID which will represent the preferred string, title, private string release date for private string Schadler link this will be a trailer private is string poster a link private list string this will be multiple genres of a single need to be imported at Java util by any private list string and this will be the backdrops now actually be used in the front later. Let's just quickly jump that we have indeed written all this class. So as you can Let's see we have written high D trailer link genres poster, you, we will add review IDs, a Now, we will have to also as an actual ID, this will lead the framework know that this property should be treated each movie inside the database. also need getters setters that constructors. So instead of string for each of these private at the read data, and this is comes from the Lombok project. different gators setters and two add all args constructor, this creating a constructor that argument finally, no args constructor that takes no parameters whatsoever. Okay, next, let's create the reveal, it's the same deal. So this will be document and the collection name will be created this collection yet. But ability to create new worry about that. We'll add data All args constructor, Nords. there will be two private object ID. ID, this will be the ID in this And then private review body just just body string body. Okay, so as you may have already that each of these movies has an haven't yet added this this area yet. So to do that, we will go go near the end and say private least review. Review IDs. Okay, so it matches hall that our names are matching it like this, this will be an the reviews that are related, list of reviews. Now this is are modeling a one to many can have many reviews, this is trying to demonstrate some of MongoDB data, I will show you a I will say document reference. So this will cause the database review. And the views will be in is called manual reference relationship. create relationships in MongoDB. them up on Google or MongoDB read about them on your leisure. context. So now that we have our go, we can go ahead and start right click on my packet then a Java class. controller. And this is our first official API controller that we are we wrote a simple controller in but this time, it's going to be will need to annotate this class And instead of mapping it to it sorry. Mapping request mapping, I want slash v1 slash movies. So any slash movies endpoint will be controller. Next, I will create get mapping. And then public. Let's return string for now. All movies, and then we can return all movies. OK, let's try to run our program Let's hit the play button. Okay, it's compiled fine. Let's localhost 8080 slash route. We will get rid of fruit and say movies. And it works. Now although it's from this endpoint, it's better entity I'll show you why in a pipe. So we'll say string. And then instead of returning or returning all of this like this, new response entity of type is Then HTTP status dot O. HTTP status dot okay means 200. Let's read on this program. Refresh, and it works just as any difference there. But if you and say, curl, I HTTP localhost movies, you will see we are response code. This comes in handy when working any REST API out there should Since we have the movie model let's try to use it and pull For that, we will need a service class. So let's create the the shorter one. So it's a Java interface because repositories we'll say movie in repository. Yeah, now this interface will Mongo repository. This is the to let it know what type of data and we'll also need to let it dealing with, which will be ID, there you go. That's all for unnoted this interface as a knows that this is a repository. And then let's create a service service. And this class will not extend annotate as service. Now, inside this class, we will methods. So the first one will Get on movies. Let's just name it all movies. controller method name to get on mapping, we're saying get all And the return type will be list of what will return a list of Now, inside the service class, repository to do that you will movie repository it will be a private field. And its name will be movie Now if you know Java, you may initialize this bit of code, you it using a constructor, or you audition what this will cause it we want the framework to us, okay. Let's go inside the method now. move the repository dot find all these find all method is repository class. As you can and it will return and least of passed right here certainly service class right there. And controller, we will need a So we will say private movie service movie surface. And class, we will auto wired the service and audition right here, Excellent. And it's also now inside the good old movies. entity of type string change it to list so we are returning a response Then inside the method, we will movie service.of movies new response entity of type list movie and inside movie service drug dot okay. Yeah, let's take a look at our set up. Services fine, the controller is and see if this works or not. Going to go back to our browser And the reason behind this as you can see, we have called our database But in our configuration, we So we'll get rid of the s. Res restart the application and And yeah, it works. As you can list. Since it starts at zero movies in this list and the code back to the code and let me re far. So in rest API's, usually one of the layers is the API and it will only concern itself have about the task of getting a returning a response and nothing doing. All it's doing is it's delegating the task of fetching database. And give me giving it calls the all movies method the service, gets the list of HTTP status. Okay, it doesn't service class. Now, when we come is where most of our business For now, there is nothing to be But soon, we will work with a logic in this API. So the the repository class, and talks the movies and returns to the repository layer is kind of the does the job of actually talking data back. I hope that makes sense. Now, movies in our databases, let's trying to access a single movie. new get mapping. And that is get mapping and this will And we will have this a slash braces will say ID. So we are ID. So we can set public response entity. This time, we And we'll say get single movie. Sorry for the type book. We'll close the pair of parentheses and we'll start our method. Now inside the pair of PATH variable, which lets the passing the information we got variable. Or we will be using PATH variable as a string, or just object. Id ID. So what this does is it lets the are getting through this path that to an object ID called ID. And then we can say return first we'll have to go write a new method here. Public movie single movie and we will say return movie repository dot find by ID and we will get that ID right And it goes here it David and the squiggly line it So the thing here is that the any movie at all, maybe the ID So in those cases, you it will have to let Java know that it optional movie and we will just import the we will also have to fix our optional. Movie optional has been imported nice We can say return new response optional movie. And inside there we can dot single movie, we will pass comma HTTP status dot. Okay. Let's restart the application let's go to our MongoDB compass copy one of the object IDs right for Roald Dahl's Matilda the Id go back to our browser. And we can say movies, slash and As you can see, we have found musical. Now, the problem is object IDs of my collection what I want to do is use this movies. So let's see if we can find a Now although the repository searching with ID, it doesn't with IMDb ID so what we'll have that method ourselves. And it's something called automatic farm where it is dynamically property names so we will say Movie because it may return null optional movie and we will call it find movie by in dB ID and it takes a string I am DB ID. Now just by naming this method MongoDB data Spring Data MongoDB trying to do. It's that much back to our service class. We are no longer getting an string IMDb ID and instead of find by ID we find a movie by IMDb ID, IMDb ID and that's it. Let's go back to controller. We'll change this from ID to have to name the ID IMDb ID It's just that I know what I'm will replace object ID by string IMDb ID and then response entity Yeah IMDB. So technically, this should do let's see seems like there has Let's go up it looks like there is a our movie repository. And the music It is it should be IMDb and not framework is clever enough to the property name right here. So let's run the program once not fine tuned by cannot find up here, I have to correct DIA. And yeah, it shouldn't be let's go back to our browser. slash movies. And then I have Hit enter, and it works just search for movies. Now, you can actually form any property name in your model As long as they're unique, you will get multiple movies with the same ID or same Now that we have our movie start working on our review the user send us review. And we name. So let's first create a new View posit Ori and it spends Mongo D. B, Mongo repository and the die And object ID is our type. Yeah, yeah, that's their next let's create a new service enter this as repository. So, create a new class called the views service. And this will be a service here I will say public then this method will create a new review then here she view by creative then this method will take two be a string which will be the reveal body the second one will be string do here we will first look for ID. And then we will create a review with the found movie. So Review few quotes from new review. Now you may now you may remember that in the arcs constructor and an aurochs auto generated, we cannot pass will do we will also generate a only the body. Now in IntelliJ a class go to generate and then body part of this class. So now let's go back to our service pass the review body Excellent. Now that we have a new review, to one of the movies now that we have a new review it to the database and for After that, we will need a reference to our review repository. So review repository view Fine. And we will say, review repository dot insert, and review. X. And that's the review taken associate with this with one of we need a few things. Now the first template to create a template Mongo template. Now, you have repositories as one of the ways other way is using a template. repository just doesn't cut it, complex that it cannot be or even if you can implement it not suitable. So what we need, we template, you can use this dynamic query and do the job using the repository. So we will And then down here, we will say Mongo template dot update, since it's an update which class to you do we want to of the movies. And then come to the second line you can see, there are multiple So we want the match. Now inside the matching of criteria. So we'll set criteria dot fire. And inside where we will say up with the column name or the database then.is the IMDB ID that we have Then come to the next line and we'll say Apply. We'll say new update. This is dot push review IDs and then dot value sheet view. See, that's pretty much it. are using the template to movie class. Because I hope that in our collection contains an what we need to do, what we need to do is we need to review ID into this. So we are saying movie dot class matching. So which movie are you movie where the IMDB ID of the the IMDB ID that we have then we want to apply this And then we create a new update making the change inside the and review IDs. So we want to found movie and the value of that review that we have just the review IDs array okay. Now, finally, we will have see First, to make sure that we are are updating that. Now one thing shouldn't have is we cannot new Rather, what we need to do is we insert, because when you call data you just pushed inside your First, finally, we can return that view we just created. So let's review the Create new Mongo template, we are using new review, we just pushed using So likely say sometimes you will logics by yourself. And as you an web developer, you will start all by yourself. So let's go back to our review review is is fine. If you're in service, yeah. Now let's create And inside this controller, we But you may think, why only a going to get all these reviews movie, I'll show you how. Now let's begin by annotating it And then of course, we will have which is slash API slash v1 slash mobile movies Okay, since the review form will be inside a page where you are viewing a requests to the movies and point use NS N bar. Now when it comes it really depends on the on the you may choose to organize your doing here. And in a real life something different but since are just getting started, I Inside the controller, we'll say private reveal Service Review service nice then we'll create a new post and then a new method of Lake entity and this will be of type create review method. Inside this pair of parentheses request body then map string, comma string and we will call it payload so we'll import map. So, what we are saying to the get as the request body we would the key string and value string payload you will see why this is then we will say return new response entity. And yeah we can say review this and then it says Service Review will pass two tests. First one is the review body and the second one will be Don't get IMDb ID Okay. Finally we say comma HTT be status dot created, it will be review, we want to send 201 this means created and that the post mapping done, we need flying to test our test out our that there is this squiggly line So I will just go to problems resolve symbol IMDb ID Okay, here. So it should be inside a that's gone. See, this is the helps you a lot. Now let's use postman to test out our API. In fact, I just thought instead to API slash API slash movies, Because that sounds more application and let's jump to postman. So inside postman first, I'll I'll call the movies API. Then let's create a new GET so it would be localhost 8080 So it works out just fine. Let's these movies so that we can test which will be get a single movie and we should be able to carry request will host slash view and slash Let's execute and the works just Finally, let's try to create a And let's say v1 slash reviews. Okay, that's I set that because inside body I would say raw data So I will say review body will be I really enjoyed I. Yeah. And then I will say IMDb column and timed ID. Now you or the key in this JSON data exactly matches the two keys review body and IMDb ID. So what will receive a JSON data from a map where the keys are extreme from this map, we'll be able to a string and the IMDB ID, which through the service layer, we database, update the movie to be then return the review. And of that works as the intermediary between the service class and let's come back postman, and let's see if it here. So we have got 201 should have created a new review And let's go back to get a come down to review ideas. And review associated with this That's how we can get the list embedded with the data of the So in terms of the API, that's API. But the goal of this this course, was to give you create a new back end API. MongoDB. I hope that you have using MongoDB. And Spring Boot further your study by learning authorization and learn about more complex build a bigger API with Gillette requests. I will be leaving this on Gavin long will teach you how application that can go with maybe see you in another course learned how to develop the back develop the front end using we get started, this will not be goal here is to demonstrate how API from a front end application which we are able to retrieve hosted on a remote server, as MongoDB database. Now, any data will be in JSON format. JSON to some people. But most users much prefer something like this. data passed to us in a JSON pleasing front end display. technologies provide an aesthetically pleasing front developers to facilitate a great give a shout out to the movie images and backdrop images that application that we are going to the movie db.org Right, let's launching VS code. And let's create a working I'm going to name my folder movie client. Let's open our working folder So we are going to use the command to generate our React course, must have Node js, installed on your local machine creating a React application. If you don't have no JS this URL to install the latest within VS code, let's launch the create our React project dash react dash app command. You can launch the terminal pressing Ctrl and the tilde Great. So the current directory should be the working directory working directory is named movie Then at the terminal prompt, dash react dash app followed by React project. So I'm going to gold dash v one Then let's press the enter key. app command generates the React includes all the relevant node that we are able to import into process can take a while to And we can see the process on my So at this stage, we don't folder. Opened within VS code, containing the files for our terminal, let's use the cd of the React application that we dash app. So I'm going to type one, and press the Enter key. So containing the files for our we can launch another instance space dot and then pressing the another instance of VS code, the folder that contains the infrastructure. We can now close down the first only need the instance that we So we are almost ready to create We won't be using some of the dash app commands generated for following files from within the setup tests dot j s file, the the app dot test dot j s file. We must also delete a setting file, which has to do with linting setting in our project. Let's save our changes. Lastly, let's open the index.js to the report web vitals Let's save our changes and let's move on to installing components that we are going to If your project terminal is not moment, you're able to launch and the tilde character. The next package we are going to it easy for us to make HTTP to the relevant API hosted on a we can retrieve relevant movie also hosted on the relevant HTTP GET requests. We will also be able to add Mongo DB database through the will be facilitated on our React We'll implement this video. So to install Axios, we can type prompt NPM space install space And let's press the enter key. Great, so let's install our next which will enable us to use purposes from within our React following at our command prompt NPM space install space Note that in order to integrate must include this import file. Let's save our changes. The next NPM package that we allows us to use Bootstrap and styling purposes. So let's For this purpose, we can install NPM space I space react dash And of course, follow this by Great. The next NPM package that us to easily install font application. The first font installed by typing in npm space forward slash react dash Font So make sure you type at Fort font stash awesome, which I know it's add 14 Awesome dash, react Great. Let's install the second font or in npm space I space at Fort solid dash SVG dash icons. And let's Of course, press the Excellent. To play movie trailers from going to use the React player appropriate NPM package. So that into our React application. So react dash player and press the Enter key. Great in order to declare the reside, in order to map the were, we are going to use React dash router dash DOM NPM the React dash router, dash DOM command npm space I space react And of course, press the enter Great. On our homepage, we want to carousel. We can easily implement a in order to do this, we must packages. So we can install the typing the following NPM space slash material space at emotion emotion forward slash styles. And let's press the enter key. Excellent. In order to use the material UI install the material UI carousel typing in npm space install UI dash carousel and press the Enter key. Great, and we have now installed all order to integrate the within our React application. Excellent. Let's get started React application. So the first Axios. So to do this, let's folder and Let's create a file within the dot j s. We can import Axios into our So we can configure and export use to make HTTP requests to the code. Notes the settings that have we have the base URL setting, of the API endpoints that our calling. So you'll see later on endpoint, we won't need to HTTP request within our code, we additional path information endpoint. If this isn't clear, clear. When we write code to relevant remote endpoint. This Because during the development remote machine is using to endpoints is called ngrok. I won't go into the specifics of this setting in order for our blocked by cause I won't go into stands for cross origin resource is that because the relevant web domain, or origin, that cause point. The server code has overcome the restrictions including this setting in the from the client, so that we can imposed by cause IE, so that we made available through the so we have now set up Axios. write code to call an endpoint movie data. Let's write code to import our Axios config.js file. Let's import the use state hook react. Let's return a D structured The first item in the de and will store an array of movie relevant API endpoint. The second item in the array is change the state of the movies When the state of the variable state hook is changed the react. So in this case, the app when the state of the movies function that will handle a HTTP returns an array of movie data. successfully returned, this code movies array is executed. You can see here we are passing to the get method. This path base URL setting that we created configuration for Axios. We are using async await for functionality to the client, I won't go into and promises. But this in ensuring that the UI is not running operations, like for processed, the UI thread will the use of screen will not, for screen will still be responsive, IO bound operation is task has completed, the code kicks off the awaited process promises made to return to the the task potentially long example, has completed. As explained, this async await to ensure a better UX user goes wrong during the execution the relevant code in a try catch the catch block to log the browser console window. So you your code and check the HTTP HTTP status code returned from indicates that the operation successful. I'm not going to include this order to keep the code fairly we are executing from the Let's implement the use effect function is executed when the Let's also write code to log the to the relevant endpoint to the Let's use the npm start command Let's look at the browser results have been returned from Excellent our HTTP get request executed successfully. So the next step is to start functionality or routing Let's create a React component Let's open the layout.js file from the React Router DOM NPM code for our layout component, the Tab key like this. Let's rather use semantic HTML instead of div tags. Within our reference to the outlet Let's go back to the app.js file layout component that we have Right, so I'm going to create a folder, and move the layout.js Let's write the code to import app component. Let's write code to import the component from the React Router in the return part of the app returned from our component, the route mappings as it were components. So let's first add elements here within the root element, let's It's a parent root element be included within this parent a child route component that will write the home component in parent route component that So the layout component element in the layout.js file to by the child root component within the parent root element child root elements as we our React application. The next file and write code to import the routes component and the component. Let's include code to establish the app component. Great, let's create our home folder within the components that the first letter in our Let's add a file named home with folder. Let's type in ra f c e to generate boilerplate code for Let's simply type in the text route functionality. We'll create the code for our let's create the code for the home component within the app.js Oops, I can see a little bug in layout is not correctly formed. Let's properly within our code here. Let's type in npm. Start at our to launch the application Great. So let's create a component that home component. We will name components denotes the hero will display items in a carousel movies to the users of this folder within the components Within the hero folder, let's Let's also add a file to the where we will of course include Let's write code to import the component. Let's import the carousel Terrio UI NPM package let's import the paper component NPM package let's write code to destructure. component, only one destructured movie data needs to be included let's implement the carousel carousel element like this. Within the carousel element, item in the movies array to an The pay per element encapsulates carousel. Let's include div tags, so that as well as the movie title is item. As you can see, I've included relevant div tags, we'll style css file in a bit, where we will implement the these CSS classes. Oops, let's make sure that we class correctly here. Let's open the home.js file and part of the code that is home component. Let's make sure that we are into our home component. Let's write code to ensure that down from the app component to subsequently the hero component. And that's great. We are from the JSON data returned from let's customize the styling of We can position our Vyas code side of our screens. And we can on the right side of our screens watch the effects of our CSS not going to go into a lot of The code will be available on in more detail if you'd like. Let's first update the CSS code CSS code effects all components app component. And you're able to observe the browser in real time as the CSS So let's import quicksand font from Google with let's set up the box sizing and elements let's set the body elements zero. Let's style the App class. Note children of the app component. Let's remove this code from the not needed let's style the carousel implemented within our hero CSS code in the hero dot css And we are able to watch the displayed in our browsers in code evolves. And we don't actually want the carousel display. As it is at appropriate backdrop image a background for each item in the I want to include a gradient from the bottom of each carousel displayed. In order to background image URL for each I'm going to use a CSS custom So we can do this by including element that references the within that inline style, assign we wish to reference within the are naming our custom CSS We are setting the CSS URL value CSS property from the backdrops movies array returned from the property returned from the pause to movie backdrop images. reference the first backdrop array returned from the server. that we want displayed as a for each movie item in the each background image from the background appropriately. So we are assigning the property or gradient that fades This is just a stylistic choice. For our front end display, you we are using the dash dash image URL property value referenced in component to the background dash dot css file. You can see that distorted so let's style the appropriately. Great and we have used absolute to style our poster and handle let's style the title Great, and our carousel is create the components to house create the header component. So components folder named header. header folder named header.js. Let's import the appropriate let's import the appropriate And let's use React bootstrap responsive layout for our displayed at the top of the advantages of using Bootstrap it creating responsive layouts. We are using the FA video flash that will be displayed in the within the navigation bar that header component. The login and registration Superficially, they are purely could extend the functionality login and registration For example, if we wanted to list of favorite movies or a here is also there purely for implement a watch list component So above the routes file, let's reference the header let's go back to the header.js imports are correct. Let's run the code Excellent, our navigation bar, the next step is we want to be button icon on each carousel movie trailer to play will player component for this folder named trailer within the Let's create a file named trailer folder. Let's also css within the trailer folder. Let's create the relevant input Let's import the use params hook Router DOM NPM package, a into this component as a use the use params hook to value from the relevant URL. The a YouTube video ID which will video, which is a trailer of the Let's import the React player Let's import the trailer dot css Let's create the boilerplate by typing in our AFC E and create a div container in which reside let's assign the Paston key then we can include the React like this we want the player to include controls property to true we can so that the relevant video plays loads and lastly, and most property to the relevant video relevant YouTube video ID stored YouTube address to point react will be played within react let's go to the app.js file and information for the trailer notice how we are able to let about the YouTube video ID the trailer component must let's include a play button icon our carousel. Okay so the play button icon is appropriately style Okay, as it is tiny at the css file and style the play Great, let's include a media adapts to smaller screens Great, let's go to the trailer so that the React player takes Lastly, we need to create the icon is clicked, that the and the appropriate parameters component. So the trailer link property contains the entire URL to the pass the ID of the YouTube video the hero component. We can using the JavaScript substring characters from the trailer link let's run the code. Excellent. The last component we component. The reviews component reviews from other users as well the system, ie, which entails a From our React component to the carrying the review data entered Java code will then save the MongoDB database. Firstly, let's form. This component will contains a text area control that denotes a movie review. a included so that the user can submit the user's movie review. review form. Let's create a file named review form folder. Let's include the code for the discussed. Let's create the reviews component of the review form folder named reviews. Let's include a file within the j s let's include the appropriate reviews.js file. Let's generate the appropriate React component by typing in RFC Let's use the use ref hook to within the review form. Let's we can extract the movie ID relevant URL. This movie ID is actually the have retrieved through the API the array of movie data from the course, is used to uniquely So when our component first we want to call a method that is component in order to retrieve relevant movie that the user the use effect hook like this Let's use React bootstrap and col components to create an reviews component, we want to relevant movie in the left part the right part of the screen we components appropriately to Let's include the review form Let's create a method named add HTTP POST request functionality MongoDB database which resides And let's write code to update on the client side. are not using data returned from to the database for updating the are updating the array directly from the data entered We also want to include code area control. Once the user has we are updating the state of the through the use of the set passed as a prop from the app Let's go to the app.js file and to make a get request for data so an IMDB ID value will be movie ID parameter and HTTP get value appropriately in the URL for a single movie from the So let's set the state for the And to make our code clearer, from the movie data and track Let's make sure that the passed down to the reviews We are now able to create from the remote server database that stores our movie to our MongoDB database through to inappropriate endpoint One thing we must do whenever we identifiable AI items in our JSX code like this is appropriately includes the to uniquely identify each item key property for each movie item the appropriate IMDb ID value been passed down to us with the retrieved from the remote server request. I hope you've enjoyed React. And I hope you feel that course. If you've got to the end of this well. Thank you and take care