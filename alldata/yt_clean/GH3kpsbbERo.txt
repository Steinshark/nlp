I recently said with the start-up CDO for them of their product. His goal was to show me two remote systems alongside their application logs. Why did he say something cool? He asked, sure, he went on and opened a blank, white terminal. Literally they know that by cool, he meant his app, not the terminal. He popped three more windows, aligning them in a group, using his mouse of course, so they don't completely overlay. Then, using the mouse yet again, he went back and forth between them to fire different commands. My excitement dropped, not even because of the lack of elegance. A CDO delivering a product meant for nerd and juniors like myself doesn't even bother to set his own console, it doesn't have to be beautiful, it just needs to be efficient. So for the sake of all the multi-window terminals today, I want to take you through the process of taking a terminal from scratch to controlling it masterfully. Timax is my weapon of choice. It is a multiplexer, which basically means it splits your screen into segments of workspaces in many ways. Timax is not only portable and works everywhere, it's the most customizable. In this video, I'm going to take you from scratch. We'll work through how to handle remote, even if temporary instances where Timax actually shines. Then, we'll move on to a quick customization of the environment to make it beautiful. After that, with the basics out of the way, we'll add bindings to make sure Timax is more sensible and easy to use, we'll wrap things up with a sweet session management system, so let's go. This is a new environment, running in an Ubuntu container to make sure everything is clean. Since Timax is not even installed, I'll go ahead and get it with my package manager of choice. Once installed, simply typing Timax starts a session with a different beautiful name, zero. Timax is using a prefix key to send commands to it. By default, it would be control B. Sending the prefix with a double quote, splits the screen horizontally. Now, using the prefix and arrows, we can move across these paints. Each of these is its own standalone shell process that can be used for different applications. To close a pane, either keep the shell with control D or use the prefix and X. To split vertically, use the prefix and shift 5, which is the percent symbol. Again, this is only the default binding, which in a remote temporary machine, you usually won't bother changing any process ran within a pane is contained within it, both in terms of visual size and effect. When a pane is killed, the others keep running as they've done before. Timax has its own command line where you can send textual commands. To trigger the prompt, hit prefix and hit colon. You'll see a prompt starting on top of the status line where Timax commands come in. This command prompt can do everything the prefix mentioned is doing and more. We can hide the status bar, split the panes, change size of the window, open other windows and manage Timax behaviors. The command prompt also has a tab completion by default, so if you're unsure about the exact syntax, hit tab to see the options laid out. I'll use the prompt to rename my window, which is a good way to describe it and manage multiple running work environments. One last important feature of panes is the ability to zoom in and out of them. Click Z, toggle the zoom, and the status bar marks the window so that you know there are hidden panes and the current one is zoomed into. Remember, we launched Timax with a beautiful different name 0. Let's use the prompt to also change that. Now, with the brief understanding of panes and touching the other two higher level options, Windows and sessions, let's talk about how Timax actually works. Running Timax detach leaves the Timax session back to the terminal. This LS lists the current running session with a brief description of their internals. Running Timax attach pops me back into the session, which, if I had more than one, I could provide as an argument to make sure I land on a desired one. This is a good place to stop and describe Timax hierarchy and how the environment is managed. Timax has three layers, starting from the bottom we have panes, which are the screen splits we made earlier. These are done within a window. We can create multiple windows and move between them using prefix plus the number of the window, or prefix N or P for next or previous. Although windows created are contained within a session, a session is basically a container of windows that can live alongside other sessions. We can attach or detach to and from them. To switch sessions, the default binding is prefix and the opening or closing parenthesis. With that in mind, let's look at a better way of managing multiple sessions and moving between them. In Timax, prefix S opens the Timax session manager, which is a navigatable tree of session's windows and paint. I can traverse down the tree and pin a specific pane that, when selected, throws me directly there. It's time for some config magic. To do that, create either a dot timax.conf in the home directory or a timax.conf under the config file, which complies to the path under xdg config home variable. For more details, you're welcome to check out my dot files, but for now, let's go with the default option. In this example, I'll just send the prefix to a random key like W. To make Timax logo changes, we'll run source file command in the prompt, pointing at the new configuration file. I can now use the new prefix to move across panes or change any other settings. Let's change it back and add some needed extras. The Timax plugin manager, or TPM, ensure helps adding plugins to Timax with ease. To add it, we'll need to clone the repo, which you'll find in the description, which also lists all the instructions you see here. We then set it to the config file and make sure that at the bottom of the file, there's a run command for the TPM script itself. I'll go ahead and already add the first plugin, Timax sensible. This one adds a bunch of sensible bindings to Timax that makes it easier and more sensible to use. Are you tired of this green status bar and boring black text? I know I am. I also spared your eyes from the black background of the terminal over a mode machine. I'm using Wesderm and I have Kat Pacin as a color scheme. Kat Pacin also comes in the form of a Timax plugin for not only color scheme, but also for a new design of the status bar. It also has a configurable modern look. I'll go ahead and add it to TPM and run the installation and load the file. With a few default plugin configurations, all by the way you can find in my public.files. This is what it looks like now. I think we can agree this is an improvement. Making an environment pleasant on the eyes is not only for show-off, but also feels more inviting and encourages work. Everything looks better with a slight design tweak. I mentioned before I'm using Timax.com file, not to be confused with dot Timax.com, because as you'll see my dot files repo, everything I have is similar to home slash dot config as this is my preference. Let's go over a few lines you'd want to have in your configuration to make the Timax experience even better. Starting from bindings, I have them all separated into their own file called reset.tymax. This is just for organization and helps me keep track of changes I make. In my main confile, I start by sourcing reset.com. By the way, note that when I hit my prefix now, catpitching changes the color of the session symbol from green to red, so I'll know it's pressed and it's waiting for a command. A small change that goes a long way. This index one makes sure my windows above are numbered from one. By default, they start with zero, which doesn't make a lot of sense from a keyboard's perspective. Zero is all the way down on the other end of the numbers row, and starting from one is easier to handle when moving directly into windows. The next important bit is renumbering. This is off by default, and if you have windows 1, 2, and 3 for example, and then to is closed, you'll be left with one and three, imagine having seven windows or more. This starts to get out of hand. Set window mode keys vi, lets you handle text manipulations with the vi motions. You can then start the vi copy mode by prefix and opening squared bracket, move around with vim navigation, which is a jkl, up and down the page, etc. Then use space to start highlighting text and then you can yank it. By default, copy is done with the enter command, and then pasting with control and closing squared bracket. But I've improved that using the Timux Yank plugin. Now with the vim yank motion, y, I can copy text into my clipboard and then use it elsewhere. We're getting into the territory of not must, but great to have plugins. One such pair is resurrect and continue. Both enable Timux saved environments to be resurrected even after system reset, while continue helps with automatically grabbing snapshots in the background. Remember the large z Timux shows by default when zoomed into a pane? Here's a nugget to make this even nicer. You don't have to use the cat pitching plugin for this, but since I am, I've added it to my plugins config line in the current window. I added a small conditional statement that says that if the current window is zoomed, show the magnifying glass next to my window name, or else do nothing. And finally, here are all of my bindings in action. Control A serves as my prefix. S stands for standard horizontal split, which is most of what I use. V stands for vertical split. Moving around is done with VIM's AJKL, so prefix and one of these helps me navigate around the screen. I use the prefix and window numbers, like the default setting, to change windows or occasionally the n-p to scroll between them, but that's pretty rare. R will help me rename a window and %, which is actually a default binding, will rename the session. You see, I'm using a grey tool here that I've mentioned before, the session switcher by Jostmeteski. However, being a grey tool, it doesn't actually fit my requirements 100%. And so for the best part of this video, let's see what a full-blown session manager can do for your Timux productivity. This is a plugin I build that I call session X. You can install it via TPM, I'll show you how to do that in a few moments, but let's see how it works so you can decide whether it suits your style. The inspiration to this was heavily influenced by the Timux session manager, the TMS session izer tool, which is by itself inspired by the primogen sessionizer script. And lastly, I borrowed a bunch of ideas from my buddy Jostmeteski, which runs the T-smart manager, like most of the list above, session X uses FCF to enjoy fuzzy finding with the list of available sessions. The cool and biggest motivation for me was having a preview window of the selected session. This is something you get with a default Timux session manager, minus all the other features. If a session is no longer in use, it can be deleted with control D. Writing a non-existing name will create a new session by that name and attach the client there. Another cool feature for the OCD suffering folks is the ability to rename sessions. Control R opens a quick read prompt so you can change sessions names on the fly. This to me is what a read session manager is, managing sessions, whether by renaming, deleting or creating them on the fly from one console, while gaining a preview into their current state. The last small tweak added is the ability to jump to config at home directory, and list the internal files for quick config management of the system. Let's use that to find Timux.conf and install session X using TPM. All that's needed is one line added, with a path, OmerXX at Timux-sessionX, control I of course to trigger TPM, that's basically it. If you like, you can add a configuration line to change the hotkey for the plugin, which comes with a default capital O. While session X does the job and it does it well, it is by no means a finalized product. Or better tested of course, on other platforms other than my own, so you're welcome to test it out and open new issues on the repo below, or comment down here with feedback and requests and I'll do my best to help. So these are the basics for Timux++, but that's only scratching the surface. Timux has a vibrant community, with hundreds of plugins, from Pomodoro timer through the weather app to actually random jokes on your status bar. If that's your style, you can check this video out. However, I believe that too much can be counterproductive, especially with a tool that wraps my IV and is where I spend most of my time. So I consulted the UX designer to help me understand the concepts of basic design and productivity, and I highly recommend you catch this video next right here. Thank you for watching, I'll see you on the next video.