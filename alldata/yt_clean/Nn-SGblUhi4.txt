LP: So the first question I have I hope it's going to put you a little bit on the pressure and get you [inaudible] Is uh, compatibility... During the Kernel Summit, one of the often heard mantras--especially from Linus was that userspace compatibility is absolutely key and is of utmost importance to... to hacking in the kernel and getting the interfaces right Now my question to that is... Is that maybe hypocritical? Because if you look in the detail you'll find that the kernel in recent times has actually broken the userspace APIs often and often and often In some cases--or many cases actually--it got reverted, but in many cases it didn't For that for example, one example is the version number--which is the most recent thing where the major-minor-micro version was reduced to major-minor I mean this is a very very soft change, I mean there's no technical reason for it and it was made and it broke userspace stuff, but you went through with it and a couple cases like that where we know that kernel changes chaged userspace So, my question first Is it a little bit hypocritical? Because it's a mantra, but it's actually not followed Then the next one is Isn't it a bit naive? that a system that has existed as long as Linux's existed... that we actually want that? the total compatibility? LT: Wow! And this is the most explosive one I hope a little bit self-serving? LT: Yes! Because, because it's you guys who run the really old userspace, with really new kernel space Isn't it that maybe you just want to be able to run your old stuff (the userspace stuff)--where you don't care about with the new kernel stuff? Or is it actually real, something that people care about and it should be utmost... ? LT: It's actually all of that and I think the kernel version change is actually a great example of exactly what's going on So, my mantra has been--and it's been pretty much from the very beginning that breaking the user experience is an absolute no-no And that kind of... the ABI stability issue follows from that it's not a primary thing The biggest thing any program can do is not the technical details of the program itself it's how useful the program is to users So any time a program--like the kernel or any other project--breaks the user experience to me that is the absolute worst failure that a software project can make It's the complete no-no to ever break userspace--or for other projects--to ever break features that your users depend on Because no project is more important than the users of the project So, when you have something like a version change that actually breaks badly written software a lot of projects would just go and say: Hey! That is really bad crap software And it's true! There's no question that when we changed the version and that actually broke applications the applications that cared so much about the kernel version that they just say: hey, I won't run because I don't understand what version you are they're badly written But what we actually did we did not revert the change but it's actually because I actually think it's so important to be compatible we now have a flag where you can say: OK, I know this program is broken, we set this compatibility flag... 2 point... Linux 2.4 compat flag And to that program we will now report that we are running 2.4.40 instead of 3.0 or 3.1 And that's the kind of example where you have to do completely ridiculous things I mean this is an idiotic patch, there's no question that it was stupid of us to just add extra code to lie about our version but I actually feel so strongly about compatibility that we did that So yes, what happens is we actually break programs sometimes we break programs by mistake because people just don't think about the implications of a change they do they know they are making an improvement but they don't think about the fact that sometimes people really rely in the old behavior And uh... then people notice it and we have to revert the patch The bad situation is actually when people notice it too late and another program started relying on the new behavior and then we can't revert it anymore because now by reverting it now we break something else instead and you really can't win So what ends up happening is uh... we do break userspace occasionally we try very very hard not to do it it's unavoidable that is happens occasionally but it's basically... when it happens everybody feels really really bad about it and I in particular feel really really bad about it I'm very eager to revert changes that break user experience TG: Yeah, and you make us feel bad about it Oh yes! I'm not at all shy about telling people that: Hey! You fucked up! So I will let people know that you either have to fix this, or I will revert There's a saying: on the Internet nobody can hear you being subtle so I'm not subtle about it when I'm annoyed at someone AC: Right, there's a couple of other things to say. One thing Paypal is working on some include file improvements to make it actually easier to find ABI changes we made by mistake The other thing about the importance of this if you want to understand the importance of not suddenly changing your users' experience I would go and take a look at GNOME 3.0 irrespective of whether it's a good user interface design or not it's a demonstration of why you don't suddenly change everything on people who rely on what you were doing TG: Yeah, that's the whole point why we are running old distros because we can use them for work and are not forced by that new fancy userspace thing to just spend tons of time for finding the stuff you wanna work with LP: But isn't that a philosophy that in today's world where the computer industry moves as fast as it does... is a little bit backwards? AC: No no no no LP: I mean isn't change a component a component of the development of technology? AC: You are asking the wrong question LP: Hey! It's my question! You're submitting the wrong answer! If you look at it from the point of view of the people producing the hardware and technology then there's always a pressure from them to get every new feature and every new thing enabled but if you talk the users of the systems most of them are primarily concerned that what used to work continues to work and in the same way You gotta get a look at enterprise Linux you look at enterprise Linux people and you go in a frenzy: we've got this really cool new feature! and there what the first thing they ask is: Has it been running somewhere else reliably for three years? That's the mentality of a lot of our user base LP: A lot of the user base but are you really sure that a computer that still behaves exactly the same way and the interface moves in exactly the same way as it did twenty years ago that means without mouse just with a keyboard You really still think that this is how computers today should work? LT: That's not actually what we do What we do is we make sure that all ways of working do work that doesn't mean that we disallow new ways of working So one of the ways I used to test and I have to admit that for the last ten years or so I haven't actually tested but I used to have these really old binaries that I mean I'm sure they exist somewhere still but were some of the first binaries ever created for Linux like the original shell binary that was a bad format a.out it used these system calls that we deprecated for years and years I think we started deprecating them within like few months of them being released and I actually ran them every once in a while to check that they still work and I haven't done that for a long time but it doesn't mean that I actually ran them for work it meant that I ran them to make sure that the people who wanted to use them and didn't care about anything else could use them I moved on and I think everyone else should move on and not use the old binaries but you can do both support old modes and new... LP: Because, I mean, I can name you a couple of examples where we broke ABI, and we didn't care So for example... I don't know, it's probably going to be a bit technical but... sysfs got broken many many times The ns cgroup handler, er controller, was just removed from the kernel LT: I mean, we have broken stuff and usually your comment that it gets pretty esoteric is really really true. LP: Well, it broke systemd and [inaudible] like that (my own project) that's why I noticed it But it's not that esoteric... AG: The question I would ask is: did the users notice, did the users care? Some used it, some didn't care for example myself No, it actually broke vlf too LT: As mentioned: we make mistakes sometimes we try to fix them very actively and we don't lie about it LP: But my list has ten items here goes on and on and on PM: So my approach to this problem has been to work on something is so far away from user level I can't even see the [inaudible] But what this guy is talking I'm starting getting worried I just have trace events queued up for 3.2 and I I'm wondering if I'm signing myself up not to be able to ever modify RCU in the future LT: You might be... Maybe I'll revert those quickly AC: We've also had [inaudible] broken some compatibility because it happens every time for example where there were values in the procfs [inaudible] modern machines LT: There are also sometimes security issues where we have made the wrong decision and it was something useful, and people actually used it and we realized that the interface was so badly designed that it fundamentally gave people privileges that they cannot have because if they're bad people they can use them for bad things So sometimes we've had to break things on purpose and It's actually very painful, to me and we really try to avoid that we try to figure out, how can we make this interface work in a way where it's still safe and it still appears to work but it doesn't give you quite as much information, or quite as much access as it used to so that &quot;normal&quot; users who are not actually doing anything bad will still see it working but the bad users who try to exploit it will not see it working well enough that they can actually exploit it So we sometimes even have situations where we try to... break things consciously in a way that a normal user won't even notice that it's broken LP: We have an audience question about that I think I just'd like to know what's the [inaudible] Windows where they had some kernel code to fix Sim City in the kernel I think that's really a bad example of not how to do it So there's the question: how far do you go? and how far do you increase kernel complexity? which is--I think--pretty complex and then put much stuff into it which is much better fixed on the right side and that's I think that's the other side of this LT: Yes, so I think Alan probably has a few comments about that too, but I would like to point out that one thing open source does is it actually makes things much much easier to fix So we do actually rewrite whole subsystems and do things completely differently and then we try to write... and we can change all the internal organizations and then quite often we have this legacy layer on top that uses new information, but just exposes it in the old way it usually isn't that a problem we have very seldom had kernel complexity issues due to that problem We've had kernel complexity issues due to other problems notably that we are doing very complicated things and we are trying to do complex things in scalable and efficient ways and the algorithms we use are often very... non-obvious and we end up having people who have to specialize in certain areas just because if you are an outsider you can't understand the code at all so I'm not saying our kernel is simple, but I think the complexity comes from other pressures AC: Yeah, I agree with that compared with the complexity of support odd hardware or bad technologies dealing with the userspace stuff is minor The other thing which happens that helps both in hardware and software terms is that you can mark an interface as deprecated discourage people from using it, give them better interfaces and over time they will move to the new interfaces and eventually you can get rid of the old one, nobody notices and we've done that more than once [inaudible] we get it wrong, and we remove it and they scream, just put it back again LP: Let's change topics a little bit