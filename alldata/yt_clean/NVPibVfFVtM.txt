Hey guys, have you ever wanted to create your own GUI application in Python? GUI stands for Graphic King User Interface. And as the name suggests, it is basically just an interface for your Python application. If you've done some research online, you might know there are different packages to create those kind of GUIs. There is, for example, Tkinter, which is built-in into Python. There's also PySimpleGUI, which I also used in the past. And there are a bunch of other packages available. Now, all those packages are great, but sometimes it can be a bit tedious to create the actual GUI. Because you need to write a lot of code just to position the different elements, for example the label, the image or button on the GUI. So I was looking for a tool to make this whole process of building a GUI a lot easier. And then I found a really interesting tool. With that tool you can use Figma to create your design. Figma is a website to create mockups. It is pretty easy to use. You simply just drag and drop different elements into your canvas and then you can style your application however you want. Now here's the cool part. Once you're done with your design, you can simply export that design into Python code. That will save you a ton of time and makes the whole process of building a GUI a lot easier. So, in this video I will show you how to use Figma, then how to convert the Figma design into Python code and at the end I even have a little bonus tip for you, where we will turn our Python code into an executable file. That means you can share your application with others who don't have Python installed on their machine and they can still use it. So, without further ado, let us dive in. As mentioned in the intro, we will build the GUI design in Figma. Just head over to figma.com and create a free account. Once you are logged in, we will start with a frame. If you select it, you can specify the width and height on the right side. These will be our GUI dimensions. For this demo, I will use 600 by 400 pixels. Next, let me draw a rectangle onto our frame. This will be our background. For the other half, I am planning to use an image. Ok, and for the fill color, I will go with blue. Great. Next up, let me also insert some text. And again, here on the right side, you can specify all the properties, like the font family, font size and font weight. Ok, as the next step, let me create the input fields. For the label, I'll just use a simple text element and change the font weight and size. For the actual text input field, you can use a rectangle again. Now for the next input fields, I can simply select our rectangle and text and press Ctrl D on my keyboard to duplicate it. Now if I drag down my selection, I've got my second input field. And again, for the last input, I will duplicate my selection and drag the fields down. Since this will be our text area field, I will make the rectangle a bit bigger. OK, next up, let me quickly adjust the labels. We have an email address and also comments. Lastly, I will place a submit button at the bottom. For that, we can use a rectangle yet again. But to make it visually more appealing, I will use rounded corners. And also down here, I will set the color to a light green. For the button label, I will use a text element and position it in the center. Ok, this is looking good so far. Now on the left side, I will place an image that I have saved on my desktop. So let me open my folder and just drag and drop the image onto our canvas. Since the image is much bigger, let me zoom out a bit and make it smaller. Okay, next up, I will crop the image so that it fits into our frame. This step is actually important. If you don't crop it, the GUI will look a bit weird later on. So I'll crop the right and left sides and also adjust the bottom a bit. Alright, this is looking good so far. Let me just slightly reposition the text and labels. Okay and now we are almost done with our design. The last thing I want to adjust is the button. Currently, we have a separate text and rectangle. To convert this to a button, we need to group those two elements. Just select them on the left, right-click and select Group Selection. Once done, I will also rename it to Button. Now here is another important hint for you. When you are using a rectangle with rounded corners, like I did for the button, you want to group it with a rectangle that has the same color as the background. If you don't do this, the button will have white background in the corners. To avoid that, let me duplicate the background rectangle and make it smaller, so that it fits the button. Next we also need to group it. So let's ungroup our button first and then with the new rectangle selected, group it again. As you can see, this button now consists of three elements. Great, and with that, let me also rename the group again to button. Alright, with that in place, let's create the hover effect for the button. This is actually pretty straightforward. Just duplicate the button and place it on top. You want to call this group ButtonHover. The naming here is important, otherwise it won't work. Ok, next up, I still have my button selected and now I can simply change the color or in my case, I will just lower the opacity. Now last but not least, we need to change the name of our elements. Only with the correct naming, we can convert it to Python code later on. I will put a table here on the screen to show you how each element should be named. And of course, I'll also leave a link to this documentation in the description below. So all images should be just named image. This rectangle right here should be textarea. And the other two for the email address and customer name should be textbox. Now for the text labels, you can leave them as they are, that's fine. But for the last rectangle, we need to remove the number. Ok and with that, we can head over to the Tkinter Designer GitHub repo. Here you can either download a zip file or, in my case, I am just going to clone it. So let me copy this URL to my clipboard and then open a new terminal on my desktop. Here I will clone the repo. Once done, you should have the following folder. Now in this folder, there is actually a requirements file. So as a first step, let's install the required packages. Back in the terminal, I will change directory and go into the folder we just downloaded. Now the next step is optional, but in my case, I will create a separate environment before installing the packages. For that, I am going to use the build in Python virtual environment. Once created, I will also need to activate it. Great. Now that we have that in place, I am going to install the packages by running pip install -r requirements.txt. This might take some time. Once done, let me open Visual Studio Code. Now here in the GUI folder, you will see the following Python file, which you want to execute. If you do so, you will see the following window. We will now use this tool to convert our Figma design to code. First let's get the file URL. Back in Figma, click on Share and then copy the link to your clipboard. That URL goes in here. To get the token, navigate back to your Figma dashboard. Click on your user account and select Settings. If you scroll down a bit, you will see the option to generate a new token. Click on that. Next, give this token a name like Tkinder Designer and then hit the Generate Token button. Now you should see your token, which you can copy and paste into the Tkinter Designer app. Alright and last but not least, we need to specify the output path. In my case, I would save it on my desktop. Ok and with that in place, now let's generate our GUI. Here in the terminal, you can also see the current progress. Once done, you should have a new folder called build. In my case, it's on my desktop. Right here, you will find an assets folder that contains all our images. And of course, you will also find the Python file here. Let me test things out by opening VS Code and running our script. Alright guys, and here it is, our fully functional Python GUI. As you can see, we have input fields, and for the comments, we also have a text area field. For the button, we can also see our hover effect, which is pretty neat. Now obviously not much will happen if I press this button. For now it will just print out that the button has been clicked. But in the next tutorial, we will take our code and turn it into an Excel data entry form. And that's actually fairly easy with the help of ChatGPT as you will see in that video. Ok, and before you go, I also have a little bonus tip for you. I will show you how to convert this Python code into an actual application, so that you can run it without having Python installed. For that to work, we need to make some slight tweaks. Currently, all our images are in the assets folder and this folder is hardcoded as an absolute path. So before we turn it into an actual app, we need to make it a relative path. To do this, I will import sys and then replace these lines with the following code. Now we've converted it to a relative path. To test it, let me just execute the code again. And as you can see, everything still works. Now to convert it into an executable file, we will use a package called PyInstaller. But before I install it, I will create a virtual environment again. And here VS Code is already asking me if I want to use this new environment. So I do not need to activate it again as we did before. Ok great, so now in our virtual environment, I am going to install PyInstaller. Once installed, you want to use the following command. It's important to also add the data like our images to our app, otherwise it won't work. Also if you renamed your folder or the Python file, you will need to adjust the following command. Now when you execute it, you might actually encounter an issue. Windows might detect our new app as a virus, which is of course not true. So what you can do is simply turn off the real-time protection while running this command. So now, when I try to run the command again, it has created our app successfully. By default, it will be in the following folder. To test it, let me navigate to that folder and run the app. Ok, great, everything is still working. Of course, nothing really happens now when I click on the button, but that's totally ok. At least we didn't get any error. This also now means, I can place this file anywhere else, like on my desktop, and when When I re-run it, it still works. Alright guys, and that is how easy it is to design and build your Python app. As I mentioned in the next video, we will turn our GUI into an Excel data entry app. If you don't want to miss that video, hit the subscribe button down below. And as always, thanks for watching and I will see you in the next video. Thanks for watching!