Hi. Welcome. I'm Vijay Menon. I'm from the Dart team at talking about Dart JavaScript So Dart is a new programming developing at Google. It's designed for structured writing large scale web all modern browsers via well as Dartium, a developer have native Dart support. I'm not going to talk presentation about Dart itself. You can get a lot of general So please take a look there. In this talk, I'm going to JavaScript. So as I said just before, Dart That lets us run Dart all existing browsers. But one of the questions that start is, how do I mix Dart existing JavaScript code? How do I use existing Google Maps and so on? And I'm going to talk about I'm going to give you examples JavaScript, like Google Maps application. I'm going to show you how you JavaScript. I'll go through an example And I'm going to show on different places. And all of this works today. So first, let me just give of what we can do. I mentioned Google Maps is one around with. Google Maps is a JavaScript API Google publishes, that you can JavaScript to write neat map to your needs. And we wanted to be able to do So here's an example of a simple published examples of Everything's written in Dart. This is running in Firefox, And I can manipulate this. This happens to have the team is based in. I'm based in Seattle, but I'm So were I to go back, I can and see my path back. If I want to go see my should probably try flying, but in London, I can navigate So you get all of the nice is all Dart. And again, it runs on Firefox. I can show you one other example Where here we're running on browser here, you can see the as well, where I can go ahead just works. And again, this is a pure Dart with a JavaScript API. In this case, running So how does this work? Well, I will show you more detail in a bit. But first, I want to start with also using a real API. So this is the Google Charts and so on on my web page. And it's a pretty big API, but some fairly simple things. So as a Dart programmer, there JavaScript APIs I'd like I'd like to be able to, first of my web page. And then I'd like to be And when you load up this as JavaScript context, this google.visualization. And that, essentially, is the JavaScript APIs dealing And the ones that we're we're going to do a There's a class BubbleChart we'd the constructor that And there's also a Draw function feed it data that we want. And there's also another essentially massage data into for the Charts API. So let's quickly see This is actually the web page It's essentially setting up all configuring it on the web page So let's take a look at Here I'm in the Dart Editor, And we're including the Google this first script. That's a JavaScript script And our entire user level script, bubblechart.dart. And so there's no other that we had to write. We could just use the JavaScript our bubble chart example. So here I'm in Dart code, and this function called So this is essentially what gets API's available, and I can go So to show how it works, what through this program So I'm running here. I'm launching an instance And so this is actually Dart special version of Chromium. But JS Interop works here well features of being able to step So here I've called set a break point over here. And the first thing I want to all, before, at the very top, I'm just importing this And I'm prefixing it with JS. So you'll see calls to JS dot this program. Those are calls to the So the very first thing I do remember, I mentioned JavaScript package We can get a handle to that calling js.context.googl What js.contest is, is it's to the global Dart context And off of that context, I can example, Google Visualization. And I'm just storing variable here called gviz. Now, if you look at the panel can see that the type Proxy's a type provided So we get some sort of type that this is a proxy to a interact with. So let's step through So the very first thing we're have data that we want to And we're creating array here called listData. So if I just step over that, listData is of type array. It's a regular Dart array. Now, to feed it over to the need to convert the Dart array that's very easy. I can just call this function And if I step through this, the type array, arrayData is a I'm kind of breaking this up the Visualization Charts library convert your array, now, to a with Charts. And so one more step here array to data table. That's another one of the APIs And again, gviz is our handle So we call this JavaScript arrayToDataTable here. We pass it in a proxy to a get out is a proxy And you can see the type of And so similarly, we So configuration options for a and we can easily create a by just wrapping it And now, we have options So I showed two ways these proxies already. One, you could take an existing that to a JavaScript array. You could take an existing Dart JavaScript map. But sometimes you instantiate a new object. So again, going back to the the bubble chart constructor create a bubble chart. And this syntax shows you how create a new one, essentially, constructor, BubbleChart, and So we're just looking We're creating a bubble chart And what we get back, again, is in JavaScript. And now, we can manipulate We can go ahead and draw the got all set up here. So I'm just going to continue, at Dartium, and we see thing that we saw earlier. But now this is running And again, here we're JavaScript code in Dartium. Just below here you can see-- I'll show some more examples actually provides many And so you can actually see a we're using to actually lazily the Google API from Dart and packages which actually And we're also setting up drawVisualization. So this new js.Callback, and detail on this in a moment, JavaScript callback that Dart function here. So this is what it allows the JavaScript. Great. So that shows an Here's a recap of that API. One other example, very simple we can pick up on callback is often get asked about Now, that's the ability to make have it send data in a format JavaScript. And it's something that's-- it's a convention that's Twitter uses it. And we want to make that And we can use Dart JS Interop So let me show you our And it's very, very simple. In this case, all we need to callback to a display function, it a name in the JavaScript So I showed on the last example stuff off of the JavaScript So for example, we had in the last example. Here you can see there's So what this is actually going JavaScript variable, function forward to a Dart callback. Callback here is creating function that's usable And once we have that, We've set up this callback in to Dart, and now we can do the request into our document. And in this case, we're We're making a search query things to do with Dart. We're getting 20 items back, insert a callback to our the data comes in. And when the data comes in, JavaScript, which ends up function here. And again, we'll step through. And even though this is JavaScript side, we can step editor here. And so now, we've made this It's come back. We're in display, which And data here is a proxy, as things that we got But we can manipulate So for example, we can get the another proxy object. We can get the length. In this case, it's a primitive that as an integer, and we see We asked for 20 results. We got 20 results. And we can just iterate over So for example, we get the first result. We can get the user from the as a string. So we can see that the name of live data coming from Twitter so page at this point. Linkify is just a Dart-specific essentially just processing links in there. And we get that result. And now we can render it on our some nice features in Dart's us very naturally build together So let's-- now this would go ahead and let's just go ahead and what it looks like. So here it is. We've got the 20 different what people have been talking about Dart. And when I ran it this morning, things I saw was a reference to a cool link you can check But it's interesting to see So let's go back to let's go back to our So what we saw here were proxies between Dart and JavaScript. And these aren't all the examples just showing what's Visualization example. From our Charts example, we the JavaScript side, but we were the Dart side to interact Going the other way, we had callback as well as the other Twitter one, which looks exactly And we were able to materialize the JavaScript side. So JavaScript can Dart objects can reach the other way around. So recapping, to create a Dart three different ways First, you can invoke a create a proxy by creating You can create a new array You can create a new map And you can also create JavaScript back to Dart. And you've noticed the two Callback.many, and I'm going to But they both, essentially, JavaScript side. All right. Let's get back into a somewhat Maps example. And the Maps example is of an interactive application. I'm running things So it actually highlights some need to know about if you're of what JS Interop can do. So one of the things you have memory management because we're two different heaps. And although these look like JavaScript objects and vice abstraction that we give the to write programs. What this really looks like have two disjointed heaps. You have a heap of JavaScript right, and you have a over here on the left. And we're doing the magic under like you've got references essentially keeping these IDs get a consistent mapping One of the tricky issues here I can show that very clearly. If you look at this example example, is a callback, is a Now, normally the Dart VM will we're no longer using it. But in our system, this id2 is alive forever, unless we Or implicitly, I should say. Sorry. Unless we implicitly get rid We have to do something either developer layer. So the Dart garbage collector essentially what the And the JavaScript garbage JavaScript. So we need to do something to So to show exactly the issues Maps example. So Maps is a somewhat more it's again, more interactive. As I showed you, you can You can interact and do multiple just one setting something So let's just walk through this then we can see it running. So first of all, Main is And you'll notice like before google.visualization, And js.context.google.maps is Maps object. But I want to use this Maps So what I have to Now, if I don't retain this, ahead and collect it. Or the JS Interop layer is going it at the end. It's going to de-allocate it can clear memory. So if I don't retain use it in this method. But in some callback that it will be an invalid proxy. So retain keeps it around. And you'll notice this pattern variables, maps, directionsService. I want to use retain to make variables are valid beyond So you can see here creating a map of options. So to create the options, I I can use-- again, Maps here is referring I can use ROADMAP to indicate I can create a feed this all in. I don't have to use retain here just used in the process of This is the call to construct certain canvas element. And then, display is a component displays the results. And that's updated ahead and retain that. That's one of my other I'm using this across events, And then finally, the bridge in the Maps talks to Google servers and information. So again, we're going through need to initialize this service, it so we can use it So we're essentially setting up go from Seattle to Mountain View it initiates a new request. So it's going to calculate It's going to figure out the options I've given it. And it's going to And again, the request here So I'm calling into JavaScript is done, call back this And I use js.Callback.many And it's an anonymous So I don't actually have I can do this nicely in line, code, OK, when the request comes OK and I'm going to go ahead and I wasn't able to compute. These are different continents, suggest that you fly instead. So let's go ahead and run It's the same app I showed you device and Firefox. And here I'm starting I go down to Portland. So notice that these are So every time I'm doing this, proxies and then allocating new Now, in this case, you'll notice usual, but I have this And it's calling this function And that's more of a debugging using this app in more of If you're using this library in tells you, essentially, how you're leaking proxies. And you can see here that called it, it was six. The next time I called Let's go ahead and do this We'll go from Denmark to Germany Now, every time I call this, I proxies is increasing, so that And in fact, I talked about Callback.many. That's a tool here that you can Now, it turns out the difference that Callback.once is system, I have a callback. It's only allocated-- It's only invoked once. Callbacks, by definition, have don't clean them up But if you do Callback.once, it clean itself up. If you do Callback.many, it will it will persist. So it's essentially a callback call many, many times. In this particular case, every every time I have a different new request with So I'm creating a callback And because I'm using proxy running every time. But in this case, this callback once, so I can go ahead So even though the number of very slowly, so unless you're long time, you wouldn't We build large scale we want to be able to run these without causing issues And so if you're writing that want to make sure you don't And again, here, by using once, want even in this very clean up after ourselves. And in this case, we constant number of proxies. And that's what we We want to see, as we use this some small constant. And in this case, 6. And, therefore, we know that Great. So again, the takeaway from this little bit about managing memory an interactive application. You can keep a proxy alive You can release it when you're So the common pattern is you We have single versus multiple js.Callback.once, and this multiple execution. And you can track the total debugging by using proxyCount. So thanks. You can learn more about this. Learn more about Dart in dartlang.org. And one of the new things that dartlang.org is a cookbook that quick start recipes on including JavaScript Interop. We'll have some information If you want to learn more about library and how to get started application, go to our the JavaScript package. It will show you how to get app, and they'll show you docs as well as all the samples And Source Code, it's a get updates from people both who've made lots of big Thank you.