Welcome back, everyone, Dan Vigy here. And today we're going to be talking about This allows you to create some really queries, without writing custom JPA, without writing all of these custom We're going to use something called query And we'll get in. We'll write a new app. I'll show you some of the reasons, before, like when you want to do some kind of filtering or fields. query by example is really perfect for I'm doing this because I got a question repository. And so I figured before we jumped into and just talk about what query by example it in our spring applications today. So what I'm going to do is head over to I'll go ahead and leave a link to this in But this is just an example project that how to use query by example. Now, it goes in and talks about some some getting started stuff. But what I want to kind of focus on here because I think this is important. So search forms with multiple optional This is really kind of my first go to. Like if I have a bunch of fields and I three in one search and then maybe field one, and three in another search, I don't want to have to write all these different these different dynamic finders for all of the different So we can use query by example in that Really quick prototyping and development, even need to write a controller. You can repository and use query by example behind the scenes. Simple equality -based queries, scenarios compile time. And that's good. you don't want to use this. If you have to do greater than or less than or in between functions you're calling, maybe not a good example of for really just kind of rapid prototyping, getting something that. There's a bunch in this final repository that I probably yeah, there's a lot going on there. I also link to the want to dive in and learn a little bit more, this is a really over to start that spring .io. Create a new project. dev .ddddd Danvega. We'll call the artifact query by dev. Danvega QBE. I'm using JDK23. What we Web. I need Spring data JPA. It works with JPA. I need validation on some input coming into the controller, if we in the final repository. Spring Boot DevTools. And database, some employee data, so that we can see some different as the database. And because I don't want to have to machine or have to ask you to do that. I'm going to include the Docker desktop to run this when you pull it down. If you Postgres stuff out. Use something like H2. You may need to into the database, but I don't think that should be too right? If you're not trying to do that, that's okay. I remember being Just take that SQL script, ask AI to convert that to an an H2 SQL. script, right? So I think that's all want to go ahead and click generate. This will download a zip. IDE or text editor is. Most importantly, what productive in, as far as a IDE or text editor goes, most productive at. It's one your productive in, right? So open it Ultimate Edition, and what are we waiting for? Let's write some code. All right, so here going to do is open up our composed. YAML. This is the configuration to load a here. And I'm just going to update a couple of say that our database is employees. We'll say this is a password. And then and make the port 5, 4, 3, 2 ,000. available on my local machine so I can actually see the database. The next thing I'm going to do is I'm yamil. And I'm going to open this up and we are Query by example is the name. So we'll say spring application. Name, name, and this is query by example. And then I'm going to pull in a little So all we're saying here is, hey, when we that. So you have to change this if this is not So we need to say this so it'll pick up And then for JPA, we're just saying, hey, We want to format SQL. We want to create and drop because again, demo we're just kind of dropping the run. And then we have some logging levels So the next thing we'll want to do is add ahead and create a script that will load say data .seql. I'm going to paste this in employees first name, last name, department, bunch of values. This will give us some dummy data. so that we can go ahead and test some Okay, so with that, I think the first to represent our employee. So let's go ahead and create a new We'll call this inside of the employee We'll say this is called employee. And this is going to be a class. Now again, I'm going to copy some info this out. But we are essentially going to create a saw before. So this is going to be our entity. We are We have, why is this, let's just do this. So why is that coming in twice? Do we grab the wrong one? Let's do this. Let's do this at ID. All right, now we have our ID. So we have ID, first name, last name, I have a no arcs constructor, which is I have a bunch of getters and setters I also put in a builder. So this builder just helps us create an So this is a static class inside of here It just helps us build out an employee. It just helps us build out an employee. and then we have a two string. So we're starting to get there. The next thing that I'll need is a So let's go ahead and call this the And this is going to be an interface. And what we're going to do with this is repositories. So we're going to say extends JPA Again, the ID type or the type that we're The ID and the ID and the type that we're this case is a long and we're also going and this works off the employee object. So we look in JPA repository and we look down at the bottom example, one takes an example, one takes an example and a sort. And example. An example takes a probe to define the example. tuned using an example matcher. So this is where the query by example But also we brought in this one because We can do things like find one, find all. exists. And then we can find by, and this takes called query function. So there's a example executor, so we brought both of those in. Okay, so before we do anything, let's see if we can run our application. get picked up and a database created for us, and we can of that data is in there. So let's start there and see if that Okay, and we come down here and we see a So a table was created. I don't see anything about our data So let's double check something here. Data. And our knit mode is always. Am I showing SQL? I am I am. So let's just check our database. I don't think anything's in there, but I So if you remember, this is user, employees. And so let's go ahead and apply that, And if we look at the table for I wonder why I wasn't logged out, but So we have our data in here. So we have a bunch of data. This is good. stuff that we can work with now. So now we need to start to build out some Now again, in the past, we can open up We can use everything that is in here. Like if we just wanted to find all, we But what I want to talk about is, hey, like searching or filtering? Normally what I would do is I would come finders. So I might come in here and say, give me What I want to do is find all by first So then I might take in a first name, Then what I might do is go, oh, I realize first name and last name. So string first, string, last. And I'm not going to go through this, but the number of fields that you have, you might end. up creating all these different dynamic that you might use when it comes to And this can get a little bit tedious. And this is where one of the things that So what I'm going to do is I'm going to So let's say Java class, employee And this is going to be a service class. And we're going to get that repository. So let's say private, final employee Repository. We will get this through constructor And now we can start to use that All of the methods in the JPA repository, executor repository, we have access to those. So I'm going to write one out and then through them. But the first one I might want to do is exact criteria. So let's say a list of employees is what And we'll call this find employees by And what we will take in as an argument Call this employee. And then what we can do is we can say And that takes in a probe. And that probe, in this case, is just going to be the employee that we So what we'll get back is an example for So let's say example. And now what we can do is we can say, we So we can say repository. So we can say repository. Oh, are we find? No, I'm sorry, find all. And you could see one of these takes an So we can pass that example in. Right? And I just realized something. If I'm going to paste some code in here, Let's go ahead and refactor this. I'm going to rename this to employee So that, that, that, right? Employee repository, employer repository. There we go. So now what we can do is we can use that hey, go, ahead and find me any employees that look And that allows us to do a couple of Like we can just pass in, say, a first first name. We could say, find me anybody with an department of this. So we get to get a little bit creative So let's test this out. I'm going to do that by creating a new We're going to call this employee And this will be a rest control. and we will go ahead and set a request And what we'll do is we'll get our So we'll say private, final employee And we'll call this employee service. We'll get that through constructor And then I'm just going to get a get So let's say get mapping of slash search slash example. And then what I'll do is in there, I will employees. And we will call this find by example. And then what we'll do is we'll take in a So a request body. And we'll also make sure that it's valid. although we don't have any validation And we'll say employee, employee. And I just realized that this will be a And now what we can do is we can use that service, return to me, find by employees by So now what we do is, we call search example on a post mapping, kind of looks like that. And that will return to us any employees All right. So I'm going to use my generate request but you could use any other tool like And I'm going to go ahead and generate a search example. And then we're going to pass in. and employees. So let's go back to our Jane Doe. Actually, we'll just look for Jane and department is IT. So I am, I'm not going, actually, I think in. And there is our particular user. So let's see if we And then I'm going to run a post request And we'll see if we can find Jane. Okay, so it's actually looking for a big Let's see if we can just provide just the And run this again. And now we see that we do indeed find So this is good, but, you know, again, Like I want to pass in certain search Maybe I want to find everybody that is in Let's go ahead and run that again. And now we see we get a list of people department of IT. So that's working well. So I'm going to go back to my employee We're going to paste in a few more So let's say these per, yep, that'll Then we can do things like this. So now this was like the basic example. What if we wanted to define one? We could do that. So this will only return one or an We can also do some custom matching So the first two, we're kind of just Now what we're, we can do is say, okay, I'm going to take you remember back from that post request that I made, department. So now what we're doing is we're setting we're using this example matcher. So this example matcher can ignore case for all string matches. Then we're something like, containing, which is like a like in a SQL something that's like this. Ignore null values. The department needs to contain it. So if we were to do somebody like first name starts with Jay or Jane or John's in our sample data. But I don't just need to kind of match it. So let's see if am going to copy this in. Let's go back to our controller. And now what I'm doing is taking in a first name and a a custom matcher. So if we back to our data. Let's see if we can't Johnny is in there. That's probably not going to work. Jane, first name. But I guess I do not. So in this case, I can search for John, department. So if I had another John, do this. Let's do this. Let's put another say John Fu department is going to be sales their salary the same. So let's go ahead and rerun this this. Run this. And now what I want to do is do a get and a department. So let's go ahead and use that to And we can see that the first name is, And then the, oh, you know, I probably department without an eye in it. So let's say marketing, because that will So let's do that again. And then in our generated requests, we're So let's see if that works. Let's go ahead and run a request to that. And we did not find first name. Oh, that's why. So let's try that again. There we go. So now we were able to pick up John from And John from marketing, because we did a containing match on it. So again, I hope what's coming across some really great ways to do searches and of these kind of custom finders. So I'll put a little bit more in the So you can see a bunch of different But I think that's a little bit more in tests, so you can see a bunch of different But I think these kind of these basic And this shows off using some of those So I thought it was fun. A little bit of an introduction to query If you're using Spring Data JPA and go ahead and extend that query by example of there. I have examples for being able to test of other things. Again, it's not for every situation. We of the video, but for certain situations, it works out And I'm going to be continuing on with In the next video, when we talk about annotation on a repository at GraphQL And then you don't even need to write out really cool. So, hey, I hope you found, I hope you If you did, do me a favor, leave me a Subscribe to the channel. And as always, happy coding, friends.