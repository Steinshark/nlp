Today, about how design systems can digital experiences with speed, and consistency at scale. And I'm going to base that I've been doing recently And what I hope with a lot of little insights that you can take able to apply to your own work. So hello everyone. My name's Ryan. I'm a developer. And what I really is that intersection So I spend a lot of and working on front-end development. And so about a working with one of our to help them build and And so if you haven't It's because they're And they're actually one of telecoms, so a pretty And ThoughtWorks has with their digital arm, which over the past few years. So Telus Digital creates a and mobile apps. So telus.com is a very large They have account management a lot of one-off sites, as of mobile so mostly web based, of mobile stuff in there, too. They've grown really quickly from a very small team into a organization distributed And with that kind comes a lot of challenges And what I'll focus with maintaining and managing their front-end And so now I'll go If we start looking these are four different from Telus different And what you can that there's a lot of Notice that the header of these different applications. The search is in and also functions differently. The kind of patterns in use are different on each page. And if you were to actually you would see that not different on a lot of these but they also behave And then if you were to of these things, you then start if you just take actually built over time by different times. So there's four different as well. So what Telus Digital was their customer experiences disjointed, as you can see, and was also becoming more and making it very hard to manage. And so they found themselves There was no real way among these different because of all the of their technologies. So teams had a really because there is no kind of should look like, feel interact with those things. And so this kind of led to for users, because There was no kind through all of the where people could anchor and ways of interacting And then they also noticed a lot of duplicated effort. Teams were building, and then over and over again, So the example that is, if you go back it was implemented at least by those four different showed you, at least. So if I wanted to make a and across the have to coordinate over multiple weeks of to make one very, very And that's absolutely And this is kind of what This isn't unique to Telus. I think in my years I've seen the same of the clients I've been at. What we have to do the way that we and about front-end development. We have to start and systematically, especially This becomes very important. So for the rest of this is go into how we have with Telus Digital to address what's called &quot;design So one of the first things was try to kind of wrap their and try and define their And I can really break this is how they defined So one, we want for teams to collaborate so they can stay in sync. And then two, we want to experiences-- web applications, we want to be able while still maintaining of design and code. And so for this talk I'm into three key areas, where we to kind of bring design systems And that's in areas of reuse, So without further ado, What we wanted to do was try that teams were doing, and kind in the same kind of user and interface components so that we could reduce And then we also wanted to experience by providing reusable And the primary is really a mindset shift. Instead of thinking about as a series of unique we instead think about them And these components are-- they have clean boundaries. And they can be assembled to create different experiences. And then they can be across different the ongoing costs of change So if we take one of this is a kind of Telus Plan where I'm customizing And if we start to apply the to this page, we start to break it down of components. And then these can form that get re-used across So after we take then what we can start of these components If you look at something or the paragraph in green, These are your standard UI elements. They don't really make within the context of a web But if you look at something there, like the Chat The Chat, sitting behind if you're talking to a real or some kind of AI. It's a very, very and that same Chat box might on every single place. You don't want to arrange And so what we started to do was which is kind of very with technologies, such as And we started to And we kind of wound of categories of use throughout Telus Digital. If you look at the section Header, the Chat, these are what And they're essentially we call &quot;micro front-ends&quot; independently from the rest of And these fall because they're largely the or across multiple so we want to be able to These things maintain their And they make their to very specific APIs that's of the page. And so for this, we such as React, to deploy them as containers, deployed and maintained. And then on the right, these are components. And we would distribute that we called the And teams could then take these. They could arrange They could extend them. They could build on top of and create the experience all while staying within the patterns that we wanted across different products. And we used React, on component orientation is And we distributed so that teams could manage a control and integrate into their application. So a lot of really happening when we structured We were able to around the global could maintain them separately So that problem I talked you need multiple teams over Now you can do and you can deploy to of minutes or hours. And then with the design components, teams across the different before, because they could for what things should look So the next section I'll And we really tried to drive automate all the things. So as soon as new they have something they and start delivering to, again, reinvent the wheel So there's a lot I So instead what I want to very specific, and give you a really show you how And so what I want to dive of testing called &quot;visual I'm going to drive this and actually show But first, let's define what means. So what I show you of a simple, branded that you would find in the This is actually it, So a visual regression of unwanted change or any unexpected change to So it might be a That could be a It could be a change In that case, it's That could be a Or it could be seems a bit more with projectors and such, would color from the kind that we want to maybe And so I'll use this So what I want to do is walk of how this might work. The interesting thing is, are able to distinguish between this seems very obvious. It's like, well, But historically, hard to do any kind of It's always had to log into QA or to through the entire site looks all right. And that means you And then later, you find and you fixed it. But we can do better now. So let's look at some code. This is two tests to test the component. It's written using So if you don't know those It's really just about going on here. The general idea is that we generate of our application over time. And we compare those images to when we expected it And that can tell us if there's In this first test, what render the button The primary one is green, and the inverted one It's transparent. In the second test, we're are emulating a mobile device. And on a mobile device, will naturally stretch to fill that it has so you have a nice, And then we can start If we execute this test we'll get some output that The test passed. That's awesome. That's what we wanted. And the great part is, we or snapshots dropped for each of those tests. These form what's called the now. And we can check this so that we can remember, is supposed to look like, in that we have in Now let's say we introduce We've actually changed for our primary button. And let's see what happens. Our tests fail. Yay-- that's what And the cool part is, of output in the middle there. What's happening with this test to do pixel by pixel comparison is this image like that previous And if not, tell me how In this case, it's 1.8%. And actually, how are different between those two And so when we execute we also get two more images I'm sorry for the So these images this and it's divided On the left is the That's what it should look like. And on the right is the result as you can see. That's probably And in the middle is the diff. The grayed-out parts are and the red would be So now me, as a human, I can what was going on. And on the chance did want to change I have a flow that the baseline to that can move on from there. I think this has been a lot of confidence as we And on most of the projects at least the front-end is, the CSS has been the thing no one wants to change. And God forbid you delete because you have no to happen when you do that. And so it ends up just growing, And the complexity But with new testing we can start to And actually, you can and be confident that your entire application now. And so we helped pioneer this with Telus Digital. And now, a lot of teams just like this on larger or even the entire thing. And they do it in their into the code base. So we have a lot of confidence being maintained over time, is being maintained, too. If I go on to the to talk about, it's specifically about how into the systems While each organization at Telus Digital, is that they're very of agile principles as well And so we wanted to into the design system. So I want to talk about the and how it evolved over time. For a long time, we had model around some of and some of this in which me and the rest we would produce a to a lot of teams And this is fine for simplicity at times, but kind of over of those components of ways they wanted it became harder and that service and that that they wanted. And the longer the less contacts that challenges that and the creative ways in the space of design So we ended up-- what we wanted to do the collective wisdom of all And so they've largely switched model, where the key being to the system are largely who want to be involved. So this equips more be evangelists of the system. It brings in new that we hadn't previously But a system such as see how, as that this could get unwieldy and So I think that the still remains very is very similar to a lot of That central team can still thought leadership, underlying tooling for all So this is the model All of these things-- global elements, and the design tooling and testing testing, and the culture of is all part of what's called And it's open source. And so I invite you to and you'll find talked about today, and a lot The top link is kind of portal that leads you to And the bottom link It's under active You can go check it out It's pretty cool. And so I think with what is this and what can it do for you? What we've seen is designers spend less time reinventing and over again, and the problems of the customers, So I think that is than what they may Secondly, they're able to market much, much faster. Because a team has all the and running very digital experience to of maybe hours or even minutes. And then finally, the experience, because teams are They have reusable components And so teams can stop and they can spend the overall experience. So that's all I've got. Thank you all very much. Thanks for listening. [APPLAUSE]