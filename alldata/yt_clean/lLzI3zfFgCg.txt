My name is John Le Drew. I've been working in software, in the kind roles for about 20 years. I spent a lot of that as a software engineer, of slowly moved from being more of a technical coach, and then slowly moving far more into teams of software engineers than necessarily But I still do a fair bit of all of that, My talk this time was looking at collaborative So it was looking at how we tend to have...I I think, in engineering, we recognize that about all of the systems in every end and know, known as being a really bad idea, but apparently best practice even to have like business knowledge for the application, but So it's kind of looking at how maybe the whole and that you can share that role. So that was me. All right. So I'm Adam Tornhill, I'm the founder of Empear, So that's one of my big interests. I'm also the author of &quot;Software Design X-Rays&quot; topics. This time, I spoke about prioritizing technical happens to be one of my big fascinations. So what I think I do differently when prioritizing organizational factors and social factors So that's pretty much me Technical Debt as if Time and Money Matters Has technical debt changed over the years? We tend to work more remotely and on a global Does that reflect in technical depth in the Yes, I think it definitely does. So I've seen a very clear trend. So I think in general, many software projects, We're building ever-larger software systems. What I tend to see is that we make many technical and re-factor based on properties of the code, But I do think that when we're talking about system mastery and team coupling, should also align the organization and architecture, and unfortunately. From my side, an area that I work with a lot One of the interesting things you will see is that they go into their retrospective, everything is. They come out with some ideas for how they Then two weeks later, they go back into the about how awful everything is. And they come up with the same set of things I find that the fascinating thing is, this is that you'll often have a, &quot;Well, you know, build, or improving the speed of the build, coverage, or dealing with whatever the issue We just can't get that prioritized over-delivering Then I ask, &quot;But those things are the things They're the reason why you failed to hit that &quot;Well, yes, but, you know, they just don't &quot;But you've told them that?&quot; They're like, &quot;Yes.&quot; You'll have these conversations with product so team...you've been in the retrospective, that they consider to be the most important stopping them from delivering to your expectations, It's a very odd thing where there's a lack team, and I actually think that goes back links to Taylorism and Taylor and this basic the thinker, as Taylor would describe himself Yes, I find that really interesting. So I've seen the same situation many times What I find fascinating is that...I have this is much more likely in a larger team. Because I do think it has something to do That's when you run the risk of running which social psychologists love to talk about. Yes. One of the things I know you care very much should be a safe environment for me, as a about what we're doing. But still, I feel like doing retrospectives, a very short time every two weeks. If I was in a team, with all this in place, Linda Rising is also speaking quite a bit I think there's value in both things. Something I've started doing a lot was I was I get fed up with teams that moan all the So you go into a retro and they spend the is. A lot of the time, I found myself just saying, about, like you knew about that, you know, Why didn't you start fixing that? Then why wait until now to deal with it?&quot; I had an agreement with them that essentially an impediment, we would stick it up on the right then, so, whenever it's an issue with So what was quite nice was after that, I don't worth of work, we actually realized they came really negative to talk about, not kind of But really, it was a really positive retro. So we decided that the two weekly retro that after that point. We deal with all the negative stuff beforehand, about, as Woody Zuill would talk about...I know, turn up the good. That became a really nice cycle for that particular that. So I kind of agree and I disagree. I think that there's a real value in that having the time to come in. And even if all you're doing is using that that's really valuable. But you can do it on a daily basis too? And you absolutely can, but there's something A ceremony. It's like you can tell your wife, your partner, you want to, but there's still something special saying that on Valentine's Day. You make a ceremony out of it. I think that gives it more potency in some But I definitely agree that in an ideal world, of fixing things, it becomes superfluous. Has any of you ever been in a team, where This simply doesn't work out. I'll pack my stuff and I'll leave?&quot; I've come very close a few times. Definitely. I haven't given up yet, but it definitely In my experience that tended to be much more with professional development. That was still back in the day of the traditional And that could be extremely frustrating at So things are definitely...even though we development, but I do think we have made significant I completely agree. I think that even though there are some of adoption or moves to different mindsets, there doing the things, having the stand-ups, but be described as operating with agility. While that's frustrating, even just the slight more breathing space than it did 20 years It's a lot better than it was. You often hear that we should strive to make Can a team be too diverse? I don't think so. I think that diversity of thought is fairly The greater heterogeneity you have in any a problem from different perspectives you And as well, certainly, we're at GOTO, so all doing creative problem-solving. So that's the thing you want to focus on. But, I would say that the skill that we seem You need good facilitation to support and be positive good creative conflict in those And if it's not well supported, and you don't as an effective outcome as you might want That's a brilliant way to put it, positive Adam, I see you as kind of 'Mr. Technical I created my own brand. Have you ever done any statistics on how the of what we do? So, to a certain degree, yes. When I do my analysis and my research, I tend rarely look at the individuals and how they the team level is most interesting. What I have seen is a very positive correlation teams. So that's one of the things I'm looking into I think a small team is much smaller than So what I see is that teams work best when because that helps you avoid a lot of, not of motivation losses that easily occur as That's so small, it's almost not a team. It is a team. I think, what tends to happen is that when about just eight, nine people, what you get You get a bunch of individuals with largely them. It's incredibly hard to keep a team together Do you think companies should learn from that, but the way we divide companies into departments? Yes, I think that's actually vital. So all the stuff I've been saying with small only way to scale is by having lots of really, In order to pull that off, you need to align but also the overall business structure of That's an area where I think and hope we will I think that is a very interesting point around I've worked with a lot of companies where They will often have upwards of 100 people Now, they're not in one big team as such. But what I've seen a lot of is, is how teams and those people, you end up with epic amounts that might be. That actually happens very naturally. There's kind of an evolutionary bias for us, great. We have this kind of natural, very natural We form very cohesive groups very, very quickly. But there's, I think it's Stanley McChrystal that headed up the joint task force in Iraq. He talks about how when he started with them, equivalent of teams, outside of that, that So you're in a team and everyone else is terrible. I see that a lot. And something that I've seen is that the other is that, from a code quality perspective, codebase, you've got 100 people kind of working lots of integration challenges between the Something I've experimented with, with some rather than artificially split you all up allow you as a team to group yourselves around So technically, there's one big team of 100 But the work comes through, there's a single form small groups of four or five people...&quot; I'd say, often not much more than that, &quot;...around or maybe even less than that.&quot; They kind of form and then they disband, and I've actually found that to be quite effective. So you keep the people working close together There's lots of rotation around those groups. So it means you don't have the issues of one style, standards than other teams, which sometimes approaches to testing before they push up department. So the team's got 100 people in it, but in I think, was probably the largest group we of time. But I've found that to be quite effective. I mean, saying that the codebase on that particular with. So it was hard to... I think that's where we, as an industry, have good at the technical aspects of software good job at organizing software architectures Absolutely. And when you have that misalignment, that's expensive. Was it Conway's Law, reverse Conway's Law, Yes. Yes, kind of. Yes. There's a lot of truth to it. You know, there's this really good research where they point out that organizational factors a parallel piece of code are better predictors code itself. You mentioned my love of psychological safety. Obviously, Google did their Project Aristotle are these five indicators around specific that demonstrated the kind of effectiveness Now, this wasn't just software teams, but teams, if you have two teams, you might assume B is not doing very well, that may be Team engineers. But that wasn't true in any of their studies, You could take a team of five, mid-level, more effective at delivering against expectations had low levels of psychological safety in I think that there's still a huge amount of think we really know. The work of Amy Edmondson and other people But I think that we've kind of only scratched To me, it's incredibly profound to suggest take a group of people that by all objective effective and more experienced engineers than likely to be effective, even though they had unrelated traits. It seems kind of mind-blowing to me. Yes, it's powerful. Yes That's pretty interesting. I think we could go on forever here. We have plenty of stuff already. Thank you so much. Thank you very much. It was a wonderful conversation. Thanks for having us. Thanks.