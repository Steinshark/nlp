HTMX is the opposite of React What do I mean by that? We'll be covering what HTMX is, when it But First: what is HTMX? HTMLX was created by a guy called Carson Gross, and it stands for **HTML extension**, The &quot;extension&quot; of HTML happens on two levels. The most obvious one you see in the code: HTMX For example in this code where However, that example is an exception. Most of the HTMX extensions with the server and dealing with the response. For example, let's take a Here we have three attributes on the button: `hx-get` describes the AJAX call namely the `GET` call to the `/info` route. When the response is received, HTMX designated by `hx-select`, that is to say Then, because `hx-swap`is set to "outerHTML", HTMX will swap out the entire selected element And that brings me to the second we use the HTML page as the "thing But here, HTML is more than that. respond with HTML. HTML is also the Like me, you might find it weird to imagine an The HTMX website points to a blog post by Roy That post is entitled "REST which probably gives you a good idea And I kind of see the point, even though I'm not Remember that REST means Representational JSON is excellent at serialising But you expect that data to follow a fixed shape. This means the JSON won't change shape based on the state. can it be the expression of the state in Carson uses the example of a bank money" action would be disabled based Of course, you and I can easily imagine how we could wrangle the JSON to But my default reflex would be to set up some And that's fine, to my mind. However it's not the path HTMX has taken. HTMX doesn't expect any client-side logic to In fact, HTMX shies away from that responsibility. It purposefully puts the the display state squarely This is why you could say that library) HTMX is (in fact) an A JavaScript framework essentially manages the state on the client and updates HTMLX relies almost exclusively Now obviously, there is state that is completely is the interface in dark mode? HTMX (and Carson) have no objection to However, it _is _ strongly opposed to more And that naturally brings me to Under what circumstance does rather than a client-side framework, say, React? What is the point of communicating HTML The beauty of HTMX is that by taking the a "Single Page Application" like experience Of course, you're probably aware that React has Theo makes the point that React have expanded the domain of front-end developers. They have given front-end That started client-side And now, with NextJS and RSC leading the And running on the server makes sense The beauty of this approach is that between the client and server-sides. mental gymnastics than switching contexts, But server-side React keeps you firmly What if you're a backend developer. Or what if Or what if you're just in a context where The beauty of HTMX is that it It jokingly refers to itself as the "HOWL" stack, H.O.W.L., where HOWL stands for That means you can render that HTML content server-side language you like without This means HTMX is doing the and is another reason why HTMX HTMX extends the domain of backend And so to me, the fundamental question of who might profit from learning and First, where should your state live, Web applications live on a spectrum, ranging from banks on one end all An arcade game's state: * it needs to change quickly so it lives on the client. For applications with client-side it makes sense to use a client-side framework. Conversely, on the other end of the spectrum, Banks don't trust their users, so all the And if you're in that situation, you may be better To frame things differently, the question is also: Are you a front-end javascript You're probably better served understanding how NextJS and React work. (And I have Are you a server-side developer HTMX is probably a good fit for you, although it _does_ require your In my experience, that isn't usually the moving to HTML might be a big ask. But whatever path you choose,