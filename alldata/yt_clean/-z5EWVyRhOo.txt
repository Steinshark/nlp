succeeding with software at scale is incredibly it's pretty much about taking putting on top of the technical work that i do I think the hotspot analysis makes our not to-do how do i figure out negative if i go to a client and say that twenty thousand lines of code they are not the thing is that most other this episode was made possible Hello, everyone. Welcome to the GOTO Book Club. improving systems and I like to talk about it, as a guest, Adam Tornhill. Adam, Thanks, Sven, and thanks for having me and a psychologist. I've been working in and I spent the past 5 years building a platform also the author of a couple of books and I like as a Crime Scene&quot; and &quot;Software Design X-rays.&quot; did it come that you studied computer science It might be. I started to work in the software I kind of noticed a pattern that succeeding with software disaster after another. At some point, I to write good code. And I kind of decided to seek has a lot to offer to us in our traditional the way we think, how we reason, how we solve Originally, I just signed up for one semester after that semester, I thought, &quot;Okay, let's dive ended up spending six years at the university an introduction to psychology. Basically, it and it was very fascinating. But I stopped after brought, to me at least, a improving systems. Before I read your used tools like Sonar. I don't think that Sonar problems with your code, but it makes it a Sonar analysis and it tells you you have 3 years, it's just not helpful. I have to invest important and also, even if I figure out what's That's how we worked in the past, but then I think it made it really easy to way of prioritization. You called the type a behavioral code analysis. Is that correct? about taking my psychology background and I do. I agree with you, to me, the whole idea It's something that works very well as a But static analysis, like you point out, has because there is no such thing as a business and that leads to having thousands of findings. development organization interact with that means looking at things like version control because then you can calculate the That gives you a window into all those quality and that this might be problematic long term So that's one of the things. The other thing once an organization grows beyond, I would say, factors like coordination between different knowledge distribution, all that kind of stuff any technical properties of the code. And static those aspects, right. That was pretty much why I decided to call it behavior of the organization rather than the code. about our customers. You know, a lot of code is Would that also be a part of an idea to prioritize I mean, it could definitely be an aspect. You power laws everywhere. You look at code and You look at your feature set and it's most likely subset of your features. So clearly Yes. For me it was easy to convince, code when I could say this is part of the 80 You wrote the book &quot;Your Code as a Crime Scene&quot; X-rays&quot;. What was the motivation and the new &quot;Your Code as a Crime Scene&quot; is a book I wrote in number of techniques that I had used myself in my for prioritizing technical debt to communicate found useful myself. I published this book and it I want these techniques to become mainstream, then shortly after publishing that book, I founded As part of those early years with CodeScene, I across the globe on using different technologies experience. Basically, in &quot;Software Design how well do these techniques work in practice, and even more important, how do you act upon them? So that was the main motivation. I liked a lot about the book, that it usually has but we can dive into that a bit later. part of your work is the hotspots A hotspot is complicated code that we also technical factors like code quality issues activity in that part of the code. That's came out of my experience of using static talked about it earlier, I simply lacked the faced these challenges of communicating with I try to explain that, &quot;Okay. We have the business a step back and improve what's already there so I found that those conversations were simply lacks visibility. There's no way I can it to my non-technical stakeholders. At the same also in the middle of my psychology studies and And that's where the hotspot I was inspired by a technique called geographical What you do is basically you look of different crime scenes in a city or in an probability surface that can kind of help you you know which area to patrol and supervise. just clicked. I thought, &quot;Wow. What if we can this large software system, project a probability of the code that are very likely to change in parts of the code?&quot; Then we can suddenly get and where code quality is most important. That You do that by combining static code analysis code that has a lot of commits and that's For me, it's so easy now to explain, let's say, because of technical debt. I know the metaphor debt but still, you can say where we have an pay back. And what is actually the interest rate? on code means I have to spend more time thinking because the code is not ideal for implementing code that is really bad and I have to change it to me, it really sticks to my mind. I am only one single person who is doing it rarely let's say, non-technical stakeholders all The short answer is that I have a good experience on the table and I'm happy about that. Because of organizations and occasionally, as a bonus, that non-technical stakeholders like it because It basically tells you that, &quot;No, you don't to fix this debt. That's really critical. But You need to be aware of it, of course, It's a positive message for them these long- and short-term priorities, like you for and at the same time, there is some I like to think that's the main contribution. If someone asks me when we have a software system The question is what brings the most value opportunity costs. And, you know, if I improve I think the hotspot analysis makes our not-to-do I like trends. If you have a negative trend It's also the other way around. How are you doing it with your tooling? truly actionable. I very often meet organizations legacy code migration or they have an existing to continue to be able to maintain it and you I always tell them that to manage technical debt, avoid taking on more debt. Simply put a quality doesn't get worse no matter where you start from. managers and technical leaders because I'm yet to get worse.&quot; You never hear that, right? It's reason I like trends is because they carry so For example, in CodeScene, we have this concept healthy code, that's easy to understand and code with severe maintenance issues. And let me code health of five. Is that good or bad? Well, if before, then it's disastrous because it degrades But on the other hand, if that hotspot had a dramatic improvement that needs to be celebrated. So, trends carry this information When I used CodeScene and I saw my first analysis, also have to say we have some screenshots on that change often. And that triggers me. All the red to-do list. But how do I see, let's say, parts worse but they don't show up red on CodeScene? are not horrible yet? Do you have those? Yes, you can. If I remember correctly, I had a X-rays&quot;. I think it's the last chapter where the trends as an early warning system. I It's so important that we spend a lot of effort things like total requests and build pipelines, so I think it's vitally important because one thing like so many others in the software industry, we they would add the pressure of the business But that's not what's happening in general. What's module with quality problems, low code health, very, very early on, often in the first version of that tends to be a self-amplifying loop because we kind of squeeze in more complexity and Using this kind of information you can actually this is the minimum level of quality or health early warning system which allows you For me that was a surprising insight less bad from the beginning. But you also it's bad, you fix it but then it's coming I think there are several reasons. It's shortly after writing &quot;Your Code as a Crime Scene&quot; I kind of figured out that, we found these really, look at the trends and you see that these hotspots I couldn't explain that. So why hasn't it been one of the reasons that I think is very common there are some code quality issues that tend If you look at a different behavioral code and you look at how fragmented the contribution purely human perspective, and you will most likely In a large organization, it might be written by 50 no, you don't have 50 people that know that because everyone has their small piece of long be gone. It might often be that we well enough in that code, we might not understand raises the hurdle of refactoring it. And ownership for us as a team. So that makes us much it. That's my hypothesis. What does it mean for an organization if I the problem is not well understood. What are code which is not going away? What can you do I like to think that the single most important so that everyone in the organization, where the problems are, how severe they are Because once you have that awareness, the next then it depends on what kind of issues you have. technique that looks at something System mastery is not a technical property. It's by the current team. Because I often see this as system mastery tend to influence how we perceive the complexity of unfamiliar code. And that means code is overly complicated. It's a mess.&quot; Whereas never had a chance to get onboarded properly If you have that situational awareness and know address it and put the right measure upon it. when you analyzed all sorts of systems, you rarely touched and then you have code which is like one or two or three people. And then you have also it's not immediately changed. It's changed on it. If we have a mental model on the code don't introduce parts. But if we rarely then we introduce new problems. That was Yes, I definitely think that it's a very common on a particular piece of code and if that code particularly good because what it basically means today, then look at it three days later it looks have been working on the code, so it's virtually And what's so fascinating about this is that of the code possibly lead to organizational when you have that kind of code that attracts many has good reasons to do so. It's typically a module of different responsibilities. So consequently, all end up in the same part of the code because that you simply cannot solve with a reorganization The proper solution there would actually be a improve the organizational fit. And this is So, what is a software design X-ray? at the function level. The reason I started after writing &quot;Your Code as a Crime I noticed that the hotspots that I tend to really, really large files. It occasionally, tens of thousands of lines of If you take that large system and you narrow this is your biggest problem.&quot; But if I go to 20,000 lines of code,&quot; they are not going to be takes that complex hotspot, parses it into git log. Where do each committed over time? We sum And that's what I've been using successfully as large, complex processes and modules. Yes, if you tell someone that 20,000 lines of code figured that out by ourselves.&quot; I think it's also the C4 architectural model and there you also have There, we start from a very abstract view Google Maps when you look at the map and then you lost in details. You can navigate quite nicely. What I was wondering you use very simple metrics. there are lots of metrics which tell me what is a class or a method or intention from lines. So, no based on some research. Why do you focus on very I like to think we evolved that a lot over the is that if you look at the research, you will see code is a horrible metric. It's really, really just as bad. And lines of code is intuitive, it's that's basically where I started out. We need lines of code. And it surprised me how far that One thing I learned after writing &quot;Your Code as well, it correlates with most other metrics. But a little bit deeper and provide some actionable need to do and stuff like that. What I've been different static analysis techniques into What we tried to do is to look more at the drive violations, you know, the stuff that So, these days I might still use the number of get situational awareness but when I dig deeper, I I hope that makes sense. I look at lines of code and let's say intention. If that's the correct word. But clone aware that this is also part of the hotspots. Adam. I think we have a couple of follow-up organizational problems you can detect. But for all the findings and prioritization work you did Thank you very much for having me. A pleasure,