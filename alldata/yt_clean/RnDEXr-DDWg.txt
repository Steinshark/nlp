Everyone. Today we talk about speed versus quality. What happens when you go too fast and And today's guest really guided as developer, and he's now my direct Albert Brand. Don't forget to like and subscribe and follow us on your favorite podcast Enjoy. Beyond Coding. Welcome to Beyond Coding A dive into from your sponsors. Isibaya Creating Digital Leaders. Here's your host, Patrick Akil. Hey, Albert. How's it going? Hi, Patrick. How's it going? It's going fine. We've been talking a lot, actually, already before this episode, Yeah. I invite you all to talk about speed and how we hopefully can get to a place even though it's kind of unheard of But let me kick off the topic and ask you, what's kind of the fastest you've gone Okay. Yeah, that's already Patrick, are you. You said we wanted to do another question. Okay. Yes. Yeah. So maybe. Maybe we first should start with And that question. So speed for Yeah. You're moving in a competitive markets to deliver new features to make your customers happy. Yeah. And yeah, that that's only possible. And when you are going faster that you can only do that when you go Yeah. So that's. Yeah. So yeah, looking at speed. Well one important part is that you just And when you do that, then, yeah, you need to Yeah. And if you don't know, then you just have and often you have to cut corners. Yeah. Cutting corners is sometimes essential. Yeah. Especially when there are so many. Yeah. It's cases that you have to think Sometimes it's just and just go with. Or I'm happy when it works in my the cases in my head or works But of course that introduces Yeah. The first thing is, of course, technical Yeah. Think of that. If you are going faster that you didn't have, You can do this. You can make the wrong assumptions So I like to starts I'd like to start with a proper data Yeah, the data model for me you know, So if the data model is wrong or of course every model is wrong But yeah, if the data model is wrong then that will lead to Yeah. Yeah. Down the line. Right to the home if you can go fast right now, And then what. Exactly the first. Way. Are you then really going fast or. Exactly. Yeah. Yeah. So like a market for Stop it. Yeah. Doing great laps Exactly. Yeah. Then you still lose Yeah. So it's not only important to go fast. Yeah, but, yeah, maybe. Maybe it's a good idea Of how fast you can go. Sure. And this is what I've. I've been a colleague of you Of course. Um, but this is before I went to the CBA, It's a previous company, something delivered in a couple of weeks. Yeah, normally this we did such projects in three Yeah. So it should have, they said simply said, well can, can we get this in three weeks. Yeah. Sounds unreasonable. Sounds very. Very fair and reasonable, Okay. They paid really good. Yeah, it's. It's the classical project management triangle. Yeah. Throw more money at it. Yeah. Yeah, You can get it to good So they, they said, okay, goods but we want it's fast and cheap Yeah. Yeah. Then they made this trade off or at least Yeah, they made a trade off. Um, and eventually we did it Okay. Instead of three. Yeah. They. They were okay with it. Okay. It's something like 66% of the time. Yeah. So it seemed right. So it seems. But yeah, we eventually learned that this was actually not there. This was not the end goal. Yeah, this was just a Well, get a feet on the ground. Yeah, at a bigger clients. Okay. So the bigger client chose them. Yeah. And they chose us again to to make it, a slap in the face. Right in the face. So that that was kind of a lessons Like, okay, Yeah, you really have to hold press or you will have to clearly explain that you're going to deliver something not the not that doesn't doesn't have a set of other qualities And yeah, of course, it's Yeah. Especially when you have a separate sales That simply over promises. Exactly. Yeah. Yeah, but that's, uh. Yeah, that was a, But, but the interesting thing is um, when you're doing development and you're doing development all day long, then you need to right Yeah. You need to write environments. So. Yeah. For me, that's personal. For me, Yeah. And that is definitely Yeah. A way for me to, to, to have some energy So if I would work all day long on the, uh, separate problem in a separate problem Yeah. And at the end of the day, Yeah, I get that. Yeah. Yeah. But if I have colleagues around me that something bothers me or there's that I want to investigate Yeah. Then. Then that gives me Then I'm doing the right thing. Yeah. Even though my colleagues don't know The right answer. Exactly. Yeah, They, they go for a kind of solution, it can be helpful Yeah. At the end. Uh, just talk to talk to the rubber duck to a person who acts like a rubber, things Don't. Don't be a rubber duck. Yeah. Yeah, I get that. I mean, if I think about it, some advice when I was looking to join There's going to be three things What you're doing somewhere and then the why why are you doing this? Could be a personal Right. That the that the company has as a mission Right. Because those are the people that you're going to sit with day to day I guess, normalize your ups and downs Right. You want high highs, but not as lows, as low of a low, Yeah. Yeah. So, yeah, if you're in a bigger setting with multiple teams, Yeah, but sometimes you got you were Yeah. Not physically, but mentally and, and yeah, there's, uh, also in the heads of other people get to are these through and to make sure Yeah. Yeah. So so going fast Yeah. Yeah. But but yeah the if you are if you can Yeah. And that is flow is, is maybe it's a a for everybody is different if I get a nice problem and it's but not quite entirely yet but I suppose Yeah. Then then for me, I this, I can really get things in flow. Yeah. Um, looking in the past, the past or almost past two years, um, I think that that is really, uh, uh, yeah. As has been, has become pretty tricky Yeah. Especially when you're, um, Yeah, I have three kids. Three young kids. Yeah. I'm really happy that I have them. And I wouldn't. This is this is okay, a bit with, um, but with. You know, working. With the work life and, um, yeah, sometimes it's really hard to go sometimes I don't follow the, the get into the flow I just write down and then do it whenever And that might seem unproductive, Exactly. But I do already do it, Yeah. Or at other days in the week. It's, it's more distributed. It's, it's a bit disputed. Yeah. And I think Yeah, that, that is very, to just have a notebook at hand somewhere whatever thoughts you have is to just draw a diagram or. Yeah. Or whatever you fancy something that works get the get it out of your head. Exactly. Yeah. That, that cleans up of, of, Right. Yeah. Just writing it down. Yeah. Just write it. Down. Yeah. I think that's, that's completely fine now Yeah. Moving back to kind of the, aspect, a lot of things when I went the fastest or at least I was in a team with colleagues I knew what I had with them, what they were less good at, We had a certain amount of autonomy and we had that kind of mindset and And it was a proof of concept where you can name It was an experiment, but we knew So that's a very important there. Your proof of concept all of a sudden and you probably didn't know that. Otherwise you would have made some, But for me it was to be So we could do the minimal quality and the fastest output. Yeah. For the thing that we were building. But didn't you have any discussions with the potential? Although I guess this is for a client Um, did you have any discussions or did have any discussions about, Right. You do all kinds of work. You build something, it works for them. Yeah. Okay. It's a proof of concept, Hey, you can click, click, and you can do And yeah. For us it was kind of a the tools Yeah. So it was on a tablet. People were really good. Just going to aggregate data for us It was really just Yeah, If it's fixed for a fixed goal, Yeah, that's and stuff. But I think it goes into a problem because as you mention it, a lot of organizations a certain amount of value And then even the corners And if you have a table without legs and all of a sudden they're like, it's going to it's Yeah. Or now Yeah, exactly. Yeah, yeah, yeah. I think that. Well maybe it's a classical example of that you, or it doesn't have the same word uh, people with the technical background Yeah, well, I see a proof of concept. Exactly. Is the theory that our proof of concept Exactly. So if you have proven that your concept But it feels like that. A proof of concept Yeah. That it has more value. Um, and that is, So should, um, to keep all code Is it done. When. Yeah. When is it done. When, when can you or. Or even when is it dead. Yeah. Yeah. When, when can you stop. Maintain it. Yeah. That's a of course So we, we try to implement software, That's of course How, how can you reuse software that software needs to be maintained. Yeah, but we don't often talk about Exactly. And can we, uh, shove it to its grave? Yeah. Um, and I think that we should actually have better discussions about that now at especially on a business level. Yeah. And of course yeah. That, that's again triggers about uh for instance rebuild versus evolutionary builds. Yeah. And we, we all saw that or uh, rebuild projects or the just implement but then with new features say, let's call this, let's call Oh yeah, Ouch. That, that yeah, it costs so much money. And in the end, is it worth it? That's a really important question. So often the people, the the person who makes money of it. Yeah. And it's a different, you know, It's on a management level Yeah. On the technical level, They'll just make it happen. Yeah. But sometimes whatever you have is fine. But sometimes It's not fun anymore. It's just not fine anymore. And there's no real good solution except for rebuilding it. Or. Yeah, just creating a real new version feature set that was Possible exactly that that happens a lot a company is like man what we have We have competitions, How can we catch up or by restarting? Yeah, but aspect of Because I think the more quality but if you're starting out greenfield the more it has I don't have any data on that, higher longevity maintain a stable speed, Yeah, longer down the line without having Yeah. Pretty important, right? Yeah. Hopefully. Yeah. Yeah. It reminds me of this American company. Yeah. Uh, it took a couple of years back Where they, uh. Well, where the one of the, uh, tech he showed that they had to skill So every year they had at least twice the amount of users And the and yeah that's, that's really amazing because it's So in the beginning it's like, okay, No sequel database for something Yeah but if you have to do have to have to scale up twice every year, then you have to do some really weird stuff to Yeah. And their stick was I'm not entirely they made some, Yeah. You know, some some not too low level I think they even maybe also use BHP at Yeah they, they just kept it but just false or false and false or and you get into such a amount of speeds It's Yeah. Because yeah, you have to scale up Rebuilding and then Oh yeah, just have to hope Yeah. So that's that, that's an incredible hard Yeah. But I think investment Yeah. Yeah. But maybe most companies, Yeah. Or. Or Facebook. Exactly. Yeah. And then it's a different story, Because you can if you just look at the performance that is okay, enough. Yeah. And maybe you can scale most of these problems are non existent Yeah. If we're looking back at that, that triangle for like money Yeah. It reminds me of a process but we had a lot of off the shelf Things that were already battle tested, Like we could take it off the shelf, and all of a sudden with a lot of content Right? Yeah. And the goal was to scale which we could do because we could just Yeah, basically, I think companies forget that and for some reason we were building Yeah. Yeah. Yeah. Everywhere. Absolutely. Yeah. And especially when you look at an evolutionary aspect. Yeah. Then not invented here Yeah. Because if a company has a certain way of working and all the developers already have tools then it's really hard to say, Yeah, exactly. Throw the mouse. But yeah, definitely. It's all about making hard choices. So yeah, but also, yeah, it could be that you are in a domain where Yeah. Um, but yeah, was some kind of a built that bill to, you know, either on in the pipeline Yeah. Yeah. Those, those things are, Please don't do this again. Exactly. Yeah, but yeah, uh, of course Yeah. Together in the tool then then probably. Yeah. It's hard to find exactly to do that. That does a Yeah. But then maybe you have to say Just go with feature X and Y. Yeah. Or it should be kind of part Yeah. As a goal to solve that and not do X, Y five different applications Yeah. Yeah, that's a good one. Yeah. I was triggered by what you said Um, that you did. You had your friends around you. Yeah. Our friends at school that you could almost always call friends like that. Yeah, I think that that is in how a team works. Yeah. The, uh, you can actually go really fast if you are Absolutely. Um, if you have trust but also trust from outside. Yeah. So if the team is trusted with that, trust each other like that. There's nobody who does tricks Yeah, that, that's great. And that is absolutely a really important factor in going going. FOSTER Yeah. Um, yeah, by no means. I'm, uh, I'm, uh, promoting the, Yeah, that people go over the processes. The processes should be there. Yeah. They should be facilitating that. People can work better together. Exactly. Yeah. Yeah. And I think that most companies as a sort of reflex, when something goes wrong, Oh yeah. So to just make sure Exactly. But. But isn't it all about trust? Yeah. So, um, the the team. So let's say that you see that a team is very nonchalant about the, about a very critical business. Uh, business problem. Yeah. Yeah. Then. Then you lose trust. Yeah. So it might be a risk. Yeah, yeah, yeah. So, so from a business perspective, Yeah, the same perception of the risk how fast or how well treat, how good Yeah. Then yeah. Then that's an issue. Exactly. And yeah. So there are many ways of, of losing trust but also many ways of gaining trust Yeah. But in the end you should also Right. So it's not like you say as a business all my wild ideas about I should do this, The team comes by and says, Oh no, now we, Exactly. If only then So there, there should be a life Uh, sorry, between the at the risks and the resources and, Yeah. And that should all be. Yes. Be thought about and that will be Yeah. It's not only technical. Yeah. Yeah. Um. We're always dealing with people At the end of the day, I think trust. Trust is such a hard issue Because in some environment it's there is probably preceding it or even preceding Yeah, right. And then you have the trust like the people that you probably talk And then even kind of the organizational the point of view Yeah. And if you've performed well, but if you've performed poorly right maybe you didn't get enough awareness That it was a mission critical system and that you should have If that awareness is not there, people are not going to take Um, it's, it's a hard thing to know. Yeah. Yes. Yeah. That reminds me of this Google research. Google did internal research Yeah. And they also tried to find or one of the key factors are multiple key Yeah. And why some teams succeed in their Yeah. And well one of the well of course it's a it's it's a correlation so it's not that when you have trust then then your Well yeah but there's definitely a correlation Well Yeah. Or at least within Google then Yeah. So yeah, it's, uh, definitely But there are so many factors Yeah. Sometimes It's, um. Yeah. Are we still creating software here We're trying to. Yeah. Yeah, there are some other. There's a Chief Happiness officer, right? Oh, yeah. Somebody who, tries Yeah. Isn't that just sort of a, uh, a symptom of Siebel? Yeah. Look, just looking at the symptoms to to do something about the symptom, but not looking at the actual cause of of, Yeah. So, yeah, I, I guess, officers Exactly. Yeah. But also yes, sometimes oh yeah, let's just do some fun trip some some party then and then the rights There's a problem. There. Yeah. Trust issue there that, that is not solved Yeah. So you definitely do you have to talk to Yeah. Figure it out. Basis. Yeah. Yeah. So yeah I think it's. Easier when you're, when you're part of Oh your feel those pain points. Yeah. But I think, I think it's a good thing Maybe the phrasing already Um, but I do think are more productive. Yeah, I think that's true. I, because I've experienced that when you have those colleagues you are more productive I guess your output is more, even if it's just a mental thing, or as a person, right? Yeah. And then I think it goes back I hope so. Yeah. Yeah, exactly. Yeah. Um, uh, there has been some research by, uh, Nicole Faustman and others. Uh, they, they looked at, um, at GitHub. Yeah. Um, on, on what are the defining factors Yeah, that's of course, a very important, And of course that they, they, they too, uh, came to the conclusion that it's not one, So there's a lot of the you know, make sure that it's there. Yeah. Or that it works. So there's, so the, the, the paper, So it's really important Yeah. Uh, well, for instance, so from the top of my head is that, uh, the productivity or at least it's not correlated Yeah. So yeah, because. I can to you kind of doing other things If you're constantly trying to extinguish Yeah. Because production there there's, there's so much happening that is keeping you from Yeah. Or there's so much tech depth Yeah. No by Yeah. So yeah, it's a, it's a great paper Yeah. And I think that there are many examples of these kind of frameworks Where it they try every time they try to point out that it's not, So exactly. For instance, Oh you hate it. Yeah I hate it. And marketing thing that's why. Yeah. Yeah. It's absolutely good marketing So there's not Yeah. Um, which actually has been debunked multiple times also by our, our, our colleague Ellen. Yeah. Um, did she ever go to the on the podcast. Yeah. Yeah. But we didn't talk about that. Okay. You can't talk to her about it. Yeah. Um, but yeah, so the, the ten time developer comes just from the simple fact Outliers? When you measure, there are, And then if you just say and looking at the outliers, So there should be. There is. There's just as a person, yeah, there's a person Yeah. And it's not the truth, right. Yeah, it's this is just one measurement. And, um, yeah, it's, it all boils down um, some kind of experience level Yeah, it's much better to have a full, complete idea Yeah. Then, uh, that you can go really fast. Exactly. Exactly. Yeah. I mean, it's about, I guess you look at Yeah. But it does have to do with kind Yeah. And if I can make other people I can make other people more impactful or even more happy than I am acting Yeah, right. And I don't know if that's a10x to have that. It can even be the They can be kind of a multiplier which hopefully in turn Yeah. Yeah. But the original ten time capable of doing much more story points they measured. Yeah. And that's a fair. Exactly. Yeah. Because yeah. Some people are doing certain things over and over again, And yeah, I had this is, yeah. This is not about some generic problem Exactly. Really weird space Yeah. Measure something. So I mean. Yeah, a computer might even win if it's such a simple problem. Yeah. Then we can probably generate So I think that the ten time automated everything he did as he Yeah. Okay. So that you would have an infinite Exactly. Yeah, that's. So moving back to kind of speed versus quality, um, wrong in a lot of organizations and in the end have to redo kind of the whole thing Yeah, but just by And even then Is there a thing, as is too much quality? Uh, well, first first things first. Yeah. The too much quality is definitely that. I Yeah, that's. I have a opinion about. Yeah. Um, but when does it go wrong? Yeah. Uh, yeah, well, it's easy because it's easy to see that or it's are when going fast for a moment Right. Yeah, it's. And especially when you do a more If you just have projects, then you have a fixed deadline. Yeah. And you should be able to deliver Yeah, you have some hiccups in the, at the start of the project There are all kinds of reasons And at the end, if the project's goals are not reached, Yeah, maybe even you don't get the money So yeah, there are all kinds of bets influences better. There's there's always pressure there. Um, but yeah I think that, yeah, focusing Yeah. Um, maybe, uh, the it's an interesting analogy. Um, and so we have a, we, well, maybe before the pandemic we have a lot that we have a big issue So lots of lots, of course lots of people want to go to work. Lots of people live far away from the work, Yeah, we have traffic congestion Yeah. Now we saw that during the pandemic or at least that the start the pandemic, Yeah, for a while. And this actually well there's a, to do this again, the model which, which states that had the the amount of traffic will always be in line You know, this makes sense, right? Because at some point people will say, go by car, or that this is too far, to where I wherever I work. So there is there some break even point Um, and maybe the break Been reached being. But we do have Yeah. Um, and so the model also predicts that you can't solve this by adding more roads. Yeah. Because adding more roads It's solved. It solved. So then because people notice people will think, take those roads, they will Yeah. Thus filling those roads. Yeah. And maybe it's the same with, with, Right. Um, so you could say that then let's say Say yeah. To spend some time So you have some ideas about okay, we definitely need to do something like test, We need to invest some time in, in, have continuous deployments even. Yeah. Um, maybe do a trunk based development to make our, to skip all those features But the thing is is then consumed by all the other things. Yeah. So if you, if you, And you say I want to have this. Yeah. Then automatically all the time of your project And if you want to push the quality automatically. So if you raise the bar then automatically So it's, it's really, uh, yeah. A, it's a skill, Yeah. So you really have to so you can't go with that. So I'm a consultants. I sometimes on a project, it's easy for me outsider, you have to focus more on, on the quality because that's pretty important But of course, yeah, by saying that then the time that was spent on Yeah. So you don't know. It's really you can't have it both ways. You can't, you can't have it both ways. Again, it's the pyramids just that areas and you can, you can't move, Yeah. There's, there's no other way. So yeah, it's, it's really a um Black and white kind of. Thing is. Yeah. Yeah. It's, it's too simple. It's, it has been proved that it's too simple, but, but, So it's a it's a real some and with most of these quality factors. So I've seen developers that say yeah, but are now going to go uh, build another. So they have ten units for a class but I'm not finished yet because I have a lot of other use cases Yeah, and at some point they have 60 or 70 units Okay. Which is good. And maybe it's really important. Plus. Yeah, it. Depends. It depends. But again, you often only know when it's Yeah. So maybe. Yeah. Spending so much time To, to get for instance because you could have better maybe on some other tests. Maybe maybe an overarching and twenties. Yeah. Or maybe on some other quality factor this, this gloss is part of an application Yeah. So we have to scale it So let's put time and effort in on, on those damn units. Yeah. And those numbers it's a good thing I think you me both. Agree I totally. Like that, that, that number. Right. Even we laid it out before it's the data Is that the thing A Probably not because there's a lot of things Yeah. Time is not infinite. Yeah. And therefore we should spend it Yeah. Yeah. It's and also all one item. Okay, we can, we can spend the rest Yeah. Yeah. I thought of course but on a percent you About what's being. Tested. Yeah. What, what I suggested it does say but at least about the code parts. Yeah. So is France is a good way. I would almost say for a less I think better about the code That's some points you will get that it's that you can just focus on building all the With you. With you in your while writing the code. Yeah. And of course Yeah. Then it still does something like this Yeah. And I think it's really a great way But some decision development definitely asks a lot about you um, and is sometimes Yeah. So yeah. If it's not possible then you what Exactly. Yeah. Don't use it because. You want to use it but use it when it's most effective. Yeah. Yeah. So yeah, about those units, I would rather see a couple Yeah. That are not covering every, then some all crazy 100% agree. Yeah and of course unit that's our code Oh yeah. That's a good point. Yeah. So yeah, the unit is. Yes. Especially when it's doesn't add any confirmation about any of the qualities you might as well just throw the way after it was actually a proof Hey that's the proof of concept. I love it. Yeah. Okay. Yeah. Now the, the, um, So it's a false dichotomy. It's just that I practice this person dichotomy. Dichotomy that got a guy that. Yeah, I got him that got because speed, mate. So isn't speed or something like velocity. Yeah. Let's, let's put it behind it. Yeah. Isn't that just another quality. So you just should, like one of the qualities of your project and the same goes for how much costs Isn't that a quality as well. Yeah. So paying attention to how much something costs or paying attention to how much mental mental problems something can cause for a while, Right. That that's also very important. Yeah. Um, and, and of course everybody will say yeah, yeah, I agree. The developers should be pushed too hard. But there are so many organizations Oh, we're in a time crunch, so. Oh, yes, let's say that from now on, or yeah, we're no work Yeah. Or even Yeah. Yeah. Luckily there's research Yeah. Yeah. It only only relates builds projects. Right. Exactly. It's I it's a very good analogy because it probably opens up a new road and then you're stuck with another person Yeah yeah. Especially because again the new person. Yeah, they need to be, Yeah. If it's somebody who is not familiar that's an entirely Yeah, but maybe if you've grab some team then the he But there's still there's so many Yeah. So many code Yeah. Um, so many. Yeah. Pieces of missing documentation that you have to work through to, uh, Yeah. Yeah. You're, So you have to ask other people in order. People are busy as well, Yeah. Same problem. Yeah. Yeah. But when, when would you say Kind of as a last question because you and then at some point you're like, Man, and they have that quality built They have good amount of coverage, Yeah, but at least they're having it and all kind of the crucial parts aiming for. How do you see that there's a sweet spot there It's a again, the normal the normal consultant, Right. So yes, it depends. Yeah. Um, I'm not sure if there's a sweet spot. I think even it can move. Yeah. While, while you do your things. But, um, but most of the time as a consultant, I have some experience or knowledge or they have some issue maybe the speed is all right, Yeah. So then you have to upgrade both, right? Or at least focus on on the other parts. Well, well, maintaining the same speed by focusing on the quality Yeah. I think. Increased speed. Yeah. Yeah. Increase But that's really hard to solve. Right. So yeah. And that's not as attractive. It's a Yeah, yeah. It might be interesting to say I'm going to predict Yeah. At the end. But let's, I'll do that yeah, there, there can be so much reasons Yeah. But I really like that answer as kind of a skill right on quality And you need to keep that in balance, As soon as you see you should focus on the other one And obviously more quality if you do it the right way. Basically. And don't a green no. Yeah. Yes the yeah the again it's it's it's the it's the it's the money that that Yeah. So as a consultants you don't expect me to do something that's someone that that can be hired Can do as well. So I have to do something Yeah. Effective and impactful. Yeah. Effective, impactful. Um, and well that's, yeah. Sometimes it doesn't end up the way Yeah. So there are some projects that I hoped to deliver more for, but in the end it's the company itself that is difficult to where it's difficult Yeah. Or they have some kind of and it's really hard Um, and yeah, that's something, that is, and even when telling if we can do this, Yeah, we will be faster. But if the company every time says it's yearly planning. Yes, it's already set, everybody will work and then they will work overtime It will fit in. This, in this planning. Yeah. Yeah. That's a pretty bad. Yeah, exactly. Yeah. There's, Yeah. Then you have to be involved a piece, a piece of trust. Right. Yeah. But then it's a trust of a higher What's the team's on, on, on how Yeah. It's a, it's a difficult puzzle At the end and we're all just humans Yeah. The best we can I guess. Yeah. But thank you for coming on. But I laughed a lot Yeah, I was great to be here. Yeah. And next time Exactly. Oh, the things we didn't talk about. All the things that we didn't talk about. I have so many review research papers Exactly. Yeah. Yeah. Cool. I love it, man. Yeah. Thanks again. Albert Brand everyone. Oh, and beyond coding from your sponsors,