In this tutorial we're going to learn professional level of git. and the feature branch workflow. know the basics of git and github. this tutorial, are optional. You just need to know the and github to follow along with part So here's a situation that will come up team, you're working alone. feature and this is a pretty big feature you decide to split up your feature into So you write some code, then you create a version history code, then you create another commit, and they say: hey, we actually have a bug this bug. So what do you do? and then put it in your version history, the two commits that you made that are really sure if they work, git has a solution for us, which is So in branching we're going to create that will branch off a master, so think master is sort of the trunk and then you out of the trunk. And the great thing is that if you have a bug fix, you can on your main branch and you can continue on your feature that you're working on So that's how git solves this problem of at the same time. For this part of the tutorial we're going to create a new git repository, and practice with, just so that it's easier Let's go into our computer, and we're going to contain all of our code. tutorial want. code editor, file, open. I'm going to find this folder on my We're going to create a version history pause the video if you want to try that otherwise we're going to do it together. and remember that the command line has contains our code, change directory slash git tutorial 3 that it's going to start tracking all of git init As a reminder there is a cheat sheet of this tutorial while you're watching, and you can find below. And now we're going to add some history. simple, we're going to create a new file to call this And to create a new version in our do picks which changes we want in our version, represents So and let's just say this is version 1. three versions in our version history. again, git add dot git commit And then finally version three version three. Okay, git log And you can see that we have a version or three commits of our code. Now let's earlier, which is, feature, and this is a pretty big feature way. to add a bug fix problem is to use a feature of git You can think of branching as you're history, instead of before. And the advantage of this you want to the copy while you're before your feature is done, and while can add history. you put the bug fixes new feature in the way. commands. So the first thing we need to remember a branch is sort of like history that you can work on command for creating a branch and then we're going to give this branch branch based on what you're working on. social login, so you would name your social login. But for our example, let's we're just going to call this branch And now to check our work, we're going to dash dash all dash dash graph to see our history. have two branches over here. be called the main branch. and now we sort of have a copy is called the feature one want to put our new branch instead of our main usually used website. So you generally don't want to onto your main branch, so how do we to working on the feature one branch. The branch and then the branch that we want to feature one. Now let's run git log dash dash all dash dash to check our work. If we look at our this word HEAD, basically tells us that we are currently on the feature one branch, any commits the feature one branch. master, and we were working on master And then we used git checkout to switch So now let's go ahead and add the code We're going to make this really simple, called feature, commit for our feature. So our feature is into several commits. line, and create a new commit Let's call this feature commit git log dash dash all dash dash graph, and now you can see that we have our but now we're working on our feature one So this essentially separates our new from our original version history. Now to create another commit for our feature yourself for practice, otherwise we're Let's go back in here, I'm going to I'm going to create the commit now so add dot, git commit dash and now let's check our work again with graph. Now you can see that additional commits. So this is how we original code. us, and they say that they need a bug fix fix is a relatively simple fix, we're going to test the fix, And then master is going to go up to our and it's going to fix the bug. So how do Well the first thing you have to realize on feature one, so remember the head and right now it's pointing to feature to master, and then start adding commits So how do we switch back to our master So let's quit out of this view by And the command for switching branches, git checkout and the branch name. So switch back to our master branch, and dash dash all dash dash graph to see that it So now you can see that head is now and you can also see that our code has new file that we created Now let's create our bug fix. we're going to create a new file, let's just pretend this is our bug fix. master branch. and because we are working on the master Let's press q if you need to. git m bug fix. check our work with git Now you can see that there's actually a history, contains our new feature code, and we branch. it allows us to work on multiple things whether that is a feature and a bug fix, two features at the same time, or even at the same time. So that is an branching You can see that we're using branching time, Here, we eventually want to let's say that we're working on a in a separate branch just like this. We in this separate branch forever right? we put this feature, as well as a bug fix, So how do we do that? Well git provides all of these separate branches. And this merging. So don't worry, merging is I'm gonna give you a pop quiz here to Let's say that we have two branches. On this content, new file with this content. together, and I want you to result of this merge. need to think for a bit, otherwise I'm For this question is actually pretty is that we're going to have both of question. let's say that we have the file, changed another line of the file. merge? Feel free to pause the video if The answer to this question is also that change from branch 1, branch 2. So this file is going to both the changes, from both the branches. of the merge. So as you can see merging intuitive to understand you're just from one branch, and changes from another and you're just combining the changes is. So basically in git, we're gonna do but git automates this for us so instead us going through each file of the code and combining all of the changes, git is for us. It's actually pretty intuitive back into our code, working on we're going to finish up this commit. right now we're working on the master let's go back to working on our feature We're going to press q to quit if you checkout feature 1 to switch and let's run git log dash dash all dash dash to check our work. And now we're working let's finish up this feature. really simple, let's say that we're going create commit 3 and this is the end of feature done. And now let's run log dash dash all dash dash just to see what's going on. So now you we have finished our feature, and our fix, all of them together. branch, one question you might have Does it go on top of the feature one massive branch? the answer to this question together, that you're currently working on. the feature one branch, we merge result of that feature one. The next question we have is Should the merge result should it go on top of the that on either branch, so git doesn't really but generally within a company if you're they like to use the main branch or the as sort of a final copy of the code website. changes, we want to merge all of our back into the master branch. This is sort So let's learn how we can merge back to master. So the way to do this is press q to quit, we are going to first to the master branch, and we're going to into master. Let's take a look at how we Let's switch to master first by using remember your branch can be called main, work Now we're on the master branch. Now we into our master branch, and to do that we this command, git merge merge works is that you're going to give and it's going to merge that branch into So right now head is on master so we're and this is going to merge feature 1 and then it's going to put a new commit with the merged result. So remember the taking all the changes another branch and you're just combining There's not really much magic going on, for us. So one other thing that I forgot when we merge these two branches in a commit, so that commit has to have a and it's a little easier for us to write So we're going to do dash m and we're So usually you don't really need the merge feature one, but this might require about using in your command line. that knowledge so we're just gonna do it here. So let's just give a very simple which is merge feature one run this merge. git log again so graph and now we can clearly see that new branch we created has been merged master branch contains as well as the feature that we were in this branch. So we essentially and now the final copy of our code has new feature, and our bug fix. So we multiple things at the same time our work back together Now we're going to learn about merge what the result actually also pretty straightforward to I'm going to give you another pop quiz Let's say that we have two branches branches together. changed branch we have the same file changed, what is the result don't know. we should take the change from branch or if we should take the change from combined result of the merge result changes, but the problem here is that one thing, do one thing, does two things, None of the authors wanted to do pick between branch one answer is, and neither is. It's when git togethe,r and it just doesn't know asks us a look at a merge conflict in practice. with, we're going to create we're going to change the same file do that in git branch. So remember git branch creates a branch now let's check git log. and conflict. branch, and let's change one of our files. Let's and we're going to change this to one, just to keep it simple. And now we're going to save this change going to create a commit conflict 1, and or check our work with our new conflict branch has our commit, branch and change the same file git checkout master and now we're back on the master branch. to the master branch, conflict add another commit so we're going to we're going to save this change into our on the master branch conflict two. And now finally let's check our work one log dash dash all dash dash graph. branching going on. line of code, the same line of code. branches together, it's not really clear change from which branch we should take. git merge we're essentially taking another into our current branch. So right now our and you can tell that by the HEAD and conflict result on master. And let's just give a commit message conflict and press enter to run that. us that we have we did in the exercise before. of code we should take, which line of code we should take, now if we go back into our code, stuff here, so what does this mean? these are the lines that I'm confused So this is the version on the log, master so this is saying that that we have. other branch that we had saying got to tell me which line that here are the two lines of code that and you as a developer have to decide And to tell git what we want the final have the final code, and then delete want the final code to be everything else, so we're going to delete and that's going to be our final code. let's say that instead of actually want this line code. We just have to leave this line in and delete everything else. So that's pretty simple we just have to And one interesting thing about this is You actually don't need to pick one of actually just delete everything, and And git doesn't really care, it just what the final line of code should be. So doesn't care, it'll just take whatever I and put it in the version history. So for and we're just going to go back to what one of these branches to be our final this branch to be our final code. We just everything else, and keep that line. So just to summarize, to resolve a final code should be, we can finish the merge by going back and to finish the merge, we just have to git add dot merge conflict resolved, and now if we run git log to check our so now you can see that we have into master, even though there was a So to summarize, a merge conflict is when and it just tells us hey I don't know here's the change from branch one here's now you as a developer, you have to tell So we go in, we tell git what the final and then we create a commit to finish you merge and that's how you resolve The last skill we're going to learn is So this is going to take everything that going to combine it all together use git we're going to be at that professional which means we're going to be good professional engineer reference, feature branches. branch is something that we call that we follow when we're using git what this process is, get started. steps in the feature branch workflow, follow these steps by doing a hands-on about feature branches already. said that branches at the same time. create a branch for that feature first, that feature this new branch the name of the workflow from. haven't solved here, and that problem is working on a new feature, website, you need another software It's helpful for them to spot maybe or if there are any bugs in your code. So git and github to do code reviews? part of the feature branch workflow, So we already learned the first part of a branch for our feature. We call this And the next thing we're going to do is to github. Remember that github is our it not only contains a copy of our code a copy of our version history. This means upload part of our version history on to github. So after uploading our branch our remote repository is going to look It's going to have our master branch, and contains our feature. github is that now see our code, reviews. So once our branch is on github, us to do code reviews. branch if we need to, merge our feature branch our real website. that we merged two branches on our the branches manage our merges. example of the feature branch workflow. step. So let's pretend that we're making we're going to keep this really simple, called new feature. And remember that we want So the first thing that we're going to is we're going to create our feature create a branch here using git branch new feature, and let's run git log dash dash all to check that it worked. So now we have and a new feature branch, but notice that So instead, we want to be working on our To do that remember we can do git and the branch that we want to switch to. And now we can see that we are now So the last thing we have to do is to to the feature branch, so git add dot, new feature. Now to push this branch up to github, let's go into our github account. We're going to create a new repository So we're going to go in here and we're and we're going to click new. And now to I'm going to give it the same name as so I'm going to call this git tutorial I'll keep it as public and I'll click Now remember to upload to a github a link to our github repository. So we in our local repository. So let's take of our github repository and add a link So to do that we can use git remote add remote repository, common name that people use. github repository. we want to do is we actually want to at work, default branch, but because computer, branch here. we're going to switch to our master github our new feature branch and upload our just so that it's consistent, with what real company. going to git the git command to push this to github to origin which is this github and we're going to push the branch, which And now if we go back to github and we you'll see that we now have our git the master branch. is this is actually part of the feature is we're going to upload our feature So to do that we're going to do git new feature, we're gonna switch to that and then we're going to upload it. So git new feature. We're gonna push going to push our new feature branch. And now if we go back to github and we In this drop down you can see that we and a new feature branch you might also saying that it's giving you an option to a pull request right now. That's exactly to initiate a code review, but sometimes going to create a pull request you can either or we can go into this pull request tab request. So pull request branch, initiates a code review. So it lets changed, and it lets them add comments mistakes in your code. So we're going to like. and we're essentially going to be our new feature branch into master. So as merging except we're doing this on So you have to make sure that we have do that means that we're taking branch master. So that's what we want of our code once we have this set, and we can write a description I'll just give, I'll just give a pretty This is a new feature. And finally we can click create pull and that initiates a code review. So what to your teammates, and then they're gonna they can go to this file changed tab and all the changes that you made. If they they can say um and essentially they can start what they want to fix, or something that And now if you go back to our comments we resolved all of these comments, into learned when we learned merging earlier, And to do that all we have to do is confirm merge, and that's it. Because we've done a bunch of stuff on github, changes back to our local repository. is git repository, github. from our remote repository And now let's check our git log And this is a little bit hard to read so step. computer, we have branch. that we did to github new feature. So this is the result onto github. And you can also see contains also the result master update our local master branch up to all we have to do is first switch to git checkout master, and now to pull changes from github git pull. Actually we have to give pull from, as well as the branch. from origin, so we're going to pull the and press enter. And now we run git You can see that our local master branch with what is on github. So that is the As you can see it's basically just a that you follow when you're using git companies single code base. branch workflow, this means that we are because the majority of companies use in their projects. So we're going to look at an overview of So there are two engineers and they're So engineer one is going to create a and engineer two creates a feature Now in these branches let's say that and the same line, so this is going to So engineer one uploads their branch to engineer two also uploads their branch now engineer one is going to create the as we explained in the feature branch That's going to get reviewed and then into master. There's not going to be a master doesn't have any new changes so But now when engineer 2 tries to merge into master there's going to be a merge that changes the same file and the same and that's going to result in a conflict. occur in the feature branch workflow, hands-on example. situation, branch and we're going to create branch, and they're going to change the on the same line to create a merge so right now. We're already working on so what we're going to do is we're going so let's start with feature one. Actually feature one already exists so that branch, feature one, and we're going to recreate So essentially when we create a branch wherever HEAD is. So right now HEAD is at we're going to create a new branch right So git checkout, we're going to run dash dash all dash dash graph, you can see that feature one branch. to change the same file in the same line. of the files, change this to commit this change onto the feature one So remember right now we're working on to feature one, so git and now let's add a commit. Now the second part of our scenario is another branch that changes the same so let's create that right now. So again feature one. We actually want to start a switch to master first, So let's git check out master to run git feature branch. to our second feature branch, and we have to change the same file and So let's take this file which is the branch, and we're going to save that change in a Now let's run git log all that we have have a feature one branch and a feature branch branching out and they change the same file in the same line. going to upload both of these merge conflict. we can upload that to github so and we're gonna push the feature two Okay, once that's done let's go into So let's click this link to our and if we click this drop down here, we uploaded our feature two branch. one branch so we first have to and then we're going to our feature one branch to origin, which All right so let's refresh, and now you can see that we have both of on github, we're ready to create pull and merge both of these. So let's start I'm going to go to the pull request tab request. This is master, and so we want to merge feature 1 And now we're going to click create pull create pull request. And let's also create another pull request So that this is something that one pull request and you're working on a and another engineer creates another and then the resulting merging creates a So let's actually create another for feature two so in this pull request from the feature two branch into master. Great okay so now we have into master, there are pull requests that people are reviewing their code, and finishes code review first. So they merge into master first, we're going to click And now if we go back to the pull you'll notice that we now have a merge So the reason we have a merge conflict in our github repository, our master now has a new change, and our feature 2 also has a change, and these two changes the same file and the same line. git is line to pick. One of the trickier the merge conflict is on github, so you which essentially does the same thing as in our local repository that we learned merge conflicts. So once we decided what let's say that we want this to be the we're going to delete everything else and we're going to click mark as resolved commit merge. So that will resolve the merge conflict merge this feature 2 branch into master. We just learned how to resolve merge but notice how we use github's web Sometimes we actually want to resolve because we can run the app have more tools to help us we're going to do merge conflicts we're going to bring them to our and we're going to resolve them on our git history in order to practice this We're going to set up the same scenario check out master and then run git pull latest updates branches that modify the same file create a merge conflict, these branches to github. feature 1 and feature 2 like previously, 4. So I'll let you do that as an you're ready. I basically created the same scenario we're gonna call the branches feature First we're going to merge in feature conflict open the feature four pull request, conflict. computer without using this previous pull request, conflict, we have to merge just have to merge do it the command line, to update my master branch master, from github, And now I'm going to git checkout as a reminder we're going to merge into our feature branch. So remember that git merge, we're essentially taking into our current branch. So first we're and we're gonna merge master into this So now we're going to git merge master same scenario that we had before conflicts. So let's go into our code that lines you want, HEAD which is feature four and here's from the master branch, which is feature this line, we can take this line, or we or we can write something just wants us to tell it what the final So let's say that the final code So let's delete everything else we're going to add it, and we're going to everything in the end. So let's go back the changes that we made, or the to the merge conflict. and now we just merge master into future So we resolve the merge conflict, we have back up to github, so we're going to push We go back into github see that we just resolved message of conflict resolved, the master branch that is how feature branch workflow and how you do that end of this tutorial, to a professional level of git I did leave out some skills such as git I actually did record them but I didn't explaining them. you just a foundational overview tools to leave that up to you lot easier to learn Thank you so much for watching my name I want to make a tech career possible comments please leave them down in the as always you can contact me at super feedback I'll see you in the next one