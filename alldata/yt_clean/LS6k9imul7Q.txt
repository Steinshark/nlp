Hey everyone, welcome back to my DevWebApp channel. Today I'm going to build a crypto prices app with React. The app is quite simple and beginner friendly. I'll make an API call and display the retrieved data in the table. Let's take a look at the design. As you can see, I have a header and a table with cryptocurrency prices. And the table has columns rank, name, symbol, price in USD and change for the 24 hours. And for the implementation I'll use CoinCap API and We'll use this endpoint. Let's go to the code and build application. I launched my Visual Studio Code and opened a folder where I store my React projects and now I'm going to run terminal and run command npm create vite@latest and provide project name and I will provide crypto prices. and select React and JavaScript. Now I can navigate to my folder and install dependencies. And also for the project I'm going to use Axios, so I'm going to add this dependency to my project. Ok, my Vite dependencies were installed and now I can install Axios and open my project, source files and open app.jsx and now I can run dev server npm run dev and open my project in browser and hide this panel. And now I can remove all this auto-generated code and provide h2 tag like crypto prices. And also can remove all imports. And let's clean up styles. I'll remove some styles from my index CSS for links and buttons also here. And also I'm going to remove all styles except root element from app.css. OK, and let's check. And we have our h2 tag here. And let's add component. And I'm going to create folder components. And add my component, cryptoPrice.jsx. OK, and also I'll need css file as well. I'll add it as well. And let's change title and provide crypto prices. OK, and now let's build a component. And I'm going to create functional component, function crypto prices. And return some jsx. I'm going to provide div. It will be the container. And let me copy h2 tag. OK. And now we can export. And we can close CSS files. and also index.html. And now we can provide our component here. CryptoPrices. And as you can see, import was added, and let's check. And we have the same crypto tag. And let's build our component further. Now I'm going to use hook useEffect and provide function that will call API and I'll call this hook only initially after component mounted I'm going to retrieve and update my prices. And also I need state variable, and I'll create it with hook use state. And here I'll save the response of crypto prices from API. I'll make const assign, and let's name cryptos. And also function to modify will be setCryptos. And initially I'm going to provide empty array. And now we can implement our function and I'm going to use axios. I need import. We'll import Axios. Okay, and Axios as GET method. And we need to provide URL, and I'll use only URL. And let's go to our API documentation, and I'll use this endpoint. I can copy it. and will pass into my axios and actually we need to implement function const fetchData and make it async to use await inside the body and I need to return. Okay and and wait for result And assign to my Axios get and actually we can remove this get because Axios by default will call get result to console. and provide result and now we need to call our function inside useEffect hook and let's check what I have so far. I'm going to open developer tools and refresh my page and as you can see I have data and inside data of data, and we need to provide HTTPS because it returned me incorrect data. Let's check again. OK, and now I have my data, and inside data I have data, and inside data I have array of objects. and each object is a currency and contains some data like rank, symbol, price in USD, and other data. OK, and we'll use this array of objects in our application to build the table. OK, and now we can save my data into state variable. And it will be inside result data and data as we saw. And also I can add try catch. And let's add try here. And if we have some error, I'll catch this error and make console error and provide error. Uh You can show message to user if error you will need one more state variable and then check it inside code, but I'll not to do it now. And now I can build my JSX. And let's create a table. And inside the table, I'll have head. And inside head, I'm going to create table row and inside table row I'll add table header and provide rank. Ok, now I can add more headers and provide name and also I'll have symbol and also will have price in USD. And also will have change for 24 hours. Okay, we have head. And, let's check. And we have head. And I'm going to open network tab, refresh the page, and as you can see, we have the same data here. And I can check uh what we have. And we have rank. Let me add the row. And we need table body. And inside body, I'm going to map over my array. We have a result in our cryptos. And it's an array of objects. And I can use map array map function to iterate through array and for each crypto element. I'll provide JSX. And JSX will contain table row. And data inside tag and I'll provide crypto. Let's check and we have rank. And let's check. And as you can see, we have our rank and let's add more data. And next we can add name. And also I'll have symbol and I'll copy it from here. Okay. And also we need to add price and I'll have it here. And let's check. Okay and we can make price shorter and I'm going to use parse float function. Parse float provide to it my price and apply toFixed and I'll use Two digits. Okay, and also we can provide change. And we have it here in that row, in that data item. Okay. And we can add four digits for change. OK, and we have our table. Let's refresh it. And inside Network tab, we have data from our API, and also we have data in our console. And let's fix this each child. And to fix that warning, I need to add field to my role, and I'll use my crypto. And provide ID. Let me refresh the page. And as you can see, we don't have the warning, and let's add some styles. I'll add some very basic styles and for data I'm going to add padding 10 pixels and also add border-bottom 1 pixel solid and apply some gray color. And also we can add text-align left. Let's check. Okay, and we need to add our CSS file. Import it in our component. I'm going to import our crypto prices CSS. Let's check again. As you can see, we have our styles. I can adjust this border. Let me provide styles for table. I'll make border collapse. We'll make it collapse. And it will make our border looks clean. And we have our styles. Let me close developer tools. And now I can refresh the page. And as you can see, we have all data from the API. And we have 100 coins. And refresh again. And we have data again. And that's all that I had for today. If you like the video, subscribe to my Dev Web App channel. Like the video. Thank you for watching. Goodbye.