As web developers there are plenty of languages and frameworks you can use to build your applications and websites. I mean you can use PHP of course with the amazing Laravel framework to build full stack applications with ease. Or you can of course also use JavaScript, Node.js and the plethora of JavaScript frameworks available. You can use React, you can use it in conjunction with Next.js to build full stack applications which also have server-side capabilities. You can use Remix, you can use Vue, Angular and so on. And of course you get other languages as well like C-sharp and .NET and all the other options you have. Now I of course work a lot with JavaScript and JavaScript frameworks and libraries. But there's one framework, if you want to call it like this, that's often overlooked I feel like. And that would be Astro or Astro.js. And I don't fully understand why it's being overlooked because it's actually amazing. So what is Astro.js? Well in my opinion it's not just yet another framework or library like React or Angular, though it is definitely a framework. They call themselves a framework right at the start of their website. But it is pretty different from React or Angular in my opinion. For example it's not really a frontend framework. Instead it's more like a tool, a thing, a set of rules you can use to build websites with ease. Especially static websites but not just static websites as you'll see. Now the idea behind Astro.js is that you can use it to create a new project and then add a bunch of pages to it. And Astro.js will take care of rendering and pre-rendering these pages. And all those pages in the end are just html markup blended with some styles and if you want also some javascript code. And actually you can add different pieces of javascript code to every page. You got different ways of adding javascript code to those pages, different syntax you can use. And depending on which approach you use it'll either be javascript code that gets executed on the server or during the build process ahead of time. Or it'll be client-side javascript code that's simply downloaded together with the rest of the page and that will be executed in the browser. And here you'll just write vanilla javascript code out of the box. Because as mentioned Astro.js is not a frontend javascript framework or library like React or Angular. It doesn't give you any specific frontend javascript syntax you would have to use. It doesn't give you any hooks or anything like that. Instead it just gives you a way of defining pages made up of markup, html code, styles and script code if you want to. And that script code again can just be vanilla javascript if you want to. And then you can interact with that page, do whatever you want to do. And as also mentioned you can also define certain code that will run on the server or during the build process not on the client side. And you can fetch data there from a database or from an API or whatever you want to do. You can do it there and it will not run on the client but instead on the server or during the build process. And that's the amazing thing. Now what's really great and interesting about Astro.js is that you don't have to use any specific client-side javascript syntax or features. You can use vanilla javascript code but you can also if you want to use libraries or frameworks like React or Vue or Svelte or Solid. You can bring those into your Astro project and you could actually use multiple frameworks for different pages or multiple frameworks and libraries on the same page even if you wanted to. And you could control parts of a page with your favorite framework or library. But again you don't have to use any library at all. You can just use vanilla javascript if you want to. And that flexibility is really amazing. Also because Astro will only download the code to the client that's needed there. If you're not using React on a page it won't download the React library of course. If you do use React on a certain page it will but only once. that code is needed depending on your configuration and that's amazing and that makes Astro also really great for building static websites because you can define your code that should run during the build process to pre-render all those pages and then you might just have some basic vanilla javascript code that you need on certain pages and that's it and you'll have a super slim and fast and performant website that can be served to your customers but if you need more power if you need more flexibility if you need more interactive pages you can bring in your favorite library just to the pages that need it and you'll have that too and that's really amazing and that's not even all Astro gives you instead it also has a concept called server islands where parts of a page can be server rendered and other parts might be static and the static shell will then be pre-rendered and served as quickly as possible to your website visitors whereas the parts that do need to run maybe more complex or long-taking server-side code will be rendered on demand that will be sent to the client on demand so to say so that you don't just have that flexibility regarding the client-side code but also regarding the server-side code and you can really serve your sites quickly and efficiently to your website users and therefore of course you're also not limited to just building static websites Astro is great for that but it is also capable of rendering pages dynamically on the server when they're requested you don't have to use it as a static site generator you can instead also build fully dynamic server rendered pages with Astro and therefore Astro really is amazing it's a great way of building static or server rendered websites it gives you all the flexibility you could wish for and it's also constantly evolving in a very stable way so it's not a lot of experimental stuff that breaks all the time instead in my experience it's super stable upgrading typically is very easy and straightforward and of course you don't have to upgrade if you don't want to and they're adding amazing new features all the time for example Astro can also automatically optimize images for you so that you upload your raw images and you'll make sure and Astro will make sure to serve that image in an optimized way so that your users don't have to download megabytes of images and there's plenty of other amazing stuff in there as well for example Astro also makes managing and serving content really simply it has built-in support for markdown so you can build a blog with ease simply put your blog posts into markdown files define their structure and have them being fetched and served by Astro but it can also connect to databases or CMS systems whatever you need wherever your data is Astro is very likely able to adapt and adjust and therefore you can use your existing react or view or whatever it is knowledge to build amazing web applications with Astro and it is therefore definitely a framework i can recommend checking out i'm actually using it for quite a lot of side projects for my own website MaximilianSchwarzmuller.com it's a simple website but i do use Astro for that and it is simply an amazing tool or framework however you want to call it and yeah i feel like it's not getting enough visibility not sure why maybe because the javascript ecosystem is super saturated and probably i'll have a bunch of comments below this episode here as well where people complain that there are too many frameworks yada yada yada well Astro really is amazing and guess what you don't have to use any of these frameworks or tools if you don't want to but if you're looking for an easy and fun yet flexible and powerful way of building your next website or web project in general Astro might be worth a closer look