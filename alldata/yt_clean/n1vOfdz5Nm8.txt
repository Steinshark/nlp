Traefik 3 is here and I thought this would be a good time to revisit one of my most popular tutorials to date. And it's using Traefik in Docker to get wildcard certificates for all of your self-hosted services. This means no more self-signed certificate errors and no more hosting things on on-ports. And we're going to put secure certificates on everything and let you name your services whatever you like. So today we're going to set up Traefik for a reverse proxy. We're going to use Let's Encrypt to get free certificates. We're going to use Cloudflare to verify our domain to get these certificates. And then we'll use a local DNS system like PiHole to name our services anything we like. We're going to take care of everything end to end and I will provide all of the documentation you need. And by the end of this video you'll have wildcard certificates for all of your services. And all certificates will auto renew every 90 days. It truly is set it and forget it once you get it set up. But speaking of certificates expiring, if you want an easy way to monitor this and just about anything else, you can with today's sponsor UptimeRobot. Now I've been using UptimeRobot for a few years now and I wanted to share three things that I really like about them and why I use them to monitor my home lab as well as many public websites. First, the user experience is fantastic on their new website as well as in their app, which really sets the bar as far as website monitoring apps go. It has a simple and intuitive interface that gives you exactly what you need when you need it. Oh, and it even has push notifications to let you know when there's a problem and then again when it has recovered. I also send these to my private Discord server, but you can also send them to Teams, Slack and many other integrations. The second is that it has lots of options for monitoring. Website monitoring, SSL monitoring, port monitoring and many others. Chances are if you have something you want to monitor, there's a way to do it with UptimeRobot. And three, it's the price. They have one of the most generous free tiers out there. You get 50 monitors for free, most of the integrations you need, and even status pages to let others know the status of your sites and services. On top of that, I've convinced them to give you 20% off any paid plan when using the link in the description. So join 2 million other users and start monitoring your services with UptimeRobot today. Before we get started, there's a few things you'll need. First and foremost, you'll need a machine running Linux that you have SSH access to. Now I'm using Ubuntu Linux, but it can be any version of Linux you want. You want to be sure that Docker is installed. And if you need to know how to install Docker, I'll be sure to include it in my documentation. Next, you're going to need a domain that you own. This can be any domain, but you'll want to be sure that it's currently registered to you and that you're using Cloudflare for DNS. Now you can use other DNS providers with Traefik, but in this tutorial we're going to use Cloudflare. I will link other providers in the documentation, but most of what we cover is the same for all of the providers. Last, you'll need some sort of internal DNS system. This can be as simple as PyHaul or even a router or firewall, but you'll need a way to resolve DNS entries on your local network. So let's get started. So quick high level of how this works and how everything fits together. I'm a visual person, so I drew this diagram. We're going to have our Docker machine that we stand up. Within here, we're going to install Traefik proxy. Traefik proxy will use Let's Encrypt to get certificates. And how does it get those? Well, we're going to verify with Cloudflare that we own the domain. Then we're going to set up these three sites within our local DNS that point to our Traefik proxy. So as a user, as me, crazy hair up here, like my niece likes to put on drawings of me. So in my browser, when I request this site, it will look up DNS. DNS will tell me that it resolves to our Traefik proxy and then Traefik proxy will route this to our sites. Cloudflare is not involved at all as far as DNS goes, although we do a DNS challenge. We don't have any of our DNS records in Cloudflare. Again, we're just using Cloudflare to verify that we actually own a domain. Okay, let's get started. First, we'll want to SSH into our server. Then we'll need to set up our environment within the server. I'm going to create a folder called Docker volumes that's going to house all of our Docker configuration files along with our composed files. Then we'll want to CD into that folder. If we look in here, we shouldn't have anything here, obviously, because we just created the folder. Then we're going to make a directory called Traefik to hold our Traefik configuration files along with our Docker compose file. Then we'll want to CD into this Traefik folder. And then here we're going to create a Docker compose file. Then we'll want to edit this Docker compose file so we can put some contents in it. And what contents are going to go in there? This YAML right here. So this is a pretty basic Docker compose file with Traefik. It only has one stack as you can see, Traefik only, and then has a lot of properties that we'll talk through. So first of all, we're going to use Traefik and we're going to use V3, the latest image. I'm pinning this to V3. Now, if there's a newer version out when you see this, you can pin it to the newer version. I'm going to name my container Traefik. Then I'm telling it to always restart unless we stop it ourselves. Then I'm setting some security options to say no new privileges. Then I'm saying use a network called proxy. And if we look below, we can see networks proxy external true. So this is saying that we expect a Docker network called proxy outside of this compose file. So we'll create that here in a few. Then we're telling it which ports to expose, 80 and 443. Then we're setting up some environment variables. The first variable is this CFDNS API token underscore file. Now, this might look a little bit different in the past. And that's because we're going to use a secret that we're going to attach to it. And this environment variable is actually mounting this secret. Well, where does this secret come from? Well, it comes from this secret that we're actually mounting. And where does this secret come from? Well, it comes from a top level secret that we define and we tell it where the file is. Now, don't get me wrong. Docker secrets are great to use, but sometimes I doubt their usefulness. Docker does support them in compose. But most people who are running compose in production are actually using Docker Swarm and Docker Swarm has a different way to define secrets. And on top of that, not every container out there support secrets as you'll kind of see here in a little bit. Now, we got a little bit lucky with this one because Traefik actually has a variable called underscore file that can read files that are mounted. Actually, this comes from Lego, but not all containers out there do. And as you'll see, we can't use secrets later on. So I thought I would mention this that, hey, secrets are supported. If you want to use environment variables, I have options set here that are commented out. And you'll see here that we actually have to use an environment variable because Traefik doesn't support secrets within labels. Long story short, I'm acknowledging that secrets exist, but I'm really doubting their usefulness in a home lab environment or in Docker compose, especially when you only have one service anyway. They're designed to protect services within the stack from being able to read each other's environment variables. But we only have one service in this stack. Anyways, again, acknowledging they exist, use whatever you want. I'll have examples for both. Then we have an environment variable called Traefik dashboard credentials. And this is going to be our basic auth credentials to see the dashboard. I mentioned this earlier, but this is actually mounting this secret to this specific service from the top level secret that we see down here. And then we're defining an ENV file to read as well. And then we have some volumes that we're mounting here. So I'm mounting on the server to this container our local time. So we get time zones read only, and then I'm mounting the Docker socket or the Docker process. And I'm saying read only. That's so we can get to it within this container. And then we're mounting a Traefik config that it looks like we'll need to create to a Traefik config within the container. And we're saying this is read only, so it can't modify this file inside of the container. And then we're doing the same thing for an ACME JSON file. We have one on disk that we're going to mount within the container. And we're not using read only here because this actually needs to write to local disk to update the certificate. And so this ACME JSON you'll see later on is a JSON representation of our certificate. And then I have another volume here that we'll use later on. And this is mounting a config file from disk again to the inside of the Traefik container to a YAML file. And we're saying read only. We'll use this later, but we'll keep it commented out for now. Next, you're seeing a lot of labels. So we're saying, hey, we have an entry point of HTTP, so we're exposing something called HTTP. We're creating a route rule to expose our dashboard to my local domain on technotim.live. We'll talk about this here, but notice that this is a sub-sub domain. So it's local sub domain and then a sub domain off that called Traefik-dashboard. Then here, the basic auth credentials that we see up here, we're passing those into there so they get replaced from an environment variable. Then we're also saying, hey, we're going to redirect HTTP to HTTPS. That's what we want. We're setting some custom headers that we need for cores, and this will help you out with some of your services. Then we're setting a middleware of this redirect that we talked about a little bit earlier. We're also creating an entry point called HTTPS, and we're defining that as well. Then we're using the middleware called Traefik auth. So this is putting middleware in between so we can have authentication on this end point for a dashboard. We're saying use TLS, and then the cert resolver that we're going to use is Cloudflare. Now, I said there are more providers that you can use. We're going to use Cloudflare in this example, and I'll link more in the documentation below. But we're going to use Cloudflare, and here's the top level domain that I'm going to use. So I'm going to use local.technotim.live. And then we're saying this certificate on this route should also be sans, so subject, alternative name. And this is really how we get our wildcards. We're saying, hey, this certificate also applies to anything lower than this local subdomain. And then the service API internal is so that our Traefik dashboard can actually access these internal APIs. So that's a lot of labels. Hopefully some more of these make sense. And we talked about our secrets. Again, we're going to be mounting a secret from the file system. And then our networks, we're saying we're going to get a network external to this compose stack. So we have a lot of tasks we need to do based on this YAML file. So it looks like we need to create a data folder and in there put a Traefik YAML file in that data folder. We're also going to create an ACME JSON file. We're going to assign special permissions to that. We need to create a secret for Cloudflare API token, which means we need some Cloudflare API tokens as well to put inside of there. We need to create a Docker network called proxy outside of here. We're also going to need to generate basic auth credentials to get to the dashboard. And then we need to create this config file at some point, but we won't do it now. We'll do it later. So we got a lot of tasks. Let's get into it. So back in our server, first, let's copy this Docker compose file and paste it into the Docker compose. Again, we were editing this Docker compose file. So we're going to paste the contents in here using nano. It's control O, enter control X to exit. Always save, but it really stands for output and X is for close. Then if we cat this out just to make sure we have contents in there, we do. So I said we need to make a dir called data. And in here, we need to create two files. First, we need to touch or create an ACME.json. So we need to shmod it or change the permissions on this file. What do we want to shmod it to? 600. And we're going to do ACME.json. So if we do it ls -l, we can see that it has the permissions applied. Next, we need to create this Traefik.yaml. Now take note, it's YML. Traefik uses YML instead of YAML. So just make note of that. So we're going to create this and then we're going to nano. We're going to edit it. And what goes inside of that file? Well, the contents of our Traefik config. So in here, we're saying, hey, for the API, turn on the dashboard, turn on debug true. This is so you get some additional logging. You can actually turn that off once you get everything working. Then we're going to create some entry points, HTTP on 80. And we're going to set up redirections to say, hey, go to HTTPS if you land on HTTP. And then we're defining HTTPS, which is the port of 443. Server transport insecure skip verify is true. Now, I turn this on so that we can use self-signed certificates behind Traefik like you would with something like Proxmox. But if you're not using any self-signed certificates behind Traefik, you can turn this off. Then we're saying our provider is Docker. Obviously, we're using Docker. They support other providers, Kubernetes, so on and so forth. But we're saying our endpoint is on the Docker process exposed by default false. In here, you can see that we're then passing in a file with a file name of slash config that YAML. This is additional configuration for routes we'll talk about later. But because we didn't mount that, we need to comment this out here, too. Then we're setting up our cert resolvers. So we have Cloudflare. We're saying we're going to use ACME to do it. Then we're going to specify our email address on our Cloudflare account. Our storage is going to be the ACME JSON file. And then we're going to set up our certificate server. Now, as you notice, I have this one commented out, and that's production. Now, I would highly recommend using this second one while you're setting it up, and that's their staging endpoint. So why would you want to use staging over production? Well, production has rate limiting on their endpoints. And if you do this too many times and too many failures, they'll block you out for a couple of days or even a week. So I would highly recommend testing this on staging first. Staging won't give you a trusted certificate, but it will give you one that's signed from their staging servers. So it's a good way to test to say, hey, did I get a staging certificate? And if you did, then you can turn this on and get production. And if you want, you can comment both of these out and the default is production. So I'd highly recommend just having them both there and toggling them back and forth as you get your certificates. DNS challenge again, we're saying, hey, use Cloudflare. That's our provider. And then there's a few other options if you have troubles with DNS propagation. That's something that the community added a while ago that they found that, hey, some of these options do help out. I haven't had to use them, but I listed them just in case with some comments about them. And then our resolvers. What resolvers are we going to use? Now, this is really important. You don't want to use your internal DNS to resolve this. You want to use public DNS to resolve this. Well, why? Well, coming back to this diagram, let's encrypt is verifying your domain. It will actually create a text record here if it can, and then it will verify that text record. And the way it verifies it is by reading that DNS entry that we had. And here we're saying use Cloudflare's DNS, but this can be Google's DNS or any external DNS. But we're saying use an external DNS. So when it goes to verify, it's going to go out to some big DNS system and say, hey, do you have these text records here? And once they propagate, it should say yes, and then you'll get your certificate. The reason why I say to use external DNS is because, one, it's faster. You don't have to wait for those records to propagate all the way down to your internal DNS. And two, you might have a DNS record for this already defined. And so it's not going to be able to verify those text records in your own DNS. So long story short, keep this to public DNS. Don't change it to your own. So we were editing that Traefik.yaml file on our server. Let's paste that configuration in there. Save it with Ctrl+O, Enter, X, Ctrl+X. And then if we do a cat on that Traefik.yaml, you should have it. And if we do a cat on acme.json, we have it, but it's empty, which is also good. So if I'm looking at my compose file again, we still need to create this secret, that's a text file, with our Cloudflare API token. So first, let's create the secret file. So we want to go at level up. We actually want to create this at the Traefik level and not in the data folder. And I'm going to touch or create this file called cf_api_token.txt. Just to do an ls, we see it's there. And if we edit it, there's nothing in there. But we're going to put something in there. What goes in there? Well, our Cloudflare API token. So how do we get our Cloudflare API token? Well, if we go into the Cloudflare dashboard and you go under your profile, you can then see a section for API tokens. Here you can see I have quite a few tokens. Well, maybe you can't because I'm going to blur it out, but just know that I have many tokens there. And we're going to create a new token here. Now, you can pick from one of the templates, but I found it's easier to just create a custom and start from there. That way you don't have to figure out what the default is and what you need to change. So let's do get started. First, I'm going to give it a name. Let's call this Docker Traefik. Then we need to give it some permissions. And in the Traefik documentation that will link, it says we need zone, zone, read. We need to add another permission for zone, DNS, and edit. Then you choose which zones this token applies to. Now, I have lots of zones. I don't want this to apply to all zones. I only want it to apply to the zone that we're working on, which is techno Tim Dot Live. Next, you can filter by IP. Now, I don't have a static IP at home, but if you did, you could say that only these IPs can actually use this token, which is really good. So if you have a static IP, I would highly recommend using this. I don't, so I can't. TTL, we're going to set this token to live forever because we need this token to generate certificates. So let's continue to summary. So here's the summary. We're creating a token named this Docker Traefik. It's for this email account that hopefully you can't see. And then it's for this domain and it has these permissions zone, read and DNS, edit. So create token, then it will give you your token. So you should copy it and put it in a safe place. It's never going to show it to you again. So if you lose it, just delete it and create a new one. You could see my token here. I'm going to delete this after this tutorial, but I'm going to save this off to a safe place. Then let's go back to our terminal where we were. And again, we're in the Traefik root folder and let's edit this CF API token.txt. And in here, we're actually just going to paste this token. Then let's save it. Control + O, Control + X. And if we do a cat for that token, we should see the contents of it. And again, I want to call out what we didn't do in Cloudflare. We didn't create any DNS entries at all. Again, we're only using this for domain verification and not for DNS at all. We'll create those later on our local network. Going back to my Docker Compose for my task list. One thing we didn't do yet is create this external proxy network. So let's create that. So this is super simple. We're going to do a Docker network create proxy. So that will create our proxy network. Okay, that one was easy. Another easy one is creating our .env file. So we're going to do a touch.env then at nano.env. I know I can do that in one step, but I like to do it in two. What are we going to paste in here? Well, we need our basic auth credentials for our Traefik dashboard. So we need to generate those. So to do that, you need HT password and you need to make sure that that's installed. You can see it's installed for me. To install that on Ubuntu, if you're using Ubuntu is sudo apt update and then sudo apt install Apache 2.0 utils. And that will install the HT password. You can see I already have it installed. Need to do it on Mac and Windows. All of instructions for that as well. Then to create our credentials, it's usually a username, colon, and then a base64 encoded password. And it's a pair. To create our username and password, we're going to do it like this. So we're going to use this command, which will create a credential pair for us, username and password. I'm going to change the username to admin and then hit enter. Now it's going to prompt me for my password. I'm just going to type in password for my password. And then it will give me then the HT password format that we're going to use inside of that EMV file. So as you can see, this admin matches up to here. If you want it to be something else, run this command with a different username, and obviously then use a better password than I did. So let's copy this really quick. Let's edit this EMV file. Going to paste this here, but we can't just paste this password. We have to set the environment variable that we want that to be assigned to. And for us, this is Traefik dashboard credentials. Let's grab those. We're going to say that variable equals this. So now this is assigning that variable this value. Then this EMV file gets read. And then on this stack, we're assigning a local variable of the same from the one that's in our .EMV file. From a service global variable right there. And again, if you want to put your API token there instead of mounting it as a secret, you can absolutely do that there too. You would just create a CFDNS API token back in this EMV file, and then you would assign the value. Okay. Is there anything left we need to do? I don't think so. So now that everything's done, we can stand up our Docker Compose file. So we're going to run Docker Compose up -d. I have force recreate in there. It's because I was testing this a lot of times, but it should be just -d. If you're going to be testing it a lot of times like I was, you might want to use the force - recreate. It doesn't matter for the first time. So I'm going to apply it anyways. We see the container started. Let's do a Docker logs on that Traefik container. We don't see any logs. That's usually a good sign. Don't see any logs. That's a good sign with Traefik. No news is good news. That means I don't have any errors. It's a good thing. But how do we verify that this is working other than going to the dashboard? First, let's check to see if our certificate has any data. So I'm going to cat out the acme.json file. Remember, that's a JSON representation of our certificate. Let's cat it out. As you can see, I have one. So we're in a good state. But what if we didn't have one? What if we need to troubleshoot inside of this container and just make sure that everything's mapped properly if we were getting some errors? Well, the first thing I would do is Docker ps and see what's running. I would look to see if it's still running and it's not in a crash loop. That looks pretty good to me. If there were still issues, I would run a Docker exec it Traefik and then /bin/sh. So what we're doing is we're going to shell inside of this container so that we can take a look around. So Docker exec dash it for interactive. We're seeing the container's name is Traefik. And then we're doing a /bin/sh. So we're going to use shell as soon as we get in there. Let's run that. So now we're inside of here. We do a top. That's always a good way to tell if you're inside of here. Yes, we're inside of this container because we can see the only processes are running is the shell that we ran, top that we're running, and our Traefik process right here. Pretty cool. So let's take a look around. So if we do an ls, we could see, hey, there's our ACME JSON. So we know that's mapped properly. Or do we? We can cat out that file if we want. It's the same thing we're seeing. So cool. That's good. Next, if we do an ls, remember, we mounted things in the root. We mounted this Traefik.yaml file. So let's take a look at this cat Traefik.yaml. We see that it has stuff and so it looks pretty good. Let's clear that out. And then if you want to check your secret to make sure it's mounted, you could do an ls /run/secrets to see which secrets are mounted. You can see our secrets mounted here. And if you wanted to see that value, you would basically do the same thing. You would do a cat /run/secrets and then this file and you could see the value there. So that's working. And then if you remember, we have two environment variables that should work inside of this container. So let's make sure that this environment variable is set properly. If we do an echo, interpolate this variable, we should see it's pointing to that path. And so this looks right because we're using this special _file, which will read the contents of this file. So that looks pretty good. And the next variable we should be able to read inside of here is this Traefik dashboard credentials. Let's do the same thing. We're going to echo out and interpolate this value right here. And you could see there's our basic auth credentials. So everything looks good. So that's pretty much all the troubleshooting you should need to do inside of here if something goes wrong. But things are going right. So let's continue. So how do we get to our dashboard now? Well, as you can see, I define that this host should be Traefik dashboard local.technotim.live. But if we go there in a browser, it won't resolve right now. So what we need to do now is create a local DNS entry so we can get there. So I'm going into my DNS system, which is PyHole. And what I'm going to do is create a DNS record. Now, you can do this one of two ways. You can create an A record that points back to the IP address of the machine and that should work fine. Or you can create a CNAME that points back to an existing record. I would recommend using a CNAME. So if we check this machine's IP address, for me, its IP address is right here. 192.168.60.40. And if we check the host name, you can see that I've named this machine Docker01. And I already have a DNS record in here for Docker01. And you can see it right here. And it's pointing to that IP address. So I'm going to create a CNAME now that points to this DNS record. And the advantage of creating a CNAME is that as you create more and more websites, you're going to point them all to this Docker host and you may as well just point it to this record. So if that IP address ever changes, you only need to change it in one place. So I am going to create a CNAME that points to that Docker system. And the CNAME is going to be the name of my dashboard. Then I added it. There we go. So now let's verify that we can resolve that new DNS entry or that CNAME. So let's do an NSLookup on this. And we can see right here it resolves back to that A record, which then points that IP address. So this is great. And now when we go to that website, we can see we're getting a certificate warning. This might be a good thing. If we check our certificate, the certificate is not valid, you can see that this certificate right here is issued from Let's Encrypt Staging. So this is actually a good error. This means we got a certificate from Let's Encrypt rather than the default Traefik certificate. So if you see here that you're getting a Let's Encrypt certificate, that's good. If you see it's a Traefik certificate, that means something's not working right. You might want to go back and troubleshoot in the troubleshooting section. So that's a good thing. So let's advance and let's actually go to this website. Now we're getting our basic auth prompt. Remember I said mine was admin and it was password. There we go. We're in and we see our Traefik dashboard. So cool. We can get to our Traefik dashboard. Now from here you can do lots of other things and I'll let you explore that on your own. So now that we verified that we can get to our dashboard and we verified that we have our staging certificates. I think it's safe to say we can now get our production certificates. So remember to get our production certificates, we'll want to go back into the Traefik.yaml file. What I would do is uncomment the production and comment out the staging. And I did it on that file. But remember, you'll have to do it on your server. Then we'll go into the data folder and then we'll do an ls again. And so we'll edit this Traefik.yaml file. And what we're looking for is down here and it's right here. So let's uncomment this and we'll comment this out. So now we're going to use the production site and we're going to comment out the staging site. So let's save that. Control O, enter, control X. So to reinitialize this, what I'm going to do is docker-compose up -d and then of course recreate. So it's going to stop, start, recreate it. There it goes. Now it recreated. Let's do a docker logs Traefik. See if we have any logs or errors. Logs or errors. We don't have any logs or errors. So that's a good sign so far. And then how are we going to verify certificates? We learned earlier. It's a cat on the data /acme.json to see if we have certificates. Cat that out. Let's scroll through here. Looks like we have a certificate. This is still from staging. So I think I know what's going on. This happened last time and I forget because it's been a while. But as you can see, we're pointing to the staging site in this certificate. So what we need to do is actually just blank out the contents of this file and let Traefik put the contents of the new certificate from production in this file. Pretty easy to do. Let's do that. So first let's stop Traefik. So it's not doing anything. Stop it first with docker stop Traefik. And then what we're going to do is we're going to do a nano data /acme.json. So we're going to go into this file. Basically what you want to do is just blank this file out. Clear all the contents. Make sure it's empty. Then we're going to do a control O to write control X. And then you know cat it out to make sure that it is empty. Cat it out. It's cool. So it's empty. And then let's do a docker start Traefik. So let's start that back up. Then if we do docker logs and you can see docker logs, docker logs, docker logs, it all looks good. So let's check our website to see if we actually have certificates. So going back to Traefik dashboard local in my local techno Tim dot live dashboard, you can see we're here and you can see we don't have any certificate warnings. So let's check this certificate and says it's secure. Let's see who issued it. And as you can see, let's encrypt issued it. So pretty awesome. Now we have certificates on our dashboard. So pretty cool. So if you're noticing that you're still seeing the staging, two things. One browsers hold on to certificates for a long time. So it might be good to try this on a browser you haven't tried yet or closing your browser all the way out and then opening it back up. I would recommend just trying a totally different browser on this so you can see if you're getting the correct certificate and then check the logs and do the troubleshooting we saw earlier in the section. So great. We have Traefik running. We have our certificates. They are production certificates. Now let's expose a another website with a new Docker compose stack. So back on our server. If you notice, we're in the Traefik directory. Let's actually go one up. So we do an LS and we see that we have a Traefik folder. I'm going to create a new directory called engine X and then we're going to CD into this engine X folder and then we're going to touch and we're going to create a Docker compose file again. And then we're going to nano this Docker compose file so that we can edit it and put some contents. So what are the contents that are going to go in there? Well, it's this engine X demo website. So it's a simple engine X demo website that will print an IP address and a few other things. And you can see here that we're applying some labels. So on new workloads, all we need to do is apply labels. So we're going to say enable Traefik. True. We're going to use this route. We're going to use the entry point of HTTPS. We want to use TLS and then we need to set the server port. So one thing that we need to do is create this local DNS entry file, which we'll do in here in a minute and then explain this right here. So why is it port 8080? We use that port because that's the port that this engine X hello container exposes. So, for instance, if it were 80, we change it to 80. If it were 3000, we'd put 3000 there. And if it were 9000, we would put 9000 there. So on and so forth. But you want to make sure that this server port matches the container port of that Docker container for the service you want to run. So for me, it's 8080. And so this is important here. This is saying, hey, use the network called proxy. And this is so I can get to the network called proxy where Traefik is living. And then we're defining this network at the higher level of proxy and saying use external. So nothing to do there. It's the same as a Traefik. But this is just saying, hey, use the network called proxy that is already created within Docker. So let's paste this in the compose file really quick. So we're going to paste it in here. Then we'll cat this out so you can see. Yes, we put it there. So now the last task is just creating this DNS entry and then spinning up the stack. So back in my PiHole or whatever DNS system you're using, you would create a DNS entry again or create a CNAME. So I'm going to create a CNAME. And what's it going to point to? Pop quiz. Docker 01. You're right. So let's filter this by Docker dash 01. You can see our Traefik dashboard is pointing to Docker 01. And that's that Docker machine. Let's do the same thing now for this new domain. So this new domain is nginx.local.technotim.live. And we're going to point it to this target, which is this machine or this a record here. We're going to add that. Then again, we'll want to do an NS lookup to see if this domain resolves. And it does. Again, it's pointing back to this Docker machine, which is on this IP address. So this looks pretty good. Then all there is left to do is create the stack. Let's do a Docker logs nginx just to make sure nothing weird is going on. That all looks pretty normal. Let's do a Docker PS to see if it's OK. There it is. It started up 16 seconds ago. And here it is. You can see this nginx demo site. The server address is a little bit weird right here. That's from Docker. But anyways, not important. You can see it is here. It's actually working. You can see the timer is ticking. I can actually put on auto refresh maybe. That's probably a little better. Well, it won't stay on. Not important. But what is important, if we go into our connection, we look at this certificate. And then we can see this is also a production. Let's encrypt certificate. So pretty awesome. Now it's rinse and repeat for every service that you have. That's great for everything inside of Docker. But what about things outside of Docker? Well, that's pretty easy, too. And that's that configuration file we saw a little bit earlier. So just to illustrate what we're trying to do here, I'm here. Messy hair person. I'm using a browser instead of going directly to proxmox and getting certificate errors. What we want to do is actually use Traefik and use them as our proxy, but then go out to proxmox. So then we have a certificate that we trust. Super simple to do. And we just need to uncomment a few things. So if we go back to our Docker config, remember how I said, hey, we're going to use this later. I have this commented out this config dot yaml and I'm mounting it as read only. Well, what we want to do is uncomment that. But we have a task now. We actually need to create this config dot yaml in the data folder. And what goes in there? Well, it's this relatively simple config right here. So this is a way that I can define external services. So I'm creating a router pointing to proxmox localhost at techno Tim that live. I'm adding some additional middleware that are defined here. This is middleware and headers that get attached to those requests. I found I need a lot of these for a lot of my sites, a redirection middleware as well. And then I'm defining this service saying the load balancer has servers of one. And here is the IP address of my proxmox server. If I go there, you can see I'm getting a prompt here with a certificate warning. But we want to get rid of that. And then I'm saying past host header true again, more header stuff. And if we scroll down here, we have this IP whitelist and the IP whitelist has a source range. This is basically saying, hey, we trust all reverse proxies in this range right here. And you can see on the source range, it includes all private IP addresses. You might want to tighten this up to your own subnet to say, hey, you only trust upstream proxies from this range, but not a huge deal. You should probably tighten it up. But for this example, I've added all private subnets just so you can pick and choose which one yours falls into. So anyways, let's copy this. Go back to our server. Still in the nginx folder. So let's go up. I'm going to go back into our Traefik folder. Then we're going to go into our data folder and do an LS. Then we're going to touch config.yml. Then we're going to nano and we're going to edit that file. And here we're going to paste the contents we were just looking at of config.yml. Control + O to save. Control + X to exit. Do a cat just to make sure. Hey, it's there. It is there. And then, as I mentioned, we still need to uncomment a few things. And so we also reference this in the Traefik.yml file. Remember how we had something commented out here? Right here. Let's uncomment this. Then we need to edit our docker compose.yml file. And we need to uncomment that last piece right here. Control + O to save. X. And then the last thing we need to do if we look at this config, we need to go into our internal DNS and create this entry. So again, for me and PiHole, I'm going to create a CNAME of the CNAME we just mentioned, proxmox.local.technotim.live. And I am going to point it to, that's wrong, I'm going to point it to the host name or the A record we already have, which is docker01.local.technotim.us, my internal local domain. So let's say add. Now we've added that. Let's copy this out. Just make sure we can do an nslookup. nslookup. We see it. Awesome. So now let's go to that site. Awesome. It works. Then we need to recreate this stack because it doesn't auto load our configuration. So let's do a docker compose. Let's recreate it. Do a docker logs on Traefik. No errors. Then if we go to that URL, you can see that, hey, proxmox.local.technotim.live does get to my proxmox server. And I do have a certificate. So one call out real quick. You might have noticed that these are on different VLANs. So if you have firewall rules in between VLANs, you'll need to make sure that your docker host can communicate with the services that might be on different VLANs. So that's how easy it is to get wildcard certificates for all of my services here on my network. Huge thanks to UptimeRobot for sponsoring today's video. I'm Tim. Thanks for watching.