My name is Emily Arnautovic and I am an Enterprise Solutions Architect at AWS. Welcome to this architecture session back to basics architect, a 3-tier app on AWS, without the heavy lifting. I'm expecting that you are relatively new to working with AWS services. And so I'll walk through an example of a 3 tier architecture that is common across organisations. At the end, I'll share a list of resources that will help you learn more, and that will help you to get started with building or migrating your 3 tier application to AWS. Let me introduce you to Nikki Wolf. As our example, solutions architect, Nikki is leading a team of engineers and she's been considering running a number of her applications in AWS for a while now. She's just secured the go ahead from her department lead. Now it's time for Nikki to get the project started and she and her team need to quickly make sense of architecting on AWS. Like many of you who are likely new to AWS, Nikki and her team want to get some help with addressing typical architectural concerns like stability, performance, and high availability. They want to know what is recommended when architecting a 3 tier app on AWS. Nikki has a number of typical 3 tier applications. Let's take a look at one of them. One of Nikki's engineers shared this whiteboard diagram with me. It may look familiar to many of you let's recall that a 3 tier application is one where the workload or application is broken down into three distinct and logical tiers that are isolated from each other. We've got the presentation tier, the logic tier and the data tier many, if not, most of you will be familiar with this architecture because it's used in client server applications, such as web applications and many commercial off the shelf applications. For some of you, the core system that your business runs on may well be a 3 tier app. It could be your HR system or ERP system. 3 tier apps are a very common pattern because they allow you to decouple the presentation, logic and data tiers, and they can be managed independently of each other. Communication and traffic is generally via load balancers. So Nikki and her team, they know their app and they're comfortable with the 3 tier pattern. What they really need is help with translating this to AWS services, but where to start. They want to keep all of the good things about a 3 tier app decoupling isolation and the ability to scale the tiers. But they also want to explore some of the cloud services they've heard about, and they hope to address some of the challenges that they've faced with running the 3 tier app in a traditional environment. Nikki's pretty typical of a solutions architect. She's got a wishlist of improvements. She wants to continue to serve our customer base in Australia and possibly expand globally. She wants to prioritise getting efficiencies in compute usage across all tiers to drive down costs. She's got an app with users online 24x7 so it needs to handle unexpected traffic peaks. They want to improve the stability of the app and reduce both planned and unplanned outages. Now, security is important. Moving to cloud is an opportunity to improve the overall security posture, reduce risk and costs, and then drive down those security incidents. Nikki and her team would add automation where possible and spend less time on maintenance and her developers want better access to dev and test environments. And they also want to try some new things on AWS. So we're going to use this checklist to guide us through building out the architecture. It may be Nikki's checklist, but it's a common set of items that many of you will want to check off too. So this is what we want to address with our 3 tier architecture today. So have customers in Australia with the ability to expand globally, keep costs down, but achieve that desired performance, build a scalable architecture to support peaks of user activity, create a highly available architecture and reduce outages. We also want security at all, layers and automation, wherever possible. And lastly, flexibility and agility. We want to give engineers the ability to quickly spin up resources as, and when they need them or to try out new services or architectural approaches. So that's the checklist created. Let's see the components that we need to include in our AWS architecture. So for core components in a 3 tier app, we've got compute and storage for the web app and the app servers. These could be running on Linux or windows. We aren't sure how many servers in each tier, but we typically see multiple servers in each tier to handle the traffic or the load, and to build a more available and reliable application. We've got a database, could be a relational database because these are very common in 3 tier apps, but it could be a no SQL database. We've got load balancers, distributing traffic to each tier, starting from the end users accessing the presentation tier. And Nikki has also called out needing a DNS capability for her end users. There are also many other capabilities that Nikki and her team have security capabilities, like a way to limit and manage user access and credentials, and to detect malicious behaviour, operations capabilities like infrastructure provisioning and management, and a way to monitor the app and alert on any issues like high CPU utilisation or servers becoming unhealthy or offline. Nikki starts to ask her team. Is there a pattern for a 3 tier app? Although 3 tier apps can have their differences, there are many, many similarities between them. So let's explore together. We're going to build out what a common 3-tier architecture looks like on AWS. There might be some new terminology for you, but step-by-step, we'll cover the core components and work our way through that improvement checklist to progressively build out an architecture that ticks the box. So here's our checklist. Again, first off, we're going to, to show how we can serve Nikki's customer base locally and globally like Nikki and her team. You may have heard terms like AWS regions, availability zones VPCs, but maybe you just aren't sure what that means yet for workload on AWS. Nikki needs to choose where that 3-tier app will run. For that we need to select an AWS region. An AWS region is a physical location where AWS has multiple availability zones or AZs with each of these consisting of one or more data centers since Nikki's customers are in Australia and the data will reside in Australia. We'll choose the AWS Sydney region known as ap-southeast-2, with this region. And it's multiple AZ's. Nikki will be able to design for high availability and reliability. The Sydney region has 3 distinct availability zones. We want to make use of two or more of these to meet the requirement for high availability. Nikki and her team will run their 3 tier app inside a dedicated VPC or virtual private cloud. This means that Nikki can provision a logically isolated section of the AWS cloud to launch AWS resources in a virtual network that her team defines. They will have complete control over the virtual networking environment so they can select things like the IP address range and the creation of subnets to create that 3 tier isolation. That's part of their architecture. So checked off the first item. Now it's time to see how to address the need for efficient compute and how to optimise the tiers cost-effectively. Like Nikki and her team, you may first head over to the AWS website to start investigating the compute options in AWS. We recommend that Nikki chooses virtual instances, Amazon EC2, this makes sense since they want to re-host or re-platform their 3 tier application on AWS. If they're ready to take on more change, they could consider rearchitecting the app to run on containers with Amazon ECS, Amazon EKS, or AWS Fargate, or they could even convert their custom-built app to a serverless architecture with AWS Lambda. But as we saw, Nikki wanted to keep that 3 tier app architecture for now, and then once stable in cloud, they can consider modernising to containers or serverless. So first we'll mark out the 3-tiers using VPC subnets. We'll use these to separate and control communication between the tiers. We've got 3 subnets representing the presentation, logic and data tiers in each tier we'll place EC2 instances. Now there are lots of options for Nikki and her team to choose from including different processor types and different operating systems. They've got options to use existing Amazon machine images, or they can create their own images and much more. Let's take a look at EC2 instance types. Like Nikki you'll need to review the current hardware profile and make a selection for EC2 instances. AWS have hundreds of instance types and they're targeted for different types of workloads. Every server has four key computing, resources, CPU, memory, storage, and networking capabilities. Some workloads are more CPU intensive while others are more memory intensive, and so on. Amazon EC2 has different families represented by the first letter to the right, in this case, it's M. As AWS has added more instance types, we've got generations i.e five in this case. And then we added additional capabilities like CPU capabilities, network capabilities, and that's represented by the D here. The last one is size, and this is a simple t-shirt size. So we've got an X large in this case. So to select the EC2 instance, you need to know your application, ask yourself the following key questions. What am my business requirements? Some examples are selecting between high performance versus low cost or asking what does my operational SLA look like? What are my key bottlenecks? It could be Disk I/O, memory, network utilisation. If there are multiple, you need to decide on the most important ones for your business. Once you've got these questions answered, you can move on to deciding the right EC2 instance for your workload. If you're not sure you can also look at it from constraints on the workload. You start with the best guess instance, configure it to output resource utilisation metrics, and then you observe it by performing a load test. Then you find the constrained resource and size it using AWS tools. So you choose the instance that best suits that constrained resource. Now instant selection is a continuous process that will evolve based on changing business requirements. There are different ways to purchase compute. All the options use the same underlying EC2 instances and AWS infrastructure across all AWS regions. When you're building a new workload on AWS, we recommend with starting with on-demand instances. Later on, you can look to other purchasing options like savings plans or spot instances, and further optimise. In Nikki's case, her team will first use those on demand instances as they come to understand more about their workload on AWS, they can consider other purchasing options, on demand is the easiest way to get started as a best guess. We've selected compute optimised C5 instances for the presentation tier and M5 general purposes instances for the logic and the data tier. These are common choices for this type of workload. So it's a good place to start. Like Nikki and her team you can always trial these instances, run some performance tests and then adjust as you go along. Once you have more information, you could also commit to more cost-effective purchasing. So now the next item on that checklist was to work out how we can build out compute that scales up and down based on traffic and load. To address scalability with compute, we recommend that you place the EC2 compute instances in auto scaling groups at each tier. Now, for example, that web server auto scaling group might trigger scaling in and out in response to changes in network IO. Whereas that application server auto scaling group might scale according to CPU utilisation. You can configure auto scaling in a number of ways, setting minimum and maximum number of instances to help address 24/7 availability or to scale at predetermined times of day. You can explore these features during development and testing. Next, what can we do to reduce planned and unplanned outages, improve availability, and take away that heavy lifting that so often burdens the engineering and operations teams. We've heard earlier that the Sydney region has 3 distinct availability zones. We aren't going to make use of just one of these. Instead, we'll start by making use of two of them. This will help meet the requirement for high availability for Nikki's customers who might access that application at any time of day. In that second AZ, we have this same architecture as the first AZ. Our auto scaling group will work across the multiple AZs within this region. The EC2 instances in these two different AZs are both logically and physically separated. Remember that the Amazon VPC is a regional service that allows you to leverage AZs while keeping all of your resources in that same logical network. AZs are connected to each other with fast private fibre optic networking. You can achieve high availability by deploying your applications to span across multiple AZs. For each application tier placing multiple redundant instances in distinct AZs creates a multi-site solution. Now, keen eyes might notice that we haven't yet added in any load balancing, so let's get to that. Hardware load balances are a common network appliance used in traditional 3 tier application architectures. Now elastic load balancing or ELB is a configurable load balancing solution in AWS that Nikki and her team would want to use to achieve high availability and automatic scaling that will help them build fault tolerant architectures. You can use ELBs for health checking on hosts and distributing traffic to EC2 instances across those multiple AZs. You can also dynamically grow and shrink that load balancing capacity to adjust to traffic demands. Nikki and her team will also be happy about security options with ELB like certificate management, SSL/TLS, and integration with Amazon EC2. Now, there are a few choices with elastic load balancing on AWS. Let's take a look. The options depend on the use case. We've got application load balancer for layer seven traffic, network load balancer for layer four. And then we've also got the gateway load balancer, which is used for third party network appliances on AWS. Nikki and her team are going to take a look at the application load balancer first, and they'll get that working. So we've addressed the compute availability. What about the database? Can't quite tick that item off yet because there's more that Nikki can do to help address this concern. Now we've got this option listed here to use managed services. Let's see what that means. When you hear talk of &quot;undifferentiated heavy lifting&quot;, this is where managed services on AWS come into play. So we ask ourselves, what can we do on AWS to reduce heavy lifting on the database tier? When it comes to databases, you can host your database of choice on a virtual instance like you would in a traditional 3 tier architecture. So for AWS, that means hosting your database on Amazon EC2. More commonly architects and engineers choose to use one of the AWS managed database services. Imagine not having to manage database servers, and then imagine not having to manually patch database software and doing away with complex scripts that handle backups and recovery. If that sounds like heavy lifting that you would rather avoid, and you need a relational database like Postgres, MySQL, Oracle, or Microsoft SQL server, then you should look into Amazon RDS. If your app needs a NoSQL database and the idea of scaling your database to manage a million stock items for your web store, if that keeps you up at night, you should definitely check out Amazon DynamoDB. Both of these services are managed database services. Using a managed service helps you cut down on heavy lifting required in building, running, and constantly patching and upgrading the database software. As well as that underlying server instance. You can also more readily or easily scale the compute resources or the storage capacity. One of Nikki's goals was to reduce that heavy lifting, and reduce outages. So we're going to choose a managed database service. We'll choose Amazon RDS because Nikki had mentioned to me that her 3 tier app is already using a Postgres instance. Since Amazon RDS is a managed service and not hosted on EC2, we don't need the EC2 instances or the auto scaling group or the load balancer. We replaced all of these with RDS. To further improve performance and availability and operations, Nikki and her team can consider Amazon Aurora. This is a MySQL and Postgres compatible database that's built for the cloud. By using managed database services like Amazon RDS, Nikki can also easily create, read replicas, and a multi-AZ configuration, which will also improve the fault tolerance of the data tier. Now, Nikki had mentioned that she needed DNS service to connect the end users to this application. For many of you who have experienced running DNS servers, configuring the service for high availability and then building in an ability to service users globally can be quite an effort. For Nikki and her team, managing DNS infrastructure is something that they would like to avoid. So Nikki can configure Amazon Route53 to connect to the load balancer that serves traffic to those web instances. Route53 is a highly available and scalable DNS web service, so the team will not need to manage DNS infrastructure, and they'll also be able to use it when they scale to a global user base. So right, we've covered the core components, but we also need to help Nikki and her team address security, costs, and operations across that entire 3 tier architecture. Let's see the additional services that there are to improve overall security posture, reduce risk, and costs. We also want to address capabilities like provisioning, patching, monitoring, and so on. Coming back to our 3 tier app diagram, let's look deeper into those additional capabilities. First up, security controls throughout. For a 3 tier app, just like many other workloads you run in AWS, you'll need to consider identity and access management. You need to consider web application firewalls and DDoS protection. You'll need a solution for creating and managing crypto keys, secrets and other credentials. You'll need a way to continuously assess your virtual instances for vulnerabilities and a way to detect security threats and then manage and respond to any security alerts. You'll also need to configure security for each AWS service that you use. Luckily, like Nikki you can make use of native AWS security identity and compliance services. Additionally, for each AWS service, there are security recommendations available. So it seems like quite a lot is covered already for Nikki and security, right? Well her team definitely have a head-start on becoming secure, but it's really important for Nikki and her team, and you, to be aware of the shared responsibility model. For each AWS service, there is a differentiation of responsibility that's commonly referred to as security of the cloud versus security in the cloud. The AWS responsibility is security of the cloud. So AWS is responsible for protecting the infrastructure that runs all of the services offered in the AWS cloud. This means the hardware, the software, the networking, and the facilities that run AWS cloud services. The customer responsibility or security in the cloud will be determined by the AWS cloud services that you, the customer, selects. This determines the amount of configuration work that you, the customer, must perform as part of your security responsibilities. For each AWS service, there is specific security documentation that shows you how to configure AWS services to meet your security and compliance objectives. Lastly, like Nikki, you'd like to make your life easier by automating as much as possible. You'll also want tools to help provision your infrastructure in AWS and you'll want tooling to help understand and observe what's happening. What's the load like on those EC2 instances? You'll want to know what's changed in your environment. You might have third-party software that you'd like to install, and you wonder, can you easily do that in AWS? You also want a way to run operations across your instances and to schedule changes. The AWS management and governance set of services will make operating a workload on AWS, easier to govern, easier to manage and easier to control. This is especially helpful when you scale to many, many cloud resources. Nikki will also want to manage budgets and control cost. AWS cost management services can be used to set budgets and explore cost and usage. This will help you understand how to further optimise your cloud usage. Now lastly, let's see how we can help address on demand provisioning of dev, tests and pre-prod environments and give a way for the team to experiment and innovate. AWS CloudFormation is a service that Nikki and her team can use for provisioning their 3 tier app. And they can use that also for provisioning their dev and test environments. We also suggest exploring the AWS developer tools for code repositories, application build, and deployment services. Now, once the team has built that 3 tier app on AWS, there are so many things they could do from there. They might like to evolve the front end with mobile services, or investigate analytics services to analyse customer behaviour, or incorporate AI or ML services to personalise or enhance their customer's experience. There are so many possibilities. So hurray, we've covered off all of the items in the checklist and shown you how to architect a 3 tier application on AWS. I want to leave you with some takeaway thoughts and key resources that you should bookmark and look into. These will help you be successful with the next steps, as you take on building a 3 tier app or any workload in AWS for that matter. So for Nikki and her team, and for you, we suggest you take a look at these specific AWS whitepapers and guides. There are many more whitepapers, but these ones will be best to starting out on AWS with a 3 tier app. We also recommend using the Well-Architected framework and the AWS Well-Architected tool. It has questions and accompanying guidance to help you assess your architecture against five pillars: operational excellence, security, reliability, performance, and cost optimisation. You can use it for any workload you build on AWS. A really, really great way to get started is to take a look at the free tier. Nikki and her team, and you can try out launching AWS services to address many of the components of the 3 tier app we looked at today. If you haven't already looked at the AWS free tier this is the perfect place to start exploring AWS services. You'll be able to launch an Amazon EC2 instance, an RDS database, an application load balancer. You can also try out security services and provisioning services, and those developer tools. You should definitely check this out. Trying things out for yourself is a great way to quickly test and learn. Now, alongside that hands-on work, do go ahead and bookmark the AWS documentation. This will help you as you configure and explore the services. It's also handy to know about some other resources that might prove useful. First, there is AWS QuickStarts that are built by AWS solutions architects and partners. These are based on AWS best practices, and they come with an AWS CloudFormation template and step-by-step deployment guide ready for you to customise for your use case. The AWS Solutions Library is a collection of cloud-based solutions for dozens of technical and business problems. It's really worth taking a look here to see if someone else has already solved the same problem you're trying to solve. Now, finally, for more complete training and even certification, we recommend taking a look at what is available on aws.com/training You can start with digital training and progress from there. So thank you for joining the session, Back to Basics, architect a 3 tier app on AWS without the heavy lifting. I hope you've gathered some tips for your next steps with AWS. And please don't forget to complete the session survey to share your feedback on this session. Thanks so much for watching.