This course is an excellent introduction to APIs for beginners. This is an updated version the most popular API courses on the Internet. Craig Dennis is back as the instructor and in my opinion he is one of the best developer educators out there. - Hello, I'm Craig and I'm a developer. In this course, we are a term that you've That term is API or application In addition to being able to when you complete this course, you'll be able to You'll understand why they to list the many benefits You'll even get some a few popular web APIs, a taste of what all this We'll be starting from the very beginning, so there really isn't too much I'm gonna be expecting you to know I would like to request that you have a touch of experience with coding and a wee bit of knowledge about the web. If you've written any program at all, even the typical first program, you know the one where you If you've done that in you'll pretty much be It will be helpful if you of how the web works with but don't sweat it, Now, if you haven't met these the notes attached to this with some beginning web That reminds me, you should take some time to get used to your learning environment. The notes that I just discussed and I'll also drop more to keep you updated on from my right now to your to remind you to look in I think you just have should get in the habit There'll be tons of You might be getting a real This is a refresh of a course from 2019, which these days seems like If you saw that version, welcome back. Technology is constantly the notes wasn't cutting Thanks for all the feedback, by the way, a lot of yours and your are implemented in this All that to say, we got you. These videos have captions, you might benefit from having This space is all yours. If you want me to speak slower, please use the speed and if I'm taking a I make a pretty good chipmunk. And last but certainly of the fact that you are If you need me to repeat myself, use the video controls to rewind me. If you feel like you need something sink in, by all I'll be right here waiting for you. I know that I've gotten viewing habits with all Now, while binging might be a great way to consume an entire season it's not the best way Education isn't meant to be I'll probably remind you and encourage you to let what All right, let's get to it. API, those three little letters generate quite the buzz, don't they? First, I'd like to take and clearly break down what is meant by application programming interface. By understanding its purpose I think you'll start to see to understand why this term After we get a good grasp on we'll go and learn how to We'll get familiar with that you can use to interact We'll use those tools to to send actual text inteRESTing data back from a Once we get some practice in a web application that The application that we're to receive user submitted and then we'll use an API to these photos and you get Send me the latest photo please, what's for I can't wait to see what you build and what your family and We are going to be strictly we won't be writing our own. While you most likely are gonna end up learning some best we won't be covering that specifically. There are many great the creation thought process, of my faves in the notes In my opinion, the best any acronym is to focus For API, I think we should start on that last character, the I, interface. Let's talk a bit about the interfaces that you've seen already. Interfaces are all around us. For instance, this radio here, The interface allows me to do change the station, I I literally have no this thing works, but still to control the way that it that are exposed and that's The magic that is happening is completely abstracted away from me. I'm still in control of what has been determined that I, a user can handle. Interfaces usually evolve over time, like an alarm clock radio for example. It has my familiar volume and it also adds some new features like changing the time and setting the alarm. I still have no idea how this but the interface is something Usually, and as technology evolves and new options come into existence, they make their way into the Still abstracting away things for us, but enabling us to be in Sometimes these physical they even make it into GUIs. Hey, did you hear that? There it is again, GUI, G-U-I, This is my streaming There's my familiar Play button and I know what the Play but I have no idea how it does it and I'm okay with that What would I do in public Like, talk to people? Hi, how's it going? Now, the developer who wrote this streaming music application, of course, understands how the Play button works. She coded the button so the music starts playing. Here's the thing though, working with quite a abstracting the way some For instance, she wrote code that happens when the button is clicked. She probably did that on the button, like onClick. What she didn't have to do, that makes the button interact She didn't have to write the code that makes that familiar clicking noise. It was already there for her. Buttons are, in fact, an interface. They provide the developer its interactions while abstracting way how that actually works, implementation wise. This button is part of the API or application programming interface and it's available from that was used to create the app. Because most apps need buttons, this interface has been to our developer or By implementing the button was able to make her code run It's worth noting that uses a media player API the operating system of the This media player API abstracts details of how to send The developer knows they just want to call the play method on the media player API. I suppose too, the song it's being streamed over API call has been made over It's actually APIs all and zeros providing so let's take a look at what all of these interfaces have in common. They all define ways for us with an object, whether or software, and as a we don't need to understand we don't need to know how it works. We just need to know what or see, interfaces abstract Now, while the UI or user the user of the for the application programmer to use and extend in their applications. With the I covered in our API, let's take a deeper look at An API is a contract of sorts. It defines how it is expected to be used and it defines what you can Think of it as a set of tools designed for software developers An API is created to help by giving you access to with an abstraction of the not needing to know how it's They save you from needing to like when designed well, they happen with just a few lines of code. Now you're probably starting to see why it's important to get I want to do a quick word naming issues that These days, the term API as a way to explain web-based APIs. In fact, it's probably you hear API in the wild, it's most likely that people are talking We'll explore those here in a few. However, if we focus on all types of APIs instead of just the web-based subset, we'll get a better look so popular, so hang tight, APIs are everywhere in about everywhere you look, whichever one that might Let's take a look at one that They all provide some way you know, like a series of characters. Wanna make your text all uppercase? Just call the API method and voila. You could probably create by yourself by doing some on each character, but you don't need to because your programming that for you and provided It exists because this is a common enough problem Because these programming just interfaces, different their own implementation so that the code works properly in their environment. I think an easy way of about how different operating systems like Windows or Mac OS They're totally different, provides a single API for You can write one script and it works both in Mac and Windows. It's the implementation that takes care of all the details for Definitely something to be thankful for. It makes our lives so much about what operating system is of an API tool language There have been some it's been questioned if again, not the implementation check out the notes for more on that. Along similar lines, there you know, like Google Chrome, Microsoft Edge, Safari, Firefox, Brave. Now, you might not have but isn't it amazing for the web and it will This works because that web browsers all must implement in order to make that We are standing on the and we really should thank There are authors and that package up code to that you don't need to do it yourself. For instance, do you know make a photo black and white? Me neither, but I can download and import an image package into my I just call a method and boom, I wish real life skills worked this way. I'd import dancing so I could be more fun at weddings, cha cha cha. Frameworks provide an API what has been provided Like for example, most web the ability to add a new It allows you to write out dynamic data to a template that you of this with just a You don't need to understand but you do need to know how to what the framework is expecting. In this case, you're using to write a valid implementation Now, all these APIs that they're local to our code base, We use them to avoid recreating the wheel. That is to say they assist that we need to perform a ton of the work for us, the stuff that we developers shouldn't be worrying about. We should be focusing on the and that means a big part how to leverage these Now, I think this is an excellent time for you to take a break. I just gave you a lot to think about and I'd like you to take Why don't you jot down some Even if you weren't coding, I know that you've seen some in action. If you're having a hard I'll give you a hint. You're watching a video right When we return, we'll explore ones that aren't executing and why that is such a powerful concept. (upbeat music) It took me a while to It was in the couch. Anyways, this remote has There's a Power button and when it changes the channel, when it sends the request to my as if I turned the volume the device itself, and we I want to remotely control my device. I don't want to get up from my chair. There are of course, more to why we'd want to This cute little robot, for You can send commands and it even sends back sensor information. These traffic signs can This drone here is remotely controlled by an app on my phone, see? (drone whirring and crashing) And it's not just physical objects that benefit from remote APIs. Oftentimes we don't have for all the data that's have you ever used one of those apps that helps you figure You send up a snippet of a at a grocery store using your microphone, and it sends back exactly what song it is. It's usually Phil Collins. It turns out that both grocery stores and yours truly love Phil Collins. You don't have room for all the songs in the world on your phone you don't need to have all of them. It does all the searching and processing and it's surprisingly quick. How can it possibly do that? I don't know, but I love Ooh, that's another benefit of remote APIs, computational power. Because an API removes the you can gain access to seemingly A good example of this is the You can use the camera on your phone and in near real time it's to your screen, like instantaneously. It's using a ton of processing power to make that magic happen is happening elsewhere, &quot;en la Nube.&quot; It took quite a bit of experimentation and some evolution of we finally turned this remote Now, I'm gonna drop some history but I just want you to to achieve this concept of Now, most of the problem was that there wasn't a standard Things were pretty clunky for a while as these ideas were sussed A new architectural style and allowed us developers to interact with specific resources over the web and it quite literally changed everything. This style rapidly emerged as a winner and just about everyone began offering and consuming external Now, what I'm talking about here is REST, or representational state transfer. It was the approach that it's the abstraction that Like we talked about already, so rapidly that it nearly It's like how we use the even though Xerox is just Xerox does other stuff too, I think. That's how pervasive REST is. REST is for sure not the end There are definitely some limitations which we'll discuss here in a bit. Technology's ever evolving and of course there's movements that are still advancing the concept of the best remote APIs. Some terms you might even more on this in the teacher's notes. Now, for the rest of this a deep dive into APIs that are When APIs embrace the style they are said to be RESTful, cute, right? If you feel like you need a little rest, go ahead and pause me into what it means to be RESTful. Sorry, that was a bad and obvious joke, but as a developer you You don't really have an option. Because REST sits on like a really nice hat, we should probably do a whirlwind refresher (upbeat music) It might have been a while since you thought about how the web works. There are a smattering to reload into your working memory before we talk more about how REST uses them. So let's use the web, I've is an internet browser, and I'm going to use it I'm going to do this by putting a location in the address bar, a universal resource You might also hear this referred to by its superset term URI, Now our URL here has a scheme portion and this one happens to be HTTP. HTTP stands for hypertext Let's break that down a bit. Let's grab that last part, protocol. A protocol is also often It's a little lower level than an API, but it's similar in concept. You can think of it as defining the expectations of how to communicate. Like an example that I think really sticks with me is if you've ever been to a rally and someone does one of those chants where they're like, &quot;When I Fu, bar, one of those. Here, let's do one. When I say HTT, you say P, HTT, HTT. Oh, I just realized I might Hope you aren't in a coffee shop. Awkward. Anyways, we, you and I just I told you how to respond and you would've been breaking if you yelled anything creates an HTTP request for it also specifies a particular HTTP verb. In this case, it is using to clarify that this request That is, it won't be making any changes. The server receives the request that was transferred from the client. There's that second T. The server then does the Finally, it generates and sends back a response to the client, my browser, in this case. The most important part of For a webpage, that contains the HTML, hypertext markup language, which gives us the remaining Hypertext is text that In HTML, we perform that so with that response, the When one of those links are clicked, they kick off a brand new HTTP get request and the process repeats In between those clicks we've made the request, HTTP, as it was originally designed, is a stateless protocol. Once that request receives If you wanna keep some sort of to manage that itself and send Check out the notes for more on this. There are more http verbs, besides get, most common encounter a form that is used Typically you'll see the that you are submitting or Okay, so our protocol this hypertext is admittedly a little more complex than our rally chant was. There's quite a bit of that is included in the You've probably seen query and you know the stuff This is one way to pass Another common way this is through specific key and Both requests and responses have headers and they're used to what is wanted as well as Some of the popular request information about the like the language or the type of content. You can also state that you want the page if it has changed since a certain time. This technique allows for caching, which is a powerful concept. Why get the whole page if you already have it in your local cache? You can embed authentication information in each request using a header. In this way, you're essentially keeping your client logged in across requests. This response also contains headers. A super important one is the status code. This lets you know what and can convey things I'm sure you've seen the has moved, but hopefully It can also explain the content type, how large the data returned Okay, got it? Are you feeling good about Remember, feel free to if that was too much, I totally get it. That was a lot of information. It's important to have of these things because It uses the concepts that to expose resources that can Let's take a look at takes advantage of the web and its tooling for your benefit, profit. REST stands for APIs that meet the REST architectural style constraints are Now, a typical way to to cover the constraints Now, I don't know about approaching learning that especially from the beginning. I mean, we haven't even On top of that, most of the REST APIs that you'll use will meet So here's the thing. I promise that we'll go but let's do it on our own time, like don't learn 'em We could even make it a fun journey, like a RESTful constraint scavenger hunt, complete with prizes, Here are the guiding for an API to be considered RESTful. We'll check them off when we discuss them and then we'll loop back once Gotta collect them all, sound fun? Good. Let's get started talking of web technology, like a the client makes a request to a server. The client in this case is typically going to be your program and some sort of library to create The protocol used, you guessed it, it's HTTP and it's stateless. The server won't remember anything about the particular client. If you wanna maintain state you must send it with You'll do this using we talked about two of client server architecture and stateless. You got two knocked off Now, we should probably talk about what that request was requesting, right? Well, it most certainly was requesting information about a resource. Now a resource is a little It's the R in the URL or URI. We use the term resource Also happens to be pretty abstract, right? And this is because we can use resources to describe just about For instance, let's imagine On the homepage, there's a list Each of these books is a resource. We click in to take a closer and we see a link to the author, We click into the author a collection of all the Maybe we even see a group of fans, again, another collection, and each Clicking into a fan of their favorite authors and books. Everything is a resource. How about an image sharing So we have user resources which are resources, and So there's a lover resource, maybe there's an album There's an album resource and albums have a collection Turns out almost everything can be expressed in terms of Most of what we want our to the resources can be unfortunate sounding acronym for creating, reading, Now, as a user of the e-book site, all we did was a bunch of I actually did intend that one. We were reading, right? Just getting information we retrieved the author The web browser used a get request to the specific author page. The RESTful API follows the same logic, your program sends a get request to a URI. Then the server responds with data and of course all the HTTP headers you've come to know and love. The body is typically represented these days as JSON or JSON provides a great way to Every programming language some means of turning a JSON The content type is can specify in your request If you recall, there are These verbs are used in REST APIs to clearly state the Wanna add an author? Host to the /authors that you want to update in and these fields will be Wanna remove an author? Send a delete to that Updates typically support the patch verb, and you'll see we're able the create, request, update Pretty cool, right? What this means is that any application out there You could grab data, and even smoosh together This is called a mashup, there are a ton of APIs that you can imagine, and they'll all feel pretty much the same. You can build anything, there to do incredible things with So now the question becomes So why don't you take a quick let's explore a RESTful API together. We'll take a peek at how to use Spotify and their excellent RESTful API. (upbeat music) You have some newfound understanding of how web-based APIs work. I walked you quickly through some imaginary REST APIs and now I'm thinking it's time that we get Why don't we go exploring together? Some of these REST APIs from the comfort of your One of my personal favorites that allows for exploration is the streaming So here I am at spotify.com. Now, a quick word of warning, I guarantee you this site because they're always for us Spotify users, us lovers of music, and as well us developers. So I want you to try this. When you go to a site, you'll see here that this is really nice, Spotify's letting us kind of test out what it feels like in the web, on the webpage. But if I scroll down to the bottom, that's typically where Now, I knew this was I would look around for this Developers, and I'm Oh, I cannot tell you how good it feels as a developer to end up in like you're being taken care of, right? This is so nice. The Spotify for Developers, was thoughtful and I can tell It's a very nice tool. You can scroll down, you They give you some examples of what you might want to do, right? What could you build with this? So you could find out like you could use the and the sections and the bars. I think that there's a way to figure out if a song is danceable or not. So maybe I could import And if I scroll back up to the top here, you'll see that there's We've got this Discover, if you're going to explore you'll see that there's all APIs and SDKs, software which allow you to do different things. You'll see that there's ones for iOS, there's ones for Android. What we're gonna be focusing So if I click into that, we'll get a nice overview of what this is. I'm gonna blow this up just a little bit. So you'll see based on some simple REST, representational state that's what we're doing, that's We're going through our scavenger hunt. We're going through that. There's a Spotify web JavaScript Object Notation about music, artist, albums, and tracks, right? So that's awesome. That's great. So we can see all sorts It opens up at this api.spotify.com is the specific URL and then it has a set of endpoints with each unique path, right? Each of those URLs that there is a way to get specific data. So you could do this So, I could be a user, you could see what I recently listened to. I could have a playlist, But in order to do that, you need to have authorization You don't wanna be able to just add to anybody's playlist, right? So there is some and we are not gonna do anything So if you keep on looking down here, you'll see that there's, it's based on those REST principles and you'll see that it does get to retrieve resources, right? And there's the post to resources here are songs Maybe the resource you're of those playlists that we talked about. You can change using a put and a delete will delete the resource. So awesome, right? So it's You'll see that Spotify So it's a Spotify track and then it has this unique ID, this Spotify ID. This will make more a little bit more and then this Spotify URL that allows And it will show you this as well. As we said, the responses come back and they are a JSON object here at a tool in the future called Curl, which you can use from your command line. That's what this dollar I'll show you all this, that there's a lot of You don't want all the come back paginated and of We'll take a look at that here, you can see if the thing So we'll take a look at that that comes back, if everything's good, it's gonna say a 200 or these, And then there's bad requests. So if you ask wrong or that's the 404 or unauthorized, of those playlists, we get an unauthorized and there's also if you're a developer, you never wanna see It means that you made an We won't be doing any of those 'cause we're just gonna be hitting Cool, all right, so Spotify you can look at this and curl request, but one of that I love about their this happens often, if to the top, sorry if I'm we're gonna jump in here to Over on the left are the with their API and one do first is I want to it's making a get to the search endpoint. So I'm gonna go into there is it's set it up so that we can kind of build the query that we're looking for. So now we need to decide I think probably the ever search for, the first And you can see that here it's showing the different values of what that is. I would probably search for Beyonce. I mean, right, wouldn't you? And I could choose, is So the type there is important, you'll see that what's the curl here is changing, it says the cue is the Beyonce. So that's one of the parameters that we're passing into the And you can see there's different things that we could do here. What's really important is that it needs to have this OAuth token. Now what's nice is we even if we don't have a Spotify account. So I'm gonna do that. I'm gonna click this Get Token, I am not currently logged have a Spotify account yet in this user. I do have a Spotify And this is asking, is you would create a If you were ever to use this API outside of where we're doing this right now, you would create one of these log in later and you say So here's the playlist, right? We don't, we're not gonna do we're just gonna do a search. Maybe we'll look up some so I'm gonna go and I'm gonna So now it's asking me to either log in with my Spotify account, which I can, or I can create a new one, just in case you don't have Let's create a new one. And this will be at my So I'm gonna put in my email. So my email, I don't know but if you use Gmail you and it will still send to So I'm gonna do at Spotify any emails I get from And it's kind of a way to let And I think, so again, my Gmail but I'm gonna do SpotifySignup@gmail.com and it will go to my Gmail. It'll just kind of ignore It's pretty nice, right? So I'm gonna put in the which is 1, 2, 3, 4, 5, 6, just kidding. And what should we call you? Oh, you know what? I love it when you call me Big Poppa, that will appear on my And let's see, it is my Let's see, what do I, I think, wouldn't it be nice if I was born in 1999? What is your gender? Oh, this is nice. How nice. This is like super inclusive. I love that this is so inclusive. It's like somebody at to their people and listened and they included people or other, or prefer not to say. So like wherever you sit in Spotify for being inclusive, Share my registration data. Sure, why not? I am not a robot. I don't think I am. Oh, oh no. The images with bicycles. That one's got a bike. Oh, what is that garbage there? Is that, this is a bike Okay, here we go, please. Thank you. All right, so Oh, I am male. I am male. So here we go. That's how I identify. All right, I'm gonna save that log in and I am going to log in with it. So here we go. All right. So it's asking me if I have and it'll see my logged in And now you'll notice here that there is this token here, right? This is this OAuth token that got created for me by Spotify and it's putting it into this console for me so it can share it. Now you never wanna let your token out. If you get a hold of, somebody gets a hold of your token, they can And I realize that this is and I'm going to get rid of So you will not be able to have it. So I've got this token, I'm gonna click Try It and we're gonna do a search for Beyonce. Let's see what happens. So you will see that we So we got a list of artists, 'cause that's the type And this is the search that we did. We'll see some external URLs and we think that this is probably her. I'm gonna see, I'm gonna but you can kind of see how So this is my Spotify URL for that. Let's see if this is Yeah, yeah, definitely. So, great. &quot;Crazy in Love,&quot; &quot;Cuff It.&quot; Awesome. So this is Beyonce, great. So we got her, we found It has, shows how many followers she has. Wow. 32 million. Good job. And it tells the the genre. So we can do all sorts of And it's here, you'll see I'm getting a link that will open up her specific artist page, right? So, here is her ID. So if I take her ID, and I'm gonna come over come in here and I can show So you'll see it'll be artists/ID/albums. Let's see all of the albums that she did. But let's look at that in JSON format. So the artist that I want, there from before, right, now The console has done that and do Try It and we should see that now, it's gonna return back albums, right? So we've made a get request to of the albums that she's where they're available in Looks like she's available in lots of markets all over the world. Who runs the world? All We are going to look, let's That's the artist there. Let's get one of the albums here, let's make sure that we got it. So you see that it's got get access to maybe the So let's do that, I'm open that up and let's see, there she is on her horse, her magical horse there. So that's pretty cool, I can get access to all about an artist I can get by their ID. I can go and find all that I wanted to do, right? So, if I knew an album I could get the ID, I all sorts of amazing things. And then there's these playlists, right? So you can add a playlist, if I wanted to, I could post to create a playlist. Now of course I need to and that's a little bit but I could add, put together a playlist for everybody to do using this API. And again, when we are when when we're looking it's showing this curl command and we're gonna take a But I just want to take I want you to go and take a look, go back to this Discover section and kind of get inspired by So you can look at, there's where you can, I was right, you can check and see if there's danceability of a song. You can go and find a and you know that Beyonce's come back very high in the But lots of powerful of cool examples that have already gone and built. And you can take a look and how they use the API recommendations. This is awesome, really to you and you can do all of this because of the APIs that they provide. Pretty cool, right? You can get access to all and you can build tools I highly recommend that at what other people have It's super impressive. Did you notice how fast How could it do that search so quick? Oh wait a second, does it even need to? Those results don't change all the time. It's not like Beyonce is though I wish she would. Those results are definitely Cacheability is also and we'll get to that here in a bit. But this is a great example I'm almost positive that Spotify has set up things so that from its own server It's not rendered that As a user of the API, I don't know how it's doing that and frankly, I don't care. I want it to be available and fast when I hit that specific URL. Beyonce definitely appreciates how fast the results will return. She might even take that Let's go ahead and take a I'd love for you to move what you might be able to For instance, while I was using this API, I had this idea pop up. When I'm at a music festival, deciding which band I should Now I would love to have an app suggest to me which of the bands that are currently playing I You know, based on my listening habits, I'm pretty sure that you with the Spotify API and using a list of events of the bands And if you do end up building that, share it with me 'cause I need it. What other interests do you have that provide an API that you can use? Check the notes for more ideas. Now, after you come back from your break, let's dive a little deeper and make use of an API using our own No really, take a quick break. Seriously, it'll do you good. No binging. (upbeat music) While I realized that exploring an API on a website is informative, it might not feel like you're I think the next logical step in exploring is actually making that request yourself from your computer, not from a website. Now as I pointed out in the Spotify docs, there were examples that were Curl is an open source tool and forth and it runs and it's awesome for What do you say we explore it a bit? Okay, so we are back and we see that there is a Curl is a command that we Now if both of those terms are new to you, command and terminal, this to the notes and learn So my operating system is a Mac and it has an application So I'm gonna open that I'm gonna make this a little bit bigger. Let's go ahead, let's let we're gonna be in here for a little bit. So I'm gonna type Clear All right, so this terminal allows me to perform Like I can make it do text to speech. I can do Say and I can say, &quot;Hi mom.&quot; - Hi mom. And the Windows operating And while it's a little bit different, they're actually pretty quite similar. But check the notes for more on this. So what happens is I write the command and then I pass in In this case, it's &quot;Hi mom.&quot; Now, note that I used pass one value, even if there was a space, that's But with the quotes it's saying this is one value that I'm passing in. We developers spend a lot so if this is new to you, that it was new to everyone at one time. So please take your get you too frustrated, you've got this. So I already have Curl installed. I'm gonna just go ahead by typing the word I could see that I could type curl and then the command &quot;--help.&quot; Now if I didn't have this installed, if this came back with like, I don't know what you're talking the word curl, that's okay. So we're gonna head over to the notes and you'll get sorted there. But the starting point, where So you'll come to this page, you'll see this as a command line tool in library for transferring And that logo sure feels It does all sorts of things. What we're really concerned We're going to use this from the command line to get access to a URL. So if you don't have curl go ahead and pause me and the best way to get this There's a lot of different ways to do it. If you come here under Download, you'll see that there's So you've got your Linux And if you come down here, So there's different ways So go ahead, take your And when you come back, I want you to do this thing with me. So I'm gonna go back to my terminal and I'm gonna make sure that it works. The way that I always to go to icanhazdadjoke.com. How do you get a baby Oh, so good. Anyway, That'll let you go and and it's gonna give you back So now that we've got we've got our successful dad joke, let's go ahead and run So I'm gonna come back where I was running the search. I'm gonna make sure actually before I get can expire and depending it might have expired, So I got this back here and I should be able to get this from my command line. And what I'm gonna do is I'm gonna highlight this. This is a development practice known by US developers known as copy pasta. So I'm going to copy this and I am going to go back to my terminal and I'm going to paste and this long what this is doing is just saying, hey, I wanna make a get request to Remember, that's where we were at. We were searching and we're of Beyonce and the type of artist and we're telling it, &quot;Hey, I would like to get back JSON and I even though we're not The default has that there This is sending you a header, right? The &quot;-H&quot; is a header and authorization. And this is that long Now if all is working, when I press Enter, I should get here locally of data that we did and So what I'm gonna do up here and I am going to grab, wow, there's a lot of information here, right? When this comes back, And so I remember that it was down in here, this Is that the first one? So we got items, no, this is It starts with a six, VW. So I'm gonna copy that I'm gonna go back and and I'm gonna look, I wanna So I'm gonna come into here I'm gonna paste this URL make sure that that's still working. I'd like you to go ahead and pause me. I think I'd like to see can you get her albums locally on your machine? Can you go ahead and make sure that you can do the same Get Artist, see all of Beyonce's albums So here's what we'll do, you give it a try and if you, once you on your machine, you unpause me and I'll show Are you ready? You got this. Pause me. Cool. So how'd you do? So here's probably one way that you could have done it is just copied that, right? Copy this whole thing and pasted it. But what I wanna show you we know what these URLs are, right? So we know that there's we can see that there And then you can actually pass their ID in the URL there, right? That's what this ID is here. I'm gonna show you a little trick too. So, I've got her ID copied just ran that query and copied And if you did that, you did it right. I just wanna show you a little bit more of what else, how else we could explore. So I'm gonna press the up arrow and you'll see my cursor's moving here. I'm gonna press the Option key on Mac. I think you're gonna press You can jump around like of what's here, and I'm So that's the collection of artists. And I have that specific ID, right? So there's the ID and I'm and you'll see that I got back That's what I did and then I'm gonna go to the front of the line, it's Control+A on Mac, so artists have, this is and we wanna see Beyonce's slash albums, which is what the console But I just wanted to show of navigate and move through a bunch of different information It's kind of hard to see, right? So, kind of hard to parse. And this is something So I press the up arrow pipe that into a tool that it comes back very So this is something that is very nice to have and I piped that. That's this, the symbol this pipe symbol and it allows in this first part of the and put it in this part of the And again, this is in the notes. You don't need to, you don't but I know that I can query things. So I can say that of the items, I'm only interested in the name, the .name from each one of the items. And this is a little query language that's attached to this JQ program. You don't need to do this, if you're doing it from the command line, it's something that we do that with a little bit and the lists of her albums and That's powerful, and if poking around and moving one thing I wanted to make of is if we come back the console page here, they If we're back here in search, that I wanna make sure I know that's like something like, Who runs the world? Girls. But I don't remember So I'm gonna search for a type track. Now, note that my query has spaces here. Now what's happened here is So like if you were trying with the search, you'd wanna you did, you passed that So I'm gonna run that curl command and we'll see who runs the world, girls. And I am going to, I see So I'm gonna go ahead, Let's take a look and make I'm pretty sure it is, it What is this? Femme phan? Maybe it's some other, some others. So let's take a look. So, oh, I just went to the bottom instead of going to the top. So I should have went to the or I should have pulled, Rock-a-bye, baby. There's a Whoop, okay, so when the color stops, hope you're not getting So Beyonce is the artist that we want. So this is the one, we Let's see if I got the This is just something, you know, there's a lot of data coming back here. It's kind of hard to do, Sometimes I'm a little Here we go. Let's see what happens. Let's make sure this is it. There it is. There's Beyonce. Not the song I was looking for. Oh yeah, it is, &quot;Who And now I can listen to that. So it's like, who runs the world? Girls. It's kinda like who Boy, that was a big setup I hope that you enjoyed Curl is an awesome way to that often, just like we saw with Spotify, APIs will use Curl in their Spotify is just one API and there are so many companies and services out there. In fact, some APIs are the product. Like that's what the company's So now that we've been why don't we take a swing at another API? Let's use a different API, Twilio is a company that loves APIs. In fact, that's what more than a decade ago, It started as abstracting And by that I mean any way you'd ever possibly want to Wanna send a text message? Wanna make a phone call? There's an API. Send an email, a WhatsApp message, literally whichever way there's an API for all of them. Developers embed these and I'm pretty sure that you've probably used it without even knowing you were. Now, nowadays there's a that Twilio offers that they But under the covers it's still these APIs that are powering everything. I need to be a little I love Twilio, I mean, I love it so much, I even applied for a job But even if they didn't hire me, I know that I'd still show off I mean, with a single command, I remember when I first Like that level of abstraction is amazing. I mean if you've never what even is a text message? I mean, I know I have an use it to communicate with But how does that work? Like there's all those different cell carriers and standards I mean, I have no idea. And with Twilio, I don't need to know. That's the beauty of this API. It just works here, let me show you. All right, so here we are word of warning, this is going to look completely different from my So please make sure that you that might have changed this flow that we're we're going to sign up So I'm gonna click the Sign Up button here and this is going to look I know because our team is But the one thing that I right now is that you see that there is no credit card required and it So I'm gonna put my information in here and I'm gonna use the same where I do plus and I'm gonna So, the plus sign there we're gonna go ahead, I'm 1, 2, 3, 4, 5, 6, my luggage. How many times can I do that joke? And then I gonna do this accept, must be 16 or more characters. Okay, there's some password I think that's 16. All right, here we go. Starting my free trial. I'm ready. Let's do this. I'm definitely gonna 'cause I need that for later. All right, so I have now So let me make sure that I I am going to click the link I'm gonna verify my phone number to verify I'm a human 'cause all humans have phones. So we're gonna do (432)-527-4274. Please don't call too late. I'm gonna try that. All right, so I got my verification code. Hey that came very quickly. Well that's wonderful, my Hopefully your code's different than that. Wouldn't they be funny if All right, so here we go. So which product are we here We're gonna use the SMS messaging product and what do we plan to build? Let's see the, of course, these questions are gonna be different. What are we gonna do? We're gonna build, what? We're gonna build something else, how do we wanna build with So we are gonna end up with minimal code on top of So, definitely don't need but I'm gonna say with code So what is your preferred coding language? We're gonna do JavaScript we're gonna be doing JavaScript and I do want to host my code There's a nice serverless option. These options, like I said Just try to answer them So, and my building country is And I'm gonna get started. I'm I guess let's go ahead and so There's way more products that are available than you can see here. This is what got built based on the menu of what they thought, I can come to this Explore we probably won't need to do that 'cause we filled out what we're gonna do. And this is where you can I'll show that off here in a bit. If there's any problems you'll Manage your account keys and build trust with your customers. Yeah, we can build all sorts We probably won't need to do too much here 'cause most of the keys to us right from this page So we'll keep going and I can you're in a trial account and I think you get something like $15 to try with. So we'll be sending a text Dollar dollar bills, And then you can switch between products. So you can have multiple accounts, right? So if you wanted to come and do your own personal thing, maybe do something for There's a 1550 is what we got. All right. So, and then I'll click anytime I want to, I can look navigate around, which is So we could definitely go that we wanna do is we want So I'm gonna do that. I'm gonna click this, And I am so glad that this happened to me. It says that this account from provisioning new phone numbers, which means that thinks And you know why it is, it's because I put that Gmail account with a So if this happens to to feel offended or anything like that. I want you to check the notes for the latest ways to get around this. And also I'm going to go to email compliancereview@twilio.com and I should get that up and running. If this happens to you, check the notes here for what to do. And I'm going to actually do that. I'm gonna press Pause here. I'm gonna get my account and I will see you back All right, so I got all sorted out. So I sent my email to the compliance folks and I was able to say that I was doing a personal account and these APIs and they were So what I'm gonna do Get a Twilio Phone Number, that message 'cause I'm a new phone number and it automatically gave me this one, this one here, this 561. It went away really This is my Twilio phone Now this number is mine, which is awesome. I can use this message, I can receive messages, I can do all sorts of things with this. I can make calls, I can receive calls. This Twilio phone number I think we should do just that. We should send a text message. Now before we get started, I wanna make sure that you are on a trial account. So there are some limitations. You can only send messages and make calls to verified phone numbers. So when we set things up, we've verified, like I'm able to send a text to myself because I verified my phone number. I mean, and it will say, &quot;Sent from my Twilio account,&quot; beforehand. And there's more things if you wanted it to get into that. So, check the notes because have changed, but check So let's do it. Let's send a So I'm gonna click here and I'm gonna click I'm gonna go these developer are some of the best that I want you to see these. So we're gonna come in here under SMS 'cause that's what we're doing, right? Short message service, and these sides on the docs So I'm gonna come in I'm gonna go to this message resource. Now this is an API, right? So we're in the API reference. So the API that we want to send from, and we wanna that we just got and we wanna send a message to my phone number, right? So we're gonna do that and you'll see that over here on the right, there are things that you can do that So with this message we can We'll start with creative message, we'll create a message first. So we're gonna go into and there's these So we have no JS and you can see the style that it looks like, we'll take a look at something like this here real shortly. This is a helper library So you don't need to that we're about ready to have to do. You can do things a But what we're gonna So here's our friend, Curl. We're gonna jump over here to really nice thing where I'm So I'm gonna click to copy this and I'm gonna pop over to my terminal. Now again, I'm running on a Mac. So there's a couple of things that it's going to be okay It's going to assume that these slashes, see these slashes at the end these show that we are in the new, we're making a new line available here. And also you'll see that there's these account SIDs and these Auth tokens. This dollar sign Twilio Twilio Account SID, in my terminal, on my Mac, that is what's known as an environment variable and they've been set. Now I don't have those set currently because I just built this account. So what I'm gonna do is kind I'm gonna actually put my real information here for us to use. So, back here on our console, on our Twilio console you'll called this account SID So this is my ID, my unique ID for the So I'm gonna go ahead and I'm So I copied that, I'm gonna come back here and I'm gonna move my mouse and I'm gonna remove right here where So that's string identifier. So that is the way that Twilio I'm gonna go backwards And so if you're watching here on Windows, let's just go ahead, these new lines here. So I'm gonna just put we can handle that, we'll do that. So I'm gonna get rid of it will work completely on both Windows and Mac for what we're trying to do. So I still have my account SID here, so I'm gonna keep on backing up here and I'm going to get rid And you'll see one more time here, there's the Twilio account SID, that string identifier for So I'm gonna paste that there. So now the API call that I'm doing is to that specific account, and you'll note that it's So because we're creating So we're using post to create a message and you'll see here and the number actually there to be the Twilio number So that new one that we just got, we're gonna say that is I'm gonna copy my Twilio So I've got my 561 number there and I'm gonna paste that here. So you know from and this So it's got the, it's called So it's (561)-816-5433 is the And we're gonna say by the body of the message, right? So we're, instead of that, and note that this is all in quotes and we're gonna say, &quot;Ahoy world.&quot; I don't know if you know this the way that we used to the phone would ring and And the other side would go, &quot;Ahoy-hoy.&quot; So we like to do that here a lot, at Twilio we say &quot;Ahoy world.&quot; It's kinda like the hello world of this. So the body of the message, to get is gonna say &quot;Ahoy send it, I'm gonna send So this is one of those right when you created your account, you verified that you had a number. So my phone number is (432)-527-4274. Don't text too late at the final thing that we have Now this is a very private key, right? We don't ever want anybody to have access. This is like that Spotify We don't ever want anybody to have it. I am going to, I trust and I'm gonna paste that So that is something that you never wanna let out 'cause now you could seeing this on my screen, you could use this, right? And you probably don't So you never wanna actually You wanna hide that and we'll talk about how to do that But right now I just wanted to show you, we're gonna use Curl, we're gonna send a post to this URL here and you'll notice that ends in JSON. So that's what we're gonna get back. That's the way that it works. This is to my account, my account SID, you see it starts with this AC and we're gonna post using So the way that the Twilio some parameters, it takes from body and to and the way that you pass those in curl is with this --data URL encode and you pass what it is that you want So we're gonna, if all of this works, I should get a message back. I should get a text message on my actual phone that says &quot;Ahoy world.&quot; Let's do it, and it looks like I'm So where is the quote that I'm missing? I don't see a missing quote. I can go press the up arrow, Yeah. Oh, right. You know how many times I do that? The ahoy world, the exclamation point is something that you So I'm just gonna say &quot;Ahoy world&quot; with a single quote there. So, if you're having that problem, sorry, that's what that was. So I pressed the up arrow to and now if all is going we should get a text, here we go. And so I got this message back, I got this and sure enough, here it is, I got it. And you can see here it says that it says it says, &quot;Sent which is fine, we're in a trial account, that's totally fine, but I my actual phone, I got that We now have the ability to send a text message from the command line, right? That's pretty cool. Let's take this a step farther actually. So we know that that I was able to get information back. I'm gonna go ahead now and I'm and I'm gonna get rid of all I'm gonna get rid of the and I'm gonna change, I'm gonna make that, I'm gonna do a get and let me So I'm gonna get rid of I'm gonna keep that same account SID there, right in what we're gonna do is what we should do is we should get back all of the messages that are there. So I'm gonna hit this kinda So these are all the which is awesome, here it is, sent from your Twilio trial account. So, and actually I can make this look a little bit prettier totally optional in the Yeah, there we go. So you can see that I've that's sent back here and that was sent in was sent to me from that number, And like I said, curl's because it's gonna be if you're in Microsoft I tried to make that as but I you saw that I did like I couldn't use the exclamation point and things like that and So stay tuned 'cause there are Awesome job getting that It feels pretty good doesn't it? What a cool skill you have now, from your machine with Now believe me, this is just the tip of the iceberg of what you can do. There are so many more and now I know that you For now though, let's take Now I don't know about you when it comes to long like we just did with Curl. When exploring APIs, I really If you don't mind, I'd love of course, right after (upbeat music) There are a few tools that I to explore new APIs and I I used these to dive in and get my hands dirty and organize my learnings. One of the most famous probably already heard Do you get it? Postman. In addition to being a pretty good pun, it's also a powerhouse of features. Postman started as a Chrome make API calls and what a powerful enterprise ready and whistles and even for the most popular It's jam-packed full of features and in my humble opinion, all that just yet in There are entire courses on and I've linked to a few There are other tools that allow you to explore I like to think of these apps as the built in the vein of postman. There's a whole genre of video games that gets dubbed Metroidvania, because they're similar to Now these apps are Let me show you an example. I just bought this lamp here, it's rad, it's from Govee and it's got this app that I can use to control it on my phone. I can change the colors, right, and I can even make it (Craig beatboxing) It also has an API. These are the docs here and I'm gonna save them in one that I've been using Like here I can see all of the devices that are associated with my Govee account. And I set that up using that it is a get request and it sent the request and I got back the Govee devices that are This API requires a header And you'll see these double this side little mustache thing. This is getting things it's a special key that I I'll show you more of those here in a bit. Now notice how this is a get, so I can send the request my response and I can also So I have a different call here. I can get the current state here we can see that this is and I can also turn it on turn it on and I can also So I'm gonna turn this to red. You don't have to turn Pretty cool, right? And I have this here to tweak things, when I and when I want to use it in my code. Did you just have a light bulb moment? I quite literally just did. Let's see if we can't build one of these for the Twilio APIs. So if you'd like to please check the notes. This is an open source tool and it's getting better every day. Now if you love it too, I highly suggest that you star it. If you click up here, actually check out the see cute little Fox here how it's tagged that, oh I guess maybe that's a little bit better than my Metroidvania analogy. Maybe REST client's a good thing. API client, that's also a good thing. So there's lots of these But let's start using this one. So I've got REST Fox I've got the Govee folder, And typically what I do is group these by the API that I'm exploring. So let's keep poking around So what I'll do is I'll make So I'm gonna right click over here and make a new folder called Twilio. And now in here we'll So I right clicked New Request and I'd love to explore So let's see, oh you know what? This new number that we just bought, this Twilio number that we bought, not only can it send messages, So we could send it a So let's go ahead and send Now if you forgot your number, So if you come to your a little bit here, you'll So go ahead and send Now my number, I'm gonna send a number. It's (561)-816-5433. And there we go, it went a default message back we could make, we could but I'll show that off later, but for now, I just want you to know that by sending to this API and And you can also find your phone number later here under this phone numbers. If you go to Phone Numbers, you can see your phone of trial mode you could So that's an important thing to know here. So, all right, so we are going to look at the incoming messages. So we should do that, we should call the request We'll call this incoming message log. That sounds good. And we'll click Create. Okay, so let's head over to the docs and see how we might do this with, so back in the docs here remember this is where we I'm gonna see if there's Ah, list all messages. That's a good one. But we don't want all of the messages, we actually want to So look here, we can do this That's great. So we're in here, I'm I could be in these different ones, but this is the example that we want here. I'm gonna grab this URL, So that's how they're filtering it. There's some stuff here at the end. I'm gonna grab all of this I'm gonna come back over and I am going to paste it here in I'm gonna paste the whole thing there. And it was a get request in this query string that came afterwards. And a query string is, you know, defined by this question mark. So we don't want this date And what's next? We don't We wanna look at all the numbers that were was sent to, right? So this is the to here, is what we want. Now this 2B here just 2B URL encode and happens to be a plus. And I know that and I just happen to know that without having to Google to know like how do I Wouldn't it be nice if this tool just did all of this URL encoding for us? Like we didn't need to Well check this out. This is what we want. So We don't want to have this We wanna put in to, we're gonna add one of those things there. We'll put in a to. So that's gonna append And I'm gonna put in, to my phone number, which again my Twilio phone number, which is over here in my logs right here. Actually I can, I'm This is my Twilio number. I'm gonna put it in the format that is wanted there in my So I'm gonna fix that and Just wanna make sure Got rid of all those. All right. Now also remember that this was accounts and then it had account SID, right? So that's the ID for my account. And then it's under messages. There's a collection called Messages underneath this account SID. But what we want here is we want, that was using an environment but this is also known as A path parameter, so here, down here we have this path parameters. So the way that these work actually to replace them is if we go like this, if I get rid of this and I put a colon, what's gonna happen is we in this path parameter So let's do that. Let's add this item. And again, that is Twilio account SID. So that's the name of the It's colon, Twilio account SID, Let's keep it 'cause that's what it is. And then we're gonna put So that also is on my console. So I'm gonna flip back to my console. And on the main page here, if you come in, you can come down and you So now I have my account SID, and I'm gonna paste that there. Awesome, and I think we're ready. I'm gonna press Send We got a 401 unauthorized, Oh that's right. Of We don't want anyone just being So we wanna make sure that we have some authentication happening. So I'm gonna head over to the Auth tab. You'll see that if I I don't know how much but you can slide these So I can, I'm gonna that when I do my little So I'm gonna choose Auth from here, but that is also available So like it's just a different view of it. All right, so in the Auth I'm gonna put in a basic Auth and I'm which is my username and my password, which is And again, this is very private and you would never ever want to do this. You now know my Auth token. because you could do exactly anything you wanted to to my account and one of the things the messages that were sent in and look, there's my &quot;Yo,&quot; my &quot;Yo&quot; So also I wanted to show you Let's take a look at that. You can see that what a get that was sent with And so that was the account if we look back at the the account SID showed up did a two URL encoded the question mark in for us for us automatically URL And we can see the headers that were sent and we can also take a look. Let's look again at this preview. So we see that we had, the response came back So we have a key called messages. And this messages has this, it starts out, there can be multiple So this is the start of what's known as a list or an array and And the start of the object of these mustaches, and 'cause if you kind of it looks like a mustache. So all between the opening is the information about So here's the, and there's There's only one. This is And so part of the we can see who it was to, that's my Twilio phone number here. And we could see the from, please don't call too late, And I did say, I said &quot;Yo&quot; So now we have this. Now this This is something that I like All right, so there's I like to keep notes and I put those in the description over here. And so let's see this Well, let's be a little bit more, all messages sent to And one of the things that I like to do is I like to put on the docs here. So if I ever come back and I want to find how was it that I can go and look and put a link there. So I'm gonna go flip back And this is read a message I'm gonna copy this or click this here so that then I'm gonna copy this and this is what I'm gonna store in my notes. Again, this is totally for you for later 'cause a whole bunch of these and you might not remember how you found how to do that. If there's something specific or strange about the API that she wanted to know, I keep the notes in there and it's a just a handy learning tool and So we've got our first entry all set and I think we should add another one. Why don't we create the So the one that we did before we sent messages, let's do that. So I'm just gonna duplicate a bunch of the information So I'm gonna duplicate it and I'm gonna duplicate and I'm So when we sent a message before, remember it wasn't a get, it's a post. So I'm gonna change, I'm gonna change that So now we've got this send message that's a post and the query string. I don't want to send a So remember wait, before when we did this, we sent it to using the data URL encode. In fact let's go, let's and look at what it was that we did. So in the documentation over here we have this create a message resource. So, on the message resource and we can go to this and there's some information about it. So you send this http post we were, remember before URL encode and we were So it's this form encoding And oh look, well a couple things actually there's a nice warning here. This says if you wanna send messages while in trial mode you must So if you wanted to send to somebody else, you could put them in if you wanted to, you could Just there. That's how you do that. If you wanted to test or show somebody what you're building, After of course, after you could submit to So when we are creating a message, we must include the to, right? We need that and we need the from. So we'll do either and this media URL which means Let's do that. Let's make it Now when I am in REST Fox over here, I don't want to use the query anymore, I'm gonna keep the path 'cause So we're gonna do, we're gonna Twilio account slash account and we're gonna make a post a list and retrieving, So we're gonna go under we're gonna make it form URL encoded. And what we wanna do there so I'm gonna send this to my number. Again, don't call too No really, if you wanna call and get feedback, that's So we'll do from, and this is my number and So we can come here into the message log. We can go pull that number So this is my Twilio number there. From is this value there and we are going to add the body, the body will say sent from REST Fox and let's add our media URL. And I just happen to have which you will have to check out for yourself to know what it is. But it is a photo that that I'm going to send to myself. It's also in the notes if if you wanna copy that and paste that. So here we go. I am going to do a send. Now remember I'm also and password 'cause that So I'm gonna do a to, from, So now I'm gonna go ahead we got our message back, right? So the response, we got So it was created in the body, we can see the body of our message. The key is sent from REST Fox, We can go ahead and get if we wanted to and it's got down here, which we can And we could, if we wanted to of these and explore and But let's take a look Before we do go to look at that new tool, one thing that I don't are in my, in these requests, in these separate requests, these I've got this username and password. If I go to my post send message, I've got this username and password and they're duplicated there, That's not excellent. One of the things and one of REST clients provide is a And let's set that up really So if I come here under this environment, here is my default a new environment, I'm Now the way that these work So this is, remember this Now if you've never written JSON before, take your time, use some patience. One of the things that you and you can put in account and you do the key and then you do a colon and you can see that JSON down here, it's helping me out. And now I'm gonna put in let me go copy that one more this anymore 'cause it will It will be here with me, So come over here, I'm gonna paste that and now I want to add a new key. So the way JSON works is you And I'm gonna put a new, the new key here and we'll do a Twilio And again, this is, that can you want it to be and we'll So I'm gonna come and grab my Auth token and I'm going to change this, right? So that's a great use case to be able to, I am going So as soon as this, as soon I'm gonna change my Auth that I'd have to go But now I have one place I have one place in my So I have this environment Now instead of username I can And I can say Twilio account SID and that's the way the And then most of these REST clients and you can do Twilio token. So when you see that's what's happening. That is the environment, it's using the environment variables. I'm gonna go do that for here. And also I'm gonna copy And so now I only need to in my environment and So like not like before I can, I can also put my account SID here. So that will also make this So if I don't specify my information in here, I can share it. So you what you could do, and to do it, why don't you try to and see if you can figure out how to add to your JSON there, and then you could replace it, right? You could replace it here with your from, from your Twilio phone So that's a good, little trick You could do your Twilio phone number, you could use it there too. So anything that you're using is something that you can kind of store And what's nice about that, let's make sure that it still works. Yep, it's still working. And let's make sure, make sure my, oh, I'm not gonna send another So we know that this and it's here and I don't need to go back and get those every And what's nice is you can and we'll take a look So when we get back in a different tool and I know that you're probably So let's take a quick break can't retrieve that pic that But let's do that in another right after a quick break, that is. (upbeat music) All right, quick refresher. We had just sent a message from Here's the body of the message and we actually sent You can see here it has each text message can have And if you scroll down here, is this key of sub resource of an object here and one And what this will do is at this URL will give us the accounts for this account, for it'll give us all of the Now, typically when I have we could actually add another one here. But I thought I'd show you a normally looks in case we wanted So I use an editor called It's free, it's available and this is where I do my coding from. So I start here, I start I would love for you to because I wanna show you that will allow us to do So go ahead and pause me, get and when you do come back (upbeat music) Okay, so once you get and running, if you press Command+Shift+P, there is a thing called extensions. And this will do a little, if you type in Install Extensions, you can come here and you can see different What I want you to install We're gonna do install a And it's this one here, it's a lightweight REST It's really powerful and the good news is, is it is Postman-esque. You are gonna feel very familiar when you take a look at this. So if you do it, you can And what will happen is there'll that will install over here like so. And just like you've seen this concept of collections So I'll make a new collection what I'm doing is I'm coding and I'm like, ooh, I wonder what this is. I'm gonna go explore it a little bit and I'll explore it right So I'll write my code here and just take a look at what was there. And so let's go back to that REST Fox that we had here, right? So we're gonna do that. I'm gonna grab that and I'm to Twilio, I'm gonna make a new request. I get to name it. And Let's no, we're gonna do all media. All media for a specific message, right? So here we go, I'm gonna paste that URL in here and of course it's missing that first part, which was api.twilio.com. So again, this is the going for that account to those messages. I'm gonna look here at where it says Auth. So it says inherent This is a very nice thing and has too that REST Fox We put this in our own but you can make, for this we can actually do the And if I come in here, I can set the Auth up here so I could do this basic Auth here and go grab my stuff. And so just a reminder that before we were in and I was able to grab the So let's go back to our code is the username and the password. Let's go back to that The password is that Auth. There we go, we'll paste that there. Perfect. So I'm gonna click Save on this. And so now this all media should work. So I'm gonna go ahead, I'm gonna do a send to this and there And we can see there's a And again, it's an array of those and this is the list of all of the And so now look at this collection. So we have a collection of accounts and here's a specific account. We have a collection, That message has media and a media entry, and that's it. This is what we're looking at right here. So something that's pretty cool. The way that this works is if I get this, I can get some metadata But if I get just a little bit of it, if I just go ahead and the way that Twilio works, but if I do this without I'll actually get back So I'm gonna do that, I'm gonna make a new little request here. So a new request, and we're gonna call this, get the pic, right? We're gonna get that pic that I sent 'cause we don't, still don't What was it? Let's go take a look. So, again, at the end At the end of this, there So I got rid of the dot put it the front here, And the interesting thing is not authenticated and you end up actually having some problems. So I'm gonna tell this to not inherit value. So I'm gonna disable this so So when I click this, if all goes well, we should see the pic that I submitted, awesome, and we do, cool. So it's a little big, it's a little big of a And we could take a We could look at the So we can see a couple things. One of the things that I when it says last modified, if you have a request that has this on it, it means that you can use caching. So you can, when you make the if it's been modified So I'm gonna do that, I'm gonna grab this. Let's just take a look So I'm gonna go to headers here and I'm gonna put a new and you can see that So it's if modified since. So again, this is the I'm making this request and modified since then, give me And so the way that it lets So that's a status and you'll see that I got zero bytes back. So that is how caching works and what you can do to send this across. So, this is really powerful, right? I didn't need to set up And it's kind of really a I don't actually even I can just do a new request of explore through and see Which ding, ding, ding, of a RESTful API Using standard HTTP caching mechanisms like last modified and e-tags, a RESTful API should support caching. It's up to you to maintain and decorate requests, really handy to avoid And those are the Postman-esque I wanted you to be able to necessarily to do all of the that you wanna do, but I think it's time. I think you should feel look at Postman and see what So I'm gonna go here and quick little Google search for Postman. And this is really nice. You can do this for whatever And since we're working with Twilio, I'm gonna search for the So there's some docs on Twilio about it, but if you look here, there's this Twilio So this is important of things on this API network where they've built APIs for So I'm gonna click this and now note I'm inside of a web browser. Postman's done a really gorgeous job of letting you run inside of your browser. You also can run it locally but I'm gonna run this from my browser. So I'm gonna go into this there's all sorts of It's a little bit hard to get to here, but you could change things. Put in your account SID, Like we saw, look, here's And here's a thing to send It's neat, right? And so you've seen this. Here's your authorization, the headers, the body, there's collections. And what's cool is somebody's already built these collections for you and they're sharing your So that's kind of nice. So there again, there's And the path variables coming up here. There's the call and from before, here, somebody's the https API twilio.com and So it feels very similar. So There's also a bunch of other can do that could get a And that's what I was 'cause I wanted you to But know that this exists. One of the really cool if you click over here on there's this little code, This is really neat. So we could see, this and do this and this, this This is how what we actually did, we did this curl statement, You can do this in any So the trick here, the any programming language that like it has a client built into it, because these are all We're following these constraints that have been defined, it can So here's node JS using So Axios allows you to fetch things. So this is what it would look like if you tried to write that using Axios. And if you look in here, here it is in PHP with Guzzle, I like that though, that's why I chose it. So you could see that it's And if I copy this and pasted it into my PHP code or my Python it would just work and that's really handy that is if the company that's a helper library or an SDK, which we haven't looked at Twilio does have one of looking at one of these that didn't, this is a great way to get that code. So again, check out the API network, this Postman API network, it's cool. I think you're ready now But also feel free to use the other tools, explore the APIs in a comfortable way, wherever you might be 'cause there's all sorts on Postman and like I said, to take full use of all of Awesome job diving into a super powerful tool and it There are so many features We barely even scratched the surface. There's an entire course out there on it. Check the notes for a way to see that. We saw how to organize into collections as well as share common and secure values by using variables. We learned how to add both informed values, And we also saw how to navigate through various sub resources via clicking URLs. We even saw how to create your request, while we were you might have noticed the code examples on the screen on that page. It's possible the tab implementations and solutions. Many products offer or software development kit you to interact with their As you can see, it abstracts Let's take a look at the Before that though, just a quick reminder to make sure that you check There's a link to a repository that are ready for you to use. There are lots of great All the tools that we just looked at are great for accessing However, when it comes time you're most likely gonna wanna write some code. Now as we saw in Postman, you can actually generate code. All programming languages of making HTTP requests and are all we really need to So writing that sort of but you'll find that of what is known as boiler plate code. By boiler plate I mean and almost always the same, Many products and services have created a solution to help you avoid this problem. They're often called helper libraries or SDKs, software development kits. They'll be specific to These libraries help make your code more concise and legible. They usually also provide for your editor, which I find super handy. Let's go check out some Okay, so let's take a look at Let's take a look at the So again, I'm in the docs SMS, I'm here under the curl when we did this, we went We passed the from, the in these environment variables And this dollar Twilio Auth token, their environment variables and it's also used here in the URL. So we had done that, we Now one of the really nice things about these helper libraries is but it's taken away this whole notion. So let's go here. I'm Now, quick word of warning, there is some stuff here that And I want this to just I want you to more feel what and don't be too concerned all of the things that can of the folks who has the Please don't feel like you need to fully understand all this. I will walk through this code what it's doing and it we've been doing just in that you might not yet be familiar with. So I'll take my time give yourself some patience. In fact, I'd like to the boat where you have before that you watch me and do it later, we're of the fact that we're in a video, right? You can take me right back to right here and take me back to right So one of the things that I love about Twilio's documentation is that you can just copy it and it should work. So this is what was happening when we created something here, right? So we created a message. So this is, you get this We know what that is. We authenticate with our and our Auth token like we've been doing. And then we're gonna do So client.messages, .messages.create, and we're and the to and it's got all And then there's doing some So then we're gonna get a promise back and then we're gonna get And this console log is going I don't think we should send a message. Why don't we look at the Let's do that. So I'm So I'm gonna choose down Awesome, so we'll take a look at all of the messages that are in the account. Now what I can do is I can just copy this. So I'm gonna copy this and I'm gonna run it on my local machine. Now I'm just exploring, and this probably happens So typically I have a folder And if you wanna make Just kind of put this And then you get into that directory. If you're doing this in there are some instructions in the notes on how to do exactly that. So now I've got this Now I told you before I was which I hope that you have installed. And so I'm gonna do code for you, there are instructions on how to get this installed What it should do is pop open my Visual Studio code So I'm in this directory here and I'm gonna make a new file here. I'm gonna call it explorer.JS 'cause this is typically what I do. So I'm gonna come in here and Awesome, so now I have this code here and this code is on my local So now I'm gonna try Now one thing that I to do is I need to download So if I wanted to go here, I I happen to know how to do that. So I'm gonna go up here under New Terminal and in Visual My terminal can actually run to open it is running And what I'm going to do is to install the Twilio Helper library. So I'm gonna say NPM Install Twilio. So NPM is node package manager. And if you do not have check the notes because it means that Node is probably not installed And if Node is not there is a great walkthrough in the notes on how to get Node installed. So I now have Twilio which means this required Twilio statement here is requiring that library. Remember in REST Fox how and we stored the account We can do the same thing We can set up a little environment here. And actually if we go ahead and we click this Twilio Secure, in here and how you could do that. So one of the things you can see it's for Mac different shelves do different things. If you run this in your command line, you can set your environment variables and then when you run Node it will work. I'm gonna do, I'm gonna do this one. So I'm gonna copy, copy this here and I am going to just paste this. We'll paste this, I'll So it's saying we want and my Auth token just we're So we're gonna do that. So I'm gonna pop in my I'm gonna go back over to my console, scroll down and grab my account here. And then I'm gonna paste and grab my Auth token and So again, I got to that, my Auth token in the wrong line there. So I know that it started paste it down here where So basically what this is a new file that will I'll show you that here in a second. So there's my, it's gonna I'll show you what that looks like. So it's gonna create a new it's gonna append that that's and then it's gonna source that, which means run that environment variable. So if all is working and I can do Twilio that I have that this file here called Twilio.env and you can see there is my which is nice because now this code works, it should be working and using this. And in fact if all is Node installed, I installed I put my account SID from the console into this Twilio.env and then I the source Twilio.env and put those variables into And as I showed you So let's go ahead and So what's gonna happen, let's I'll show you, let's see, let's Cool, we did so let's walk So this is pasted So we're getting a client back this is a Twilio library and when you get the Twilio library, if and an Auth token, it'll a brand new REST client for you, right? So this is a client that you're able to use to hit the REST API, a Twilio. And because it knows who you are, it's able to access stuff on your behalf. So very similar to what we but this client, we can it will always be authenticated. So we're saying of all of the messages, we want to list them, right? So we wanna get a list actually not all of So let's go ahead, I'm gonna just, we know that we haven't sent So you can kind of just So we're gonna say of those, and then I'm gonna bring here so you can kind of see, let's change the structure of this a little bit. So we'll say client messages and then we're gonna do a list on those. Now the way that this works So JavaScript is asynchronous is new to you, you probably haven't encountered its asynchronous behavior. What we're going to go be overwhelming, but if you stick with it, I promise. Now I've added notes, but please, please do not I just want this to go what's happening here and because our client here, these that which means that and do some things and then When that comes back, So this is how a promise works. So it's going to say then that request, then give me what's kind of strange about that is if you're probably used to So I'm gonna write out to the screen that's this console log. I'm gonna say Starting Program. And we should see that line print. Now you might think that it's gonna run this and I'll show you here, if and I say gathering message it's gonna say this, but immediately it's So let's do that. Let's I didn't save it. So of So you can see this little It didn't save, so I'm gonna save that, run that one more time, here we go. And you'll see right away it's a starting program gathering message log. So it ran this, but then So it did not wait because What's happening here is is client message list returns a promise. Now it's a promise that will be a value and And so the way that you then waits, it defines a function here and as soon as this is done, As soon as they come back, So that's what happened, right? So it came, it started, And when I say function, this before, but in JavaScript I'm gonna put parentheses here so it's a little bit more clear. These are the parameters for the function. And this fat arrow is saying, this is what happens when the function runs, this like little, they It's kind of cute, right? So it's an equal sign it's called a fat arrow and that's a way of quickly defining a function there's another one here So it could be a little bit See how all these parens it's kind of kind of hard If this is your first I totally feel for you that comes through here is an array. So, what was very nice is it This is an array, it was a They have this method And it will let you loop that are in an array and that was inside of that So what happened was the client made the http request, it got Let me just go show you one more time. Let's make sure that we're So we, this is the same This JSON was returned, right? This JSON was returned, for us was it inflated So these are, this is a string of things and it came back JSON but with each of these messages So let's look at that again. So list returned this object, and each one of those in that array I'm able to use an array method for each. And this message is an actual object that has a property called SID. So again, if that is all don't worry too much about it. Basically we went and got the messages that we got, One of the things that of as you're looking at this sometimes as you work APIs that you hit are going You might see that you need to be able to, you might run into an error and what might happen is In fact, let me cause one to happen. So here it's supposed to say Auth token, I'm just gonna put in my luggage, the password to my So that is not my account So I had the wrong account SID. So I'm gonna say that this is what how I want and it's gonna go to try to Let's see what happens when it fails. Well I didn't save it Boy that's a lesson that You gotta make sure you save your file or the code doesn't run. So let's do it again, and get any error at all and that is something that is very strange because obviously I didn't get any of the messages back, but it doesn't look So what's happening 'cause this then never runs, right? We never get a chance to run this 'cause this list method didn't So one of the things you always is to every promise you can and I'm gonna make a fat a function happen here that Okay, so now I'm gonna print that out, I'm gonna print out the error. Let's run that again, Ah, now we see the error and you'll see that sometimes this is what comes back is there was an And we got a very specific and it will help us kind of Oh, here, great. This is right. My Auth token is wrong, the wrong combination of Exactly. That is what has happened. So cool use of things there. I'm gonna put this back so So this was Auth token and I can still leave my error in there. I'm not gonna hit an error, So a promise has a then and So let's do that. So I'm gonna run that one Wow y'all, I gotta get There we go. So now we're back All right, I wanna show you a little bit of a different way that asynchronously that you might also see. And this is really syntactical sugar. It's called async a weight and if you just wait a I promise that's a, there That was a hat trick of a So the way that it works, you can say that a function and we want this to run we're getting ready to an application and to get We have a bunch of weird gonna be relevant to the So I'm gonna make a new call it &quot;Delete All Messages,&quot; okay? And when you define a this is the parameters that it takes. We're not gonna say that, And then I'm gonna run this function. So while this is an asynchronous function, I can actually make it look so it can kind of run the So I'm gonna say &quot;const So now I have, because the 'cause I've used this here I and I'm gonna say client And so now I think this is a So this is basically doing These messages are the same into this function, but So I have this variable So, and that's in array, right? And I could do this exact same thing here and I could list that the same way. But let's go a little bit farther. So I'm gonna say for each of the messages, for each message that is So these are those inflated One of the cool things with the client is the has actually has some properties on 'em. And one of those properties Before we do that, I'm let's do a warning here real quick. So I'm gonna say console would have deleted, if you use these back ticks, You can use this back tick So we'll say would have So again, that's the So would've deleted message dot SID. So, and we will close that And now I'm going to call you know, of course that's how we call it. And this is would actually be a promise, this would be a very we could do a then, well we'll say then, and if you wanted to call, make a function that has no parameters 'cause I'm not returning anything, right? I'm not returning anything I'm just gonna say console dot log. And I'm gonna write done this code into the notes and paste it if you want to. And I'm gonna do the same Catch the error and I'll do And now if you do the of course what's running it's running out to the screen that you can do and error is one of those. And if I just pass the so I'm gonna warn that we would've deleted the message but let's take So I'm gonna get rid, I'm gonna keep the starting So we can do starting program and then it's gonna do it's gonna call that and it will say done, I'm gonna Okay, so we have delete all it's gonna get a list It's gonna loop through And when it is done, we're gonna, right now we're gonna warn and this is what we're because there's a function All right? So I'm gonna Let's see what happens. Okay? So it would've deleted some of our SIDs. And again this is the that it was the MMS which is the one with the picture and the rest So I think I am ready to do this. I hope that you are Again, this code should in the repo 'cause you want to run this 'cause you want to delete these messages. So let's, I'm gonna I'm gonna say deleting I'm gonna save that, I'm gonna run it. And so message, the message from this client is really to make another API call Because the object itself the library's made an to be able to call delete it's just working that a REST API call to make a delete request. It's pretty cool right? Here we go. Message dot delete is not a function. What I meant was actually remove, so the function name is So here we go. So, and you saw that That was the error that just happened, good thing I put that catch in there, otherwise we would've thought it worked. So here we go, so in Node explorer, remove instead deleting, We deleted all of those. So remove is the name of but it is doing a delete, Cool, so we have now to run it again, you'll see that there's no messages left for it to delete. Awesome, now if you have just watched that and were very confused, and then I want you to So I've made a function and that function is And because it's asynchronous, I'm able to use this await this client messages, that But, and a promise of the future. But because it's being awaited, it's going to return Then I'm gonna loop through and because that message and an object was created here I have a method on And it will actually go the next level of delete there for me. So it's really nice. This object feels like writing JavaScript code, But behind the scenes this API calls and the client library has extracted all of that away from us. And if now if you go and you take a look, let's go back really There's other helper libraries. So if Python happens to be your language, there's how you do it. So it's client messages dot and you print the record SID looks a little bit different that you go through, but And so that's really nice of a REST API is that the helper library is producing code that feels the same in each way because the And you'll find that as you use other APIs and they have helper libraries, they will mimic the way So I realize that was a lot. I don't want you to get you can't completely In the next unit what we're into more deep things and So, this code is there you want me to go back and please, please, please let me walk through those different things but don't feel like you need I want you to just conceptually a helper library that's of the HTTP API things that we were doing with curl and we are doing with REST Fox. This is just doing it in code A lot of the magic is gone and just feels like you're actually That's the power of the Did you see how the helper match the development workflow This is one of the benefits of They abstract away the and the boiler plate necessary They also behave as you It feels natural. The way that we were able to helps to unlock another scavenger hunt item and Now this constraint has four subsections, one of which we just discussed, through representations, was included in the response, it was clear for us how we could modify Another subsection and here is resource identification and requests. That's the URIs that are But because the URIs are included we know how to get and manipulate Uniform use of the http We just wrote some scripts that make use of helper libraries. These libraries are super handy for automation based tasks or batch scripting, which is like making a whole Now while we're talking another common tool for and that one is CLI, There it is again. Command line interfaces API calls from an More and more these are showing authentication and do a This concept is popular where setting something up needs to be done quickly from the command line. Check the notes for more. Another commonplace where is from within applications Let's get to the final unit an external API into an You've got this. Ooh, we're here. I love this part. The building part. We are going to build a web a set of user submitted But here's where our app is gonna stick out from all the rest. We are gonna let our and captions via a text message. What this will enable and billboards and text a photo to this will gather those on a Now you're probably wondering The first one is probably, wait, what are those photos And that's a great question. We are gonna be building this application so it can be dynamic. So you can define whatever you want. Like text me a photo of your dog, send us a photo of the Snap me a pic of the I don't know, anything along those lines. Now secondly, you're probably you said I didn't need If you already know how to make a website, this part might not have phased you. But if building a website is outside of your learning journey I've got it set up and and we're gonna focus on making All right, let's do this. Okay, so I have a template In the unit three video one which is our web application. If you come in here you can scroll, you can kind of see things here. The app is called Pickle where Peter picked a pickled pickle, And then we're gonna click We're gonna get a hold of this raw and I am going to highlight everything and use the magical And then I'm gonna come over to back to my scratch on my visual studio code. I'm gonna make a new file. I'm gonna call that index.html, hypertext markup language, right? And I'm gonna paste that right here. So now I have that code If you are a get user, you and have your own version but that's a good way to we're just gonna explore around Let's take a look at This is something that might happen to you as a developer who knows now about APIs. They might say, &quot;Hey, and I would love for you to be able to set it up to make the API work.&quot; So the first thing to do, if locally on your computer, you I've made it so we don't so we can just go ahead, I'm gonna do a new terminal here. I'm gonna open that up and I'm Now what that's going to do in my Mac is going to take a look and see But this what this will do, So, you can see this is user scratch and then you know my, whatever it is, it's in my directory there There's some nice kitty photos there. I'll show you how that's into one of them, you get and you can switch between and you can see the text That's kind of where That's what we're planning Simple one little pager some APIs to be able to I'm using, remember APIs, not Web APIs, but I'm using a View as the I'm using a framework called View and it has an API and I'm also using this Silent Box which is allowing It also has an API. Let's take a little bit of a look here. So I'm gonna move a little in case it was your first time I've got some setup here in this head tag. You can see this html, There's some setup. So I'm using View and and I've got some very minimal styling. It's not my forte. And oftentimes you're So you're given, hey, I would love for you to So the body of the app has this. You'll see notice this little mustache, mustache and it says call to action. So in view this is part use this for a template, with something from the View Objects data. So you can see here, and that's what this is and and make this say whatever I So whatever we decide to do with our apps, whatever kind of pics that that would be where we would change that. And then you also see here, there's this silent box And the way that that works is again, from this View Objects gallery. You don't necessarily need but I wanted to show you that there is, this is how View works, and it provides an API where called data in whatever's in And then there's some more, I can define some methods One of those methods that I've defined is called load images. Part of the API that a lifecycle method called that when the application been mounted onto your HTML it will call this function. So it's gonna call this In this load images an async image and I've This is someplace where you might be communicating back as you're working together on a project. So use the messaging API to create a web-based API that So that's what we're gonna do over the next couple of videos here. So what we see in the start and it is an array and it's There's a website called So you can get different And there's a description which is important because this is what it will say on the picture. So that is what is happening So we now have our app here locally and we can change things. So one of the things, one of I love to get photos of So I'm gonna change this. I'm gonna say submit me a photo of your burritos and I'm So see it's not saved, I'm gonna save it. When I go back to my file there, when I refresh it, you can What are you going to want to gather? Why don't you go ahead and change that, change that to whatever to gather as we build And of course you know you see that you can change that however. So make sure that it's that you can change that, and it opens locally on your machine. Cool, and so now we have a little smattering of APIs here already. So we have a web, we We have this view and this view API has a very specific API that's But remember it is actually to use a web-based API to be and we're gonna do that Now that we got our file all And by that I mean let's get it up on the public internet so That is of course after (upbeat music) We are gonna get our webpage up on the internet so others can see it. And this has gotten much You used to have to set up a server, like a physical computer, and configure it to point to your machine. You had to figure out to locate your server so And arguably the hardest part to have to watch over it in You didn't want it to get overloaded, you wanted it to scale up and Those servers are still you don't really need to Now I'm sure that you've heard the term the cloud and the colloquium. The cloud is just other Well let's talk a bit about serverless. Serverless is just other people's servers. It removes all those to worry about and it I can tell by the look on your face that it's probably better let's get this application hosted. So we're gonna have Twilio and that is to say we are our web server that will Our project will be serverless. Now the way you do that is environment, which is here Now if you don't have Explore Products and you and you come over to Functions and Assets, you can click this little pin icon and that will make it show up here. So I am going to create a new service. So I'm gonna go Functions and I'm gonna say Create Service. It could be whatever you want. I'm gonna call it pickle, like pick your pics with Pickle Peter. Services allow us to group our functions and assets together for our application. So I'm gonna click Next is we're gonna open up to a very nice IDE that'll allow us to edit our code. Now a friendly reminder, if following along because than yours, you are using a So check the notes for Now traditionally these services here are used to power Twilio Remember how I said you could respond programmatically to an incoming message? Well, functions are a In fact, our current number and we might as well fix it we do that, let's get our So what I'm going to do from my local machine and if you want to, you can just grab it from GitHub, check the notes for more on that. But I'm gonna go add, I'm gonna choose Upload File, I'm gonna find my file, my index html and I'm gonna choose Open. Now what we're uploading, we'd like the world to be able to see it. So, I'm gonna choose Public and then I'm gonna choose Upload. So now this files over here, you'll notice this little green dot. And this means that it is not yet deployed and that is, it's not yet available on the internet in this current state. So let's do that. I'm gonna do that by clicking this Deploy All button down here. And now we see that go ahead and choose copy URL and I'm gonna open up a new tab with that there. And we will see that our site is live, except it says burritos but we're getting there. So it's working, it's I could share this with people. The pickle site is up and One of the things that I used to have to worry about was scale. Like what if I got a to this site, would it fall over? What the serverless solution to not need to worry Twilio is handling all those 'cause now I can focus Which by the way, we need to handle that reply programmatically, right? So the way that Twilio does Now if you haven't I have an entire course on them Web hooks are sometimes That is, instead of you calling So let's configure our number to make use of the right web hook. So I'm gonna go back If I look under phone I'm gonna hold down command or control and click Active Numbers, Nice little hack to keep So I've got my numbers to configure it, what happens So here's the voice the messaging section and comes in to this web hook and it sends to this URL here, it does So the way that Twilio makes use of web hooks can be thought of like this. You know when I hit this URL, right? This URL in my browser, about what's happening at that endpoint. It could have been like Express, Jingo, a Java What matters is that my server was HTML or My server responses with HTML and my browser renders the page. Now the same is true with Twilio. Someone is going to text our Twilio number and Twilio is going to send In this case, this endpoint is happening on the other side or Twilio markup language, HTML and TwiML. Twilio will be able to So we could set up a new web that returns TwiML or we could And like I said earlier, that is what these are commonly used for. So let's pop back to our service. So I'm gonna come here, I'm and I'm gonna name this 'cause that's what we're gonna do. We're gonna handle an incoming message and there is some very that is commented that comes through. So boiler plate is code that's provided. That's usually the most to be doing and in this case for how to respond to It's kind of like the hello but we are gonna be building So we'll need to tweak this just a bit. Now I've put this code, I'm about to show you into the notes. So I don't want you to this all out or even fully I'll step you through it, first though, let me walk you through So Twilio functions all export And that handler takes some parameters, context, Context here is an object the function that's running, it knows the name of the you can kind of think of most frameworks and if you this is kind of the way that information is passed into your web application. So, this is the event will hold everything about the text message that was incoming because that's what Twilio does. Twilio's going to pass that And for instance, that message will have the to, it'll have from and body. And again, because when we are going to point our So Twilio will post the information here, it will call our function that checks if a new message Twilio is gonna call us. The API is going to Web hooks are pretty And then finally, there's which is how we send It's actually a function, this is the errors that and then this is what gets returned. And here's that TwiML, So I'm gonna get rid of a These are sort of demo lines, I'm gonna get rid of that and I want you to be able to see what's coming into the message. So I'm gonna start up here. And what what this does if we want to, we can see the message, it will show up down here. So let's say that we and it was incoming a colon and then I'm this style of string interpolation. So I have the event object, and on it there is a property called So that's being passed in there. So when the function runs, we will see that the message came in 'cause Twilio's gonna pass that message And we're just gonna say thanks So we don't really need to do but you might wanna differently based on what they said in the message and you totally could do that. But you probably also wanna was actually a burrito or You could do that and but that's a little out of scope. So instead of a voice response, we're actually going to And there's a little So a little helper library for TwiML and it has this TwiML object. And before it was doing say, So if you wired this up, it would say hello world but actually pretty good But I'm gonna change this to be a message 'cause that's what we wanna return. We wanna return a thanks for your submission, right? We wanna thank them there. And we can also send Let's see if maybe a camera Thanks for your submission. And so what's happening it's a fluid API. It means that it doesn't return anything. You kind of tweak it and it So you'll notice that this I'm modifying this object out at the end, that's how it goes out. So let me, let's just, let me show you what So again, I'll do one of these console log and use the back tick and we'll say TwiML. So Twilio markup language was TwiML. And you'll see that it There are some rules to it, but we don't need to So I'm gonna save this you'll notice that this is So I'm gonna click Deploy All and while that's building, I'm gonna head back to my phone number page and So on my phone number my message down here it says, we want it to be a function That's done in the UI. And we want to choose incoming message, which it hasn't finished deploying yet. Just finish deploying, one more time. Let me refresh that page. We're going to go to, it's going to be a function for this UI and we wanna And if we do save, alright, I'm gonna click Clear Logs here, and I'm gonna turn live logs on. You can see that this says And I'm gonna clear And what I'm gonna do now is and we should see this, we should see what I send in and we should see the TwiML that was sent back and I So let me send that message All right. So, oh, check out this. I have this beautiful I love when burritos can And this is an awesome one. So check out this beautiful I'm gonna send that through the live logs, we should see There we go, so look at and this is the TwiML that was generated. So you can see it's like tag-based. So there's a response and and there's an opening Thanks for your submission. I don't want you to feel You could do that later if So I got my message back. Now, remember, since we are in trial mode, if somebody else sends in a message to your phone number, a message back if they're So that is a limit of the trial API that we're using currently. Now most APIs have limits. There's only so many calls you can make. There's, you can only There's just different sort of limits. And that's what we're The limit is that you can They can still submit, &quot;Thanks for your submission.&quot; So your phone number should, your phone number, you should All right, so we're looking good. We have our site hosted and we are handling submissions by thanking them. Let's get to some more cooking. Now, if you're interested in learning more about applications like check out the notes for more resources. I have an entire course on this if this piqued your interest. But for now, let's get back to our API. Now, with our ability to we can focus on designing our own API. Now the great news is that really straightforward that's JavaScript object notation, the lingua franca of the web. Let's design our web-based API to return the expected format, and we can API to get a hold of all the Do you see what I did there? Get, get it? All right. I'm a get outta here. I can't stop. All right, let's do this. Okay, so we are gonna and we already have a spec We need to provide for This silent box has this gallery plugin and it has a specific API that it defines and that API looks like this, right? So remember that we're setting an array and we're So I think we should start that returns exactly what we have here. We should return an the returns this, and then This is what I do when I find I'm working on a project what they expect in a template This way they can keep working So let's do that. I'm gonna So I'm gonna choose add, add function, and I can name this whatever I want. And I suppose we should be clear, right? We're gonna make an API, make one so slash API and then I suppose we should probably say what it's gonna be. So we'll do a Pics API here, right? And I'm going to press Enter and that will get me my boiler plate code, of which I am going to So thank you for the help. We're not actually We're actually gonna return an object. And what I'll do is I'll copy the hard coded array from I'll come in here and Now hard coded means it is just like in the code this way, right? There's no way that this I'm gonna change that here. I'm gonna name it the same thing. So I'm gonna create a new and I am going to just paste There we go. And then I'm So again, I have an array. That's what this bracket here is an array of these objects, that's These mustaches, they have these properties here and these are representing the pics And now I'm gonna use to return that gallery array. One really nice thing is that if I pass it an object like I did, it'll automatically return JSON to anybody who requests the URL, so let's do that. So I'm gonna go ahead, I'm gonna save this and Now one thing to note, by default That's what this little So I'm gonna click this to be public 'cause we to be able to see it, not just Twilio. So this is what we're gonna do. I'm gonna change this to be to choose a deploy all and and when it's ready it And so I'm gonna go ahead So I have this URL already when this goes to be deployed, you can see it's deploying when it'll say build completed So it's deployed, so I go hit that URL and let's Awesome, we got it. So we got the kitty descriptions and blow this up a little bit here. This is JSON, it automatically It's in the right format, In fact, we could probably we'll go over to the Thunder Client and take a look at what's So I'm gonna come back I'm gonna make a new request do a get to this API that we It comes back, it comes back with 200 OK. And here's, the stuff that's coming back. There's even some headers If we look at the response, we can look at the response headers that the content type was Twilio always sends back to the shenanigans none, which I love. So now what we could do to the team that's working you know that view application, they could wire it up, And as long as we match the that is, as long as our API everything should just work. So that's pretty awesome, right? So let's move on to the next part. I'm gonna comment out this bit. So let's go ahead, let's gonna go ahead and make So that's how you make an empty array. And I'm gonna comment this out so that we have it so that we can kind of look at what the format is as we build stuff here. So I'm gonna comment that out and in fact I don't think I need the second one. I'll just get that first one there and give us some space there, awesome. So now let's use the text messages that were sent in, our incoming messages. So we are gonna write Now if you aren't quite remember that is okay and we all, all of us, I guarantee you everybody watching this understands that what you're going It's a new language. I want you to try a And I want you to take to take advantage of being This code that we are going in the notes and I will walk us through it and then I'll go over into the concepts that we've covered. Okay, are you ready? Let's do this. So Twilio functions have I can get access to a REST client, to the Twilio REST a Twilio REST client So context, get Twilio client. Now remember that is going and my account SID, and it just automatically is authenticated, which is really powerful to my thing because this So that's why it has So remember we wanna get a hold of all of the messages that were sent in. So we're going to use the API to do that. And remember we could have So I'm gonna get the messages that were just sent to this phone number. So I'm going to await 'cause remember it returns a promise. So client dot messages dot list. And I need to do the ones that are specifically to my Twilio number. So that's (561) 816-5433. And I'm pretty sure that's right. I'm gonna look one more Yeah, that's it. So that's (561) 816-5433 you could go. So there, it's also on your console. Remember down here at the bottom, (561) 816-5433, that's what I wanted. I put that there and in fact, you know, that's something you can and that might be something that you want to store possibly in an So I think we should probably So I'm gonna take this number here and I'm gonna store that here. You can see it in the we have this environment And you'll see here, actually My account said my Auth token get Twilio client works is If not, it won't work. So, but it's checked by default. So we're gonna do Twilio is going to be that and now in my code, what's rad is I can use that like so, I can say context dot Twilio number, I can access anything that is that way and it's now it's in this code. And now when I share this code, You will need to set your Awesome, so, and now what well actually first we to make sure that this function is marked a sync so that that's required, right? In order to make this work. So now it's going to get the messages, it's going to return the messages, and now we're gonna loop One of my favorite ways of So we're gonna say for And for each one of those messages, we're gonna go through some things. So one thing you might not that when you send a message, I think typically whenever or then I send another you can actually add multiple So let me, let's do that. Let's get a hold of all of the So we'll say comp pics, we'll call, we'll call our variable called short for picture and Now the message object that Now we know that this was an And that object actually has which was media, which we remember where there was the media URL and we grabbed that at all of them that were available? This is basically doing that same thing. And we're gonna get all of All right, so we have we have all of the And so for each of those pictures, right? So each of the pictures, to declare the variable So we'll say for const, So we're gonna make a new variable called pic looping through each one of these that came back from this array, right? So, for all of the messages, in the messages, now what we're gonna do is we're gonna add that to this gallery. So this is an empty array, but we're gonna dynamically add to it. And the way that you add is with gallery dot push, we're gonna push a value onto the end of that array. And we know what this is It looks like this, it looks, So source here, SRC is short for source just from So image source, SRC and and I'm gonna pop over here real quick. That this has, the media a URI on it and it's relative So let's paste that. So it's relative to that, which means I that if I need to let our people know I'm gonna give it a full URL, It requires this full URL. So it's got the front part of it. And then I'm going to use the pic as a property called URI, which we saw. And remember what happens if we want to without an Now I know that by default this is going to give me this pic.URI is So I wanna replace that, I'm gonna use the string method to I don't want that dot JSON, I want it to be no extension at all. So I'm gonna use this empty string. So I'm gonna replace the end of what this pick was with dot JSON. I'm gonna replace that which will remove it essentially, right? That's what we're gonna to do. Now I'm gonna do a comma I want to have the description. We wanna put the description that's what the little text and that's whatever they texted So I'm in this loop, I'm of the pics, but I'm also, I 'cause I'm in this inner loop here, right? So I still have access to the outer loop, which is message dot body, right? So those are inflated. So that's whatever the text And we should also, we'll So alt tags are handy for There are people, you but there are people who are that are using it without some people are vision screen readers and alt You always wanna make sure for people who can't see what And alt tags are an This is just one way that more accessible and everybody I'm just gonna grab this last thumbnail width here, 200 pixels. We can see later if people want something different than that, what to do. So, our gallery array for it's gonna add to it, right? So it's gonna go and of those and we're still And I think y'all, I think we got it. Let's walk it one more time. Okay. So we're gonna come in to use the context that was passed in to this function when it was called. So when somebody hits is gonna run and it's have access to those environment It's gonna get access to and that client is logged in with my account SID and my Auth token. And we're gonna create an empty array, this gallery thing here, we're It's a list that we're going to populate. We're gonna take our to push them into this the format that is expected, We're gonna turn what our so that later if we can use them that way. So the way that we do that this client is a REST the messages endpoint and to do a get, but it's So just, we're just say, that were sent to this this context here, again, Twilio number is set in my So we're set 'cause because You could have multiple So we wanna say only the So we're very, we're being very specific. We're querying messages that not from this number but to this number. And we're gonna loop through And for each one of those messages, the object that's returned called media, which lets And you'll remember in the and we could go and query need to because the API It's very nice, it's And we're going to get And again, this is asynchronous. We're using this, we're we're waiting for these So once we have these picks, we're gonna loop through each of the to push out a source that has this. We know that they all need because the URI itself, this it doesn't contain the So we are going say This is the API call that we content is API twilio.com, 'cause that's unique to And that URI comes with So if you look here, we can see that it ends And we want to get rid of that of it, what happens is it We did that, I don't know if you remember that earlier, we did that. So, that will be removed the message and the message So the message for each of get the message.body and the for it, the alternate And that's from that, remember this looks exactly So we are returning that here I'm going to save it. We We are going to cross we are at that point where that we wrote works and if it didn't work, we are We might get an error, we what that error is and we But I am going to save this and deploy it. Now, let's assume that I gave So now if somebody hits So that's what it was before. If we hit it, we should So it says, &quot;Look at I texted that in. Wow. Look at the clarity of the burrito. Oh my gosh, you can see the That's impressive. I didn't know that. Look at that cat. All right. So in fact let's go, let's hit that same It should be a little bit different now. It's coming across here and I want to look at the response and the response. I'm gonna go and I'm gonna grab this URL and make sure that it works. So the source, right, the source that came back here is, should And if we look at it should Oh look at this thing, when they can stand up by themselves, that's the sign of a good burrito. Look at that burrito. Oh man, and what we did with this code is actually pretty common, that we're building, you're going to do is you're that were submitted And you're gonna do that from this incoming message function. You're gonna get it, you're gonna store it if it's valid, if it's a valid picture, you don't wanna show pictures that aren't, you're gonna store it you're going to format it You're gonna get that from a database. So maybe instead of you're gonna come from a database API and you're gonna pull and then you're gonna push it through. And that database is gonna but you're going to make that you are trying to push out there. You're not gonna, it's not gonna look exactly like the message, right? I'm not gonna send back and make my API look like that. I'm gonna shape the data. I'm gonna shape my data in the And we came with the spec. So we took the data and we shaped it, we formed it into what was expected. All these burritos are making me hungry. I think I'm gonna go fetch Now I'll make sure to snap a pic. You should get one too You deserve a burrito we'll look at how to fetch this data that we just generated in our client app. So we've coded our external public API and it's ready to be consumed. Now our API uses an external API, Twilio, and we're going to need to use our web framework Views API And to do that we're gonna See, APIs are everywhere. No wonder you came All right, let's make use of our server-based API and our All right, so just like I we are going to consume that So if I scroll down here, in this gallery here into this load images and this load images gets kicked off from So view has these lifecycle APIs and when the things mounted, it's We're gonna come into load to-dos that we have already to done. So we are going to use the messaging API to use submitted photos. We did that, we did that in our API and then we are going to that matches this expected response. We also did that, didn't we? We did that. So let's get rid of that. All right, so here we go. So this has got a suggestion here of what to start doing here. So I'm gonna uncommon this. So we're gonna create a new to await and we are going is part of the web API that to do exactly what we're We want to fetch data from our API. Now this happens to be on the same server. So we can use a relative link We don't need to specify It's assumed. So our API, We called it API/pics. So slash pics is what we And you notice that it's using await because this is an async function. So Fetch returns a promise that response and that called JSON that will actually return the JSON representation So what I'm gonna do is I'm gonna get rid of this gallery, this hard coded gallery that is gone and I am We are going to await 'cause this method is also asynchronous, response dot JSON. So that's gonna get back whatever is in this response that came back. This response has all but we just want to And that's by using this dot JSON. And because our API is JSON enabled, it's just gonna come out. All right, let's deploy it. I cannot stop. Oops, this is not unable to So I need to save it first. I cannot stop thinking about I submitted a selfie of to my Twilio number and I got a reply back from my Twilio trial account, right? And it says thanks for submitting it. So if all goes well when we look here, I'll be able to show you the burrito that I texted to my number. So it's been deployed and under this assets and and I am going to paste it is gonna go and it's gonna bring back some photos into Look at the size of this thing. It was truly bigger than my head. So if we click that, we could go, we could see my other beautiful Now let's look again back here and just take a look at It's just two lines and and that's the power of this API. We were able to hit an text messages, text photos, right? And it only took two lines and really it only took one line actually. You know, like if we could have like chained some stuff on top of this. Awesome, now one thing that there's no authentication I didn't supply any It's open to everyone and if you are working on a you don't wanna pass your keys around. Like I would not wanna on this page because I but you can actually see So I'm gonna view the source the source that we're looking any sort of API keys, I You don't wanna leak your for more information on But typically this is a server that then the server keeps track of all the keys and you But if you do need to locally on the client, Check the notes. But look You did this, you have a text messaging interface, right, a TMI. Well I hope this wasn't TMI or also known as too You learned a whole lot about APIs and not just the web-based ones. You saw them in practice and You really deserved that You've just built and Now here's my question to you. Do you think that the API code that we wrote together should Well, why don't we take a look at our weathered scavenger hunt card. So it's definitely a Our client happens to be, in this case, a view application running in the browser and our server is a But any client could connect and use this. Statelessness. It's We aren't requiring any prior knowledge about the client, cacheability. Well, at the moment we caching information, We could fairly easily pay coming in and we could It would require us writing and thinking through but we could do it. Let's put that in the maybe column. Layered system. Yeah, for sure, right? In fact, it's a little layered already. Our API is calling another doesn't need to know that, functionality and the Code on demand. We haven't And it's the only optional requirement. Basically this means that that is runnable, like maybe it returns an embedable widget or some This doesn't make any and that's totally okay. So we're gonna drop this So we're looking good so far. But here comes the So remember this one has four subsections, resource identification Currently we are just as objects and absolutely So we failed this sub requirement and therefore this is a no. But let's keep going pun intended, sorry. Resource manipulation We definitely do not allow any sort of manipulation of the images Self descriptive messages, we but by using headers we The message sent down that it should be JSON decoded to be used. Hypermedia as the engine And last but certainly not it's an often forgot about And the idea here is that what more you could do with find related resources, And we did see this in both However, ours doesn't provide So we don't have a RESTful it's gonna suit our needs. It does look like we could get there pretty quickly if we wanted to. One thing I want you to gain that you now have the ability an API is RESTful and I We've now completed the scavenger hunt, we revealed all the constraints, and I hope most of those are pretty clear. Please don't feel like you You can find those same constraints littered all over the internet. Now as a prize for finishing the constraint scavenger hunt, I've dropped links to my documentation for you to I've also included links to that will help you design RESTful APIs. Make sure to check out You just completed a and I hope that you can they can add to your programming journey. By looking at interfaces in general, I hope you're more comfortable fully understanding exactly but still leaning on that abstraction to build your tools and applications. Do this all the time with and APIs or application They aren't all that different. I hope you enjoyed taking this course. I know I had a lot of fun making it. If you think someone from this course, please I'd love to hear your feelings, So I threw together a a smattering of APIs to If you've got the time, I'd love to have you answer a quick text-based survey, text &quot;feedback&quot; to the Well actually, you know what, if you want, you can also call and just I use an API for that too. So please, please, please and really, I can't wait Thanks again for hanging out (upbeat music)