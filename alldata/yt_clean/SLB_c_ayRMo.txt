What's going on guys, so I decided to make a don't know what terraform is, it's another And so it's really great for modeling your cloud that actually wants to get more familiarized especially with regards to the cloud, you helpful for you guys. And I'm going to make So I'm going to walk you through how to set up how to set up and install terraform. And systems. So I'll show you guys how to install I'll even show you how to set up a text by the way, and then you know, we'll get started it has to offer, I'll show you guys how to create look at how to modify them how to delete them, take a look at how we can kind of reference other a mini project where we'll get to deploy a web but there's a lot of things that actually have to that to work. So I think that'll be a great or by the time we finish it, you guys would have point, you guys can just kind of take it from you want. And, you know, I plan to do a lot of a specific topic you want me to cover, let me you know, upload it to YouTube. But hopefully if you guys have any questions, just leave them in To set up an account with AWS, And here, we can actually create an we want to click on this button right here that ask for some basic information like an email And then you'll also have to so I'm just going to call this sloppy networks. And go ahead and select your account type, you're make an account for yourself, but you work for or professional. And it's going to ask for your country your address, and you will And to actually create an AWS account, a credit or debit card information. You know, we're going to stay within the free tier as long as you shut down all of your resources charged, it'll be at most just a couple of you will need to have a credit card to kind of Once you've finished adding in your credit card number. So it'll send you a voice, a voicemail So just wait for that text message to come in and And we want to make sure that we select Okay, and at that point, we You will receive an email address probably just created that account. So we'll just go to your, my nope, it doesn't look like we need to actually this point, we can just select this button right so we're gonna sign in as the root user at this And so we'll just specify the email And we're gonna have to pass in the same password. account. So at this point, you should have you are logged in as a root user. So if you want point. Um, but most of my videos, I usually just To install terraform on a Windows machine, there's first step is to download the terraform executable just do a quick Google search for terraform. it's most likely going to be the first link. But you can just go to www.terraform.io. And then just we can see all of the different operating But for installing Windows, we're going to bit machine because that's what my machine is, And this will download a zipped folder. And so and go into show in folder to just navigate to your downloads. And this is a zip file folder, so extract all. And it's going to pick a I usually just leave that be. And so we'll we can just close that out. But you'll is the new folder that we extracted. And you'll see that we just have one file in that terraform needs to run. And so what we're we're going to create a new terraform directory Now, where do you create this terraform directory you feel most comfortable with, if you want to put leave it in downloads, that's fine. The only thing where you're keeping this file. So what I'm going go into my C drive. And I'm just gonna make a it. And I'm just gonna call this directory it. And I'm just gonna paste in that executable the location doesn't matter. The only thing that file. And so to actually get this exact path, go this is the search bar, whatever this is, and just exact it'll transform it to the exact path. Okay, and now what we want to do is we want this path. So I'm just going to go to whoops, search for those letters. And there'll be a button And then we want to select this button Okay, and we want to focus on system variables. So our specific environment variable. And the one we And so you'll see all of our environment variables is hit New. And I'm just going to paste in hit OK. And OK, and then hit OK. We're done. Okay, sure you close it after you make that change. If that. And so now what we want to do is we want to prompt. And I did not mean for that to be that v. Okay. And if you see this output, that means what version of terraform you have installed. So a different version. If you download this in the this output. So if you see anything else, that of terraform. I remember I recommend you just There really shouldn't be any issues that you that you see this output and that's it. You can Now there's a couple of different ways to install way is through using a tool called homebrew. And a package management tool for Mac OS. So it can be not just terraform on your Mac. So I highly to use this method or not eventually install And so to actually install homebrew, And it should be the first link. So And it's just going to give you this command And we need to go to our terminal now. So I'm applications, and then just look for a terminal. Okay, and so this is what we want right here Okay, and so once the terminals open, just And then hit enter. And so this will you will have to provide your password. And hit return to continue. So just hit return. time. So I'll pause this video for now and Alright, now they brew our homebrew is to install terraform and with homebrew will mainly the brew install command. So anytime you to do is type in brew, and then install and then So we want to install terraform. So we can and it's going to download the terraform need. Alright, now that the terraform installation do. And that's verify that the installation all we have to do is just type in one command and it should if the installation went okay, just And so you can see that I am running version 12 my future you'll probably see a different But the only thing that matters is that you see anything else, if you see an error, as planned. And so you'll probably have to redo know, I don't think you should be running into homebrew will set up everything for you. To set up terraform on a Linux machine, the the terraform package. So we can just go to we just want to navigate to that download And on this page, just select the operating Linux machine, if you're using 32 if you're using FreeBSD, then you know I'm gonna select the 64 bit, want to make sure I it should be downloaded. So I can just you know, to where we download it. And it's the zip file, different ways of extracting it. And I'll show you how to do it through the command line depending extract this zip file that we just downloaded. And then we'll hit extract again. And then we can select Show the files. And it's going to zip file as well as the unzipped terraform file. However, I want to show you guys how to do this important skill to have. So I'm just going to do it through the command line. So we'll just And we want to navigate to where that zip folder all files to the Downloads directory. That's downloads. And if I do an ls we should and then the name of the file. However, if you have to do a sudo. You know, apt install unzip And then once you have access to that utility, Okay, and you'll see that, if the GUI, you'll see that it did create the file got the original us. So we get the original zip Now we're almost done. However, there's, there's this to a location that will allow us to run the we're in, because right now, we can only run it's kind of a pain to always have to move to our what I want to do is or what I want you guys going to move a file to a specific location. and we want to move it to slash user slash local it says permissions denied. So if you see that word sudo. beforehand. So this is going to give to move any folder into this specific directory. Okay, and so it looks like it's to that directory and just verify Okay, so it's in the user slash local slash bin home directory. So you can do a CD and then Tilda or just move to any directory, if you you just move out of that folder. And now what I dash v. Okay, and if you see this output, it we downloaded. So I'm using version 12, not in the future, you're probably going to see a only thing that I want to ensure is that you see is installed, and everything is working properly. if it shows you anything else, like, you know, that means there was an issue with your you know, repeat all the steps that I performed. may run into. Um, but at this point, you're good know, in the next videos, we'll get started on, Okay, so there's one last step to setting up step, but I highly recommend it. And so what very powerful text editor. Now you can use any make a difference. So if you prefer something I'm going to be using one that's called Visual provided by Microsoft. It's supported across all Mac, Linux, and it really is one of the best that use it. And I highly recommend you guys use because I'm going to provide a lot of tips within easier when you're trying to work with terraform. as well just go to code dot Visual Studio Comm. operating system you're on. And so you should just it detected, I'm using Windows, but if you're on a just download that. And you know, moving forward, once again, if you want to use something else, VS code installed, I do recommend that you install extensions, extensions, within VS code just give your extensions, you know, once you open up VS you want to navigate to this button right here. and just search for terraform. Okay, so once be the one that you want. But just to double who's the company that makes terraform and just to provide us a lot of features that make our obviously auto completion is great syntax all of these are going to make your life a But you know, once you have that done, at this to do. It's just going to behave like any other modify files within here. So it's kind of like Now that we've got terraform installed in the last thing I want to do is just create a And so within my documents, I've created a folder folder, I've created a folder called Project one. our code for our first project. And so you know, If you want to keep it in downloads, if you want And once you have that location set to actually code, go to File, go to open folder, and then And then we can open it up. Alright, and so at which we don't care about. So just close project one within our root directory, and Now, terraform is written in a language in a file that has a.tf extension. So all in a file with a.tf. Extension. So we're going if you right click here and just do a new And the.tf just signifies that this is a terraform If you install the extension, just ignore those have to call this main, you can call this you just make sure it has a.tf extension. Now in is define a provider. And in terraform, we just allow us or it's a plugin that allows And if you go to their documentation slash Doc's slash providers, slash index dot HTML, that terraform supports. So if we download, you AWS have provider, that's going to make sure that talk to the AWS API, so that we can actually But you can see that you know, terraform, you know, cloud automation, you can see that it's it obviously does support, you know, all the smaller cloud providers. But it also supports you know, like digitalocean, DNS. So it's got a Just keep in mind, though, anytime you want to you will have to install the necessary plugins, might be wondering, Well, you know, we downloaded the code to talk to all these guys? Well, think are you guys going to be working with all of these going to have a predefined set of providers that in terraform, shipping out all of the code for all So instead, on a per user basis, or per which plugins need to be installed based off of So we want to use the AWS provider, because that's click this. And it's going to give us an example that this is the configuration for a provider. And just do a control. Let me see if I can make this should be good enough for you guys. But yeah, this actually, the version is optional. I'll just do copy. And I'll just paste that in And now we're hard coding the region to be we'll kind of want to explain exactly, you basically, a region is just a location And so there's a whole bunch of different all the different regions that Amazon has if we And so let's say my account, we want to go and I'm going to be logging Okay, so this is our management console. And so right now mine says Northern Virginia, You can see all of the different regions or data to default and use whichever data center is east coast in the US. So it defaults to using the to as US East one. However, if you're in like West one. And so what I would recommend that you recommend that you just use US East one, like any weird issues with like ami is because for some in one region, like US East one, and one region in IDs, I don't know why AWS decided to do that. copying my code, the AMI instances might be called and in AWS, or sorry, in terraform, set it to US as well as your resources will get deployed in avoid running into any weird issues. All right. if we go back to the code, it's going to And so the next thing that we have to do is set up tricky with terraform. And what I'm going to do I we're going to just hard code our static recommended. Because obviously, if you're storing file, if you decide to eventually publish your well, then now all of your your, your credentials security vulnerability. However, I want to start show you guys how to do it every possible way. I promise we'll have some sections later on, manner. But let's start off just by, you know, learning terraform, before we start worrying, And so basically, all we have to do is get it into the provider config. And so to do that, and you want to just select your profile name, And then here, you want to select this Create new access key. Okay. And if you do And this is my secret access key. But this Alright, so I'm going to copy this and then go back to here, and then copy Alright, so we've got our access keys set up in credentials, within AWS, you can only see these you won't be able to get them again. So you can actually hit this download key file, of that information. So we can just click on But you can see here, this is So just keep that in mind. Because once you hit you'll see that we can see the key ID but we does that for security purposes. So make sure some other reason, just delete your old one and should be good to go. Okay, so now that we have the next thing to do is let's try and figure out within AWS. And within terraform, the syntax is of the nicest parts of terraform. And is really regardless of what provider you're using, so AWS, or a resource within Azure or GCP, it's gonna so that you don't actually have to learn the or GCP. And the main syntax is going And then in quotations, you're going Right, and so in our case, we would and then you do resource type, right, whatever And then you have to give it a name. And then the curly braces, we provide in all of our key value pair. So key equals and then you that's going to equal, you know, another of how to create resources within a provider. And I'm going to walk you through how to deploy an EC what EC two ns is sorry, it's basically just a you want a Windows Server deployed in AWS, you're can obviously deploy any type of machine that you deploy a database, you can all do that within ECG terraform, I want to kind of walk you through how it's important to see, you know, how to do it in terraform. But obviously, if you guys are already to be really trivial. So you may just want to that are also kind of learning about the cloud And we can just go to our Services tab at the top, see that I have one instance, terminated in one you shouldn't see any instances, I'm I'm just going to terminate that. instance. So I'm just gonna hit launch instance. And here we've got all of the different ami that and you can even create your own. However, And if you guys don't know what an ami is, it's an ami for Ubuntu, there's going to be an ami for one for Fedora. And I'm going to search for and you can see here, this is the actual ami So we can hit select. Here we specify the the so you know, obviously there's different you some have more memory. So obviously, if you want a to one of the ones at the bottom. But the more expensive they are. and for just learning to stick to T to micro shouldn't be charged as long as you shut it down And you'll get this page, we'll just launch that. For now just ignore that. So we can just And we're going to launch that instance. And if to take us back to the AWS console, and you can it's in a pending state at the moment, but if you it'll, it'll get colored green, which means at that point, you can actually start using it. within AWS using the console. Let's go ahead I can really show you how quick it is to do it So like I said, the syntax is So we're going to do resource. And then it's just based off of what's provided and then the resource type. And you might be this is something that you actually have to refer documentation. I'm already on the AWS provider to just keep going down. Actually, that's search EC two on the left side. So just open that sources. We don't care about that. We care about do is look for AWS underscore instance. So this And it's going to give you an example. And that examples are super helpful. But we want to focus on just the resource. So this is We have to specify an ami. And You know, he's using variables and things Instead, what we're going to do is we're going For now we'll ignore the tag so I'm just going to And so you'll see that Remember, the syntax is the resource type. So in this case, it's just So this is a name, that's not going to be, you reference this resource within terraform. So this It has AWS will not be aware of this name. So But you can call it whatever we're going to delete that. And to get the AMI, And we'll do a launch instance. And then we want to go here and just copy this ami. and not just copy what's on my screen, because AMI IDs. And so you may end up copying this one, go to here, search for it, and then just grab the just paste the AMI in there. And then the instance selected within the console. And we'll delete let me go back to services and EC two. And let's I've got two terminated and one running. So once So make sure you save your configs. Now And so you know, if you're on Windows, you can to open up the command line, or you know, a Windows or a Mac. And then you want Okay. So for me, that's going to be in documents. And then I think it's called terraform. And then if I do a dir, okay, so then we want to to run our terraform commands. However, it's kind and then navigate to that folder. Instead, what we can go to our VS code. And this we can go to new terminal. And it's going to open machine is going to open up a Windows terminal, if you're on Linux, it's gonna open a Linux take you to the project directory. So you can which is the root of our directory. And so here, having to kind of flip back and forth between our just gonna close this out, because we don't need Okay, and the first terraform command okay. And so what terraform in it is going in all of our terraform files, which are anything for all of the providers that we have defined. And so it's going to see that we just have the necessary plugins to interact with the AWS And let's actually take a look at what it's initializing the back end. And it's now and then it's downloading the plugin for provider, that would be like provider, well, then it would not only download the code Okay, but you should see that terraform has kind of error, then you may have to do a little that, you know, nice shiny green output. Okay. And to do is I want to show you the terraform plan does is it kind of does a dry run of your code so It'll kind of show you you know if it's going new instances if it's going to modify instances. sure that you're not accidentally about to break I always highly recommend you run a terraform It'll just be like a quick sanity check so that made. And you can just make sure that you're not And this may take a little while depending on how instance. So you should see that it should be But if we kind of scroll up a bit, and you'll see that it's going to color code things that means going to create a resource. If you see I mean, it's going to delete a resource. And a Tilda, that means that it's going And so if we scroll down a bit, you'll see an AWS instance, an EC two instance. And and then you'll see a lot of details are it'll be known only once we actually deploy ID that AWS gives it until we actually deploy unknown, but except for the ones that we've source test, check defaults to true, so some of this is just letting you know everything that's a whole bunch of things for this one instance. we can now run the terraform, apply to actually And you'll see that terraform apply will do actually take a look at your code and then figure is just another security check. So you can just And it's going to ask you, you know, do you hit yes. And it's going to run our code now. And everything passes. But you can see here, it's So we'll let that run, it's going to take some while, sometimes up to like 510 minutes, depending Especially if you're on something like Azure, reason. Well, actually, that's pretty quick. But you kind of like a quick overview of the total one resource was added zero were changed, and zero just because terraform says it's finished and to see if that instance actually got created. So terraform. So we've got two and a terminated this little refresh button, it's going to just a running state. And this instance right here is you can still see that it's an initializing of take a look at the details, you can see that And you can see the AMI, so this is the AMI which guys, you've successfully deployed your And hopefully, you can really start to this simple example. Because I mean, what if we Would you want to manually have to click through want to just copy and paste a couple of, you know, Okay, so we've successfully deployed our first EC do now is I want you guys to try and guess what I don't actually run this, just try to figure out you that your guess is going to be incorrect. are probably going to assume that well. terraform to create a another EC two instance. So we would to tell you that that is incorrect, in fact, and in a declarative manner. And what that means a bunch of steps to carry out like a, like a to go through this code and just run through If we pasted this one, you know, it's not going to and then we want to deploy another resource. we're telling terraform, what we want our So we're giving it the exact blueprint of what our at our terraform file here, it says that we should and that is it. So no matter how many times We should all We just have one AWS instance. And why in terraform, we're not giving any set of what our entire infrastructure should look like. exactly what needs to get deployed, what needs so that our actual state in AWS matches So if we do terraform, but before we do apply, So if we do a terraform plan, again, that would take place. And you'll see that it's it's refreshing. It's refreshing the state just to make sure it's still there. and that it matches what's here. And then you no changes were made, or no changes need to be matches what's defined in our terraform file. it's going to once again, refresh the state of to the AWS server, just making sure that instance when we run the terraform, apply, it figures changed or destroyed. Okay, and this it's a little bit challenging at first, but just defined in a declarative manner, which is a little But you know, keeping that in mind, I want you know, what terraform will do when we start easy to instance. So the simplest change we can with tags, right, you can give any AWS instance, and so that you can actually search So we'll go back to our code. And actually, we apply a tag. So this is all you have to do, all the tags that you want to give it. So I'm just gonna change this tag, I'm just going we'll just call it Ubuntu. So we're going to give And we're going to do a terraform plan now, just So it's going to refresh the state. And now take place. And so you know, you'll see that any you'll see this yellow ish orangish color with we're going to change something regarding this That's the by first server resource. And if we change that's going to be made. So it's going to enough to know that look, you know, we know what Amazon. And right now it has no tags. But in then terraform goes in and figures out Oh, okay, So we'll do a terraform apply now. It's And once it's doing that, once it's done to make one change. And we're going to say Okay, and it successfully completed We'll go back to the console, we always want to Don't just take Tara forms word for it. the name got populated. So that's the special tag resource and just scroll down to tags someplace, Here we go. Yeah, I forgot And so you can see here we've got our tag and if we remove that, or comment it out, and And Tara Form is going to talk with AWS API, just And it's going to see that it has a tag, but we're going to make the necessary changes. And so all from a name of Ubuntu to null, which means we're it should remove that tag. And if we hit refresh, Up to this point, you know, I showed you guys instances, I think the next logical step is And so if we want to destroy the instance that Once again, when we run a terraform, destroy, And it's going to show us what are the changes anything with that dark red dash means we're that one EC two instance that we've deployed. associated with that. And so when we hit yes, it Alright, so it successfully destroyed you can see if we hit refresh, this guy should terminated state, and then I forget how long it they'll get completely removed from the AWS the instances that were deployed using terraform. don't know, 1010 of these resources, what's going it's going to destroy every single resource you know, if you want to destroy a single have to pass in to actually make that work. By entire infrastructure. So you probably won't be a production environment, usually, usually, you're you know, making changes and then applying those thing that we can easily do. So first of So I'm just gonna do a terraform apply, we're Okay, and once it's deployed, let's just quickly the new instance, that's been created. And what declar style of writing code that I mentioned to destroy a specific instance, what we can do right? And so instead of deleting it, which is doing the same thing as essentially terraform will see that look at this. And within And so terraform will see that it'll check the EC two instance, deployed by terraform. And I'll You know, we should not have any resources So let me go ahead and delete that one resource It's going to refresh the state is refreshing that instance, that we created. right, based off our code, there should not be an and destroy this sucker. Though, if we hit Yes, just another example of that declarative nature of you know, delete instances, or delete any resource your terraform file, and then run apply terraform you don't want. So you don't actually have to So it looks like it's destroyed it. Let's And so it looks like it's already And so there you have it, guys. So that's You can do it through the terraform destroy and do a terraform apply and terraform Till now we've till now all we've done was you can do with the AWS console, we can do it in some of the other things that terraform can do. resources within AWS. So if you're already if you the AWS instance that you created, you I don't do it through the console. So either do and then run a terraform apply And once you have it removed, what I want create a VPC. And I want to explore how to and so if you don't know what a VPC is, it just a private, isolated network, within your AWS as you want, or there may be a limit, but you can VP C's by default, is going to be isolated the first thing that we want to do is always just search for a resource, AWS underscore VPC, that's see that the configuration is dead simple, right, And so this just means that for our VPC, the 10.0 to be used for that VPC. So let's just copy And I'm going to change this name, so we can give this my first VPC. And keep in mind that this is terraform. So anytime we want to reference this And if we want to give the name within AWS, we the configs here, and then this is how you do it. that's called main with the capital N. And we'll Okay, and so this once we run this, we'll create to create a subnet within that VPC. And this And I'm going to show you why in a second. But you don't know how to find it, the first thing I AWS, and then whatever resource you're trying just search for subnet, and it's usually going to AWS underscore subnet. So it's going And you can see how to configure it is pretty AWS subnet, then the name. And then we have a cider block. So what subnet do we want And then any necessary tags. So let's copy I want to change up a few things. I'm gonna And the cider block 10.0 dot 1.0, slash 24. That's And then for tags, I'm going Okay, and here, we have to specify the VPC ID, and you're probably thinking, Well, how do we get the VPC ID right, I can't go into created that VPC. This is where the power of other resources that are being defined within we're creating, and pass in the ID down to this All we have to do is we have to specify underscore VPC, just like it is up here. name of it. And so we'll take this name. paste it here. And then we have to get a specific property has an ID, sorry, every resource has right here is going to get the ID of this VPC that that's how we can reference other resources that what I do is for simplicity sake, I usually just I just remove these two quotes, put in a dot and Okay, so I think we're good to go. Let's try to Apply. Actually, let's do a terraform. And so we'll see all the changes that are And so you'll see that we're creating a subnet. you'll see all the details that are yes, at this point, and it's going to Okay, it looks like it's already done. That easy to instances that take a long time. But if Who cares? Anyways, let's go to services, search by default, there's a default VPC for every user. we don't, we can ignore that. I just wanted were confused as to why there's two v PCs. But And if we take a look at the details, we've And then the tags, obviously the name being So there's going to be a whole bunch of subnets default VPC that gets created. And we want to just dash subnet. And so if we go here, we'll see that which is prod, which is going to be the VPC that the cider block, which the 10.0 dot 1.0 slash 24. tag, which is the name, which you can see right up you're probably thinking, well, since when we the VPC resource has to get declared first. does not need to be defined first. And I'm I'm going to do a terraform destroy when Okay, so it's been destroyed. Let's just double And what I'm going to do is just to prove and paste it right above right above the VPC. So and we're referencing the VPC, even though the this is just to show you guys that the order within terraform, which is a little confusing, right, it always follows a sequential order, Let's make sure we save everything. And then tired of having to hit yes, whenever you want to dash dash auto approve, and that's going to skip step away from your seat, go grab something to And so you can see here, even though you can see that terraform Actually, I realized you guys. And so I'm going to make this is there a way to do that? there we go. But if you take a look at you'll see that we create the VPC first, they And then we created the subnet. So terraform does things because terraform is intelligent enough So terraform knows that a subnet belongs in a VPC. the VPC or creating, it knows to create the so terraform is very intelligent, it can figure to worry about any of that nonsense. It'll figure this, there are certain instances where it can't. always tell you whenever terraform can't and it'll give you a workaround. So like usually one resource depends on another but for the most Now, if you guys have been following along, you files that gets created on the left side. And so that's what I want to cover in this section. So So this folder gets created whenever we initialize right terraform in it, it's going to create that necessary plugins for our code to run in this of the code for the, the AWS provider is going to to you guys, I'm going to delete this real quick. It looks like he just deleted one of those Alright. Okay, so they're all deleted. it's going to throw an error saying, Look And so what we have to do is we have to it's going to do that initialization process. folder that we just deleted. There you go. So the configs for AWS, right here. Now the second file that you may be wondering out, what this file is, is that it represents all of we create a resource within AWS or any cloud track of everything that's created, right? Because an extra tag, or maybe change the instance type it needs to be able to check, you know, what is what are its configurations and compare it to it just creates a simple text file. And so we've it's in a JSON format, I can't remember if it is me on that. But we can basically store all of the you can see we've got the AWS provider. And we can see all the resources it's created. And so you can see all the details about there's going to be a subnet. So this is the one all of the information regarding the subnet. So you ever go into this and start deleting things, mismatched state from what's actually around with the TF state file. It's a very to the overall functionality of terraform. file gets updated, I'm just going to create copy this, and we'll just paste it down here. And And I'm just going to change the cider And might as well just create a I'll call this subnet two. And for the VPC ID, that the typo, and we're gonna just change this to make sure that this subnet resides within this Now, if I do a terraform, apply, do a dash dash auto approve. And Now if we go back to our TF state file, we can subnet one already. That was already in there. And right? So you can see that anytime we create we're going to update our state file so that Alright guys, so that's all I Till now, we've only been doing very simple or creating a VPC or a subnet and we haven't even And so what I wanted to do was With everything walk you through how to create an EC two instance, assign it a public IP address, so that not only changes on it, we can also automatically set up a traffic. And you know, this task, it seems like it's actually a little more complicated than you do anything from a terraform perspective that we walk you through that. And I've actually outlined there's nine total steps, technically 10, we're Just to keep things a little simple, we could do more complicated. But just to walk you through And then within that VPC, we're going to designate an internet gateway is so that we can actually want to be able to assign a public IP address to it, then the next thing that we need to do is we this would have been optional, but I thought all things that you need to be able to do. So we're going to then create a subnet in step four. assign it to a route table, or then they'll get And so this will just associate the two together, And the security group is just responsible for to any one of your EC two instances. So since this Port 4434 HTTP and HTTPS traffic, we're also going you know, obviously connect to it and make changes And that's going to be assigned to the subnet an elastic IP. So an elastic IP in Amazon world the internet. And then we're going to assign that And then finally, we're going to create an through terraform install, and enable Apache. or that network interface that we created in step we should have a live running web server. And do whatever we want with it. Alright, guys. So that we need to do actually is create a key pair allow us to connect to these devices. So AWS that we can connect to these devices. So to set And then there's a section within here called one key pair here already, but I'll walk you do create new key pair. And here, we'll just we'll just call this access key. If you I just couldn't think of one. Okay, how about So there's two different file Go ahead and download the PEM format. For now, a ppk if you want to use putty. So, you know Windows user, download the ppk. So that you can you're gonna want the PEM file. So you know, are using a Windows machine, download the PEM So we'll create this key pair. And it's going just remember where it's getting saved to. So it's And just keep that in mind. Okay, so now that this key is going to allow us to actually you know, let's go through this And you'll see that just how easy it is to create to all the necessary documentation so that if and so the first step, create a VPC, you know, I'll walk you through that. So obviously, I So just search for terraform AWS VPC, this and Google will tell you what to do. And so here, I'm just gonna copy and paste that. I'm it doesn't really matter for the purpose internet gateway. So this is something new. But AWS and then what was it called internet gateway. the only thing you have to pass in is And I'm gonna just go in here, paste that in And we need to pass it the VPC ID. So remember, terraform code. And so we'll just reference well, let me give this a more descriptive prod VPC. Actually, let's give this a tag as well. And so to reference this, we'll do AWS underscore VPC. And then we have to do a dot and property of this resource, we And don't worry about giving giving us a tag. So a custom route table. So this is something that's AWS route table. And, you know, so we could just kind of navigate to wherever it just takes forever to find what you're And so here, we want the AWS route table. And it's And I'll take you, I'll explain step And I'm going to give this a name, And we have to reference the VPC ID, so we can And we don't really need a tag for this I think we'll just call this prod as well. Okay, routes for this route table. So if you look at the 10.0 dot 1.0, slash 24, we're going to send to do is I just want to set up a default route, the internet gateway. So to do a default route, you just do this 0.0 dot zero, slash zero. And traffic wherever this route points. And this is remember, we're just going to do it the same way the AWS internet gateway. And so we just do then you do dot, and then we just reference the we want the ID property. Okay, and so that's And we can also create an ipv6 default route, I'm go put it in. And so for an ipv6 default route, colon slash zero, it's the equivalent of this. it to the same internet gateway. And you know, our traffic in the in from the subnet that we're Right now we have to create a subnet this, we don't need to kind of search this before. So resource AWS underscore I'm just gonna call it subnet dash one. Let's just grab what we did here for a lot of copying and pasting here, guys. And then we have to give it the the actual subnet And so I'm going to use the 10.0 dot 1.0 slash property so we can actually start suffi what don't know what an availability zone is, within just has one data center. Within each region, I'm not really sure how many maybe like of their data centers goes down in a region, redundancy. And so you can actually deploy And we can pass that in bypassing and then just specifying the name. So we'll just going to be US East dash one, a one B, one C, and And then we can give this a tag as well. So we'll And so now we've created a subnet, but we actually have to assign this subnet resource, a resource type within terraform. And we'll just let me pull up the documentation so AWS route table Association. And all this with a route table. And so you can see as well as the route table ID. So we'll copy subnet and the route table. So we can remove that dot subnet dash one.id. And then let's grab paste that in there, remove the quotations, lips, and then just join them together with a dot. And have to do for the route table Association, we not going to reference that anyways. So the next this is something new again. And so it's always that's a really clamped down on only the protocols And I'm just going to copy this example So let's give this a name. web traffic. And we're gonna change this to allow just going to be there to allow just web traffic. And description, we can just change this to our VPC. So there's, we already know how to do Now, this is where we actually apply policy as well as the egress policy. So in we are going to allow TCP traffic on port 443. means it allows us to specify a range of ports. So 443 through 447. So when you just do the same And this is the protocol. So you have TCP you have clamp down on what subnets can actually reach this address of our of our work computer or something this. And so sometimes it's best not to open it server, that's meant to be used by anyone we want, So we'll change this to 000. That can access it. But if you just wanted like dot one slash 32. And then this would I can access it. But we want everyone to be able as many ingress and egress policies as we want. traffic. So htt ps traffic. I'm just gonna call we want Port 80 and Port 22. So we can just copy Hit Save just so it formats it. And this is TCP once again, so all web traffic is TCP. And then finally, we want one for TCP, and then yes, any IP address. And if this is just saying that, you know, we're And when you put n minus one for the protocol, it means any IP address. So this is exactly what we is always setting up the Ingress policy. And we Alright, now we want to So let's go to documentation for that. And so I'm going to copy this. We're going to change the name, Nick. And so we need to assign this Let's find our subnet. Where'd it go? Here And here we need to specify an IP. So what IP address within the subnet? Well, not technically a couple addresses like the dot one and a couple dot 5010 dot 0.1 dot 50. And then finally, And so let's pass in the security group And we can actually attach it to a device can actually specify what Nic we want to use when EC two instance. So we're going to delete And then now, so this created the private to assign it a public IP address so that you And to do that, we need to create an AWS elastic All we have to do is just we can So VPC equals true, I can't I forgot what the documentation. So this just means Boolean if we have to set it to true. And then network interface we want assign it to, which is the one And then when it says associate with private gave right here. And also, I guess, here we're passing in a list of IP. So But we're just going to assign one here. And then dot 50. Now, you know I told you guys that and it will figure out the order at which things However, there are certain gotchas. And is that the AWS IP relies on the deployment of And so if you try to do this through the and assign it to a device, that's, you know, on internet gateway, it'll throw an error, because, you need to have an internet gateway. So deploying deployed first before the actual elastic IP gets can't figure that on its own. And if you actually know that. So it says, elastic IPS may require So you can use the depends on to set an So what we can do is exactly what it told and set that equal to the the internet gateway need to specify the.id, we want to actually All right, guys, we're almost done, we just got one last step. And And here, we're going to do resource AWS underscore instance. And then we'll the AMI, so let's grab the AMI from our we'll just search for Ubuntu. And The instance type, we're going to do And here, we can also set an availability zone. And I'm going to make sure this is very important used for our subnet. And so if you remember, Where's our subnet? There we go. Our subnet we And there's a reason why I hard coded the it, Amazon will, will pick a random availability times where where the subnet would get deployed would get deployed in another availability two because they're essentially in two different make sure you to hard code availability zone, or Oh, you know, you can't have your server and then your subnet and another one, anytime in the documentation, it gives you an Now, if you remember the key pair that we created, access our device. And so let me go back to main dash key. And now we can specify the network interface. you're wondering where I'm getting all of this, AWS terraform instance, it's going to walk us to do is we want to scroll down look for network Within word, it actually it didn't Here we go. There's a network interface section. And this is what a block looks like. So you our resource to define a few extra parameters. And a device index. And all this is doing is that, you we can give it a ton of different interfaces, have to tell it which interface you want it to be Ethernet one, Ethernet to Ethernet, three, and first interface. And you can do that by specifying And we want to set that to zero, it's kind of like, you know, like in any you start with is a zero instead of one. So network interface associated with this device, So we just have to reference this And now guys, this is where the actual magic we're going to tell terraform, to on deployment the server so that we can automatically install underscore data block. And what we have to a little goofy. But we just say dash that elf, put that in there. And then now we just type in with any bash script, we want to start off with And then now we just specify all of we'll do a sudo apt update, dash y, we'll And then we'll do a sudo And then finally, this last one's kind I'm going to copy some text to the index dot does that we can confirm that, you know, I'm just gonna say we'll say echo. And then we your very first web server. And we want www, but HTML slash index dot HTML. And hopefully, you know, obviously, you guys can run any command so you can install, you can install any package, from here. But once you're done entering in all starts all the configs. And then the elf at the And then lastly, let's give it some tags. will Let's hit save. And now we're Apply. And it looks like I messed something up. A static list expression is required. Ah, you use the depends on parameter, you And so the reason we pass in this list multiple things that we need to wait on, before make sure that you know the VPC got created, so on. So you can put in as many criteria it in as a list. Let's do a terraform. Apply Looks like it's good. So far. We'll do yes. And it looks like we got another error Yep. And I already figured out the mistake, This should not be egress only gateway it is up here. And that was just because I But you know, just to make sure you All we're really doing is we're just saying going to go towards the internet gateway Alright, it looks like it's done, guys. So in the console that everything is okay. And so let's see if it got created. And so we've got one server, you got the previous one. Obviously, I messed up a whole bunch of things. But this is Obviously, we can go through each and make sure our subnets good, make sure our route because I already know there okay, I instead, how we can connect to this device or actually, And once it's initialized, let's just navigate So I think it's probably at this go to that. And then we'll just go to and your web browser, go to that. And you can see that we installed Apache on our server. And we served to all the users. So that just confirms now what I want to do is I want to show you Since it has the public IP, we can it's going to vary depending on what operating I'm going to walk you through that now. And then on a Linux or, or a Mac machine. So if you're on download a software called putty. It's a little search for putty. And then let's see if I can so you can just download the installer. So or get the 32 bit if you're using the 32 bit. So and just search for putty. And you'll see got installed. There's putty and putty Gen. And need to open up putty Gen. And the reason we need told you guys that, you know, there's the there's think it's ppk. And then there's the PEM file. So Petey likes to use the PKK file or the ppk file, to convert this PEM file to the right format to to do that is open up the putty Gen application And here, select all files. And So hit open. And it's important this and then And it's going to give you this warning, go it a name. So I'm just going to call this main ppk file. So I'll have a pen version as well as a I'll hit save, and I think it should have And let me go to my downloads folder real quick. we have the main dash key ppk file as well as the out of this party, Jen. And we're going to open up and keep opening up on the other window, which console. And the way to connect to one of these it's going to give you all the information on how the user for this device is Ubuntu. And then you but we can actually confirm the IP address here. login using the user as Ubuntu. So we'll do Ubuntu and then the IP address. So let's copy this IP using that ppk file. And to tell putty to use that is a little small for you guys. I don't know how gonna have to bear with me, hit the off button. file for authentic action. So hit browse, and hit open it open again. And once again And it looks like I'm running into some Let me close this out. I'm I should be able to ping 3228 that 248252. Or no, we didn't allow pings. Let's just make Now, why is it that we cannot reach this Let's view inbound rules. Oh, look at we're allowing port two. And we don't So let's go back to our terraform file. Here we go. This is where I mess We hit save and then do a terraform apply it Alright, that's been done. Let's just double Now it says Port 22. And let's open up putty we want to go to Ubuntu at through SSH, go to our authentication, And it should pop up with a And at this point, you should be logged in using you can run any command you want. But you let's just do a system CTL status And so and so it's running. And so one of these boxes on a Windows machine. Let And let me just copy this PEM file And so remember, we want the PEM file on Okay guys to connect to our web server or an EC going to be identical. The first thing that I want AWS and log into your console. Because it actually step, it's actually really easy. So if we go to go to your web server and then tick Connect. And do ch mod 400 and then the name of that PEM file the permissions to the correct values. And then we you go to your command line, you do SSH dash I and then we want to connect to it doing Ubuntu at and So let's go to our terminal. And let's find that And so I've got that main dash key dash Pam. So And now to actually connect to the server, we main dash key dash Pam. And then now we IP address. So let's go back here. Let's copy the Enter. And we should get this same warning that And there you go. You're now connected to So that's all I wanted to show you guys in You know, I showed you guys how to create a lot you're going to need to know how to do. And relatively comfortable with navigating resources. Definitely go ahead and you do a terraform destroy because we did deploy a any kind of unexpected bills, even though we destroy and then we can just do a dash dash terraform and oh, not the story. But to cover when it comes to terraform you know or, or modules or things like that. So there's that's going to wrap it up probably for this topics you guys want me to cover, let me know, and something that I really enjoy working with. So also, let me know. And I'll be happy to do In this video, I'm going to go over a few extra And if you've already destroyed the go ahead and deploy it again, or at least just deployed so that we can actually take a look at I've already, you know, run this terraform resources deployed. And the first command that I And by the way, guys, if you don't know off with terraform, hit Enter, and you'll see you know, with the different commands that are we have. And so right now, I want to focus on the terraform, is down here. So the terraform state, and then hit enter, you can see all So we've got left, this is the main one that I'm state list, this is going to list out all So any resource that I've created in have an entry in this output. And so you can We've got the web server that I created, as well the route table, the route table Association, the you actually want to see detail, regarding any one show and then just copy one of the one of these the elastic IP, I can copy that and paste it terraform state list. And it's got Copy that. Alright, and so you can see it's going to give us include a lot of information that would normally the IP address, we can see the association ID, that gets created in AWS. And then we can see the as well as the network interface. And we can even because there's gonna be a lot of times to know what the IP address is, especially the through the AWS console. But you know, we have the command line really quickly without having really any one of the resources that we've regarding the web server that we deployed, we just do a terraform state show. And you can that server that we deployed. So we can see the what availability zone it was deployed And, you know, a couple of other details that in the AWS console. So you know, those are the terraform state list, and then terraform state In the last video, I showed you guys how to we've deployed using the terraform state show And those will allow you to see information like about you know, like, what's the public and a lot of detail about these resources that we've handy. But I want to show you another thing that because, you know, after you deploy something, list and then whoops terraform state list. And elastic IP that we created, you know, show And then just copy that. And you can see under the public IP property of this resource times where, you know, it's kind of a little state list. And then terraform state show for if we could get terraform to automatically print guys, there is a way to do that. And that's by any one of these properties that we can see, by resources, we can tell terraform to automatically And we can do that using the terraform output it is. So as I said, before, you know, one of that's going to get assigned to an elastic So we can just do a terraform terraform, we an output for this. So I'm just going to call And then here, we just assign it a value. So From this terraform state show, so to get pass in the name of our resource, which is AWS, we want to grab the public IP property, okay. So AWS underscore IP, dot one dot public, get this property and it'll print it out into follow me save this. And we'll do a terraform And let's just wait for that to run. And I Alright, look at that. So the output that we public IP, so that we don't have to go into And so this can come in handy, because, that we are concerned with, without having to And we could obviously, you know, grab any let's see what other properties we can grab state list, and then terraform state show, and So let's say we want to grab the private IP of our server, as well I think the ID would be cool because we were hard already know what it is. And so we can just define then we have to give it a name. So just give server. We'll call this server, private IP. we have to set this equal to our And remember, we need to get our property name. So And I can't remember if we can put two values So let's see if I just copy And let's try to terraform apply again. Yep, so it to create another output. And we'll call this Alright, so now when we do a terraform, There you guys, there you go, guys. So you we've defined. We've got the server ID, we've got you know, you can always verify the and it's going to print out all the outputs for you know, into your config, but you don't want terraform apply could potentially make changes network, you don't want to accidentally deploy or So, you know, if you're in that situation, And this should, you know, just refresh all of so that you can verify them without actually, you With the decorative nature of terraform. It's kind deploy your terraform config, or destroy it. So configured in your terraform file or destroy all you know, there's going to be instances where Or if you're just trying to roll out with where only certain resources are to play are set of resources that are deployed. And so we can to either apply or destroy them by passing in the of resources deployed. And let's say that I just we can do a terraform, destroy, and then we can to provide the name of the resource. So we'll do instance. And so this should leave everything you know, the route tables, the subnets, all of just delete this one easy to instance, let's All right. And so if we go up here, you can see that we're going to and that's that web server that we only one resource is going to get destroyed. If I Alright, so it successfully destroyed just that opposite thing, and deploy just this one resource, to accomplish that terraform apply dash target deploy. So in this case, we're just deploying And I'm going to move the apply to here. Alright, and if we take a look at the we can see that it's going to add one We'll hit yes. And let's just double And there you have it, guys, we've deployed just So this was just a short video, I just wanted to an individual resource or individual resources hopefully gives you a little bit more flexibility terraform. Now, just like any other programming variable so that we can reuse values throughout And right now, inside this example configuration going to create a VPC. And then we're going to new up to this point. You guys should already be do is I want to take this cider block definition the 10.0 dot 1.0, slash 24. subnet in a it's very easy, all you have to do is just variable so we can give it any other name. So I'm Okay, and within this variable definition, parameters. And all three of them are completely but the three options are, we can give it a as well as a type okay? So, once again, all is exactly what it sounds you can like, you can is going to represent the the default value, so the default value going to give this variable if we don't So I'm going to leave this blank for now And then the type so we can actually perform a user enters in a value, we can make sure variable. So if we're expecting a string, And there's a couple of different types it supports strings, it supports objects, tuples. And if you're not sure what not really sure what type needs to be passed to say that we support any type. But you know, we back to using type constraints. So for now, all And I'm going to hit save. And let's see what actually, one more thing, we actually have right. So to actually reference a variable in this subnet right here. And to reference a and then the name of the variable. So that's going you can see that nowhere in our code so far have we just provided a description. So if we do a look at that. So any variable that isn't assigned enter in a value for that. So I'm going to give this value that I'm passing in is going to get subnet resource runs, it's going to pull that hit enter. Let's wait for that to run. Okay, so at the AWS console just to see if that actually And so you can see here that it got passed so that just confirms that our variable is get prompted for what the value of a variable in values or assigning values to a variable. And And so what we can do is I can do a terraform. So we can delete those resources. And it looks you'll see that when it needs to get destroyed, That variable that we defined, but for destroying, technically just leave it blank, and it We only really care about passing in the Alright, so we've destroyed the resources. to a variable through a command line argument. we can also do a dash of var. And then set a value subnet underscore prefix variable. So we'll do it to whatever value we want. So I'm going to do And now let's double check in the console to And so you can see here, we've now got our that got assigned on the command line argument in reality, I don't think we're going to use Very often, the best way to do it is actually and terraform automatically looks for a assignments. So we can just create that And here we can define a value for what was it called? subnet prefix. And so and then let's give it the value that we show that something has changed. And so I'm going It looks like it's still looking for, let me cancel that I messed something Let's just wait for that to finish up, I cancelled actually defined this variable here, it should Okay, so let's hit refresh. And let's take a 10.0 dot zero slash 24. So those are really the Technically, we can also use environment variables on using that as an example or giving you an to come into play when we worry about how we're instead of just hard coding it into our terraform use environment variable. So I'm going to Now, the next thing I want to cover is, well, use a file called terraform. That TFR let's Or let's say we had multiple files for multiple your terraform config start to grow. You know, you Well, we can tell terraform to actually look actually, before I do that, enter your terraform I'm going to rename this to let's And now for terraform, to actually look for that that file. And we can do that by passing in a And we can pass in the flag dash var dash file. And then we give it the name of And so you can see that we didn't get prompted to, terraform was able to look at this example dot parts of this video, I did mention that one of a default value. And so this default value can be And we can do an example of that just by and let's just assign a default value. So we'll the user doesn't input a variable assignment, then this value. So once we save that, There you go. So even without having a value still ran. And if we go to the to AWS console, a value of 10 dots here, that's six dots zero. variable. I'm going to remove this for now just so within terraform. I'm also going to rename this so Now I'm going to show you guys how to actually in this case, the subnet or the cider block needs And so we don't want to receive a variable of any do is we can say, type equals string and so Now, underscore prefix equals, and instead of a, zero to zero slash 24, or something as a try to assign this value. Alright, let's see Oops, it looks like string is not a valid type specification. So it must c, and so now it throws an error saying the given subnet prefix. Because it, it checks to see if so it throws an error. So this is just a especially when you're working on large code you know, colleagues, this will just make you know, input a wrong variable type into see an error when they run the config. So it's Now, while this is set to a list, I want to show And so what I'm going to do is, I'm going to, I've removed that type constraint, and And I'm just going to call this, we'll just call And here, we're going to specify the cider 10.0 dot 1.0. And then for the second one, we We've got a list. And now to reference the up a bit. So this is going to be the first object the first object can be referenced with a with a value of one and so on. So it's That to one, and let's give So now we've got our two different subnets, the dev subnet should be a 10.0 dot 2.0. All to show you guys with variables. And I want to So right now we just have a list of strings. so what I'm going to do is I'm going to change up you know, the tag or hard coding it, what I want to look like this where we're going to have an the cider block. And then we'll also have a name assigned to the cider block and the name will get we'll go back to our terraform tfrs file. Here we'll create an object and we'll should equal that's going to be the neck and then we have to specify And this is going to be prod underscore subnet. And then for subnet two, we'll do the same thing and we'll set that equal to 10.0 dot 2.0 going to be the name. And that's going So we're going to have to under the cider block, we want And after the name, we're going to have to subnet prefix want to grab the first item and just paste it down here, just make sure And there you have it, guys, we were able to to assign values within our terraform flexibility with variables, you definitely possible so that you're not retyping the same So just keep in mind, I it was for me, especially because we have to, you here, we have to assign it in the TF And the TF files you define a variable and