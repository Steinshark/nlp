So, I want to talk about why I chose SwiftUI to or some web-based tool even though I've been whether or not I regret this choice in the end. and re-writing it from scratch using something Let's first look at what options technologies for building an iOS app? * Using web technologies: JS/TS with that gives you a native app wrapper and bridges * React Native. A hybrid between the previous but it then compiled into native components. Flutter. Where the framework says to the OS: "Just every single pixel myself and all the gestures That's roughly the landscape, now I'll give you start with web technologies because for me I think it's the worst option you As I mentioned before, I have 15 years of and I know quite well the strong and weak say for sure smooth, interactive UIs are And it's definitely not the platform's fault, things and we, as an industry collectively, to do something that it's not meant for. fundamentals, are heavily optimized for the web is the highest priority: layout engine single column because text is most often laid out separately so that user sees the text as quickly icons), scripts for user interactions all of that loaded separately after the textual content. claims to be a web application, it jumps around and placeholders while it loads all the resources we got used to this and no one really cares that content and information, good user experience a mobile app and everything shifts and jumps for And of course, I'm not saying it's impossible to it just requires a lot more effort those fundamental defaults of the platform. not about content, so web technologies Now, about frameworks like Ionic, that wrap to the operating system. They are doing all they which I think results in a lot of unnecessary code the resulting app slower and buggier. library to make your app look native. And in a lot I think most people while using those components they couldn't articulate what exactly is wrong. do not exactly match the real system like paddings between elements, the timing of this combined makes the app look and feel like recommend going straight for a complete custom And Flutter btw, which I'm going to talk Now, I don't have much practical experience with if you don't know, Flutter does everything handling of user's input, all of that stuff developers who use Flutter also need to write in a layer which is specific to every OS, but it's that's how they achieve cross-platformness, right. to the approach with web technologies, where the other stuff, but Flutter goes one step further and the OS, similar to what games are doing, and they can do whatever they want with it. approach, it's a huge engineering challenge probably quite a lot of fun as before all the tech debt has accumulated. with Flutter, why I haven't, and wouldn't, choose First, by deciding to render the UI on its own throws away all the components and patterns way to use any of the system UIs, meaning it will Of course, Flutter team also understands this, so Widgets - component libraries that mimic Material Widgets it's clear: Flutter, Android and chance those teams can coordinate and come I think if you're not Apple and you're even already lost. The resulting UI will never look then Apple constantly tweaking and adjusting with this moving target, and eventually one you'd have to do a bunch of work just to be back Integration with the OS features is another like access to the phone's hardware features button last year and most probably camera button Push Notifications, Live Activities, StoreKit all of these require a third-party plugin system features into my app. So not only this but I'd also need to rely on those plugins to on top of the bugs in the native APIs. Does There is another reason why I think Flutter, is a dead-end at least for iOS apps, but and SwiftUI, so I'll talk about it Now, if for some reason, I have no other I would choose React Native. Mostly because components and frameworks. But if There is the code that I write in javascript or APIs, then another layer with javascript and another layer with the React Native native components, lays them out and The amount of indirection here between my code And fundamentally, this whole setup suffers that bridges system frameworks into my code by random developers and community without so it's only a matter of time for some of those On top of that React Native runtime is another weird behaviors, as any software does. And at the using native tooling that you have no clue about, familiar web technologies to build native apps. expectations, that you will get 80% there with directly transfer from building React apps on the you would need to have some understanding of the a bit of Swift or ObjectiveC or at least debug the of the effort might actually take the 80% percent But I did not choose React Native to build my about. There is one other thing that makes Swift Now, even besides not having the flaws that I not using system frameworks, extra middlewares on a bunch of third-party code. There are still to build my iOS apps. 3 of those reasons are won't agree with me, but we can take it offline, is one objective reason that is just a reality Ok, 3 subjective ones: than Javascript, TypeScript or Dart than React or any other framework for the web JetBrains product Again, won't talk about those right now, moving on * You just cannot build certain features or It's your only option. I mean home screen and the new control center widgets in iOS 18. Two are pretty much Swift and SwiftUI exclusive. app in React Native or Flutter and miss out building in SwiftUI, the experience that stuff that goes outside of the main app. have a holistic integration with the system, And I mean, I totally understand the many people with a single codebase. I would argue that instead of spreading too thin if you put all your effort into a single platform you would reach much more people anyways. you can consider the number of no matter how popular your next app potential new users in your target audience. happy to discuss in the comments.