[MUSIC PLAYING] DAVID J. MALAN: All right. This is CS50's Introduction My name is David Malan, and this Last week, recall, we and particularly one of protect our accounts is generally by But we focused last time really to keep these things secure. And yet, there's another you have an account with and that's the server storing that password so that you can actually that is, prove to this that you are who you claim to be. Well, in the simplest that are storing our usernames and or maybe doing something For instance, if a website or app has Alice and Bob, and that Alice's password is Apple you could imagine that a website in a very simple text file username, colon, password, new line. Username, colon, password, new line. And in fact, that's how passwords are stored on systems like Linux, not They often have a little more but in essence, it's the But this wouldn't be a good thing to Why? Well, suppose that this website are somehow hacked by an adversary. That if someone gains access to and passwords, well, at have everyone's username and password. And we talked last time stuffing whereby an adversary, once they system, they can try and password into other other apps just in hopes that you are, and password elsewhere as well. So this is generally not a good to everyone's usernames and passwords. And even though, of course, in an we should probably, as the creators of should probably do everything the fallout, the downsides, the and daresay, when our database or this So how might we go Rather than just storing apple so to speak, literally in why don't we go ahead and employ Now if you've studied you might actually know this phrase structures. Well, it turns out the idea in this and in fact, this is a technique all sorts of problems. Well, what do we mean by Hashing is the process of and somehow converting it to a Now these hash values They're typically strings of text that but they're generally of And in this case here, when we go converting it somehow via an we want to convert it and then store that hash value in So here's a proverbial black box, that I have no idea how hashing works, So how do I think about this process? Well generally speaking, there's Ultimately, I want to get And what this box really represents You can think of this as a you can think of it like a or you can even think about it as a simply on numbers coming in as input. In fact, if you're though we won't use this syntax often, as being represented by f, you can think and you can think of the output of If you're not familiar with but this is directly connected as well that you might But what we care about is passing and getting out a hash, and the password in our database or text So how might we go about doing this? Well, if I were to provide apple let's think about the simplest that doesn't output apple, but that I can eventually So I'm going to propose very simply we can come up with-- and indeed, or taken CS50 itself, can hash our inputs unlike So apple starts with A is the first letter So I'm going to create pictorially that outputs one whenever as does apple. Meanwhile, if we pass to have this hash function is the letter of the English alphabet. And dot-dot-dot, we might get to cherry output 3 and beyond. And you could imagine doing this for Now unfortunately, this because it's fairly simplistic. And in fact, I can quickly think that also start with A and that And that's actually a to whereby when you hash values, potentially, whereby two inputs and we'll consider eventually what But for now, I dare say that's And what might be better is a little something more cryptic, That's too much of a hint. If I see that your hash know that your password now clearly I can do 1/26th the amount of work So we want these hashes generally to unguessable and not So for instance, a very common older output this-- ..ekWXa83dhiA with some therein. Now it looks weird, you probably can't in there. There is a fancy math formula and outputted as its hash there, but in and of itself, it like the number 1 or 2 or 3 would. So we've already made an improvement. Banana, meanwhile, would look like this. And cherry, meanwhile, So notice that these values So using this better hash function, look at the first but looks at maybe all of C-H-E-R-R-Y in this case, we can interesting, more like the values that we've just seen. So let me propose now that what we is not store alice, apple, store the hashes of apple So instead in this password database, The exact same values that we just saw but in this case now, I'm of passwords usernames and hash values. Now why is this perhaps a good thing? Well, one, if someone and somehow gains access to all of these have is an entire list of passwords. So they can't quite as easily go about maybe if this database will give me I'm at least creating some But at the same time, I feel like because previously, presumably, and you type in your username and is the website or app probably do? Well, once that username and typically to that server, compares what you typed in against or their text file, what you typed in as your password is in their database. But now we have a problem. We have you typing the username still in the database. Case in point, Alice But what we don't have We've replaced those So even if you type in-- well we don't want to compare doesn't match; and Bob's banana, we because it's not going So what can we do? Well, the way authentication when using hashing is as follows. When you first create an account or you type in, if you're Alice, Alice, Enter. That username, Alice, that password, But what the server does before is it runs that hash which is apple, converts it thereafter username and the hash of Alice's deletes it, it forgets it in memory. What then happens next? Well, the next time Alice tries maybe the next day, a week from then, a or more time, what happens? Well, Alice types in Alice apple as her password, hits Enter, and obviously the server username against username because it doesn't have the what can the server do? The server can repeat taking Alice's password run it through the exact same hash and then compare that resulting hash text file or database. And now admittedly, we're creating but it's not that big a deal because or if you know how to program, that you've written in software that And honestly, nowadays, you wouldn't yourself, you'd be using a library, else smarter than you, maybe, has no bugs or mistakes, so you're anyway to achieve this goal. But the upside now, to be clear, is the server's hacked into at least they only know the usernames on And let me pause here and see if of hashing for passwords specifically. STUDENT: You said yourself, more often than write the hash taking the course on CS50. So then it's easy to Because we can go know, hash functions that are and then you can reverse the DAVID J. MALAN: Almost. Can do exactly what you you use the same library, the same code, those against what's in the are not reversible, per se. You can compare them, but for reasons we'll come back to. But your intuition is right. And so really, the haven't made our system we've made it relatively more secure. Why? Because we've increased the cost They now have to do more work to figure if they want to benefit from this hack. So again, it just raises keep the adversary stop them from figuring but it might take them might take them a lot more resources or it might even heighten the risk How about one other STUDENT: If the password after the website is is intercepted before it's encrypted, DAVID J. MALAN: Yes, absolutely. Then all bets are off. Everything we just at all if the adversary has before it has even been hashed. Now thankfully, there's going to and we'll come to them today, but it solves one problem but not all. In fact, it turns out that those attacks to our accounts are still possible. You can still use a dictionary, or better yet, a dictionary and you could, one fruit at a time, into the same hash function, that you're using to that's going to give you one And you could compare against whatever is in the that you, the hacker in this story, You have to do more work no longer as simple as just comparing against banana. You actually have to do some work. You have to do some computational work. And if the file is only a few If it's thousands or millions of rows, time, energy, and effort. So again, we're just raising the out altogether. And even if you don't have and even if the passwords are well, you can still, as the adversary, And you can try even the simplest of 0's instead, and you can hash that and and compare that against Then you can try 00000001, what's in the database, and then doing this not just for numbers, A, A, A, A, A, A, A, A, Eventually, apple will be on that list. Eventually, banana will be on that list. But there, too, the brute going to take some amount of time. So it's just increasing for the adversary in But there's yet another threat of the hashes, which There's a term of art known is a very beautiful way of saying might have already hashed all possible Adversaries might have already hashed or 5 or 6 or 7 or 8 or something else. And maybe if they have they are storing a big or a CSV file of all of the words that they've tried, and all of the hash Then it's even easier. Then they don't even need to do hashing and hashing and Then they can just Because indeed, a rainbow all of the passwords they've tried, all and so they just compare the user typed in against the hash Now for certain hash functions, is just not feasible. You might need terabytes or petabytes of and a lot of money, so there on this kind of an attack, but Certainly if you're pre-calculating some of the in an English dictionary, and of the fruits in the world. But there's another encounter on the server with Alice might have a password of apple, but suppose that both Carol and And just by coincidence, they and are in this same database. Now we've already concluded, I want to store the plaintext passwords. We don't want to store literally in the because this is just too easy for the So we at least want to where hashing can leak If I go ahead and use been using to hash apple what do you notice about Carol's Curiously, but maybe not surprisingly, That's, after all, how be it in math or in software, in code. If you pass the exact same input, you're going to get the Now why is this a big deal? Well, if some adversary access to all of these we have leaked information in the by glancing at this don't know what Carol's password but I know it's the same might be enough information to figure Maybe Carol and Charlie are related. So maybe you focus on words or numbers Maybe there's some information that's they both like the same TV shows, You can try to find, in your mind, maybe might lead you, with higher without brute force, even, what Carol's So this is a common problem, and we You can imagine having many more. Odds are, some of us are going the same username, some of us are In fact, without raising your hands or to see, do any of you have a password Maybe a little harder? 12345678? Something very simple like this. Maybe it's an account you Well, that's a perfect have an account on the same system as you're going to have, in that database, and that might be alone enough the probability that you, are actually compromised So how can we fix this? Well, it turns out there's another that we can use to perturb this process. And you can think of like sprinkling a little bit so as to change what its output is. It's not random, per se, but so that it's much less likely that are going to have the same hash value. So how does this work? In this case before, when we we got the same hash again and again. But let me propose that we modify our Not just the password, but A little bit of a sprinkling of, two numbers, two letters, Now this hash function that going to output a hash it's different from the one before, what it was before, it was not this. But worth noting is that in the now is the salt itself. So the salt isn't something that's meant just sprinkled in there to make sure of this black box is a little had put a different salt value instead. So for instance, suppose that we use different salts. And that's the idea. Different users should just in case they choose So instead of 50 and uses a salt value of, say, 49. 49 is not a number that Charlie This is all done by the picking a random two But notice what just happened. If I rewind to cherry with a salt of 5, characters of which are I change the salt from 50 to and it prefixes it with This ensures that even if Carol and there's no way I, the adversary, Because indeed, what ends up in One is prefixed with 50, one is prefixed clearly are completely different. So again, the upside is this takes two inputs, the and then outputs one hash value means except-- except-- so there is a corner case-- if by chance, by bad the same salt for both yes, there might still And honestly, that may got thousands, millions going to run out of you're going to have to reuse salt. But the idea is that downward pressure on the probability We're trying to equivalently so that they are not as likely to my account. Questions now on salting STUDENT: Oh, I'm curious. Where do we store the salt? DAVID J. MALAN: So where The salt is actually stored according to this algorithm, And the value of storing the salt in is as follows. The next time Carol logs in, she types The server now knows, OK, I'm let's see what she types in. Suppose that she types Now the system is not going to compare literally but it is going to hash cherry, but what is Carol's hash-- And it's going to infer as much and looking only at the first Then what the server is going to do, in, cherry, C-H-E-R-R-Y, it's going to it's going to get back this whole string in yellow. And if those are correct, then Carol By contrast, if the username happens then what the server is going to grab the first two characters use that salt and cherry as and hope that the result is Really good question. Other questions on salting or hashing? STUDENT: Is there any sense So hashing it a first then rehashing it for a second string? Or it's just impractical? DAVID J. MALAN: No, you could certainly but a good hash function Especially now, more recent we'll look at in a moment, they and proven characteristics that and you will get a that represents whatever that input is. And here, too, is where that when it comes to this and today's other topics that you or I should be reinventing. Unless you are the researcher developing the algorithm, stress-testing and practically so often in when people like you and me invent our we just haven't spent or we're just not nearly as sharp out there who have really So when it comes to all things here and say, you and I should not be your full-time job or calling in life. There's just too many collaborating with a smart team. All right. With that said, here is look like nowadays in practice. For the sake of chose a fairly simple hash function just two characters, and a fairly Here, in a smaller font, no less, and Charlie's passwords stored nowadays using a more that, notice, by the shear outputs a much larger value. If you're familiar from computer 0's and 1's that are used to these hash values use many more You and I as humans are seeing them as but underneath the hood, these that the computer is storing, which that someone who steals is going to be able to those original passwords were. And you can see, too, that even though their these two strings along the Except in one location here. It turns out that the scheme is that if you look between dollar seems to be the hash value, you'll or other numbers or letters as well. That's a little cheat sheet that tells was used to generate the rest of it. And that's in the documentation for any number of hash functions. So that's just to say, when you create if they are doing things well in a and they are being mindful of your or in a database or some values that look quite like these typed in. In fact, just to give you a it might be to crack passwords-- that on these hashes, in the case whereby we had a fairly short with or without the 18 quintillion possible hash values. Now that's a lot. That's bigger than last But, with enough time, enough those early hash That is, with enough time figure out what someone's password is. If you fast forward to the on the screen, the much longer ones then you have this many And I actually did look but based on reading it on my how to say the word since this is a colleagues could do a But given how many given how many commas this is a really big and I probably don't need to worry about out and still being able to what the corresponding are other weaknesses in the system. Now speaking of weaknesses. Has anyone ever forgotten your password? Yes, of course. But have you ever gone to a website Forgot Password, question mark, in so that you can reset the password? I mean, odds are, almost everyone But has anyone ever clicked an email that actually so that you're just immediately I'm seeing a few nods of the head. You can copy-paste it, Do not use that website anymore. That is evidence of-- that is a practicing best practices. Why? Well, if it is the case that the that means they can see and That means this database, been talking about is probably eventually getting into it and and passwords in the clear, no less. Because recall what these hashes are. They're generally meant When you take as input the output looks completely different those original passwords actually were. And so if that's what's the company who made that website, the they should not be able to otherwise surely, the adversary can. So it is the case, and I've from smaller shops or companies invested a lot of time or if they are able to email it is, by definition, not secure. And it's certainly not up to today's for it to be compromised. So maybe minimally and make sure you're not using Maximally, maybe send them a and maybe linking them to maybe this video-- in which you Questions, then, on forgetting STUDENT: So as you said, some companies and maybe practicing something very bad. So if I were, let's because of my practices, I had a do I as a company have any happened since I have all the do I have any obligations DAVID J. MALAN: It's a really The answer to that ethically is However, the more nuanced going to depend on the industry that any regulatory requirements that oblige you to report out in that way. So I would read up on the context And I will say, unfortunately, it is not that companies document when there have been security exploits. They might announce that but it is rare that companies Now this is understandable because, or if not in legal trouble or financial already, but they want to provide other adversaries-- information about their systems and The downside, of course, is secretly getting expect, learning things with others in the world. This itself is actually a big question just how much and how often you discover a bug or a do you tell them privately, do These are ethical questions that we'll as well. Allow me to propose that separate we can come back to some that we started the class with for Standards and Technology. Notice that this was one other A recommendation from shall store memorized is resistant to offline attacks. Memorized secrets SHALL using a suitable one-way Their purpose is to make by an attacker who has obtained and therefore, the cost of a guessing attack So when I refer to best referring to actual documentation like from other countries, There are indeed these best for this class is to expose both on the consumer side-- you and but also on the corporate as well as to what you you are in a position of being well. Now as for the actual hash these are just some of them that that can be categorized These refer to fairly sophisticated take as input, typically, a password, and then output a hash value thereof. There are other algorithms, be used to verify the authenticity In fact, today, we'll also focus on to ensure that data was not actually over the internet from But ultimately, what we've been focusing here are what are generally That is, these are or, in the context of functions written in code, or otherwise, that take as input That is, a password that's this long, but what's key to these is they output a hash that is always this many bytes or characters. That is, it doesn't matter how these cryptographic, these one-way that they take a potentially know this term for mathematics, and That is, a huge number of values, to just a finite list It might be a long list but indeed, no matter is, if it's of some fixed length-- 16 characters, 32 there's only a finite Now there's an implication of this. When you take a really large input and map it to a smaller mathematically, it turns out that if there will be multiple inputs Think about it this way. If you've got 100 possible but you only have 10 so 100 passwords, 10 to figure out how to put all of those So surely, some of those passwords Think about it in terms If we stuck with that original hash C was 3, presumably Z was 26, that starts with a-- apple, avocado, and so forth. So there, too, you are going to the same finite range of What that means is that if an adversary, look at that hash value you don't know if the password was started with A. And so that's what You cannot reliably reverse the process the original input is. Now there is a catch. That technically means might be possible to log in generally, your actual password and some might make no sense to you, but has the same hash value, that password, But the idea is, especially as we're really long hash values, the out or an adversary even value or what those other inputs-- passwords might be is just so small that The algorithms we've here are also known as means they have utility in where the world of cryptography is of securing data. Securing data while in transit at rest on your own system. Let's go ahead here and and when we come back, we'll explore with respect to our data. All right. We're back. And indeed, cryptography is all of securing our data, particularly from one person to another. So cryptography can be broken down into of which are codes. And codes are not the type of code that It has nothing to do with a mapping between what and the actual message or true Here, for instance, is an actual that was used to map these to these, indeed, messages or The idea is, that if to send a secure message they wouldn't just write Why? Because if that message, written were intercepted by another assuming they, too, read the actual message, In a code, though, you that you want to say to code words to someone who's intercepted unless they, too, have this book. Now you can imagine this being because when the recipient receives all of these pages, these code they have to do quite a bit of work in order to figure out But the fact that they have is a potential threat because if book stolen, then any of the messages so to speak, by looking And any future messages, don't realize that code book could those messages be translated. Not to mention the fact, This alone is page 187. And so that's quite a bit of just to achieve this But there are some terms of art and you might actually but not necessarily So encode, what do we mean by that? It means taking a be it in English or any human and producing as output codetext. So the codetext might sequence of words that might but they're not meant to They're meant to be to figure out what the message Meanwhile, decode, as you You take as input the codetext that you use that same code book and figure out what the to get the original plaintext, be it that the code book is designed for. But there's an alternative to codes, get very cumbersome indeed, they can So it's not necessarily need to physically keep something do so efficiently when converting. So there are also what And ciphers are more So if you have taken a computer you already have the predisposition a big problem and breaking and then applying some kind of in order to solve some problem. So ciphers focus on exactly that. They don't focus on They might focus on individual if it's in the context So in the world of ciphers, seen them in popular culture. So here, for instance, is just one frame Story, at least here in the US. It plays like every day all day around Christmas time, one of the main characters in here is this secret decoder pin that he and the secret decoder pin was And what it does is implement converting one letter But the thing twists left and figure out what the mapping might be. So this is more of a cipher because not in entire words or phrases, And it's a repeatable process can apply again and again to all of In World War II, the had the Enigma Machine that you depicted in films, and this of this same idea of a cipher. But instead of using mathematics or it was much more mechanical. It was with rotors and but it, too, was implementing be configured with to influence exactly But that, too, is a physical device, though, on things more digital, things nowadays implement much more readily But the words we'll use To encipher a message means to take language, or so-called plaintext, to ciphertext as output or rather, an equivalent term here that Same idea, synonyms for our To encipher or to encrypt. Nowadays, encrypt is probably Meanwhile, decipher would to actually take the ciphertext run it through an algorithm or Meanwhile, decrypt would be a refers to exactly the same process and outputting plaintext as output. So how do we configure these can use the same algorithm but customize but also with our own settings so want to send the same plaintext to actually be identical? And indeed, in the it's quite recommended that you and well-tried-and-tested but we do keep one piece of information that algorithm is specific to us. And this customization, are generally known as keys. Now keys, much like a physical key to a key is what unlocks the but it's a key that needs to be known but also by the recipient. So that by having you can not only encrypt but you can also decrypt or Now what are these keys in practice? They're not physical objects but really just really big numbers. And often, there's some mathematical and sometimes those numbers They might be presented on or desktop actually as and maybe even with But at the end of the day, they're if you know a bit of they're really just 0's and 1's. But it's perhaps helpful to think akin to these physical keys. Now how are these keys actually used? Well, within the world are different types of encryption. And the first we'll look at is The presumption is that relies on the secrecy of some key. So if A wants to send a must keep secret whatever key their choice of algorithms. So what do we mean by that? Well, secret key in the context of encryption is also known as symmetric that both A and B in this story are And we'll contrast this in just a which solves other problems as well. So let's consider the much like the process of Somehow or other, this Black box is Taking as input my plaintext and my ciphertext that I can actually send to a recipient as well. So in the context, then, the picture looks a little Not only do you pass as your plaintext message in English you also pass a key. And for now, just think of that key as have somehow agreed upon in advance. That algorithm, then, will And to be clear, the is to ensure that if I and you using the exact same it's not going to be sending the exact same too, per our discussion of Maybe you don't care about but it's probably not a good thing if-- some message, that, makes it infer what it is you sent because to look the same. We want our ciphertext to be unique So, let's consider a Suppose that the message I want to send A, and suppose that the key that I want These are not good best use them for the sake of discussion. Let me propose that the simplest is actually one that would take A as And you can perhaps infer If I instead provide B as input and respectively, then the output is C. So believe it or not, in was known to use an algorithm like this is what's generally known because you're rotating the A becomes B, B becomes C. And I we can go around from Now this, of course, is to very short messages Sending A or B or C is not but it's demonstrating how our plaintext into our ciphertext. However, when someone they need to not only what in this case, Caesar Cipher or a but they also need to And the key might not be as simple as 1. Here, for instance, is an example of 13. If your key is 13 and then your ciphertext should be N, and so now the algorithm 13 is also representative of something as ROT13 for R-O-T-1-3-- It's a very popular way but not in a way that Historically, it was often used If you want to make something a spoiler effects on websites and scramble it so it looks but it's very easy for someone even to just decrypt it. However, I would recommend that you Well, at least in English, there's only through capital Z in this case. So a key of 26 is going to the exact same thing as your plaintext. So there's another joke on the as secure as ROT13 and obviously, that's not Now of course, this particular 1 through 26, not at all secure. Why? Well honestly, I don't even need I can probably take out a and just try all possible I don't need to even and just figure out via brute force to send a message using this algorithm. Not on even single letters, but maybe of their message. Wouldn't take me that long to probably And with code, my gosh, I could that does it even faster than that. So here on the screen is some And I'll stipulate that this using that same rotational going to tell you just yet It was originally an English So the task at hand now is Whether you are the intended recipient you've intercepted my transmission and now you're trying to brute and by the looks of some heads going I bet we could also brute force our How does the decrypting process work? It's really just the If this now is our picture and you should be able to pass 1, for instance or 13 26, and get back out the plaintext. But of course, the decryption because you don't want or add two positions or three positions, You want to go in reverse, so to speak. And so, if I were to pass in B as well, the plaintext decrypted And that holds now for all of the assuming I'm reversing this And now, I'll let you a glance at and see if you yourselves what this ciphertext is trying to say. And if you like the idea if you want to get better you are an aspiring cryptanalyst, on this world of cryptanalysis. And this, too, itself is a job, I dare trying to decrypt messages that Now hopefully the world is than these simple rotational ciphers. And what do I mean by secure? Hopefully they're using keys that are through 25. Hopefully they're using much, much, much so that it takes you and me, when we try it takes us way, way longer than Now I don't want to but I also don't want to spoil this if So go ahead and close your eyes if you or I suppose you can just But in five seconds, I'll reveal and some of you, if you've will know immediately why but otherwise, you might just see So here we go. Your chance to close your From some faces, some of you have but now, I've taken it off the with some actual algorithms. If you'd like to come back on replay we'll, of course, leave it on-demand. So what are some of used nowadays for encryption This rotational cipher that I is not to be recommended. It's wonderful for demonstration but it's not something you should be you're in, say, middle school trying through your classroom that the teacher might intercept doesn't have the instinct brute force their way through it But that's the level of security like that rotational cipher. But in the real world, with our generally used our AES or are popular algorithms that and are very commonly used as or symmetric key encryption require that both the know and use the exact same key. And for our purposes today, that the mathematics of these much more sophisticated and but, therefore, it makes it to figure out, as by trying 25 different might be. Questions now about secret key we've just discussed? STUDENT: So is it possible that gets to know about the hash value-- is using, he might be able and use-- like find a reverse function DAVID J. MALAN: A good question. I wouldn't worry mathematically about if only because with all of the today in modern systems, there are a scientists, professionals who have that these things work as expected. However, if the passwords that have been or if the adversary just gets they are using, it is absolutely a input that maps to that not without significant effort. And so generally, a should not try to keep hash function they're using, what If anything, I dare say, to the public if and when companies standards, all of these to keep secret not the algorithm in like university textbooks but rather, to keep secret the which is the key. And now, if you're using too small well, then you're just using But so long as you're and picking a really big, then things mathematically STUDENT: For an attacker, rather or cracking an algorithm, to just try and access and access the hash function So rather, access how the That way, they can basically DAVID J. MALAN: Everything However, I would push that the company should try to keep You should trust in we're discussing today, both and in the context of encryption. And I've pulled back up on the screen that exist when using one of the most This is such a big number-- I dare say, I don't remember how but I'm going to guess it's The idea is, intuitively, that if the or the search space of both you and I, not to to be dead before the attacker that password or that hash actually is. So that's generally the presumption. Most of what we do today in to probabilities and trying to derive way, way down, even though, if doesn't matter if there's this many tries that one first. So keeping algorithms secret, is generally not best practice. You should be trusting that will protect your data if you are And how about one more STUDENT: How cipher work with word? Not number, like with How we can cipher-- or cryptograph like how it can be work? DAVID J. MALAN: OK, so if your let me first say that generally the keys are not words. These are not passwords, they're not These keys are generally and so as such, they're just With that said, even if it is a and you would learn this itself-- to convert a word to the There's a system called So capital A is actually the Capital B is the number 66. But we can go one level deeper. There's actually a pattern of 0's and and so forth, so we can convert to numbers. And for that, let me encourage So that, then, is or symmetric key cryptography, but because I've taken for granted that the sender and the receiver Whether it's a simple hopefully not 26-- or hopefully But there's kind of a chicken so to speak, in English whereby a shared secret between parties A and in fact? So for instance, if for the first time, a popular e-commerce ideally, and you probably from just living in the ideally you want that connection to be scrambled in some way. Why? Well, you don't want your You don't want your credit card You don't want your personal So it stands to reason that And you've seen this, via something called HTTPS where the But odds are, you don't know and you don't know anyone So what key are you going to with these websites, not to mention new but might come online tomorrow, how with someone else? So that's a fundamental gotcha or secret key encryption, that you have a shared secret But the chicken and in whereby the only way to would be to send it to but if you can't communicate send them the secret you want to use. So you're caught in this deadlock. Thankfully, thanks to that we can solve this, too, via but public key cryptography, otherwise And among the algorithms here might be MQV, RSA, and others as well. And I dare say, on this list, maybe It's perhaps an acronym you've Now what do we mean by or more specifically, Well, in the world of or asymmetric key is implying that you actually don't A and B. You actually use two keys. In the world of public key has both a public key and a private key. And these two are just There is a mathematical relationship and the private key, but that your phone or your figures out when generating So unlike our previous discussion of choose and memorize or store when it comes to keys, in the world of public key And as the name suggests, the is to tell the whole world if It is not in any way secret. You can literally email it out, you can you can post it on your The whole point of the public key But, suffice it to say, the private private by you on your own device. That should never be But the cool thing about public key underlying it is that if with someone else on the internet, to encrypt a message and then or chat or any other technology. And if you had to guess, in the world that can been encrypted with your public key? The only key in the a message that has been encrypted with That's what the mathematical So, pictorially here, if implements this idea of let's see what the inputs If the goal is to send have shared with the world your this message uses your public key, comes ciphertext. That, then, is how asymmetric Meanwhile, when you you can use your own private key received to get back the plaintext. And this is what we mean by asymmetric. Unlike secret key cryptography or you're using the same key back in the case of the rotational you are using one key for one process process. So that's what's RSA is one of the most The browsers you probably using some variant of We won't get into great but one of the most is that it relies on In fact, in a nutshell, what happens chooses a really big It then chooses a really big Then it multiplies them together to And it uses that value n in that the algorithm's authors The presumption here is that when and multiply it against a it is really hard to figure out what the original p and q were. And if you're a little it's a number that can be only-- that And indeed, we can use those, multiply it together in order to get used in the rest of the mathematics. What are the rest of those mathematics? In essence, this. And this will be the see over the course of this class. The value n I just described ultimately if you're unfamiliar with mod take the remainder of some value. So what are we doing? Here is a quick summary of how with RSA. If you have some message m that and you have come up with somehow, earlier that I alluded to, you've come Well then, someone can encrypt it by raising that message and then divide it, divide and figure out what the That then gives you a value When you then receive that message known here as d, and you its numeric value, to the power of d-- divide, divide, divide by that remainder, which will give Now that is a significant but that's the essence of the algorithm. It has to do with picking multiplying them together and then using n as well as other by the algorithm for you, e and d, in ultimately. And this is what's generally It involves lots of division in order to come up but ultimately, it is a very secure without having to agree on but rather, using a public Now there are other techniques of public key cryptography, and another So by contrast, if you do some kind of shared secret, that different humans have So there are alternatives and one of these called Diffie-Hellman, named after So here is the essence of the the goal of which is To figure out, using fancy mathematics, with the same value that they but without anyone who being able to figure out what is that So what's the essence of the math here? Well, you first pick a value It can be as simple as the number 2. And you pick a big prime And those are agreed-upon in advance. Meanwhile, person A, say Alice, which is another really big number, to the power of A mod p. And again, mod refers to taking Meanwhile, B, or Bob, still uses picks his own private key called B and and that gives him B, whereas Alice had capital A. Then, send those values across the internet-- A one way, B the other way, and thanks here, too, Alice can take to the power of her A value, g to the power of A times B mod p. Bob, meanwhile, can take Alice's raise it to the power of his So calculate the remainder The end result, and it's totally are uncomfortable for you or whoo! Just know that, thanks to some this results in both Alice and we'll call it s for shared secret-- even though the value never went Alice sent part of it this way, but because Alice and Bob held on and the little B, they kept able to do these mathematics that with the same value even though any one of those messages, we And now that they have they can use that using any ciphers we talked about earlier. AES I put on the board briefly, Heck, we could even use if we really wanted to, but So again, don't worry so much but if you were to take a higher-level these are intellectual rabbit holes that how the software works. And now to my comments to invent your own this is the kind of reason why. This is the degree of for granted in our phones, that have been vetted by Generally best practice that have been tried try to come up with your own that may very well have faults And the icing on the cake is that to the underlying mathematics, Alice and Bob are both calculating, But more on that in a higher-level of interest. How about one final get from this world of and this is one that's going I do think, in our world, from very archaic that you might write and rather, moving to what we'll It turns out that once you're of public key cryptography and a private key, the first you can share it with the world; the kept only to you. And if you can take that through appropriate a relationship possible that whereas one can encrypt even if you don't care to get into but you just agree that, OK, that that math can work, we of a public key and a private key Not just encrypt messages and back, but rather, to sign even, and say, yes, this was So how does this work? In the world of digital a few more acronyms of used even though we'll continue to DSA, ECDSA, RSA, and others the ability to sign documents or So what does it mean to It's not at all like this it's all mathematics involved. So, here, then, might be our some document or piece of information. And I claim that the input A letter that you've written, a something that you want to And the output of this message So we can use any we talked about earlier that input, like a message, a and produce as output a So we've seen that and we've possible, similar in spirit to You can even do it for You can do it for entire Once you have that hash, here's how You use your private key, you pass that you just computed a moment ago into and the output of that So if you think about this Well, we're taking an Maybe it's a letter that a contract that you've written that or it might be really long. Here's where the value of Recall that a cryptographic takes an arbitrary-sized input and So it doesn't matter was, you can distill it into a So, per this diagram, if and you encrypt it with your is that the output of is just a really big number or some is your digital signature. Now this is a little weird is the opposite of With public key encryption, used your public key to and you used your private But in the case of digital signatures, You use your private key to digitally sign your document and the a number or some string of text. And you send that signature is my digital signature, you can And they should. So that invites the question, verify your digital signature? How do they know that this weird-looking actually was signed by you? Well, recall that you have not only a And that public key is accessible to And so, what happens is this. When that recipient gets your so to speak, they probably want to and to confirm that, yes, you signed So what does that box look like? Well, they have received not only the they've also received So you've sent them two things. And the digital signature, you can but it's, of course, a big But they've sent you two things-- So what do you do? You take the document you've through the exact same function, because the so you want to collapse it into thereof, just like our use of passwords. So that you can just do easily, But then what do you do? You then take the public key of the take the signature that they and you decrypt their signature That should output the exact same So to summarize, the message itself It's not encrypted, it's not something What you really care that it was signed by a specific person. So if that message, that document and the receiver, both of them do this hashing the document just to get So it's not this big, it's this big. Makes the math quicker and easier. However, what the recipient does is upon they just hashed, but also they try to decrypt your And here, too, just reverse the encryption so can the public key reverse the So if the recipient mathematically after decrypting what you mathematically that the could have signed this because they have your public key. And maybe some third some company has said, yes, that you can trust that. And so, if David Malan's private you can trust that any signature that must have been encrypted And it takes a while, I think, for these to sink in, but for that there's two big numbers in there's a mathematical relationship the effects of the other we humans can use this our messages per our we can also use it to and attest, yes, this came And unlike a human signature that can obviously just be the secrecy of digital signatures relies and that notion does not exist and so in that sense, digital than our old-form human ones. Questions now? And I know that's a lot, and it's Questions on digital signatures, or anything prior? STUDENT: Would these public and your IP address? DAVID J. MALAN: A good question. To what are they attributed? Not to your IP address typically. They are typically stored in a knows that this is Vlad's public key, forth. And it relies on a system So if you trust this third party company then you can trust whoever it is Or it can be more distributed. Your public key can in the footer of your emails. It can be posted on your website. It can be on your LinkedIn And so long as other your emails or your can trust that that is, So different ways to implement Other questions? STUDENT: Hashing uses a mathematical a mathematical function plus a key. Like the Caesar Cipher basically uses Is that analogy correct? DAVID J. MALAN: Yes, that is correct. And if it helps you-- this but it's generally helpful, I think, So you can only convert a value to But encryption is like two-way-- it's reversible hashing, so to speak. The output still looks weird and And one way to think about this because I claim that you can like any possible message you to a finite range,-- for instance, all A-words all B-words could have That simple example already that if you only have I have no idea what And it doesn't matter how hard I because it could be apple or avocado So hashing in that sense, one-way that it's not recoverable. But encryption does the opposite. It would be pretty useless if because the whole point of encryption we want to send. So encryption is reversible; And, as you know, the key, no is necessary so that you can remains secret to other people. How about one more question, and and then we'll come back and wrap up. STUDENT: Is there any possibility DAVID J. MALAN: Short answer, no. Like so long as you are using to be correct and not compromised, been stolen by someone or no one's taken they should not-- it should The probability is so, so, so low, it is the idea. Now it turns out, there is of this world of public key cryptography Recall that we ended our first that passwords and password managers can but there's another technology that's And it's colloquially called passkeys. Or more technically, of a standard called web authentication. And it turns out that are available on certain platforms will be available soon rely on public and And thankfully now, as we're alluding to today sound, to use these public and private keys-- to either encrypt with one and So we have just a fairly that we can use in one So how do passkeys work? In the near-future, you go to certain you probably will not be prompted and pick a password, don't have to generate a you don't have to memorize You don't have to even store a manager because passkeys It moves us more toward a Now how can that be? Because up until now, we've been to authenticate ourselves. Well, it turns out, we humans have even if it doesn't feel been getting really good to solve these problems as well. So imagine the following scenario. When you go to a website rather than being prompted to you'll just be prompted What that means is your laptop prompt you with some form of factor. They'll ask you for your fingerprint or or maybe a pin code, a short to demonstrate with high are authorized to be using this What then will your Your device will generate a just for that one website or app. Your device will send the public key to ID or username, some so that they know your But you don't send a password. You only send to the website And you keep private, or some other piece of software, And to be clear, this public-private key You'll do this repeatedly, for every other website in So what happens when you not you've just done, but you next week, or next year? Well, assuming you still or you're using some that synchronizes all of your past across devices-- so you haven't lost how you would log in to the website The website would send you and a challenge is like It's like a number or It's some piece of that the website wants Well, how do you digitally I proposed earlier that you and pass that key and that challenge, to you by the website, into your digital And the output of that, as And what is your device do? It sends that signature for And if you followed along you might now realize where How does the website now verify that That this did come from David's The website, because last week, last year, will use your public key using the same algorithm to get back And if the output of matches the challenge the it must be the case are, in fact, who you was your device that registered a year ago as well. So again, if we trust and we trust that these algorithms allow it using a public key and a private key and public key, we probabilistically say, I'm going to allow him So what's the implication of uses passkeys keys, or web It means that we're getting out as a society of having or hundreds or thousands of different It does require, though, that we don't registered for these websites or as the world providing cloud services, or Google or others, that your passkeys across devices and by talking about how they can without Google and Microsoft and Apple long as they provide us with So the upside of this is we and you can even share these passkeys The catch is, right now, available on every website out there. It's probably going to take some but I do dare say, in the you will see passkeys And so indeed, the next that asks you, hey, do you want or with your face or with a PIN code? And you're never even asked it's using this passkey Well, let's go ahead and take and when we come back, we'll as it's moving back and forth All right, so we are back. And allow me to claim that to hash data and also encrypt So how can we use these some other perhaps familiar problems? Well, there's this notion which is a fancy way of saying that that our data be encrypted whenever to point B. Whether that point WhatsApp, or any other service we ideally want no one in between to speak, to be able to Because in particular, what is a scenario like this where if Alice you might worry that there's named Eve between Alice and Bob. And maybe this is via wires Maybe it's somehow wirelessly. Maybe Eve actually represents are communicating between, like So encryption in transit, though, from other forms of encryption. In particular here, have an encrypted connection not to a third party like Gmail. So assume that Eve here is Gmail. And meanwhile, Bob, when has an encrypted connection to Eve is Gmail. So Alice has a secure has a secure connection but that does not mean necessarily that Security does not really work This might very well mean encrypted while in transit but that doesn't mean that can't be reading all of And indeed, that is technically They, of course, run all of the servers There's nothing technically from reading anything and everything. Now hopefully they have policies. Hopefully very few humans actually have to even do anything close to that. But technically speaking, just because and Bob has a secure that doesn't mean that be encrypted entirely between A and B. as well. Zoom, for instance, when it you might have an encrypted I might have an encrypted That does not necessarily mean that listening and watching everything that as well. So encryption in transit is good in of the picture because they don't have but if there is this third or company in the middle, even they do not want them to have access to. So what, then, is a Increasingly possible, increasingly should be looking for with we would call an end-to-end encryption. This is a stronger trust that Alice's connection even if-- not pictured here, there companies in the middle, If you use encryption you can ensure that the only thing is just your ciphertext, the or 0's and 1's that represent your they have no idea what So end-to-end encryption company's best interest. Why? Well, companies like Gmail tend whether it's for advertising And so it's sometimes in companies' to keep it secure on in a way that they have access to it. Now that might be not And so there are alternatives. For instance, iMessage for internationally is known in particular which, if implemented truthfully should guarantee that even be going through WhatsApp can actually see your messages all the way from A to going through a potential eavesdropper. But that depends on exactly what and if it's not be encrypted in transit such might indeed have access to the data. So as to how you can use it's an option that a service or you must choose It's not necessarily something but it is increasingly So let's now consider a but one that has implications for That is, deleting a file, or your phone or some other device. Now where is data Well generally, it might a large, somewhat older can store lots and lots or perhaps something smaller drive that might store without any moving parts. And even smaller might that you carry around like a USB stick, too, that similarly stores Now how do we go about deleting of these devices? Well, you typically click it and drag it or maybe you tap and drag it There's any number of user interface but let's consider for our purposes So let me stipulate that your drive, your USB stick a whole bunch of 0's and 1's, and and folders. So when you go about deleting to the recycle bin on Windows, Can on macOS, what actually happens? Well, it turns out, not When you recycle a file on Windows it doesn't actually get deleted in By delete it, I mean it's gone. I don't want to be able OK, wait a minute, though. Of course, we all know by you at least have to empty the So OK, maybe I missed that step. But even then, contrary emptying the Recycle + Bin, emptying delete the data. And here's where I'd, again, when I delete a file, I want it gone, But what macOS and Windows and operating when you even empty the they don't actually get rid of the file, Somewhere in the like a spreadsheet of sorts, with at least two columns, one of or the location of your has some kind of reference to which implement that specific file. Maybe these 0's and 1's are for for another file, and so forth. So somewhere, your computer is where physically on your computer. But when you delete a file by the computer just, eh, And more importantly, it frees up So what do I mean by that? Well, suppose I do go and empty the Recycle Bin that these yellow 0's and 1's represent Well, what's actually going to happen of the computer? Well eventually, some of those get reused for other files. In other words, these 0's represent a file that used That is equivalent to saying some 0's and 1's. And so here's some random 0's and 1's but not all of it. Notice, there's still a bunch in my depiction of my computer. So it turns out that over time, get actually deleted. What do I mean by that? Eventually those 0's and 1's will changed from 0 to 1 such that your is actually gone, because it's been But notice, at least and shortly after you delete a file, new files, there might around, which means that sensitive that you had on your computer, there just a few lines from any of those. So you should realize that deleting in the way you might expect or hope. To do that, you need to be a Now what do I mean by this? Secure deletion is And typically when we delete files, They're not deleted typically So secure deletion does what you might altogether. So if we go back to the with all of these here that I want to delete this file in an extreme ideal world, those Like that's pretty darn secure. Those bits, those 0's and 1's, Now this is probably not the best because if I just got rid of those 0's is getting like literally in terms of how much stuff I can put or 0's and 1's available. So that's probably not the because it's expensive. It's like getting rid So we don't actually do that, but I don't think we want to just wait and get reused by the system be left with some remnants So what we can do when securely change all of the 0's and 1's that change them all to 0's. And this will effectively because now the 1's that that represented some piece of Or equivalently, I could Or I could even change The point is, to securely should change all of the 0's and so that the file is effectively gone. Now how can you use Well, some operating what's called full-disk encryption, and One, if you enable a feature which is actually a specific incarnation Encryption in transit refers, of course, from point A to point means it's just sitting there on your or on your desktop, sitting So when it comes to full-disk you ideally want all of your data on your PC, on your phone. And only when you log in your fingerprint or your face should and this can happen pretty darn should the data be unencrypted use it and interact with that device. So why is this advantageous? Well, one, if your device as you're not logged into so long as the lid is closed, so long of scenarios, at least if someone takes or the cafe, well, a good password or good not going to be able to They can maybe delete all and sell your computer, they can use if you're practicing best to the data that's on the system. Why? Because it's completely encrypted at they don't have your fingerprint, they should not be able So in other words, if this the way I want it and need it full-disk encryption, at rest, to look random. These are random 0's and 1's for instance, my password or And this is what your hard should look like when the lid is When you are logged out of it, And the upside of this if it's stolen while in this by the adversary because it Better yet, if you deliberately because you want to trade because you want to because you want to sell when using full-disk is that so long as you had a really for all intents and purposes, Because only if the new your password or has your same they're not going to be able to And this is important nowadays because even if you might want to change all of or all random data, it turns out that So even little USB sticks or solid state But they're smart enough, known as firmware inside of it, as soon those bits over there aren't the device might not let you change them and 1's anymore. It might just leave them as is forever. Which is to say, it's even using full-disk encryption, when you first get a you can trust that even if parts all of the data that's was at least encrypted with one of your in the past. So this is the kind of feature to look to ensure that it is somehow enabled. Thankfully, once you log it goes back to the original Of course, then, an implication is that if you lose your or your desktop's password, or or your face sufficiently of all of your data, just another example of this trade-off Now a downside, an evil is ransomware, which is how It's not uncommon nowadays when they get into a system, or, for instance, a corporate systems or a city's own computer or just do something like but to actually encrypt all of the accessed online. Why? Well, if they encrypt all of the and say, listen, if you don't I'm going to give you the key And if you poke around online, there unfortunately, where hackers have very well-protected, all of and this is an opportunity to try to extort, say, by then only handing you the keys, if And there, too, there's the where who even knows if they're going but this is increasingly a concern for universities, and the like. So just as we have some too, is this trade-off And lastly, we thought we'd because this is a and has come up over time, this So for those less familiar, about bits, 0's and 1's of the day that's how today's Patterns of 0's and 1's to represent and videos and sounds and everything. We've been discussing Now typically, in our world now, a bit, or it can be a 1, as per the diagram Either a 0 or a 1. In the world of quantum computing, and quantum mechanics in it seems, physically, for us to differently using quantum techniques. And there's this idea of not just a bit, derives from the reality can implement a qubit in such a way and a 1 at the exact same time. So it can be not in just one condition at once, And if you have two qubits, they If you have three, they can If you have 32 of them, they can Now what's the implication of this? Well, when we talk we talk about hashing, when we and trying to figure out via brute what some input to a function was, if capabilities by not being things at a time with individual billion things at once, that if adversaries have access and I do, then all of the and that we've talked about today Because we're trusting going to take the a lot of time, maybe maybe risk to attack our accounts. But if they have exponentially then our data really is at risk. And all of the mathematics we've been Now hopefully you and I will have access as or ideally before all so hopefully our algorithms will continue to evolve along So this isn't necessarily something Indeed, I think after today, we have So for today, that's all. We'll see you next time.