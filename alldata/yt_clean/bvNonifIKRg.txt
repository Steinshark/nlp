Welcome to another episode of coffee with developers. I'm your host, Tom, co founder at we are developers. Joining us today is David Heinemer Hansen, co founder and cto at 37 signals, creator of Ruby on Rails, the mind behind successful products like Base Camp and Hay. He's the co author of best selling books like Rework and remote. And David is also a race car driver who competed multiple times in the 24 hours of lemon. David, thank you for taking the time. It's a pleasure to have you with us today and welcome to coffee with developers. Thanks for having me. David, do you remember the first program you have ever written? Yes, I tried to get a game working back in mid 80s, typing it into an Armstrong four six four from the back of a magazine. That was how video games were distributed at that time for hoppy enthusiasts. And I don't think I ever got it working like that first program. I think maybe I was seven years old or something. Six or seven years old. I couldn't get it working. I had an error in the typing of all these lines and finding that error was quite difficult. But yeah, I still remember just pecking out the keys from the back of a magazine. Yeah, I remember this time well. And it took me also some afternoons to get something running to find the bug step by step. You have probably explored multiple programming languages. What was the first programming language you fell kind of in love with? It was a long time. I mean, I typed in that game from the back of a magazine in basic, as it were, and used basic in a variety of ways back in those mid to late eighty s. And then I tried my hand with EC, Amos. This was when I thought it was going to create video games in the Amiga. I didn't get on with that either. And then I discovered the web. And it was really when I discovered the web that I started to make things that actually worked and I was able to publish and get them into this world. But I was not a programmer when I started working with the web. I dabbled in some HTML and some styling and so forth, and then slowly picked up two different environments. One was ASP, Microsoft's alternative to PHP, and then PHP itself. Neither of those two languages spoke to me with anything that resembles love. As you mentioned, they were very functional programming languages for me. They were means to an end. They were a way for me to publish things in the Internet and make it slightly dynamic. I did not love either of those things. I didn't use them in the spirit of being a programmer. And then I think I probably took up JavaScript, and also I had more fun with JavaScript, I'd say, but still in a very instrumental way, I want to get this outcome, therefore a JavaScript. Now fast forward a few years. I'd been working with PHP for a while, and then I started working on base camp. This is back in 2003, and this was one of those projects where you get to have free range with whatever you want to do. I've been working for clients, I've been working for other people paying me, and they usually had an opinion on what type of environment I should use. Back in those days it was usually PHP clients would specifically request, well, I want the system and I want it in PHP, okay, that's what we're going to do. Basecamp was different because Basecamp was for ourselves. So Jason and I and the two other people of 37 singles at the time simply needed a project management system, because we were having a heck of a time, as anyone does, trying to coordinate long running projects over email. And I thought, let me try something different. And the different I wanted to try was a programming language that Martin Fowler and Dave Thomas had written about at length in various industry publications, had used it to demonstrate certain programming ideas and topics. And I thought like, wow, if these guys who are the top of the industry seem to like it so much, this Ruby programming language, I should give it a go. I gave it a go, and in two weeks I was head over heels in love. It was like that animation meme, you see, where the brain explodes into a galaxy. And I realized that this was something very different, that Ruby was not only a productive language right away for me, even though it didn't have any of the batteries included, I was used to from PHP or other languages, I had to build a lot of it myself, but it spoke to me in exactly the right tone to open my mind to all sorts of different programming aspects that I didn't even really knew existed. Metaprogramming is probably the key one. Ruby is an incredibly expressive language when it comes to metaprogramming. Domain specific languages where you write code, that writes code and makes it look like it's English, or at least native to that environment. It's free of the excess characters, the line noise, all that stuff. That was Ruby for me. And I spent the next was going to be six calendar months, about 400 hours. It's funny because back in those days Jason was paying me on an hourly basis, so I remember exactly how many hours it took to build base camp, because I was invoicing and the invoice was about 400 hours to build that system. That was 400 hours of Ruby. And after those 400 hours, I was sold. Not just actually sold is the wrong word, because that sounds like a commercial transaction. I was in love. This was the programming language that turned me from. Programming is a tool that I use to get what I want to. Programming is an end in itself. Programming is an expression of me, of how I want to write. Programming is now a dialogue I have with the computer, where we serenade each other, where there's poetry involved, where there's aesthetics placed at a very high level. It was just absolutely revolutionary for me, and it completely changed the trajectory of my career and made me think of myself as a programmer. Yeah, it's nice. You mentioned already base camp. Now I have to say, I'm a student and a customer of 37 signals for a very long time. I used base camp since 2005. I launched my first product, built in rails, in 2006. Attended some of the rails conferences in the early days. And looking back at those early days, it felt to me like being on the edge of something big with the HR movement, with the philosophies like embracing constraints. And it had this notion that small teams can achieve big things. And yeah, it felt a little bit like living in the future, to be honest. I was just thinking back at those times, at the beginning. What comes to your mind when you think back of the origins of Ruby on rails and what guided its creation in the early days? I think the way you put it, like living in the future, is a good way of terming it. Because if you look at the discourse today about programmers and productivity and the excitement around AI, the excitement around AI, when it pertains to programming, is an excitement about productivity, is an excitement about how one programmer can do what used to take five or maybe ten. That excitement was exactly the excitement we had in the early Ruby on rails days, and still have Jumu, to a large degree, that one programmer could do the work of a team, and that if you could reduce the cost of programming to that level, that a single programmer could build a system like Basecamp, a business that today has grossed hundreds of millions of dollars over the decades, then you have something really powerful. And I think I certainly understood the power that we had in those early days because I'd worked in other environments and I had worked at other software companies, and I had seen the size of the teams it usually took to do anything with commercial software. And not that Ruby and rails were the only kind of environment that could be highly productive, but it was probably the earliest environment where we embraced the notion of the whole problem. We used to call that full stack, we still call it full stack, full stack development that from browser to database, we will take care and address all the problems that arise for a programmer on that journey. It will not just be a box of unsorted legos that you have to put together yourself. It will actually come with an assembled set. And it's more like Duplo, I've referred to in the past that the blocks are slightly bigger. You can still build whatever you want, but it just goes a lot faster because you're not making those tiny minute decisions about things that just doesn't really matter. This is the convention over configuration theme and ethos that we've been pushing since the beginning. And what's funny to me is that it doesn't feel that different today. In fact, I gave a presentation at Rails Comp, maybe 2006, maybe this was the one you were at, I think, called something about harvesting the excess or minding the excess, that we were not going to have this advantage for so long. That's what I thought. I thought that the market forces would just look at Ruby and rails and then they would just copy all the points that were giving us this leg up in productivity. And it wasn't until years later that I realized, first of all, that didn't happen in a broad scale. In fact, we are right now, if you look at the mainstream environments, further away from the ruby on rails philosophy than we've ever been, NPM, thousands of dependencies per project bring everything yourself. Even the frameworks that exist are not normative in any way. They don't describe how you're supposed to build things. They just say, hey, here's some tools. You can use them like this, or like that, or like over here. We don't have an opinion about how systems should be built. And I thought that's such a fascinating phenomenon, given the fact that Ruby on rails objectively brought productivity gains to a really mass audience, and therefore demonstrated to the industry that this was possible, that you absolutely could make a difference by having different tools. Yet it did not become mainstream. Now, Ruby on rails, to some extent, by some definitions, was the mainstream for a brief moment. And I think that brief moment coincides with a funding environment that emphasized cost constraint. And then what happened was we entered an era from 2009 until 2022, where there were no cost constraints. Everything was up and to the right. There was unlimited funds and more and more every year being doled out to startups, which created completely different incentives for those companies, and for the productivity that they demanded of their tools. Productivity actually didn't really matter because you could just hire twice as many programmers, ten times as many programmers, and who cares? In fact, it was in your benefit to do that. If you needed ten times as many programmers, that meant you could spend ten times as much money. That meant you could raise more money. That meant to da da da da. And then it also meant that companies like Facebook, with react and others set the tone, because this was what every startup aspired to be. They all aspired to be the next Facebook. So what better to do than to pick the tools of the current Facebook, a company with tens of thousands of engineers and problems so remote from what the standard startup goes through when they have ten developers, that it's almost definitionally unfit to use the same kind of approaches. But it just didn't matter. It really didn't matter. And I think now that I look back upon it and now that the curve has bented that we're no longer in that environment, it becomes more obvious why Ruby unrails and the productivity story didn't manifest itself into a broader capture of that mainstream, why there were other factors that were more important. I looked at it. Why wouldn't everyone want to use the most beautiful programming language that makes you so much more productive? Now I realize that there are just other factors in this, and I think this is why, as I mentioned, it's so fascinating to watch the current discourse around AI, because that appeal of productivity again, is the same as it was. And it's the same because the environments are now more similar. The funding environment of when Ruby on rails came to the forefront, let's say, 20 05, 20 06, 20 07 maybe is kind of reminiscent of where we are now. Valuations have been dragged down tremendously, and therefore you don't have as much of Runway, you can't hire as many people, you're really excited about productivity. And then people are looking at the shiny new thing going like, oh, AI, AI is the answer. And here we are sitting with Ruby and rails going like, yeah, maybe AI is part of the answer, but you know which multiplier you could also add to it. You could also just use the more productive freaking environment. And then maybe you need AI. You don't need AI, or you do both and they multiply. I mean, it's interesting, like how you described it at the beginning with the Duplos. Because if you say Duplos with these Duplos, very famous platforms were built with it, like Airbnb or GitHub or Shopify. So they all started also as rails projects. And I mean, how do you view its role in enabling those companies in the early days? It's wonderful to see, it's wonderful to see, especially when it happens to people who are friends of mine. So Topi with Shopify. Shopify is the most successful ruby and rails application ever made. It is also the largest, it also handles the most scale, it's the most valuable, and it also is now the company that contributes the most in terms of economic resources back to the communities of both the ruby and rails. That is an immensely gratifying feeling to see an arc go that long. I mean, I worked with Topi on rails core. I mean, first of all, that in itself is just remarkable that you have a programmer who was literally on the rails core team, who's now the CEO of one of the most important Internet companies in the world. And the satisfaction of see that very long gestation period. Shopify started in, I think 2005, so that's almost 20 years ago as well. And to see it get to where it is is just incredible. And the same with many of the other things. I mean, GitHub is probably my most used Internet application outside of our own tooling. It's the one I spend the most time in on a day to day basis. It's the one that has enabled the most of open source collaboration in and of itself. I mean, I remember the dark days before GitHub, how we would distribute patches and try to. There's a lot of things, when I look back on my 20 year career, that they look similar. We have a tendency to overstate how much progress happens over the decades. A lot of the mechanics, even of rails itself. If you looked at a rails application from 2004 and you compared it to one today, you could absolutely see the lineage and it actually wouldn't look that different in many ways. But open source collaboration, completely different. Completely different. And that's all the way from the fact that we didn't have git itself a major innovation. Rail started on CBS and then used subversion after that, then got on git, and now with GitHub, that feels like an epoch that we've really just changed from a stone age to a more modern age. So to have that built with RUI, Unreal, to not just built with, but maintained and further progressed, I mean, those two companies are two of the biggest contributors, not just in terms of money and cachet and validation, but in terms of actual code. Those two companies contribute a large share of the ruby core members and Rails core members. It's incredible. And then there's this incredible I saw some estimate at one point saying 1.5 million rails applications had been on the Internet. Now, I don't know how to verify the veracity of that, but that's crazy. That's crazy. It's gratifying to see. But what I keep wanting to say the bud here is, you know what? That isn't why I do ruby unrails. I do ruby unrails for very selfish reasons, because I want the best toolkit to build my own stuff. That's what I sit in front of the computer for 8 hours a day, not eight, but a lot of hours a day doing. And it's why I'm continuing to be interested in developing the framework and continue to push it forward. All the other stuff is a secondary good, it's a very gratifying good. But the primary good is continuing to make the most satisfying web development toolkit for myself, for my own use. And I think that kind of direct first person primary agent relationship with your tools is part of what makes rail so special. There are a lot of different tools that people can pick today, and a lot of those tools are developed with a different ethos. They're developed by professional framework builders. I'm an amateur framework builder. I am not paid to do framework building. I don't work on the framework full time. I would not want either of those two things to change. I don't want to be a professional framework builder. I think you get a very different framework when you don't have professional builders. Now we do have professional contributors who are paid by their companies to work more or less full time on it. But I drive the direction of the framework as an amateur, as someone who is, as we started this conversation with in love. Would Ruby, the programming language, in love with the web and want to see the expression of those two in rails? It's fascinating because in tech we always say, like everything moves so fast and everything is too fast. But then sometimes if you think about the philosophies or the paradigms, a lot of stuff reminds me now that, yeah, we had this already 20 years ago and nothing changed. So there is some stuff I want to touch base a little bit later on as well. But maybe fast forward to today, I think the latest major release with radius 7.1. It would be interesting to hear your thoughts on it based on what has changed and what has not changed. I think there is a lot of big changes and very interesting changes here. If we think of Hotwire and all the kind of stuff. Maybe you can elaborate a little bit of what you are most excited about with rail 7.1. The most exciting thing for me is that we finally have a complete story for the front end that does not rely on using node, that does not rely on using NPM, that does not rely on using any of the other parts of the JavaScript monstrosity, to put it the no build approach and Hotwire in itself. So Hotwire is a multi, I was going to say multidecade. That's perhaps putting it a little far, but it's at least a ten year endeavor trying to fulfill a vision for creating web applications that required far less manual javascript, if you will. The turbo framework, which is the heart of Hotwire, is built in a way to require as little javascript as possible in an application, while still reaping all the benefits that JavaScript has brought to the web. The speed, the ergonomics, the developer, well, I was going to say developer experience, that's actually on the negative list. But the modernity, if you will, of applications today, they do use javascript now, I from time to time do have nostalgic pools. Towards the time before, JavaScript was a necessity, but I'm not eluded. I don't want to live in the past. I don't want to live in a world where you require great sacrifices of users to be able to pursue what you want. Hotwire and Turbo fulfills the story in a way that has merged with what's possible with modern browsers, with HTTP two, allowing for multiplexing and therefore alleviating the performance benefits more or less, and in some cases more such cases less of bundling. So you no longer need with rail seven, you no longer need a JavaScript bundler, you no longer need a JavaScript transpiler. You can write JavaScript directly for the browser, that the browser is the only interpreter that this code will ever see. The rest of the time you're just writing text. And I think a lot of developers who've been cooked in the JavaScript soup for too long can't even fathom that that's possible, can't even contextualize what tremendous savings in terms of complexity are possible if we revert to an earlier age where JavaScript is just a text file. Yet that's a path we've pursued. And I think what's so interesting with rail seven is when I committed to both the note build path and to Hotwire, it wasn't obvious that that was going to be the right bet. We had taken a different bet for several years in the rails world, where we have hitched Iowa wagon to the traditional way of building Javascript application. We had integrations with webpack and we had a whole asset pipeline that used all the traditional methods of node and package managers and whatnot. I never liked it. I didn't like it when I put it in. I didn't like it when I initially wrote it. It was a necessary evil, a transitionary period to get us from a to b, and now we're on the other side of that bridge and we can blow it up. And I've never been so pleased to blow up a piece of code. An entire thing that I built webpacker was something I built after doing a deep dive into webpack. And I've just been so incredibly pleased with flushing all that complexity from my brain. And now every single app that we're building is note build. So there's no JavaScript machinery running on the Javascript that we write. All the Javascript that we do write is stimulus controllers, additions to hotwire and so forth. And it's because the web has improved. I think this is one of the things that's so interesting when we talk about progress is a lot of times progress is quite slow, as you say. If you zoom out and look at what's happened in 20 years of web development, there are just a few infliction points where things did actually change. It's easier to recognize those in hindsight. Ajax, as you mentioned, that was one of those early changes where all of a sudden now, oh, we can get a different level of fidelity. It can be more like a desktop app. If we use JavaScript in these ways, then you get things like react. That sets the entire industry on a course that ultimately I think was not a good course. And now you have the fact that browsers are actually improving at a ferocious pace. And some of those improvements are cornerstone requirements of this new vision of node build. For example, import maps. Two years ago, I think import maps dropped in chrome as an experimental feature behind a feature flag input maps, for those who don't know, is essentially allowing you to write modern JavaScript where you refer to different files without having to use a transpiler, without having to use a bundler. It's all happening in the browser that you can refer to these different files and they're static. And then in two years we went from an experimental feature in Chrome to full support in all the major evergreen browsers. That's incredible. You combine import maps with HTTP two with finally CSs getting good. I mean CSS is actually an interesting story because the Javascript world has long had a good relationship with the browsers. Chrome, with their v eight team, there's long been like this, let's improve JavaScript, let's make it better, let's get the standards going. And meanwhile CSS was just sitting over at the corner going hello? Anyone remember me? And people went to other tools, they went to SAS, they went to postcss, they went to all these other tools to get some moderity into CSS development. And then finally in basically like the last two years, browsers went like oh yeah, CSS, we should improve that. And they finally have. So now you got things like nesting, you got the hash selector, you have all of those elements that people went to other tools like SAS for, and now you don't need those anymore either. Campfire this latest product that we released under the one's umbrella uses vanilla CSS, vanilla JavaScript. None of it is compiled, none of it is bundled. It's just all straight. And all of that is now the default vision for rails, which has been really interesting because I remember when I pushed forward that path, there were a lot of senior developers who were like, this is never going to work, right. Whatever you think of the JavaScript world, it is simply a requirement, just has to be there. And for some teams in some situations that's true. If you want to do react and so on, you should probably still stick with those tools. And those tools have also improved. I really like what happened with ES build, just incredibly fast compiler. What's happening with bun is really exciting too, but I'm even more excited about not needing either of those two things. And I'm really excited about the degree to which getting rid of all that stuff has dramatically lowered the barriers of entry for new developers who want to build a rails application. The number one source of discontent and annoyment with rails development for a number of years wasn't actually Ruby, wasn't actually rails, it was all the Javascript junk that people also had to learn to build anything. And I'm so glad that that's no longer a requirement, that that's an opt in. You could do it if you want to. We have great tooling if that's what you want to do. But most people who are building a new application today, they should not start there. The way we get that productivity we've been talking about is to start much simpler, is to start with Hotwire, is to start with no build, and then maybe one day, you need more, fine, go there. But if you want to be the one developer building an entire system, building a base camp in 400 hours, you can't have all that junk on top. It's just too much to carry. That's very interesting. One little side effect with all this is like if you just inspect the source code, for example from Hey.com, or so you now don't have this obfuscated JavaScript files anymore, you can just read the source code. I mean, that's also a nice thing. Not only is it a nice thing to me, it's an absolutely fundamental philosophy thing. And it steams back to how I learned to work with the web. I learned everything I knew about HTML by going view source. How is, what was the thing, web monkey. How do they make the rounded corners? Oh, it's a table, and they have images that give the rounded corner. I wouldn't have thought of that. Now I know and I will build my stuff the same way. What we lost when people went to obfuscation and bundlers and so on was viewsource, which to me is an absolutely integral part of what created the web as we know it today. And it was such a sad period of time where that was all lost. So to win back the philosophy of view source is just incredible. And I owe my entire career to open source. I owe my entire competency with programming to being able to read the code of others. So I feel like it's an obligation that we should develop for the web in this way. Now, not everyone's going to do it, and unfortunately some of the paranoia of commercial software making has crept into web development, and everyone is so afraid that I'm going to see your shitty Javascript chill. That's not where the secret sauce is for most people. And the fact that rails seven out of the box again is view source friend, not just view source friendly. Is view source optimized? Is just such a delight. Yeah, it's great. One thing I wanted to ask you is because the decision to drop typescript raised some eyebrows, I would say. I mean, aside from all the almost religious discussions here, what's the rationale behind it and why is it important for rails, you think? I think you're being very kind to the Internet when you say it raised a few eyebrows. It's brought forth an entire legion of hooligans who went on to deface several of the open source repositories that we had on GitHub, which to me was just such a fascinating example of mob dynamics. I mean, it would be interesting how many people even used rails. Almost none of them. Almost all of the hooligans who showed up were tourists. They'd never even in some cases heard of turbo before. They certainly weren't users. They just showed up because there was a mob that formed around that decision, egged on by a bunch of moron Javascript influencers. And it became a righteous cause for about two weeks, almost. I was still taking down the graffiti two weeks later and cleaning up the knocked over trash cans and so forth. But the essence of it, I think, goes to everything we've been talking about up until this point. Typescript is a transpolation layer on top of JavaScript that adds explicit typing into the experience. Now I've just accounted for my love affair with Ruby for over 20 years. A famously duck typed language, which is to say an implicitly typed language typing is expressed as do you respond to this method? Not so much as are you this type or the other type? How could it be a surprise to anyone that I wouldn't be the biggest fan of typescript? What? Typescript is all the stuff that I left the Java world for to come to Ruby. Anyone who's ever tried to write a framework or library, and this is where it came out, because Turbo is a framework in typescript, have tried to do generic typing in typescript. Know what I'm talking about? It's horrendous. The complexity is off the scale. And I looked at that and thought like, you know what? The payback is very little. We used to have a different team working on Turbo. They were fans of typescript, at least at the time. I'm not sure where they are on that point now, but the team that we're currently working on Turbo and pushing it forward, we had a little gathering at time where we were like, hey, do you like working with typescript? And they were like, no, I don't really like it. It makes everything kind of complicated and I don't see the value in it and I didn't really like it. And it turned out that none of the people who at 37 signals work on Turbo, which is the main corporate sponsor of Turbo and developer of Turbo, liked working with typescript. So of course we shouldn't work with typescript. I mean, that to me just seems so obvious, like why would you choose to work in an environment that you don't really enjoy working it in if you have a choice? And of course we had a choice. This is our project, we can do whatever the hell we want. And we did and people blew up. But if we were running typescript, we couldn't get to this no build land of plenty that I've been discussing. We couldn't drain all this complexity from the swamp. So even if I'd had an affinity to typescript, and I don't, I really dislike typescript, I find it, it's not only ugly, it's a pollution of a language I actually do enjoy. And this is also the weird thing about that whole debacle. I'm a big fan of Javascript. It is my second favorite language. It's a distant second, but a second nonetheless, which is high praise in my book. But there's a lot of people who write typescript who really hate javascript, really dislike javascript, and I just thought that's an OD degree of self loathing for the environment that you're working in. And either way I couldn't relate to that. It wasn't what we were interested in. We were going to set the course for our project that we invest literally millions of dollars into building the hotwire frameworks. We were going to build them with a smile, not with a frown. And if we were going to build them with a smile, typescript had to go. And the irony is that after the hooligans were done raging for two weeks, nothing bad happened. In fact, the contrary, one of the marquee features of the latest version of Turbo, turbo eight, which is hover preloads, which is inspired by a library called Instaclick, was contributed by a developer who directly credits the fact that we removed typescript from the source code for his enthusiasm for working with it, that he didn't like typescript. He found it intimidating. Now that Turbo was no longer built in typescript, he felt comfortable working with and contributing, and it turned out to be one of the marquee features of turbo eight. So nothing bad happened. A bunch of good things happened. The Internet, as always, completely ludicrously overreacted, and we got to see the true face of a handful of individuals. And it really wasn't pretty. No, I get the rationale that you don't need typescript in order to write JavaScript. I think one thing is that maybe for tooling, I think in the IDE maybe there makes sense for really large projects, let's say. Well, first of all, I say no, because rails is a really large project. I mean, I think we're getting close to 7000 contributors. As we just talked about, it's responsible for hundreds of billions. Not a type in sight, not a type in sight. And it is one of the longest running, most successful open source web frameworks in the world. Not a type in sight. So that doesn't mean there aren't organizations. Actually, I would say less about organizations, more about people. What I love about working with the web is the fact that it embraces diversity of flop and diversity of approach to the maximum degree. You can write your web application on that Omstrad four six four in basic, literally that will work. And I'm sure there's someone somewhere who've cooked up a way to connect an Armstrap four six four to the Internet so it can actually respond with HTP back and HTML, right? And everything else. You can write it in Java, you can write it in PHP, you can write in ASP, you can write it in python, go rust, or Ruby. And we're all on the same level playing field. Now that's not true with almost every other software development environment that's ever existed. If you develop for iOS, do you know what you should be developing with Swift or objective C? You're really pushing the grain if you try to develop with Ruby or something else. Not that it can't be done and people are doing it and all the best to them, but the web puts everyone on an even playing field. We should embrace that. We don't need the one toolkit, the one framework, the one language to rule them all when it comes to the web. In fact, the web is so much better off if it allows the diversity of expression in that regard, because humans are different. I mean, this is why that typescript debate was so fascinating, that much of it centered around this preposterous claim that we can make declarative global statements about what's good for programmers, and that's universally true. You could have forced me to use typescript from early on in my career, or Java or another explicitly type, and I probably wouldn't be a developer. Still, I would have picked something else that just didn't speak to me. I found Ruby and it spoke to me very deeply. As we've talked about, right? Other people are finding that same affinity or inspiration or motivation in typescript, and I'm so genuinely, non sarcastically happy for them. That is so wonderful. I love seeing programmers fall in love with their tools and really make them better and so forth. But I don't love seeing programmers fall in love with it, and I've been guilty of that myself in my career, and I think this is one of the few areas where I really do feel like I've learned something in 20 years of being a developer that it's a fool's errand to try to conquer everyone with one ideology, with one train of thought, with one programming paradigm. And the world would be so fucking boring if we succeeded. Imagine if there was only one programming language. There was only one framework. I mean, snooze, isn't it more interesting to be able to see the variety of the colors and the cultures of everything that we have? Isn't that why the web is so magnificent? It certainly is in my optics and in my view. And when I look at the other development environments, like developing for iOS, for example, it seems so parochial, it seems so small, it seems so impossible to allow the full flourishment of, I was going to say the human race. That's perhaps a little overstatement of at least human programmers and AI programmers, if we can include them at this point, too. So, yeah, I'm a huge fan of the web's level playing field, of the diversity of expression that it allows. And I want to speak to the stuff that really resonates with me, and I want to find similar travel or similar minded travelers who want to come along with me and help improve rails. And then I want to cheer on what people are doing in go or elixir or any other language in go. Like, good for you. There's not one solution for everything in software and hardware. And nowhere, what you mentioned is swift and also like native apps. Briefly, maybe that's a good segue to rails eight, because in a tweet, I don't know when, but recently you tweeted that the direction for rails eight is crystal clear and it's progressive web apps. And this is very interesting because I think recently with the EU, with the Digital Markets Act, Apple is forced now to also allow other engines, other browser engines, which is a good thing, basically. But what happens right now is that under this guise of these regulations, or to comply with these regulations, Apple is dropping support for progressive web apps. What's your point of view on this? First of all, Apple is completely disingenuous. They are willfully spiking the compliance, and that's in quotation marks with the Digital Markets act. Nothing in the Digital Markets act is forcing Apple's hand here to drop Pwas. They are doing it in a sort of tit for tat spat with the EU. And it's very unfortunate because to me that final act is perhaps the thing that more than anything, and I have had quite a lot of encounters with Apple over the last several years. Let's call it the last maybe four or five years, I've really seen a company descend into the easy money resource extraction toll booth crap that can happen to very powerful technology companies when they are awarded just an absolute money faucet for something that does not require material work on their end. It's really a curse. It's a resource curse. I think Google has its own resource curse with what goes on in the app markets. But now Apple's resource curse, when they take 30% of revenues from the App Store and that turns into be billions and billions of dollars, is taking them down a really dark path. And that dark path is one where they see themselves as this aggrieved, entitled party that is not getting their due, they're not getting out of developers what developers actually owe them, while simultaneously being one of the most valuable and on most days, the most valuable technology company in the world. A $3 trillion company. It's really a pathology. It's sort of an organizational mental illness. But I don't have the tools to cure that. What I do have is the patience to wait it out, because the web has been around in its current incarnation for about 30 years. What happens with Apple and the EU over a course of months or even a course of years, I don't believe is going to have a great bearing on the long term trajectory of the web. And to me, the long term trajectory of the web is a continuation of the fact that the web is the greatest software development platform the world has ever seen, perhaps ever will see. And it requires our continued investment and faith and loyalty to push that forward, even in the face of temporary, minor, or major opposition from singular, myopic, organizationally disturbed companies who try to throw a wrench into that. So I'm not blisse about it. I think it is a setback for Pwas, but I also think it's a temporary setback. The other thing is, I mean, there's sort of shades of silver linings here. One is Apple is just not that strong in Europe. So this is one of the things that's very interesting when you compare it to the US, where Apple's market share with the iPhone is the dominant platform. If you look in Europe, it's not the dominant platform, it's a very strong platform, it's an important platform, but Android is stronger. And then from the perspective of american companies, it's also this curious reality that the EU, despite how populous it is, is a relatively small software market for a lot of companies, including ours. The EU constitutes about 8% of our revenues, that's just not that big. So if 8% of your addressable market is not accessible for this product, or they need to get a slightly degraded version of something, it's not necessarily the end of the world. Versus at least for software companies in the US. Whatever happens in the US, yeah, that's the end of the world. Like, if Apple in the US said Pwas are dead, that's more of a mortal wound. At least if they stick to it. They managed to kill flash that way, right? Steve Jobs single handedly killed the flash platform by saying, we're just not going to support it on the iPhone. They do have that power in the US, they don't have that power in Europe. I don't think they have that power in the rest of the world. And I also wouldn't read too much into what is going to result from these currently negotiation stage tactics. The EU has yet not responded to Apple's overall proposal for how they are going to comply with the Digital Markets act. It's entirely possible that the EU is going to look at the sum of what Apple has prepared by March 7 and go, no, that's not it. And then the Digital Market act kicks in with some truly draconian penalties, or at least potential for penalties that hopefully could persuade Apple to go a certain way. Because what is so fascinating is that while the EU is, quote unquote, only 8% of our revenues as an american company, let's just say they're the same for Apple. I think they're probably higher for Apple. But let's just say it's the same 8% of what is Apple's annual turnover, 200 million. That's $16 billion. That is more money than they make from the toll booth. Maybe it's not more profit, but it's a lot of money, right? So the EU is just large enough in terms of its relationship to Apple that they actually can force Apple's hand in certain ways. Now, do they have the will to do that? I am not convinced. I am actually kind of depressed by the outcome of all EU regulations as it come to tech. Because I think if you make a fair assessment and sit back and evaluate the last 1015 years of EU regulation in tech, the net result is starkly negative. It has not provided anything of enduring, meaningful value to neither EU citizens nor the web at large. And it's left a blight on much of the web in terms of cookie banners that no one gives a hoot about, that has no influence on what people actually do. Now, that doesn't mean I don't in some abstract sense relate and appreciate the principles of the GDPR. I kind of do. But I also don't think it's not been successful. And I think Europeans first and foremost have to just squarely look that in the eye and go the way we're trying to regulate these companies is not working. It's not actually producing better outcomes in the majority of the cases. And if Apple is quote unquote, allowed to get away with their malicious compliance, in this case, you should just shut it down. Best AI should go get another job. The EU should just shut down its competition authority when it comes to tech, and you should just stop trying because you actually end up making things worse than just letting the doggy dog world of tech sort itself out. Because I think that's the other thing. If you've only been in tech for a few years, you have a manioc perspective on how paradigms do change. Apple was not always king of the hill. They probably won't always be king of the Hill. And in fact, it is obvious that they're not. When it comes to AI, the most exciting new frontier. Apple is third or fourth or the fifth stringer behind other large companies. So this tremendous power they currently hold through the popularity of the iPhone may very well be temporary, but I am hugely disappointed. Is this going to deter me from working in the best interest of the web? Absolutely not. Is progressive web apps an important part of realizing the full potential of the web? For sure? No, because they could offer comparable experiences like native apps. So I think there's big potential here for the EU. I think that the regulations, I think they are probably like well intended, but sometimes it feels like, not very well executed. I mean, you mentioned the cookie banners and the cookie banners. It kind of felt like the only industry that benefits is the legal industry with the cookie banners. Oh, for sure, the cookie banner. I'd actually be interested to see someone calculate the net drain of world GDP. I think it's not insignificant, like from the billable hours that lawyers have fruitlessly poured over these stupid agreements, the DPAs, all the other bullshit that no one cares about. In the end, that doesn't change anything, that does not make life better for anyone anywhere, and then lost productivity for people looking at the blight of the web. And in fact, the appeal, the strengthening of native applications against the web because the web now have institutionalized pop up banners like the blight that we fought for years with browsers to get rid of pop up banners, right? The EU said, what if every website had a pop up banner and it was stupid and we called it cookie banners. And you're like, it's such a own goal and it's such a gift to the native platforms that don't have that nonsense that the EU really needs to look long and hard at that whole experience and go like, all right, we got that one seriously wrong. Now, first of all, wouldn't it be a delight if a legislative body was able to accept a mistake and correct it and go like, okay, yeah, cookie banners kind of suck. No one likes them. They didn't approve the life of anyone. Let's get rid of them. That's how the commercial market actually does work in the long term. Eventually, a business that just inflicts pain and misery on others go out of business. It may take a while, but it usually does happen a little less. So. When it comes to legislative action, bureaucrats are very well insulated from the consequences of their own actions. So let's turn our attention to 37 signals. And I have so many more questions, but we are running out of time here. There is one unique statement, like one policy until the end of the Internet. And this is very like the idea here is that you are committed to infinitely support, give support for your product, basically. And I'm interested more in a specific aspect, like considering classics like the tadalist or basecamp classic. For example, those services, especially when they were built like on the radius and Ruby versions, they are probably end of life. How do you maintain this? Are they all running on the latest rails and ruby versions or can you share a bit of insight here? Yes. So we have a long inventory of heritage applications, as I like to call them. I don't want to call them legacy, because in software, legacy has this negative connotation that this is something you're being forced to drag around with you. No, these are heirloom pieces. I hope to pass on these applications to the next generation of folks who work on 37 signals. In much the same way, the Porsche will still send you whatever valve for a 1972 Porsche, right? They still have an inventory of spare parts for their entire history of products. Leica is another great example of that. You can still get your 1956 Leica M three serviced. They will still produce spare parts for that. That to me is one of the highest virtues of commerce when you have these very long running companies honoring their heritage, honoring their legacy, and allowing customers to stay with what they have if they enjoy it. If we take both of those two examples, Porsche, there are lots of people around the world who could afford a new modern 911 and yet choose to drive one that's 40 years old because they like it better. To me it's such a beautiful expression of everything I like about commerce, that certain products in a certain time can capture the imagination and the affinity and the love of a customer base. And with Porsche, for example, the air cooled era, right? They're just people who are obsessed with air cooled porsches. And I find like that is just such a wholesome, happy human integration between capitalism and flourishment of individuals. I'm here for that and I want to be part of that. And tech historically has not been part of that. Tech has lived in a realm where everything is disposable, everything is temporary. And it's gotten worse. Most of the software that someone bought for their Armstrong four six four on a cassette or on a floppy disk, if they carefully managed those medias and copied them over, still works. You can still run whatever game you had from 1989 on its original medium if you have the pizzas. How many SaaS applications from 2005 are still around 1%, half a percent less, almost none of it. And there's literally nothing those users can do about it. They don't have the source code, they don't even have the data. And if they have the data, it's not in a format as it was initially designed for. They can't do anything about it. And we see that over and over again. I think Google is the most prominent and egregious transgressor. There's a wonderful website called killtobygoogle.com which inventories the entire graveyard of Google services that have been murdered by vps and product managers over the years. At Google, I think the last count is 297. And one of the most prominent services that was just killed is Google domains. Google domains lived for I think 19 months. Ended up being a tens of millions of dollars a year service. But that didn't crack the needle for Google. They need a billion dollar service. So they unceremoniously killed it, sold off the parts to I think Squarespace or something, and fostered a bunch of heartache on ton of people who suddenly had to move their domains and some suffered downtime and so forth. That to me is just nasty, ugly, unnecessary, especially at a scale like Google. And then you have the other end of it notion. Just bought a email calendar. No, it didn't have calendar, it had email. And let's just focus on the email part. I think Skiff called Skiff. Skiff had a bunch of different services. I saw the announcement on Twitter where the skiff team, they're like popping the champagne. Yeah, we got acquired. I mean you got acquire hired, but whatever. And then little in the small notes it says, hey, you got six months users to pack up your shit and get out of here. And you're like, wait, didn't we just spray the champagne? Or was the champagne just for you? And I just got like a middle finger because again, what? Like if you've invested all your time setting up your emails and getting everything into Skiff and then supposedly a joyous event happens, they get acquired by another company, then you just shit out of lug and you get evicted? What? Again, I think it's so antithetical to everything I just talked about with Leica and Porsche and Rolex and plenty of other long term heritage companies that I look up to that I aspire to be. And I go like, you know what? We want to be the opposite of that. We want to as long as we can, as long as we can afford. Which, by the way, for both of those cases, money is not the problem, right? Google could still run Google domains, they could still run Google reader. It's not money. They have a different calculus that goes on attention or whatever it is that they use. Notion could certainly have continued to run the skiff service if they wanted to. They chose not to. And that's what tech does over and over again. They choose not to, they choose to discard these service and we've got very disposable software services of it. I think it's one of the ugliest part of SaaS as a business model that is so quickstand for a company to adopt the service. Let's even take our own base camp. So Basecamp was launched in 2004, February 5. We just celebrated 20 years. That original version, original version with code written in the summer of 2003 when I started working on that project, is still in production, is still servicing thousands of happy customers, tens of thousands if not hundreds of thousands of users. I don't have to lag discount on that. It's still a multimillion dollar business that has not seen any feature development since 2010. The only development we're doing in all of these cases is to your original question here, we're doing security maintenance. That does not mean we're updated to the latest version of everything all the time. Not at all. Then it wouldn't be financially valuable. Also, just be stupid. There's no reason that Tadalist, which sees no feature development, needs to run on the latest version of rails. What there is a need is for us to examine every single CBE security advisory that comes out for rails, for Ruby and examine whether it applies to the heritage applications that we have and if it does, back port a fix. Now, we have actually recently upgraded some of those legacy applications because I think. I don't think it was stylist. One of them was still running Ruby. And what finally killed it was we couldn't build Ruby one nine on modern versions of Linux. We had to do all sorts of crazy hoops to get it to build. We couldn't get it to build on Arm 64, so we couldn't get it to build on the M one Apple laptops. And we're like, all right, it's time we got to upgrade. So we upgraded across the fleet to, I think, Ruby 27. It took a fair amount of work, though. It's not free. And this is the misconception I often hear is like, well, it's going to cost money and you don't make any money on tar list. Yeah, well, first of all, we do. I believe we absolutely make money on Tadalis. We've never charged users for taless. We're giving it away for free in some cases. People literally been getting it for free for 20 years. But it builds credibility, it builds trust with a customer base who sees us be this pathological about supporting old free services, that when we go out of the market and say like, hey, would you like to switch your email to hay, we actually have credibility when we say we intend to stick around, like whether, hey, it's a huge success, immediate success, not a success. You can actually trust this company, 37 signals to continue to support it because they're so nuts that they will continue to support even free applications for 20 years on. That's our commitment until the end of the Internet. It's not that it's free. It's not. I will say it's not very expensive. Maybe it's because we're so close to the metal here, we can examine the cbes coming down the pipe. I don't really think so, though. There is a company we've actually used for one of the apps called Rails LTF, long term support, who do back ports to earlier versions of rails. As a commercial thing, it's a relatively cheap subscription, so that's a great option if you have that. But also it doesn't need to be free. Do you think it's free for Porsche to keep a warehouse full of old valves for those air cooled engines? No, it's not free. They though assign it to be worth it. So does Leica with their M three parts. So does Rolex with their, whatever, older toner parts. This is a price you should be willing and happily pay for a heritage. And tech, much to my chagrin in the SaaS era, has completely disregarded the value of heritage. You touched on. Two things that I also wanted to ask you about is the one is like, once, because of the SaaS business model that you mentioned now, and with once, you follow a different path here, which is very interesting. And campfire is the first product where you just sell the source code, basically, and people can host it on their own. Also reflect a bit on your cloud exit strategies and so on. So there's so many things I still wanted to talk with you, but you also mentioned, hey, and I have a quick question here with hay, because I'm just curious, because what was the first meetings with you and Jason deciding to take on Gmail or to even do a mail application? It doesn't seem like something because there's so many functionality you have to have from the start because there's so many table sticks. So what was it like the first meetings about, like, yeah, let's do hey. Well, it came in the context of us not doing any new products for not launching any new products for about five years. We had committed to a strategy. We had the time called becoming base camp. We actually changed the number or the name of the company from 37 inches to base camp because we were like, hey, we'd like to stay a very small company, and that's not compatible with having a bunch of high growth products. So at one point, we had four major products. They were all in various stages of growth, but basecam was growing the fastest and the biggest, and we went, you know what? Let's just do one thing. And then we did that for five years. And I enjoyed that. There's a good time. And then after five years, we were ready to build again. The itch had sort of returned. So when we looked at, like, what should we build? We looked at, as we always do, what do we need? What are the kind of tools that we spend a lot of time in that we would have a lot of opinions about? And therefore, we believe we could bring something new to the table. And outside of basecamp, the number one tool I spent my time in was Gmail. And Gmail was a really revolutionary, big step for Internet software when it premiered in 2004. I have lots of fond memories of just how much they turned the table upside down. I remember, I think when they launched with you got 1gb of free space, and everyone else was giving you, like, ten megabytes or something really stingy. It was a huge revolution 20 years ago. And then they fell into the mixed blessing it always is to become tremendously popular and used by literally, like, a billion people. You can't change anything. You can't even move a button. Otherwise you'll literally hear from 100 million people all scream out in pain simultaneously. So you ossify. That is the price of success. You ossify. Which meant that we'd gone 20 years almost with very little innovation in email services and clients. Not that there weren't others, surely there have been actually quite a few others who've tried it. Very few others had tried to do things at the service level. There are few. And most of those were actually also more than a decade old. Oh, there's fastmail, there's proton. Great services, too, more than a decade old. Built on a different philosophy, more similar philosophy to what Gmail is trying to do. And then you had a bunch of clients who worked with Gmail that did some really interesting, innovative things, including Google themselves, built a thing called Gmail inbox, or Google Inbox, which was an alternative take full of novel, interesting ideas. And then they fucking killed it. Of course they did. And then you were left with same old Gmail. So we thought, you know what? Here's an audacious opportunity to be so bold as to think that you can compete with, first of all, Google. Second of all, free. Third of all, perhaps one of the most successful Internet pieces of software ever in the history of the Internet and think you might stay alive long enough to write home about it. That was the mission for hay. And I thought, do you know what? That is such a crazy idea that we would never have contemplated it. Let's say, ten years into the lifecycle of the company, I would have thought, that sounds like a vc idea. That sounds like a raise $50 million and just blow it idea. Not a bootstrapped idea, not an idea for something, one like us. But you know what? We had been sitting on the bench for five years, and we wanted to come out swinging, and we wanted to work on a problem that was near and dear to our hearts. And email was literally the number one thing. I mean, I spent hours every day in email. So all those things conspired to Jason and I going like, fuck it, let's do it. Let's just do it. It's crazy. It's probably going to fail. And so what? Even if it does fail, this is one of the strategies that we employ at the company, we have reached escape velocity a very long time ago. We can spend our time on whatever hell we want that interests us. And if it does well commercially, that's nice. It doesn't change anything, but it's nice if it doesn't succeed commercially. Do you know what? That's also nice. I got to build something that I cared about and we got to build something for ourselves. Great, cool. So if all that had come out of hay was that Jason and I got our personal favorite email clients of all time, that would still have been a success and I would still have done it. Now what happened was not that it had crazy success out the gate. In some ways also a mixed blessing, because we just signed up tens of thousands of paying customers off the back of, in part, a launch debacle we had when Apple tried to push us out of the App Store. And it turned into a really nice business. Not as good of a business as base cam, but Basecam has also, a, had 20 years of gestation to get where it is, and b, deals with a different category of data. Basecam is a very easy tool to manage. You literally have to write comments in order to fill up our database. Email is substantially harder. A lot of people will literally receive hundreds of emails every day. And if you have tens of thousands of customers, the data mass is just very different. Totally worth it. Turned out to a very nice business. We've just improved it massively with the introduction of hey calendar, which again, we basically just went down the list. All right, we do product management in house. Cool, we're good with that. Now we do email in house. Cool, we're good with that. What's the next thing? And I was spending a lot of time, well, not that much time, but I was using Apple calendar and I was going, do you know what? Having the integration between email and calendar is nice. It was a blocker for a lot of adoption of hey email. A lot of people like, oh, I love hey email, but I use google calendar. And like, so now we took that out of the way. Anyway, we're now three years into it, I think it is, and we just launched that hey calendar. And we also did another crazy thing. We spent like a year building this hey calendar, originally thinking it was going to be a standalone product, and then at the end of it we went like, fuck it, let's just give it to everyone. Anyone who has hey email will just get it for free. And anyone who buys hey email tomorrow will be buying hey email. Plus, calendar for the same price. It's all good. It's fine. Yeah, that's interesting. I mean, there is so many more things I wanted to ask you about the cloud exit as well, and the list is long, but in respect of your time, I think we need to wrap up here for now. It would be great if at some time maybe we can do a follow up. Maybe David, do you have anything else to share or do you want to share with our listeners? Like how they can follow you or get more information about 37 signals? Yes, my personal website, DhH DK has links to everything. Has links to my twitter, my LinkedIn, my hey world email newsletter that I used to write all my long form thoughts on and links to all my books and products at 37 signals. So dhh DK and follow me on all the social channels that I'm on. Great. David, it's been really great talking with you. I'm looking forward to catch up again and yeah, until next time, thank you. Thanks so much.