This course is a detailed introduction to system design for software developers and engineers. Gaurav Sen developed this course. He is an experienced software engineer and he also has a popular YouTube channel. You will learn about basic engineering design patterns that are used to build large-scale distributed systems. In the second part of the course you will learn how to use the principles from the first part to design and code a live streaming video app. Hello everyone. Welcome to the System Design course. This course is for beginners in a system design before or you have done just heard of it or read about it, do it, this course is right for you. At the end of this course, you'll be design patterns, which are used to Let me define each of Large scale distributed systems, large scale, meaning that something intensive in terms of compute or data For example Google, let's say Google Maps. This is large scale because The whole world's map has B: it's being used by a lot of people. C: it's being updated very performance expectations from it. You don't expect Google Maps to go down. You expect Google Maps to You expect it to be So it's a very good product Distributed systems means that the server this program is not in one place. It's disputed all around the world. So you might have one server in Japan for tolerance, so that if one of the servers can take the load. It's also for performance. If the Indians want a Google Map result, because that gives a quick result back. While if they go to the US server, they get a response, which is a slow result. Okay? So that's the point of a large Many of these companies which their engineers to know about system large scale distributed systems. So to do this, their engineering which we mentioned earlier. Design patterns are particular practices, by engineers to build these systems. For example, you have a common social media and that post being For example, if Brad Pitt posts LinkedIn, the problem is very similar. It's one piece of content which has to millions of people potentially. And what you want to do is you want to want to put too much load on your service are coming into it continue being served. This is a common problem, so you solve it using a common solution. , this would be a design pattern. Right now, you don't know what design pattern for this kind of a problem is Pit is a publisher and their event is And Intermediately decides the pace at keeps the server loaded low, and also actually reach all the subscribers. Now, seeing this, you can tell that as an requirements and convert them into system design patterns to make reliable, This helps them convert business If this sounds exciting to you, and you won't be disappointed. Okay, let's start with an example. Let's say that you join a company videos to millions of people. This could be Hot Star, it could So some sort of events which are And you as an engineer have to devise technology which can handle this problem. So the first thing that we need to requirements from the user's perspective. And often engineers don't do this. They're product managers and a company document based on user feedback and data. So that's good to have. You have a well documented, thought engineer can then read and decide Amongst these, you pick up the Taking the example of a live streaming should be able to watch the stream live. Whether you see it at HD quality or you a secondary issue, but being able So for that, you have to make sure you have to also make sure that your Second, you reduce these So one of the features which might be video or should be able to like a comment. What you then do is you look at concept of somebody liking something. What does that mean? It means that a particular user Okay, so it has a like id, it It has a timestamp. When was this video liked or The comment itself is an abstract concept. It's probably going to It has an id, it has a user It has a creation time and maybe it also So you're seeing that I'm taking features from the product requirement document and which are used, useful for an engineer. These definitions can then be then be mapped into the database. Once you've defined the data that define endpoints through which this So I want to read comments, give me an The network protocol at this point by which I can send an electronic and our server can respond to that So our server is now encapsulating requirement and defining some So that external users can We do this for every feature that optional or good to have features. Usually a product requirement or good to have features. These are all core features which The good to have features will document, so you don't need to think but you do think of which features The second thing is you also have When you're creating these designs or sure that none of your services fail if you have an outage in India and your don't want the entire system to collapse. We talked about this a little server spread across the world to . You may also have multiple So if one Indian server fails, another So here you might have some sort which the other server is quickly Or you have some sort of partitioning to this server, 50% of the users So just 50% of the users are affected out engineering requirement is just about the technical solution easy it is to change that solution. For example, if you write code to and you need to make a small tweak to to just send it to 1 million users. You also want to check whether So read receipt. The problem with writing code, which is Is that whenever there's a changing lot of effort to redesign, test, So you want your features, To be extensible for this, you pistol ball and gaze deeply into it. Actually what you do is, as an experienced your past projects you look back at things that you have done, have done. You know what the world is doing. And based on that combined knowledge, reasonably expect it to scale and more and more users join you, finally This is an important part not really thought through in interviews, but in the real which is designed by, let's say a senior engineer that design has to You run through a couple of requests with edge cases, with common requests are having a sensible The other thing that you can do is you this design. You can have some sort of capacity estimation is feasible, but importantly, you you start getting into the code. Okay. Let's say we have a live streaming system. How would we go about designing this? Requirements would be streaming video to multiple customers. So that is is a requirement. Showing advertisements, allowing or news flashes, having graceful in case you have low bandwidth, and so on. Amongst these, you'll see that mainly showing video to a lot of users. That's a major requirement. And also, of course, comments is a thing You may also consider product requirements problem. It is, but the core requirement, of course, is just showing a video, This means that I have to capture is shooting at eight K, and I should in my server so that I can query it The later part, the query it later not want to query that data at all. I may want to directly stream it of people taking a step back. It looks impractical because if I'm quality, and this is raw footage. Sending that much data to people on their So yes, I need to store it in some and then I should be able to stream distribute it to all of my customers. But I don't want my customers doing this or I don't want them to know about, there's a I want this to be a black and relax. They just hit an API and their problem is solved. Of course, I might give them app store which take care of all of this API and querying just enjoy watching an event instead part of this is actually happening. These APIs have well defined signatures. You can tell that if I want this video Id in a particular format, then I have to query a , which is going to be type frames. And those frames are also well defined. So if you have ever written a program, are very similar to method signatures. The only difference being that these APIs language, but through a network protocol protocol which defines exactly how an from one place and sent to another. And also how the response is behavior of this interaction is going to be that is defined by the protocol. So this is great. We have a system which is storing some because we want to watch this event live. And this data is going to be queried using APIs. Also, these APIs are going so that, the clients who are using this work, paying for when they actually query it. As engineers, we have to think . What if the database, which is What if a particular firewall blocking all of your requests? What if one of the services that system, one program, one piece of you have, introduced a bug in it? Or there is somebody who has changed the code in that system? We have to use some design principles This challenge may also be a feature who's playing in this live event to a back and forth with some audience randomly or based on their activity. So you have to display those users to this parties to millions of people out there. So taking these requirements, let's try So there's two ways to approach this. One is, From customers or our out there in different parts of the world. And then to our database, which may be, again, That's one way to think. And the other way to think is So what kind of detail do I need And what kind of APIs do I customers to be able to use my product? Okay. Both of these approaches are fine. They require different When it comes to a data based approach, kind of data do you need to store. And often you'll be thinking of these pieces of data as tables. So you need to store a video with an id. The video has a name, it has a size, That's one way to think. I prefer the other approach where then fulfilled using APIs on the server, some sort of data in the server, in the database. And that data is then mapped onto tables like and so for this system, this is the Okay? In our case, customers are live streaming their cell phones or laptops or the tv and more often. In certain countries you'll have used more. There, there could also be a tablet of course, video. But that there are multiple devices which need to be catered to. This is a front end UI design problem. System design is more to do backend part of things. There is some system design involved when store or cash data on the front end, but We are focusing on the Okay? So these clients need to be able So what does our server need to have? Its APIs are going to be something like ID and you pass in your device type. So I send you the resolution based have a particular offset that first 10 minutes of the video. Show me everything after the 10th minute. If I have a video API like this, So the return type could. Some frames, some video frames. Let's say each of these frames is 10 seconds long. So a single frame is what I this video for this device. And after 10 minutes, so 10 minutes to is picked up and sent to the client. If you know about API design, that this API is not well named. Get video means you get an entire video, So maybe we can rename Other thing is if you're using a REST protocol get is going to be defined in the request itself. So g e t or here is going to say that Get Me Video is a video. In our case, like we said, it's a frame, so frame is what we are looking at. You notice that Wimu also has a similar seconds. YouTube also has an api which tells you from which point to I'll give you all those things. Great. You should be able to Okay. So what you should be able to do is Again, I'm using well-known concept in rest post means you want want to manipulate some data, you So if I say post a comment with an ID it is coming from because the comment is the server. Based on that, I'm not response or changing the behavior So I don't need that. I don't need an offset, but I need the author of the comment. I need the post on which So maybe the video on which So the video ID. And similarly for each requirement, we query and manipulate the data as we want. So that roughly defines our Okay, we haven't spoken about anything in detail. We haven't talked about the network roughly this is what it's, okay. Now let's go for the next part, What kind of data we need to Returning frames is Storing comments is something we want comments. And to get video frames, we also probably What kind of database should we use? Comments are rather simple. You can store this in an SQL database with you. The data of the comments are text. being stored as a problem. The author, which is a foreign key So in a user table, you have an id and this author is going to be Along with that, we have a video id. So there's a video table also, The video IDs are going to An example of this would be This is a cricket match. Video ID 11 would be a musical event. Okay? And this is a comment table. So for this cricket match, a comment and the author was author number one. Author number one happens to be called. That's their username. So if you have to display all comments, What you want to do is you want this table for that video 10. Then you want to get the data for that username who has made that comment. And you also want to get some video data of the page where the comment was made. So in this way, we are able posting comments, posting video. Now, overall, this system is complete. We have a system which can answer queries. Okay? start with. This diagram is not incomplete. It's very rough or There's nothing here which is concrete, nothing, when it comes to implementation. A at this point in time, we have a talking to each other, not what we So let's get into those Firstly, on the client side, is Yes, different APIs require Posting a comment means that I'm posting comment maybe soon, but it's not like I don't need continuous Those notifications can be given don't need those notifications I just don't need So you see over here, you What about a video frame? When I ask for a video frame, I video frame immediately after that. So I'm watching a live video, I am sorted for the next 10 seconds. In five seconds, I'll be . So that behavior is different. It's a more continuous behavior. Okay? So maybe we need to use different this happen. What would I use for a comment? I would use the most common comes to disability systems, which is hdp, HTP gives us the benefit that you You don't need to store any information A stateless server is basically, I have no idea where you are from or what you want. Define everything in the request. Okay? Goon wants the next 10 seconds of video. What do you mean by the next 10 seconds? Who is God of San? Okay, so what should be there This is his user id. You can actually go and It's not the next 10 seconds that he wants the video from minute number 10 to 10 minutes. 10 seconds. Okay. That video length is also well defined. There is no concept of And the video ID is mentioned. It's not like Gora wants the next 10 No, I have no idea what we do. He was watching you define which You might think that this is an obvious defining everything in the client itself. It looks a little tedious and stupid, but doing it is fine. Doesn't everyone do it? Not When you ask for the next 10 seconds of video, for know what the next 10 seconds should be. Take an example. Give me the video at 10 minutes, then 10. 10 seconds from 10 minutes. Okay? That's one chunk. Let's say you make that request. And the server is taking Now you come back and you say, you didn't receive it in time. The server is going to look you the same response again. The other approach to this would Gimme the next 10 seconds, where Okay, so here the definition is not 10 The definition here is The server is now going to take current pointer, and then decide So in the first case, it'll take 10 In the second case, it's going the video from 10 minutes, 10 What's the benefit? The client didn't need to know which , it lets the server handle it. It makes the overall network more making duplicate requests, and it makes You don't need to define everything server figure it out with context. That's a difference between a HTP is stateless. Its benefit is that the If the server crashes, there is no the server. If you forget where the client currently was problem, right? You can go and store it in your database Therefore, the protocol that you're going to use htp can be stateless. The best part about this is any issue. You have no state being stored in server. So whenever a new server pops up a new request comes with total context in the To query your data, right? What about video frames? Do you want to query video frames? You want to get the next one? What kind of a protocol will be nice? You can use HTP here also, but something which is designed for video have to consider some other parts. What happens if I have a mobile device, What happens if I have poor bandwidth? What kind of video am I transferring? If it's a live streaming thing, then the What happened previously If I missed that packet, if network, let go. If it's a, if it's a live streaming lecture be full context to understand the probably want to send it properly. You want to send it over a reliable network and over a reliable protocol. Okay. So if you want a reliable protocol, If you want a realtime efficient protocol, So over here I'm going to use Web RTCs, a peer-to-peer protocol. So you actually are able to send Certain protocols have a So the client is the only person who can send data who can make a request to the server. The server cannot send data Okay? So what I'm doing again here is the video, but for comments, it's So you see that network protocols comes to designing systems. Okay, finally, on the server side, what Similar to the server side we have to think about how are we going Most database solutions, let's say MyQ going to be talking to the databases. So this is a TCP backed protocol well, so we don't need to think of that Elastic Search, for example, has HSTP based protocol Cassandra, Amazon db, Amazon Diameter db MySQL, post Grace, all of them, the protocols are identified. The problem then becomes which Because there's a ton of solutions We could store data in the MySQL database also, but it's going to be expensive, and So what is this video data? It's effectively a file. So storing it in a file And you don't want to build So you want to use a solution for this maybe hdfs. That's one solution. You could also use a video Yeah, it's off the shelf. You can just use it. You can use wimu, by the So it's best to mention this in the system design requirement, like maybe an enterprise solution from But if you can't do that, streaming requirement and you don't wanna lose your job, maybe because then you can use a file system like sdfs or s3, Amazon s3. The benefit of S3 or It's easy to query and you can store very large files inside it, okay? In a Yes, it's also, it's not cheap but it is easy to query and you can store very large files inside. The capabilities that a database gives you in terms may or may not be very relevant file, which is a video file, okay? You're primarily looking at low cost What about the user or the comment table? These two tables can have a let's say MyQ or post quiz. You may say that a comment Every time, a requirement changes, the comment table also needs to change. Maybe you want to persist a lot of data You want to persist all the replies So on MySQL database or a SQL database You're looking for a NoSQL database, to transactions or relational. Joins, but you don't You're looking for scale When it comes that data in a key value fashion. So that's no sequel. Great. This is very rough idea of how we are going to be designing, of the system, and also defining we'll be using to make it possible. For example, we talked about web protocols, and when it comes to MySQL and a file system, a design can go in more important that requirement is. So doing a recap, we see that we have now, which talks about how our customers and how those APIs are going to be The data in our database may be being Usually the customers are the people be filled by an external service. In a live streaming system, it's probably going to be a really high efficient camera, which is live and persisting to our database. Okay. The network protocol that you probably Media Protocol which is a guaranteed protocol. You don't lose any data using this. And the idea is web rtc, you might lose some data. That's okay. It's the end user watching a live stream. They want data quick and real, but at the source any data because everybody else will lose So a highly reliable network can bandwidth, expensive network because, that video camera is really going to need a process that amount of data into your You're seeing that I've skipped a lot of requirements. That I can't take this high quality data it to everybody on the planet. What I need to do is transform this data. Okay? So now what we are doing is we have looked at high level what the solutions are going to be and now really getting into the nitty gritties So the first part of this is how data over the higher level network, file system, and convert it into data Four adp, seven 20 P, so on and so forth. You can't serve eight K definition. So how do you do that? There needs to be some sort of a which is going to be taking this live resolutions. 10 80 p, which is full hd. You have seven 20 P, which is hd four 80 P, which is decent for quite a few mobiles. And I don't know if this is something part of your stream is really Because as long as people are getting roughly what's going on, they're going to be happy. Sometimes these resolutions are defined well in the p I d, because after speaking feedback, which resolutions are acceptable or tolerable for the who ask for premium 4K transfer also. Okay, so that's fine. You're watching it on tv, then you probably Okay. This raw video needs to be How do you do that? So the first thing you'll do is This entire raw video is going to be So you collect video for 10 seconds, chop and then you give it for processing So let's say you have these zero which take the raw video and So if you pass in 1 44 p, picks it up. If you pass in four 80 p then another program picks it up. And maybe you have the same program, which is five threads based on the resolution that you pass. It converts the video, the ten second Similarly, you can think So if you have a device, which is has to see the video in a different format. Okay. It can't read all sorts of video. It has some formats which are well defined that format. Similarly, apple devices might So these formats define how you're This video data, which is going the network common video format is H 2 64. Apart from H 2 64, you might formats. Let's say you have a format which is more particular type of event, a music event. You research and you find that there's a way to store video more efficiently. So this is more of a very large scale formats, but if you're a small company, edge 0.2 64 is very good. Okay? So different resolutions. Different formats. We need to take our raw video combination of a resolution and format. So over here we use a design I won't go into too much detail of idea is you can take one video split long, and send it to different Okay? You might have something else also transforming the type of video. Maybe you want to compress That can be in step two. The servers being used here might So you see S one is S3 is being used here and here. So there is no there is no guaranteed execution server that Any server, which is free. We'll pick up a task and execute it, whether it's compression Again, finally you get three can store in your database. So this would be the map reduced pattern. It's a very high level overview of this. It's almost a ca of the map no reduce in this process over here. But have a look at this design pattern. It is useful when it comes to a data lake and converting it into Next, how is this data actually who are looking to view it? So this data has to go over here to the server which is exposing these APIs of get put post. When you query this data using a We spoke about web RTC earlier, which really good for video conferences. Because multiple people are However, in this case, it's a So we can take a step back and say, a protocol which is more suitable for streaming. There's a couple of protocols here. Also. The most popular one would be EG DASHER stands for Dynamic Adaptive that depending on your bandwidth, you're on you are going to be able to see high quality For in a car, you're watching the video network is really poor. So you start watching it at 1 44 p as You want the network It's Very similar protocol is hls. This is devices. Okay. And finally, what kind of data do Do you want to store any data at all? Do you wanna make it totally stateless? Yes, statelessness is useful serving and keeping context for every user. But for some things you can keep some state when it comes to video, you can cash the last 10 So anybody asking for video in the last, that video, which is inside the last 10 minutes, Instead of you making a full network call you instead server from server itself. So you avoid this network call So these are the high level when it comes to a system design. Like we said, this is a large Our assumption is that you have This much planning and this kind of a design makes sense cost-wise and engineering effort wise. We mentioned that there needs to be There needs to be performance here. So you can use things like CDN solutions. So you can use content delivery static data and have the clients actually pull Webpages are a good idea. You can also have some video data posted on the CDNs, in which case authentication don't want everyone to be able to see this data. And does the CDN do the authentication for you? Do you write some code and then authentication? These are the challenges that you have, a large scale distributed Okay, level the things we need to consider when Where the requirements are defined. Maybe in the product requirement startup. It's at a very, nascent stage. There is no requirement document. You're directly talking to the technological solution, which is The important things to notice are as abstract concepts like objects. These objects then need to be able to be manipulated The data representations need Once this high level blueprint is done, we need to make this system possible? So what protocols are we going to use? What kind of database In some cases, you also think of what. Intermediate design pattern solutions balances, you have message queues. These are all design patterns. And these have been converted into Redis, for example, provides cas load balances and many other things are also Aws, you want to use these already instead of rebuilding it yourself unless you know the trade off in terms of cost and performance Finally, once you have decided on the of these tools and the interactions of So we thought about how are we going user? Oh, we have to transform that video. We have to convert it into different in different operating systems. We then thought about how we are going We then thought about how we To the client device. And finally, we are touched upon actually instead of from your server, because if it is, close to the person who's streaming, you don't want of that load all for some static content. You want to be giving that load content delivery networks, which You can have a look at Another part of system This is in contrast with what level design where we took different components of the those components are going to interact using APIs. And then you're going to be sending data But largely if you look at these systems, they own the business data related to that service. Now what we are going to do these services and try to code it out, which means we more depth. But because of that, we are probably Okay? When you, at the high design everything from how the users will be interacting with your gateway. The gateway is going to be to your internal services. The internal services You can't code all of this out. Even in, at work. You can't just have this all So you take small chunks of the system That would be the Louis design. The core functionality of live streaming customer, as a person who's paid. Maybe it's a subscription, purchase. But what we are looking at here is how View video and fetch more of the video We are not looking at onboarding movie or how the livestream is going to be moved from the We are looking on the other side, to be consumed by the users. To do this, we again, have two approaches. One is to think of the code in the start. So if you are an object oriented you might think of what kind my system? How are these objects to interact with each other? Is there any kind of inheritance I have But as earlier, this is a little difficult are extremely well specified or they're the data that you're storing for. Before you think of the function, I So even over here, we think about. , what are the actions So what I'll be doing is on my phone a particular place, watch the video. Okay? So I'll be scrub the video up to a I can also click on play from the start. So start the video at the beginning at timestamp zero. Both of these are very close to each other. So effectively the action is play video at timestamp X I need is to pause the video. Okay. In which case, what do you do? Do you continue fetching more do you stop touching segments? So the behavior is dependent on the If you don't wanna clog up their mobile kept it, in the background then you have to be smart about it. Probably the next 20 or 30 seconds or into your device. So that behavior also has to be We go for the next two minutes of video right now under the important requirement video quality, which is going to be Let's say you are using let's say for low resolution devices, and one final feature is up Which means if you had a one hour long between India and Pakistan, and it's the 20th minute, if you log out and come we should start at the 20th minute. We should store that somewhere so You might want to cash the video like we You want to hit that buffer so that you start playing immediately when the user do that. You might want to do that just for some videos, The older videos then can be kicked outta the cash. That What I'm considering here are behavior, and API calling. This is largely what lu design interacting with services. Depending on your level of seniority, have issues of concurrency, latency An example use case will be chunking and transforming videos. I'll leave that as an exercise to you. But there are cases where you want to increase you don't really care that much about latency. How quickly do you get those videos That's not your concern. You want to make sure that functioning right. Another cases where the moment a video You want to respond to it as assumption that video is really important. So there's going to be some sort Okay. an to you. I won't give you too many details, but it's different low level design requirements Similar to what we did earlier, approach to solving this problem. The first tool that we like to As a name suggests, we think about need to fulfill for every user. For example, you can see An actor is a person who can do actions, They can add videos. Maybe a videographer is a person who necessarily that every video which has Before it gets added, it added to it. What's the description? What are the timestamps what kind of video is this? How do you tag it? That might be taken care of by an admin. The video rougher shoots the video, uploads it specifies the quality and everything else. So that's a separate actor and a customer. The person who consumes the video, we person for us, so this is the only actor Let's get rid of these two actors. We mentioned that the four things able to do, let's note them down. The first thing is to be able Okay? Then comes another requirement, which is, This is them coming back to partially and they want to start watching our game We also want to, we are the maximum quality allowed by network and device. So if you're on a low quality network, that's okay. You low quality video is also fine. But if I'm on my home wifi I wanna see the best quality video that I subscription. There's things which are also happening Of course, like we said, concurrency, These are things which the think about. You might say latency is something that affects the user. It does. But we are not looking into it. We are assuming that all of our requests quickly enough. And this brings us to our next point. We need to continuously buffer. Our video, right? watching videos. This is assuming of course, that bandwidth is not messed up. If your bandwidth is messed up, you But if my bandwidth is fine, should be able to watch the video. Okay? This is a customer if we can fulfill these requirements, they're matters a lot as an engineer, okay? These would be called use cases, right? You can have many use cases. Some of them are core use When it comes to system design, the PRD that has been given to you, a it's just on one use case, right? You add a feature and So we'll take all of these and The next step is to Into classes and objects. This is where things usually go wrong. When you look at the use case diagram it looks like everything is to do with the allowed by networking device. But is the customer actually doing that? Is the customer saying that, please No, that is obvious. That part is obvious. So who's going to handle that? If the customer's not going to handle system has to handle that part. Okay? So there needs to be another actor in this who does actions like physically, they're So we are maximum quality offered by the network. Who's going to handle that? There needs to be some sort of a controller or the brains behind. How much video should you send? So I'll just call this, okay. sometimes the entire service, handled just by using a tool. So we offload the problem to a be ideal is to use a network Depending on my device and depending you take care of the bandwidth. An adaptive protocol is Sstp dash will handle it. So we'll assume that this entire service, requirements and then offer them video particular bandwidths, So the speed limiter does not need to exist. Instead whenever you're connecting to our system, TP dash and that is a pretty big deal. One entire use case taken care of just cause you Scenario you might be asked, how How does it work internally For papers which help you learn the protocol in terms database internal are also very similar. Operating system internals Or you can guess in this case, hey, I'm just guessing over here. But I think what's going to happen exponential back off and dcp. Now for the next bit clear video from a needs to actually store a corresponding Okay, that can be done. We need to have an object here. Our service, which is video is going to be used by end users. Play a video from a timestamp. Okay? So this has to be taken service. So that will be play video for a user. And this is the video I, okay, so I'll And I'll also mention the time You see that? I'm still thinking in terms of APIs. The clearer your APIs are, the The more you think about how the implemented using the services that you have, be. Okay? Go back to video and watch from left off timestamp. This is quite straightforward. You have seek for this user and this video, So let's say we call it like we say if you're using a. Rest api. Then you can just, you can mention will send you back the seek position. It's best to mention the return type. Also, like I said the clearer you make your API, the So video frame will be sent back here. And similarly, what will be So what's going to happen is when you left off, you're going to first sync what So that will give you a timestamp. And then you say, okay, play this video Alright? Have nonstop play when watching videos. This is interesting. We need to get frames in future. So what do we do? Do we save play here or do we particular user? And a video with a given timestamp. Do you see that these two are very going to return you is a video frame frames together and buffer them Yes. I see a very close linking between this API and this api. At this point, you ask yourself, what does the product need? Is play a different action from And here I'll make a decision It's strange to think of because What they're doing is they're, this video from this time stamp. That's okay. And the other one is that the player, video frame for this timestamp looks cases are very different. If the user says, get me a video from are probably seek to that position. They like what they saw their, or they So it's very different behavior minutes of video in the background. Okay. That's one very important thing. When you are designing any api think about who's using it, what is And then think about the So these two APIs are very similar. And on the server side, what you would, two APIs. The client should figure out by itself that what video frame doesn't want to pick. , so maybe you cut down on the APIs that you have the current API of play So maybe every time you play from a event to the backend service saying that The user actually came to this video. Okay. That there is a seek api, which is primarily for when you're left off a video. So if you left off, came back and started exciting, it's just the place that you're leading off from you, you wanna continue from. But during the video while watching position and started viewing, shows that, this part of the video is sought after. So it feels like you're splitting business or from the side of analytics, From the side of engineering, behavior. Someone asks you for 10 seconds of video, you But for analytics or for the converted into a three load. This part is just for user experience, I personally would take this API and So a flag would probably say or the device, the mobile made And depending on that flag, I would then file an event for showing interest in this part of the video. Alright, so that is the use case diagram. We can now think about the class diagram. Let's draw the class diagram out. The first class that we need is a video. Two things that we need to store for States are data that an Behaviors. For example I am speaking right now, so I need a throat. I need a tongue. I probably need a brain to speak and what So the behavior will be I need is my body parts to actually work in tandem. Similarly, you might have a video So that would be the bites of the video. Let's say frames. Cause we have been using every video. You might have uploader of this video? How long is it? What kind of tag do you want to add? So on and so forth. , what operations can you perform on the video? You can get a That's pretty much it. Okay. You can't add a frame after you've added a video. You can't do anything apart from just getting a frame So that's the simple class. You also have the class of user. That I'm not focusing on the class diagram. So user has a name, an email more metadata around them, but nothing else really. The most important thing, probably to A video also will have an id and for Id, okay. Very simple class again, which class, which is watch video. Okay, so a watched video is who's basically watching a video. So this needs a video id. Which video have you watched? Who is watching it? That is the user id an ID of the it later. Up to what timestamp have they watched this video? So seek timestamp. And coming back to the use cases, particular point, but let's assume The client knows how long, how much the device. Going back to a particular place is possible The final class is This also requires a class So that is video consuming service. Let's first define the So that is API one. And if you two, and to do this, it just which user, okay? That takes of our entire class. You've seen, this is a What is more challenging Okay? How is a user going to watch a video? So this would be called a class state and what behaviors are possible Fine. These two diagrams of a class and use However, in some places where over here , you need another diagram which defines In this case, it's not very These are the actions that they can do. Okay? These are the things that you need to expose for the action to happen. That's also right. What is the sequence of actions? What happens first? What happens second? That's not clear. And for that you need a sequence icon. So let us try doing that. This is what you call a timeline. The y axis basically is time, but in descending order. So you have three timelines here. One is that if a user does certain to a video, okay? And the video consuming service Seek time to get the next frame. So this might not just be a video, providing an api to consume the next frame of the video. We'll see how this happens. First the user sends a message. What message is this? Like we said earlier this is going to continue your information This is responded to by the video it knows up to what point has a user, the video. So that is you return a timestamp. Now the user is going to make play or get video frame, right? So the video frame as this user or this video at a timestamp, and the tool I'm using here is lucid. As you can see, if you use tools, it helps wheel or, doing it in a This is much better. The video consuming service However, it's best that the user interacts it could send a message to the video service and say get me the video frame Okay. The important thing to notice has no idea who the user is, whether they're this video. And it just gives you a timestamp. Okay. I could have taken this request and Okay. And the video service could say, sure, I don't care about what, who, which user is is trying to access this video. Just tell me the video and the time But authentication would So that's the reason why I'm to happen here for every frame that you ask. And then the video timestamp, as we mentioned, a response of a video frame. I could also send back multiple can use them later. But I'm assuming that the And if you really feel like you can send a So it's a single frame and To the user. Okay, that's the interaction for a while. The moment you get a frame, And so the data keeps flowing. Very similar to how a TCP connection works actually. Initially you have some sort of a handshake, right? You get some initial information, set happening is you're constantly pinging. One of the drawbacks that I can see here in my diagram is that the video There's so much communication happening This is just wasting time. I don't know if that is worth is worth completing our flow this much. You can put some authentication here in the save on two network calls, which is a lot. So yeah, maybe I should just take this, put this here and take this, put this over here. Don't go into the video consuming service. That's what we'll be doing in the code. So now we finally jump to coding. Remember to use the diagrams that we have made thoughts and most of the interactions it would be a waste not to use it. The whole purpose of making these thinking effort required by coding. Coding is basically us typing have been mentioned or thought Okay, that will speed things and also help you avoid mistakes. So the first class that we talked about The state that we talked about is it has an id, it but then the frames are also ordered. So an area of frames make sense. And then some metadata. So in our case, I'll Of course, in the real world, you of the video, the uploader of the length of the video, everything else. But we don't need that right now. So I just create a class. That an ID helps you create classes much better. These classes that I'm creating are You can use the same thought process for c plus for C shop and many other languages. Any object or in programming language. If you're coding in Python or Scala it might be slightly different, right? But the logic is very similar. Come to the point of defining things as And finally, define the states object and then put them out. Okay? This approach. You a thing. A frame is going to be a bunch And maybe it has a timestamp That is in thanks stamp. You also have a class of A user has a string id, it has These are basically metadata. And we talked about some behaviors So written return of frame, and which frame should we return? You should return the frame which is being called for a particular timestamp. So you see our class diagram and fix it or we can fix it in code. I would suggest fixing it in both is up to speed, it helps in timestamp. You can also have timestamp as an object. for, making sure that the inea is greater than zero and all But I'm just keeping things simple. Pass on a timestamp. Here we are going to be This can be improved of course, but over the frames and return the timestamp and return the frame. Only if the timestamp of the frame have asked for less than equal to. And there also has to be some So we can assume that every frame is of 10 seconds in which case the start time is this. This has to be less than equal to, here, plus 10, is greater than all equal to this time. Okay. Or rather greater than then If you don't get the frame, You can also throw an exception here. Let's see. I would say throwing an exception makes sense because the meaning of an exception is that I didn't None would mean that, oh, you get blank. So if a timestamp of 20 hours is sent for a video, frame is not exactly what you want. You wanna say, oh, you're out of bounce. So index, under bounds exception being thrown here is going to be okay. Now there's another small the magic constant of plus 10. You don't really want to do this. It doesn't . Because tomorrow if your frames get optimized and can have to go and change it in the code. So you might have this in a constant, no, a class constant, so public And then what you have is if you make a change in a single place. But even that would not be suggestible because this is So let's take that, put it in you have is framed or framed. Time has to be this, but that is also, that's fine. It's good. There's just one. data point for the entire class. All of your frames have the same amount of frame time. It could be different, it could be that these frames some frames are really high quality. There's a lot of movement over there. So it's not even 10 seconds long. It's just two seconds long. And some frames are, like this coding frame over here. You can store 10, 15 seconds of video because There's not any face moving or something. So I'll just take this and not the class, but the object. So it does not become a class property, It is defined by each object. So any timestamp, and then this becomes start timestamp. Alright, so this is. This I don't need to say, I don't need to I just said timestamp has to be greater. Okay. This is much more flexible code. This is what will set you apart from just the portal. You're going to be a engineer then. Okay. So now we have a user you can get their id. This is not really related to okay in get ID and return the id. Okay. There's watched video, which Of this action we have the video id. We also have the user who's actually action, and we have a seek bank stamp. So that is seek tank. Okay, we mentioned that a method to get seat time. Important to notice that APIs having often, like you can't mention that something, but the objects here can have exactly know what's happening, right? It's not a HTP API here it's a Java object, so it gets 10. Makes more sense here. So this defines everything. Except for the last couple of behaviors, which are So the video consuming This is going to be a public ink, seek seek time, had a user ID and a video id. Let's assume that watched and once you have this watch video, to get this done and return that. Okay. For this to work, we need to have a database, which we are going to Okay? Create that and turn on. Okay. This is great. It gives you the seek time. And then finally, the other We do service. So the final class is going to be using are usually stored in the file system. And let's define that system. Okay. Now there's a public method similar to the previous a frame. And that is get frame for a particular video Okay. We first need the video, so us a video with this video id what? Once you have the video you need to return the frame And that's it. That's pretty much it. You have something backing your services. Some sort of database or file system. Once you have them persistent, you can always get Once these systems are being can actually manipulate this data that you have by exposing APIs. And the best way to manipulate the data which have their own state and behavior. So the code is simplified and you for different types of use cases. This would summarize a Alright then that's a reasonably well If you want to look at more videos on that I have on Interview Ready, which basics of system design, load balancing, rate limiting charting and scaling. And if you want a more advanced version section in that same course. I would suggest go ahead and check If you really like it and you level up, go for the paid section. All the best.