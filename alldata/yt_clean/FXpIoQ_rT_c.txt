Gwendolyn Farraday previously created one of Now she's back with an all new full Vue course to Hi, everyone. My name is Gwendolyn for this course. I have been a professional And I've had the opportunity to work in several including Angular react, and Vue js. I in various technologies, and use Vue js as my web or mobile application. If you would anywhere online at Faraday Academy. If you please email me at gwenf@protonmail.com. Vue js is a JavaScript framework for building It provides tools out of the box to help you make And it also gives you a set of standards for code teams that work in the same code base. If Vue js is a virtual Dom framework. If you don't for understanding this course. The virtual Dom a little bit faster and more efficient you can get it down to about eight or 10 kilobytes and bundled JavaScript will probably never be that good to know that Vue doesn't have a lot of extra Why does Vue JS call itself a progressive to mean that you can use it anywhere from add some interactivity and using it as and legacy applications. All the way up to using framework for large scale applications like You get to decide what features you want to add and it's extremely flexible to allow you to on your own. Or you can use the ones that many people and companies are using it for its if they have a legacy application, it's quite to turn it into a Vue application into a more the whole app at once. That is one very convenient overVue of the history of Vue. The Vue project was version one launched and started to become popular Vue two was launched with many new updates with the release of version two is really where popularity in the rest of the world. So many But from 2017, and especially in 2018 and the top three JavaScript frameworks. Many Vue creation around the Vue ecosystem started to for their applications as well. In fact, which are household names in the West, use Vue, j has been released in fall of 2020. And along many different libraries that are also created and the vcli Vue router in Vue x, also being regularly Even now, with Vue three just released, we have also been released to be compatible with using the Vue j s core library as well as the Vue test utils and some of the other tools in the course, I will be making future courses about So let's get started with learning v j, So make sure you are at the correct And then click on getting started here. This will introduction to Vue j s, I'm going to go straight And if I scroll down, I can see the place where add next make sure you are importing the next is necessary, because Vue three is not this other repository that you can reference until the whole ecosystem and everything finishes between importing Vue to an importing Vue And I'm going to go ahead and grab this script a basic HTML file. And I'll be adding Vue the basics of Vue syntax before I get into So first of all, I'm going to be using VS code the bottom here it says go live. So if you go to you can type in live server and click on this plug have it installed. But I already have it installed over here. And at the bottom, I'll just click go just zoom in a little bit here with the static you can just come here and right click and click and paste that absolute path to the project display the same way in the browser. live server automatically refresh when you make code changes. But it's up to you if you want to use it or not. So I'm going to go inside of the just paste in the script tag that I just copied. Vue and start using it in my application. I to get started. So to write my own custom code, that. So there's basically two things that I Vue variable that I have access to from importing method called create app. And that basically an options object, which I'll get to in a second. my Vue application with the HTML that I'm going to another method that I can actually chain on to going to save this as a variable. I'm going I'm going to use this other method called Vue application somewhere in my HTML here. And I'm actually going to tell it to mount And that means that the Vue j s instance that I'm data and interact with any kind of DOM element clear in a second. So now let me change this, And to do this, I need to create a function called the options object. So any variables or functions on this object here. So specifically with data object. And on this object that is returned by want. So I'm going to create a greeting variable. then exclamation point. And now I delete that static code there. And I'm going to you use this double curly brace syntax, it's hard to pronounce. So you can just call it double languages. And it basically means that anything will be parsed as JavaScript by Vue. So Vue is that we're returning, and see if there is going to display that variable or the value And you can see that now it displays the Let's talk about Vue j. s directives. They are or template here with the Vue j. s JavaScript. And I'm going to create an input here. Now, what if I want to get the value out of this directive called v model. Now, these directives in are prepended with v dash to differentiate them parsing this Vue application will see this keyword pass in as an argument to the model here. So name. And I'm actually going to put the variable So you can see now in my input, it actually starts it also changes the greeting variable that is data binding and is handled in Vue with that V I'm going to create an HR here. And I'll make use another directive here called v if, which also So I'm going to set an is visible variable and set this to true to start, I am going to to style the box so you can see it on the page. because this V if directive is basically just value is truthy, then this element will be this div will not be rendered to the DOM at And you can see the box disappears. And if I found in the DOM. Now v If is very similar it takes the same kind of argument a Boolean you can see if it's true, it However, when it's false, you can see there's difference is the style is set to display none. the DOM. So when would you use v show? Well, in either want something to render or not. Like if it's loading show the spinner. And then you would set the variable to false and then show is useful for specific cases, when you might would be more performant than adding and removing all you're doing is changing the CSS. So you're So changing this back to Vf. There are other elsif, and V else. And you can already guess what here. So v else if and V else is the one that demonstrate these really quickly. I'll add another So I've added a little bit more CSS here to I've created here. And this works as a regular if will be rendered. If it's not true, it's going any v else ifs you have here, you can have as many to see if that is true. If that's not true, then Now the third box is blue, the second So you can see the blue box displayed Likewise, I could change one of these would be rendered in the DOM here. Now I want to you can see for a split second, you as well as the curly braces show up on the screen going to refresh the page again and slow it down So how do I prevent that from happening? Vue has utility that will hide anything from rendering So I'm going to add a V cloak here. And then I see, I'm setting v cloak or this V cloak attribute in Vue js. And then I just add a V cloak to my and refresh, you no longer see the curly braces I'm going to go to inspect element. And you is no v cloak attribute. But if I refresh the fast. But basically, that V cloak attribute and then it's removed. Once everything is rendered have to manually use this, but it is a nice issue. These were just a few basic directives. We go along in this course. In the next video, Now that you've seen how to use variables and little bit more interactive with a So you probably can be captured in the browser and used in our on an element on the screen, like a button, or if like Enter to submit a form, let's try out both of First, going to get rid of the two extra Which for right now, I will label as showbox. variable is visible set to false. So this div will that variable. Before we were hard coding the actually use this button to change the variable directive called v dash on. Now, the v dash on for custom events that you create yourself. Or you like, as I mentioned before, when a user So here's specifically, I'm going to do v on be a click event. So I'm listening for But now when someone clicks on the button, I have need to pass in an argument of whatever JavaScript And for right now, I will keep it simple. And when that button is clicked. Now you When it's clicked, the box shows what if I want box. And the only way to get rid of it is by by simply saying is visible equals the is visible equals not as visible. So if it's it will be set to true. And this should And now, if I keep clicking toggles on and off, a shorthand for creating events. So you don't have the app symbol, and then the event name. And this dash on colon. the at symbol just replaces all more complex in here not just setting a variable to pass in any kind of method on your VJs object. And I'm going to create a method called toggle method. You can see I already have data on my vj s another key, which is called methods and put as many functions as I want on this methods application. So let me create that toggle as I did above, but I'm just going to use the again but inside this function, so in order I have to get it off of the this context. And variables on the this context so that they're So I can do this.is visible and then set it equal And this should work the same way as it did once again. So that is the basics of how methods method toggle box That it is also available So let's look at one more type of event. keyboard input. So here I want to listen for key start with the Add symbol. And listen for a key up So for keyboard events, I need to add a modifier for input here, I want to run a function or some enter, I actually have a shorthand because this is the key up event specifically with the enter key. any key on the keyboard. So for enter, that I'm just going to go ahead and use key up dot And then it's the same syntax here. And I'm going So let me go down to my methods, create a method actually just going to console dot log, this dot just focus this input anywhere and just hit enter, And you can see it logs out the it logs out whatever the greeting variable pass something into a function as I'm calling it just by adding the parentheses to call the just pass something in. So just for demonstration through the template here. I'm going to accept then get rid of this because I'm no longer looking here, I am actually just going to be using the And just to show you that it's different, I can some exclamation points appended to it. And you can see that it is the greeting variable erase a few characters here, hit ENTER again, to the new value. Those are the basics of I do want to point out here, you see this dot you're not only listening to the key up event Now there are many modifiers that you can use. For I get I have a modifier here that says I'm left click on a mouse will not trigger this I can also use some handy modifiers like instead of using the regular event dot prevent here dot prevent. And I can do that for stop You can chain as many of these modifiers as handy thing to know about when you're building we will be diving deeper into events and methods In the next video, we're going to talk Let's talk about Vue components. Now when basically just using one standard component, you use in our template. So now we're going to work on components in order to prepare for learning how to with the Vue COI outside of a single HTML second and take a look At what we are going to be a simple example of a form to work on breaking Now, where you see the red outline, those So the outer red outline around the whole login And then each input with its label will be a and be able to reuse for as many inputs as we component, and then break out the inner components we are going to look at how you can pass data So what would a Vue component look like? And I'm gonna get rid of this greeting really directly in the HTML and create a form tag. Or called custom form. Now, this is the same of course, it is not a standard HTML tag. So I And I need to define it after I define my And before I actually mount it to the component. This is a function and it takes So the first one is the name of the component I'm going to be using in my HTML up there. And the second is an options object. And since actually use any of the same options that I've The only extra thing that I need right now is And the easiest way to define a template is and pass in the HTML here. So real quick, I'm let's say, two inputs in here for right now, but a And let's call this a login form. Since we're here to login form. And since template is the only object, it should run like it is right now. So And you can see these two form inputs up at the inputs. So I'm going to style these inputs After all of these boxes, I'm going to add margin of 10 pixels just on all sides, and now they are a bit easier to see here. And now let me add a data method to this So after this template key I have here, I'm going I'll just use the function shorthand here, return And the title will be login form. And now So up here when I defined variables, I use them login form is a self contained component, any to have to use them inside its own template. So and by the way, This doesn't and isn't kind of a weird template form. Because This is just a stepping stone to get to more where you will have syntax highlighting, and auto So here, I need to use that variable title. by referencing it. And now I should see the title I do here I am, zoomed in quite a bit. So that is I'm going to go ahead and keep building out compose components now. So I'm just going to I'm going to add some submit functionality here. and then pass in an argument with the method when I submit a form. So I'm just going to And then I need to make a methods object down here And I will just console dot log it will run this function, there's a few add a button here, that will actually submit so I don't need to add that here. But I Now when the form submits it refreshes the whole browsers. So you can just automatically click But since we are going to be handling the form we don't want this default behavior with we have event modifiers. So we can do prevent, as passing in an event object to our handle submit Again, this is just a shorthand. So we see that it logs submitted when we submit the these inputs. So we can do that. Again, by using form input to a variable, we'll call this one And then add these into data. And now let's password. Of course, if you remember, I have referencing it inside of JavaScript here. And this has to be an email. So Just any password, and I'll click credentials here. Okay, so that's one at how to break up this component and take out as you saw in the markups earlier in this video. components. So from a parent component to a child, So what if we want to compose multiple components inputs and creating a custom component just for contained within a special input component. So let another component here. I'll do app dot component passing in options. object. Again, And in this one, I'm just when a display a label variable here, and And I'll use a type, just the default text And that is a default input. So now where am I going to use this component, in this component with this new one that I input, and custom input. And I can use my Now there's one more step that I have to take So I have to let my login form component And I can do that here by creating components the component that I want to be using, which is so I have these two inputs. Now it is giving me during render, but it's not defined on the I'm referencing this variable label, but it is not Now I could define data function here and But I want to demonstrate passing data from one on this component, I'm actually going to define custom input component. To do that, I'm going in, we call it email label for right And I'll also have a password, label and call this password. Now I have to get these two variables And so what I'm going to do here, I can go ahead I'm going to add a label here that I'm going label. Now this looks just like an HTML attribute. That is a Vue directive called v bind. What v bind into something that can be parsed as JavaScript component. So I'm v binding this label, which is which is email, this will get passed down as a And now in this custom input child component, I with a props object. And the simplest way to just like I did for custom components. And these names of the information that I'm passing down I'm defining label in props, I will have access Now if you look at the login form, it has a label here, and you can tell it to it focuses on the field it's related to. I'm going to pass in password here. By the way This is one of the most common directives instead of using v bind colon, you just use here as well. So I'll pass a label in As password the label will always display as the label both form fields are properly labeled here. Now And that is for email and these password these and just pass them in as strings here. of the colon, shortcut there, then I could let me put enter email here. So it's different. Because there's no more v bind here, Vue is the application, you can see that it's just child component and displaying that string, I'm actual Vue applications, you will see that 95% you're passing a prop down to a child component, So you'll almost always be using this V because in the child component, we have the for changes to the text in the input, we're not have access to whatever is inside the input. in the child, I'm going to save the model. to a variable in the child. And I'm going to could data function here, return an object with input you're already familiar with the model. And you input, it's going to update this variable and But now how can I get the value of this because I actually want it to stay in sync with So that way, when I submit my form, I can have So there are actually a couple different the most straightforward approach for getting I'm going to explain a little bit more in depth methods of capturing the value of a variable from I'm going to use my same input variable. And this object is called computed. I'm So computed is an object where you can put this input value variable that I want to And whenever this value changes, I can actually I can create a getter function, and then value here, it will run this function. And it will run the set function. So now what value get that value from the parent component. So that I already have here. And I'm just going to get rid of those. And I'm actually going to v model directly on my custom component here. And this to the variable that I'm going to be using. And for this one, that's email And these got out I'm be modeling the email and password. And now I here. Now, how do I do that. So in props, I can this comes from the parent. Now it doesn't really we're not v binding any variable and passing it to a child component is actually under the hood, which is mapped to email. So v model does a few So I have access to this model value prop because in the child here v model. And then in my getter return that. So now whenever I get the value for the parent component. And I can check that by just the inputs are pre populated with the value from input to a getter function that I'm setting here value, which comes from the V model variable in So now, how do we handle setting the value if capture the value first and Vue passes this in any name that we want, I'm just going to call it value. And so here, I can try typing in. And you from that log in the setter function. But So let me go ahead and set the variable. Now to haven't seen yet. And that is this dot dollar events that other components can listen to. And I I can emit events that are built in like I could that. Or I can emit a custom event that I create. Vue gives me and this is called an update event. in Vue three. So if you see older tutorials, it will probably be using an input event here Oops, I need a comma. So this that I'm emitting. And the second argument is which is this value that I'm getting Now, how can I listen for an I could set this manually. But like I said is actually listening for this update event from this V model from the parent component is Let's test this out. I'm going to start typing And you can see that it logs out the isn't that clear. So let me put a real email here, the email and there's a password, which are Now, you might be wondering, why do we have to from a child to a parent. And the reason why they are immutable. We cannot them data here can only be changed in the same anything we pass in via props here. So for getting all of these warnings attempting So I'm gonna undo that. So that's why I had and create a getter. So I'm getting this And then what I'm doing to update the value of parent, this update model value event. So the is listening for that event. And this is actually updating these variables itself. So Now, there are definitely other ways of handling listen for changes on this input. And I could call same thing either amid an event, I could also pass child can call functions in the parent. And then are also other state management solutions. And we I just wanted to give you an initial taste of how Vue version three, now that the syntax has changed custom components, composing components like we are with this custom input into the login passing data from the parent to the child, and that the parent can listen to and passing it a about loops in Vue to simplify our syntax here Now let's talk about loops. Here, we have two of And I would like to just be able to loop through I need to add an array and data here. And for each input here, including the variable And I'm also going to add a type. So I'm going to demonstrate really quickly, I'm going to add And let's say name. So what if I wanted to template here, I'm going to come back to looping I'm just going to create a p tag here. And I its own paragraph tag. So I'm going to create a and then I need to pass in the array here, over the inputs array. Now this is a four in that I can use in the iterations. So I'm in inputs, and now I have access to this And I can basically just display it in a variable mistake in my syntax. And of course that is And now you can see that these top three here are Of course, they are so big because I am zoomed in is basically how you use a loop in Vue js. I am you do a loop you have to add a key prop here and loop. Now the reasons for using this key prop are in depth on it in this video. But I just want you use a key that will uniquely identify any elements This can help with performance and preventing programming a more structured Vue application with that your linter and code editor will pick up on give you a warning and ask you to add one. So we each one of these paragraph tags, we're adding names are unique here, each string is different. This is a really simple Vue application. in the browser. But you can see that there I want to point out though, that one more every time through the loop is you can actually You can get it here and then use it as your key. index of each iteration in the loop, put that of course. So I'm actually going to get rid of to be putting in inputs here are objects for the I want. So the first one, let me put a label I'm going to create a value here. And this was go ahead and add a type. So let's say type is I can get rid of those now. Alright, so now my the data that I had been passing into these custom of these custom inputs, because now I'm going to for each iteration of the loop. Let me clean this And so the first thing I want to do is create a inputs, just as I did before, I'm going to say get the index here really quick as well. And can't v model email, I need to V model based off inputs array. So I'm going to have to V model So I'll do input that value, the label, also, now I do have a type. So let me rebind a type So that's one thing that I need to I'm still accepting that model value prop and the now. And instead of doing type is text, now which component it is in the loop. So now I'm and I'm going to say type, which will So I'm going to come to my form here. And I'm the logging here for handle Submit. So I don't So what I'm going to do is just delete this and and then this dot inputs, have one and then Let me just type something in. And it's I'm just going to type in a fake email, login. information. So this is the basics of how V for either on regular HTML elements like an h1 This is very commonly done with card components. all those different little boxes with pretty it would be doing this V for loop over all of those Pinterest cards on your Pinterest we get into the demo application is lifecycle Another important concept in Vue j. s is lifecycle So what is the hook and what are component life Similar to the demo that we I can click the toggle box button and a box add it you can see it was added it was completely removed from the DOM here, And then finally leaving the DOM. That is the Now, sometimes things might leave the or because something is coming into Vue via something like this example. In any case, you can just a function that will be triggered to run at For example, it's a function that will be called or right before it leaves the screen. If Now this is the version two documentation here, you yet in the version three docks. But it is then if I scroll down on the sidebar, I'm at And I can actually click on So this is a diagram like it says of the And like it says, You don't need to fully But it is a useful reference. And this instance. But every single Vue component So you can see these two up top in the red. All you can see before create and created, these Vue. js has initialized your component. the format is run right before your component as soon as your component is mounted to the DOM. update and updated, like it says here, this when data changes on your component. So any if you're incrementing a number or changing some run. And then when your component is going to destroyed. Now this terminology has been updated So if we go to the Vue three documentation I'm going to scroll down so you can see before update and updated. I'm going to it's before unmount and unmounted, which is The lifecycle hooks function exactly I hope this will become a little So in the code, you can see I have appear. And here is the toggle box button inside special test box custom component that I made, is my main application. And the options object the box is visible. And then I just have a toggle So again, this is pretty much the same thing that I put the box in its own component. Now Now that just going to add some lifecycle hooks here really component lifecycle. So I'm just going to add and then mounted, and then unmounted. And in And let's see when these console dot logs print box here. And you can see in the terminal at the in the same order that we saw in the VJs then this one happened after it was mounted to the again, we can see unmounted prints because Now let's look at another one. After methods here, or on the main Vue instance that we And I'll hit toggle box. And you can see print from the box component itself, but from the because we are updating this data variable from update function is triggered on this component And if we toggle it again, we can see updated is false again. So updated will run every single time lifecycle hook, some of the most common use cases a certain page or component. A lot of people use into their application from a back end or from in initialize events. And then when the component is you can save some data or run some kind of check So those are the basics of lifecycle hooks, I different components and see what happens when you we can get into some more advanced examples and a that you won't see as often. So those are we are going to build a Vue three application This is a demo of the application that we will a few items. Now it looks like the web page is and CSS so far. As you can see, if I click the Add up, the only things that are actually functional Which are just regular browser anchor So this one goes to the Products page. And you can if I click the X, nothing happens, it's just And if I click the X, nothing happens, it doesn't And on this page, I have a past Orders table, This project is going to be a little bit we are not going to be starting from scratch starting with a static application with HTML and by step how to add Vue JS into the application. of how Vue works and how to build real world Vue of the code base. And then we're going to see how start with the Vue JS portion and implementing the goal is to eventually reach a point where inside of HTML. And then we are going to move where we will have Webpack and the full like Vue x and Vue router. So let's get started with the package dot JSON. Now this is the file of these before if you've worked with JavaScript, and then the scripts section. So you don't need This code will be available for you. So if you can. But since we're focusing on Vue here, the that compiles our styles and serves I'll show you how to start an application of a temporary server here in the meantime. it will serve it on a port, similar to what we VS code for the last demo application. So to my terminal option here. And I'm going to at the bottom here inside my current folder. And you can see that automatically opens the if I scroll down, I can see the same page let's look in the source directory. So the source code is going to live. And this is where we'll for the application, which is the home page. And of this Vues directory over here. So the links the Products page. Now to start working with Vue Right now I want to be able to update and save the in this app dot html file, I'm going to go ahead the last demo application. So I'm going to go So I'm importing vj s. And now I need to write So I will create another script tag. And here app up a pass it in empty object for right now. and then mounted in the same DOM And let me just check here. Yes, the wrapper the content is created inside of app. So to get method. And I need to return an object. And So when someone clicks the Add to Cart button, inventory that I have. So inventory itself will types of produce that I have here. So carrots, these three items to my inventory, carrots, and That looks good. Now I need to find these elements So if I look down at these cards, you can So I have carrots here. And I have the price And what I want to do here, I want to do v model. And this And then I'm going to copy the same thing for the and paste this. And then cherries as well. Okay, it still shows zero here. Just like before And now the number starts at three. So now we want if they have a certain quantity in we change this back to zero. So to do that, I need I'll create an Add To Cart method. And in this that someone wants to add to their cart, and also another place to store what So I'm going to create a cart here. And for right And then when I call the add to cart method, quantity, then I can access my cart variables that I want to access on my cart object, I can pass in type. So it would be the same as or whichever item we want to access. And So plus equals quantity. Now I don't have to this is really the action that I want to take I have in my cart right now. And to show this, in the browser, so you can see it when I log out So for carrots, I'm going to add three, you forgot to connect this method to that button. So I'm just going to add it So when someone clicks on the Add to Cart method. Now I need to call it passing in is going to be the type of item that I want to and I also need to pass in the quantity. inventory carats variable. So I could also just call it from inside of my So let me scroll down to see my function again. in this extra variable, I'm going to just update get the type from there. So let's see And you can see there is definitely a and it's trying to add it to the numbers zero, Now Vue has a very easy way of fixing this. And about a little bit in the last demo that we And we don't want this V model to be considered a number. So Vue gives us this modifier So now if we look in our application, that my carrots have one item in it, which And now it's two, and I can add multiples. Let's stop here for this video. And don't forget features for yourself. In the next video, we So now we want to hook up this cart it's just static content. So we can And if you look at the code, we go to the and also the main container, which is And now I can just see this aside, So I basically want to get all of this HTML and page, which is the homepage, so that I can use And I also want to make these cart items dynamic. update the quantity and the price. And I can also cart, this will display. Now HTML itself doesn't of HTML into another HTML file. A lot of people But we can also easily do this in JavaScript. So So I'm going to remove this sidebar from the page application. Of course, our Vue application is can move it outside later. So that this menu So I'm going to fold this Vue create app. And Now it's giving me an error or a couple errors But I'm going to fix that. So if you recall, in the earlier lessons, we defined the different this is a perfect use case for a component HTML or template that we want to use on So I'm going to register this as a component. And now I pass in the object just as before, and and then use graves. And now I want to grab And so now I have this whole aside all of the And now I can add this To the page with the name And remember that our div wraps the whole Vue of that div with ID of app. I'm going to put it I'm going to put the custom component, sidebar, down here where this sidebar element is in the you can see the sidebar is no longer on the now I have a sidebar here. So now that the sidebar And the first thing I want to do is be able when this is clicked, I want to hide it. And then So I need to create a variable for this. And So inside of my regular create app here, an element to data here. And I'm And now I can come to my sidebar, and simply use So if show sidebar is true, then my custom then I shouldn't see the sidebar at all. And And when I change this to true, I see the sidebar. and change it back to false by default. And now And I'm going to say this dot show sidebar equals toggle true or false every time this function is show sidebar. So if it's currently false, that true, it will be then set equal to false. Now I that I'm going to put it is on this button here, I'm going to find that on the page. Here is that Cart button. And I'm just going toggle sidebar, I don't need to pass anything automatically look through my methods and find to the page should be able to click on this now. to be able to do is close it and I need to close my template here. And here is the button. for the sidebar. So I need to add an app click I want to use the function toggle sidebar. But I actually don't have access to the I actually have to pass it into this component So I'll pass it in as toggle equals toggle object called toggle sidebar passing it into the my component here, it's going to be called toggle. accepted as toggle. And that will be my function call it toggle. Let me see if this works. Go to an error here maximum call stack size exceeded. So I'm importing the prop toggle, the function that is pointing to toggle sidebar here. And, oh, Instead, it was just trying to use it as a So now it should be calling the actual toggle Okay, it works just as intended now. So actually dynamic items here. For right now, And so I'm only going to be until the next video. So let's hook this I should it should update in the cart over here. and pass it in to my sidebar, so my sidebar has With this on multiple lines to And I'm going to pass in cart as just in my component here. So I'm going to do it here in my component is actually that cart object. So I'm going to just assume that and So I'll use my double mustache syntax. And I carrots, and that will be the number of and automatically updated. Let me add So if I add, let's add five more now this quantity course the total should also be updated based off equals the total for that item. So let me do that just going to have to do this. And let's say cart But here it says 482. So I'm going to use this do times 482. And then before that, I need to To add to cart. Now there is an error, let's see The reason why it's complaining is because $1 sign you put that syntax inside of the backticks that template string. And it will parse whatever is So thinks we're trying to pass in a JavaScript is not a valid key. So the only thing we have So JavaScript doesn't think where you're trying And then Vue can just parse the double curly So let me go to cart now my cart opens as normal. two carrots to the cart, and now gives me the a total of all the items in the cart. I only soon. So I'm going to go ahead and add a function items in the next video. So back in the code So I'm going to add this and escape that dollar now I could create a formula just in line here and plus the second item times that price, and so on and so on. But that's not going scale for multiple items. So what I'm going And if you remember computed and we'll update the result. So I'll And on my cart appear. Right now I have just I'm just going to hard code the price down here. the price, which is 482. And now I can and put it in here. And now the cart total, Let's see if this works. Add to cart, open my and stepping through trying to figure And it is because I have accessed has to be accessed This is inside of JavaScript, component. So I have to access it on this card times that number. So let me go back to my I can see it's $24.10. Of course this isn't or sometimes there's only one decimal, and just run this really quick using something built I'm going to wrap this here, that two fixed. the browser, I'm going to open up the cart, add a Always two. Okay, I'm going to leave it implementing these features on you should be able to check out the starter and start exactly where I did at the we will cover adding all of the rest of the items So we can use loops to make our code more In this video, we are going to pull in dynamic from this food dot JSON file. So this actually groceries that we are going to display in our as well as the price. And then even if we So how can we pull this into our application. in Vue j s for this. If we come to our I am going to add mounted hook just like we had this JSON data. And that's going to be an from the file name, which is food dot JSON. And I need to call the JSON method on that response. And actually I need to add a weight to these I'm going to await this as well. And then To this mounted method. So now I've I get my data, which is the array of all of I am going to set it on state here. So instead of just get rid of all this dummy data that I have definitely break my application right now. But So now I'm going to set this stat inventory And I'm going to come to my Vue here, I can in my root element here that I have all 15 the next two things I need to do are display just three recommended items, actually, all for the homepage, I'm just going to display the So now that I have inventory, I'm actually And I'm going to come to the recommended and get rid of the last two, for my loop. And now with this initial and loop over each item in that in inventory. Let me just see what this looks like every single item in the whole inventory. So I'm this because inside of my Vue directive, I can put from 023. And now we'll go back to my page. of course, it is only displaying carrot, So let me put some dynamic content in here. product dot name. And then I believe it's product And for the price, now I do have prices in two dollars for right now. So I need to I'm going to go ahead and escape this. And then this is just an HTML template. This isn't inside to escape that at all. And that should be all of Let's actually go ahead and update the icon Make sure that's the right. One. Yes, Okay, so the icons not working, but all the we want to add functionality so that the quantity Of course right now, all of these elements have each other. So let's change that. Now I'm going to but I need the inventory of the correct item because these numbers are In order or because this and get the index. Of course, I could use the ID here. And actually, I almost forgot, I also need add that key. And I'm going to come down here, And then I'm going to add a new attribute called called quantity, which is not currently on the And this should just add the quantity key to the Let me go back over here. I'm going to add for each other anymore, I'm going to add it to Vue data here, I can come to inventory. And I can number mirrors it. But now I need a way to add And here at this add to cart function, I do instead of a string, the dynamic name of And actually here, I didn't think of this, but index, I, I already really have that in this So I'm just going to replace that. Now, of course, I don't really need this the ID of the product. So let me just use And then this should also mirror Yes, and the quantity is married. Okay, now for the cart, passing in the product add to cart function. We are passing in the type it will be like this cart dot radishes plus that inventory. So we do need to do one find the item by name in the inventory, or the index of that item. So that's what we're going type now, I think it makes more sense to call And we're using type for the type of item So now to access it in inventory, I want to do But we have to actually passing the index here. the index actually. So we're going to Okay, so we are getting not a number for we are passing in or what gets And so to debug the function quickly, I'm just Now back in the code. So the arguments are So stepping back through this, I can see that equals on cart or this cart name when there And by the way, I'm going to go ahead and and here, I'm just going to put a simple then I'm going to set this And now this statement should work. Okay, let And this should update. Let's see. Okay, yes. buy, it shows the correct number of each in the on the cart over here, I want to show it is hooked up to only look for carrots. So if you remember, the sidebar here is custom sidebar component that we made. And we are need more information because the cart is only we also want more information from those items, to my sidebar, and after cart, I'm going as inventory. And now I can receive So basically, we have to loop through their information now. And we have a table here. And then we can loop through these rows So I'm going to go ahead and add a in the cart. And here, I do need to use the Okay, and now these are being looped through in no items right now, of course the totally I have this item. And now I have another item. So Now to do that, I'm going to go ahead and grab because cart is an object, this index is third one is index, or just I. So now I have the item quantity, which will change this to to that key and we should see the names of all Let me add different items to the cart, And in the cart, we do indeed see radishes and So here, we can get rid of this and say the object in the cart. Of course, we already And quantity works. Now price is a little bit on the cart, we actually have to search through helper method for that. First, let me escape this. name of the item which is the key and we will find So after computed here, I'm going to add and add that get price. And basically and to do a dot find. So we want to I'll call each item product in the function that in the inventory and try to find whatever item I is equal to the name that I'm And when I find that product, I'm going to set if I call it product again, so maybe There we go. And now for the return function, now I can do product. And it should be dot And that should return the price of the item. And and Vue the cart. And I can indeed see the And I can see the price and quantities of the for total. And so total here needs to be dynamic, I'm actually going to use a helper method. So and instead use it as a method. So since it's a verb. So calculate total. And I'm going to of course, I'll actually be calling that as line of code anymore. So now we basically the quantity in the cart. And then we have to we already have a method to be able to look And the easiest way to do this is And so object dot values can give me an easy is an object, I'm not going to loop through it out. So I will pass in cart. And now I have an quantities that I want. So out of that array, I'm just a built in JavaScript function, where I save call it an accumulator, because that's what it sum on each iteration through the loop. I also And then I can also get the index of that item is return the accumulator, sum total, whatever current value, because I'm looping through all of times the price. So I'm going to have to call name of the item that I want to get the price for. array of names. So I'm going to do that by using get all of the keys this time off of cart. And so I will do the current And now that I have the names here, So I can pass a names index to that this dot For the function. I forgot to put an arrow I just stored it in a variable to explicitly now, this time function works, there This is just to demonstrate how to calculate a it's basically just using regular JavaScript. So of course, this total, we haven't done yet. But let's add some artichokes. And now we have a total values, what I believe is happening is because that the names and the object values, they aren't So I'm going to have to instead of making two this one. And here, I will just have to change will basically be in array, that will be the this larger array. So for the value, now, I instead of names here, I can access the name that all looks good. The last thing I'm And this means that the accumulator will in this array, which there aren't any to start, And for here for the total, actually, that we use before, which was too which is what I want in my cart. Let me see if So let me add items. Yes. And the and the price still works there. Now what about with our get price method. So let's go down to the doesn't exist. So now I can do just the quantity, And then I'll call the get price method. which is the name of the item. And so that should add an item and check out the cart. Now it still says no items in cart, let's go ahead there are no items. And so I'm going to add a V if object that keys and then check the cart object. that will be zero, which is a falsie value. to radishes, add one in the cart, we So I believe I have to do length Okay, that does work, but I have it not, because if the length is zero, I then I don't want to show this no items in cart see if that works. Let's first go here, it does And now it changes to the item in the cart. and the quantities updated and all of that provide full CRUD operations, and this delete does So you can see the Delete is here on this a function here and actually this function But inside of the parent component, which so I'm going to do a click. So when this item to remove the item from the cart, and which is the key. Now this remove item is going Because I can't mutate props, I couldn't change from this component, I have to change it from I'll take a remove item function, let me go ahead And now I have to create that function here as one this will take in the item name. And I am So I can just remove JavaScript, delete Let me add some vegetables to my And it does not remove let's see if I'm getting see why it's not considered a function. I Let's go here. This is remove item I'm also accepting it as a prop in of computed. So it's not recognizing this as a in the child component. Now, this is a problem if you were using Vue JS from NPM. But I'm There we go. And of course, I need to pass gave it a different name for the child And let's see if it recognizes this And I can remove it from the cart. Awesome. I do want the number to clear here. So let me take just really quickly, I'm going to set And back to zero, and it is in the is that the cart does show zero items, even the number is not dynamic. So let me change that I'm going to change this to be dynamic. And quantity. Okay, and now I So what I'm going to do is And I'm going to say total quantity is basically And to do this, I'm going to use another reduce pass in this cart. And then I will reduce So I have my accumulator and my current the accumulator and current value together. Of starting point or initial value. And I'm just me see if that worked. Right now it says zero, but And now it's four. So the quantity is working. a dynamic value now. And that is basically we are going to move the Vue JS code outside how it can work in multiple different pages. And trying to build a multi page site via the data across pages and stuff like that. If you make sure you check out the branch and the repo Hi, everyone, welcome back. First, I want we connected the cart slide out draw menu on And then we added an actual loop, as well as cart here. Now this is only one page, of course. I go to Products page, you can see the URL Now if I look at this in my code, so let me open you can see here is the header with all of the And then you can see the different sections of that we actually want on every page. But now it's also go to Vues here. So you can see in the header Vues slash products, that HTML. So it's actually And if you look at the header including a completely separate div with ID of app can see we already did that on this page, because rendering it or mounting it inside of that JavaScript, no interaction, We also have a duplicate header. So this this page is just copy pasted into the HTML on everywhere. We don't want to have a copy Not only that, we would have to copy So to make this code reusable here, we need Now, this is not easy to do for plain HTML. But with the sidebar. So I'm actually going to extract And now import this file into my HTML. And you can see my page is still working. My cart is still fully functional. And what this JavaScript file that I have separated and And I'm actually going to grab both of and I'm going to put them at the bottom here, because my app.js file lives outside of my Vues, folder to app. So I have to do dot dot. And Let me see if that's working for go page doesn't open. But that's because I So I will have to copy this over from the app dot just take the same code. And now it should and also display the total quantity correctly as in the script tag here. Now, you can see that the page. But if I click here, of course, the cart on this page, I only have the sidebar you know is actually a custom So we can put that on any page where we import this main tag. And with all the same variables, same Vue JS script. Let me save that. Now And all of this is pretty much the same thing that through the different types of foods, we would loop through them hook up in each individual so that it would actually display in the cart over cart can see I have three in my cart here. If I go now there are no items in my cart. So though there there are a few problems that we have run into that is how do we share data across pages and when I add something to the cart here, it So as soon as I navigate to another page, So generally, in front end applications, our data or save our data somewhere. One easy way is to go here in application. And you can This is in browser storage. And local storage can actually save the data like our current data or anything, we will just automatically try to for the way our application is set up right now. page, we would have to check local storage, see our application. It's kind of a workaround for be to create a single page application with Vue Instead of our server. In this case, we're just serving at pages every time we go to a new URL it's coming from the server. Whereas if we make page refreshes, we will go seamlessly from page to will be routing us to different pages. The We do have some duplicate code across pages. template here, this sidebar template. We just called sidebar and we can use that on any page. well. And we would probably do that if we were We get to extract this into a template as well. the past orders page. Of course, none of this is is actually to set up our project with something it will be very difficult to manage many different different files into all of our different And that is with the Vue COI This is why it was Vue create, and our project name, and It walks us through a setup wizard asks us all of the files, folders and build tools application. So in the next video, we are going and our JavaScript file and convert it to a Vue Let's get started with the Vue COI, And I'm just going to click getting started. And I can see that it is prompting me to globally so that from my command line or terminal, I will Now you might see some places on the internet at sign in slash dist Vue dash c li or something Vue basically has its own namespace and then each So to install vcli you can copy this command Now I have the Vue COI installed, I can by checking the version. Right And now I want to use it to create an actual create command, and then give it the name of the see the documentation for this command, you can and read about how Vue create works here. product and cart as the name Now, if you've used some tools like create it's a little bit different. It doesn't just you actually get to pick your own options, and These top four options here are actually custom these two defaults right now one is for version And then it also gives us the option features. So I'm going to go ahead and do that use the arrow keys to go down and then I can Now you'll notice that this list here is multi deselect an item. Of course I want to choose my I definitely need to have Babel setup for me for in this application. I'm also going to use state later to show you how to add a Vue COI package CSS preprocessors or things like sass, if you it's a good idea to go ahead and set it up. Now, as well. And then I definitely want linting and select testing if I want, which, but I'm not I'm going to hit enter, it takes me to the next And I'm going to choose version three, use history change. But it's usually what you want to in of your project from a user point of Vue. So it will use hash router. If you want your ads to website, you would navigate to in your browser, And I'm going to use history router. Now it's so I'm going to go ahead and pick es lint Click enter lint files when they're saved, I'm package dot JSON this time, just so I don't have a larger projects, you want dedicated config files. Do I want to save this as a preset? No, I do not this walkthrough, the four top options, those were just going to say no. Here, it's basically setting everything. And it's also running an npm install, If I list the folders inside now, I have by Vue JS called product and cart. I'm going you spawn up the project for me, it and saved all of the changes that it did initially And I have my complete project created for me by of these folders and files and give you a little Let's look at all of these files Now looking at this, this looks pretty much like HTML, CSS and JavaScript files. And that was by file structure that you would be using in a real Starting with the Vue, see ally gives us we can see in the package dot JSON, we have three you choose to install the testing packages as gives us this link command. And then it also gives for development locally, it gives us this serve service. That's from Vue, j s gives it the serve us. So there's no more of the old complicated this in the last application. The build command is This will generate production ready files for can deploy them and have a live website somewhere. in this video. And to give you an idea of I can use NPM to run the And now my app is running at Port 8080. it automatically copies when it and I can see it gives me an app or already install a router as well, it installed the default And you can see I can go to different page routes. because there's no page refresh in between page JavaScript router, rendering hiding or showing notice from the homepage, it's just Port 8080. if we look in the public folder here, you can see And this is where our app will be injected. the hood, this Vue COI service command is running and also handling running Babel to transpile our will be injected as script tags as well here. index dot HTML file in a Vue project. Because source folder right here. So we have a main So this is basically the same thing that we did in this file will look a little bit different. But just the organization and syntax is a little in a root component, we chain on any packages and then we mount that to the DOM. And you could also rewrite this as const app. And then app dot use router, and then app dot you add more packages. Now, when we are looking come from? Let's take a look. So we have our there's no real content here. All it is, is Now, where did this router link come And if you look at our main j s, when we use some components like router link, as is actually a substitution for using Except router link is made by Vue router, where our JavaScript handles the routing. Of course, we only have one HTML page. And all page. And the router handles intercepting the navigated to another page. While really it's just So we have these two router links. And then is actually our page content. And our router with whatever component we tell it to in our So router Vue is just a temporary placeholder as we navigate to different pages, those home will stay no matter what page we navigate to. But those are the components getting injected into router index.js file here, we can see that we and when we create a router here, we are which is an array of all our routes that we it set this up for us because we chose to of that under the hood. But let's talk about the which is this page. And then we also have the you don't have to worry about code splitting, Those are more advanced routing concepts. And then just import the about component. Just like the home component. Now you basically the components that you want to show on a page tag here. And then you import any of your Vue you define the path where that component now the name is mostly used for routing, and then path. So at the home path, we're going to find the you can see that it is in Vues slash home. So component, it has an image, which is the Vue logo into itself. Now this component is not in the Now why is it in the components directory, instead in front end applications, files are usually anything in this Vues folder will be connected to there'll be their own pages. Anything in the into other components. They're meant to be parts throughout your application. Basically, anything And if it's not connected to the router, then put it in the components folder. there's a Vue image at the top. And And that's exactly what we see in the home route. Now if we go to the about page, it's not importing There's only this h1. So I header with that text, assets, of course, are a place for usually Sometimes you will see other folders created here The only one that we are going And we'll talk about that in a few videos. transferring our content over from our old Let's start moving things over one I'm going to go over to my original code here The first thing that I need Now I do have some JavaScript functionality in But let me just copy paste for right now. going to need it on this homepage here. But since I am actually going to want to replace the this on any page. For right now I'm going to get I need to do here. Because these anchor tags need And now I need an actual route. So I am going to give it a route that will be So I have this products dot html here, what I'm Of course, this can't be an H ref, this will be also need to change this from h ref to two. And the dot html. And here as well change this to I'm not going to worry about this yet. I'm going to just comment that for right now. And that are linked to the routes. Now I already home component, I'm actually going to get rid of I'm going to have to create a new component. Now let me delete about from here. And let me create a new file. Now this is a little bit different. Instead of with the extension j s Vue has a custom file files are parsed by the Vue and web pack setup, dot Vue files, we can put our HTML template, our that gets parsed and all put together and Now I have a new file, I'm just And I have four spaces, I'm going for tab spacing. And I'm just gonna Alright, before we get too And we do have a Products page and home page Let's pause here and start to bring over Let's start to move our styles over. Now our styles are going to live inside of this folder inside of there called styles. If you come to this app component here, you will of the component. And these are what is providing browser, this is what is styling and centering this is what it looks like without In any Vue component, you can add styles So if I wanted to do something I could Blue. And you'll notice this is just plain CSS Now, if I go here, you can see that this is Also on the products tag that is blue Now, if I look at this, though, those h1 elements are actually in other components. But by default, application. So if I put a style tag here, even my application that has an h1 tag can be affected Because if you want to globally change a style, So in some other dot CSS file, here, if I'm generally, what I intend to do is only let it styles in any other component. Right, it will only And that's why I use the scope keyword here. you can see that the text changed back to black. affecting styles within this Vue component, not Now, if I wanted to add an external stylesheet, here. I'll call this main dot CSS. And let me This will not affect my application yet, because importing this into one of my HTML files, what my JavaScript. So generally, that would be this styles. And then that main dot CSS, and the Vue, I can import styles directly into my JavaScript. So now if I go back to my browser, it's that this is purple now. Because I am from this main dot CSS file. Those are the basics if I come back to my original static application if I come to styles here, you can see that these for the most part. So how do I get these into So Vue also has built in ways these styles. And I'm going to delete this So I pasted in this styles folder from my other there is one file called style dot SCSS, which is the files here, all of my other sass files. Now my project to get all of my styles. I'm going to file directly from assets slash styles, slash can see that it is giving me an error saying can't sass files. But since they aren't regular CSS, we those files. And that is like it says SAS loader. to working with CSS under development, we can see as it mentioned, we can select our preprocessor ran that first Vue, create a project name, that automatically. Now, since we did not choose there are ways of adding these packages, which and then installing the sass loader. And also the it is giving me this note about Webpack I have to make sure I have a compatible version grab this npm install command where I can install and installed those packages for me. Now I NPM run serve. Now it is complaining that I don't installed it in my node modules. But that is it is reading through the rest of my file here, and saying, Hey, I can't find that file. So I'm And now we have one more error here. And can't find right now. Let's go ahead and this file. So if I go to splash dot sass, bit different here. You can basically think of it Either way, you can see that the attributes are it's looking for this image. And again, there's a image. So I'm going to create an images folder inside of the IMG folder, and then update they were in my public directory, I have and paste them here. And I should be close this file. And you can see I have the let me do one more thing and get So I can be ready to put my own content And go to source slash Vues and home, I'll that component. I'm just going to put home here Now if I go back to this page, you can see And I can see the Products page in navigates is add a past orders page to the router at this the products route. This will be past Past orders. Now I need to create this I'm going to create it in the Vues folder. a shortcut snippet here. I'll show you To it just created the template tag for me. And I'm And now I have this page working. So all I'll be putting content on these pages, and then Now, let's work on putting I'm in the original application. Now, let me go actually, the main page is still in app dot two container elements here, the div and the main my vcli project. And here, I can come to Alright, now take this, just the indentation, get container. And also my main container. So if I look in the dev tools, it says And I can search for where that is being used. And right now because I don't have any inventory. If I go here, I can see in food dot JSON, this So I'm going to copy this And inside of source, I'm just going to paste my Vue j s. So if I want this right now in my home So let me import my data. So import food from it equal to a data variable. So data and then I food. Okay, let's try this out. And now we can see our recommended Products section at the Because we already set this up. And this is But we've only rewritten this Now let's pull in the other pages really quick. Let's go to products. And if I go to the Products go back over to my code, and then paste that if I look at all of the code here, we never we will have to change later. But this is page real quick. And then we can take a look at let me fold this main section. I'm gonna copy And now let's take a look at these pages. Okay, complaining that this eye tag, which was used closing tag, meaning it's not explicitly self like this TD dag here has a closing TD tag there. templates work. So let me search for I, and seems All I have to do to fix that is things like IMG and I and certain tags don't is make them self closing, since you're never general. So I'm just adding the forward slash at And that fixed my error. And And the past orders page as of previous orders. Now what about the sidebar? In our original application, we had this In this video, we're going to move that So I'm in the original code base here. If a sidebar component, which is a custom Vue this sidebar component that I register, and my application. Now, of course, this is just the same thing in my new application. But reusable components. So I'm actually going I'm going to copy all of that. Let me go to I'm going to delete it because And then I'm going to create sidebar dot Vue. In here, of course, I need the And this is basically all of the cart logic. pass in a dynamic toggle here when the button Now the first thing I need to do is import And it's going to be globally available import it into my app dot Vue file. And I'll I'm going to put sidebar, it has to be convention is to capitalize custom components. highlighted differently than anything that is or that is just standard HTML. I'm going to get And now I can import that component. So I'm going sidebar dot Vue. Now another way of writing in Vue applications. Instead here you'll see a reference to the source folder. So that way files deep my components are, I don't have to dot, dot, etc. I can always reference the source slash components slash sidebar dot Vue. Now any I need to register it and tell my this component. And I can do that by setting a in Vue. And I can set the sidebar component here, component notes here just means that I can use basically this whole object here, it's called functions or data will get set on this object, same as the options object you used in custom in our dot Vue file is just included at And if we look at this main app component here, computed methods, all of this stuff is the options And when we create a vcli application, and one options object per component that we use is that each component only knows about the component. So if I create a function here, I can unless I explicitly pass it into that component to and functions around to different components when we're going to need to do that, again, because Now, if we look, here, we can see there's a function to toggle the sidebar, clicked to open or close it. There is also a cart There are all of our inventory items, So I'm going to copy all of these things and these properties. The first thing is Vf, I need And I'm gonna set this just default as true for a toggle sidebar function. Now, where does component up here, because I'm passing it in, So here's my toggle sidebar function. And I'm just And I'll create that methods object. Now, here's another tricky part because I want I only have it in my home component, which I of basically inventory being undefined. So I'm I'm not importing inventory separately into each And I'm going to just import inventory into my And then my logic here, so inventory food. So inventory is food. Now I need to get it to my home component. But it's not really a I can easily pass elements into sidebar as props, But home is a little bit different because the there. So how do I pass props through the router what we're going to do is pass in inventory So I'm going to pass in the inventory to make it actually look for a variable, and So now I'm passing in inventory. And I need instead of data here, I'm actually going and have a props object, or I'll just do it as an There are few more broken elements that I will I have my inventory and remove item. And Now, if I look in the original version, I And then things can be dynamically added dynamically adding things in a minute. But So let me go to data here and set cart to an empty computed property as well, because we will need And let's check this out in the browser. So it's JSON file. And that's because we are And yeah, the app is running products, okay. However, we don't have the sidebar yet. So So we have toggle sidebar, and also showing I should be able to see the button that we had when I come here, and refresh, nothing shows uncaught type error kept by path of undefined. So I think it's giving us an error in the router link. So let me just change this to a div, we we are just using it as a clickable element. And now it is working. Except I can't click But everything else is working. Let me it says cannot convert undefined or null to of my sidebar component. So it's line 25. I'm trying to loop through a cart object, basically it's saying that cart must be undefined It's not opening. So let me actually And inside of my app dot j s, I except this mounted here, but I don't need import the JSON file. I don't need to fetch it. I didn't copy over any of the methods here So let me go ahead and do that. Just and I do need a script tag at the bottom here. So And then I also want the methods from Now calculate total and get price are defined let's see if this works. Yay. And the toggle is as open. If I refresh it, it just automatically I'll come here and say show sidebar is false. So it's not dynamically adding items to the In this video, we are going to hook up when we add to cart here, it will show up in the you can see that this add to cart, So I'm getting an error when I click this Add to because that is in my homepage component. cart function that I'm calling when I click that Where is that function defined? It is my methods, I can see I have an Add To Cart method into my homepage for my homepage to be able the router, as I did before. And then in my add that on to the props list, add to cart. So I into this home component now through the router Add To Cart. And you can see that the function is The cart says two items. And if I open it, why are there forward slashes here, that in regular JavaScript, this is actually in sign before the variable we needed to escape application. Because it's no longer in a regular So I can get rid of all of these escaping Now if I want to delete this, it deletes I can add a couple items and I get items the cart should still work. Because that across any page. In simple applications. This keep all of our variables in a parent component. we pass functions and variables down to children. cart that will then update the state of the parent we would need something a little bit more robust all of this data throughout our application. where we cover Vue x, which is Vue j s is default we are going to leave the application as it is So we have the homepage, the cart sidebar. Now we this page. So the Products page And it's really on the homepage, we have all of the same kind same thing pretty much in multiple places of all of this UI that makes up these cards into its the application and on any page that we want. Now in components here, I'm going to create a card dot Vue. I'll start with a template. And I can see there's a for loop here that is So I'm going to grab this whole card here Now this is just an individual card. So I don't logic. And this will just be one card. Now card to display correctly. So I'm going to have to create a script tag. I'll create props here, just So I accept the product props into my component. remove all of this logic from here. And the only So I need to import product card from, I'm going and slash product card dot Vue. And now I need And now in my code up here, I'll clean up the lines a little bit here. And I need to make this self closing. Because be self closing or having a closing tag. I'm going to see in my product, And I am indeed passing in the the index as a prop as well. Let me change And I will get index here. And Of course index is a variable, not a string, so Let's see if this works. And we are getting is now a prop. And of course we cannot So we can actually fix this by not we're actually going to create a local each component each time we use the product card And we can do that by adding a data it return returns an object. And now we can one input box. So we'll just map it internally Not sure why it only has two cards right now. And I can look in my Vue, j. s, Dev Tools. I can't read property name of undefined. So to pass in the correct props here. So let me product. And then while I'm here, let me Add To Cart. There we go. And now let's check it so now we have all of the cards loading. And all of my product card components. So let me and I can see the quantity is two. If I change it correctly. Now I need to get this quantity, the component, where I am actually performing So what I'm going to do, for right parameter, and I will pass in quantity. our Add To Cart function in the app component. if they're not already there. And then we are now that we have that third parameter being passed is changed this line to B plus equals quantity, course, we don't need this line, because we Rather, we have the quantity variable right here. index anymore. So we can remove that from this basically, so that we can add it to the cart. the number still maps to the it is not in my cart. Let's Add to cart is not a function. Let I have add to cart that I am getting from the passing that in to the product card. And I should inside of the product card. So now and go into my Vue dev tools. And now I can see 10 artichokes, and I have two radishes, and I have 12 items in the cart. Now my as you can see, but it is properly adding and cart. But I don't just want this functionality on So let me import those components So if I come to my product stock Vue file, I Because if you remember in my app dot Vue into anything displayed by the router Vue, past orders or products. They're all connected Products page to start with. First, let me fold So let me do a script tag, props. And I'm One more thing I need to do is import this product and just copy this import or into the Products page. And now I Product card. And this should be components not which this should be a capital P. And now if I let me take a look at what this error is here. but not us. So let's fix that. So I For the different items that show up on all of these right now. And instead, I'm going I can take a look at my product card that And I'm just going to copy that and paste it let me just do the first six elements instead. Now as well as the add to cart function, of course variable, there's really no other state that So this should pretty much work out of the box it does indeed loop through and display all me add a couple of these items to the cart here. If I add few artichokes, let's add some cherries, we have 17 items in the cart now. And we Now if I go to the homepage, I can still see 17 page application. All of our routing is handled sharing state between components. So all of the which is the parent component of all the And that's why all of the items in the cart all it stays no matter what page we navigate to. card is on multiple pages, you can see how have code and the same template to loop through and And that's basically how reusable components And you learned a lot about Vue js, learning it We started off working in a basic index dot site of grading it a little bit with some Vue and creating a fully dynamic single page reach out to me if you have any feedback, You can find me on Twitter and pretty much Faraday Academy. Have a great day and