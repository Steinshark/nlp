Jack Harrington is an excellent teacher. And he's micro front ends. I'm Jack Harrington, I was a Labs. And I'm here to talk to you about what micro why do you want to do that? Well, lots of fortune microfinance. And there's a good reason for that. girlfriend's all the way from tip to tail. But as is linked to in the description, they'll know that So I'm going to do a good action movie trope and backtracking and laying the foundation. So let and then I'll talk to you about what comes next. confused, it'll all be clear by the end. So let's VS code, and I'm going to bring up the terminal And we're going to go build two apps. So in And then create MF app. So P MPX is like And create MF app is for create model Federation of my host, I'm going to call this one home my chooses an application on port 3000. I'm Now this other terminal to do exactly the same And in this case, I'm going to call the detail page, an application and this one's going port. Again, it's gonna be react JavaScript and directory and do exactly the same thing. I'm gonna Okay, my homepage is running, let's go me that I now have an app, it's called home, and it's tailwind for the CSS. And there's exactly So let's say that we are the homepage team. And we are going to take on the task to create a file here called header dot And I'm going to export a And it's going to return some HTML on there. And on it, let's see has got some padding, it's got and large, and it's in bold font. And I'm Because our app is going to be selling fidget and create a new file called footer dot JSX. And we're gonna put into here, only the we only sell the best spinners. And we'll say that And let's bring these components in just as you we're gonna bring in from that header file. And And I'm just going to drop these down I'm just going to say that we have the homepage or you get a little margin vertically. And wrap that div up mostly good luck. Yeah, margin there. And wow, beautiful page. we're going to start implementing, but we really use your header. So can we do that quickly? Well, on this homepage and the footer into micro front really simply. So let's give that a try. So I'm So this is the web pack configuration. I'm gonna And I'm going to say that this exposes the header in the footer, so and this is a object where you give it the key of the module or the file in this case that you and then we're doing the footer, that's a same between those two. Don't confuse anybody. is just restart home. So now I'm on the home I'm gonna say yarn start again, because we need we run it, we can see that it works just fine. And that is a remote entry file. So in localhost that is a manifest of all of the modules that are to copy that link. And then I'm going to go over and scroll down here. And I'm going to say that URL is well home at and then I Now, why home? Well, that's the same home as right here. And the only requirements on this name. So you can't use things like dashes can't that's fine, because it's a valid JavaScript And now this is going to allow us to access But of course, we have to restart the And then we'll restart the server just to And now if I go over here to our and copy out this because I'm kind of lazy I'm going to go over here to our PDP and go to it came out of this the same template and paste and I'm gonna hit save and well that work, huh, the header and the footer, obviously. Okay, so home here, and I save, and I go back in here, and we have our header and our footer, the the homepage. Awesome. And even better, check fidget spinner world to And I do refresh here. Awesome, I get that as restart, or refresh or code change or anything I get the updated content. So that's a runtime so let's have a look at our completed application of course, all of the code is available to you on so important and why companies are really invested you can see that this is the completed homepage. and it's got our all of our fidget spinners and it's got a way to log in. There's a product our spinners. And there's a cart page that shows the reason that big companies are interested in are interested in micro services when it comes monolithic API servers. And that meant that a that had a single deploy cycle. And the micro So now, every team could manage his own server bring that same methodology to the front end, homepage PDP and cart are managed by separate independently. And then if they Venn down any those are automatically updated when they deploy. manages this little cart drop down over here. that cart gets updated, updated along with that cart and so it's done dynamically. So not but they can actually manage smaller pieces of decide what is a microfi? And what is not? Well, methodology. So the atomic design methodology, you eyes are structured. So you start with atoms, or a label, or something very small like an slightly larger components that use a bunch which may use a label as a text, and then an input those usually just stateless Li, and then there's something like this cart drop down over here. So own state and understands how to bring together done. So in this case, that would be these text And it's this unit of UI, the organism that a microphone. And I don't think that you should my personal opinion. But that's where I kind and pages. Those don't really categorize for me share. In fact, when we talk about my girlfriend's we'll be talking about the underlying technology Federation actually allows you to share a lot more start off by sharing some functions, and then sharing full page contents, and routings. It's to the world of micro front ends and why they're module Federation, and what it is and why it's So model Federation is a feature that's built into part of the standard Webpack five deployment now. can use module Federation, and he saw from that use Wow, 10 different view templates right now. they can also use model Federation. So model popular view framework, it's great stuff. So from other methodologies of sharing. And to gonna get us into the kind of architectural So we're gonna do file here, and it's gonna be extension draw.io extension, allows me to kind of right inside my VS code. Let me just drop in the homepage app that currently is at one Dotto home app, we had the header and the footer. Now, I'm going to create a new page, I'm going to call bring in a box for the NPM library, right. So this kind of sits somewhere between these two. And then and we're going to put it into our NPM library. front. So it all makes sense. Looking good. Okay, footer into our NPM library. Now we got to reuse the homepage app and the NPM library. And I'm so drop that in there. Those are looking good. I arrows nicely lining up. Okay, cool. So on the homepage app. And as part of the homepage the footer in this shared NPM library. And so I change this text or whatever. Now I've got to go is the homepage app working on features in that which may have not been worked on in a long time And I've got to go and do that change. to 1.0 point one and publish that out to our I'm then going to bump that to 1.0 point one which to production kind of a hassle, same sort of thing the PDP team and say, Hey, there's a new version, and bump it. And there you go. But now from the and I click into a product, I'm actually now going page app, which may actually not be great at all, company, they're going to be making changes all a change the header, they're going to want to see So how are we going to solve that requirement? can do and talk about some solutions that I've is to use something along the lines of an asset And again, we'll start off with our kind of bring these down a little bit and And so now we're going to bring And the idea of the header, the footer that footer. And we'll bring those to the front make some more space here. All right over here, And what this one's gonna do this header footer it's probably going to build a static version and then those are basically going to be injected from the equation here, right? This is just and then some helper JavaScript and And that is then put up on s3. So we'll draw an is going to create that s3 artifact. In order we're going to go make a shim library and drop that content from s3. And its job is to return to or some references that are grabs from s3, the templates to drop the header onto the page. So And then the advantage with this one is that this at any time that shim library is designed to make copy. And that gives you your dynamic behavior. So requests come in from product to update the header deploy to s3. And all of those changes will show as long as they're not caching those results. You lot of custom work. There's a lot of custom CICD. that are company specific. And of course, and start making changes on the Header Footer entirely written in a different view framework. switching, see, and having a team is dedicated really just a large company object. Okay. party. So module Federation, let's go And we'll start again with our homepage and PDP and we have got the header in the footer, and directly to the header and the footer, just whenever the homepage application pushes. So it the new code, you're not changing development are still written in React. And as long then they work right away. So there's no issue packaging or whatever. And also, the work is app developer, I just work on the header directly. there is some risk there and we'll talk about that context shift cost when it comes to development. module Federation is the most attractive when let's put away our architecture some of the questions that I get most often when is around asynchronous stuff. So how do I asynchronously? So let's do that. Let me just show from react. And here, I'm gonna say const. And I'm going to give it a function that's dynamic import. This is absolutely standards works in React, but it also works on any other the special Saucier, isn't this react lazy. And And we're going to get a fallback we should put in a div, which says, for example, now let's restart our servers. So we're gonna go and then go to the PDP page and start that, as we go through this, by the way, keep a keen that actually has the names of the directory running applications by the end of this. So we're Alright, so here is our PDP page. And as we can So that is a synchronously loaded, but if let's go and make that stateful. So And then do use state. And we're going to for showing the header. And we'll use state if we are true. And then I'm gonna go I'm gonna make it large. And give it Okay, cool. Alright, so the first thing we we don't want to show the header by default. And to true. So unclick, Set Show header to just true, so we haven't shown the header so far. So let's at our network and see what we got going on. So if I scroll down here, we have loaded the footer. click on show the header over here, we get the the size on that it came in at 1.1 kilobytes. So Federation. So if I look back over here, at the key down here that I haven't talked at all about, libraries that are shared out of this homepage. dependencies by just looking at the package So it's gonna share them all out. And then it's react DOM. But it's going to override those to say that there can only be one react on the page at react because react does have some data that's in nature. And so if you have multiple instances out a little bit and breaks. So you don't want for you, which is really awesome. And that's All it's doing is just bringing in just the were any other dependencies that header needed, in as well but only in the case where you Okay, so now I'm not going to do this this and we'll just go back to plain old header And we'll talk about the next question that I what happens when the app goes down? And is because this is the way that I demonstrate not the way that you deploy model Federation. So And we'll go over here to PDP and we'll see Yeah, blows up. Let's see. script loading error, So true. If my demo app goes down, right, that's the sharing system goes down. That's true. going to Deploy Module Federation. And that's why related issue that we'll get into in a second. is you build and deploy it to a static asset aka my our CDN, the style caching and all that And let's create a local directory called Dist. So And it's got a bunch of J. S unique to this, you don't some of these MPX, and a module called server to a static asset store, right? server serve these static files. So it's just like s3 in And I'm going to do refresh and you're good to don't go down, then you're not going to have an So that's not the risk that you should be worried is that a developer on the homepage team may work in home, but not actually tell the PDP that is the risk that you've got to worry about. can blow up. So first, I need to get out and then go back and do yarn start. And So now we'll go into header. And I'm going to to put the app name into the header. So this is gonna refer refresh the homepage and boom, we cannot read name because the app is we didn't put a property called App on there. So then say, Okay, well, I need to fix that. Right. close, PR reviewed, done. redeployed. Wave is but over on the PDP team, we're just swimming blowing up, right. So why is that? Well, we didn't yes, of course, I can make the change on the PDP do we actually protect ourselves from that, so the trick there is to use error boundaries, you're doing. But in React World, we're gonna use called Safe component. And we're gonna bring in to be a class. So we are going to extend save boundaries are actually the one case I know of Now we're gonna have a constructor, and it's value on this. And it's basically going And then we're going to add the two methods The first is component did catch which gets given the error, we return that our new state here. We can specify what the type of error is. We Splunk or whatever. You can do all that stuff. I'm and render out something safe. So let's go make we've had an error, then we're gonna do something the children. Okay, so now let's go back over from that save component file, and then we're And go over to here and we refresh. And yes, runs. But it doesn't render the header. Now there in a video on my channel, where you can use both when something blows up, you actually fall back a great strategy to hear really depends on how let's go back over into our homepage and actually to remove the app here. And then go and remove takedown or two, and you go, everything looks world of micro front ends, we've gone and we've talked about why micro front ends are asynchronous loading, and how to handle error application and learn more about model Federation go and build our API server that's going to have yes, I'm going to go and create a monolithic six tabs running. But yes, in the real world, you you know, you'd have a product server, and you'd stuff. But in this case, we're just going to have our terminal and create yet another terminal. And again, I'm going to do pm px. Now, why pm I'm on Mac. But it turns out that P MPX And if you're on Windows, you know, like, But I'm doing this for my, my friends and And in this case, I'm going to make it server. down here to API server, I'm going to put it when it comes to API servers, and what we're going one is going to use nest J S as our API server, to use j DVT, or jaunt based authorization. And to go into server. And I'm going to yarn it get in the server, we've got a public directory that And you're gonna be able to find those on So this is going to have a fidget one dot jpg, friend of mines all in a fidget spinner. fun demo data piece. And we'll delete We can bring up localhost 8080. And then go to that we are getting this set of static assets. do is ensure that we can get the list of products. going to touch that that is the JDT Mandrin. We're there's two users that are kind of baked into Maria, who has a password of 123. You obviously, this is just demo stuff. You can hook So in modules, we've got two modules. We've a look at our unauthorized controller. And what that's camping on unauthorized and if I get it true value. So I'm going to do localhost 8080 true, fabulous. Okay, so what we want to do is unauthorized, it's products. So first we're to products. And I'm gonna make that all kinds of stuff. So I'm gonna go over here I'm gonna change this directory name to products, And finally, I'm going to go into app Do the lower casing. Alright, let's Dev, I think. Yeah. So this is gonna I didn't start in that the first time. Products. Okay, cool. returning true. That's set up properly, I've got the products, to get products without actually being logged in. in to add items to our cart, we're not gonna allow But beyond the scope of this. So the next So that root level over here under source, I'm going to paste in our product definitions. Again, let's talk about a little bit about what a product a description and image, which is the URL to the way, I had some fun with GPT, three to build insane stuff in there, you can blame GPT three our products module, and controller, and then over As well as the definition of a product. it's going to be from products. Cool. And which is going to be from products. So let's I love it. Next, Jas is actually really I strongly recommend checking out nest Yes, of here to Visual Studio code and then add another particular ID. So in SGS world, you give it this case, it's cold ID basically gonna map that we're then going to go in through that product ID. And we're going to So let's go back over here and do instead of and that just pairs down to the one product and gears at $9.99. Awesome. Excellent. So that's this point. Let's jump back over into the client that window, close on server, go over to home. called products, dot j s, and we're gonna specify And then we're just going to use Fetch to go and off of add slash products. And then it's just a So that's going to give us back our let's go and add another one for getting a and that's going to be used by the PP page. So they just have a particular product in mind, they're gonna go and give us the ID and then we're by calling that by ID endpoint that we created. I'm also gonna bring in a currency converter, the US US Dollars currency so that when we format Alright, so let's go over to our app page. And I'm going to create a homepage content component, area, and there's good reason for that. It's So I'm going to do a new file here and say home usual react and use state and use effect. And then if you're wondering how I'm getting that and then I'm going to start our home our product list and use date. And then to Use effect takes a function, which is and then takes a dependency array. So in because we want to have this run only once. I get that value back, because then it's Alright, so let's start off on our JSX. So it's got some white padding on it. And it's like So that's my grid calls for with a little gap in And then with each of the products, I'm going product ID. And then let's try it out. and we're going to bring in our home content from that home content file. And then I'm And I don't need that extra wide padding. They've refresh. Hey, cool. Let's making the connection fidget spinners. I really should be getting into multiple days with this example. And I'm like, Oh, Alright, let's continue on. So let's go back over that we want to Flexbox and that Let's take a look. Nice, And let's go add the price in there and make going to use our currency formatter to So let's take a look. Pretty nice. Okay, cool. just add a description, so the customer knows Yeah, looks pretty good. Text is Alright, so our teams are in the mode of sharing. by ID function to get the product by ID. And Federation is that not only can you use it to any type of JavaScript could be constants, it it can be components, it can be whatever we're also going to share out our from our Home app. So let's go back over here to and all we need to do is just add in products, Alright, let's say that out, and again, I have has changed. And now over on the PDP side, going to go and close out these files. And And I'm going to create a new file, and dot JSX. And into that, I'm going to also bring do pretty much exactly the same thing. We're one. And let's go over here to our from that PDP content file, and let's go Let's take a look. There we go product one, as code to get that product. We'll go back over here by ID and also our currency for matter from home we're just going to use products like we did it's going to blow up right now. So let's know Alright, so let's change this to ID and then I'm that this is going to be the the product the moment So we're just gonna say if we don't And so right now it's going to turn And so now we need to bring in a use effect. we're gonna say, okay, so if we have an ID, then we're going to go and get that product by set that product. So in fact, let's simplify this Alright, take a look. That looks like you're data. In fact, I probably just do at this good to go. So let's start laying out our nifty And we'll have a two column layout, And then we'll have our product image in the you go. Looking pretty good, so far, cool. So and we're going to bring in a div, this got a name that's expandable unless the flex grow the end of whatever that is, we're gonna have That looks good 599 Are you out of your Pretty good. And then let's bring in the long here we go. I just you know, I'm not a good functional, actually looks really good. It's just from like a wheel. fidget spinner that spins which is crazy. Okay, so next thing we want one like that. Now, the Webpack configs are With History API fallback to true which basically sort of static asset is going to just render So that's why you can basically give this any going to go and give you the same page over and something like React Router DOM to actually select want to be able to save, you know, 10, for example which is we have now. So let's go and stop our Router DOM. And I'm going to do a yarn start go and bring in our React Router DOM stuff, let's We're no longer suspenseful. And we're And I'm not gonna do the Save component not planning on blowing anything up. And now So this is where we're going to change out use a switch for that. And then inside of that the path is going to be something along the lines component that is going to be rendered if we have save there, and see if this works. Let's go I'm And yeah, it works fine. But if we go to like, this path pattern here. So you're not going 10. And that works fine, because that matches get that ID, let's go back over here to our PDP from React Router, Dom. Alright. And that's in their ID and then use use params. That because is gonna return you an object which we want to Save that out. Oh, that is pretty. That may We've got our product detail page we're showing but now we want to be able to sell the customers app after all, so we want to do some commerce. So and have a way to add and remove and view E commerce stuff. And using this example? Well, state between the host and the remote. So let's So when it comes to our header, for example, page is the host. So the PDP page is hosting the essentially, from the homepage, so I want relationship. And in this case, we want to talk host page and the remote that's coming in. So get a job back the JBT or JSON web token, not sure But that's going to be our authentication. And page, which is going to want to know if it should and the cart MFP, which is going to show you your have a jaunt. And the homepage is going to want to going to be able to share the cart items between to explore using this shared state. Okay, so let's cart. And that means going back to our server, have modules, and we got this authorized module. we can see some documentation on how to use I'm going to create yet another terminal. And example is to do curl, and hit up this localhost to have some authentication details to hit that 401 message on authorized. So what I can do is I and I'm going to get back a jot. So I'm gonna copy and paste that in there. And that gives us back work? Well, this J S has a whole section in its pretty much just follow that. And it'll give you users, of course, you can go get them anywhere, and 123. And that's what we're passing in here Alright, so then let's go back into our readme I can scroll down. And I'm going to copy this we did before with authorized but now we're going going to say authorization, and it's going to give And I'm going to copy the job that we got quote and paste that in there and paste in get back that we're our user ID is two. And so take a look at our authorized route here. So we'll get we use a guard. And that's basically saying, and that particular off guard. And that's going to jaunt. And from that job, we're going to get right? Okay, so the first thing we need to do is do with authorized so we're gonna need to change here cart, their cart here and everywhere. directory and we'll change the file names Okay, looks pretty good. Couple more carts in here. Seems to be Okay, at That's the last place that actually see I'm lowercase that cart and hit Save. And let's see and doing exactly the same thing as before, cart If I've made all the changes correctly, on the cart route. That's great. So we changed to kind of upgrade this cart controller with returning a user ID is is not what we want, right, we need to actually maintain a cart. So I'm going as well as the interface for a cart. So a cart is array of CART items. And those cart items are be an exact replica of the product data. But with spinners Do you want. And so the cart is basically to render out the contents of the cart, it's gonna that you want. And then I'm going to bring in a And this is going to take a references into the products that we want to kind we're going to give Maria some stuff in her cart just so this a little bit easier to test. our cart controller as a private member And Sally has ID number one, and she's going to and and, and Marie is going to have items one do is return what's in a cart. So we're going to whatever's in the cart of that particular user to map to there. And reason number two is going to we're going to return a cart, or in turn a And there you go. Cool. Okay, so now I've tried which has a long expiration, it's got a 24 go anywhere, and it's returning to us the contents we're doing great. So now the next thing we to the endpoint and add an item to the an item from the cart results go back in here. And we need to bring in post from our next js. the same time that you're learning about all this learn here about Jonathan occation, and all the same idea. So you just post to that same endpoint, I'm going to get that request that's coming our body contains an ID, and that's the ID And then it's going to return the new cart, the And we use the same thing we did here with this to see if you already have an item in your cart, If you have that item. Otherwise, we're So we have a cart item, we're just Otherwise, we are going to add on to and then a quantity one. Right, cool. And Easy peasy lemon squeezy. And the removal of the cart. And for this, I have on that, you know, is that the right thing up to you. But I'm going to just use delete for Because we need one to know these already. And their own and secure. And all we're going to do is we're going to look to get the user ID, and we're it just like that. Okay, we're pretty good. So So now the next thing we need to do is actually this to. So I'm gonna go back over into our terminal even playing around with to do another And I'm going to call this one a React app. So I'm gonna call this one cart. It's And it's my react JavaScript and tailwind. using create react app or next year. As for this one of those? Well create react app, and next have a really complex Webpack configuration, and es of it. And that's great. It's a great starting that distracts from what I want to do with create concept and test applications. So you can test out work in your environment without actually going yourself. So each one of the apps that it creates of, it's basically just Webpack, and X Webpack, Webpack. And all of the different, there's 10 know, it's very, very simple and lightweight, and so it looks like we've installed properly. So is I'm gonna add RX js, what is RJs? And why objects and functions, it's a very elaborate in our case, we're just gonna use it really which is a type of observable, that's going and another one that's going to hold our cart. And current value, and you can subscribe to it so that nice thing about RX js is it's not bound to any view framework here pretty soon coming up. And then that would be a problem. Whereas subscribe method on an object is going to be to the cart. And that means it could be anything Inferno, it could be all kinds so looks like we're good. We've added our Okay, great. So just like we had before, very and makes it easy to put some nice styling to our cart into a source and migrate a new this is going to manage in much the same way that portion of the server, this is going to manage our the server. So we're going to bring in RX J. S, servers can point to the API server, and for the data t. So that's going to have, if I do current value of that jot is, which in this case, and I put in their token or something like that, it's going to get called every time that a new goes in there is you say Do do T dot next, and you simple API service here, you do next, to give it subscribe to listen to changes, and then you can very, very simple way of sharing state now, on my coverage of Redux and a whole bunch of different model Federation. But I want to keep it really the first thing we need to do? Well, we need to And our login is going to take a username a little bit more elaborate this time, because headers, and it's going to need to send along the to get back the response, we're gonna assume that on this, but of course, you wouldn't need to. And when I get back the access token from the payload access token is the key that we get back from the start building out our UI. We're going to actually this out. And I'm going to go over to our web and the footer. And for this one, I'm just So I'm going to have a route for home, I'm going route for myself. So I can be self referential it's just going to loop back onto myself. So the next thing we need to do is dot JSX. And into that, I'm going to create to what we had before. So it's going to have And we're going to do that login. But before you works. So I'm gonna bring in the header and the And then I'm just going to place our body content all the other apps, which is the wrapper, and content. Alright, so let's take a look at what it that's because we can't resolve home header. So going to be that we need to restart our web restart web pack. And that's why I can't resolve And I'll refresh. And we're good. because we haven't actually tried to login yet. go and bring in the login and the JDI T from cart. try to log in. But I'm also going to subscribe to that value. And it's going to set that token nothing. And the cool thing here about subscribe is that? And it just so happens, the use effect and it just happily maps to the unsubscribe that so let's try it out and see what we get. Hey, doing the login. Let's go and actually test that And we can look at our fetch, and we can see that payload. And we are getting back the response of we're seeing it over in the code over there. So is we're going to build out the UI that's going go there yet, we're gonna go and build those share those out with the header, the homepage team to consume those and put those in the header. complete system. So to make it nice, I'm going to remix icons, that's what I'm going to use for to all of them. So I'm going to stop this guy, I'm gonna grab that. And then I'm going to go there, I'm going to go to a PDP, I'm going to do it on this side is that CSS is not something you either CSS and JS or J S. So that's not the So. This is, so I need to add that dependency to all of these applications. So next Alright, look, I'm pretty good. We That's good enough for now. And the that you have the icons in every place, in all of our applications and add the CSS for And again, okay, cool. Now we have nice So let's start building out our login UI. And share a custom hook around us logged in so we can dot j s, and I'm going to bring in React. And user logged in, and it's going And then it's going to set up a So first is going to set the value of login And this little nice double exclamation point, I'll do the exact same thing I did with a so let's go back over to our cart content. And because we don't want it to automatically is our login screen. So when I remove that, a new file, we're gonna call this login state and that login and the US login from our And we're gonna start off by getting the around whether we want to show or hide this the need some state manager username and got username and set username, password, and set I'm going to say if we're not logged don't show anything. But if we are logged in, to start off with a little fingerprint icon, your login. And that's going to be a span that has tag to make become an icon as we always do. And do some test automation, at the end of this show if we click on that, we're going to get on the set we're gonna have like a drop down. And so the And it's, this is gonna be basically eventually we'll move it into the right spot. But the screen some comment this out currently. And gonna pop that in there, that input is going to it's gonna have a value of username, and then absolutely regular react type stuff, tailwind on it to make it look pretty. We do we're gonna give it a type a password, the make it nice and pretty tailwind style. And that's going to be our login button, and also an that's just going to call login with the username cart. So let's take a look and give this a try. into our cart content. And login. And let's put it in there. So for them and drop that login in Cool. Let's take a look. Oh, okay. Okay. All then return null. Here we go. Okay, cool. So because I should remove that use effect from I'm going to go and rebuild that use effect But I'm not going to auto login. So now let's We got the govt and that's great. is build out that little mini cart. So when logged in. And I want to show a little cart icon and brings up a little pop up that gives you some check out and clear the cart and all that kind of stuff to our cart, we need to manage the cart much to go and create a new behavior subject for the to get the cart and add an item to a cart getting that cart. So we have a function super straight get from the cart, just the way but this time we're adding in that bearer, so that's going to first offset the value of the card subject like we had with Jaat and then it's going you want to get it that way, that's fine too. Of course, now we want to go and enable this we want to automatically go and get your cart and we want to make some money. So let's figure that just takes an ID. And in this case, xoma is in this case, because that was the route that then into that we give it the ID, but it also That gives it its shot. And that gives your your is just a response, we get the JSON out of it, and a new cart, you know, we could take the value it's fine, we can just make two requests. And one more time for clear cart. So again, same delete method, as opposed to the POST method. And So now we got a basic set of functions that on it by creating something called the mini cart. So we'll bring in our usual react use effect, going to bring in our cart stuff. So in this case, as well as the clear cart function they're going cart button or really check out to yeah, whatever. going to format currency, but we're going to get Federation stuff to pull in currency dynamically our minicard. So, we'll start off by having our And we'll have a flag for showing and hiding icon there and you click on the icon, see, goodbye, cart. And so we need to subscribe to here. Of course, you could go and wrap that in just gonna do the same thing as we have before. So subscribe. This little nice optional chaining here then don't dereference that to cart items. So in the beginning, really nice. Of course, nothing. So let's start returning out our JSX. And gonna have that icon and then we're going to have And we'll have that unclick, they're just it's going to have an ID on it. Because again, to have a shopping cart icon as opposed to the length of items in the cart. So that's just gonna You know, this actually sounds like a good spot cart content. So I'm going to go and import mini to go and use that down here mini cart. And let's it's not persisted like that. So I Sally has three items in the cart. Awesome. And if two items in the cart, though. Thank you Chrome. is doing well. And we got the cart count going. So us to show and hide the detail of what's actually Again, here, we're gonna have a kind of pop And we're gonna have a four column the image, the name and the price, that's gonna be through all those. So use a map for that. So for yet another fragment. And the reason for that at the same level, all with each other. So that's the ID. So that's why it's react fragment and quantity, the image, the name and the currency. Alright, again, we'll log in Sally so Sally has a dragon wheel spinner wheel spinner. course he wants to know what the grand total is, some more we're gonna go and add Three placeholder to get the grand total, we're going to give it current reduce value, which is gonna start quantity times the price. So let's try that Yeah, looking good, okay, which apparently she cool. So now we need a clear button and a checkout And then within that, our first side of the in there, we're gonna have our clear cart. So and automate that. And this is gonna it's gonna I think we're just going to put a border on that nice. I like that. And we can actually clear the we can see Sally has nothing in the cart. That's the state of the cart properly. Awesome. If we reboot that server because it's all in memory. we need to put our checkout button which is if you want to make a full ecommerce system out whatever. Okay. So it save there. And then let's You know, obviously, don't have the cart there, think we're okay. Alright, so now the next thing header, so that we get a coherent experience for on every single page. So really cool. So the next pack config. So let me close out a few of these That's part of the cart, right. And so now the to expose the cart functions that it had before And these two, expose the UI components that are kind of both functions and microfi components And I'm going to copy these because I need really other. So go over to home and change the Webpack It can look at PDP and it can look at cart. And as well just replace it all in one, one fell home. And I'm going to reboot PDP I made changes the only hassle about all this is really the fact But otherwise, it's a really nice workflow. Okay, to bring in those microfiche from the cart, and cart and login from cart. And let's make sure as long as things don't blow up, you're generally in a Flexbox. So I'm gonna wrap the content here is going to be our our home title or title of our which is going to have our I don't think it matters, the ordering. So let's try it out. Hey, okay, cool. And now And it's so awesome. I love it. Okay, great. So make it look pretty. So I'm going to go back over cart. And there was a little bit of justification Login. Yeah, that looks good. Bring in the things look nice. So here we go. So ups. I think Let's go and go back over to our Oh, look at that. So nice. Okay, awesome. So now of course. So we're going to use that add to cart us some a way to add items to the cart. And that if we want to show those add cart ones because we add items to the cart. So let's go over back into in some stuff from the cart, we're gonna bring And I'll use us login. And we're going to use our Add to Cart buttons. Okay, so down here below logged in. And if we are, then we are going to on the top, a nice little button, we're going can automate it later, where you can add to the not logged in. So let's login. And oh my gosh, yes. All right, here we go. And look at that. we're sharing the John state. So the host page is looking at the job and seeing whether it's then when it needs add item to the cart then calls the server, and then updates again, that RSDs, this out, this is even cooler, I can go over here So the whole thing is reactive, because you have manager you choose, I strongly recommend that you you know, all of them are really at some level, these are all very reactive mechanisms. Of I would recommend using Redux toolkit if you're important part, because context also works. I'm in these systems. Okay, so of course, our car page complete cart page. So let's go back over into so starting from the top here, I don't need any clear cart from the car, we're basically going to I mean, create some state around the items to that value. And of course, I'm going to use sure that we have card items. And if we don't, to safely render an array map. All right, then And into that, I'm going to use the top of the and it's gonna be a four column grid layout. I'm And then I'm gonna go over to my mini cart. this centrally, exactly the same thing. And drop So we haven't logged in, let's go log in. And I added that rainbow flames before Okay, so looks like we need a little Yeah, okay, good. And then we need to add the So let's go back over here and make sure that if gonna start off again, with a Flexbox to allow on the other side. And then you know, I'm just that's basically exactly the same code. So let's That's the balance. Yep. Okay, cool. And pop that Cool. Awesome. All right, and I can clear current. a look at product. I'm gonna go over here you know, to sure whatever, solid rainbow I like want to do is I want to show you how to do micro I'm going to do that is I'm going to create an because one mule, the add to cart from the product the folks on the Add to Cart button team who I love by the way, so it's a cool choice to do the is can we get these two view frameworks react and fact that I'm talking to you right now is, the is going to give us our fifth application the last terminal. And here, cart. And I'm going I'm going to call it add to cart. And I'm And we're gonna pick solid JS in this time. if you don't know, solid J S, it's Very easy. If you're familiar with React, I think there's a lot of cool reasons to look into into on your own. Okay, so here we go. So we're it's kind of similar layout, as we had with the is that the framework in this case is solid way every single create MF app runs exactly the so that it's pretty easy to compare these this Add to Cart needs to be able to get access So we're going to go down here to the remotes, And I'm going to restart that server. And into called Add to Cart dot JSX. And you define a React. So in this case, it's just a function, Now, there are no classes in this case, that's has to be a function. So in solid J S, there's although it can be global, it can be And then there's a an effect, same kind of have a declarative style when it comes to hiding show is called shows, we're gonna bring in those and the cart, we're gonna bring in the then we're going to create a signal for login. you could imagine that to be used eight, a really cool thing about solid is that it's question of where you want to store your state. when it comes to state managers, solid jazz, most of solid, so you don't need a custom state effect. And that's going to do that same jaunt telling us that we're logged in, then we set that return a show hide tag, essentially, that has kind of tailwind stuff as we had on before. In add to cart. So there you go, that is our the Okay, so let's go over here to app dot JSX. the way that you render something in solid J and then you render the component. So in this So if we wanted to bring in our component that we not bringing in a header, so we're not going to be I'm not going to do that. But what we need to do a React context. So I'm going to do that I'm going function is going to take two arguments. The first And then the second is the product ID, which and paste this and I'm going to create a And we're not gonna bring in index dot but we are going to export a default it's gonna take an element, it's gonna take And what it's going to render Cool, right? Okay, so let's go back over to our web pack config And you And also, of course, place Add to Cart, That's J S. Let's see is that JS Dojo dojo? Yep, to cart, and restart it because we need to And I'll see that it's got And it does is going to tell us that we've Add to Cart. So let's go back over to our PDP and go to PDP down to Webpack. Config. And it's called Add to Cart. on 3003. Cool. So now let's go back over to our and bring in place Add to Cart from Add to Cart. And let's go make sure that I get the name right, we'll just refresh to make sure everything's fine. Because we haven't restarted the server. And we'll refresh. And looks good. So fingers things being good. So we're going to do is going So we need to create a ref by using use ref. And ref is add to card. And let's make sure that doesn't have any problems with that. So let's on Add to Cart, meaning that that component is going to do place add to cart with that current Okay, looks like we have an error. So let's go in Go over here to console scroll up. And it looks forgot to import Add to Cart, my solid jazz. add to cart go into add place Add to Cart. Yep, can't really use something until you've imported we haven't logged in. So we're probably okay so awesome is that. So now we've got a React app what we decided to use for that particular one. take a look and see over our network. Take So wow, we're bringing a lot but see place that's pretty nice. We're bringing in not a one of the really nice things about solid Jas Alright, so coming up next, we are going to take and module Federation. But before we do that, Control being all that I strongly recommend at it's gonna get real here real fast. So we're gonna I want to talk about right now. So we've got on 3002 and one on 3001. So let's go put those 3002 Right. So let's say I want to go and test out right? So I'm logged in here, and I'm adding and then I see that I'm not actually logged in and I'm getting a whole new page Refresh So is there a way we can actually turn these apps And this is a big deal, because what happens applications into a set of smaller applications, But first, you run into the Header you have to be able to share components, between applications. But also, they become harder where you start at the homepage, you add something eventually, you'll end up on the cart page get that done. You have to stage your whole system as an example. But keep all of the code for and hard to manage. Whereas if you had all of where any of these applications could vend then, for example, if you're working on a cart, you want to run a smoke test that ran through the Yes, it is. So let's go check it out. And pretty significant changes here, although we each one of these applications, so cart, home and as content. So there's cart content, there's And it might have seemed a little bit weird in over here, in Webpack, config, we're going to go going to put in here cart content. And then I'm Say that out, and we will go and And that seems to be okay. So that's good. So let's see what is next home. I'm gonna go to web pack config there, and So I'll just replace our cart with home just like I'll stop it and start it. Now that looks good, go to its web pack config. And again, we're And we'll go down to PDP and restart that one. And that looks good. So here's an undo Since it has React Router baked into it already, I'm gonna copy all of it actually. And I'm gonna file in here called main layout, that JSX paste layout. And we'll get rid of that react But what I do need now in home is React So let's go over to home here and stop that And then I'm going to start that server again. And now we start getting to the point where from PDP. We've got home content from home. And now let's go take this main I'm going to bring that in as the one And you know, I'm just gonna render it right Save that out and we're gonna see how that all the connections are okay. Looks like we to let's just go make this an exported function and then return this router. Okay, cool. And now at least we're getting a page. we're going to add a route for the home. So I've in there. So it needs to be that exact path. And that out. And refresh, and eight. That's pretty how cool is that I'm actually getting the PDP Home app, but it's serving the content for let's go and bring in cart. So I'm gonna do Okay, cool. Now, let me refresh. There you go. Awesome. Very cool. So it's not linking component of it. So you so in order link from React Router DOM. So let's go over So I'm going to paste in React Router And I'm going to put a link around fidget And let's see, I'm going to And then I'm going to go make another Let's take a look. Cool. And so they I go to the homepage, and I click on this, I go I click on cart, the login is retained, it is really cool. Okay, so another thing I want for the cart. And that's just to make sure that because I'm a little bit of a stickler here, I'm and margin on the X around that. Just make that looks good. Okay, cool. So now if we want go and use a spa link to get to our product detail point at that product. So I'm going to go and link And is wrapped the product name in that, and So if I log in, and then I click on solid rainbow, have a spa coherent spawn AV, across the app. right. But at the same time, we were pretty So now let's answer one of the biggest questions And like Raffys, which is how to test this stuff. So I'm going to close out all these files. And test to the homepage that will require the card So I'm going to first go to home. And then I'm the testing library for React hooks because depends on the cart count. And then I'm going new file called jest dot config dot j s. And I'm So now we're going to go and create our use card cart count. And I'm going to bring in use a use as you would, and then I'm going to export some state that has the initial cart items length And in the meantime, I'm going to also do a use going to run on startup. And then I'm going to And then set the count to the length of those cart the number of items in the cart. Pretty simple. go and create a new file called use cart count dot library with React hooks. And it's going to allow it if we want to, but we're going to use this we're going to bring in our hook. And then we're describe use car count. And we're going to say going to just get the result from use car count. there's no cart currently, and we're going to mock Well, let's just do just mock and then give it use card count. So is that going to work? And we see that it can't find that we can trick it into believing that there's For the cart, so I'll create a folder called And then within that a new file called cart essentially just an empty object. Let's give So we're going to have another test So we'll add that in. So use that cart count hook. in that use effect. And then we're going to call items. So we need to store that callback here. And then I'm going to replace takes a callback and then sets that callback All right, two passes. Okay, cool. So that's unit that's not a problem. So now let's talk about IE I'm going to use Cypress. So the first thing I to open Cypress by doing yarn run Cypress open. it's created a cypress directory, and in there, integration tests and all that sort of stuff, we get rid of that. I'm going to create a new file in And I'm going to describe my first EDI test. So and create yet another terminal, where I'm going and yarn started. And I'm going to bring up the and I'm gonna do start recording, then I'm going I'm going to clear the cart, I'm going to gonna go to the cart page. Now let's go take a pretty good. So I'm going to stop recording. and go over here and I'm going to say Alright, so let's go over and look at our Cypress. And I'm going to run our ED spec, Alright, and it didn't contain that localhost. over and get rid of this. I don't think that's the Alright, looks pretty good. Okay, so now what we get this 599 value at the very end. So we're gonna cart page and make sure that we have an ID on that scroll down here and we'll make sure that we need Excellent. Okay, let's go take a look at this. get the grand total? And I'm going to say that wanted again? 599. So let's take a look and Awesome. light is green. And that's an end deployed applications. That is just super cool. next when it comes to learning module Federation you should have a look at is single spa. So single gives you a way of making your components cross that's a pretty simple hacky way to do it single and wraps all of the different platforms and parcel. And then you can deploy those using which I think is very easy. And then you can could parcel up a view component and then reuse Another thing I think you should keep an eye on is Fe slash share component work for a long time. So there might be some interesting synergy is for my graffitis when it comes to bit. And then this in the wild yet, and a friend of mine was the model Federation and Mike Griffeys to create an app, and they embedded this paint finder in deployable, which is really really cool. So it is well, I hope you enjoyed this look into Microsoft any questions you have in the comment hit that like button if you liked the video.