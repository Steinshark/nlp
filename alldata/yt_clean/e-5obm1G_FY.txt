[Applause] Hi! First of all, I just want to give a big shout-out I feel like this has been a fantastic so... [Applause] Amazing job. Hi! I'm Anjana Vakil. I am an English teacher turned software developer and as I mentioned about six months ago, I knew nothing and very little about JavaScript. So, what I want to take you guys along on some about doing functional and I am not an expert in any of this, so this is going to be me taking you and nothing more. I'm going to try and save a little time but we'll see how that turns out. So, how did I end up standing here talking to you guys about functional About six months ago I went to a programming called The Recurse Center which quick plug is probably the best programming and it's a programming retreat where you can go and learn about whatever is interesting to you and so I got there and a lot of people were talking functional programming, Haskell, a lot of people were working and these were some and so I started talking and finding out So, what is functional programming? Few different ways that First of all, Some other paradigms are like where you say do this or object-oriented programming which maybe a lot of you write where you have objects and you change them, etc., etc. Functional programming where functions are king and we'll talk about what It's also a style of coding, of organizing your code, writing your code, style of approaching projects and really more than that it's kind a way of thinking about a problem, a way of approaching a task and it's also a really sexy trend with lots of buzzwords that'll when you're talking with people at the No, just kidding. But it is something that's and, so yeah, I thought to find out why everybody So, why do functional programming Well, I don't know about perhaps more experienced but when I started learning JavaScript having had some object-oriented that kind of thing, I found object-oriented JavaScript prototypal inheritance, How many of you guys, have ever run into a bug or a problem doing something... Yeah, exactly. Right? So, I found that really tricky and so I thought, all right, I know but let me set aside and try to think about which is maybe simpler in some ways and avoid some of these problems like bugs introduced by binding So, functional JavaScript to me a bit less tricky, a bit easier to debug but easier to maintain and we'll take a look that make that easier in a bit. Also, there is already a huge who are doing JavaScript so there's a lot of libraries out there to help you write functional JavaScript. There's a lot of people out there for example, there was a talk in and there are people that probably know a lot more about but the point is there's so this isn't necessarily something grappling you versus JavaScript, there's other people to support you, which I found really helpful. Okay. So, hopefully by now I've convinced you that functional programming and that we could do it in JavaScript How can we do it? What does it mean? This is what I was asking myself. So, the main thing and maybe it sounds like in functional programming you want to do everything with functions, so we want to express everything in And a function of course that takes an input So, we want to be thinking about kind of the flow of data of inputs instead of thinking about objects and how they manipulate or thinking about steps in a recipe Here we're really thinking about in terms of functions, taking inputs, giving outputs. So, for example, this would be a non-functional "Hi, I'm Anjana" I could assign a variable, and have it store the text "Anjana." I could have a greeting like "Hi, I'm" and then I could log that This is sort of an imperative style. First do this, then do that, we don't have functions here, we're not expressing this in terms of So, maybe a more functional way and this is a really simple example, is to define a function called greet which takes a parameter name and returns a string to the beginning of that name. So, for example, if I type greet, the string Anjana, feeding that as input then I get the output that's a more functional way Okay. So, another... maybe the main thing about is to avoid side effects and instead to use pure functions. So, what does that mean? A side effect is anything that isn't computing its output and returning that output. So, for example, printing something to the console it's doing something else, something that's on the side or if you have a function that uses to compute its output that doesn't depend only on so that's not pure. It's taking something from and involving it in some way So, this is just a really quick that avoids side-effects would do. For more information on that there's excellent Wikipedia articles but basically the idea is that you want your function to do nothing except take its input, to compute an output and then return it. That's pure. So, for example, this function here, we have this globally defined which gets used in the function as you can see in it gets used, so there's no input, we don't have name as an argument it's just reading something in That's not pure. Also, not pure because the return value of this function here we care about doing something, changing the world in some way other than the return value, in this case, printing to the console. So, this is a not pure function here. A pure function might look like this. Here we have, the only thing that matters to the output of this function the argument that we pass to it and the only thing that it does is Okay, so I've been talking for a while that's because this is really like something I've taken as one of the is thinking about things Another key point would be So, this means functions that or a function that can return So, basically, we're treating functions They can be passed to other functions. You can have layers of functions and these are what's called they come up a lot in This is a bit of a random example, but let's say we have this makeAdjectifier where we give it an adjective and it returns actually a function. It doesn't return a string it returns us a function which adds that adjective to So, for example, I can use feed it the input "cool" and get a function that's So, now when I pass I get "cool" added to that string. So, if I pass conference, So, the idea here is that which returns a function. And this kind of wrapping at least for me is one of the key things to being able because as we'll see a bit later, we need these higher-order functions in order to avoid some of the tricks that we're used to using So, learning the thing to get for me really involved wrapping Okay. So, one of these things that we're used to doing is iterating, using like "for" or "while", We're used to going over lists Instead, in a functional style, we might use higher-order functions which often take as an input not only the list that you want but also a function that then In the interest of time I'm not going about what Map, Reduce, and Filter do, but I found and also thanks to a really cool graphic that I think maybe you guys have seen it before, the MapReduce Sandwich, everyone! So, the idea here is that in this case, a bunch of vegetables. They're whole vegetables. We got some bread in there too and we want to transform So, for example, let's say and we have a function 'slice up' which we can apply to Now, usually I would do do all of this, do all this chopping, but in a functional style we'd use Map, give it the list of ingredients and I would get out a new list Then we have a Reduce function which basically combines all of in this case, layering to make a delicious sandwich, and Filter let's say could be if you hate cucumbers, you could have a Filter function which makes sure that only things that are not cucumbers So, these are the ways we use to get around the type of that we're used to doing instead we're going to feed functions like Map, Reduce, and Filter to get the sandwich that we want. And again, this is not intended to of how Map, Reduce, and Filter work, but there's plenty of information The idea is that we want to So, another thing we want to avoid mutating data, Mutation in the sense I just mean So, when we have something I'm sure a lot of you guys it's something data that Once we've set it it's there forever. It's never going to change. So, let's take a look at an example. Just because for me this was another thing that So, this would be an example of We have a rooms variable so "H1," "H2," and "H3," because that's what we thought at least that's what I thought and then we say no no no So, let's replace the thing at And so, then we have rooms we went from ["H1," "H2," "H3"] to ["H1," "H2," "H4"]. So, that is still stored in but we've actually changed and this is something that because this can cause and this is part of the reason why and with these sort of sometimes you can change things so that what you thought if I thought that rooms meant and I didn't know that I had replaced something I could run into trouble. I could end up introducing bugs and having a really hard time because rooms here is the right thing, rooms there is the wrong thing, ah! what happened? Oh! my God! You end up crying in front No, just me. So, a better way to go about things is to think of all data as immutable, For example, with no mutation we still have ["H1," "H2," "H3"] but instead of changing it in place I'm going to make a new rooms array using this map function that we talked about where I'm mapping, I'm feeding a function into this map, which looks at each room in the list and if it's "H3", oops! I have a missing = sign there, last-minute slides, if the room is "H3" it returns otherwise it returns Okay. Understanding this but the point is that once I've new rooms has the correct values But rooms is the same it hasn't changed at all. So, this is thinking about we're not changing it and that's something that's really because as I said, it helps you avoid a lot of headaches, So, how much time do I have? Okay. Good. We have a little time to talk about The problem with immutability is that when you're treating arrays what you end up doing is So, if I want to change I have to make a whole new array and when you're dealing with maybe that's not a big deal, but as your objects get bigger, this can give you efficiency problems because if you have to even the things that didn't change, every time you make and you want to make a new copy, a slightly different copy of your array, it takes you a lot of time, you have to go through everything you end up using a lot of space that maybe once the objects becomes a problem. And so, one thing that's very as a way of getting around is to use persistent data structures. This was something introduced he wrote a paper called I can put a link in and then Rich Hickey implemented the data structures to make Clojure really efficient for and for these functional operations. Okay. So, the way persistent data if you will indulge me, I'm going to step back to We're getting retro. Okay. So, if we have like an array typically what I do in a mutable and replace it with H4, but as we said we want to avoid that. So, instead, if I copy it I copy H1, I copy H2 and I replace, instead Great! But now I have to store two arrays, taking up a lot of time, look how long that Terrible. Right? I know you guys feel I can see it in your faces. What if instead we represented such that each leaf node of the tree is one of the things or perhaps 2 of the things or 3 and if I want to change something, I don't need to replace I can just make a new and now I can make a new tree which instead of repeating H1 and H2 I can reuse those same things which connects them to so that now I have here a data but I didn't need to I just needed to make I can reuse the old So, this idea, this sort of topic because we can share parts of so we have much more efficient changing things or moving things and this can also be done for maps, and it basically makes the world of so that we don't have to and expensive space operations to update our immutable So, to do this in JavaScript, there are a couple of libraries One which I like to use is called Mori which I'll show you the link which actually uses ClojureScript which has these type of it ports them over to JavaScript, so you can use them and it's great. It has a lot of also like general like Map and Reduce There's also another popular which Facebook put out which is JavaScript through and through. I haven't worked as much with that but I know a lot of people And yeah, so these are ways you can try out using these if that is something you feel I know. I can just feel the excitement. Okay. Moving on. If you're ready to try it out, like I said, we have Mori links there to those libraries. There's also a lot of which don't focus so much on but instead give you a lot of helper So, Underscore, Lodash, for example. Today I found out that because there was a and there are many more. And in fact, JavaScript has like for example, arrays have So, a few slides ago that's because the array prototype So, you can even do some functional without using any of these libraries. Okay. So, if you are sitting there thinking, What? Huh? I didn't really get that side effects, pure functions. If you want to learn a bit more like I said, all these sexy buzzwords that I've been throwing at you I highly recommend a nice gentle "An introduction to by Mary Rose Cook who is a former facilitator at that I keep talking about. The link is up there, but basically this is a that kind of goes into in some of the "commandments" that I've mentioned today. So, if you are a little intrigued but not quite clear on this stuff I highly recommend you check it out. So, I think that's it for my talk. We have a couple of minutes eight minutes by my account, but first of all I just wanted to I'm Anjana Vakil. Anjana Vakil on Twitter and has link there to my GitHub. So, would love to keep in touch if anybody else is functional JavaScript as definitely reach out, we could stick together, but first of all I want to again the JSUnconf organizers, especially the diversity sponsors. I'm here on a diversity ticket myself and wouldn't have been able to come and all of you and the sponsors and also a huge huge thank you and some of the alumni there who including Khalid at the back there and Sal Becker, another alum, who explained a lot of this stuff to me over several long caffeine-fueled and if any of you are on self-directed educational definitely check out recurse.com, it's an amazing community. Okay, that's it for me. Thanks. [Applause] Thank you very much. Yes, _____ Does anybody have any questions Don't know if I'll be able to Yeah. Actually, always the professors always said that is better than functional programming and I was thinking that is it better or is it you think that we should use functional programming or also on other programming So, I think that's a great question and it kind of gets into what I think of as kind of the philosophy So, as I was learning about I started even wondering and why do people fight about them, why do people say we have to do everything functional and why do people say no, we need object orientation. And the conclusion no one paradigm is better They just have different advantages and they have different situations in which they're going to be for that particular problem. So, for example, if you just want that just does something on you're probably just going to do this, then do that, If you don't need to maintain it, if you just need it to imperative programming is If you're trying to model and how they interact and how they go around like if you're trying to model, books in a library or classes with teachers and how they all interrelate maybe thinking about it in an because that's exactly the problem is modeling objects and that's why that But if you're trying to avoid that I was talking about when you have maybe a situation that doesn't actually refer where you're using objects and that's introducing all kinds of that are hard to track down, maybe you want to consider in terms of functions on your data and things being pipelined and undergoing various transformations, not in the sense that but in the sense that based on old inputs, then functional programming and it has a lot of advantages you can break things down into small So, if you want to change something you don't have to change you can just change that does the thing So, I think it has advantages, I definitely wouldn't say it's better and I definitely wouldn't say object it really depends on your situation. Also, very good introduction I used to be a philosophy major, Any other questions? You mentioned Map function and the Map function is not working, so do you mix it... Before that, I come from object-oriented and not so much into functional. That's cool too. The professors really and can avoid the concurrency that the Map function Non-blocking and concurrency are all things that I do not feel I would love to turn that question Anybody want to respond? _____ Fight fight fight. Just kidding. Just kidding, just kidding. That would be against _____ I would also guess that but we can discuss this later [Laughter] Thank you for the conversation Excellent question and I would love Look forward to talking you guys more. I guess... I guess we are done with the talks, Thank you. Thank you. [Applause]