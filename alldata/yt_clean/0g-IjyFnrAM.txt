&gt;&gt; Surely. Anything Look at this diagram. I Just go and make it so, right? No, coding is hard and and code gets bigger but our brains are not and this is largely &gt;&gt; Hi everyone. Welcome I'm your host, Kevin Scott, Chief Technology In this podcast, we're going We'll talk with who made our modern tech world possible and understand what motivated them to So join me to maybe learn a little bit computing and get into what's happening today. Stick around. &gt;&gt; In this episode we'll meet Anders Hejlsberg. Anders has always been He built Turbo Pascal, at Borland, which I use to become a real At Borland, he had a long career where he was Chief Architect of Delphi in addition to and eventually moved where he helped create C# as and today, he spends his time as the Core Anders has had a 35-year career building development tools that software developers love. We're going to learn how he's done that today on &gt;&gt; So, welcome, and thanks for being my first guest &gt;&gt; Thanks for being &gt;&gt; You were a calculated first I think I've told but I learned to program My entry was BASIC in the 80 Assembly language. The first real programming I ever did was on Turbo Pascal. I went to a science and Intro to CS class and Turbo I don't think I would computer science for that sort of So like in a way, you're &gt;&gt; That's awesome. &gt;&gt; The main reason I wanted is this must be the case for a huge number of folks and we'll get into But what made you to build programming Because that's sort of &gt;&gt; Yes, it has. You for more than 35 years now, and it's kind of and it's such a I mean, and the world there wasn't really IT was so different. I mean, in the industry, I got started probably but I got started coding in high school back Probably I was trying to &gt;&gt; Were you the type you were building a little &gt;&gt; No, no. So I was born and I went to a high school It was one of to offer students &gt;&gt; Yeah. What was the computer? &gt;&gt; There was the old HP It had 32K of You can literally open it and see the ferrite core. So it was amazing. Paper tape reader and they got a 14-inch one which was absolutely &gt;&gt; It was like huge. &gt;&gt; It was enormous. At on that thing had and everything was so primitive. You could program it, and we put that poor computer like trying to make the read-write head They would vibrate &gt;&gt; Yeah. Yeah. &gt;&gt; So that was sort of a very hands-on introduction and I too remember that you could either program it I think there was but then there was &gt;&gt; Oh, Interesting. &gt;&gt; That was actually into that branch of programming Because that was the first We didn't have BASIC. There was no BASIC Do you know what I mean? So I learned ALGOL and this was a very primitive compiler. I mean, it didn't &gt;&gt; Right. &gt;&gt; That machine had no stacks just store the return address then return was an indirect Right? I'm probably going to get in trouble for saying it, but better than FORTRAN or COBOL. &gt;&gt; They were still &gt;&gt; Yeah. Yeah. But anyway-. &gt;&gt; How much were you the Scandinavian So Niklaus Wirth the Pascal programming language &gt;&gt; It's funny, in high school, I didn't know anything and really, it was just Then, I started at the Danish There, I met a guy who had just transferred into the engineering academy and we both liked playing cards, and he lost some money. So I had some IOUs so I So I ended up getting him and starting a computer We had the very where you could go in &gt;&gt; Wow. &gt;&gt; We were right at of microprocessors The 8080 and the Z-80. I'm like this is ZX80 started to happen. There was this British kit which had a Z-80 in it, but I started writing It came actually with &gt;&gt; So what sort of &gt;&gt; Well, so first, I It's funny, I never liked playing games but I liked writing games. &gt;&gt;Were these sort of &gt;&gt; Yeah. &gt;&gt; It was like Moon Lander and Star Trek and that sort You could actually I think it was like these 101 computer games where you could type &gt;&gt; Just great. Like it &gt;&gt; It was awesome. So I learned a lot. But then, I started actually getting into assembler coding and sort of trying to how the machine worked. Then I got curious about extending the Because that ROM BASIC, it had to fit into an 8K ROM. So there were a bunch of There was no renumber command, which was a royal pain because if you ran out num now, you had to manually But there were where you could actually the ROM BASIC and an extra slot for E prompts I wrote this little 4K that gave you renumbered and So that was like a little Right? &gt;&gt; How old were you then? This &gt;&gt; Yeah, I was probably 20. &gt;&gt; So like very, very early in your career you were mucking around with &gt;&gt; Sure. Yeah. &gt;&gt; Is that just sort of &gt;&gt; I just sort of There are a lot of Then that interest further I've figured out, &quot;Oh, you I remember still missing that ALGOL programming language and I was telling my buddy, &quot;Maybe I should write a little ALGOL thing that &quot;No, no. There's You really should &quot;Of course. Okay. Okay&quot;. Then I started like, &quot;Oh, this is better. &quot; Because one of did consistently through he's the creator of Pascal, but he was involved with ALGOL and then later and every language got &gt;&gt; Yes. &gt;&gt; ALGOL had all value and call by name and then Pascal dumped and then MODULA dumped that Oberon got even &gt;&gt; Yeah. &gt;&gt; I remember I've never written a real ALGOL program but the ALGOL grammar was &gt;&gt; It was complicated. &gt;&gt; So complicated. &gt;&gt; So anyway, so and I wrote this little Pascal that was effectively the nascent Turbo Pascal, It had a little onscreen editor and a compiler and it was all &gt;&gt; What gave you Because that's sort of That might have been &gt;&gt; Yeah. That was probably one of the very first IDs ever. Yeah. &gt;&gt; That's amazing. &gt;&gt; Well, UCSD Pascal but it was sort of different. It was a PCODE interpreter and the ID was not really It was more like a sort of &gt;&gt; So you wrote this thing &gt;&gt; It was all in Z-80 Assembly. Yeah. Oh, yeah. Now, that was my weapon and that grew into a CP/M-80. It was obvious that one was and then that grew into finally a full At that point, we met the guys. Borland was founded in Denmark. A lot of people don't know that. We knew the original founders another computer company and it was a very small They were writing some I remember from That was a horrible Pascal. It was like one of those Right? Then they would grind and then you'd then it would write some of the temporary code and then you'd insert the code generator disk. It took an afternoon to There were like dialects of not as nice as They &gt;&gt; Right. Then they were and then, I was never making extensions if &gt;&gt; Yeah. &gt;&gt; So these guys were &quot;Wait. We got actually this implementation you They didn't believe saying because &gt;&gt; I just want to double-click Coming up with one of the first integrated development environments that you have written in Z-80 Assembly that's a unbelievable &gt;&gt; I suppose in retrospect, yes. I've never really thought of it that way. But, you know, it's- &gt;&gt; Just incredible. [inaudible]. &gt;&gt; It just seemed be so much better a first date a load an editor and then Why not just put it all I don't know. I never really- and especially, at the time, because These are not Windowed systems, can't have multiple things It's super tedious to switch So like having everything in &gt;&gt; Totally. The added cycle, just shrunk by &gt;&gt; Yeah, and I'm embarrassed was it F9 to compile and run, or was it F5? &gt;&gt; I don't even I think it was F5 yeah but. &gt;&gt; It was like miraculous. &gt;&gt; Maybe F3 but There were all sorts of tricks in there like the the first 12K of the system I just copy the first 12K There is your runtime Then generate code you could compile the memory and we'd put the code in Or the original implementation to floppy tape and then you go, sorry to the tape recorder Then you can load that I mean there was only 64K of I mean it was crazy. &gt;&gt; Yeah. So, I bought a copy of Turbo Pascal 5.5 Programmers Paradise. This is just sort of how you so I forked over my two &gt;&gt; Oh no, it wasn't even that. It was $49 like $49.95. &gt;&gt; It was affordable So thank you for &gt;&gt; Yeah. &gt;&gt; But like it came on five and a quarter that sort of fed into &gt;&gt; I mean I got to get credit to Philippe and Niels the original founders of they ended up licensing this my small company and we were and doing business was normally done for Then they licensed Of course we never thought to put what they were supposed to come back with we're going What? You got to. It's just terrible. It's supposed to sell for 10 times. And so 10x and then they literally sold four or five orders of right? That was tremendous. &gt;&gt; Yeah, I mean when the life cycle of innovation, it's like not always just Like that wouldn't have been for students if they &gt;&gt; At that time it if you only charge It was worth just to have the manual that actually tells &gt;&gt; Yeah. So one of the other things Turbo Pascal was the manuals How big a push did &gt;&gt; I had written manuals for the Pascal compiler that we Poly Pascal and it had a pretty extensive manual The introductory parts were who wrote the documentation He did a great job into something that was really a fun book to read people were very happy with So it was just a confluence of a bunch of factors together right. And the right and the industry was so I mean that was it. &gt;&gt; So going back to did you have a professor or colleagues or like great at the programming the curriculum where they sort of lit this aha moment for you. &gt;&gt; Not a whole lot actually. I did electrical engineering because in order to you would have gone to the university. But I an engineering sort of necessarily sure that programming was what I wanted to do. Do you know what I mean? &gt;&gt; Yeah. &gt;&gt; At the school at the time, they had yet to introduce So, they had the Northern there where you would punch cards and then the printout which would just be 100 pages that said error, error, error and then you'd have to go back figure It was horrible it was like &gt;&gt; Yeah. &gt;&gt; But then they again also some Z-80 and CPM-based microcomputers and by the time I left they were actually Poly Pascal the one that I written in the &gt;&gt; Holy crap. That must be great. &gt;&gt; So my professor attend the class he gave me an A. &gt;&gt; Because you've &gt;&gt; Yeah, that's right. &gt;&gt; That's great. &gt;&gt; Yeah. &gt;&gt; I think one of the things to take for granted now is you've got Google, you've got &gt;&gt; Right. &gt;&gt; YouTube and like I would argue that it's like much easier now to a programmer or even in sort of esoteric things like So, how did you get your bootstrap, like how did you figure out how &gt;&gt; You learn by doing. You learn the hard way &gt;&gt; I mean in so many things that I could have gotten A couple of things I suppose is one is you couldn't I wanted to do it. Someone once talked about how do you get Well, it's by putting There's this talk about the to put in and I was like yeah hours in the first three this because I was obsessed. I just have to do it I didn't It was just a challenge &gt;&gt; It probably wasn't You were probably were &gt;&gt; Absolutely. Absolutely. Yeah. I didn't know how to But then you started looking at compilers that were my native language was machine code I mean heck other stuff and figure right and then you But there were still Even in the first version of Turbo Pascal I remember just stored as linear lists, which of course doesn't I mean and then I about hash tables so I I got to go home and try this.&quot; Then I put it in and doubled the speed of the compiler, right? I remember that's one that I thought was me in understanding the basic computer science Niklaus Wirth called Algorithms Plus Data Structures &gt;&gt; Yeah. &gt;&gt; Which is a great book. &gt;&gt; Oh my God. It is the most pragmatic computer science book I was like never into the symbolism and I'm just like give Tell me. Let me understand &gt;&gt; Yeah. &gt;&gt; This thing explained how binary trees and hash table and how with a scanner and Do you know what I mean? Code generator and recursion and oh my God it &gt;&gt; Yeah. &gt;&gt; You can go back is still super valuable. &gt;&gt; I've always loved Another good one Dave Hanson who used to work at wrote this book called Implementations. And I like C I mean it's got a bunch &gt;&gt; It does. It does. Easy-to-make mistakes. Yeah yeah. &gt;&gt; It's easy-to-make mistakes not the most elegant language but it's simple you can sort of pack all the rules and you add. But this book, was genius because it was a bunch of data sort of approaches to programming that were super pragmatic. They had these very and it was almost like teaching C to do crazy object-oriented sort &gt;&gt; All your tables do. &gt;&gt; Yeah. &gt;&gt; Yeah, yeah no I we definitely had lots of that Windows is largely based on is effectively roll &gt;&gt; At Borland, how did How did you know you were pushing your product in &gt;&gt; That's a good question. &gt;&gt; The cycles were long, right? &gt;&gt; They were. Back then there were a lot of trade magazines, and you got a lot of Through the reviewers, like [inaudible] and Byte magazine We also had bulletin Like the old BBSes that we would monitor in and so, there were People would write us I have so many letters with So, we always had a long list It was really not a matter it was like a matter of and sorting it and You mentioned too Pascal 5.5. That was the release Object-Oriented Programming. Oh my God, that was like That was like the AI &gt;&gt; It was a good implementation. So, you must've taken &gt;&gt; Well, Object Pascal was probably the work that That was definitely Although, our first 5.5 was a little bit different. It had some influences Then by the time I think we were more There was no difference You didn't have to use and then that made the syntax It was just fu.bar &gt;&gt; Yeah, I remember. So, 5.5 was where I learned Object-Oriented I think I'm sort of lucky into a modern Java for instance, and that was your playground It's so complicated now. &gt;&gt; It is, but it's also in Because back then, the by and large, did not have and were very not safe and had In fact, we ship Turbo Pascal by default with runtime because we did better on A lot of reviewers were not smart enough to know and so, they were comparing We just wanted to make sure that we were always in Once you introduce then you really start to up the level of You can write in have much more complex and you don't have to worry Who owns this memory. Who's supposed to and you don't have all of these cycles that you with Ref counting or whatever you do to keep track So, it made the world a lot Then, the fact that these that removes The thing that saved was that there were There's only so much Even though Builds and 64 there's only so much So, that always saved us. It was like the enough that you couldn't But once you're in this now, is literally a bottomless pit. There's so much code, and you and if you don't have some of these guarantees built you're going to be lot of time just chasing down dumb bugs that That's not a creative process. That is just a waste of time. &gt;&gt; Yeah. So, I want but before we jump let's talk a little bit So, maybe the compiler all that much but &gt;&gt; That was a revolution It's interesting on a project in between. I never went anywhere. It was code-named and it was about building which was very sort of- Back then everyone was talking and you could just plug between the inputs and outputs We were building components that you down on a canvas and making Fahrenheit to centigrade converters But it turned out that horrible because you had lines going from and it just didn't scale. But I think in that process, I got a real appreciation for what does work well visually. Like designing input and GUI was starting to happen. So, there was definitely So, by the time this Monet we realized it wasn't then we went back to basics. Then go, &quot;Okay. Well, into the GUI era Then there was this thing &gt;&gt; Correct. &gt;&gt; That taught us a lot, but Like it didn't have it was interpreter-based, it was generally frowned upon language at least and so, we go, &quot;We can do this. We can do this, and &gt;&gt; Yeah. &gt;&gt; That was the Then I think in the process we also realized that- and there is this I our program manager who astutely realized that you can't You've got to have some angle, and the angle at the So, we actually pivoted it That gave us an inroad companies that were real database connected apps. I remember competing I don't know if you So, that gave us compared to Visual Basic. &gt;&gt; It was sort of an Delphi came out shortly after and I became a real I remember being because I did a bunch that clients were paying me for, and the tool made me look We had made this transition from, you build in where if you really fancy, you're sort of blasted ASCII codes and But Windows 95 came out. The onus was on you. It looks slick. It was a pretty Operating System. &gt;&gt; It was an awesome way It really was, and then it had a bunch of fun things in it. I remember the two-way You can either visually design in and modify the code and then the form would Making that work was not easy, but once it did work, oh my God, it was so cool. &gt;&gt; That must be You've been doing this but in my mind, a force multiplying developer tools as you put your development effort and then it gets into the hands of the huge &gt;&gt; That is the thing that I think in retrospect has It's like when you you don't build the same kind do when you're building developer tools. Because developers, they put in the hours. Do you know what I mean? &gt;&gt; Yeah. &gt;&gt; They come to really They come to truly &gt;&gt; Yes. &gt;&gt; Then they become &gt;&gt; They are almost &gt;&gt; Yeah, I know, and Throughout my career, rewarding to go speak have all these people how you saved my life. You did this. People have literally It's like guys who and couldn't put learned to program with literally this guy is claiming I mean, that I'm just God. That's amazing. That is wonderful. &gt;&gt; Really great. &gt;&gt; Yeah. &gt;&gt; So, at the time you sort there was this amongst commercial entities, companies like Borland and the guys who were There were these going around and literally catalogs full of that was just for developers to help them So, the big thing that came on the scene right after How did that factor from Borland to Microsoft? Because, in a way C-Sharp, &gt;&gt; There is an arch But I do remember, I think it was in '95 when Java made its first appearance. This is where the Internet Particularly, I think in the development tool space there was this collective where everyone thought it It was done. There were going to Java to take over There was a Java fund. Remember the Java fund? Funded by hundreds of whose sole purpose in companies that were building As if that would It was brilliant, what Sun did, I think that even what they had But it was discouraging in many ways because we felt that, yes, that's fantastic for building applets in the browser. But you can't build But hey, you know what? There were the shiny object. There was collective craziness but there were also things that I thought were interesting. This whole notion run everywhere is even today, it just so happened that it wasn't actually born out by Java. It was born out by Javascript. But, which was there already in the browser and It's crazy. We'd had a JBuilder which actually was They started with the Delphi IDE, chopped it down, and then the They weren't really called but the Mini compiler analyzer do all of their and whatever that was So, I got to know Then at the same time, there was a change afoot at Borland. Borland had a bit of in the sense that everyone was up leveling how It all became a game Oracle was databases. Sun was workstations. Microsoft was the OS, and then Office became And Borland never really got It was always a bunch and we try to bundle but it never really made sense. Then the company was so get a foothold in they started neglecting which was really where and a series of Then I got more and Then of course, through a bunch of reductions and we spread a bunch of A bunch of them A lot of them went to Microsoft. Then of course, they every summer when the weather I'd get a call from who had run R&amp;D at Borland, and now was running So, I would come up and we'd talk, and the first year I But then eventually, it was time. So, I joined Microsoft in '96. &gt;&gt; Was C# the first thing &gt;&gt; No. Not at all. There was no C# There were .NET at that time. I joined to work on Microsoft's Java &gt;&gt; Interesting. &gt;&gt; Yes, and I've So, at the time, we had a Java development tool, and it was really the C++ compiler taken out and a Java compiler stuck &gt;&gt; Yes. &gt;&gt; That was visual J++ Then, we jumped from 1.1 to 6.0 because we realigned VB was at version 6, and so, it became Visual J++ 6.0, and it had a Visual designer. You could design But then we were also a better language for and that ended up being I have personally read It was explicitly as long as we ran we were free to do But that blew up. Literally, within three months of our shipping Visual J++, our product was enjoined and we were required to put in a warning dialog, &quot;Warning! You are about to turn on Microsoft Are you certain And that was just so you That was considered so evil. I was like this is crazy. Inside Microsoft at it was all over the industry and there were literally fractions of groups at Microsoft that believed that it was We should build a Java OS, it should all just be Java. But then that happened the and that was sort of the genesis for us understanding that, listen, it's really hard to do what's right for extending someone We've got to build our what it is that our customers are telling us that they want. &gt;&gt; That was the genesis we needed a programming language. I so happened to find myself at the right time at &gt;&gt; So how fun was that? Is that the first time that &gt;&gt; Totally. Yeah. I the opportunity to have a company like Microsoft put their might behind a programming language that you're going to create. I was flabbergasted that I Yeah, sure I'd proven were still a lot of who had different ideas and then ultimately I was the one who was So that was wonderful and we had a great team on that early C sharp compiler which originally was written in C++ or C plus minus because we didn't &gt;&gt; Which is a whole other design. &gt;&gt; Yeah, yeah, I Peter Goldie wrote the core implementation I wrote the language spec. We had a wonderful design up that you know to Where we used to have three meetings a week where we would just do Iterate on it, you know what I mean? And Scott Wilson with that I worked with for So for four years he We would do speakerphone with him. It was a great time. &gt;&gt; Based on some of the stuff already and just sort of looking at C sharp you're fairly pragmatic when You're not one of these language let's throw a Hailey Milnor &gt;&gt; I've always been the problem and of something before I I have to believe in it. I don't just throw I need a type system, want Now, no. I want to there and does it really &gt;&gt; And a real programmer is &gt;&gt; Exactly and so that sharp and that drove For example, we a first class language construct because everyone was It was like that was written and Java didn't So there were pragmatic So whenever someone goes, why is this feature there? It's not just because it's because it solves this, And ideally, with every this is something you is, people will request a lot of features but they synthesized their idea of They really come to you of problem and they tell you I need this instance. And then-. &gt;&gt; So the trick is to get them to really describe the problem. &gt;&gt; No, the trick is for you to understand what is &gt;&gt; Got you. &gt;&gt; And that's what So I never wanted to unless I could see We're not just going to this one little corner of I want this to be that you can do &gt;&gt; Because it's to bake something &gt;&gt; The thing you come to learn add all you want but you can At least if you care about And we've seen lots of train wrecks where Like say the transition from Python two to three just doing it in the name that isn't right or You can't do that They have too much it is your responsibility continues to compile and work and then you And if you're not then you might as well go create a whole new thing that advances The worst thing you can that is absolutely &gt;&gt; So some of old is emotional but you can very quickly have hundreds of millions of lines of code across. &gt;&gt; If you're a serving it doesn't even matter writes a large body of code and then gets adopted somewhere, does not want to have to changing it in random ways No, big code bases get Then programming I sometimes joke that show me the perfect programming show you a language because only then can &gt;&gt; I did an internship was a younger engineer One of the most mind blowing heard up to that point was I was sitting one of these Cray was describing So, they were trying to sell a supercomputer at some point to a car manufacturer and because they had it was due in So they could simulate crashes They'd come out with this so it was just going for the car company to rewrite their FORTRAN tens of millions of this operating system for this new machine and the all right, this machine and that's tens of millions The operating system kernel we'll just write a custom &gt;&gt; Being able to unpack where the abstraction is really sort of an you have to develop &gt;&gt; Yeah. So pragmatism was always a main driver for me &gt;&gt; What lessons is or like as a builder have you learned that you're applying the &gt;&gt; Well, we touched You really have to respect and value backwards Doing language design, there's really in a sense two phases to There's 1.0 and then And with 1.0 You can do whatever It's crazy fun and you But then from there a very different it's a game of trying to in a way that does not break And that is very different. And also you got to be very cognizant of every sort of has a gestalt to it, if it's an object doing you can move it towards but you can't make it into Like where immutability So there's-. &gt;&gt; There's iterators, but yeah. &gt;&gt; Right, there are got to go, &quot;No, if we do this that'll just the same thing and now there about which one it is So, we can't do that.&quot; So, after 1.0 you say no and save it which is hard because there but this is not And you could sink the I think you learn also to withstand the pressures I can't tell you how many mails our decision not to put I literally spend a year writing that email And Visual Basic did put XML there and I was there are so many different ways you can write this markup. If we put it in an XML sinks Can you imagine if we'd had XML literals in C Now what-. &gt;&gt; I can't even imagine. &gt;&gt; And it's sometimes your guns and the face this does not belong here, here is what I know, I understand how with the vantage point of today it might look here but it doesn't &gt;&gt;Yeah. &gt;&gt; So, there are lots of interesting things that you &gt;&gt; I've always thought that the better design programming where there was that was developer Pearl, which in many ways this is I've written a lot of It's really easy to not language's fault but it Like Larry Wall these philosophical tenets like make the easy things easy and I remember hearing Fred Brooks at one point say one you can do in language design the things that you're not Because that's where So it's always these philosophical principles no one right way to design &gt;&gt; Right, but there are and I think that one thing forget too about programming languages is well First of all, it's fascinating to look at how slowly how similar the of today are to the ones It's really quite frightening. I mean like Pascal so we're talking about here and it doesn't really Okay, we've had a few, okay, object orientation but then Pascal looks a bit like a functional it doesn't have pattern matching, it doesn't have lambdas or like functions and data So that's one thing I think another one is focus on one shiny thing that you're programming But then you always forget about the 90 something other percent that every programming And that 90 other getting bigger and bigger now they need IDEs, they need they need code navigation, they need blah, blah, blah. And so whenever you're like, &quot;Oh I got to have here just for configuring this thing, oh Well, are you going to build an ID VoIP or you're &quot;Oh no, they're never going to get big enough for Well, every configuration its own crappy eventually and if And then they get bigger and bigger and bigger tools and now there we are &gt;&gt; Some of the hardest things someone leading teams is to be the bad guy &quot;Okay, we're not going to use And it's precisely for figuring out you're going to of your engineers to you have to make the apparatus that you build what's the build system going to look like hundreds of millions of lines of code and thousands of engineers? How do you do and continuous deployment? What is your testing So you build all this automation that sits around the the engineers can sometimes have this notion in it can't be that hard, I'll just write my one thing in this and it'll be okay.&quot; And then- &gt;&gt; That can happen to you, it particularly the in the engineering ranks and the more possible you think You become an architecture anything can be done here, right? Look at this diagram, I Just go and make it so, right? No, coding is hard and Code gets bigger and but our brains are not and this is largely &gt;&gt; Yeah. &gt;&gt; So one of the things fellow engineers about a lot over the past several now as a discipline, as a profession, compared So, in some ways, the programming languages from a language perspective aren't that much different But you do have cloud computing and I can't tell you how many times, when I was a young engineer I re-implemented chain It's like I could the code just out &gt;&gt; Right. Right. &gt;&gt; But like so much of this stuff is accounted for you, so, you've got really a standard class library for programming languages like all of this infrastructure. What you can sit and write in terms application, compile it, press long button and then expose it to It's like crazy. &gt;&gt; No. It's phenomenal I think a lot of it has done a tremendous the distance between individual users of someone implementing a tool and someone using a tool. We're this close. I mean, I feel it on my body I sit on the GitHub issue tracker on TypeScript and then I'm talking to the very people who are using it and if we can have it turned around and have it in the nightly which that used to We have done it like So, the pace of advance there and iteration is just That is- &gt;&gt; It's also that you doing &gt;&gt; Sure. &gt;&gt; Like so many people this stuff available &gt;&gt; Yeah. &gt;&gt; That is still because ultimately, &gt;&gt; Right. &gt;&gt; I don't know where that's but I have to say I do love It's sort of like a return to the things that really I mean our team, it's it allows us to be allows us to really just I was always a great fan of- you a product and throw it out there and then you move on No, you got to come Then iterate on it and make It doesn't get beautiful It gets beautiful over constant iteration and care. Do you know what I mean? &gt;&gt; Yes. &gt;&gt; That's something allows us to do at such a phenomenal pace We could have never done Visual Studio Code and TypeScript in It simply would have taken 100 years to get that amount of feedback incorporated of cycles that we &gt;&gt; Right. &gt;&gt; So that's great. &gt;&gt; That's awesome. &gt;&gt; Yeah. &gt;&gt; I think maybe that's We've gone from core memories to the sort of near infinite rate of change in open source software. So, thank you so much. &gt;&gt; All my pleasure. It was great, fun. &gt;&gt; It was awesome, so fun. &gt;&gt; Fun talk, yeah. &gt;&gt; Thanks for joining me It was a lot of fun I had some surprises in there, like I didn't realize a precursor to Turbo Pascal while he was still in university. That may very well be the first integrated in the entire world. And he's so modest about it, This is one of the more important breakthroughs of the developer that has happened in the So, many thanks to Anders &gt;&gt; Next time on Behind the Tech, we'll hear from Alice Steinglass We'll hear about how make sure every kid has the opportunity to take computer science Be sure to tell your friends Behind the Tech, and to See you next time.