Hello and welcome to this episode of the GOTO techie, editor, author, and consultant, and this that I'm doing for guys here talking to software Murphy. She is a professor in the Department of Innovation at the University of British Columbia. Her research interests are in software improving the productivity of knowledge I've learned so much from her work over the paper called Who Should Fix This Bug, which assignment of a bug report to a developer the report using a supervised machine learning Thanks a lot, Charles. Thanks for having me. And Okay. Thank you. So what's the Always a great question because, you know, day. But we've been doing a lot of work on years and trying to understand the conditions being productive or not, and how there can be productive themselves versus helping members of Right? Yes. And productivity seems to be partly in the consequences, you know, the elements of co-creation and the argument that interested to get your perspective on that. defining developer productivity That's really interesting, right? Because we've developer productivity since we started programing whether or not we could judge how productive lines of code that they were writing in a given I think, for the community to realize that was on the kind of programing language that you Or depending on the kind of task that you were down a particular bug and writing. One line of is productive or not? I think most of us would time well spent. And then people tried different function points to say, can we abstract away sort of value that was being added to, to the Turns out that was pretty hard. And then we eliminate waste? So all of the lean production the developers be more efficient in what they're We've kind of taken that a little bit further productivity by having developers perceive that the factors when they they have that feeling and their work and as a result, actually produce more I know you've talked to many research about how they think about their Well, it's always an interesting empirical methods to try to think about, So sometimes that surveys sometimes that's watching them work. Sometimes it's putting understand at a really detailed level So we use a lot of different techniques. And I of themes that come out. There is no one way their productivity. Some think that commits are number of bugs that they have solved, way down on Going back to that thought, we find that half of of them would rather never have another meeting thing for them to be doing. But there are some perceive their productivity in terms of their ability to be engaged and their ability to, to that they're switching between different tasks. mind in terms of the global learnings that we've Charles Humble: Have you looked at generative AI. And if you have, what are Well, certainly that's kind of the rage in least have been looking at how generative AI can, can help any kind of tasks that a generative AI has been totally amazing at the we've been doing some work in trying to understand Where do they see it making a difference using it to understand pieces of code that to be able to summarize what that code might and its ability to to find a snippet of code as, as a developer is working, we see them So instead of doing a Google search about a generative AI query and learn maybe an that piece of AI. But we also see some and asking a question either to prepare Or sometimes instead of talking to their face some really interesting challenges down more because there might be a decrease in the and that could have long term of the software and the quality of I think it's fascinating. How do you see the role Architecture is always such a difficult thing to it feels that there often isn't a lot of time It's sort of set at the beginning, or it evolves challenges that happen in the architecture simply writing, instead of maybe there being that upfront design that 20 years ago, you know, with sort So it's going to be really interesting to That's being recommended, let's say from a to the architecture? Are we going to be able to this way? Are we going to know anything Are we going to lose modularity as we grow I think, for the overall structure if we're not paying specific attention to that Right, yes. And I know your research the perceived architecture of the of idea of architectural drift. Absolutely. We, actually, did my own PhD thesis that time where there was a lot of attention being of a system more precisely, analyze it before do it in a model oriented way and actually I had been working as a software and it seemed to me that, you know, the architecture upfront and have that was not what I had experienced as a actually pretty simple tool that just allowed Here's what I think the architecture is. make it really easy to say these parts of scenario diagram. And then we could extract like where were the coupling dependencies. From interacting from a runtime perspective And so we came up with a diagram we where your predictions as a developer in the source code, and the system where have been one component calling another thought there would be interactions And so this turned out to be a really good code. Pretty quickly write down, here's try to do this mapping and find out that typically coupling and connectedness in the system And some of those things were for a good two pieces had to talk directly to each work with the Microsoft Excel group, to have the developers of that system start different than they had actually anticipated, when of, of, of abstraction from the It's interesting you mentioned coupling, is sort of bi directional coupling again, without anyone really realizing that of wondering if that's a symptom of the same You know, generally I it's always hard to but it's not that developers, when they're subvert an architecture that's been in place. It's that they need for the code that they're writing. And if people aren't paying attention to that, make the changes that you want to make anymore, and so connected. So it's a real it's really a performance, that need to get the job done with and a place where I think we probably still don't of kind of thinking about that architectural are we meeting the conceptual integrity and Fred Can you unpack that a little bit sort of symptoms that you would expect I think, some of the system symptoms that changeability so that from a, perspective, that able to slot a new component in and stitch a few added into the system, and instead of adding that feature to to the system. trying to understand why there's some secondary that's emerged because there's this coupling I think we've all experienced that in some of over time. Because you might have more going on in And then of course, there's the quality how the system works and you start to we get bugs coming out the other side that Right. And obviously different architectures I've always found immensely challenging is how you ahead of time. And that's why you put that sort That's why things like restructuring right? Because I don't think any of us really exactly what's going to need to change a year have up front, we've designed it to allow and then the environment And you need to, you need to be able to put really hard to still do that restructuring lot of thoughtfulness, a lot of careful work and it really is a hit to the march of we And so being able to take that step back, try to get out of that technical debt is a tough thing for organizations to But sometimes it's a necessary thing Yes. Absolutely. And it is that if we're evolving quickly and we're adding we're going to have to go back and revisit all as always, is always very tricky. I think. related, which is the, the, the extraordinary And I'm not quite sure I have to articulate this from a multitude of open source libraries but we lose the ability, I think, to really don't have quite the right engineering principles You know, I remember at the start of my really how do we build systems? More like they of a Lego block system where as a kid you can and build these amazing creations. And I remember was talking a lot about software components We've gotten a long way towards that node and other frameworks, there's so haven't really thought about the interactions that So how do you analyze that whole system? How do And we're starting to create these really, infamous, you know, left pad example taking down that we have no line of sight to that. We power about where that system is brittle. How If you think of the DevOps type reports that are we know that there's a lot of vulnerabilities haven't updated the components that they built components. So I think we need a new way, start thinking about some of these system level able to sit down with our Lego Lego blocks, And now we really have to think from an engineering perspective of what is Charles Humble:I have a relation thing. This with a friend of mine. Here is, I'm going to say better than I ever was, but he has a particular which is that we can build these things But a lot of the components we build on top of, to kind of start again all the time rather than And obviously, if you think about this, you the premise is at least at least interesting. I think that that actually really resonates things about the open source ecosystems actual source code and the actual components. what's the ecosystem around the components. particular library, I might look to see Are problems being solved? Does it seem to be don't actually pay that much attention that ecosystem. So we've done some work the kinds of social and technical dependencies if you were a software developer today, right. part of a git GitHub repo to, to depend upon, to that component. When you add it to your think about the social dependency you're about need to to monitor the health of that component. repository for that component. And you would hope some level, unless it's a super stable component we've actually seen what we call backward social created the library component, actually, when to those that depend upon them to say, hey, And so we spent a lot of time on that technical that we could do about what people to people we're improving the health of those components, bidirectional relationship with the users Yes. As you were talking, I was thinking specifically around the book and Doctor Steven Organization. And the core of that book is really in large organizations. And actually, I've also done a lot of work on systems, systems thinking. organizational success is related to the kind but that conflicts with the way we often judge he was speaking, I was sort of wondering what communication patterns within open source We haven't done, we haven't done a lot in that both, the Ruby ecosystem and the Java ecosystem. most of the interactions being really the I'm going to depend upon you a little bit but less of this interaction, shall we say, The actual people who build them, you can to be based on preexisting social relationships or they're from the same organization. Jean's done and others that it's so the organizational structure, And we're seeing tools come out, you know, of design within your organization. open source is such a big thing. And we're not source ecosystem systems that have multiple whole other level that I hope, people like Jean There's a sort of related question now, Law, as is the classic that essentially organizational structure that Bill said. what does that even look like? Because there's structure is kind of often pretty, and So what effect does that have on Super good question. Right. I think that we know in, in at least some cases. But as I said, you end up with interdependencies because people as much open source in the, in the sort of most go and grab this, this component and use it, of of how that open source ecosystem itself is It'd be really interesting to individuals. It's often hard to tell identifiers in different systems. But, social technical interdependencies and Yes, yes. This might be, might really, but what you've obviously I resource projects in general. So what is good place for the kinds of research or Great question. I think they both are a and a terrible sort of a place to do very attractive to the software engineering looking at source code analysis, kind of the got access to repos and repos and tons of As soon as you start to want to ask organizational structure, and process, it gets a end up working more within the closed source that happens when you look at open source is, You don't know that much about how people that software. And so you're missing massive engineering of that system. And you often going with it. So it's a very particular kind almost think of it as being blindfolded for Well, open source has been fantastic for I think is also limited. The kinds of questions we're having now suggests that we have to anthropological sort of study and be embedded in some of those processes, or what many of source situations because of the richness of the Yes. Now, as I understood by your Excel example, to me. I mean, I've never seen the actual Excel throughout my entire career at times an astonishing piece of software, let's say, So it's a it's a sort of I think, to be able to go and look and I see pretty much probably every desktop computer in the or has run ins at some point. Just very fast, nice Exactly like a system that's evolved for, of so many businesses. Right? So many people, you know, a lot of pressure on that system to but presumably always has a need So really interesting to be able that that have been around for, Yeah, I would think first and probably yes, maybe yeah, yeah. And has, you know, has sort of programing languages, both basic then Visual Basic for applications and the, a sort of functional programing language, which fairly astonishing, the level of And so formulae in Excel, this is something else. it's probably the largest functional but no one ever thinks of it as a functional It's kind of astonishing what we and it's really such a testament to how It's really kind of mind boggling. We can use that, that it's almost hard to time when you had to do that on pen and Now it's, it's, it's a, it's an Charles Humble: We're running towards the end podcasts is really around technical leadership. you think the most valuable or the most important Wow. Leave the hardest question. Still ask. A little bit. But you know what it was that I'm teaching, what was fascinating to me was teaching always still has to learn, and how hard it is to about a few of them today, right? software development, you talk about you talk about coupling. And if I just use idea what they mean. But we and we can define massive ramifications as we build these really And yet we don't really have fantastic to say, well, here's how you exactly modularize rather than that way. There's lots of design but it's still so much of an art at I modularize it to meet these How do we build things so that they they have the right coupling. That doesn't just think some of the super basic concepts That's a great answer. And I think and I think seemingly very simple concepts, my understanding I've been in the industry roughly 30 years, I my understanding at 23 versus my understanding think it's just really useful, I think, to revisit all that understanding I had was It's fascinating. I think. gal. Thank you very much indeed. I've really thank you very much for joining me on Thanks a lot, Charles. Always a