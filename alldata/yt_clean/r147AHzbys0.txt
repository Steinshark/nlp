JASON LENGSTORF: Hello, everyone. And welcome we are bringing back one of my community. We're going to be learning teach us all about it is just a good RYAN CARNIATO: Hey. How you JASON LENGSTORF: It's been quite a while since RYAN CARNIATO: Yeah, 2021. JASON LENGSTORF: We are long overdue familiar with you and your work, can RYAN CARNIATO: I don't know I That was just kind of the start of my journey into writing articles about what it was like to of topics people don't talk about framework JASON LENGSTORF: And that one's Marko? RYAN CARNIATO: Yeah. It is very similar to Astro. in with them and the Quick people and all the next thing you know, I found myself working at obviously. Having great experience working, you publishing articles, hack and my ideas. Anything like, you know, moving things in a way forward important that yeah, there's different aspects, but the most important thing to me is ensuring buy in in an architecture, is it buyable? Does benchmarking and measuring things and trying frontend development. JASON LENGSTORF: You've had a very substantial you didn't invent signals, but you were after you reintroduced the world to signals, it every popular framework and since then, it seems working on Solid, but very heavily embedded I think a pretty impressive wave of where, like, all the different frameworks moving them in a way that feels healthy. It sometimes it feels like people are competitively it feels like everybody's working together to the last few years in the framework land, feels RYAN CARNIATO: Definitely. I remember people had really drawn sides a bit. There was, on the other side and there was this templating like, assumptions of where the world had to is one of my early challenges with Solid, why can't we do this? People are like, that's Solid came out as this thing that shouldn't exist. it wasn't possible. Right. They kind of and it just it opened up the floodgates in a that you mentioned, a big one. Signals were over the year. [Indiscernible] really What we discovered and largely, this fine grained rendering was a thing. It's not about adds more to your framework. Signals allowed us to the assumptions and once we started down that it took a long time in JavaScript years. showed that this approach to rendering was a lot of the advanced feature's concurrency. Now fast forward, eight years, and Angular's moving this, Preax, almost over has actually moved over, you know, like, it it's taken eight years. I evangelized for ages. signals thing. This is part of communication meta framework. We've seen, like, bundlers once you bring in SSR, the complication goes way. You have to have better tools to build with. JASON LENGSTORF: This feels like another space concept and then a unification because this is where, like, Nitro really kind have to rebuild every single part of a framework if you didn't have to build a frontend Also, I did a stream recently on Vinxi, which I RYAN CARNIATO: Yeah. No, exactly. It's been three along this trajectory. And but, yes, this kind of evolution. Vite really kicked it off. we support SSR, it was like having Create but somewhat simple things. Like, um...having the Webpack, here's a plugin for this environment and this is for prod, this is for SSR. Vite was and you'll make a singer plugin that works a minor thing. I think that's why ejection I saw Vite and that was finally what tipped everyone's like, Solid needs a meta framework and write a framework. It's very difficult. It was hard enough, as a It's very key, these days, for adoption, because with Vite and Nitro and Vike is another one. It they're trying to standardize on these things. like the browsers all over again. You have a spec We spent years people hopefully now are their fault, you know what I mean? It was the and some couldn't keep up. We're in that you know, different providers are like, we Vercel. We offer these features. And, it's very many of these facets and at a certain point, you developer and even for us, I would have loved go. There's even more considerations when you You're like, no, this is still a mess. We We're too low level. We're too mechanical. And Solid because you got a small ecosystem and let's this? I couldn't afford to break the ecosystem components. I couldn't be like, guess what, you JASON LENGSTORF: I would say React is the other community that's tried that break, RYAN CARNIATO: Angular, too, I guess. at the idea of bringing server to the client, I these client libraries, I want to use every single Solid 1.0 release, I'd come up this idea. I didn't did a proxy thing with RPCs and I actually called forms or anything. I was just trying to think, command query segregation. I need a term for this has actions and those are different. Whatever. I'm with these RPC calls and seeing Remix for the this is kind of cool. And I fell in love with this being route level. I want to be And, I it's so funny because I was going to like this and they're like, oh, you've heard of It's still too much. Like, I want it to just be a came to me and he basically built a compiler road. I don't know if you some of you remember, become server functions to everyone. You write a it's an RPC call. Code splitting, it's really the client side but haven't navigated to We went through a lot of iterations I'm going to build my framework manager thing. the deployment partners. I don't want do figure or whatever. That's Daniel kept on telling it's hard to make these things agnostic and you'd we're doing this. How do you even do that? community and take our multi bundler, built on and that's how Vinxi was formed. Once I saw SolidStart on this because I can't maintain In the end, we built, mostly because of piece that would work for any meta framework. we built it with React in mind. I'm sure you'll JASON LENGSTORF: And that's built on Vinxi. RYAN CARNIATO: Yeah. Both of us didn't want doing all this exploration, we stumbled on ideas impactful on the rest of the ecosystem. Server classic Solid way, switched to using server from React popular and I wanted bundler Solid we switched to the array destructuring approach. brilliant and I wish I had thought of it earlier. server functions all across the map, which is a mix between ours and Remix's reloaders. always working six months ahead. 1.0 out in May. other side. I have to kind of go back in time [Laughter]. on this show because it's a good test. This is how making things intuitive. Great moments come that moment in your stream when it was like, state for Solid? It didn't occur to think of inside the component to outside and we had global JASON LENGSTORF: I love it. I love it. I mean, audience and then I want to actually jump in and about how you're always working six months ahead. ever since I met you. What are you doing to RYAN CARNIATO: Yeah, it's tricky. I definitely got to points where really tired of doing bug fixes every day, working hardest thing about this, as long as things are When things inevitably hit those slow downs, repo over time, I've tried to keep the issues quality of what we put out there. SolidStart got manage them. [Indiscernible] had started a new he took three to six months off from open the stockpile. There were people helping It was beta, so it was fine. I have 1.1 bankrupt important to have perspective, sometimes that think I think that's key, but I mean, it also where they motivation comes from, all the time, forward, you know, it you know, I just, like, find some way of just address like, you know, to step away from a problem, often not doing time, which has always been the hardest thing more work done and that wasn't true. You know, to give it time to breathe, to actually, like, JASON LENGSTORF: The abstract part of process you're exactly right. You can't work your way you understand and let your subconscious organize RYAN CARNIATO: There's a follow up question something I avidly do. That actually helps a we're actually all avid hikers. We're Jose now. It's it's one of my favorite JASON LENGSTORF: I'm not I don't hike in 20 minute walk through the city to go to a coffee to me I use it for the same thing because computer. Walking, head down, sorting through I'm very much a fan of just a walk. A walk it forces you to think instead of do and I really Okay. So, I want to make sure that we have bump us over into the pair programming my screen shared here...and, hide that thing. make sure that you head over and give Ryan links up in here, get on that YouTube We're are learning today, thanks to Netlify, here, from White Coat Captioning. Let me put down at the bottom, if you want to get We also are going to be working with Tuple, using it so Ryan can point something on the to mine so we are able to work faster. We've been talking about SolidJS. Let me throw episodes, in the backlog, about Solid. be talking about SolidStart, so let me Ryan, if we want to learn RYAN CARNIATO: We should get a project place to get your project going. We JASON LENGSTORF: There's a couple of those things down here and we'll get back here and I'm open and then I RYAN CARNIATO: We can do The question is, do we want to do a basic project funny first decision and it says a lot about Because SolidStart, at its very base, does It's we've tried to build the meta framework we built it very much with this in system but it can feed into any file router. these templates throughout the course of we can just start with let's start The thing is, the bare template, while very it's like Create App, back in the day, or I think most people are probably going JASON LENGSTORF: Great. So, I'm running &quot;get init.&quot; And we are going to open this up. All right. So I'm going to maximize this again. RYAN CARNIATO: Exactly. You can see the Vinxi the bare one is that there's a router, which without the router, I think it bundles to 4.5 of 9 or 10 kilobytes. This is the basic setup for we're going to solve SSR, we're going to solve SSR know people who use Solid router or like, working on stuff, like TanStack Start. There's I'm done with React, I'm going to use Solid and them to be like, oh, I have to switch from Next a way we can preserve any client side API. convert it to Solid query, that's cool. But if we can call that server function directly. to actually show the functionality, in a minute. JASON LENGSTORF: Oh, wow. RYAN CARNIATO: Which is very similar to Vite Not everyone's ready for their app to be SSR'd. between SSR on and SSR off is a toggle switch. a lot from Remix. Pulling back in the why SolidStart is so lightweight. The router has you can have the opinions and pull those in. I'll My point is, right off the bat, you can get that false. Now you are back to where you were. You But we're going to do more than that, I mean, on and off doesn't really matter. JASON LENGSTORF: Default's true, so we'll RYAN CARNIATO: Yeah. And let's look at let's what the project got installed with, just the few files. We looked at App Config. JASON LENGSTORF: This is a weird thing, they do it figuring out how to turn it off. RYAN CARNIATO: We have a few entry which which is basically just, like, render call in React. We made a wrapper called render or hydrate, based on what mode you're If you had some specific stuff that you want up a service worker, put it here. It imports If we go to &quot;entry server,&quot; it's a server of like our index HTML. &quot;Start server &quot;gets a this is where we've diverged a bit. We figured, what people are using. So, this this is only this only rendered on the server means that You see &quot;div id app.&quot; This is like the starter you ignore these two files. You go right to because app.tsx is where export default app you As you see, in this example, we have context most people, the only thing that they'll probably Routes, that you see there, which is just a that we get from from the file system routing, exercise, why not. Can you above default JASON LENGSTORF: Does that RYAN CARNIATO: That should show up in maybe refresh the page. You know what? It's to restart the server. On the client, we see it components. That's and this is Vinxi's file our router takes a component prop, which a preload call on it. And then we have info to say see that slash, if you go down to the let's path, like, &quot;/404.&quot; This should be another So, like, essentially, we just you can remove some of the extra fields on here. path and info. It doesn't we get this metadata any file system running convention. It's So, this has kind of been our approach. Everyone pain to get everything aligned. I picked one whole different debate. The idea here is all JASON LENGSTORF: Let me drop a link to this already taught us how Vinxi, itself, works, So if you're interested in that, you'll see a will look familiar when you This is an extremely lightweight setup. There RYAN CARNIATO: It is like route preloading and has file system routing. I think it's an important right agnostic tools and why we had to create about Vite, for me, is index.html. It is it where you want it. It doesn't go in the source of conventions are the hardest things to fight SolidStart on Astro, at one point. Big fan of Trying to find the right tools that step we're trying to respect that the best of and harder to do that, so, yeah, but this is you would expect. There's an index page and it will just like, the index page is what the counter. Hello World counter and then JASON LENGSTORF: Just a heading. RYAN CARNIATO: Exactly. Right. The whole say that render or server prerender we support that start navigating around, it's all client side JASON LENGSTORF: It's the standard approach right, out of a framework, is that it but we expect it to do the single page RYAN CARNIATO: Right, right. This is no We've just been working a lot on kind of honing And yeah. So, the there's I guess, we maybe something we can do is make show some itself, that is actually unique. We that's a big one. The other are these server functions. It might be just to kind of get a feel for what it is. where we mount it. We could make a button We can make an async function. Call it &quot;Greeting.&quot; Right here, put &quot;use server.&quot; that the content of this does not run on the here and what should happen is if we call this we can wire that up, we can just add another JASON LENGSTORF: See how fast I can do RYAN CARNIATO: Right. We should see the message not on the client. Right. And you can see My This is the most basic example of a to see incredible power here because, Can we add an argument? Like, put a name JASON LENGSTORF: Okay. Um... RYAN CARNIATO: Now look at what happened over TypeScript is telling you, you didn't call it. over, say, normal API call. Because there's no different ways to get the request and stuff. You existing APIs. We're doing click handler. Let's Jason.&quot; &quot;Hello, Ryan.&quot; &quot;Hello, chat.&quot; There we go. is you know that special. We've seen is all this is. This has no other behavior. have a crazy serializer where we can serialize mean I keep I undersell how powerful this have it stream the content back over JASON LENGSTORF: I mean, the thing that's standpoint, I have a function and, like, just by saying where I want to use it, I'm able to right. This is the sort of thing that this seen happen, in other frameworks, you have of .server or .tsx. Or remember what the call be called in a certain way but if there's a whereas having things like this, don't run this on [Laughter]. doesn't seem like a big deal until you realize how it's easy to undersell because making something to get there. RYAN CARNIATO: The serialization stuff is really stream data and do stuff. Which will come in But what's important for us was, this was the cool stuff, like, actions, like, Remix does, invalidate it and then refresh the data and responsibility. SolidStart goes, oh, if Use your exact client side APIs as they are. The the server function that might not be obvious is on the server, right, and they won't do an RPC let's put &quot;hello, chat&quot; here. Or, &quot;hello, the page I guess we have a bit of a &quot;hello, Ryan&quot; initially on server here. And then go back...you'll see, JASON LENGSTORF: It's being called on the initial write an SSR function, so the equivalent and I do, like, a &quot;get initial props&quot; in, I know this is going to execute when the static generation, it calls then. Also, on click handler without changing the under the hood to be the RPC call so that RYAN CARNIATO: Right. And also when you navigate what I was trying to get at. If you go back here, was rendered initially on the server, because you can get it on the client every time you go server every time. The data fetching, essentially, whether it originated originally on the server JASON LENGSTORF: Yeah. Yeah, yeah. I mean, this is great. Like, this feels really Do you have guardrails for client exclusive RYAN CARNIATO: This is where things get a little just error. One of the places it's more It's possible for tree shaking to fail in some which means that it basically won't let itself a bunch of fancy we did an older version tree shaking. Generally speaking, JASON LENGSTORF: It'll error entirely? RYAN CARNIATO: When you runtime it. I think the more important thing is that in have something called, like, server only, where in the client code. I haven't built that. is server throw,&quot; I haven't actually built the very quickly and basically you can mark ever got in the client build, the client JASON LENGSTORF: Can I do something I can come back out here to my index and and we'll say we'll call it, &quot;hello,&quot; the server and instead, I'm just going to and...right. And so now when I click this...did function... and it doesn't work. It does prevent RYAN CARNIATO: Because your secrets are there are ways that I could think of um...like like, with Next and other ones there is a potentially way to to paying attention, like, forget to put like, a secret just like this automatically has JASON LENGSTORF: I also realizing I'm calling RYAN CARNIATO: Meta stuff has been bugging me settings. I wonder if I have to do process.m. JASON LENGSTORF: Ah, there it is. And if I RYAN CARNIATO: The client I don't think [Indiscernible] because it JASON LENGSTORF: Yeah. It's doing the like, this is super cool that RYAN CARNIATO: The reason for this, as I the functionality that it starts. I wanted to do which means I want to jump to another install script and just jump to it. demos I could show up here. There's one with let's do the Notes one. That's the super one that by the React team when they wanted to showcase mental model. Even though the boundaries are more know if you've been hearing about skew protection prop, suddenly, like, basically because the is API surface, any, like, code change could too, with server functions. But generally people functions. There are places where you hit that. like, anywhere throughout the tree, in just the which means this isn't quite as volatile. made this demo without server components and Let's play with it first and I'll show So, let's give it a title. There's a JASON LENGSTORF: Oh, nice. RYAN CARNIATO: And then when we're ready, we can hit &quot;done.&quot; This will update our note we can what else can we do in this app? JASON LENGSTORF: Oh, cool. RYAN CARNIATO: Yeah. And then we can also, expand the note...and then click &quot;new,&quot; you know, a complete client app. We're not losing state. Yeah. Yeah. I mean, if yeah. If you hide it's unmounted. But if the other note that's Now, let's look at how the this is I guess I could have make it work in JASON LENGSTORF: It's a demo, right? RYAN CARNIATO: So this this app if we that different than the other one, except and it has a search field, um button. The notes note list. You see this when you initially load the reloading state. No, it's too fast. JASON LENGSTORF: Let me throttle it. RYAN CARNIATO: It's also possible You have the ability to choose whether the by default, we stream. But you have server waits until that piece is loaded JASON LENGSTORF: It looks RYAN CARNIATO: We can actually that, or it's really fast because it's local. yeah. Let's let's look at a specific Let's go to...notes inside notes. &quot;Home&quot; do Preview. The brackets for us means that I hate people having to write the same file 50 million folders. I hated it so much that put parenthesis on the file, that means that's JASON LENGSTORF: So effectively, the parenthesis are giving us a chance to label it. But RYAN CARNIATO: Yeah. Exactly. So that's like your see is what most routes look like in SolidStart, async&quot; call, which is where we do our data above that, there is this route config that also like duplication, but the idea, here, is that you a good idea when you have client involved when the second even if the code hasn't loaded for in parallel the data for that next page. But, for us, we this is we call it a is this route config satisfies route definition. Solid router. If we didn't use Solid router, config is for your router, this is part of the It has a preload function. If yours has loader, JASON LENGSTORF: Oooohhhh. I RYAN CARNIATO: So, this is just our convention, what you'll see is a function being called in the used. And, the the function, itself, &quot;get see is functions. The server functions would are doing operations off of [Indiscernible] using it in a file system storage, in this functions here, they're just using these I might have put &quot;use server&quot; functions. I to do with server functions, themselves, action wrapping these server functions. Cache the second argument, &quot;no preview,&quot; you can set and automatic de duplication on the server. And if we scroll down just a little bit so JASON LENGSTORF: Clicked the one button. RYAN CARNIATO: So we can get the bottom of using a form data, but it's actually Let's look down at the bottom. Return It's based on Remix's approach, but the you can like Remix. You can actually tell it, say only &quot;only revalidate this key.&quot; This is it's a behavior of actions. We've and given it a whole bunch of superpowers just by wrapping them and because you scroll JASON LENGSTORF: Oh. RYAN CARNIATO: And redirect. They come from If you don't want to use any of this stuff have their own cache and mutation. The key part caching is automatically restored. This magic this, it will automatically serialize and manage fetch it on the server and then send that data, without it refetching. At some point later, you'll JASON LENGSTORF: Gotcha. RYAN CARNIATO: These systems just keep the &quot;save note&quot; does a redirect to the next we actually know, while we're doing this action, JASON LENGSTORF: We've got the data here. RYAN CARNIATO: Well, we got the data, here. But with these action loader patterns, you perform data out. Same thing with TanStack. You you know, in classic HTML forms, you the &quot;get&quot; and you get the next page you're Can we go back to our notes example and can JASON LENGSTORF: Oh, oh, I gotcha. RYAN CARNIATO: I want you to open the for a second. Yeah. Let's get the network going. can we change, actually, the filter to &quot;fetch&quot; JASON LENGSTORF: Okay. So, it's in here. RYAN CARNIATO: Now, when you hovered it, another the post. Look at the response, for a but I wanted people to see this. It this is showing our advanced serialization. We're the data for the next page while you were still on what would happen is you would post your data and oh, sweet, it received it. Next page, load we had those preloader functions, on the server, I'm going to redirect. While it's in flight, we Instead of doing two requests for a post, we can this advantage straight to client frameworks. JASON LENGSTORF: Fascinating. Okay. RYAN CARNIATO: We remove the waterfall on mutation we can do this without actually know this information. This is taking your improve the time. When you do a mutation, update the stuff yourself. Right. But what Remix the reason Apollo was so hard was JASON LENGSTORF: I was literally about to cite with optimistic updates and if you screw it oh, my god. The fact that you've sort of is really nice and knowing that when I'm looking this to function, is, I have to remember my cache RYAN CARNIATO: You treat it like you have to do a waterfall because you're on check; do my validation. But JASON LENGSTORF: Yeah, this is too, with the way that SolidStart is it will solve this problem for TanStack query, RYAN CARNIATO: This piece is unique to ours. I'm difference between preload functions and Remix on the client and the server. We can do stuff started really diverging from server components. page and you perform an action, what happens with page. It rerenders everything. You have to fetch in the case. You put a cache. This is why Next go to the pits if you have to fetch every single the server because the server is the only thing You get in there and you have a couple ten sources here. It will be like, yes, those don't. But it still rerenders the whole pages you costs any money, you needed to have a KV. like the cache still lives inside of the client. client side routing approaches, where you client basically knows what's cached so it be fine grained to exactly what needs to be to invalidate those two things. If the next thing Pretend you have to fetch three new things, you those things. We use a combination of what page JASON LENGSTORF: This is one back in the almost 10 years ago now, when I this was a problem. When I moved over to we were trying to figure out, how do we do a huge foot gun for people and understand interconnected and we never found a solution And what's really nice here RYAN CARNIATO: No, yeah, exactly. That's what server. Like, that's the extent of you buying into functions. Now we can control serialization mentioned those places have primitives. Netlify with Netlify's CDN. If you set up your data to be have the separate server functions or pieces, then in the same places where we say, hey, invalidate actually, invalidate through the CDN for this Because we use responses. Return/redirect. like, it's very brilliant to use web solved the problem that has never really we've removed all the waterfalls. will argue about waterfalls for all time. We than they don't need [Indiscernible] JASON LENGSTORF: This is the part where I feel if you solve a problem by inventing a new standard problem, you're fighting a losing battle because order to match the new way of doing things, right; people are already doing most of what they need don't have to, like, do major rewrites to their in their mental models. They don't have to how the new code works. They just get to keep gets more useful because the thing they're doing RYAN CARNIATO: Yeah, no, it's great. Okay, install the classic to do NVC demo here? Let's more feature to show you. I think we have the best JASON LENGSTORF: And then we're going to RYAN CARNIATO: And yeah. Sorry, I haven't been keeping up with JASON LENGSTORF: Everybody's been keeping up. Y'all, keep in mind, we got about nine minutes anybody's got questions, you can drop them in. them for his next stream. RYAN CARNIATO: I just want to show this one off. You could play with it for just to kind of show the functionality. But this JASON LENGSTORF: I'm going to open it up, so people can see what it looks RYAN CARNIATO: Add a couple [Indiscernible]. You see the purple? That's actually JASON LENGSTORF: It happens fast. RYAN CARNIATO: Yeah. There's there's JASON LENGSTORF: You can see the color change. RYAN CARNIATO: These are all single flight showed you earlier, it doesn't do two. On the You'll see that when we do the mutation, it'll like there's the to dos coming back, like, SolidStart diffs the data. No component's rerun, updates. Oh, now it's checked. Single update. one file. And, from Lib API, I made a right. They're going to look just like we do in storage from Unstorage. You could pretend this is server and they're wrapped into cache some action. see some code, here, and what's what we've have that optimistic state so let's just pause in Solid is that there's an action, toggle to do on your page. I heard something where you can You can have something in the top corner, And you can just have the same action basically that from your input, you can identify that type toggle to do that matches the idea of JASON LENGSTORF: Got it. RYAN CARNIATO: And you might be going, for Well, as it would turn out, as we scroll down to do. It's toggle to do with to do ID. I don't something to your action, we use a &quot;with&quot; call this action, with this ID and all the form then the next the next argument will be keying the action, per row, here. Sorry. Let's help no, you scroll up a little bit. submission, while it's in flight, to make smart There's three different submissions you end up combining the states of all these one to see might be, if we scroll down a second &quot;for&quot; loop under the Main &quot;for&quot; loop. are in flight, that haven't been submitted yet. ones that have already been submitted and tease JASON LENGSTORF: Ooohhhh. So if RYAN CARNIATO: Or set the delay long. But, JASON LENGSTORF: I got to go faster. Yeah. Yeah. is not wild to think about, like, this is a just pulling anything out of if it's RYAN CARNIATO: Exactly. We have use can choose whether you want it to be a list it's a list. It's very easy to make a list and fun calculations you have to do when you do minus the completed length. It took me a minute means the optimistic derived values also you update the counts. You actually see the And, yeah, I thought Remix was really kind of things because no cache writing here. part of the optimistic check. You have these anywhere and then update the UI and between this the extent of your cache mentality is basically keys. You're never manually writing to the cache. developer experience that I was going through. updates. Et cetera. This is a crazy thing about go really deep on any specific thing because submission comes from the router. Like, this JASON LENGSTORF: I get you. Yeah. Well, I feel like we could look at this stuff just a couple of minutes left actually, want to learn more I'm going to direct to the to your your links. Where else should RYAN CARNIATO: Honestly, if they go to Solid et cetera, I believe. We should have access to click on &quot;documentation,&quot; it's all right yeah. Everything is there. Between GitHub, JASON LENGSTORF: Awesome. Well, thank you so for covering the captioning. Thank you for being here today and thank you to Make sure you keep your eye on this page, here, stay updated. You can get into my Discord if including, we're going to have Waku come on. Keep your eye, I'll have the schedule updated. with us today. This was so much fun. Any RYAN CARNIATO: Honestly, just keep stuff because you never know JASON LENGSTORF: On that. We're going