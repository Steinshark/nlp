These companies that they have an And that's why I, was never interested on Rails because I noble ideals about and we should keep it complexity instead of layering it away. And I'd go like, all because the and grow a business would overwhelm that. And I would end up And I'm no interest in Today's guest is David Henemeyer-Hansen. David Baier is frankly embarrassing. He's the creator popular development the co-founder and CTO at and a professional racing In our chat, we explored many of including excessive the role of AI, and We also talked approaches So let's dive in after Hey, David, welcome, and thank My pleasure. So, David, you really need no on Basecamp, and all your ideas that about software engineering. So this was at the same time, I think, maybe the easiest because I'm so familiar with your ideas, but also the hardest because I had So I will start because a few days ago you published a which I loved, and it goes complexity and which I think is a You have talked about this many rolling your own auth and many things, and it made me because a countertake might be by adding layers makes us work at not care about the details. So what is different here? Do you believe that today we have and should be undone in some cases? I think the problem is the stack just gets taller and taller, and very often to understand the you now need a And that really is the essence I am not interested in building if it requires us to have a huge team, and each member in that team has to be, I'm a front-end whatever titles might in order to build something competitive. I want to work on tools and to build a competitive business, really, online. And the method I look at that not packaging it, not but compressing it such that you're It is just, it's less, and A good example for me is ActiveRecord, which is the object When you use ActiveRecord is an-- it is an attempt to compress and not even necessarily You still have to have an once you get to a greater scale. We're not trying to that there's a SQL That was one of the or battle of ideas that we When I first started working on Rails, there were things in the to erase this idea that you that you even had to or joins, or whatever, was wrapped in sort or different dialect of it. I'm not interested in that. I want to compress so you have a connection and then enable a single and capable of building an entire system that they can Basically, what you're is not really removing complexity. It is replacing, of the layers on the lowest level with some different to the new layer, more specialists, and Is this what you're saying? In the essence, yes, or a million great examples, but if we take one example for me, around system administration, a lot of developers have is outside of their realm. They can't do that. Could someone just wrap Could they wrap that that then I can try to understand it? But it still boils down to servers, and you very often as I've encountered and you go like, this is the simple way of running a service, right? And it's hideously complicated. That is so easy in your quest to try to completely that the solution become more complicated and becomes more sort of because we're so with some of the intrinsic complexity. If you are a small working on a system, you should aspire to have a basic You should have a basic understanding of, oh, here's some ports, and they're open, and I can SSH into Because if you're not you're going to be essentially, the a commercial package that then looks in, oh, you're an AWS specialist? Well, that's great. But no, not really. Like, what are you to move somewhere else? What if you want to get out of the class? If you understand the fundamentals, that has a tendency to be more timeless. And I think it's the with ActiveRecord. Whatever time you've how SQL works and how that's evergreen that stuff back in it's still paying dividends. And that's one of to become a developer about how to run a good business. Jeff Bezos, who happens to told Jason and I very early that one of the ways he was invest in the For him, with Amazon, are not going to that shipping was slower. At the time, it was revolutionary that Amazon could at the cost they were doing. Now they're It's continued to invest in that. And when I look at Where are you investing? If you invested in a for example, perhaps probably until the end of time. If you invested some of how servers work, how they're connected, and how you set them until the end of time. Now, actually figuring and what's not a durable technology, it's not always that easy. But I think there are where you can see a I think JavaScript, with some merit, has earned this badge of churn, right? That there's constantly new frameworks. They seem to And then there's That does not seem like a stable ground where you're investing for the long term, that those things are And that's probably one of the things I'm really proud about with Rails. So Rails is a web framework. There's a lot of churn in web frameworks. But if you learned and you learned you can absolutely The Active Record of today, there's more. It can do more things. But the fundamentals are very similar. In fact, you can go all If you go back to the the 15 minutes how and you compare what the to a modern Rails application, even to a very large Rails application, you could find a huge and even something as big as Shopify. If you open up a Shopify controller, you'd see something where like, hey, there's a So I'm trying to do that strategy, investing in things that is that my own but also the work that I have that same quality to it that we're not just and throwing them out and I think that's one of of programming as a profession, is this idea that there's no residuals. That you're like every year, it's like you're and you have to and that gets tired. and it gets hard to keep up and all the other things, right? How can we counteract that? How can we make sure that such that if we replant next year, we're getting the benefits of the and the decade before that, that's up here in our little brain pod. -Yes. I love this angle, and obstructions that do not-- I mean, the good based on what you said, that from the underlying And I think Active And so you're making the case For example, you and you've said this many times, you can just run your own VPS But do you think Or is it like that maybe today it's 2024 and maybe tooling for has caught up with what is Because, for example, and as for my understanding, back then, it was not easy to create a But maybe 10 to 15 and we don't have to go those SaaS tools to do this. I think that's spot on. And a parallel I like to So someone invests a lot of of dealing with diabetics, for example. And they're granted a I think, I forget how long, is it that they have an and they can profit from the fact But then at some point, and it becomes a and it becomes a commodity suddenly. The compounds are just being how they could come up but they know how to manufacture things. That's good for the world. It is good for the world on both ends of it It is actually good for the world and I know pharmaceutical lot of shit for... expensive drugs and whatever But what's the alternative? Would you like to not have new drugs? Would you like to not I think the patent of that regime in a good trade-off. We will reward the companies that come up with new they hit the jackpot on something. And then eventually we will turn it into generics and we will Heroku to me is exactly that. Heroku when it 2011 something in ergonomics. of how a developer would that they justifiably from that and they reaped But now well enough time has passed that not only had the with when we talk about deployment, particularly containerization, that was really the tipping point, right? When we went from a way of deploying where we're just sort of that had to be meticulously configured by some system administrator who would sit down for four hours. browsers to set all the dependencies up. Then we moved over to a containers that are widely shared, that you just depend from a root image, you just add your and no longer do you need to Once we moved into that, we. had enabled the possibility the economics of a That's the work that I've been ever since we decided that with Basecamp and Hey and the I wanted a generic toolset, a but had the I was not willing to say like, Let's go back to pet servers where before it's ready No, no, I want the I want the one command. I want all of that and we can have it. I think the same thing, for I don't even know gag a little bit It sounds so pretentious, but another word that we Let's just call it Modern web applications For quite a while, to that's actually a word I like, to high fidelity user interfaces that and can be contrasted with reloads and If you wanted that style you were forced to of complexity and and complexity from and up the wazoo. And when folks looked they were very eager to think, can I just pay someone to avoid this? Can I just pay a platform somewhere to figure it all out for me? And we lived through that era for a while where it was really and a bunch of Then the fundamentals underneath changed. Browsers caught up. Suddenly you could that could produce those using nothing more than old that you shipped straight to a browser without manipulating And there was another example of like, you know what, you where progress, real it is real progress, is locked up inside of these sort of premiums, complexity premiums that you have to pay. All right, I want a modern app, I don't really like how to work with it, but I have to do it. We went through that with Rails. I integrated Webpack with Rails, and what was that, And I knew going in, in terms of conceptual but I want the thing, I want the feeling of and if Rails is going to stay in touch with new applications we have to do this. So I sort of held my nose a little bit, begrudgingly accepted the complexity, and then the second I or the patent time was that now I could get the same outcomes without the corresponding complexity, I was like, yes, sign me let's go to hashtag no build, let's do all of these things just so we can get just so we can compress the complexity. We're still in contact and when I work on I still have to know what a browser is, and how the DOM works, I I don't want to but it is so much less to take up, right? No wonder in that past we ended up splitting the industry. Suddenly there were front-end developers, and those front-end developers were completely different category and beast than the back-end developers. I don't think that was a healthy thing, I think that was one we've created in that we were so much better Full stack has, I because full, or quotes, it sounds outdated, it 20 years ago maybe, or 15 years ago, and I was like, no, no, no, that's not how we're gonna look at it. We're gonna look at it in terms of the amount of can wield, and if which we were for quite a while, that's what the whole split is about, it is about saying a single individual is no longer capable of so we have to get front-end developers, and they have to be because no single That's an admission that that we cannot are able to pay it. No, no, that's a failure state. I mean, we should okay, maybe just like with Webpack and some of this other complexity, we're gonna hold because we want the outcomes, and we don't know how else to get it, but we should absolutely be working on solving that and making things straightforward enough that single individuals and programmers can both do front-end and back-end, and we don't need - But how do you think that Is that because, I mean, is that there is and open source work that maybe is more than the rest of us, small teams, but is that enough kind of exploded even for small projects, or are there other incentives or stuff? What do you think? - I think that is a key component. A lot of open source, have become and the dynamics and the Like, if Facebook doesn't care if they need 10 different specialists and composing a team A small startup, When we started Basecamp back in 2003, I was the sole technical person. That was why I ended up with Ruby. That was why I ended up building Rails, because I needed to build tools that made that single developer, me, so productive and so because it was never in the cards that we were gonna to build the first version of Basecamp. The alternative, if was it was just not gonna happen. And this was something I talked about in my Rails World keynote from last year. I think this trend was being extracted from large companies merged with another trend with the SERP, the zero interest rate phenomenon, or whatever that stands for. Where for a while, a lot in very lavish ways to the whether the tools were productive or not. It didn't really matter or 10 or 20 to build the first prototype, because the money was Now, that phase has ended, and I think this is one of the reasons why we're starting to why we're starting in reining back the complexity, because it's simply unaffordable. We simply do not lots of companies to squander it in these ways. And you have that. And then you also have the third dynamic, which is something I talked about in the Merchants of Complexity. Complexity sells really well. And this is one of the sad realities, even of open source software. A lot of open source software, as soon as it gets tied to that's trying to advance it, and plenty of examples of that, there's no longer an In fact, there's very high incentives to continue to complicate it. Because if it's not complicated, why do you need Why do you need their upsells? Why do you need all this other stuff? Simple software doesn't It doesn't require the consultants, it doesn't require as much training, it doesn't require all of how you build an open source business. Now, is that a sort of conspiracy? Someone's like, oh, software so we can sell all these. No, it's not. But incentives drive behavior. Often they drive behavior in ways that people who are It's the same, what it's hard for a man to relies on him not understanding. That's what an incentive is, right? - Love this quote. - These companies that they have an And that's why I, was never interested on Rails because I noble ideals about and we should keep it complexity instead of layering it away. And I'd go like, all because the and grow a business would overwhelm that. And I would end up And I'm no interest in So to avoid that, I have to firewall the two parts of the business. I make my money and then I enjoy without-- without a commercial or how they use it or not, which means that I don't as a merchant of We can stay more true to a coherent model of how we build software, even if it isn't as generally appealing, it isn't as responsive This is one of the reasons, for example, it created such a from one of our because people had this idea, the market is asking for type safety. The market is asking... for more TypeScript. Why are you not delivering what the a shit what the build software the I want to keep it typing. I don't like like JavaScript. I think it's a wonderful language. It's my distant second, but Ruby. And I don't want Now, I could say that other people are that they enjoyed. make me do it too. or that ability to would give you Right? Like if we board and that board the growing be like, uh, we should Can you get one way or another? I Do you think, do you think is that unavoidable? I mean, I and probably you the interview to and he talked frameworks backed them and provide you know, murky you think that, uh, because in a way the providers incentive complexity or this is unavoidable? you try to make open source commercially viable that way by it leads to tendencies, uh, The short answer. what the incentives companies are more successful than incorporated by individuals who feel more strongly about keeping resist the pull of others, but the overall industry is going. And I think to be so contrarian really with the rails work and the world incentives are just So to exist outside you get to float looks disconcerting, that why are you not are you not following but that's the outside of that from those in the parallel before think it's actually medical industry. to creating profitable to come up you have to take certain condition cure, a cure you can you might make a treatment plan that year, like that's a whole world has we all want revenue. We all want other things. We don't anymore. That's turning people into a into the coffers, too, to some degree Like we sell Basecamp is why I can recognize oh wow, that is a just pulls you, pulls also why I'm trying even in the commercial that was born escape those to being a product instead of a service? And that's in the commercial. But that's always how I I don't want a service. I don't want to be on the hook for supplying you something where I have No, no, I'm selling you. a toolkit I'm selling it to you. I'm This is a gift. Now these are your tools. Here's a hammer, here's You could build amazing things with that. You could build a freaking Taj Mahal if you put enough But it's a gift I'm not liable if you and one of your fingers is cut off. The saw needs to be sharp, or sharp. Otherwise it's not cut off a finger too. Great, that's part of the package. That's the deal, which open source and my involvement into it. It, this is, I look And actually even It's not an I show up to the gift exchange and I go, hello everyone, here's that I needed for myself. You can have them for free. If you don't, I'm reliable. Do you have any tools you might share? Could we trade? And that's how that we have over the years who have And we've gone back and forth. And the total net sum of all that gift sharing is an the opposite of the Like it's the spoils, That's what open Love this, love this take. And I love the work You said something MRR and because it is more profitable. I'm actually not 100% I think it's more predictable. And that makes people more comfortable. But sometimes I can be just as I think they're a tricky But I wouldn't count I think that's a wonderful point. And I'm thinking of another Movies have gotten And as they've gotten more and more And other people's money often I want a predictable return here. I don't want one day to get zero back. And the next day I get 100x back. Humans are very risk adverse. And generally, they So this is how we end up with a trillion sequels, that Everything has to be a Marvel this number 27, because that's where we can get things to. And that sort of A lot of the sort industry lately has haven't been working And I think that's the same We went quite a long time where everyone just accepted the software should be And then eventually the consumer, whether that consumer is wakes up to the fact, hey, wait a minute, I'm paying for 475 Yeah, each individually You add it all up and it's This has to change. And that was one of the reasons why I was interested in the feels like a zig And we were sacking Like Basecamp that SaaS wave well SaaS back when you still have to convince people that it was card online. Right. And then you everyone has that's when there is new And that's how a lot of things work in. software both on the commercial side And I think we're away from everything Yeah, yeah, love this. And so we spoke a lot about And so I have to a couple of days I think it was an completely by of AI. And she made like a Harry Potter chatbot, I think we've So you have a about where And so I want to figure out where AI may take us. So first of all, do you use AI for coding even? I use it as a non And I love it for We started several months ago and questions in much the same way as I'm imagining if I was ask my pair to use this API? Do And I love it for that. But what before it is actively eroding your own muscles. It's sort of jumping into an exoskeleton and you go like oh use that exoskeleton and those muscles atrophy that is what muscles do right you either use them or lose them And I found this when I was working on Amakub. Amakub that, of Ubuntu, Linux, I wanted a environment, and I found that the had to learn so many different things to figure out, oh, I to put it all do you know what, I build a way to turn thing that has to a school to a into something great for a developer, me, my own. So I start working on on it in Bash, because I'm like, you use Ruby, but this feels like a Bash job and i just found that interesting It's about setting things up, it's about Bash is actually, it gets a not a hundred and five or so No, I would not. But as a configuration I think it's actually It was very As soon as I was trying to do something complicated that I'd go like, &quot;Yeah, Bash really doesn't It does not. Let me this that I could do just But either way, I hadn't So what I would do a &quot;How do I write this?&quot; Maybe I'd write some Ruby and I'd What I found was A, Holy smokes. What would have or Google, or whatever I was just getting the answer right away. What I also found was it was to sink in in muscle memory. I would keep looking up the same things. That to me was one of those, &quot;Oh shit&quot; moments. Like, am I Am I smarter at the end of this Or am I actually a little dumber? I don't have the full answer here. I didn't stop using LLMs. I still find them to be very compelling. One of the reasons is that Google has gone to shit. I remember when Google was because it was such a The web was a different place. It wasn't plastered in cookie There was just more direct information. Now, LLMs are the one where you ask the question So, I'm not against I think it's absolutely can sit down and make a whole program. It's very unclear to me And what I even want it I actually like programming. And I like I like that too. But I like programming in the same But several people in My wife plays an They love the playing. My wife likes to sit that we could just put on Spotify. We could just put that on Spotify. You don't have to work. You don't have to work for it at all. And we get to hear the music. No, no, no. I want to play the piano. I want to be the That's how I feel about programming. I like playing the piano of a computer. So what if I could So what if I could ask Is that actually what I want? Now, of course, at some between what I want and how the world changes. I mean, you could have &quot;I really like horses. I Exactly. Yeah, OK. You know what? That's You're not going to be - We have to talk But horses are still around, right? Horses are still around. They are now a bit of a And maybe that is what programming is going to turn into, That a bunch of privileged people who just enjoy that can But also, I think it's possible that we are in the peak of the hype cycle in much the same way that, 2017, Musk goes out By the end of the year, I off your Model S because It'll actually be an investment. And a bunch of other &quot;We will not even put Because, yeah, that didn't happen. Like, it's closer now to happening. - Ian Waymo in San Francisco in - FSD 12.5 is - Yeah. - We're getting closer. But when are we there? Right? You can think further back. I remember when I saw The Lawnmower Man, this classic And I watched that and I go, &quot;Holy shit. In like two years, I'm going I'm going to be an Yeah, no, that didn't happen, did it? We have VR today. It's better than it's ever been. I love playing, what is the Beat Saber? Beat Saber. The game. Great. Wonderful. Did it rewrite society? Not really. Remember the Segway? The Segway came out... Well, actually, you have to I think it came out They're like, We're all going to two-wheelers and And then even further back, in the 1950s, I think it was, all the pioneers of computer science went like, &quot;Yeah, going to have general AI.&quot; Yeah, okay. It's hard to make infact it is almost impossible And the best thing we future that's already That's that famous quote and you can and go like are we in that way Probably but what's very difficult is Like an AI that can write all our Can you manage Basecamp for me now? Just listen to some and you turn out pull requests and you Like that the general AI ideal, are we going to there's plenty of and that general AI that and that can be helpful, but we don't know where it is. And these things have the tendency to be very uneven, where we get a Then we extrapolate, if you just take that we're going to have general AI.&quot; Not a wonderful example We went from what we go from the famous &quot;It's going to be And six months later they're Whatever, 10 years after Another, what's that going to be, jet fighter. Then we went to the Yeah. We come up with intercontinental 1950s and they've just come up with shit, in 20 years, we're going to hour.&quot; And then it just stopped. It just stopped, right? We reached a ceiling where we're still dealing, I think the 7 iterative version of 50s. We just reached really improve it. Fuel economy has windows have gotten like they were in the 1950s- Pretty modest, right?! Now are we at the cusp of essentially a 1950s or 60s the of know. And isn't that exciting? Isn't about the whole AI this moment where We can imagine like, maybe three away, maybe the be rewritten in to think about, Yes. We're jet 1958. Don't I don't know what is going to bring us. think that impossible it's not that term. I think so. I'm most useful approach to approach these And I mean, you know, I feel that programming just I worry that that liability even tools. So I try, I And by the way, I Bash because I think enabled the most by AI tools is proficiency at that let you really And if you look at the past 10 to flatted out to the frameworks, port your skills, you native apps and stuff happy to see that that were niche and a lot because you can use AI for that. As opposed to, you know, Rails and Ruby and next level. I don't believe a lot in said. And that's the my conclusion from you got to at some training wheels. and get the quicker tried like, can I has this now become a don't know how to those training level of dependency at ease with. But I you're not going to get anything alluded &quot;We should not use AI&quot; We should pause AI for six months. What are you talking about? Progress just marches There's no materially improved &quot;Yeah, actually, let's just not do that.&quot; Someone's going to do it. In most cases, the advancement in productivity We can use our spare and that is what lifts a growing economy Not even growing Growing prosperity, that we can get more, we can have access to more, and that's a good Yeah, I absolutely agree. We have a few minutes left, but I really wanted to ask you Because not everybody knows that You have raced LeMans 11 times. This is up to the I don't do racing in real life, I do a lot of sim racing. This is a very selfish question. Maybe people in the but I wanted to ask. How do you approach learning a space that is completely I guess, very limited and you've been doing What's funny is that the is the same I hoped for this answer. I had not realized But after I had learned I was able to look back and I was using to learn programming Then I used those same I wanted to be able to take decent, good, great pictures for nothing my family, and whatever. I just went like, &quot;All right, what was it that worked in programming?&quot; Well, one thing is an appreciation for something good. Why is it good? In photography, ability to distinguish Is it off? Does it have a yellow tint? Does it have magenta tint? There's something there. The composition, the rule of Oh, there's a way to notice that. The color correction, how do Some of that you I would look at a good photo and I Then I would learn what's hard. Oh, that's the thing I You identify the good things. You don't fully know but you then you try to just copy it. Don't try to like, &quot;Oh, let me come up with No, let me just learn the basics first. I learned the basics simply trying to Exactly the same thing in racing. Right from the minute I started racing, I would try to who were obviously I could then compare the data overlay. This is one of the ways where it You get this diagnostic &quot;Oh, this person is on the throttle here. They let off the brake in this way.&quot; Then you realize, Then you also realize it's not that easy. Just knowing something is not I can know I'm supposed to brake at Le I'm supposed to bleed I start with whatever 40 but the apex then I because there's a I can see the bump on the You see the spike in the damper trace. Then I have to get the front loading of the car. I need the mass of the give me the turn ins There's so much in that that is What's more Is it the letting off phase? Is it getting out of the corner? There's some knowledge there. Then once you have the knowledge, trying to replicate that and then I found that race car to how to learn how to do photography. It was very similar to A lot of it came That's a concept in &quot;First of all, I'm I am not good.&quot; No No one is good at driving a race car That's just you might have more talent, which means that you may be able But before you've been in there Embrace the suck. Embrace in the most literal sense of that word. You do not have Therefore, you should be more competence This is where I see, especially with race car driving, but in all domains really, that people, they peter out quick because they reach a modest and then they think they're amazing. And I always thought You know what? That seems so where the stopwatch will tell If you're off from pole, you're not amazing. So that led me to think, you know what? First of all, I'm not I should be a sponge. I should And then I should learn And then I should least that was my right? I'm not interested in That doesn't do anything for me. I want to race at Le Mans. The Actually, they're not pretty good. They're the best in the world So to compete at that level, that's... That's what I should be measuring my local track does So it keeps me in the beginners To pat myself on by the time I sort The best in the world by the local standards that I could But I sucked and I compared to the So so much is about who do you who do you Domain that you want just clone what it is Yeah, love this. I mean I'm taking away Develop good taste for what is good embrace the suck in his mind and Be very methodical copy improve Don't measure yourself against Visualize maybe visualized that you Yeah, love this and use technology. You know, there's this is helping a lot of Life racing and Verstappen We are technologist. So I am racing for example, which So what do you think or you look into? Yeah, I I mean racing is Ludicrously and everyone in the world if you so the idea that we Increasingly compelling think my problem is that the I totally believe in the general But I'm also keenly aware of feedback you get in a sim versus A large part of the cars particularly the kind prototypes that that pull upwards half of my German, you know When I sit in a sim You don't get the get the physical And that's one of the development of I think I got my and the steering And then I got a new And I was like, holy shit, the steering wheel feels exactly The feedback I get 97% fidelity to reality Wow, that's incredible If I could if I could get the other Reality racing behind But we're not quite value for me has been I would say for the I found that too much sim racing internalizing and programming my brain to The stimulation of way you could do That physics will you get on a real physics of the game engine and you can I know that there's some sim racers And professional distinguishing between those What I've come to accept is Race car driving is I program Something in my brain and over again. I'm very I'm not so good at changing programs So I can't just be fast in Be fast in the sim and then jump to Unload the old program and I wish it was like gets the plug in That is unfortunately not how Yeah, I really like I can't wait until somehow they find a Yeah, yeah, we'd love that Maybe you know, I don't you know in the inflated Maybe we will get the we'll keep progressing So David, thank you so And thank you again pleasure. This was