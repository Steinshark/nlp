Containers vs Virtual Machines (What is Docker?) Heartfelt thanks to Brilliant, who are sponsoring More on that later. Because today, we have a hot topic to dig Are you sure you understand the difference While going through a challenge building Docker what a container is. Let me ask you this question: Do you know is at least as expensive (computationally If you don't know the answer to that question, We'll be working out the answer to that What is a container? What are the differences between a container Why is a container more lightweight(generally What are the _drawbacks_ of using a container The first step is to understand what a Virtual The film "The Matrix" askes: "Are we For Virtual Machines, the answer to that is A Virtual Machine (or VM for short) is software What is the structure of our computers? They have hardware: a CPU, Memory, a hard On top of that, we have an _operating system_, the software. The software is where the VM lives. A Virtual Machine is (basically) simulated It has a virtual processor, hard drive, memory, Software pretending to be hardware. In turn, the simulated hard drive contains This is what allows us to (for example) run This is also the tech allowing us to run simulated processors with an ARM instruction set) on For those of you wondering: Yes, you can run _is_ a limit to that. Why? Well... Simulating a whole system can be costly: not system, but it also has to run simulated hardware software running on that). And this is where containers come in. Conceptually, containers share a lot with In a sense, they are the next step in the But that also causes a lot of confusion as two is. But that's why we are here, right? To understand exactly what containers are. And that's why I'm so excited that Brilliant If you don't know Brilliant, it's a fun boost your programming journey. Brilliant covers subjects like math, logic, being added regularly. What's so fun is that you learn to grasp quite literally, with visual and kinetic examples is going on. For example, the Computer Science Fundamentals processing. Brilliant manages to be both fun and challenging. I've been programming for... well, decades, been having and how much I was _learning_. So if you want a free power-up to your learning For those wanting to go even further, they and the first 200 to subscribe via this link Now, Talking of going further, why are containers Let's look at what containers are, exactly, In a nutshell, virtual machines add, but containers.. subtract. Let me explain. Let's get back to our computer, with its If we dive into the operating system layer, The deepest one, the **kernel**, interfaces A container is a walled-off "slice" of kernel. It has its own personal but limited share processes that it can use. It can't _see_ the rest of the environment. It can't access any part of the filesystem, it. It simply speaks to the same kernel as the with the hardware, so it shares the same hardware All it can do to communicate is use its share network messages, including to other containers Because the container shares the hardware is _generally_ less expensive to run than However, there is a situation when a container Can you see when that can occur? That question brings us to container technology's why use containers instead of virtual machines? ## Why use containers vs virtual machines? I've mentioned that containers are **lightweight**. That's their first strength. Container's second strength is that they At first glance, that might seem like a weakness. But a disposable environment is also one that That has two very important advantages. First, it means a container on my machine It avoids the "well it runs on _my_ machine" (and to be honest, I've used that excuse Second, a lightweight, repeatable environment the need. Disposability provides **scalability**. Now, containers also come with several costs First, there is a **setup cost**. It's harder to configure an environment the configuration needs to be repeatable. Second, containers are also **less secure to the final hardware, so a weakness in the There is another weakness, and it is the answer expensive than a virtual machine?" You see, containers are repeatable, but what Linux? Surely a walled-off section of a Mac machine way? Well... No, they won't. So, how do container services run on non-Linux ... They run a Virtual Machine that runs Linux. So when is running a Docker container more When you need a VM to run a docker container. That being said, if running one container a VM, running a bucketload of containers is same number of virtual machines. Or, to phrase things differently, the cost If you're interested in getting more hands-on building challenge I went through, I've And in any case, I'll see you in the next