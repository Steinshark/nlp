Claude Rubinson: So I want to welcome everybody to this once Houston functional programming user group and our speaker tonight is Chris Bremmer he has presented here a number of times before, and his. Claude Rubinson: Talks are always fun and interesting and down to earth, which I really appreciate and today he wants to give us a brief not too difficult introduction to category theory and types, so I will turn it over to Chris to introduce himself and. Claude Rubinson: yeah take it take it from here, Chris welcome. Chris Bremer: Everyone thanks for having me today, this is actually a talk, I came up with the idea when cloud was asking for short speakers, a few months ago, and I was like oh man, you know I think this is a talk, I could give off the top of my head. Chris Bremer: But I couldn't quite get it together enough to to give a talk, then, but I kind of kept it in the back of my pocket and I decided that I think it's a pretty reasonable talk to give now i'm a few caveats. Chris Bremer: I really am going to try to keep it well, if not easy. Chris Bremer: I want to minimize the amount of notation and the amount of like you know new ideas that are presented, but I also want to get somewhere I don't want to like just say hey, this is a category of fun. Chris Bremer: I really want you to get a sense of maybe why it's useful and and how these things actually capture some of the design patterns that I think everyone uses and not just functional programmers. Chris Bremer: Let me start off so. Chris Bremer: i'm going to start off with the sort of the dramatis. Chris Bremer: personae. Chris Bremer: I guess the idea is that if you kind of understand these things, hopefully you'll get a sense you'll be able to kind of follow, along with a lot of the examples in the talk, so the first actor i'm going to introduce is a type. Chris Bremer: So if you don't have an intuition, for what a type is you can think of it is being I don't know like a primitive type like an integer or a string. Chris Bremer: If you like object oriented programming, you could think of it as being my class just an example of a class or, if you like, functional programming, I could be my record. Chris Bremer: For example, but the point is that it's not like an individual object in your in your code it's you know, a sort of a general class of objects, you know, a collection. Chris Bremer: That all have sort of the same interface if I want to actually talk about something with that type i'll say you Colin you so this lowercase you, is an example of type you okay types are great we also have now hopefully, this is a functional programming seminar so. Chris Bremer: You have a sense of what. Chris Bremer: A function is so function i'm going to represent by an arrow going from one type to another type again. Chris Bremer: We have a function that takes the type you to the type V. Chris Bremer: We can we can say F colon you to be. Chris Bremer: Just as an example, we could have F tix INT INT. Chris Bremer: F of X is equal to X plus one, not a very exciting function but. Chris Bremer: A function for sure, I also want to insist that functions are pure. Chris Bremer: What I mean by that no side effects, so the function only depends on the input or the output of the function only depends on the input, so no side effects. Chris Bremer: Okay, lastly, pupils. Chris Bremer: Okay, so a typical is just a pair of types. Chris Bremer: Now, a lot of people who use functional programming is used pupils quite a bit. Chris Bremer: But if you don't use functional programming a whole lot you can kind of think of a typical as being the argument of a function that takes more than one argument so F takes you comma, the two w. Chris Bremer: Just as another example, we could have F takes INT. Chris Bremer: INT to it and F of X, Y is equal to X plus y that's a perfectly good function as we say i'm. Chris Bremer: By the way, I don't know if I can quite see the participants on the screen So if you have questions you want to stop feel free to just unmute and hop right in perfectly happy to to chat and sort of the reason I like doing whiteboard talks like this, as opposed to. Chris Bremer: slide talks is that hopefully it gives you enough time and enough opportunity to you know, to look at the screen and then allow me to answer questions, while i'm working. Chris Bremer: Okay, so that's the end of our introduction and we're ready to start act one. Chris Bremer: What is that one categories. Chris Bremer: Now might say hey we're jumping into things too quickly now you know the whole point of this talk is to talk about categories that you know, this seems like a little much at first, but fear, not a category is pretty simple it just consists of types, the question types. Chris Bremer: And again we'll call these types you. Chris Bremer: It consists of arrows now i'm going to be a little quote here, you can think of an arrow is a function. Chris Bremer: But that intuition doesn't always work and we'll see why in a little bit with with an example. Chris Bremer: With the additional additional properties there's always a. Chris Bremer: an identity. Chris Bremer: For every type well the identity, does it just leaves everything the same it behaves like you know F of X equals X and we also have a composition. Chris Bremer: Which if we have an arrow from. Chris Bremer: You to V and an arrow from VW we get for free. Chris Bremer: An arrow from you too btw so just as an example, if we have F of view equals B and G. Chris Bremer: equals w then we get a function here F g. Chris Bremer: OK so bad composition is also associative. Chris Bremer: And that's about it now, one thing, before I move on, is, I also want to insist, and this is something that maybe you can back me up on or complain about I do want to insist that the arrows form something called a set. Chris Bremer: Now i'm going to try to explain why why I like things to be a set so I think. Chris Bremer: When I say set I really sort of want you to think of just a collection of objects right it's just a collection of things, it seems weird that i'm making this like this assertion here that I want these arrows to be a set, but what i'm worried about is. Chris Bremer: Equality between sets. Chris Bremer: Because that's actually something that really comes up a lot, and it will come up as we talk. Chris Bremer: And then, what is it me ask you a question. Chris Bremer: Sure sure. anthony: Okay, so the category, the first sort of member of a category of the types and you have the letter you are you permitting other types as well, or does it have to be going. Chris Bremer: No, no, no, no yeah yeah so so types sorry yeah so so the in this case it's a collection right so it's like you know you is just a an example of a time. Chris Bremer: Okay, so, and then you and V would be would be two types in the category. anthony: Okay Okay, and then the arrows. anthony: So you have an example, going from you arrow the so. anthony: If I could name the arrow a. Chris Bremer: habit Elsa. anthony: yeah alpha is so, is it defined by its real lata the you in the V, no, no. anthony: No okay. Chris Bremer: No, and the reason is because the arrows from you to be so you think about it, like in a programming language. Chris Bremer: The type you to be. Chris Bremer: there's a collection. Chris Bremer: of examples of that type. anthony: Right okay. Chris Bremer: So. Chris Bremer: The example I gave before a good question. Chris Bremer: We were looking at. Chris Bremer: You know this function into INT there's actually a lot of different functions that go into it, you could have. Chris Bremer: Right gee. Chris Bremer: You know, if you want g of X is equal to X plus two and that's a different function so both F and G are in the set of functions from from into it. Chris Bremer: doesn't occur so. Chris Bremer: If the collection right so. David: Can you just consider the types also sets. Chris Bremer: um. David: Because. Chris Bremer: types don't have to be sets. David: Now okay. Chris Bremer: The types of just things. David: Like like it integers it could be the type integer could be defined as the set of all energy yes. Chris Bremer: And yes, you're right. Chris Bremer: So yes, it could be. Chris Bremer: The types could be sets but that's not necessary. Chris Bremer: So if you really want to be sort of like you know really abstract way of thinking it's it's really just kind of like a graph right, so the types are the nodes on the graph and the arrows of the the edges. Chris Bremer: A directed graph. i'm going to question sure Joe. John Cavnar-Johnson: So what I think about categories just you know what i'm speaking English. John Cavnar-Johnson: A category typically is defined by. John Cavnar-Johnson: Things that the members of the category have in common. Chris Bremer: Yes, is. John Cavnar-Johnson: Is that something that applies here or da. Chris Bremer: know a category is it's a thing it's just a collection of types and arrows so it's a Muslim categories, yes, so most categories, you want to say, like. Chris Bremer: From the English perspective of a category. Chris Bremer: I might want to talk about all the types in a particular programming language is being like a category like hasc is all the types of haskell is sort of a a well studied category. Chris Bremer: I can also talk about the category of sets right. Chris Bremer: And the difference between the category of sets and the category of types, is that they sort of have different there are different functions between the right set you know. Chris Bremer: A function between sets is just assigning what elements in one set to another element in another set, but a function in the category of haskell functions has to be has to be a function in your language. Chris Bremer: So categories, when you say, like the English word of category you're saying you want to think of sort of like a a collection of objects that that are designed, but that are defined by shared property. Chris Bremer: But in this case, when you change categories and also changes the arrows between different types in a category. Chris Bremer: Let me give some examples, and I think, in this case it's it's really worth thinking of types and arrows is being. Chris Bremer: types in your favorite programming language and arrows functions in your favorite programming language that makes sense. So. Chris Bremer: Does that answer your question. Okay. Chris Bremer: hope it does. Chris Bremer: What do we mean by equality so. Chris Bremer: When I have two sets so so here's an example that I had in mind have two sets so a set here would just be the first three numbers right 123. Chris Bremer: And then. Chris Bremer: here's another set which is actually a set of sets is. Chris Bremer: The sets. Chris Bremer: Of. Chris Bremer: Items with one element two elements which are exactly the same and three elements that are exactly the same right So these are two separate, this is a set of upsets, this is a set of numbers. Chris Bremer: And there's. Chris Bremer: A way to identify this set with this set by counting right. Chris Bremer: If you count the numbers in this set we get it we get a an identification with the first three numbers. Chris Bremer: So this is an example of what i'm going to call a natural. Chris Bremer: identification. Chris Bremer: And we say that sets. Chris Bremer: are equal. Chris Bremer: If there's a natural. Chris Bremer: identification. Chris Bremer: between them. Chris Bremer: So I did want to give you an example of an ethical identification that you're probably used to. Chris Bremer: Carrying so. Chris Bremer: We can express the notion of creating in a function. Chris Bremer: In a programming language in terms of in terms of these categories, so a career function is identification between functions from you ve w. Chris Bremer: These are equal to. Chris Bremer: functions from you. Chris Bremer: goes to the goes to w, so this is partial application. Chris Bremer: And what we get is. Chris Bremer: F of UV equals w, this is the same thing as. Chris Bremer: You V. Chris Bremer: equals w so i'm going to call that bar, but essentially the idea is we're going from functions on on Paris on tables to partially applied functions. Chris Bremer: we'll come back to this, I mean I want for him to be sort of a motivating example. Chris Bremer: Throughout the throughout the talk. Chris Bremer: I did want to give one more example before we move on to act two. Chris Bremer: Which is an example of a category, so I already gave you an example of a category which was our example of you know, thinking of types and functions in a programming language as being a category. Chris Bremer: there's another way to define a category which is, which is actually fairly stupid i'm going to call it up. Chris Bremer: which has the same types. Chris Bremer: But we wanted to find arrows you. Chris Bremer: An up arrow from you to be is just equal to arrows from V to you so it's really stupid, we take, we take the category our original category, we just turn the arrows around you think of it if you have like a directed graph if you just turn all of the edges in the opposite direction. Chris Bremer: That gives you a new category and it turns out, it works it's perfectly fine so it's a it is kind of a funny theory, because you start to get a see if you really rely on. Chris Bremer: If you if you strongly rely on sort of expect explicit examples, because categories, a pretty loose definition. Chris Bremer: Again we'll come back to this too, but. Chris Bremer: I want to talk a little bit more about. Chris Bremer: What we can do with categories. Chris Bremer: So quick question sure. Neal Livesay: For when you said on equality sure is that a is your notion of equality four. Neal Livesay: categories, so it says sets are equal. Equal yes. Neal Livesay: Okay, so. Chris Bremer: So, so the reason I want to say we have equality is because i'm only ever going to worry about equality for equality of functions. Chris Bremer: or arrows. Neal Livesay: Okay. Chris Bremer: And that's actually the only place where i'm actually going to use her her need equality. Chris Bremer: Okay. Chris Bremer: So. Chris Bremer: Now we're going to get into sort of the nitty gritty of categories, this is act to. Chris Bremer: punters. Chris Bremer: Okay, so we've talked a little bit about functions, and I think you brought up an example of a. Chris Bremer: If we want to identify categories, for example, you need some way to get from category to category B i'm actually not really going to leave the category of a particular language in this talk. Chris Bremer: But we do have a way of either transforming categories or we're taking one category to another category that X kind of like a function, and this is something called the factor so factor is just F of. Chris Bremer: You, so this is a basically an association from from a type to a different type. Chris Bremer: With the following properties. Chris Bremer: We have a map. Chris Bremer: function so F map. Chris Bremer: takes if we have a function from you to be. Chris Bremer: This goes to F of you. Chris Bremer: goes to everything so anytime we have a function, we should be able to create a new function on on objects, where we've applied this factor, and this map behaves well with respect to identity. Chris Bremer: And function composition. Chris Bremer: So we've actually in our dramatis personae you've actually come up with a couple of examples of factors that we can already sort of think about um. Chris Bremer: So here's an example of a function of Dr T. Chris Bremer: Have you. Chris Bremer: i'm going to put an ad here but let's not worry about that for now is just the typical you comma hey right. Chris Bremer: So it's not really a map between sets or anything like that we're just saying like Okay, so we had this type before. Chris Bremer: But once we apply this function to it, we get a new type, which is the typical type you comment, a here is just a well, I mean you can think of it as a proud, a type parameter or something like that. Chris Bremer: i'm not gonna worry about it too much, but but mostly identities we're going to sort of assume that you know a's is is just sort of exhilarated to this to this function if you want to calculate team APP. Chris Bremer: Well, this should take a function from you to be. Chris Bremer: let's say we have F. Chris Bremer: is a function to you to be to a new function you. Chris Bremer: Because to be hey i'll call this that bar and F of you. Chris Bremer: Sorry F bar of U comma. Chris Bremer: hey is equal to. Chris Bremer: F of view comment hey so all we're doing is we're just sort of like if we have a function from you to be it just it just only does anything to the first part of the other people. Chris Bremer: So it's a nice example function here's another one. Chris Bremer: This is a little bit more complicated, a call this ha. yeah. Chris Bremer: So. Chris Bremer: We don't need to just think about tools we could also have a factor which has as output, an arrow so we can take ha a view is equal to the set of functions. Chris Bremer: Are the type of functions from at you now this one's a little bit more funny because, if you remember, we should have a mapping from. Chris Bremer: takes you to be. Chris Bremer: To. Chris Bremer: It goes to you. Chris Bremer: To see it goes to be now this isn't so bad, essentially, we already have this map from. Chris Bremer: You to be right, so if you kind of follow through and apply composition, you get a map at bar from a TV so. Chris Bremer: If you want to think about an F bar of. Chris Bremer: A call this G F bar of g. Chris Bremer: Of hey is just equal to. F. g. Chris Bremer: Right, so you apply G first and then we apply and that gives us a function from anything. Hopefully that's not decision. We go. Chris Bremer: Now there's one more function function that is a little bit funny and we're going to come back to it. Chris Bremer: Again, if there's any questions i'm you know i'm trying to give high level thing, and hopefully you'll be able to to kind of look at these notes later and figure out that it's not too bad um. Chris Bremer: So i'm going to find one more factor. Chris Bremer: So this is a little bit funny so if. Chris Bremer: Before we define it we defined each as match from A to you, we can also define a puncture which is matt from you. Chris Bremer: Now, this is a little bit interesting because if we try to define see map. Chris Bremer: If we have a function from. Chris Bremer: You to V. Chris Bremer: And we wanted to find a function of function from you goes to a and to V goes to a. Chris Bremer: we're a little bit stuck because, unfortunately. Chris Bremer: The arrows go the wrong way and the natural composition goes from you, to the to a so if we have a guy down here. Chris Bremer: And this function here. Chris Bremer: We get a mapping. Chris Bremer: g from you today so. Chris Bremer: This is a little bit funny, because if we if we rewrite this expression. Chris Bremer: If we have a map from you to be we get a map from you'd. Chris Bremer: need a. Chris Bremer: From Vito a goes to you today i'll write this map down explicitly so. Chris Bremer: This map is just. Chris Bremer: She have a goes to. g of path. Chris Bremer: Right, so this gives you a map from from you to a, but what we end up doing is we just say okay well. Chris Bremer: Forget about that. Chris Bremer: This is actually a factor from the category. Chris Bremer: The opposite category so remember to find the opposite category earlier, this is kind of a little brain teaser here. Chris Bremer: But I did want to bring it up it's actually going to be sort of useful useful later on, so this is this is sort of the first example of a function, where we're going outside of our original category, this is something called a contrarian factor. Chris Bremer: So if you come across. Chris Bremer: Country variant that's why it's called a contribution factor in fact you know what I think it's funny a C sharp the latest release of C sharp includes co variant and contribution inputs, so I think, even if you. Chris Bremer: are a C sharp developer you'll you'll end up seeing some of this terminology at various places. Chris Bremer: Okay. Chris Bremer: So I want to point out something funny. Chris Bremer: That comes up. John Cavnar-Johnson: In Chris can I stop you for a minute. Chris Bremer: yeah sure. John Cavnar-Johnson: You scroll back up there. Chris Bremer: yeah, of course, so. John Cavnar-Johnson: What do you first explain the BAT I thought I understood it sure. John Cavnar-Johnson: But that last one i'm not sure I really understand what. Chris Bremer: So. Chris Bremer: yeah so here's, the problem is that a factor can potentially take us outside of our original category right. Chris Bremer: In this case, this filter takes us to the opposite category. Chris Bremer: sort of a. Chris Bremer: Okay it's a big kelvin ball, unfortunately, if you're familiar with that. John Cavnar-Johnson: yeah I don't care of the ball is. John Cavnar-Johnson: elected people all the time, but that's all over. Chris Bremer: So think think about it this way it i'm not actually i'm. Chris Bremer: Essentially i'd like to talk a little bit about sort of contributing factors but um. Chris Bremer: Maybe. Chris Bremer: I think it's sort of a deep topic so think think of the think of this this controversy bunker as sort of a bonus. Chris Bremer: BONUS content and. Chris Bremer: You know, maybe, maybe it'll make a little bit more sense when I sort of talk about why we care about these things interact very. John Cavnar-Johnson: Well, it actually helps a lot, because you could use this map and you had to go outside the category yeah yeah cuz that yeah okay. Chris Bremer: yeah so so that's that's The idea is that we actually ended up using that that silly category that I defined earlier on. Chris Bremer: Okay, but no, I mean that's it that's a good question i'm really just punting on it, because it's a hard question. anthony: Can I ask a. anthony: Question Maybe I should ask this a lot earlier but. anthony: So if you scroll up again. anthony: So all. Chris Bremer: wrong with the whiteboard is I don't have a good way of navigating through the next week, but. anthony: Well, so. anthony: I was wondering when you write down F map Cohen, and you have. anthony: What looked like arrows yes i'm actually not sure what those are the arrows are the functions. Chris Bremer: They are they are set functions. anthony: Set functions yeah. So. Chris Bremer: I am being a little bit so that's actually a really that's okay so that's actually another very deep question. anthony: Though. Chris Bremer: uh the point is this guy's let me use this this guy's a set right you to be. Chris Bremer: is also a set. Chris Bremer: and half map is a function from this set to this set. Chris Bremer: So it being a little bit loose. Chris Bremer: fast and loose with the rules when i'm saying this is an arrow. Chris Bremer: But. Chris Bremer: As in the case of the programming like if we're if we're working inside of a. Chris Bremer: Programming language this actually is fine, because both of these things are actually types. Chris Bremer: So, not only is it a map on sets but it turns out it's also well defined in the programming language. anthony: Okay. Chris Bremer: it's a little yes so i'd. Chris Bremer: Be again you're right, I mean you actually it's actually good, because you sort of caught me and being a little bit fast and loose but. Chris Bremer: you're absolutely right that this is this is actually amorphous in between sets, but when we when we do them when we calculate things all the examples we're going to see this is also an arrow in the. anthony: Air. Chris Bremer: Okay, so I want to. Chris Bremer: I want to come back to Korea. Chris Bremer: And this, maybe we'll give you a sense of where where we're going with this i'm going to call it Korean redux I realized that gone way over my promise time but i'm actually glad that there's lots of different questions because I I like talking more than just lecturing. Chris Bremer: So, remember, we stated what Korean was before fortunately it's right here so here's if you look to the left of the board, you see the definition of Korean um. Chris Bremer: We can actually rewrite Korean. Chris Bremer: In terms of hunters T you goes to the is equal to you goes to each. Chris Bremer: of you. Chris Bremer: Hopefully you can't hear that my five year old just started playing the the squeezebox downstairs so. Chris Bremer: It doesn't get too loud anyways, so this is actually really pretty cool so I mean this is hopefully a very. Chris Bremer: suggestive formulation. Chris Bremer: Another word for this is anytime, we have to function two functions that behave like this we call. Chris Bremer: ti n H, or something called an edge like a pair. Chris Bremer: i'm going to explain why we care about android pairs in just a second but it turns out that these are something that mathematicians really love to work with. Chris Bremer: I actually spent a good portion of my My thesis and an early research racking my brain around different different kinds of edge like Paris and certainly Neil did as well. Chris Bremer: But there but they're super important to mathematicians there's a lot of prior art between you know behind structures that look like this, we have another example of an android pair which you're absolutely going to hate if you didn't, like the previous example see a you goes to the. Chris Bremer: is equal to oh sorry this is remember see is a factor to the opposite category, this is actually the same as you goes to see a. Chris Bremer: I knew you'd hate it so CA CA is also an edge right pair. Chris Bremer: we'll get back to that in a little bit. Chris Bremer: I do think it's a little bit cheeky to say that and to introduce it. Chris Bremer: But it's not such a bad thing, because we're ready for our final act which is. Chris Bremer: Final Act. Act three. Chris Bremer: everybody's favorite moments. Chris Bremer: And i'm going to pull a rabbit out of a hat explain why we spent all this time discussing these arrows is because this sort of gives us the foundation for the idea of what what a Mon add is in. Chris Bremer: In category theory, so all of that is is it's a punter. Chris Bremer: it's a special kind of funky. Chris Bremer: em. Chris Bremer: It has a special map return. Chris Bremer: Which is a function from. Chris Bremer: from you to SMU and another special map combined. Chris Bremer: Which is a function from you too heavy. Chris Bremer: goes to MB. Chris Bremer: m you. Chris Bremer: because to me. Chris Bremer: Okay um. Chris Bremer: i'll give an example of why these things are useful, but I want to stay a really cool fact first something that I really don't see a whole lot in. Chris Bremer: introductions to category theory in usually comes a little bit later, but this is a flat due to a mathematician called closely. Chris Bremer: Which is that. Chris Bremer: My ads. Chris Bremer: are really enjoy factors well. Let me explain. If. Chris Bremer: If l. Chris Bremer: You. Chris Bremer: stevie is equal to you because the rv right, so this is our joint pair then. Chris Bremer: Our Lol l. Chris Bremer: You is a moment. Chris Bremer: Okay, so this is kind of a wild fact. Chris Bremer: Because we haven't really talked about composition of functions, but it sort of works as you might expect, you sort of apply to the first factor I mean you by the second punter. Chris Bremer: bodes well, is that these two sort of you know highfalutin fancy theories are. Chris Bremer: Really equivalent i'll even give you an inkling of how to prove it, I know that we're probably not most of us haven't done a proof in a while, but let me explain really quickly um. Chris Bremer: let's say that we have you. Chris Bremer: So one of the facts about categories, as we know that we have the identity map. Chris Bremer: We also know that. Chris Bremer: l map takes. Chris Bremer: The identity map to some map. Chris Bremer: From Liu to Elliot. Chris Bremer: So it's actually the identity, because it behaves well under and then finally under this a junction map. Chris Bremer: We get an identification from you goes to our l you and this our return function. Chris Bremer: So it turns out, if you sort of like follow through and do a lot of work, you can actually show that this that you can get sort of the the buying function, the same way. Chris Bremer: Plus, all the other compatibility, I do want to mention just for completeness so plus compatibility there's certain compatibility between return and fine but i'm not going to get into it. Chris Bremer: And now we have the payoff which is. Chris Bremer: Why do we care, all this stuff about all this stuff well it all comes back to Korea. So. Chris Bremer: Korean what comes after redux. Chris Bremer: redux maybe. Chris Bremer: If we look at our previous agile pairs so we had before. Chris Bremer: tea. Chris Bremer: And he wearing a pair. Chris Bremer: And these correspond to the Mon add. Chris Bremer: let's see if I remember it's H T is equal to or ht of you is equal to functions from a. Chris Bremer: To. Chris Bremer: You comma hey to Paris you comment, a, and this is something called the statement and. Chris Bremer: Now, why do we care about the state Mona well, it turns out, this is the best way to work with mutable state when you're doing functional programming, so the way I like to think about this is let's say that we have an object right. Chris Bremer: folks an object oriented kind of object and that object has met a method so i'm going to call the object, has taken a and we have a method. Chris Bremer: So the method of. Chris Bremer: takes this. Chris Bremer: hey and some input. Chris Bremer: You and then outputs. Chris Bremer: Some V, so you might ask Well, this is a problem right because this gets mutated right typically when you have an object you're applying a method there's no guarantee that you're not going to change sort of the, the object that's calling. Chris Bremer: So what we do is We then add this as an output right because the function if it's mutating the and if it's mutating the the the color of the thing then it's reasonable to. Chris Bremer: Think of the color as being another output output of the function but just discarding right so it's actually funny I know I gave a talk related to to matlab last time. Chris Bremer: matlab is an example of a language that doesn't have naturally something called a handle class So if you want to mute. Chris Bremer: Your handle, which is the pointer to this you actually have to return, this is one of the outputs of the function, you can return it as a discard but you know it doesn't really matter. Chris Bremer: um So if you stare at this long enough you actually see that this is really the same thing as taking a function from you. Chris Bremer: To. Chris Bremer: A, so this is. Chris Bremer: This This is our input. Chris Bremer: goes to our output comma hey This is our output. Chris Bremer: And this is our discard. This. Right. Chris Bremer: And then the bind function. Chris Bremer: gives us a way to consecutively call methods on the function so basically allows us. Chris Bremer: To call multiple methods. Chris Bremer: and keep track of. upstate. Chris Bremer: So this is sort of the funny thing is that if you are sort of progress, you can sort of get object oriented a lot of the basics of object oriented programming. Chris Bremer: Out of this monitor or you can you can represent a lot of object oriented programming using this Mona Okay, I have one more example and then and then we'll be done. Chris Bremer: So, remember, we had our other factor so CA. Chris Bremer: CA. Chris Bremer: Is an address pair. Chris Bremer: So the corresponding moment if it's just see see of you is equal to. Chris Bremer: functions from. Chris Bremer: A. Chris Bremer: goes to a This is something called the continuation Monday. Chris Bremer: Now, this is a little bit weird. Chris Bremer: But if we take a to be something like a task. Chris Bremer: Right. Chris Bremer: Then you today. Chris Bremer: Is an action. Chris Bremer: Right, it takes an input and it does something right given some input you do something with that with that input, but you don't return anything. Chris Bremer: And then, a function. Chris Bremer: You today. Chris Bremer: goes to a. Chris Bremer: Is a call back. Chris Bremer: Right, so when you have a function with a callback think about it like this. Chris Bremer: You have F of. Chris Bremer: F U comma. Chris Bremer: and Chris Bremer: callback. Chris Bremer: is equal to Void or task right. Chris Bremer: And what this is, this is a function from you. Chris Bremer: goes to. Chris Bremer: goes to a. Chris Bremer: goes to task. Chris Bremer: And so, in this case the bind the bind function is really just giving us a way of combining actions and a bunch of different callbacks so if you're if you're used to javascript. Chris Bremer: Especially the people who are learning javascript you find that a lot of javascript involves a lot of callbacks and it's hard to reason about those callback functions, but. Chris Bremer: there's actually like a purely functional way to think about it, and this purely functional way has has a background in mathematics. Chris Bremer: Okay, so that's about it um. Chris Bremer: What i'm gonna do is i'm going to share these lecture notes well with cloud. Chris Bremer: But yeah. Chris Bremer: Hopefully that's it's it's not it's not too bad I guess what I said a gentle introduction to. Chris Bremer: Category theory, I really wanted to avoid being bogged down and sort of introducing too many new ideas and too many. Chris Bremer: Too many thoughts, but I also You know, as I said, I wanted to make it pretty far and I feel like you know we got to the point where we can actually see some Simone ads that are actually useful things we use every day as programmers. Chris Bremer: Any questions. Claude Rubinson: Well, I want to thank you so much, this is really this is really fun and interesting and yeah so let's open up for questions. John Cavnar-Johnson: So I have a question. John Cavnar-Johnson: i'll start out by saying I don't really expect you to be able later, but if you can it'd be really helpful for me. Chris Bremer: Sure he's. John Cavnar-Johnson: This consumption mode and more like live or die, this is bolin. Chris Bremer: ooh uh. Chris Bremer: You know what it's um I don't know actually I don't know. Chris Bremer: This is to me. Chris Bremer: A. Chris Bremer: Something or at least my understanding of this comes out of. Chris Bremer: Early category theory which was in the 1940s. Chris Bremer: which was well after life is yeah. John Cavnar-Johnson: way after this but. Chris Bremer: Yes, yeah so, so I think, maybe the name, maybe there's some some relationship in the name but. Chris Bremer: This is, this is something sort of different. anthony: I always wondered that too. You know. anthony: Because yeah so I know Mona from from libraries and. anthony: it's. anthony: Chris, you know as you're struggling to make a connection I can't possibly see a connection either you know. anthony: But it's such a. anthony: particular word to use that it's hard to believe that there's that there wasn't some thinking of like NUTS when when this was introduced. Angel: But I think when lightness was talking about mo nets, I think that came out of his explorations with calculus like the infinity symbol but I mean I don't know a lot about programming, so I don't know. Angel: You know. Angel: Because how monet's relate to category theory from what i've seen. Chris Bremer: yeah I mean I think it's is. Chris Bremer: Is it done. Chris Bremer: You know, it probably certainly was influenced by by that concept but. Chris Bremer: I don't I don't quite know at my. Chris Bremer: I. Chris Bremer: Do you have a definition of what a live it's more, that is. anthony: Well, from what I remember. Angel: When I remember in philosophy, I think it was like some invisible particle like. anthony: It was the right. Angel: One foundation, I guess we're pro to add on something like that you know inside of space time and I guess. Angel: i'm just loss if he God is the big mo neck to we're all connected to like some network or graph but. Angel: I don't know. anthony: yeah we sort of an alternative to Aristotle substances, these were more idealized. anthony: But yeah I mean so it's it's really hard to see like what the connection possibly could be between those but then, why why use the word Mon and. Chris Bremer: I think you have to ask mclean. John Cavnar-Johnson: I mean technically it just means the one. anthony: yeah right he. anthony: Was unary. anthony: Right. John Cavnar-Johnson: it's. John Cavnar-Johnson: Really da philosophy kind of guy. John Cavnar-Johnson: I have a son who's doing simplify this work right now. John Cavnar-Johnson: it's so what he started talking to me about it as like. John Cavnar-Johnson: there's sort of a connection here but it's hard to explain. John Cavnar-Johnson: Especially if you don't know anything about narcissism. Chris Bremer: I definitely do not know anything about it. John Cavnar-Johnson: So yeah so I haven't really bad habit of a Claude could confirm this of like making connections between programming things and. John Cavnar-Johnson: Random things outside of that. John Cavnar-Johnson: But yeah so anyway, it was just. John Cavnar-Johnson: This is one of those things that may not bother anybody else. Angel: Interesting connection I guess i'm like I know a cantor who did develop set theory, he was interested in like lightness and couple stuff like that yeah. Angel: I mean i'm not a mathematician but I know from what I hear about category theory it's supposed to be a better foundational theory then set theory from what i've read, I mean I. John Cavnar-Johnson: Well, I haven't English and history read your so none of this stuff makes any sense to be. Chris Bremer: Well, I mean so so one thing I don't know I tried to him. Chris Bremer: To get this idea across in to the previous talk that I gave here, using computation expression spreading computation expressions the way F sharp represents moments in its language. Chris Bremer: Is that, in some ways, you know if you think of the language. Chris Bremer: As being. Chris Bremer: From the point of view of an object oriented. Chris Bremer: Programming philosophy your grammar is quite limited right if you have an object, you have only a certain number of methods that that object can can handle. Chris Bremer: When you're looking in terms of sort of a computation expression enough sharp or Mon ads. Chris Bremer: You can consistently sort of. Chris Bremer: It gives you a way to string together and methods in a coherent way in the same way that you can kind of concatenate words in a sentence and that's kind of how I like to think about it. Chris Bremer: So I think there's sort of a certainly a grammar aspect that this talk doesn't capture but, but I do I do like to think of things in terms of language and maybe that's and maybe that's a different topic that I could do. Chris Bremer: modes for English majors that would be pretty awesome. Chris Bremer: yeah I don't know my hope with this talk is that, if I can kind of. Chris Bremer: pare it down or practice, it might be something I could I could give elsewhere, you know another meetup or a conference or something like that, so thank you for being my guinea pigs. Chris Bremer: I don't know if it was as kind of an introduction, as I had originally wanted it to but maybe having given it once I can I can work on that. anthony: I seem to remember you saying something about fitting this on a napkin. anthony: At the last meetup or something like that and I don't i've never seen this kind of napkin. Chris Bremer: So that's a good question. Chris Bremer: um you can see everything on if you were to unfold, the napkin into four parts. anthony: Right right. Chris Bremer: Probably you could probably do this. Chris Bremer: So yeah That was the original goal for the talk, but. Chris Bremer: It becomes a bit of a trade off right so so one thing when I give talks like this, I really do like board talks because I think that they help with pacing and help prevent you from sort of trying to put too much into a single slide. Chris Bremer: And, but they do sort of slow down the pacing and then the other trade off is. Chris Bremer: I wanted to give you sort of a full story, where we started with some abstract concepts like arrows and and types and some you know kind of pictorial math. Chris Bremer: And then end up with something that I really do think that you know we do use every day as programmers I think thinking of. Chris Bremer: methods applied the objects is really being an example of a pretty standard Mona and also thinking of callback functions and actions as being a different kind of botnet are useful, especially since they tie in with Curry which is somehow the font of both of these very commonly used. Chris Bremer: Mon ads, but it is also sort of something that's considered central to functional programming. David: I did have a question, you were talking about the up arrow as as being just the. David: Essentially, is it flipping the like, if you have you to be speedy you essentially yeah. David: I know a lot of times in like for practical purposes, when programming. David: Like. David: Like say same vm was entered a new was a decimal number. David: EDU is not equivalent. David: The that the you know going the other direction, so if you if you convert it to a decimal do an integer and the integer two decimal. David: it's not like the national integer is going to be the same as. David: The final editor. Chris Bremer: that's true here's a here's a counterpoint to that, though, which is. Chris Bremer: you're absolutely right that, for example, INT. Chris Bremer: goes to decimal. Chris Bremer: it's sort of a standard. Chris Bremer: Is a standard embedding but then decimal to is not you're right, you need some sort of rounding so it's actually the same era, but what happens is is if I want to say, maybe. Chris Bremer: If I have a function. Chris Bremer: which says. Chris Bremer: let's say I have. Chris Bremer: width. Chris Bremer: Of a div right so which takes a integer to. Chris Bremer: A div right in html so here i'm just trying to understand, like a layout of the screen um. Chris Bremer: it's also possible. Chris Bremer: To. Chris Bremer: Sorry it's it's possible to get a width from a decimal to a div Sorry, I think I did things backwards, which is sort of opera PO. Chris Bremer: let's say that we have. Chris Bremer: let's say that we have a mapping from decimal to div right. Chris Bremer: And this gives us an automatic mapping with. Chris Bremer: takes it. Chris Bremer: To div which is inherited from our mapping from decimal to do and it's basically just taking the the conversion from the decimal and then taking that to do. Chris Bremer: So this is a funny situation where our original map from into into the decimal actually gives us a map in the opposite direction from a width function from decimal to a width function from his does that make sense. Chris Bremer: that's a punter right there. Chris Bremer: Okay well anyways we can talk about it more later. Chris Bremer: I need to. Chris Bremer: Take a quick break but i'll be back for more discussion and more questions. Claude Rubinson: Well, on that note I think i'll then stop the recording and yeah, then we can talk when you get back awesome thanks so much.