Hi. So I I'm Henrique, I'am going to talk here Basically forking, a Go project. So the idea was basically I was working with Postgres, and I wanted to build the, I wanted to build a SQL, query builder that was tailored for possibly, with its, native binary protocol We we often use. it's okay for. Oh, okay. Cool. Yeah. Good. So I. Yeah. So why? So I, I fiddle writing regular SQL queries instead. But in some cases, for example, to apply multiple filters, sometimes query builder It becomes less repetitive and less, error prone. So one alternative that I see using is to use the objective But I prefer not to go to these results, as I like to keep my The, the way that this happens, the way, I decided to create with, former because we had just worked on database So, yeah, basically I decided to, to, to The let's say that the most. Yes. It's not a. What? Okay. Let me. Let me change the cursor. Yeah. Oh. Okay. Good. Oh, yeah. Okay. Okay. So the idea was basically this. I, I wanted to, to, that I could trust, that could have in terms not of recreating the queries But in terms of writing, you take advantage of the So, what were my my options? I would say that the ego basically my only good option for, for for our query It works quite good, but the it didn't do everything that I wanted it to. Because it was designed to be, let's say, a generic, query builder. And also It needs to be, in my opinion. So I decided to play a little bit with it to to design Yeah. The first challenge was And then this is one of the hardest After I gave it to my machine, I started, playing with it to see, what it usually is in terms So, I decided that I wouldn't necessarily if possible, why would it do so? So I changed a few things here introduced a few methods, removed That doesn't make much sense. And so maybe in terms of, API differences, it's not much I would see if you have a project if the binary protocol, you can probably just, try PVC in, our, let's say if you have, not a that big of a project, maybe even most time in the to the will fine. One of the things is, Even some of the decisions Okay, I don't like this. For example, Fluent. This is not a big fan but then I tried it to to to in the evening, they actually have something to see So it was mostly, a discovery process. It wasn't really just the changing the, the code to, to to remove everything to, to, to Portuguese. So some changes But after that I started to see, how I could improve the API. For example, to introduce support to, to some, some, some stuff like, in Portuguese, you have these, insert options, but then you don't have, limiting the offset So if I wanted to, to make sure that the, SQL builder would be able to, to, to help the developer, you know, if it's just like another way to it I would do rather just write SQL code in using something GC to to to mask what is really happening. And he also I so something important here is that compatibility And that is because it, to allow this compatibility Let's pick when you are using these any longer we are going to see a bit when you generate a query is too small. Right. So let me try to. Warn you. Yeah. Not good. But still when you generate for example, online you, the exclude the contacts Where is it. So it's three. So yeah. The exclude the It it's a slice. And then if you are using SQL, it's basically going to create placeholder for each value, having the slice in it that is social. It's especially also because, any prepared statements that you generate You'll see, a few values in that slicing of prepared statements on your server And this is all. So I didn't want that. I wanted to, to try to, to to make the API as concise as possible in the. Also, So there was a surprise that I didn't expect expected, It was regarding performance. So first thing is, it doesn't even matter about the performance of the database. Calls. Let's see. I'm talking about the performance That seems to be but the schema tries to do some caching. They try to be wise about it in a way that I feel First, because as we are going to see, It's, 80s. We in in secondly, it's But suppose this, it's not really where the bottleneck is. If you are, If you are communicating like latency, the, you know, TCP connection, So it basically, has a lot of support for developers that I try to understand what the provider is doing. So that is something that it was you know, if you are going to, do this, going to get rid of most seem to be really helping. Okay. Yeah. So first, we that's the correct. Node. Sorry. Yeah. How do we write a benchmark? How many of you have you written? Benchmark single. Any how many of you have written? You need to assess. Okay, so so here's the thing. If you know how to write unit tests, Basically, You know it. I need the API is really simple. You can learn it So that's Yeah, I guess you can do this basically instead of using, and if you take the time if it's not to be worse, You can see, for example, here, what this code is doing is it has a loop that is going to call And that thing is dynamic. It's, For example, any day whenever you basically write a code like this passing the, beach flag, it's For example, the basic flag is just like the, the flag and day, in this case, the benchmark test So in this case, for example, that immediately into the six, 600 I guess times. And the each operation This is another, example that is more close to the benchmark here. I did see schema in the with, As you see, just iterating in any times and running my own code. And if you have something more complex, there are other functions in the B-type, It is a few other functions For example, operations that you need to do you should actually, Then you start to benchmark. But let's say that for some reason Then you can always, pause the for B to do whatever you need to do. That takes time. You to continue. What else? There are ways for you to run, benchmarking in parallel as well. Sometimes you might be that usually not. But yeah. And here is how. Those are just the references. This is how, how it looks when you run go test in the you base the bank flag. Let me see if I can zoom. Yeah. Here a a lot. It could be like the beginning of this, for example, Are you also using the big main that is basically, what this bank me flag does is now the number of reallocation So each operation And the amount that was allocated. This is why I think that is Cairo, is probably doing, let's see much more using a caching layer and so on, because you see that and also for, as Q t that's the It's quite small. The difference here it appears that they decided to dirty, how can I say this? The they decided to dirty. You don't need it to. Well, let's see. Very easy. Immutable goroutines that I agree with. But I don't have this problem. MPC. So basically, this is not a thread safe. The the a security I don't I haven't So I don't understand the, the reason why. But you see that the timing of execution, me both I much smaller to, use scale. So of course I not an expert in benchmarks. I might be doing a lot wrong there, but at least this gives me confidence my code should be, you know, equally as fast as this key issue. I have some problems in my benchmarks Why? If I do that, Because sometimes we try to, to prematurely optimize some key much sooner, of course, But anyways, we try to optimize it so much as soon as we, we each time. And that means that we might, invest a lot of effort, into doing so. That is not really, needed the I'm not saying solely that the squirrel is prematurely optimized, but definitely, even if it is not, it looks like it, does it make a lot of difference Yeah. That's that's pretty much it. If any questions? Yes. If it works for you, the, the the goal that's to start to, to, expenditures, Okay. So let's say that basically, I was working at a company, let's see, maybe six months before. Maybe I help today, So a NoSQL database to Portuguese. And one of the things that I noticed play build as all And not only that, but in my career anyway, I never liked the idea I prefer the simplicity that we find That is basically you can write the SQL But they just, Well, colleague of mine, basically it's, sold me the idea that query builders are really useful. And they, he gave me so many cool, fancy arguments like, it can be a little bit easier So we were using Sekiro at that company the day I decided, okay, I already left the company, I can do this in a week or two. I have no idea Okay, let me try. Yeah. Yes. How do you deal with joins? Okay. Joins. All right. Let me say this. I not a sequel expert either, but the API that I'm using, is basically schema with my modifications and if you see, the GitHub repository, that it's not a lot of modifications, So, basically you can do with my, the the thing is, because it's the only driver that we currently support. They mentioned that binary protocol of, Portuguese and the it just Jose works with the very same API. Yeah. So, so so basically you can imagine that some, some state like, it maintains partial subqueries. The, as you go writing, queries, you can basically connect to the pieces the functions it provides. Yeah. I just say that If possible, but they, in some cases, this is helpful. Yeah, well, at least for some people. Yeah. Of course. My personal experience with, is, is, you know, kind of, mixed on for work. Great. For very simple, let's say select. Yeah. Amazing. The limited database Like you to query or a table join. Join or just like you just see right Yes. Yes. Exactly. So it makes things that are easy Right. So let me say for further, let's ask a question. So, what my experience is that whenever relationship members they were all thrown out because they proved I agree. Now the question is, of hands on experience in real projects that do have these, that they need to query. No, I don't, because this was like did they they used something else that, in the. But I would be confident to do it. I mean, have some integration process that the queries are generated. Is intended for a few cases, not all complex cases, to be honest, But I would say it's probably safe to use, especially if you write That's something that I always prefer. That's, you need to is this. Yes. That's true for some of your fixes I well know for two reasons. First, if you go to the schema, we post or you see that they are in, complete, And the I would say that that might be See the upstream, for example, the performance idea, I mean, I don't I don't think it's worth the risk However, you will reduce the, the sequel. So you already use integration in the, in the, in the your projects in the the you don't use that I would say just to give it a go Of course, those are best facto I must say that. It's. It's. Thank you.