Pac-Man is a completely deterministic game. As ghosts' movements are based off of where Pac-Man right knowledge, you can predict exactly where you? When Pac-Man eats a power pellet, the ghosts unpredictable pattern. This is the only time to determine which direction a ghost will turn While still deterministic, it is the This video will go under a deep analysis of tend to behave in this situation. We'll find towards a certain section of the maze after is responsible for, well, generating random code doesn't have a little coin to flip or a dice feature has to be programmed via software. And to come up with numbers randomly is quite Writing code to generate random numbers is on how to calculate a certain value. In that case, However, the end result looks random enough random--pseudo-random if you will. Pac-Man has There is a 16-bit value in memory that is treated of the game, and at the start of each level. This index, which overwrites the old one. For example, The RNG function takes the number 0 as Then, the next time a random number is needed, if 1 is its input, the output will be the number the input index, multiply it by 5, and add 1. just means, if the result is greater than 8192, For example, the eighth RNG index is 7544. If Divide that by 8192 to get 4 with a remainder This function does an alright job at generating obvious what the pattern is (especially at the fine. What's important though is the distribution be generated? It turns out that, yes, they are. This function will run through all 8192 The last number in the pattern being 4915. This since it means that there is no bias towards random access. (There may be strong correlations number at a time, but that's not going to However, notice that I have been calling these That's because this index is not the true value that is used to create the output. This to grab a single byte--that's the output. either. The first 8192 bytes of the assembly Most of the bytes here are machine code that up the various functions in the game's code--none Here's an analogy: suppose you were told It would be like using the same function for the a word in your favorite book. If your input index 6370, so you'd find the 6370th word in the book. removes the correlation between successive random I mean, imagine how much more likely you are Here is a chart that displays how many of in the first 8 kilobytes of the game's code. As For a uniform distribution, each number appears over 600 times. That's because which are just filled with nothing but zeros. The This is because this corresponds to the byte is where most of the game's main variables are or write to any of those variables is going Some numbers just don't show up at all in the Now, this may look bad, but fortunately The only reason the RNG function is used is to at an intersection. Well, there's only four This can be represented with only these bits to directions is 00 for right, Because of this, the only part of the output of bottom two bits! So let's regroup all of these Okay that's a little better, I guess? I mean the You would expect a uniform distribution to output While the 00 bits corresponding to &quot;right&quot; The bits 11 corresponding to &quot;up&quot; are only This is one of two flaws of the frightened ghosts' movement is not uniform. The directions while &quot;up&quot; is very heavily biased against. would just favor the bottom left corner of Real quick, in case you are interested, Only 13 assembly instructions, that's how you know into the CPU. The index gets multiplied by five by 8192--done by logically ANDing the upper 8 bits index to 13 bits. That index is used to grab a is stored to memory, overwriting the old one. It's in the game's code, outside of the reach of the the bytes that make up the RNG function can't So the frightened ghosts use the RNG output intersection. What if they can't physically move intersection, but the RNG told the ghost to move Instead of generating another random number, in a clockwise order. In this case, the But oops, ghosts can't turn around 180 degrees from the right, so it can't choose to go right the next direction. It tries moving down next, This results in a very biased decision. If the to &quot;up&quot;, &quot;right&quot;, or &quot;down&quot;, they all correspond at this intersection if they are coming in from According to the chart we made earlier, this 70.1% chance for the ghost to choose to move ghosts' behaviors--the allocation of random We can use this information to create a table Since the RNG is biased itself, none of First, it's worth pointing Frightened ghosts don't call the RNG at just the RNG every time the move from one tile Since the ghosts are blocked by walls on two there is only one valid direction to move. by calling the RNG function even in these trivial help with shuffling up the index to prevent by observing which direction ghosts are moving But anyway. There are six types of tunnel For each of these tiles, a ghost can enter it possibilities. These 12 cases can be grouped into option, one for &quot;down&quot;, &quot;left&quot;, and &quot;up&quot; as well. numbers results in this sort of distribution straight forward, and a ghost has a 100% chance of Where it gets interesting is the 3-way 3-way intersections, and a ghost could enter more different cases. These can again be split are actually valid. There are six of these sets, in each direction is. Now, the two sets that are bad. This is because each direction picks up the most fair case is when a ghost has to pick between &quot;up&quot; results in a 46.3% chance of going up, while a 53.7% of going down. The other four sets for lopsided though. They are all basically 3-to-1 The worst offender is left versus up--a frightened Finally we have the 4-way intersection, different directions. Here's what those it is about twice as likely that the ghost will is because the only invalid direction gets rotated 90 degrees clockwise, which Now how can we use this information to figure out this isn't a very practical question, since ghosts in the later levels they don't become frightened The best way to analyze this problem If you don't know what a Markov Suppose you have some sort of process that can these states as a set of vertices in a graph. So And in this process, at every step in The probability of changing into a different state say if you are currently in state A, you have a We can represent these state transitions Similarly, if you are in state B, you may 60% chance of changing to state A, and We represent this with a self-edge from B to B. simulate an instance of this process here by, say, to state based on the probabilities denoted by the Just do this like a million times and then and you can find the average time spent in each exponentially longer to converge on a meaningful We can start with a &quot;mass&quot; of 100 on state A, outgoing edges on each vertex. In this case, This leaves state A empty with zero, since states step, State A has 0 mass so it doesn't give out 30% to state C, and keeps 10% to itself. While and keeps 20% to itself. With this step, now state has 25. Keep stepping through time like this and state fairly quickly (as long as the chain is a isn't important to explain in this video, but you The fun thing though, is that, if the Markov of the chain; it doesn't matter what the initial on state A, but we could start with a mass of 100 same steady state. So what we can do, is build in the Pac-Man maze as a vertex in the graph, The weights of the edges will be the Then we can plop down a mass of 100 frightened whole thing over and over until we reach a steady of where the frightened ghosts like to hang out hard. Since the tunnels between the intersections I'll add them back in later once we understand properly. First, we can make one vertex in We'll need two edges for each path Then all we need to do is fill in all the edge right? Well, not so fast. Let's This vertex has three edges coming out of it, move out of this intersection. But we know When a ghost enters a 3-way intersection, it This is because we haven't captured the entire they need to represent the position of the ghosts direction they are traveling too. This means set of vertices corresponding to it--one for each Three-way intersections will have three four vertices each. I'll put little Now we can hook up the edges properly. If a the right, this will be represent by this If approaching from the left, this vertex, and edges. If the ghost is approaching upwards, it can continue moving right, or go down. And from Now we can apply the edge weights with A ghost entering this intersection from the right chance. And so on, you get the idea. You can also multiple vertices allows the different approach Here the ghost has a 70% chance of going down from the left, it only has a 29% chance. We just This is a lot more complicated, but this is due go backwards. Now, before we calculate the steady We can't just ignore them completely because the A ghost will spend a longer time in a longer simply because they take longer to do is represent each tile in the maze as a This is pretty trivial to do, since a Each tunnel tile will have two vertices associated is moving. Then, we just connect each of the Essentially what this does, is forwards all of one intersection to the next intersection It also delays them from reaching the next path between the two intersections. But now we can with this behemoth of a Markov chain. For the this graph looks like. Since we are ultimately we don't really need to know what direction take all of the vertices that correspond to each The mass of these meta-vertices is just the which represents how many ghosts are currently are facing. And I'm not showing the edges of the adjacent vertices in the maze connect to each in a single tile, I'm going to put 50 ghosts For each tile, 25 will be facing left, and might be important, or want to give your best here we go! The ghosts slowly disperse throughout each tile represents the percentage of the time You're more likely to find a ghost at an because there are more ways to approach see that there is another pattern appearing. The I know at the start I said to hold on, the ghosts but it turns out that is exactly the case. more likely to be found in the bottom left as large enough amount of time, which is way longer Now, what is the root cause for this bottom-left ghosts' behavior. With this Markov chain, we can isolate those two different properties First, lets start with fixing both problems. a direction to be a perfect 50/50 and a perfect 1/3 chance for each direction at see that the distribution of ghosts is pretty much more likely to be at an intersection just due to shows that one of these two flaws is definitely Here I'll change the probability of a ghost 25% chance each. The ghost will still pivot that turn into a wall, meaning that some intersections still prefer the bottom left corner, but not the method of pivoting the direction to take rotationally symmetric. Each biased movement degrees apart from one another, and they should don't completely cancel out is because the maze This produces small biases in certain locations Now let's see if we isolate the other variable. but removed the rule about pivoting the direction. it hit a wall or turn around backwards, it Aha, here's the culprit! In fact, this ends with version. The pivoting mechanic allows for a chance For example, at this intersection, since go back to the left, normally, if it rolls Even though &quot;up&quot; has the worst odds on practically triples the probability a ghost will has a 23% chance instead of a 46% chance of ghost will hang out at the top of the maze for any Finally, I just want to make sure, is this but was this a proper way to represent the only one way to find out. Instead of simulating Only a minimal amount of tinkering with the game to always be frightened, and move Pac-Man out Then, I'll just let the ghosts do their thing and Speed up the game up as fast as I can After recording thousands of data points of out of it. Here's what my results were. And hey, useful after all. But is it really? The only way frightened for way longer than they were intended where a frightened ghost is in the maze, is where I think the more meaningful rule to come away with from their point of view. The only exceptions into a wall, where they will slightly prefer they are moving downwards into a wall, where they And then ultimately, none of this information ghosts overcome their fears and no longer become Thank you for watching! This episode of possible by supporters of the channel via the video-making process, you can become a Patrons get early access to videos as as creator commentary. I appreciate