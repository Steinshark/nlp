Welcome back, everyone, Dan Vega here. And today we're going to be talking about applications. Now, I've been doing a lot of videos large language models. You need an API key to make this happen. I've been harping on the fact that you anything that you don't want leaked out to So I've been using environment variables use environment variables in your spring So that's what we're going to cover Now, we'll start with this. Environment variables in Spring Boot configuration and manage different production, without having to change your code. So we're getting two for the price of one We are not leaking our credentials out to and we are able to make changes in change our code. And friends, that is where we want to be. So here. What's what we're going to do today. application. We'll talk through some of the ways that application, how we can externalize them, maybe on an I'll show you a little trick on using it use this inside of your adie as well. So let's talk through a couple of simple create a new application, and the best way to do so is by using the Thatspring .io. We're going to choose I'm going to to say this is dev. Dan Vega. What will environment variables. Let me put that in a main package. I'm you want. Now I'm going to pick a couple web app. I also want to show off like an environment variable using like a Let's just use H2 and then we'll bring in JDBC API. I don't think we're going to do actual coding. But we'll just bring that some SQL against your database. I think that is I'll go ahead and hit generate. This will download a text editor or IDE, your most productive in. For me, edition. But with that, oh, we got to do a party here. We have All right. So let's get started here in our application. I'm just application, make sure it runs okay so that we're up and running, thing I'm going to do is I'm going to come into application. all of the properties in our application. And again, this is very override it in different environments. So I'm going to start off going to say this is app. dot key is equal to one, two, three, API key here. We don't want to do this. We want to variable so that it can be replaced in the in the next environment that we move to. us being able to access that API key. So to do so, I'm going to create controller. We'll make this a rest controller. All So the first thing I want to do is create our API key. I will say private string API key. And then I want to go ahead and basically source. So what we're going to do is we're going ways. In this one, I'm going to use the at And I can access that key by using the define that key. App. API key. And now I have a very variable. that is going to hold that value. So I'm going to create a Git mapping. This will just be to the root. And then I can go ahead and return a I'll call this home. And all I want to do is return API key. All right. So now if I go ahead and rerun this I can go over to a terminal. I can go into the browser, since this is where I'm just going to pop open a So I'm going to say HTTPIE, kind of like And I'm just making a get request to outputs that value. Now, another way that you can do this is So I could go ahead and say something Actually, you can make this final constructor injection, and then do something like ENV. get property and in this case we are API. .key and that will return to us that So if we run this again, clear and run this again, there is our So I'm going to back this out and use the but now we can talk about making this an hard coding that key in there. So what I want to do is actually turn environment variable and what I can do is So I want to say that I want to refer to say app API key. Now actually let's name this something Let's say my API key because what I could this exact name replacing these dots and I wouldn't have to like set this up like So what do I mean by that? So if I don't have this configuration an environment variable, then it'll just work. And that's why you'll often see somebody anything being in the properties file because they match the property name or But in this case, we're explicitly this value app. API key equal to an set up on my system, right? So there are a couple happen. So there are a couple different ways you can do this. I could you're using Bash or ZSH, you can go in and configure this. You can export of this. So I can come in here and say, hey, I want to create a new my API key and then make this whatever that as an environment variable. So that's one way I use the set command and you can do something similar system -wide. So for using something like an API key that I use all the time. That makes a good, that makes environment variable that I'm going to use all the time. In this case, just want it really for this application. So one thing I Edit Run configuration, and I can say, modify the environment variables. And now it gives me this environment variables. So here. If you have a bunch, you can go ahead and bring this up where So here's the key, here's the value. In this case, I just have one, and again, So I'm going to say my API key is equal and now I'm going to apply this and hit So now, if we go in and we go to our API and go back to the terminal and run this now you see we are pulling that value from an environment variable. So very cool to see. Now, what happens if I don't have a value Let's go back in here and just remove Maybe I downloaded this app on my machine What's going to happen if we try and anything? So if we go in here, we are going to see Injection of auto -wired dependencies If we come all the way down, we see. could not resolve placeholder my API key. So in the instance of an API key, setting a default value doesn't really but maybe in the sense of a database URL, that does make sense, right? So what if we wanted to say that this was Actually, let's just say app .dabase. . URL. So in this case, I'm using an you're using like a real database application here, name. You could set up the username, the stuff. I'm using this as just kind of an point. But if we come in here and we say, hey, I want to go ahead and But if we One is not been created for me. I want to set up a URL. And that URL is going to be JDBC, local host, 5, 4, 3, 2, and then my DB, right? So now what happens if we try to access and nothing has been provided, now we are not going to get that error, So let's come back and set this up so API URL, right? And let's go back to the API controller So we'll say add value. We'll say, what was it, db .U .L. And private string db URL. And let's just create another one. We'll do this for DB. And this will return DB. .U .R .L.! Right? So let's rerun this application now. Now again, we haven't set up any environment does say, I could not resolve my API key. I miss do that? My API key? Environment variables. Oh. my API key. Sorry about that. So now we can go ahead and hit okay. Now with this in place, it should start. This we haven't defined, but again, we've created. So now I'm going to go in here and go to And we did something wrong. Dan, that's okay. Real time debugging. Let's do that again. And we are still db .U .R .L. Ah, app .dabase .U .R. Okay, DB URL is the environment variable So let's say app. Database. URL. Use your ID, folks. It really helps you out a lot of times. So let's go back in here and run this And now we get that default value. that was set. So a couple of cool things thing. So what if I created an executable jar terminal here. I'm going to stop this. I'm going to run application for us. Should create an executable jar in the failing, huh? default test is failing. That's okay. We can do something that you And let's just say skip tests. Right. So let's do that. We're skipping success. We have a jar in here. Now, what if we move this jar to another we had a different API key that we wanted So how can we move this? we just kind of go ahead and test this Java dash jar and I want to run this is in the run this and I hit the endpoint for home, it's variable, right? And actually in this case, yeah, we don't have one set. So we and set one from the command line? Well, you can just pass in as an environment variable. And you here. So this one is going to be my API And we'll pass in the API key. Let's just the DB as that default variable. Or you can come in and just that one for there. So now we're running the application with should be able to open up a another terminal here and say HTTP local endpoint. And then we can see that is pulling in in as a command line argument. All right, that's all I got. I had a variables in the syntax that I was using ID. So I thought we just go through a couple this stuff, I'm sorry to bore you. but sometimes I like going back to kind So if you need to include some kind of and you don't want to have to change code environment, use an environment variable. Again, we can do this within our IDE. We can set system -wide environment If I'm going to use one particular key this does a couple things. Again, makes it easy to move to different We are not hard coding strings in here. here or API keys or secrets or passwords, Anytime you do that, don't do it. Even if you think it's just going to be that stuff in your app because ultimately you'll is kind of an MVP. I want to go ahead and push this up to And one of two things are going to One, GitHub is going to yell at you and They're getting really good at this to Git. Or two, somehow it's going to get and now your credentials are out for the And you can go ahead and scan GitHub for and find all the leaked credentials out So don't hard code it. Get into a good practice of using With that, I hope you learned something I had some fun putting this together. If you did, do me a big favor of friends, leave me a thumbs up, subscribe to the And as always, happy coding. We go, maybe, maybe, we get. Yeah. We're going to be.