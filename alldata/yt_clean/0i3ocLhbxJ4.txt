Have you ever wanted to calculate reflections, What about joining two objects together or objects, including being able to handle some What about projections? What about being able to do all of this in Could there really be a mathematical system things? There is! This video is an introduction to projective a flavor of geometric algebra that can easily In PGA, we turn this into this, this into Before we get started, I need to clarify the algebra&quot;. The reason for this name is that it was initially geometric algebra with projective geometry. However, later on, people started realizing skip the projective geometry, such as using transformations, or by directly doing geometric lines or planes. In this video, we will be taking this third geometric algebra on the linear space of lines Thus, despite this video being called &quot;A Swift Geometric Algebra&quot;, we won't actually be doing If you want to see one of these other approaches in the description that you can check out. Another thing that I need to point out is geometry. We can do elliptic PGA and hyperbolic PGA However, in this video I will only focus on of time and because it is the one that I am Also, at certain points in the video, I'll of speed and clarity. At some of those moments, you will find a screen. A corresponding note will be in the description Well, without any further ado, let's get started. Our foundation will be the linear space of I made a video covering this linear space, haven't seen it, I'll briefly go over the space here. To make lines into a linear space, we write form. To make it easier to use lines as vectors, two, and e zero, and then we associate lines three vectors. Using this notation, the horizontal line here slanted line is e one minus e two plus e zero. e one is the vertical line through the origin, through the origin, and e zero is the line With this basis, we can add and scale lines by adding and scaling the components. We can also find the magnitude of a line with the length of an arrow except that the e zero For example, the magnitude of u is one, and root of two. Geometrically, the sum of two lines is a new intersection point. The slope of this line is found by the relative being added. The higher the magnitude of one line, the With the right coefficients, we can reach sum. Also, adding scalar multiples of e zero corresponds One other interesting thing about this linear doesn't change what line it represents. For example, this line here is represented the vector two e two plus two e zero also This feature is going to be true for all PGA In general, the geometric objects the algebraic change if you scale them by a nonzero value. If you want to see more details about this watching my video on the subject. One aspect of this linear space that I did inner product. From the formula for the magnitude of a vector, inner product of two vectors. It looks like the usual inner product, except doesn't contribute to the magnitude, it doesn't either. Geometrically, the inner product of two lines of two arrows. For example, like with arrows, the inner product magnitude of the two lines times the cosine Furthermore, because the e zero component product at all, we can shift these lines around Using the inner product, we can define what parallel or perpendicular as well. Two lines are perpendicular when the cosine their inner product is zero. Two lines are parallel when the cosine of inner product is the product of their magnitudes. Actually, two lines are also parallel if the which we can account for by throwing in an While it may seem like these ideas are the notable differences. First, because the inner product of any vector that e zero is both perpendicular and parallel zero vector. The second difference relates to this condition Traditionally, this equation only holds when the other. In the linear space of lines, multiplying it would seem that only vectors that represent However, that's actually not the case. If we have the inner product of a line with itself, after distributing, the second term product with e zero. Now because all vectors are parallel with magnitudes. And because the magnitude of e zero is zero, multiple of e zero back in. Thus, these two vectors are parallel, despite other. Geometrically, because adding scalar multiples we have shown here is that in the linear space algebraic definitions of parallel and perpendicular Now that we've reviewed the linear space of actually is. PGA is the geometric algebra built from the Well, this is actually just two-dimensional We'll see how higher-dimensional PGA works Now I realize that some of you may have come knowing anything about geometric algebra. I have made many videos about geometric algebra some of them in the description. However, if you're willing to fly by the seat get away without watching those videos. While you may not understand exactly how the defined, you should still be able to understand on. In two-dimensional PGA, we have scalars, vectors two, and e zero, which represent lines, bivectors one, e zero e two, and e one e two, which lines, and trivectors with one component, As I've said before on this channel, to make often write bivectors and trivectors as a which we take to mean the product of those Together, these multivectors are what make Now one interesting thing to note is that two-dimensional space, algebraically, this algebra. Thus, many of the features of three-dimensional present here, even though we are working in Now to calculate the geometric product, things important difference. Like usual, the product of different basis However, things are a little different when square to. In geometric algebra, the square of a vector We already know that the magnitude of a line Thus, while e one and e two square to one, zero. And that's it! Everything we will do in this video can be right here. We will also be using other products like product, and the inner product, but those geometric product. Really, all of the power in PGA follows from Now that we understand what PGA is at its content. Let's start with understanding bivectors. In geometric algebra, bivectors represent But what exactly is a two-dimensional subspace Well we can think of a two-dimensional subspace vectors. In geometric algebra, the span of two vectors product. So to understand bivectors, let's look at also give us an idea of what the outer product Here's two vectors. What is their span? Well in the linear space of lines, every linear will pass through their intersection. And with the right choice of coefficients, pass through this point. This shows us that the span of these two vectors through this point. Thus, we can think of bivectors as representing But honestly, if you ask me, thinking of this difficult. Is there something simpler that we can use? Well the set of all lines passing through point. So what if, instead of thinking of this bivector instead think of this bivector as just being lines pass through? This point is much easier to conceptualize Furthermore, this gives a surprisingly simple product in PGA: the outer product of two vectors Wait, hold on. We can't just start saying that the outer The intersection of two lines and the outer have already been defined completely independently possibly be the same thing, right? Well, let's check. Let's say we have two arbitrary lines a and Remembering that these vectors correspond this system of linear equations to get the point. Now to calculate the outer product, we will and use these equations for the outer product Like with any product, we start with distributing. Honestly, this expression is ridiculous, so First, because the outer product of a vector these three terms. We can now swap a few of the products at the Now the outer product of two different basis product, which makes things look a little Rearranging a bit, we can see that we can Thus, we see that the outer product is not These expressions look suspiciously similar! Looking at them, we can see several parts In fact, because scaling multivectors in PGA object they represent, we can divide the result make the other coefficients precisely the What this shows us is that points in 2D space in 2D PGA. This might all seem really complicated, but finding intersections is complicated. If we forget about the normal way of finding simple. Under this correspondence between bivectors intersection of two lines is simply their In geometry, this operation is often called lines meet. Thus, in 2D PGA, the meet is represented by Also, we know that in geometric algebra, the perpendicular vectors is the same as their lines are perpendicular, their meet is also Now I want to look at this correspondence detail. Given an arbitrary bivector in 2D PGA, we simply dividing by the e one two component, normalizing the bivector. Let's look at some examples. This bivector simply corresponds to the point If the e one two component was one half instead to would be four, two, because we would have to normalize it. Now one question you might be asking is what component? We can't normalize this bivector, so what Let's try to figure this out by letting the zero. As the coefficient of e one two gets closer infinity. This looks similar to the situation when we infinity, so we say that bivectors that have at infinity. Interestingly, unlike with the line at infinity, at infinity, one for every possible direction. Like the line at infinity, points at infinity For example, what is the meet of a line with Geometrically, I would think that it's the the line. The direction that an arbitrary line goes Let's check to see if calculating the meet infinity in this direction. Thus, we see that the meet of a line with point at infinity in the direction of the Another situation that we can work out now Calling one of these lines a, we can write multiple of e zero. Then when we calculate their meet, the first product of a vector with itself is zero. This leaves just the meet of the line with showed that this is the point at infinity Thus, the meet of two parallel lines is the that the lines are going. If we change our perspective slightly, we geometrically as well, because parallel lines horizon. The next thing I want to talk about is the In 2D PGA, the only interesting case to look between two points. The regressive product between two objects What is the common subspace of these two points? To figure this out, we need to remember that the lines going through that point. So what's the common subspace of these two Well, we have to find what lines are in both To be in the subspace of a point, a line has be in both subspaces, a line has to pass through There's only one line that passes through Thus, we see that the regressive product of two points. Now I want to compare this way of finding Given two points with these coordinates, the them can be found using the point-slope form If we wanted to, we could do a bit of algebra general form. So this is the equation for the line that But in PGA, we don't have to mess with the write this line as the regressive product In geometry, this operation is often called that joins the two points together. Thus, in 2D PGA, the join is represented by Now that we've explored the meet and the join, is the inner product. While we've looked at the inner product of algebra, the inner product is not limited What about the inner product of two bivectors? Well, if you work out the inner product of up just being negative a three times b three. Because we often want a three and b three product of two bivectors is honestly not that it any further. However, what about the inner product of a This is where things really get interesting. To calculate the inner product of a vector onto the bivector and then contract. To do this in the context of PGA, we need the lines going through the point again. We first project the vector onto the bivector, all of the lines that have any horizontal Thus, we see that the inner product of a point line passing through that point. Note what happens if the point is actually We know that the geometric product of a vector their inner and outer products. Because the point B is on the line a, we can vertical line. We now have the outer product of a vector All that's left on the right-hand side now Thus, we see that if a point is on a line, their inner product. The inner product is useful for finding some For example, because the inner product is can multiply them to get their intersection the original point onto the line. Also, if we multiply the inner product with parallel to the original line going through the product of a line and a point on the line Looking at these two formulas, they are remarkably Geometrically they are doing similar things In one case, we are projecting the point B case, we are projecting the line a onto the So in the end, we can do either projection matter which object we're talking about! If you think this looks familiar, that's because thing as the usual projection formula for The only difference is the inverse in the However, since scalar factors don't change in PGA, we are free to drop the inverse in so. Like with the meet and the join, I want to ways of calculating projections. Given a point and a line, the projection of the same slope, so the x and y coefficients line to pass through the point x zero, y zero. After a bit of simplification, we get this. While projecting a line onto a point is simple, is not. I looked it up, and people only described years ago, and not an explicit formula. Thus, I worked out the formula myself, and it. Looking at these two formulas, they seem to but in PGA both kinds of projections are described If you don't believe me, try it out for yourself! Calculate this expression for arbitrary vectors that you get the exact formulas shown here and for projecting a point onto a line. Now that we've talked about the meet, join, to discussing the most important part of PGA: I showed earlier how we calculate the geometric focus now on what we can do with it. If you've seen my videos before, you'll know things when it comes to the geometric product: reflections, and orthogonal transformations. You may think that we'll start with the two-dimensional we're working in two-dimensional space, but I said previously that even though we're working two-dimensional PGA is actually a three-dimensional This means that except in certain subspaces, formula does not hold. So instead, I'll start with focusing on the Let a and u be vectors. To calculate this product, we can decompose parallel to a, and the other which is perpendicular By distributing, we can consider the product parts separately. For the parallel part, u parallel and a represent product is a scalar. Thus, u parallel a u is a scalar multiple For the perpendicular part, because u perpendicular their product is their meet. Because the product of a line and a point perpendicular a u is this vertical line. Now we need to add these two lines. To do so, notice that because u parallel and multiplied by the same thing, the relative perpendicular a u is the same as the relative perpendicular. u is closer to u parallel than to u perpendicular close to u parallel a u as well. In particular, the angle between u and u parallel between the sum and u parallel a u. I'll admit that this argument is a bit hard is this: we have reflected a across u, so reflections in PGA. Armed with this reflection formula, we can transformations. For example, like usual in geometric algebra, rotation around the intersection point of between the two vectors. Like usual in geometric algebra, we call the vectors, such as u v here, a rotor. Well actually the usual definition of rotor normalized, but in PGA we don't usually need I'll be a bit lax on the terminology here. We can write the rotor as its own variable rotation formula like this, where the dagger multivector, which corresponds to reversing Now, if two reflections is a rotation around be wondering, &quot;What about two reflections is no intersection point?&quot; Well, recall that two parallel lines meet What would a rotation around a point at infinity Let's find out. To do so, we can pick an arbitrary line a it. We see that instead of rotating, reflecting translated the line. In fact, it's not too difficult to prove that twice the distance between u and v. So we see that a rotation around a point at If you think about it, this should make sense. The further away you are from the center of like a translation. Thus, when the center of rotation is infinitely translation. In PGA, people sometimes use the term motor fact that we can represent translations in the term rotor for the motors that represent don't do so. With enough reflections, we can represent, transformation on the plane. Wait, hold on. When we think of transformations in space, That's right, points! We've been playing with lines this whole time, represent any rigid transformation if we can points? Well, points are a thing in PGA, so let's transformations on points in PGA. Since all rigid transformations can be written reflections, let's figure out how to reflect To figure this out, notice that we can write of two perpendicular lines u and v. Now, if we reflect u and v, we can see that is simply the meet of a u a and a v a. In fact, a u a and a v a are still perpendicular, geometric product. We now have a scalar factor of a squared, factors don't affect what point the bivector Now that we've figured this out, I'll forget and just call the point P. So this is the formula for reflecting a point Wait a minute... This is exactly the same as the formula for What we see here is that the reflection formula we are working with! And because we can build all rigid transformations now describe all rigid transformations on simple formula. The last thing that I want to look at in two of rotors. In geometric algebra, we often like to represent bivectors, so what does that look like in Well in 2D PGA, bivectors are points. What does the exponential of a point look To figure this out, let's think of this point perpendicular lines u and v. Now, unlike usual in PGA, the magnitude of actually matters, so to make things simple, vectors. Because they're perpendicular unit vectors, one, meaning that we can expand the exponential Now because u is a unit vector, we can multiply which allows us to factor out u. From this, we see that this exponential is rotor. In fact, because u and v have the same magnitude, which means that the second vector in this angle theta. All together, this means that when we use product, the result is just a rotation by Thus, exponentiating a point produces a rotation We can use this to rotate around an arbitrary theta. Now, you might be wondering, what about exponentials We can figure this out as well. As we saw before, we can think of a point vector with the line at infinity. Because the line at infinity is perpendicular the geometric product of the two vectors. So what happens if we raise e to this point Well unlike before, because it has a factor squares to zero rather than a negative number, applies. So what can we do here? Well, if we expand the exponential using its term after the first two has a factor of u terms are zero. At this point, we can proceed with the analysis Because u is a unit vector, we can multiply allows us to factor out u. Once again, we see that this exponential is rotor. In fact, because u is a unit vector, adding line by x. All together, this means that when we use product, the result is just a translation We can use this to translate around an arbitrary arbitrary distance x. Once again, we see that in PGA, rotations same thing. Like with every other operation we've looked with the usual way of calculating rigid transformations. Traditionally, we think of reflections and transformations. We represent these orthogonal transformations matrices, complex numbers, or quaternions. As for translations, we usually use vector There are two main issues with the traditional First, because rotations and translations different operations, composing them can be But in PGA, because both rotations and translations them simply by multiplying them. In fact, we could just define a new rotor three, making applying several rotors exactly rotor. The second issue with the traditional way problem than the first. Consider a vector. We can rotate it all we want using one of However, we have one important limitation: If we wanted to rotate around another point conventional way to do this is to subtract origin, and then add p again. But in PGA, rotations don't care about what Every rotation, no matter what it's around, Let's summarize what we've learned. Calculating the meet, or intersection, is Calculating the join is just the regressive Calculating projections, no matter what objects formula involving the inner product. And finally, calculating rigid transformations sandwich product. And that's it! These few simple operations open up the way applications. However, up until this point, we have only space. What about three-dimensional space? Before we start exploring three-dimensional traditionally work with three-dimensional In two dimensions, our main objects are lines In three dimensions, while we still have lines object: planes. The addition of a third kind of object brings In two dimensions, we only have one kind of join to calculate. Also, while there are two different kinds involve the same two kinds of objects. But in three dimensions, things get much more Instead of having one kind of meet, we now which is their line of intersection, the meet their point of intersection, and the meet of intersection. Similarly, we now have three kinds of joins: the line passing through both of them, the the plane passing through both of them, and the plane passing through all three points. If that wasn't bad enough, we now have *six* We can project a line onto a plane, a plane plane onto a point, a point onto a line, and The traditional way of performing all of these use vector algebra, as long as we can find and points using 3D vectors. To represent planes, we can think of them scalar, corresponding to the plane given by One of the best ways that we know of to represent using something called Plucker coordinates, of vectors, usually written like this. Since Plucker coordinates are not the point these two vectors represent a line. Finally, we can represent points using just Using these representations, we have three kinds of meets, three more formulas for the more formulas for the different kinds of projections. This seems rather crazy, but what can you Of course the formulas for operations with completely different, right? There's no reason to think that they shouldn't Anyway, now that we've seen how these problems look into three-dimensional PGA to see how In two-dimensional PGA, our vectors represent One idea we might have for jumping up a dimension vector, which would then correspond to an This is the equation for a plane in three Thus, while 2D PGA is based on the linear linear space of planes. So let's start with briefly looking at the surprisingly similar to the linear space of In the linear space of planes, we have four the three orthogonal planes through the origin, plane at infinity. A linear combination of two planes is another intersection, and the coefficients say how should be. Like with lines, with the right coefficients, that pass through their intersection. Like lines, every plane has a magnitude given like the usual equation for magnitude but component. This equation is what brings us to the definition PGA: the geometric product of different basis basis vectors square to their magnitude squared. In 3D PGA, we have scalars, vectors with four planes, bivectors with six components, which of planes, trivectors with four components, subspaces of planes, and pseudoscalars with All of this is what makes up 3D PGA. To start exploring 3D PGA, let's start with bivectors and trivectors represent. Like before, we can think of bivectors as consider the span of two vectors. As I said before, the span of these two planes through the intersection of the two planes. Like in two dimensions, notice that these line all of the planes pass through. Taking a hint from what we saw in two dimensions, bivector simply is the line. Similarly, for trivectors, we need to understand Using arguments similar to those for the span the span of three planes is all of the planes point of the three planes. Again, this set of planes is uniquely determined through, so like in the other cases, let's point. Now, if you ask me, seeing all of these planes Thus, to make visualization simpler, when passing through a point, I'm only going to through the point. For similar reasons, I'll also do the same When talking about all of the planes passing two orthogonal planes passing through the passing through the line. Anyway, we see that in 3D PGA, vectors are trivectors are points. Like in two dimensions, we can also have planes, But for the sake of time, I won't be talking They behave mostly as you would expect. Wait, we might have arguments for these correspondences do these correspondences work numerically? We know that vectors correspond to planes lines and points? Well for points, we can use similar arguments show that this is the correspondence between But that still leaves lines. We know that our bivectors are of this form, represents? For reasons I won't go into here, it turns coordinates, which I briefly mentioned before, So does that mean we're going to have to learn Surprisingly, no, and in fact, I've actually point! We can just use PGA to manipulate the lines out. If you really need to figure out exactly what difficult to find two points on the line using describe, and you can figure out an equation Anyway, now that we know what multivectors how to do three-dimensional geometry with Actually, we have pretty much already figured The outer product of two planes represents their meet. For the same reason, the outer product of The case that's not immediately obvious is However, this is easy to figure out if we outer product of two other planes, showing and the line is the outer product of these This point is simply the meet of the original In each case, we've seen that the outer product Somehow, despite the fact that we have three that traditionally use completely different operation for all of them! Also, like in two dimensions, the geometric equal to their outer product. Thus, the geometric product of two perpendicular geometric product of three perpendicular planes product of a plane and a perpendicular line Now that we've seen that the meet is easy, with the join of two points. We know that the join of these two points To try to express this line in terms of the these points represent, which are these planes. Now, notice that of these planes, these planes join of the two points. They are also precisely the planes that are By definition, the common subspace of two showing that the join of two points is their For a line and a point, this plane is their How can we find this plane in terms of the represent? Well, notice that the plane representing the common to both subspaces, meaning that once product. The last case to check is the join of three Fortunately, we can actually figure this out The join of P one and P two is the line joining line with P three is this plane. Thus, we see that the join of three points of the three points. Thus, like with the meet, we use one single PGA, no matter what the inputs are! So far, we have seen that the three different different formulas in vector algebra, are in PGA, which is the same as in two dimensions. Similarly, the three different kinds of joins algebra, but are all represented by the regressive again the same as in two dimensions. Could we possibly hope that the same will The issue here is that there are now six different They can't possibly all be given by one single Well let's check. But before we can do that, we need to look present in this formula. In three dimensions, we have three cases for product of a line with a point, the inner the inner product of a plane with a line. Let's start with this case. To calculate the inner product of a vector onto the bivector and then contract. To do this in the context of 3D PGA, we need represents. We first project the vector onto the bivector, the common plane, leaving just this perpendicular Thus, we see that the inner product of a plane perpendicular to the input plane passing through For the inner product of a plane and a point, We can think of the subspace that the point the trivector, and then the contraction removes The remaining planes represent this line, plane and a point is the line that is perpendicular the point. The last case is the inner product of a line While this case is a bit more confusing than the same pattern. We start by thinking of the line as representing the point as representing a three-dimensional We can then project the two-dimensional subspace three-dimensional subspace of the point. Then the contraction leaves just this plane. Thus, the inner product of a line and a point to the line passing through the point. In general, the inner product of two objects to the higher-dimensional object passing through Now in two dimensions, the geometric product was equal to their inner product. By the same argument as in the two-dimensional The geometric product of a plane and a line product, the geometric product of a plane inner product, and the geometric product of their inner product. Now that we've explored the inner product, In two dimensions, we use this formula to Will it work for all six kinds of projections Let's find out. For a plane and a line, this is the inner Because the inner product is perpendicular which is this line. This is, in fact, the projection of B onto Also, because B is entirely inside the inner inner product, which is this plane. Again, this is the projection of a onto B. For a plane and a point, this is the inner Because the inner product is perpendicular which is this point. Once again, this is the projection of B onto Also, because B is entirely inside the inner inner product, which is this plane. We see that this is again the projection of For a line and a point, this is the inner Because the inner product is perpendicular which is this point. This is, once again, the projection of B onto Also, because B is entirely inside the inner inner product, which is this line. We see that in this last case, this is still Thus, despite having six different kinds of represented by one single formula. All together, we see that like in two dimensions, calculating meets, joins, and projections. And I haven't even gotten to the geometric However, it's practically the same as in two show the results here. By the same arguments as in two dimensions, another reflects across that vector, which the composition of two reflections across the composition of two reflections across transformation as the composition of enough These transformations still apply to all objects can still represent rotors using exponentials now a line instead of a point, acts as the Let's summarize what we've learned. Calculating the meet, or intersection, is Calculating the join is just the regressive Calculating projections, no matter what objects formula involving the inner product. And finally, calculating rigid transformations sandwich product. Wait a minute... This looks familiar! That's because this is identical to how we In fact, to drive this point home, I literally of the video from the two-dimensional part. PGA in higher-dimensional space works the In n-dimensional PGA, vectors represent n-minus-one-dimensional pseudovectors represent points, and multivectors represent the other objects in between. Then, the meet is still the outer product, product, projections are still given by this are still given by the sandwich product. To show how easy things are with PGA, here's Here is the code for this animation I'm showing The animation is of a simple spinning cube Note that I'm actually not using my animation doing the projection onto the screen myself. The first part of the code defines the algebra, constants and variables, the third part is points, the fourth part creates the cube, the rotor used for rotation. However, pretty much all of the interesting projection, happens in the third part. In fact, it only takes one line to do the projection! And if that wasn't enough, I only specified Because PGA works in any dimension, we can four-dimensional cube just by changing a single And why stop at four dimensions? We could do a rotating five-dimensional cube that we want, just by changing this single Now that we've seen how PGA works, I want applications. One of PGA's first main applications was in Rigid transformations are incredibly important PGA can represent these transformations efficiently, In fact, many of the seemingly strange mathematical computer graphics, such as the use of homogeneous quaternions, arise naturally in PGA. Another application is, interestingly enough, I've started using geometric algebra extensively particular PGA. Not only has it helped make the code for my situations, it's also helped me solve some For example, drawing many transparent intersecting problem, and my solution to it used PGA extensively. In general, PGA is useful in pretty much any computational geometry. A third application is in rigid body dynamics. In rigid body dynamics, you usually have to rotational components of motion separately, However, because PGA can represent both translations time, it's possible to combine them into one! This makes the equations much simpler, and it allows for a simple way to do n-dimensional If you want to move beyond PGA, you can also geometric algebra. Conformal geometric algebra can be considered includes circles and spheres as fundamental planes. You can reflect across these circles and spheres using them you can represent any conformal In fact, historically, CGA was discovered be a subset of CGA when it was first discovered. In the end, I hope that this video has shown provides.