Learn how to use TerraForm with AWS. you will realize within a few minutes of Hello, and welcome to the build a development foundations project. So a resume foundations to cover the important aspects of a technology in to build your own projects and apply them to your to find in the course. In this two hour project VS code and deploy an AWS EC two instance, along et cetera, that will serve as a remote development VS code will utilize several TerraForm tools replace console variables, conditionals, file, data and a local exec provisioner to bootstrap the to your VS code SSH configuration file, Since we'll make heavy use of documentation a brand new TerraForm deployment, dive deeper into TerraForm and add this So what are you waiting for, sign up today. So let's start out right here in the AWS can see I've recently visited but just in case in the search bar. Let's click on Now within users, you may see a lot more most of mine, let's go ahead and create And for the user name, feel free to use whatever And now I'm going to choose we're not bothering with a password, this is not So go ahead and click that in next permissions. you can of course, create a new group, or you going to do that just click on Attach existing and then click next tax. Now feel free to tag The next review, we've got right here our user access. Go ahead and click on Create user. your access key ID and your secret access key. I've already installed Visual Studio code it was a machine. But this of course will also work on a let's get the AWS extension installed. So and then search for AWS. And once you've done and click Install. Looks like everything installed and close this tab. And then I'm going As you can see, we've got connect to AWS we need to get some credentials installed. Then as you can see, I've searched for this type AWS and then start typing create credentials as you can see here, I've got a credentials make sure that you get this looking the same if But of course if you don't or you're comfortable whatever you'd like. But what we need to do access key. So go ahead and open your credentials Alright, and once you've done that, go ahead have this white dot that was up here before, then And you should see your profile right here. if you need to, and just click on that, and want that region, I'm going to use a different choose that here, I'm just going to say no. And typically use in my courses, because there's so I just prefer to stick with us West too, but it you can go ahead and minimize that. And then ahead and add something that will give us a little type in TerraForm. And as you can see, there is an It is pretty buggy, it might be better now that this one if you'd like. But I'm actually going to And it's been pretty consistent for me. So I'm and I'm going to close that tab and close my installed, let's go ahead and create our working Open folder. And I'm just going to set mine up in wherever you'd like of course, just like so. And I'm just going to call it TerraForm. Just like select folder, just like so. Alright, so now we installed, everything is ready to start the we're going to cut it down to the bare necessities environment, the more resources we add, the that we keep it as small as possible. And then you can build out your environment to meet your is we're going to use VS code on our terminal. configuration files, providers variables, main explaining all of these throughout the course. that's going to configure VS code based on the IP we've got our user data that's going to bootstrap we're going to build out an Internet Gateway, subnet, and an EC two instance. So all of this once we're done, after all of these files have your VS code terminal will have access directly to which will allow you to have file and SSH access that's a very high level overview. Let's go ahead documentation within TerraForm. And a provider is API of whatever infrastructure you're trying to infrastructure. So you use the AWS provider, if else you will use their respective providers. So we've already provided credentials, we don't need If you scroll down, you can see there's actually we already have a profile. So all we need to like this. So let's go ahead and we'll keep it And then within our TerraForm directory here, new file. And let's call this providers.tf. Just going to remove this version block here, because version three anymore. So again, I'm going to just is current. Now after that, we need to add our block. And that provides configuration that block itself provides the information needed to here, you can actually see that we have some usage credentials file already here for us. So let's paste that right here. Now again, typically, very quick course, I want to make sure it is as going to remove this. And I'm just going to add home directory, dot AWS slash credentials. Because Now, if you've moved it, of course, you'll want to Windows and Mac. So you should be good to go. Now And the region is US West two. So this is Again, if the documentation did not provide here. All right. So now that that's done, let's this and connect to AWS to ensure everything and new terminal just like so. pull this up a little bit, clear this screen. All right, TerraForm has been successfully got hashey Corp, AWS version 3.7 1.0. At least that is perfectly fine. Also, you lock file TerraForm lock dot HCl. And what that's Again, you can change this if you'd like. And But this is something you might want to keep storing your code repository so that you can always uses the same version of the provider, and issue with an upgrade. So it looks like everything I can do this drop down. And you can actually And for Linux and Mac, you'll actually see another going to go digging through it. As you can see You basically specify the resource, this AWS VPC, this is a static value that cannot be to deploy a VPC. Now after that, we've got the we can name it, whatever it is, we want. This is So this isn't going to show up in AWS anywhere. this is how we will reference this VPC in future Now there are also lots of other options that pretty complicated. If you go down to the argument here we can use, such as enabled DNS support, which defaults to false. So let's go ahead and to bring my VS code back over here. And I'm going main.tf. So I'll create a new file main.tf directory here and you didn't accidentally And we've got that up. Now, the way these TF they're all the same file. So if you have 20, they're all going to be processed Test as if You can split up your code, however makes sense whatever you'd like. It's all processed the So let's go ahead and create this VPC AWS VPC, just like so. So this, of course, I wanted a provider. Here, I want a resource. Now it MTC for more than certified VPC just like so. This will wrap our entire resource that And in my case, I'm going to do 10.123 dot 0.0 you've probably seen this cider block before. DNS host names. As you remember, DNS host names I need to make sure that I add DNS host names equals true just like so. And if equals true. Now we don't have to because this is team, you might want to ensure that this is what's default for your VPC. And it might be things that default is true as true just to ensure knows that this is enabled, again, not required, that, we're going to specify some tags. And I just it Dev, just like so. So I know that this is my you can see, I've got my two curly braces is to enclose this resource. So that's all I need just like so. And what this is going to do Just like so as you can see we've got all of Within our VPC resource, we're going to have our know until we actually apply it in the same with we will not know until we apply it. Now as you can that these are all being added. So that all looks MTC VPC to add. So what we want to do next is And as you can see, it basically runs another I'm going to type yes, scroll this up a All right, perfect. Our apply is now complete. I'm going to click no here I do not need us I'm then going to click on Resources. And as you shown here that's from a previous installation. colon colon EC two colon colon VPC, you can also added, go ahead and checkmark that and click OK. on it, you'll see our brand new VPC is here. So default security group, it looks like enabled DNS support is true, we're going to take TerraForm state a bit. So we better understand for TerraForm. To use. This is probably one of the sure you read over the documentation a good bit But essentially, we're just going to take a our state as we deploy resources. As you And we're going to explore several pieces So here we are right here after we have now in our AWS resources pane here, you can see all another way we can see what we've deployed, is terraform.tf state file. As you can see, we have default route, table ID, security group ID, the VPC ID, default network, ACLs, security group, But it's, for the most part, the same information. AWS API. So now typically, you're not going to will normally be stored somewhere off site, or somewhere else. So we have several to access the state. So let's take a look at we only have one piece and our state one resource that information within that VPC, I can run as you can see shown right here, I hit ENTER So we've got information here from our API, the state file specifically. But this formatted a little bit differently. really manipulate that output. But we're not of course, if you want to see the entire state, So keep that in mind. TerraForm state Now TerraForm show is just going to show course can be massive if you have a very large and the information that's being stored within it. manipulate that state to refresh it to migrate it. But just know, it'll be very beneficial to you. and just read all about state as it is the We're going to check out a command almost as fun to say. And that command is TerraForm destroy. Basically, it's going to destroy anything that actually run a TerraForm apply dash destroy. there's not a lot else going on here that a TerraForm plan in destroy mode, which will tell fairly useful if you need to test something out. this TerraForm destroy. So let's do that. Let's delete everything we have applied. So just run auto approve if we don't want that confirmation wouldn't use this in production. If you're typing Alright, right, the destruction is complete, need to know there. So go ahead and reapply much the remainder of the course. So TerraForm all set. We're back to where we left off. You saw about TerraForm infrastructure just comes and goes which we can deploy our future EC two instance. straightforward. Although there are a few more and if you scroll down here is To map public IP that our instance receives a public IP address to ensure we add that so let's go ahead and get we're going to add another resource. And that And then let's go ahead and name it. I'll just use so. And you don't always have to add a prefix like I did not add this prefix, this course would be for consistency sake, I'm just going to keep this let's go ahead and open and close those resource ID now as you remember, when we ran our TerraForm And this is how we want to access this VPC VPC dot, MTC underscore VPC, which again, matches it's like a variable, it's not a string, so you're resource, so you don't need to add quotes. And So if I do the TerraForm, state show, AWS, VPC an ID attribute. And that's the ID that we need there. And that's how you're going to reference from other resources. So next, we And that's going to equal 10.123. And I'm just is one of the subnets within this slash 16. And public IP on launch, that's a long one there, also not quoted. And then we need to provide an West. And we're just going to use to a or at least There are ways to use what are called data especially if you're using multiple availability But feel free, of course, to research that if you And that name equals Dev. Public, we'll just And we'll just name this here as dev public Again, map public IP on launch equals true we label it correctly. So we don't accidentally course, could cause a security nightmare. Alright, go ahead and run our TerraForm plan. All right, and AWS subnet is going to get added. As you can And of course, certain things like the ID are a TerraForm apply. And then I'm just going to add But if you're running a plan first, it's usually and not have to type that yes, every single So I'll go ahead and run this. All right, So I'll go ahead and click on this sprocket pane. And I'll go ahead and type subnet. As available. This is a limitation of this AWS But it looks like that subnet creation was the AWS console to verify we are going to give Internet Gateway. We will then introduce TerraForm So let's get started. As you can see here, the actually a really simple resource to deploy. things that will be exported. within our tags and default tags. So let's just go ahead and go ahead and scroll down a little bit under AWS Internet Gateway just like so. And we'll and then I will open and close my braces. Let's this VPC AWS, VPC dot, MTC vpc.id. Just like so in time, and just paste it in. And then just for the And we'll give it a name of DEV Igw, just like and our dev Igw. So once we've done that, that's and introduce that fun new command. If you go what that just did was that corrected any type as you can see, main.tf and providers.tf, I was not scrolled up. But as you can see, now So it made some very minor formatting So that's great. And if you want to move that a little bit. Run the command again. Alright, so let's go ahead and deploy this brand plan, just like so. All right one to add. As you going to get added. So let's go ahead and run Okay, apply complete, everything looks let's see if we can access this resource. AWS Internet Gateway, we've got it. So OK. And if I expand my resources here, and we'll see we've got two. So if I we can see right here that With the proper tag, we're going to create a to our Internet Gateway. All right, here I am note here. And basically, you can use a standalone Now in this case, they have the routes defined little bit differently, we're actually going to is also fairly straightforward. And we'll head back over to our route table. As you and then we'll provide some tax. So let's go ahead scroll down some, let's go ahead and create MTC public R T, just keep and open and close our resource braces. And within as always, I'll just copy this and paste it Name equals Dev, public AR T, just once again, remember, we then need to add the AWS to specify a route table ID, destination cider let's go ahead and do that. So we'll create that what we'll call it. This is a default route, of Open and close those resource braces, route table route table in TC public RT AWS route, table to specify is the ID, it's asking for an ID. are going to have this ID attribute. So then we And that's going to be 0.0 dot 0.0 slash head for this internet gateway. And then again, Gateway just like so. Dot MTC and as you can hints. So I'm just going to hit Tab, Internet we can see TC Internet Gateway right here. So let's go ahead and I'm going to scroll this And we should have two resources to add this time. And we've got our route. So that's great. Let's go And everything was applied successfully. Let's next to resources and see what we have to AWS EC to route table great. And then I actually just going to take a look at the route table. All dev public route table. Perfect. We're going to subnet by providing a route table association. can see here in the docs, the AWS route table Basically, we just need to access And just specify both of those in an association. so I'm gonna go ahead and scroll and AWS route, table Association, MTC public, and I'll just call it an a sock we need to provide our subnet id. In AWS subnet, MTC public subnet and then once So AWS subnet auto complete that dot MTC some typing and potential for errors.id. Just Then we need to provide a route table ID in that And paste in. All right. So that is And then I'm also going to run another look at that much more beautiful. All right. And Perfect One to add our route table Association. All right, that is all set and all done. And of the other things we've created, we can't we can always go to the console and the route tables. We've got our dev public associations. And there it is. Our dev public we're going to add a very important resource So here we are on the documentation, as you can security group. Now in this case, they've actually which is perfectly fine. Now you can specify as a security group rule resource just like we did Now in your organization, you may find a benefit this will work perfectly. So as you can see here, on any protocol, that's zero to zero. And then TCP, ICMP, etc. Any protocol, you need to use allows port 443. But we actually want to allow hard code this IP to our own IP, so that we don't let's go ahead and get started. Now, sometimes, I it into my IDE, and then modify from there to may have changed by the time you watch this, we're and start that. We're going to add our resource And let's just name that MTC SG for right now, we'll create a name. That's dev S G. we don't need a tag here, because the security no point in having to tag it, you of course, could far as the name goes, this is perfectly fine. dev security group sounds great to which we've used many, many times, I'm and paste it down here just like our ingress and egress. So let's go ahead make sure you have that underscore there protocol equals, in quotes here negative one, not going to honor this negative right here, this And then cider blocks equals now I'm just going want to show everyone my IP address. Make sure can go to what's my IP or somewhere else to find something something something slash 32. That slash But again, I'm just going to put anything my infrastructure that has this open port and this is cider blocks with an S which Now these brackets allow you to enter lists. So if and specify another one after that. But we only of. Now let's set up our egress. gonna slide this equals zero to four equals zero. Protocol, once case, I'm going to allow whatever goes into put your IP address here. You will make sure you perfect. So that's all we need to do there. we go. Beautiful. Then let's go ahead and run a Slide that up. Okay, one to add like we expected. zero protocol, negative one to port zero. Perfect. auto approve. All right, all complete. I will click on Security Groups Go ahead and refresh that page click on Edit inbound rules, we can see all custom source, and again in my case is 0.0 We're almost to the deployment of our EC two AMI from which we want to deploy. To do this, A data source is basically just a query of deploy a resource. In this case, we need an AMI ID let's get started. So if I head over here to my can see an example, data AWS Ami. And of course been using, we're just using data. Now AWS AMI this needs to stay the same no matter what. And it. Now we'll be using most recent, and we'll be to make sure is that we have the correct owner. But in our case, we're going to be a little more owner ID we need. So if I head into the management Going to open that, if I go to instances and going to type Ubuntu here. And I'm going to deploy other courses. And I'm just going to stick to And whatever it is you want, you can choose. But So what I'm going to do is copy this AMI ID a little annoying. And then I'm going to head back AMI under images. And right there, make sure you And here is our owner. So go ahead and copy that once we have that, let's head back over and start give us some room. So now what I'm going to do going to call it data sources.tf. So I'll just like so. And this will just keep things and we'll just call it our server we want to specify most recent equals true. as you can see is plural. So we're actually going and paste that owner ID that we got into here. And but in this case, we just need that owner ID. All let's go ahead and provide a filter to get the name equals, and we're going to filter on but the filter name is actually name and then so make sure it's in brackets. Ubuntu slash bionic dash 18 dot o four dash AMD 64. Make Dash server Dash. And then what we're going and we're just going to pull the most recent no So instead of the date that we would use here, So if I just head right back over here and take just putting an asterisk instead of this date, but so perfect. So that's actually all we And then let's go ahead and run a TerraForm All right, great. So now that is applied. So again, you would usually use a TerraForm show. We can scroll down under resources. And even though we don't have any EC two instances section that contains this AMI data source. we've got an image ID right here, which actually that. And that is, if you look at the date, 2021 So this is actually a newer instance than AMI doesn't match. And for our purposes, that's and then create a TerraForm resource that by the EC two instance resource we create get started. All right, I'm gonna first highlight create that key pair. So to do that, and yes, SSH utility. So I'm going to run the same commands dash t. And we will use a more secure key than and hit Enter. Now we're going I'm just going to copy this instead of retyping. And I'm going to paste that in. And then we're name it, whatever you want here, just make sure of the course. And I'll hit enter, we're not perfect. It looks like everything is good to SSH here. And that shows me that directory. And is what we'll use for our key resource. So now Resource AWS key pair, as you see, we basically name that wherever we need to, we'll give it a Now we could just copy and paste the public key So what we're going to do is use a TerraForm So all we have to do is utilize file and then allow us to do is specify the key just like path instead of the full public key. So let's go AWS key pair just like so after that, I'm just resource braces. Key name, I'm going to go ahead And then we need to pass in that public key. function. And we'll quote this and I'll use And again, I'm on Windows, but these commands So I'm going to go ahead and save that. Gonna run I'll scroll up here a little bit. All right, like everything past those initial checks. So I'll All right, apply complete. So if I take we can see if this is one that is available for key pair does not appear to be one that we can see back into the EC two console. I'll click on key Everything looks great. We're going to it won't have anything installed on it yet. But So let's get started. All right, we take a look AWS instance, as you can see, in the basic very similar to what we have used before. As you else here. Of course, we already saw how to get basically, we just need to provide that AMI and dot AWS underscore AMI dot Ubuntu ID. So do keep we would just use AWS vpc.my vpc.id, for instance, with the word data. And then we'll just there are a lot of arguments for the EC two this thing out. All right, so what I'm going let's add our resource. AWS instance, just like open and close those resource braces, we need to in the free tier, we will use a T two dot but that might cost you some money. And then the AMI in our data source here is data dot AWS dot server AMI, just like so. And then And then let's add some tags. We'll just give it just like so. Now after that, we need to provide And what we're going to use is AWS key pair, dot MTC underscore off.id. Once name and not necessarily ID, but the ID Now if you take a look by just running TerraForm we can see there actually is a key name. you can absolutely use key name ID is just a force As you can see, it is the same for both. So can use key underscore name if you want to be more let's go ahead and give this EC VPC Security Group IDs. You see this s here, brackets. And I'm just going to do AWS underscore MTC underscore s g. Right there.id. And use comma separation to provide multiple security So that's going to be AWS subnet dot MTC Then if we want to resize the default size of the device just like so. And you can actually up this just say 10. We'll keep it in the free tier, which 10, which is larger than the eight that they give all we need to add for our instance for now. All right. As you can see, we've got a lot of But actually don't bother applying yet. We're lesson and add some user data before we apply this just re destroy it. We're going to utilize user doc per engine. This will allow us to have an to go for all of our development needs. So let's is just clean up this AWS instance a And I'm just going to take everything that's not make things look a little more streamlined. So as followed by the tags block, and the root device going to cut out this root device block and put it finish the resource with tags. All right, perfect. user data. First thing I want to do is create And let's just call it user data dot template. We're not using this as a template you decide to use it as a template you can in the coming lessons. Alright, so go ahead and and paste that in. Now this script, as you can see dependencies, it's going to download the Docker update once again, install Docker, and then allowing you to run Docker commands as the feel free to reach out if you have any it's in our user data dot tpl script, and I Let's head back to our main.tf. And let's go So what I'll do is just add user underscore data function here. And in quotes, once again, to do is extract the contents from our user our instance. So Perfect, let's go ahead and see All right one to add. As you can see, everything's looking pretty good. As you can user data were to change, it actually would change our instance. So that's really, really TerraForm apply, auto approve, just like so feel free to pause, and then come on All right, as you can see, the apply is complete, just like so. And as you can see, it's running. But this new one is running, but it's still again, hit refresh a few times, and come on back so now everything is green, we've got to have the instance. First of all, I need that IP from right here. But another way, of course, is to state list, just like so we then see our Then I'm going to do a TerraForm state And here's all of the information we can get it IP address right here. Perfect. So now what I'm you're on Linux or Windows, you can use the tilde that key. Now, if I hit tab that will actually matter. It works either way. And then I'm just address. And hit Enter. Type yes, and bam we are As you can see, we now have Docker installed and look at the configuration we're going to have EC two instance. So first of all, if you haven't and search for SSH. And you should see this remote Just like so. Alright, perfect. So now that back to the Explorer. And first thing I want files. So you should have a file now at So if I do cat, SSH config, just like so. I Of course, this is something I've done before. a host name, which happened to be the same here So what we need to do is provide the IP address and host name. And then we'll utilize Ubuntu for we're going to do is we're going to use template But first, let's create the files. So go ahead Whether you're on Windows, or Linux or Mac, Windows is going to be different. So I'm I'm just going to create windows dash SSH config go ahead and grab that script, copy it, and paste will need to replace your username here. Mine, but you might be go ahead and replace that. And and an identity file, which we didn't see before. is we actually specify the host name, the And we're going to take a look at how to do save this file if your windows. And if you're So again, you can call this Mac if Linux SSH config for our file name. And this go ahead and copy the script and paste it in. And home dot SSH slash config. And then we've got the just as we did before. So go ahead and save that if you utilize both platforms like I do, configure the VS code on our local terminal Now a provisioner is not something you want to a provisioner success or failure will not So if something goes wrong, that's just too bad. other than just running it again. While this it's perfectly fine. For something like this, all a config file on our local terminal. This is a overall success of the deployment if something let's get started. First, we'll take a look over provisioners are a last resort. Generally user data which of course we do Ansible or configuration management tool. If there's some instance. But once again, on our situation, exec provisioner to allow us to configure local basically we're running a provisioner within an AWS instance, resource provisioners are something called a null resource also. But we're thing we're going to use is this self object here, and access information. So if we need a we're able to access that right here, using might notice, we've got this dollar sign, and basically what that means is this is going to be So we've got a string here. But this here will be And you may have remembered that in our previous So right over here, once again, we can take a remember these here, the same syntax, these are identity file, whatever we need to pass in. So Gonna go to the bottom of our instance resource so. And then local dash exec, we've been using remember, but this provisioner uses a dash make and not an underscore. This is a mistake I've made block. Next up, we provide our command. Now from these files here. And to run these we won't use the file function, we'll use what's look at the template file function here, you can pass in the path. So for instance, you can take a the path which is using this interpolation syntax and then you use a comma. And then within an in the variables that you need to pass in. So in my case, since I'm on a Windows machine, I'm config dot tpl, just like so if you're on Linux after that, we need to pass in our variables. some curly braces, and we will pass in these First up, we need our host name. Remember, we had is going to be self dot public underscore IP. instance that we used before, whenever we SSH into to access that after that, we need to provide the is the EC two instance username that we have. So that identity file is And the private key is located we'll just key just like so. Alright, so that is all of the we need to pass in an interpreter. Now the what it needs to use to run this script. Now it to add this for that, but we will just to be sure, Equals, and since I'm on Windows, we're going the next command which is dash command. Now if you I'm just using this as an example. bash, and we'll have a comma here. And then But again, I'm on Windows so I'm going to so once you've done that, that is everything create our instance. And it will replace the Ubuntu and the identity file with this key Now the first thing we need to do is we need as you can see, we've got no changes here. That's it doesn't read that there's a provisioner there, we added one, we're going to redeploy our EC two hopefully, when we redeploy this instance, this required to our configuration file and allow us to go ahead and give it a shot. So first up, once And as you can see no changes, which means that TerraForm hasn't detected anything different. as differences in the state. So it's not going look at a way that we can trigger that run. First again. And of course, we've got our AWS instance copy it. And then what we want to do is use a new we've used TerraForm apply a lot. But now what used to be known as TerraForm tanked, which on the next run. But now instead, we just use dash dot dev node here. And let's hit enter. All right, Okay, now we've got one to destroy, and our instance. And once that happens, it should run file with what we need. And allowing us to SSH and type yes, and pause this video. Come you might want to hop into the EC to console. And have to complete and green. Go ahead and come All right, all of my checks are passed here. And this is now the moment of truth. First file. And this is a really good sign. Look at what we asked it to it added the IP address the our config file. So now that that's happened, just type in SSH right here. And as you can And hey, check that out. So we've already got opens a new window. This is a Linux host. it's a Linux host. So Choose Linux here. Looks like everything is setting up All right, let's open a terminal terminal new Docker is nice and installed. Once again we can perfectly good development environment ready to go home Ubuntu is a remote folder. So if I run that I can hit trustees authors. Bam, perfect. to start optimizing our script and making it more Now, so far, we've hard coded pretty much to give us some flexibility. So that we can adjust single attribute here. And instead being able for instance, probably one of the things we're using. So since for instance, I use Mac, Windows I'm going to want to be able to modify So let's go ahead and take a look at that. Now interpolation syntax to specify a variable here. whenever we apply our script. So I'm going to use and basically that's going to be $1 sign So whatever happens here is going to be So let's go ahead and name this variable, So anywhere we need a variable, you just like so. So now if I choose windows, Linux, Linux, dash SSH dash config, just like so. this variable and specify that, hey, we've got And to do that, we can either do it here in and most everyone is to create a new file for Once again, it's analyzed just like any other will just make sure that it's easier to find our look here at the input variables, documentation, straightforward, you use the variable, variable And you can also give it a default. Now the type recommended. So that your other DevOps coworkers type of variable is expected. So let's head back So it's going to be a variable, once again, post And we'll just provide a type and that to bother with a default yet, but we'll let's actually go ahead and perform a TerraForm it's actually asking for this variable Anytime you add a new variable, any destroy, that you define those variables. And we'll look have it popping up every time here from the define it dynamically. So let's just go ahead and specify Linux, but again, nothing really matters destroy this infrastructure. Pause the video and so everything is destroyed here. In just to it is going to ask me for that variable. So if I in mind. Again, if you have variables that are not those variables. So if you're in automation that initialize a variable and how to define it at the way to define variables when an automation as it automated. So in this lesson, we're going to and which of those ways take precedence over the let's take a look at the docs again, and if like we've got default values, custom validation really good information. But what we really want you can see variable definition precedents. are processed last. So as we go down this list, environment variables are processed last. So if you define a variable in terraform.tf VARs, which is the variable we're going to use. And then not too many people use, but you can use you've then got auto.tf, vars, and auto that Cloud quite frequently. And then you can specify But this isn't like a dynamic definition. and you type it, you just add this dash var And we will look at that. So let's what we're going to do is run the TerraForm help you work with certain functions and play with might need to experiment with before you deploy. a look. As you can see, it did not ask us for a can see it's known after apply. So until we then our TerraForm console has no idea what that and type exit to get out of the console. And what so go ahead and add default equals, and then yours might be Linux. So now let's go ahead and underscore OS. There you go. So now it is has looked at all of our configuration files and awesome. All right, so I'm gonna get out of the I'm going to create a new file, and we're going Now, this is the default name for our variable define the variable. So host OS equals windows. since we're not running this right now. So now And let's run var dot host OS. Now it's takes precedence over a default variable set So now I'm going to get out of the console again. or we want a different script that only now if we still have these two files, how are we it defined in TerraForm dot TFRs? Well, there are the variable in line with our command. So if and we'll just say host, os equals in Unix, is Unix. So if you need to override everything you specify it right here in line, Apply or TerraForm plan that you specify this that you've got. So now let's take a look at Let's say that we have a dev dot TFRs. Now what front. However, TerraForm is going to process so if you have a dev dot, TFR, and let's say we run a TerraForm console. And then we run Varta OSX. So if we want to pass in this file, we just equals dev.tf VARS. Just like so. And now let's Perfect. So now we've seen most of the ways precedents it uses to decide which variable to config file dynamically based on the definition interpreter dynamic. Unfortunately, this isn't So we need to look at a better way, we're going the interpreter we need dynamically based on the started. So what I mean by interpreter, of course, what interpreter is going to be used to interpret it's PowerShell. And if it's Linux, it's bash, like we did up here. That was very simple. And But you know what, since we know that it's I don't want to create a new variable just to the same host OS variable. So if you take a look you can see basically, you provide a condition or the false value. So if host OS is Windows, false value could be bash, for instance. So let's this looks like. So I'm going to run the TerraForm definition. Of course, we haven't defined all over going to define it right here in line, instead of host underscore OS equals windows. For me Windows perfect. So what we want to do is say equal signs here, because we're not setting then first we'll just say PowerShell. And we'll use exactly, but just for the sake of just like so. As you can see, we got is Linux, and we run this same exact command that's pretty straightforward. So what we want command, which of course, I've also provided, PowerShell and bash. So we'll say var dot host OS PowerShell comma, dash command, just like so if this is false, then we just use bash, And perfect even though the formatting is a So go ahead and just copy this directly Ctrl C, that in just like so. And that's all we have to And let's go up to our terraform.tf I'm gonna go ahead and change this to Windows The default is Windows, which is fine because So if that's different, that is perfectly And then once again, with that our main TF, a TerraForm plan. All right, everything looks like it TerraForm apply, auto approve, and hopefully we will be able to SSH into it just like we were apply, pause the video and come on back whenever everything has come back just fine. We're if this new IP address is available for SSH. I'll one. So I will click on View command palette, And there it is 342219224 6.58. This is a Linux machine, I And everything is looking absolutely fantastic. We ready to go. But this time, it's dynamic. Based on nice little convenience feature to our script. By as you well know, we've been manually finding the Well, that is incredibly inefficient. make this a little easier. So as you can see, it's incredibly simple to do. So this, of course, going to access the public IP. As you can see, such as the ability to mark an output sensitive you've also got a depends on feature as well, just going to go ahead and access that public IP you can then access all those attributes to see what output we're going to get. As So if we just type AWS underscore instance, dot there it is. So that's very, very simple. And as state show to get all of these attributes out of this console, and run a TerraForm, state AWS instance, dot dev node, just like so we can output. As you can see, we get output instance did, we just accessed that. So let's go ahead is just create a new file output.tf. Once again, to clean things up a little. So output. Here, those braces, value equals AWS instance, dot dev all we have to do. Now to access this output, we just because we added an output, what we can do And that's basically just going to consider this to it, just like so as you can see, we've got go ahead and run this. Apply complete. That's it. to see our output once again. And this is very, in our TF state, scroll all the way to the top, very easy to see what we need to see. So outputs can do. You can get very creative with what types need to know is that IP address which matches