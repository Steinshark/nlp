I'm using Node.js quite a bit because whilst I also do enjoy working with Go and with Rust which I've learned over the last year and which I'm using for some side projects, whilst I do enjoy these languages and whilst I think that of course other languages like PHP and so on are awesome as well, just to get that out of the way right away, whilst that's all the case, I'm using a lot of Node.js if I'm writing back-end code which I do quite a bit these days. Now of course I'm also working a lot with React and Angular and so on which are front-end frameworks, mostly, though the lines are becoming blurry, but when it comes to writing back-end code, Node.js it is. And I guess technically most projects, even pure front-end projects, do rely on Node.js because the build tools might be using Node.js under the hood because you're using npm for managing your packages maybe and so on. So Node.js is popular, it's simple, it's there to stay, I'm using it a lot, but the question is should I and we maybe switch to Bun or Deno or Cloudflare Workers or one of the other JavaScript runtimes we have nowadays as alternatives to Node.js. Because of course a couple of years ago there essentially only was Node.js, but nowadays we have all these alternatives. Deno was released a couple of years ago, Bun I guess became more popular and well-known last year, 2023, and then we have these runtimes that were essentially created to make it easier and efficient to run JavaScript code at the edge or on the edge like Cloudflare Workers and so on. So we have all these alternatives now and of course these alternatives exist to solve problems that were identified with Node.js. Performance problems, missing features, clunky features, syntax and so on. For example Node.js natively does not allow you to write and run TypeScript code, you need a compilation step for that or some extra tool which compiles the code on the fly in the end. On the other hand Deno and Bun do allow you to directly execute TypeScript code. It still gets compiled on the fly there but it's all baked in. Bun also has built-in support for running tests for example and Node.js does not have all these features, though I will say that more and more of features like this are being added, at least that's my impression. And that already shows us that it's probably good that these alternatives exist because they lead to more innovation, if you want to put it like this, in the Node.js team, the Node.js world. I guess you could kind of frame it like this, though of course you could also argue whether it maybe would have been better if the developers of these alternative runtimes would have simply contributed to Node.js. But that's a different discussion. My main point here is whether we should switch away from Node.js and use one of these alternative runtimes because they do of course solve certain problems, they were created to do that. And I'd argue, or at least I've decided for myself, that I'll stick to Node.js. And in the end there is one big main reason for that and that's stability. Okay I guess technically it's more than that, it's also the popularity of Node.js because this popularity in the end kind of leads to the stability and with that I simply mean that the Node.js runtime as a whole is very stable, which of course means that innovation is slow, but it also means that code you wrote like six years ago very likely also still works and that's a big thing if you're working on real projects. Having shiny nice new features is great but stability is king if you're building projects that are there to stay, that should still work in a couple of years. It's also important to have a language or a runtime that is popular because that of course means that there are many third-party libraries, many learning resources, many jobs, which is also important and that's all a bit harder when it comes to these alternatives, when it comes to Deno and Bun and so on. Sure they also are popular, you could say to some degree they are more popular than Node.js, at least they're a bit more hyped, but the new stuff is always more popular or almost always. I guess with popularity regarding Node.js I mean that it's getting used a lot, it's popular amongst companies and I guess in the end also amongst developers. There are plenty of resources, plenty of packages you can use, it's here to stay and for that main reason I'm sticking to it. I guess there also are some other reasons, for example if you're switching to something like Bun or Deno there can be compatibility issues, so existing code that you wrote for Node.js might not work anymore, third-party libraries that were created with Node.js in mind might not work when using Bun, so that can be problems there. If a technology is new like Bun still is, I would say, then it can also still contain critical bugs or problems you might encounter if you're then using it to build a real application and I'm not saying that this is necessarily the case, there just probably is a higher danger of running into such issues. Now of course you also might run into none of these issues and you can of course absolutely therefore go with Deno, Bun or any other runtime for your projects. I'm not saying that you shouldn't use any of those, I'm just saying that I deliberately chose to stick with Node.js for the reasons I outlined, but of course I'm super interested in learning what your choice is or your opinion on that is. I can already imagine I'll get some comments by people that are not using Node.js at all because it's garbage, because you should use enter random language here, that's fine, but if you are writing Node.js code, if you're working with JavaScript, I'm super interested in learning what's your favorite here and why did you go with Node, Bun, Deno, whatever it is.