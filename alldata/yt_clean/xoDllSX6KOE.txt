&gt;&gt; Today on On.NET, we're going WebAssembly with Bolero. Yeah. [MUSIC] Welcome to another episode Today, we've got Phillip, Mr. F#. He's going to talk to us WebAssembly, and I guess the browser. &gt;&gt; Yeah, and some VS Code. &gt;&gt; Oh and some VS code. &gt;&gt; A little bit. More of I'm not really going to talk &gt;&gt; Two or three people watching the show who don't know who you are. How about you introduce yourself. &gt;&gt; Okay. My name is Phillip Carter. I work on F#, all things, like compiler, language, tooling, documentation, things like that. &gt;&gt; Yeah, and you're a &gt;&gt; Yeah, I still am. &gt;&gt; Yeah, still am as Awesome. So what are you &gt;&gt; I'm going to talk as you just mentioned. &gt;&gt; Yeah, the story &gt;&gt; WebAssembly is this but I think I'm going to back up the F# stuff because some be 100 percent clear on what They may know about a thing called Blazor and that it uses WebAssembly, and there's this There's some efforts going on here to get C# into the but there's questions of, what actually is that though? What's going on? I guess it depends on who you this promise of WebAssembly as All though JavaScript ecosystem, great language, maybe not so great. What if we could put There's been a lot of the JavaScript to varying degrees of success and some people and make it better But WebAssembly is actually, I like to think of it as a compatible It's not intended necessarily to wholesale replace everything That would actually be crazy. &gt;&gt; Yeah, I don't think I think of it as an alternative. &gt;&gt; Yeah, it's an alternative, but you can incorporate it with your other parts of your You want things to than create this own world for yourself where you can't talk to this massive incredible ecosystem that can work in the browser today. So it is fundamentally most browsers pretty much support it at this point So there is C# support which we have some people working on, but there's also F# support actually. It's built by the Community, which is really, really cool. &gt;&gt; Yeah, how about I give I'm familiar with this topic as well. So one, we will call it Wasm. That's it's short form. Another thing is that there was So that was really the So if you ever see that, that's basically v.5 or I think of it like we we sometimes talk about Linux, and we talk about x64, and ARM32, and ARM64. I think of Wasm as a single chip We'll talk about Linux running on Wasm is just this one thing. It's this singular character, and it's both a chip and an It's always the same everywhere. So there is no Linux version of WebAssembly and Windows It's just one thing. It's effectively a 32-bit chip. So it's 32-bit everywhere. That's really cool this code and it can run in it can run on your phone, iOS and Android, and no It doesn't matter which &gt;&gt; No, absolutely not. &gt;&gt; You can start with C, C#, F#, and Go. &gt;&gt; There's even a which is weird, but it's a thing. If you can do it, you might as well. &gt;&gt; Yeah, for sure. &gt;&gt; Yeah. So with that in mind, one of the things that Blazor that foundation and it hey, I have a framework with which I can start building things with. I don't have to necessarily Wasm is and how everything that &gt;&gt; The Wasm of Wasm. &gt;&gt; The Wasm of Wasm. Yeah. You can just have an opinionated Blazor does that for C#, and so Bolero is something that It actually uses some of the components of Blazor It's not the same but it's a lot of the just going in an F# direction. &gt;&gt; So if you think about You could say it's &gt;&gt; Yeah, in a way. So they got this wonderful site. If you go to fsbolero.io. &gt;&gt; Let's check it out. &gt;&gt; Bolero, F#, and WebAssembly. You can develop SPAs with the They have this cool button, But what's great is there's a super easy getting started experience. You just need.NET Core. So after that, you just You can create a new Then, when you run it, they have a little video showing It's very simple. So I already &gt;&gt; I assume you can do this &gt;&gt; Yeah, I have this If I was running Windows, If I do Ubuntu or There's definitely a lot here. It is about fundamentally You don't have to write both F# You don't have to write F# and C#. You can just do F#. It uses a particular way of doing things that's which if you've heard of it's just when instead It's oriented around this types that represents and say, well, this page could have this number of things When you click on this thing, there's an action that can happen, and you want to update the UI based off of that action It's a very top-down, any action you can conceptually think goes and then changes percolate through the pages that we render is based off of what It's very similar, this is what React was built on top of this idea. The ELM language actually called the Model-View-Update thing. So there's this library takes that same concept and It is agnostic of UI technology, so you can use it with F# can use it F# on top of WebAssembly. Then, they add a bunch of other little goodies and some opinionated ways to communicate with the server with So there's a whole lot in this package that you can Although it's experimental it's preview and it's with Blazor being a preview and WebAssembly perhaps I think it does actually a really a really true complete picture for building real apps Speaking of real apps. One of these really is the &gt;&gt; Right. There must be a lot of code to run through with that thing. &gt;&gt; There is a lot of So what they actually have here is you go to if you click this button, There's a couple of This is actually executing It does it by taking, I think we call it the F# so the way the F# there's a thing called and that's what does Then we have a head on top FSC calls into FSharp.Compiler, it's called F# Compiler private. It's the Compiler library, and Well, that stuff is, it doesn't care if it's or Mac, or anything like It's done at standard-based. So they just take that, and they say, &quot;Well, we're just going to So what I'll show here. &gt;&gt; Right. This is similar It has a similar model. &gt;&gt; Yeah, absolutely. &gt;&gt; I was going to ask you to do this because I don't believe &gt;&gt; I got my- &gt;&gt; - I think we were on network. &gt;&gt; Yeah. There we go to network. So I'm going go ahead and Let's call Fibonacci of five. So one thing that you noticed You notice I got an error here. &gt;&gt; Quite quickly. &gt;&gt; Yeah. The type int to is not compatible by blah blah arising from This is basically saying which means int, but I simply I didn't pass it the So the Compiler immediately If you'll notice over here though, there's nothing in So I can put that back in. It's happy, I can run it. It actually compiles, does that, I can do that, sorry. &gt;&gt; Right. We could be doing &gt;&gt; Right. &gt;&gt; Right now. &gt;&gt; Absolutely. &gt;&gt; I don't believe it &gt;&gt; There's none of this. notice the network here is when we change source file. &gt;&gt; Okay. So all we did &gt;&gt; Right. &gt;&gt; - across the network, this program which is in no way &gt;&gt; Right. So I just had a thing Rich to you and sure enough it compiles and runs hello &gt;&gt; And still no network. &gt;&gt; Still no network. Now, we'll this is we're going to use no &gt;&gt; Right. &gt;&gt; So what this does, is this actually hosts a JSON Type Provider which is a feature in F# where point in arbitrary data can then hook into the F# Compiler and give types based off of that. So in this case, it just has You'll notice there's this that name property like that's was generated by the F# So again, like you know, there's some network calls now actually went to a real URL here. &gt;&gt; Right, it's line 10. Okay. &gt;&gt; Right. This is just a JSON &gt;&gt; Yeah. Which also &gt;&gt; Right. But if you go, there's actual a name property that name actually corresponds to So it's going on as in and made a web request that got parsed it and it was able to that's running in Wasm and &quot;Here are these properties name and actually prints it out.&quot; So every single repository that These are their names out in a bullet point list. &gt;&gt; Right. &gt;&gt; This is pretty cool because the point where you can host something like the you can host a lot of stuff. &gt;&gt; Right. Exactly. &gt;&gt; Yeah. &gt;&gt; So one thing to talk about is, my thinking would be that, so let's start from the beginning. So the run-time, the that's what we use here, it was compiled to WebAssembly But then basically, everything on top of it I think is So basically, what we do is we take in that text run it through the F# Compiler, the F# Compiler has to be it's like BCL dependencies underneath &gt;&gt; Yeah. &gt;&gt; So the only thing that's actually WebAssembly is the I'm actually shocked &gt;&gt; Yeah. It's pretty sleek and even though I said I think that goes to show that once we determined that this stuff it's going to be in We're not going to be coming out that you can't feasibly So all this stuff is There's a repo called That's exactly what this is. So there's a couple The main thing that we have here instead of the new Git client, they uses the packet client but it uses the same stuff under the covers. One thing I want to a list of their So there's Blazor builds with a CLI so they can actually Then just the co Bolero. They have a fork of that makes it available on Wasm and same thing with this F# That's all that this Aside from that, this is just I promise you, there's no like This is F# code. They call into the Compiler library, they have this thing called we have all these options that there is this thing called the FSharpChecker that's like the component in the They have to do that so check the code and all of this just runs in Wasm &gt;&gt; So one question I have is you basically can say, I want to do the for the reasons why have this alternate model which I want my C# code to and I'll use this SignalR Does Bolero support or is it basically WebAssembly only? &gt;&gt; You can support both. So there's some different ways that They have this.NET new That gives you the whole package. You can get a little fancier with configuring what You can create something so it's but by default this also includes &gt;&gt; Okay. That way, it's &gt;&gt; Yeah. Exactly. I think is saying, &quot;This is where We're going to have that similar model going &gt;&gt; Okay. Makes sense. &gt;&gt; So I actually created one You'll notice that There's this MyApp.Client &gt;&gt; Actually, before we leave Bolero or maybe we can we should do some shadows to the people who actually &gt;&gt; Yeah. Absolutely. I &gt;&gt; Okay. Just checking. &gt;&gt; Yeah. This is not a This is an F# Community a company called a lot of really cool at F# stuff. Some of the folks absolutely, incredible F# engineers. So that's why they were So I just want to show the there's just a single F# file This is all a configuration. I don't want to call that you generally &gt;&gt; Boilerplate. &gt;&gt; Yeah. That's boilerplate. It needs to do this, thing just like you would normally do in a Blazor app and like it There's this IWebHost this is where that There's this thing called a Handler. We want to set up a Handler &gt;&gt; Yeah. We wouldn't exactly call &gt;&gt; Right, yeah. So you would see but in this case, it's all an F#. This is just .NET Core. So perhaps not as interesting where it's more fun because this So let me just actually run it first. &gt;&gt; Right now we're &gt;&gt; Yeah. So I'm initiating So what the web server is going then host the app in the browser When you're actually that's not making any unless you're doing like serving new pages. &gt;&gt; Right. So the main purpose serve up the Wasm files &gt;&gt; Right. &gt;&gt; Yeah. Okay. &gt;&gt; So you can see here, now we have it saying, So this is just the template that shows you a couple It says this entire application So if you're curious, &quot;Okay. Where does this come from? Where does this come from? &gt;&gt; Yeah. &gt;&gt; That is driven by a like there's some standard HTML stuff here but it includes So you got to this dollar sign thing. These are little holes that &gt;&gt; I see. So this is similar &gt;&gt; Yes. But then, you put these holes in there. In a way, at least to think of it, is saying, &quot;This is going to be what's &gt;&gt; So one question I have on that and maybe the designers but like ASP.NET team with Blazor They did like CSHTML extension. Now I think it is? What is it now? Just .Razor? &gt;&gt; .Razor. &gt;&gt; .Razor. &gt;&gt; ASP.Razor. &gt;&gt; Okay. Yeah. So they're is very similar to HTML but it is indeed a different format the templating engine thing. &gt;&gt; Yeah. &gt;&gt; Do you know why the folks &quot;It's HTML. It's all good&quot;? &gt;&gt; I think it is partly just the design choice, Getting the F# stuff to work with the Razor files can actually &gt;&gt; Yeah, I didn't mean &gt;&gt; Right. &gt;&gt; Like we use FS Razor or something. &gt;&gt; Yeah. I think they'd probably My best guess is most web developers or people or at least to some degree, &gt;&gt; Sure. &gt;&gt; As it turns out, put stuff like that in HTML anyways. &gt;&gt; Yeah. This reminds me of knockout- &gt;&gt; Yeah. Yeah. &gt;&gt; Which I used before. &gt;&gt; Yeah. So the folks been doing F# with web So that's definitely &gt;&gt; Yeah. Definitely not a &gt;&gt; So we have this file So F# files, you typically want usually the way that there's the stuff at the very It typically depends So at the very top, we have at least what we're saying A page can either be the Home, the Counter, or the Data. That actually corresponds right here, Home, Counter and the If you navigate on this is a special have, this Endpoint Routing. This is just a very you can use an F# Union type to say, &quot;Okay. These are all of my pages. These are their names refer to them by in my F# code, and this is the Endpoint associate with it when you &gt;&gt; Right. So I assume this isn't literally ASP.NET Core &gt;&gt; It's just inspired? &gt;&gt; Yes.Yeah. Exactly. &gt;&gt; Yeah. &gt;&gt; It's just a little &gt;&gt; It makes total sense. &gt;&gt; How it does. So back here we're defining a for actually all three Well, the model as we're So a model is you can think that what the users are actually they're interacting with a page. There's this single username password, signed This, say I sign out here, we go admin and I think the default is just password as the password. Then you can see there's &gt;&gt; I've heard of some of that. &gt;&gt; Right. So that's all of this data is being just a conglomerate of all of the your conceptual model Then book is sort of A book has a title, an author, a published and all of that information is also listed on the other page So when you have a model, you needed an initial state. So for example, there's no you're not signed in as anything, you didn't fail to sign in because that you didn't even do There is no error. The counter and this little &quot;Counter&quot; page here is zero because that's That's how you define it. You define your model, you define an initial and then you get into I'm actually just going to collapse I want to get to this This is where you start getting into the update notion of you're well, what updates the UI? Well, they use this where you say an action performed on the page has a message So in this case, the set page message sets which You can say., &quot;Okay. What Are we incrementing or Are we setting the There's this increment, Are we getting books? If we got the books, these book types that allows So there's a whole bunch when you build one of break these up into &gt;&gt; Okay. I was going to ask it's not a particular problem but you can imagine you wouldn't want to put &gt;&gt; Yeah. &gt;&gt; In fact, in some cases, you might want to reuse the same name but do &gt;&gt; Absolutely. Say you had For example, you could Counter Messages things like that. That could be done there. But so I want to walk through very briefly what this counter &gt;&gt; As an example. &gt;&gt; Because at the very bottom, there's a lot to set up here. But it eventually, it initializes It does this program.nkProgram passing in an initial model, some initial message state, all the initial state there, and then it's setup your functionality for how your you define your messages for how that UI can change an update function that actually that changes the current model. There's this function called update. In this case, it takes into thing Were not really using that in but it takes in a message and it takes in what the current model is, and it produces a new message, a tuple of a new messaging, a command which was the in this case, what was the So this model is the thing So as I highlighted it here, you'll notice there's a model, after I increment, its equals model.counter plus one. Well, that corresponds to So when I hit this button here, that actually sends to this update function. Well, we received an increment Well, in this case, we take the current model that and we create a new one that So you can define but now you define your whole, at least that part of the UI You have that represented and you just construct a new one with different data that corresponds to what you want based off It's pretty straightforward, and It's all about just functions and &gt;&gt; Make sense. It's reminds me of it seems almost like the midpoint I don't know if that's, I'm sure people are screaming, that's fine but &gt;&gt; I guess I can see this takes some of the MVVM stuff about I have this very of what a UI actually is. The Pub-Sub thing of that I think where I set up, okay, this is the initial and now I'm listening to all Depending on those here's how I'm going to change the Yeah. That is basically what MVU is. So this is just a little It's not like a real app but can have many update functions they can have different So it's quite nice. What's great is it's all F#. We're not hitting the network &gt;&gt; We could do view source again. &gt;&gt; Yeah. &gt;&gt; Go view, yeah, &quot;Inspect&quot;. &gt;&gt; &quot;Inspect&quot;. &gt;&gt; Well, Inspect isn't super useful because there's clearly &gt;&gt; Sources. Okay. There we go. &gt;&gt; Yeah. Okay. Whatever. &gt;&gt; Okay. So how about we &gt;&gt; I mean, we used the &gt;&gt; Yes. &gt;&gt; Let's remind people where they can find the stuff so they then we should finish any kudos &gt;&gt; Absolutely. So if which we'll probably put they have a very clear the video that they play, it's like 30 seconds long and You click the &quot;Learn More&quot; button. There's a whole lot more There's different what's Routing, what's this routing thing all about. How do you do remoting? How do you do this, It's all open source as well. So if you're the person who wants to hack on it a little they take contributions I'll actually navigate to see who these folks are. So the FS Bolero organization has &gt;&gt; That's great. &gt;&gt; These are the folks Adam, in particular, he's been in a part of the F# community I think he's like the &gt;&gt; Could be. &gt;&gt; So they build all this stuff, which is pretty great. They have quite a few the Core library itself. There's this HotReload thing You can just update a very tiny component and only You don't have to refresh the page. The actual templates for the actual TryFSharpOnWasm, they have all their things they actually utilize. These people are fantastic, &gt;&gt; It looks pretty legit to me. &gt;&gt; Yeah. I definitely recommend interacting with them if &gt;&gt; Be a helper or you &gt;&gt; Yeah. Definitely, I mean, I honestly like there's the or rather the thing that people want out of WebAssembly is This and Blazor and other efforts show that we &gt;&gt; Yeah. Yeah. I mean all this So not enough foreseeable &gt;&gt; Okay. Well, this being on the show again Phillip. This F# stuff looks amazing. I mean, I think for the F# community, they must be just eating this up. &gt;&gt; The F# community is &gt;&gt; Yeah. For sure. You're telling whether we want hear it or not. &gt;&gt; Okay. This has been another we've learned about F# Bolero. Thanks for watching. [MUSIC]