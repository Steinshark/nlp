The goal of encryption is to garble data is can read it unless they're the intended And the encryption of pretty much all private immensely on one numerical phenomenon - as to take a really big number and find its factors Unlike multiplication, which is very fast them up ), finding the prime numbers that big, non-prime number appears to be slow - at that runs on a normal computer - even a very Like, to find the factors of this number , it Now, it's not yet proven that we won't just with normal computers, but it's certain computer today would pose an immediate privacy And that's due to something called "Shor's Well actually it's due to quantum superposition of by an algorithm developed by Peter Shor, The kind of encryption we're talking about number in such a way that decrypting or "unlocking" number . If somebody doesn't have the factors, have to spend a really really long time or finding the factors. Our current best methods essentially just check if it is . And if it isn't, you try And again. And again. It's slow. There are so many numbers to check that even are slow. For example, my computer took almost 9 minutes So if you used this number to encrypt your minutes. If, on the other hand, you used a number like time to factor , your data would definitely somebody with access to a server farm . door and bars on your windows doesn't guarantee but does make it take more time and more work. Encrypting data isn't a guarantee of protection hopefully enough harder that no one thinks But quantum computation has the potential data - like having a lightsaber you can use how strong. Shor's algorithm is that lightsaber. Roughly speaking, to factor a given number guess that might share a factor with your and then the algorithm transforms it into a factor! There's nothing intrinsically quantum mechanical of Shor's algorithm on a regular computer the "turning your bad guess into a better very long time on a normal computer. On the other hand, this key step happens to So, our task is to explain how Shor's algorithm is purely mathematics), and why quantum computers comes in). It all starts with a big number, N, that you'll some encrypted data. If you don't know what the factors are (which some number g that's less than N . We actually of N - it could also be a number that shares factor of 6, but shares a factor with it. Numbers that share factors are ok because check for and find common factors - it's darn efficient. All this is to say that to find a factor of numbers that share factors with N works, too, And if Euclid's algorithm found any shared You could just divide N by that factor to But for the big numbers used in encryption, guess will actually share a factor with N. Instead, we'll use a trick to help transform are way more likely to share factors with fact: for any pair of whole numbers that don't by itself enough times, you'll eventually other number, plus 1 . That is, if a and b eventually a^p will be equal to m times b . We don't have the time to get into why this can at least give you a feeling for it. For example, 7 and 15. While seven squared isn't one more than seven to the fourth is. Or take 42 and 13 - 42 squared isn't one is. This same kind of thing works for any pair the power p might be ridiculously large. So, for the big number, N, and your crappy of g is equal to some multiple of N, plus this equation by subtracting the 1 from both - 1) . You can multiply that back together And now we have an equation that almost looks is equal to N, which is exactly what we're These two terms are precisely the new and take the initial crappy guess, multiply it one! Of course, since we're dealing with a multiple left hand side might be multiples of factors Like how 7^4/2+1 = 50, and 7^4/2-1 = 48, neither But we can find shared factors by using Euclid's broken the encryption! So is this all Shor's algorithm is? Where's the quantum mechanics? Why can't we use this to break encryption Well, indeed, there are three problems with First, one of the new guesses might itself would be a factor of m and neither would be And second, the power "p" might be an number and so our guess taken to the power which is no good. However, for a random starting guess, it turns of these problems happens and p does generate the encryption! This is worth repeating - for ANY initial time g^p/2 +-1 will lead to a factor of N, Which means we're 99% likely to break the However, problem number three is the big one. Remember, to turn a crappy guess into a good to multiply our guess by itself before we And for a normal computer, the act of finding It's not hard for small numbers like 42 digits long, and our crappy guess is 500 digits you have to multiply our guess by itself before one, takes a ridiculous amount of trial and it would have taken to just factor N by brute So finally, this is where quantum mechanics Unlike a normal computation which gives only can simultaneously calculate a bunch of possible superposition - but you only get one of the probabilities for each one. The key behind fast quantum computations is all possible answers at once while being cleverly destructively interfere with each other. That way when you actually measure the output is most likely the right answer. In general it can be really hard to figure a quantum form where all the wrong answers Shor's algorithm does for the problem of it does it for the problem of finding the Remember, at this point we've made a crappy p so that g to the p is one more than a multiple +-1 is very likely to share factors with N. So to begin the quantum computation, we need takes a number x as input, and raises our For reasons we'll see later, we need to keep to that power. The computer then needs to take that result of N it is. We'll call that the &quot;remainder&quot;, and we'll something the remainder is (remember, we want So far, no different from a normal computer. But since it's a quantum computer, we can computation will be done simultaneously on for each p of all possible powers our guess for each p of how much bigger each of those We can't just measure this superposition a single random element of the superposition more than a multiple of N" . Which is no which we can do with a normal computer. No, we need to do something clever to get and cancel out, leaving us with only one possible Which it turns out we can do, based on another This mathematical observation isn't particularly may not be immediately clear why we care. However, it's the key idea that allows us that works well on a quantum computer, and algorithm - which is to say, it's worth Ok, so remember that IF we knew what p was, get one more than a multiple of N. On the power , it's probably going to be some other more . But check this out - if we raise our again 3 more than a multiple of N . If we 2 p, it's again 3 more than a multiple of It's pretty straightforward to show why times N plus 1" with "something else times times N, again plus 3" . And this works multiple of N, then g^(x+p) will also be r multiple). So the power p that we're looking for - the and find factors of N and break encryption take another power and add (or subtract) p N stays the same. This repeating property isn't something to just one power - it's a structural relationship advantage of it since quantum computations possible powers. Specifically, if we take the superposition "amount more than a multiple of N" part, "amounts more than a multiple of N" as The specific number doesn't matter to us, must be left with a superposition of purely of 3. This is one of the special properties of quantum and get an answer that could have come from then you'll be left with a superposition of And in our case, because of the repeating are "p" apart from each other. To recap, we're trying to find p because into a good guess for a number that shares the encryption. And we now have a quantum superposition of of p, or equivalently, they repeat with a we can find p and break the encryption! And the best tool to find the frequencies Fourier transforms are what allow you to input a graph showing the different frequencies And there's a quantum version of the Fourier that repeats with a frequency of 1/p to cause to destructively interfere, leaving us with So how does the quantum Fourier transform Well, if you input a single number into the a superposition of all other numbers - but A superposition where the other numbers are weights look roughly like a sine wave with in. If you put in a higher number, you get a sine but with a higher frequency. And the magic is that when you put IN a superposition superpositions and the sine waves add together And it happens that if you put in a superposition p, all those sine waves interfere so that a touch), is the single quantum state representing Which we can finally measure to get the output Which we invert to find p, and as long as to the power p over two and add or subtract multiple of N, we are guaranteed to have a we can use Euclid's algorithm to quickly take the encrypted data and decrypt it. And thus we will have broken the encryption. And that is Shor's algorithm - the lightsaber internet. As complicated as this clearly is in practice... it's surprising to me how simple the core for any crappy guess at a number that shares plus or minus one is a much much better guess, And we CAN find p almost immediately with A normal computer would have to go one by take an incredible amount of time for any in encryption, since p could be almost any ridiculously faster, and if a big enough quantum would allow the user to very easily decrypt based system - which would pretty much ruin At this point, however, the biggest actual don't have enough memory to hold more than numbers like 15, 21, and 35 . Now, there are that are a bit more advanced, and have factored just a few quantum bits of memory . But they to factor even some of the smaller of the . So, no need to worry about quantum computers If all this talk of breaking encryption makes safety, well, there's something you can now - I've been a long time user of the this video, and if you've never used a password It generates and remembers a long, unique so that I don't have to worry about remembering passwords are stored encrypted with very very And Dashlane is more than just a password are old or weak or when a site or app you passwords, it encrypts and lets you securely it can be used to securely store or share info, with just the people and sites you want Oh, and Dashlane uses 2048 bit numbers for to take a trillion times more effort to factor brute force. And of course Dashlane is free for up to 50 have nothing to lose checking it out. But, if you want the very useful features of passwords, VPN, remote account access, Dashlane premium by going to dashlane.com/minutephysics Again, that's dashlane.com/minutephysics and encrypt your online life. Dashlane has legitimately improved my online the better. What could it do for you?