Hey guys, and welcome to a brand new tutorial teaching you Java from the beginning. So starting how to create variables, methods, like all the advanced stuff. This is a beginner tutorial never learned any programming language before. thing we need to do is download a ID E. And this okay, so it's called Eclipse, that's what I'm beginner, I recommend you just follow along with are specific to eclipse. So go to this link, click on download. And then obviously, 32 or 64 have a 64 bit machine. Once you download this, but if we go to our downloads, we will see double click on it, wait for this to boot up let's see. And once we're in here, we're simply we don't need to be using any of this other so we're going to install this, I already have it gonna ask you for a project directory, something wherever on your computer, it doesn't really you chose your project directory. Now we're going we need to do so it should look something like and then Java project. Now here, I'm just gonna can just leave all the rest of this stuff blank. click Finish. And there we are. So once we have the package explorer, I'm just gonna shrink is we're going to go down to source or Oh, I I'm going to create a new one really quickly, and one. Okay, finish. Alright, we got tutorial the source, what we're going to do is we're going and we're going to click on package. Now, I the same as your project. So I'm going to do that name, I'm going to click New, and plus. Okay, so it's going to allow you to select the package and the name you can name is whatever you want. In my discouraged. Okay, so let's name it main with like that. And then we're going to do is make sure to check mark this because we're gonna need this inherited abstract methods, you can uncheck really matter for right now. Okay, so now we're in I'm going to explain what this is. And then we'll just printing a few things to the screen before about data types. So Java is an object oriented happens inside of something called classes, and Now, you're not gonna understand very much of this guys that are more advanced, you should come to okay? And everything in Java is written in a our purpose, just think everything is written in we have a special method is what it's called. And inside these curly brackets, public static, void, what those words mean, just know, this method writing all of our Java code in for right now. So curly braces, and not inside of this method, your code is not going to execute properly unless we don't yet. So all the code we're writing goes these curly braces. All right. Now the first something to the screen. So to print something computer's lagging one second dot print, ln, now inside of these brackets here, we can print a in Java is anything encapsulated by two quotation we want to do it in two quotation marks, at least the classic hello world with an exclamation point, Java But with exception of lines that start or end now you can see once I put the semicolon, that we can see that it now has syntax highlighting. In the program. So we have to make sure that whenever a semicolon. Okay, so now we've officially written to the screen, but how can we run this. So first, S. And to run this, there's a little green button to click that. And you can see that down here, a to the screen, hello, world. Now that we've very simple. And that is how we go about setting for right now, again, remember is going to happen I'm gonna explain that later. public static you want to print another line, you want to I'll show you how that works. So I'm gonna say hello world, too. And if I save this, and run So you can see where we are right where we left world to to the screen. And in this video, I'm the absolute fundamentals, we have to understand So let's talk about what a variable is. Now a that holds a value. Now in our case, that doesn't could be a Boolean, and integer, like we're going are what are known as data types, or objects. So a variable, we need to first figure out what I'm going to start with an integer. And then types and talk about the differences. So to start, that we're about to type out is going to be an name. Now the variable name should contain I believe you can use numbers as long as it's at do that when we create a variable name, you have don't use any special characters as well. So I'll and invalid variable names. So a valid variable because we don't have any spaces. We don't have and Okay, now, an invalid variable name would thing as our variable name is invalid, because what do you call it percent sign like this, or valid variable name. So don't use any special could start with an underscore if you want to. But Typically, when you create a variable, if you want it is you type like Hello, and then you would do an underscore representing a space. And then next Not super important right now. So I'm going and that's going to be equal to by just putting case, we're gonna say five. And then remember, just saying my integer Hello, world is equal to there we go. And we see we get int, our variable issues. So if I let's just see what it says this officially created a variable, the variable name prove this to you, I am simply going to print so I'm gonna say system dot out to comment is do is we're gonna say, okay, so hello, underscore holds five. So when we print this, we should be right? Is it says, Okay, hello, world. Let's hello, world is equal to five. So we print that. down here in the bottom of the screen. Now I is just going to go this is a really important in programming tutorials. It's kind of like order put my variable underneath my System dot out dot world. And then I'm going to set hello world equal the issue might be here. If not, I'll talk about trying to print the value of hello world before the way things work is unless you otherwise bottom and left to right, just the way you'd read dot out dot print ln a Hello World, and then we hello world is. So if we tried to do this, you you know what, there's an error. Let's proceed we get a bunch of red text. And it says, What to a variable, because we haven't yet declared we're referencing or using variables that we like the line that we're using them in. Okay. So we print that to the screen. Now, let's create a types are. So in case I didn't really specify stands for any number that does not have a decimal like 5.0, this actually becomes a new data type. stands for floating decimal point, which means so I'm gonna say float. Let's see, num. Two and in this case, I'm going to say 5.0. What's one second where I said double. So sorry, I made as the name Okay, not float. Don't worry about anyways, we have double num two equals 5.0. Now anything that has a floating decimal point. So this in terms of mathematics, because it has is referenced as a double. Okay? Now, there's some about. So we have int, we have double, we also is true or false. And these are gonna be really about. So Boolean, I'm just gonna say B as my this case, I'm going to say true. And again, make two values that a that your boolean data type are important is because based on the value of a in our program. Like if B was equal to true, we're something. So that's really important. So another is any character. Okay, so this is a little bit last video, but I'm going to talk about string and whenever we create a character, there's two which you probably don't know what that is. Or just simply hitting the single quotation marks, we and that is a character because that's what char your keyboard, in quotation marks, now character so that's still a valid character. Because it's like nine if you're, if I were to type that goes in quotation marks is a char. Now we have one character, if I tried to, like 03, you can see us, and it's saying no, that's not allowed, now I just want to show you I want to go over between this nine and this nine, up here we've hello world, and it's set equal to nine. Okay, since it's in quotation marks, this is not the really do matter in this sense, okay. So I'm just now. Okay. Choice equals h. So that is extremely It's a different kind of data type, which we'll we do string I believe with a capital We'll see. in this case, I'm just gonna say str is equal to, quotation marks, okay? And I'm just gonna say and strings are double quotation marks, okay? And have like 673 underscore star, that's a completely they're with inside of these quotation marks. a nine in a string, this is different than a nine there are a few other ones, but I'm not going a bit more complex than than we can handle right this string is highlighted as a different color Booleans, orange chars orange, why is string it's a different type of data type. These four as primitive. And, wow, I really just did that okay. And what that stands for, is not changeable. data types and not primitive data types later about here are known as primitive in Java. And let's just see now, printing out like some we print them to the screen, right. So if I you should guess what we're gonna get, we get H, and so on. Now, last thing I want to show you variables equal to other variables, and we can add gonna be doing a lot in the next video, but I want I want to create a new integer, Okay, I'm gonna let's just call it Tim, why not. Now I want but I don't want to type nine out, what I'm underscore, underscore world like this. Now what from hello world, and we've assigned it to Tim. we get the value nine. Now if I want to print still getting the value of nine. So now Tim points Tim is equal to nine and hello world is equal to together, we can subtract variables, we can do all of variables, right. So we just have to make sure do something like this. String temp equals hello from int to string, because the datatype string do that until we learn about something called Now in this video, I'm going to be adding on to video. And I am going to be talking about basic exponential, all of that fun stuff. So without going to do is just talk about another way that you saw me do something like this index equals know this. But there's another way that we can we can actually omit this equal six. So if we now is we've declared that x is a variable, we've declared it but we have not initialized it. System dot out dot print ln, and we're simply probably helped I spelt print correctly. Okay. okay, run this. And you can see, we are already but and it says the local variable x may not have the variable x, when we set up like this, we underneath this declaration, we can just say x is be as long as it's an integer value. So in this we run the program, everything looks fine, and every data type. So if I do like char, and char single quotation marks, f like that. Okay, then we what I want to talk about now is operations. I'm going to say integer x equals five. Don't and I'll say int Zed is equal to 50. Okay, I'll going to start talking. So what I want to do now seven, and five. But I don't want to write like 56 the value of these variables, this works fine. But that means I have to go down here and I have to if I want to change x and y? Well, that means I cool thing that we can do. And we can just use the x plus y, plus Zed like this, okay. And now our three variables. And to prove it to you, I will get 68 as our sum. Now, Furthermore, if we wanted them, all we have to do is simply replaces with a multiply things, this is another operator, we can multiplication, and we'll multiply all these out divide, we can use the forward slash. Now I'm not of a different topic. There's a weird thing with do that. So those are four basic operators. Now, of order of operations, right? So we're gonna or brackets, exponents, division, multiplication, guys know order of operations. So that means What's first going to operate is x multiplied whatever this value is. Now again, if I switch going to happen first is y multiplied by Zed, and example, if we have the operators that have the order of operation level, I don't know what to to right, so it's going to do x multiplied by y a lot people to understand this. If we do a y, and then we're gonna divide by Zed afterwards. whenever we're doing operations like this, we example, say x multiplied by y, and then divided brackets in here. So now it's showing 100% that same thing, if I did this, now, whatever's then I can divide by said, and obviously we can multiplied by y, times y, okay? Like, get out that's totally acceptable. And that totally works. more specifically, and then go into a few more different. In Java, is it just in general, okay. divide Zed by y, okay? And I some just do you, this out to the screen. 56 divided by seven, gives for the variable u, which is holding the value of So it actually isn't able to give us a floating is a floating point number, or is it a? Let's divided by this guy. Yeah, so we can't give us a datatype. So it assumes that we want an integer value and terminate all the decimals guy. So say us eight, right? removes the remainder. Now if to do most the time, I could try to do something by y. And you mean Okay, that makes sense double But watch what happens around this, we just get a is not 8.0. It has some decimal component to it we getting that? Well, that is because the two which means when we get a value back from this, do is convert it into double because we have this so how can we ensure that we get a floating point? first change the bottom to be a double. And we do like this, it's like double. And I could change of these double, and we try this, now I can shows up and gives us like, whatever that is. Now, and this is double i'd let's try this. Now, you because if one of the values that we're dividing the whole thing a double. So one of them is a is the way it works for all the operations. So if x times y, or let's say x times Zed, since Zed is value. So if we run this, you can see that we get a double, then that means everything is going to exponent, whether we can explain it is we have dot how. And then in here, you put the, what do not a star star like in most languages, okay. I'm And here, I'm simply going to raise x to the power is it saying? convert doc. So let's do this. int, interesting why it's telling you that let's just get X, X, exponents, apparently they have to be all right. So now if I want to print out D, what's okay? So math dot pow, this is your base. And five to the seven apparently is equal to that. I guess. Obviously, you can have as many operators things work in terms of doubles. And instead operators that are operators variables that you're then that means you're going to get a double that means you're going to get an integer value y back to double. And let's change you to be int. that's x times x times y. Okay, so now you can see double to Ent. And that is because we're trying but y is a double value. So when we get a value convert that into an integer just by doing this. going to show you in a second, okay. So we would it's nice in this ID, it tells you when you made might not really see that in your program. Okay, typecasting. We're going to talk about this you like fairly quickly how this works. I'm to turn these back into integers. Okay, so if I and I want to make sure that I'm getting that so a double, rather than converting these like the can do called typecasting and to typecast, we are the type of the variable, the way to do this is to convert your variable into, and then directly So in this case, it's double. And then we have y. of D, you can see that we get the decimal value right, then we do not get that or we do just go So in this video, I'm just gonna be teaching you last video. And we're gonna be talking about called a scanner. Now this scanner is going to all that fun stuff from the user and then do basis of progress. All right, based on what a user first thing that we're going to do is just teach still going to take the very long excuse, I'm just is what the name of the operator is modulus, this case, I'm gonna pick five. Okay, so what this Okay? Some people like to call a remainder us the remainder of this division. So this it 36 divided by five should give us 11? Okay, 11 equal to. So if we print x, we should get a value the remainder operator is gives you the remainder it too much more, I'm sure you guys want to get now. Okay, so let's get rid of this line. And now scanner is what we're going to do so well, first program, you'll notice I have a new line here that guys to type this out for me, Java dot util dot this is what we're going to be using to get input. to import them at the top of our program so that And we'll get into this later when we talk about so once we've done that, we need to set up a the name of the scanner, I'm just gonna say SC is we're gonna type System dot gains brackets. This saying scanner is a dump type just like string it's a different type of data type, but it is in like one, or like putting quotation marks and a new scanner. And what the scanner is going to be And there's different types of scanners, which we've set up our scanner, we need to actually use going to type now is I'm going to say string scan use next Yep. So what this does is we're creating string type called scan. And it is going to get Okay, so SC dot next is what allows us to get a out scans after we get it because I want to show and illustrate and we'll talk about it. So now I'm able to type this because when type will it prints Hello, underneath it. So hello, which the scanner object using SC dot next, it got were able to print scan out to the screen. Okay. strings. Now watch this. If I type one, one works going to do this with the MTA. So I'm gonna say happening? What's wrong? Well, the issue right which is what this returns to us into an integer. se would proceed, we just run into an error, what this method gives us is a string. Now, if we for them typing, we have to use a another method, see we're getting no more red lines, everything we run this, then we type like 54. That works fine I try to type in something like Hello, so there's there's anything wrong. If I type Hello, we get an type in a integer. And what happens in here like is it tries to convert what I'm typing in, integer. So when it tried to do this, it tried to not you, not you or me knows how to convert So now that that's not allowed, you can't do that. get Booleans and other types, and I'll show you So if we want to get a boolean value, we could look at this Boolean? That's literally the name to this. Now, note a Boolean has to be true. spelled sure. So true, that works fine. But if I try to that's gonna crash, it's going to give us an once you get a double could do double equals there you go. And now it's going to expect a but I'm going to undo 6.3. And it prints out just give us 6.0. So that works fine. Okay, to issue of what happens like we get that crash, how can we fix that if we're per se, when it's what we should do is always get a string. So we this into a string. And that's because a string fine to be a string, because remember, a string if I type true, although Yeah, we know it's a really a string. Okay? If I type one, that's a can be converted into a string, pretty much. So a string, we can then convert it into an integer. we're going to do now is we're going to attempt in our case, I want to convert it into an integer. to set up a variable. So I'm gonna say index to put something with this scan, I can't just say it's not just gonna be able to convert that for need to do here is actually do dots, and are okay. And then inside of the brackets for parse is going to allow us to do is well convert into an you don't know what it does, you can actually it's going to say parses the string argument the string must be old decimal digits, except the so we can tell you it tells you exactly what this class. So yeah, it'll convert that for us, so would work fine. Now, the thing is that when this is, we still run into the same issue because we still get a crash, because how do we can really first check if the value is an integer. I believe, the next one or the one after that, how else statements and error catching later on. So now. If you know, you're going to be getting an you could just do next int and turn this to an So in this video, we're going to be like greater than less than or equal to not really which you'll see if you don't really understand and how we can use those Boolean variables to do about in the first few videos. And if you guys well, this video will show you. So without further off by typing a few numbers here because it's and then we'll do some other stuff. So I'm going X is six, y is seven ends, that is 10. Now I'm else, call it compare, and we'll just set that want to compare x and y and Zed using some I'm going to write them out here. We have a belief we'll type them out and we can see, so the first we have equal to, oops, we have greater than or Now I know I just went through those fast but going to state whether something is greater than or whatever way you have it right? This is, is than the single equal sign, double equal sign is the same. And the single equal sign like this one you remember that because a lot of people when equal sign, and they just use one and they end up or equal to pretty straightforward, less than exclamation point and an equal sign. Now I'm going I saw Actually, I'll leave that there. And because teach you this. If you do two slashes in Java, something that the computer is going to ignore. can look at it and be like, Okay, this is what doesn't care, so whenever it sees a line that a comment. It just ignores that line and moves just Gray's out in here to show us that that's a and y. And I want to set see if x is less than statement right here that we're typing here is So we can look at this, we say, well, six is not us a value of true. So if we print compared to the Now, if I flip this around, and I say greater Well, we get false, it's pretty straightforward to we can do two equal signs. And in this case, we some people get confused by. But if I do not the two values on the left side and the right side they're not the same, I get true. If they are the the same. So we should be getting true. Okay. And but they're pretty straightforward in terms of these work fine. So greater than or equal to less to compare strings, so I'm just going to change x oops, string, x, will say hello, and string now I'm getting this blurred out, or this red greater than or equal to undefined for strings. So at least for right now that we're going to talk okay? And not equal to is simply going to say, they are the same, so in this case, I say not the if they are the same, I get false. Now, I want you and I add a capital O at the end of Hello like with all lower cases are not? Well, I'll show program, right, let's assume with variable names, lowercase variable y. Okay, so that's how we can we use greater than net, we can't use Okay. So what I'm going to do now is I want to to show you the end operator, the OR operator, add multiple conditions together to get one I'm going to change these back to two numbers equals what I have six into y equals, let's just compare multiple things at once. So I first want to compare if Zed is greater than x, say I want to you'd want to do that. The way that we can do that is using this an operator AND AND operator is okay? And then we have to add another condition Zed is arch, say Zed is less than y, okay? You can And what this does is it's going to compare the comparison on the right side, and then we're going x is greater than y. So six, is that greater than it out as if this is what's happening in the it is. So we get true like this, okay? Now, we this and operator in between them. What this and the conditions on the left side and the right side us. If they're both pretty one of them is false, value. So in this case, since this one is false, them have to be true for this to evaluate to true. this to the screen, you can see we get a false are true, then the whole thing is true. Okay. Now And the OR operator is to straight up lines like the key for that, but anyways, so this is gonna do around, if one of the two conditions are true, if both of them are false, it's false, right? right is we'll do this condition, we'll see what is equal to. And if one of them are true, we get a we get a true value. Now, we have a knot operator. anything. And this is what I like to think about reverse it. So what this does is it's going to say Or if this condition is false or not true, then is true, then it's false. Because it's checking if of just have to play with it to make sense of it. we have this exclamation point, which is our NOT here we get false. Now if in here I were to put a by typing in the value, I say not and then false So it's simply just reverses like anything that we can actually combined all of these operators ands and ORS and we can have an infinitely evaluate to true. Now this is actually some kind university, I'm gonna have to do it next semester, and you have to figure out if you're going to you like a pretty basic example. So I'll say if x plus two is less than five. Or what do you call so I just typed a bunch of conditions, right? are going to evaluate first? Well, that is a good this. Because just looking at this, like even it in. I'm like, wow, okay, how do I determine typically, you put things in brackets, so I would so I have this first conditional, right? You put this case, we'll get I'm not going to bother doing okay? Or so we have true, or whatever this going to do now is it's going to look at said plus then we get true or and then whatever this is, brackets like this. Okay. So now the way that this we get a value of like true or false. We do true or false. And then we'd see if either of them let's just print it to see what we get. If we get be honest. And yeah, that's how we could do too. So if I want to throw a knot like this, going to see massive chain conditionals like this, it's difficult to determine what they are by just and else statements in the next video how we can I just wanted to show you that you can combine have to use variables, you can see that here I put valid condition that works perfectly fine, can add constants, like I could just say two is equal compare with constants. And with strings, just sorry, not less than not the not equal to or equal you'll see as we continue going through the video, In this video, we're going to be going over if, just I want to fix a really small mistake I made I am like a Python programmer typically. So I'm first language. So I'm used to being able to use that's what you can do in Python. But in the on strings. Now, that's not incorrect to do that, now. So if you want to compare if two strings are have the same, what you should actually do is say do dot equals Okay. And then inside of this equals to compare it to, or you're going to put another I want to say if like, my scanner object, which to Hello, this is how I would do it with this dot equal signs isn't wrong, but it's going to give that in future videos, but it's too advanced to go compare two strings, use dot equals My apologies do now is we're going to do it using if and else do this, otherwise, do this. And this is the on like user input, or based on certain events right? So they're really important to understand. getting, I'm just setting up a new scanner object, already talked about this. And what I want to do on what they type in, I want to do something. you simply type if you put brackets, and inside And this is why I spend so much time talking about if this condition evaluates to true, whatever's whatever's inside of these curly braces is going I say if s dot equals not two equal signs, and user types in Tim, when we're when we prompt them going to happen is inside of these curly braces, an if statement, or an IF block. So this block these brackets inside the brackets as a condition, as you want, as long as you're going to get a have these curly braces, so an open brace and a that I typed in here is going to happen if this test here. And I'm going to do system dot out. you typed Tim, okay, what types you types? you see what happens. So when I run this, if it loads so we're back, I accidentally closed my console. So I got that up and running now. Let me I don't know why. That's why But anyways, let's let's type hello and see what we get? Well, we get it again. Let's try it. And this time I type Tim, basic if statement is working. Now I want you to we can see what happens when we have like just I'm literally going to print print. Okay. So now what is the program going to run? So if we type we still going to get this print out here? Or are and see, okay, so in this case, I typed Tim. So it says print, okay? Now the reason that happens right? So we're just going to execute simply right? If I type, like Hi, it's still going to It didn't go through this if block but this is or whatever. So that executes. Okay, so that's you else and elsket rest start with else. So else and else if or and if so, like the start of can't just have it like alone. It has to come which we're going to go into in a second. Okay. like to put the else like this Has the closing to do it like this. Some people like to do it like fine. Just make sure that your curly brace doesn't because that's kind of hard to read. Okay. So print statement, and I'm going to put it in my elf if this happens, that's fine. We're going to go we'll move down to the end of the block. So we'll this doesn't happen, so other words, or else, then Tim or print, we're never printing both because so let's test this out. If I type Tim, we you type random letters, and I hit Enter, you get print. this condition is not true, right? Okay, so that's about that anymore. The next one I'm going to add multiple if conditions in one kind of block. And now it's the exact same syntax as regular if And obviously, since this is an else it has to have as many of these else ifs as you want. Now, s dot equals, and in this case, let's just say system, dot out, dot print, ln, and we'll just say Hello. Okay, so again, the way this is gonna work, we're gonna get our scanner input, we get if it is we're gonna print this, and then we're we're not going to even bother checking if it's then we know that we shouldn't bother looking at what we're going to do is we're going to go that's our next block, is it equal to Hello, we're gonna move on with our lives, you're gonna going to the else. Okay? Now, if it's not equal to And we're just simply going to print print, going to happen. If you print anything other than so let's try this out. And let's type Hello. if I print type anything else in here, like some how that works. Now I can show you I can add as simply paste it down here, gonna have another LCF. I could type Hello. And we could keep going. know that whenever you have a kind of a block if statement. And it does actually doesn't have to last thing so if you have any else ifs else will and then try typing like that's, that's not that's perfectly fine. So now I have if we type And let's type none of them. Let's, let's type a screen because we don't have that l statement. right we went through wasn't equal to Tim. It I want to show you this. This is a bad example. Hello here. Which one are we going to print? So things. We're not going to print more than one. let's test it out. If I type Hello in here, we is because this else if is above this one, and at when we type something in just the way I kind high here, we're like, Okay, well that happened. move on. Okay, straightforward. Now again, I could typing like do a bunch of stuff, just understand need to know stuff. Like we could just do an IF like an if statement or block starting it has to you want. And the last thing has to be an else. else there. So anyways, I think that's all I'm they're pretty straightforward. Any condition can like you could have a really long chain you could have any condition like it doesn't value, you could also literally just type In this video, we're going to be kind of taking that we've already learned summarizing that, you guys really understand all of that. And we're how you can kind of add things within other things variables. And the way I'm going to do this it's going to do is it's going to ask the user to going to do certain things with that, we're going like on a roller coaster, like if you're 13 or going to do something like that. Okay, so I'm because we want to get the user's age. But um, going to print a line to the screen here. So and so print ln. And in this case, I will just it should, if I'm doing this correctly, make line. Okay, you'll you'll see when we do that in just going to kind of start typing, and we'll go and we're actually just going to convert this so using that parse into that I was talking about, I always forget how to do this integer dot so we're going to convert whatever they type to assume that they type in an integer. So we'll we will simply print System dot out dot print, if they're not older than 13, that must mean So in this case, we will simply print that they you cannot write exclamation point. Okay, pretty this work. So let's test it out. input your age input your age 43. You can ride awesome. Okay, what I'm going to do is I am going to add a elsif that we're looking at. So I'm going to say now I either an adult, a teenager, or just like younger call those? Whatever, younger than teenagers. I want to print you are an adult, okay? Now we want to check if they are less than 18. So or way, that's gonna make sense here in a second. So we know it's less than 18. So all we actually right? We're greater or older than or equal to 13? reason we don't have to check if they are, what is because we already know that they're gonna within that range. So I already butchered that dot print, ln. And in this case, we'll just say this last case, well, we know they're not older than or equal to 30. And that meaning they must adult, okay, like that. So let's test our program input an age of 14, we get you are a teenager. age of 19. Get you're an adult. And if we input an adult. Now, I want to show you what happens if do like negative 98? You are not a teenager or an that's not greater than or equal to 13. It's not a teenager or an adult. Okay. Now, that is pretty is how we can ask like another question or how we here is I want to say, if they're 18, and only What should the question be? I want to ask them going to do now exactly what I've done up here, So if this happens, we're going to do this and gonna say SC, or we'll say, string is Windows to guess Kazumi food Yeah, we'll say string. Food And what I'm going to do is I'm going to print just copy this in a second. And in this case, I'll do is I want to check what their favorite food is. I'll say mine too. Otherwise, we'll say that's we'll say if, and we have our conditioning here, we'll simply type pizza. Right? Then we will mine. Wow, inside of the coats, hopefully. Say we'll do is we'll simply type system, dot out dot Okay? So this is showing you now it looks a bit statements and else statements, we can do things that this works. So if I type, I'm 19. It's gonna let's try pizza, says mine too. Awesome. That's like for, it just tells me I'm not a teenager, happening inside of this if statement, or this And that allows us to do some neat things. And putting a statement inside of another statement, So I just wanted to show that to you. Because they don't understand that you're able to do that, again, if I want to ask another question, I could What is an array? Well, an array is a collection, rather than having like a variable equal to one, different values in there that you can index talking about them here, if you're a little bit you have to declare the type that you want your at least right now have to be the same type. So in And to declare that this is going to be an array, in square brackets, the name of your array in this and then in this case, you're going to say new brackets, you have to define how many elements or I'm just gonna say five. Okay, so you can just because we're not using new AR. But yeah, it to be, you type the type. So if I wanted to would have to be the same string like that. Okay, and then the type square brackets how there's another way to declare this, I'll show like you can't change this length. So you have to you know how many elements you want to have. zero, then there's no point in using it. You can't okay? And what it's going to do is it's going no, so they have no value, but they exist, like right now. Okay? Well, you can kind of think of it are old gonna hold something, but they're not yet So we're gonna keep the string array for now. and change values and print them out and see index things in an array and array is going to be so I'm just gonna type some stuff out and just have Hello. I need double quotes. Hi, Tim. Maybe I Now these are the five values in my string array. showing you an example. Now the way that we start this, every element in our array is going to have number that represents its position. So in this is position two, and this would be position five. position one, it would give me Hello. But the we actually start counting at zero, meaning actually going to be position zero. And that means this case, five, the last position in my array is four, so Joe would be position four. And these index one is high, index two is Tim. And this without having to know their value, we just know That's how we count in computers. Okay, so how can I'm going to create a variable and just say get like value two in my array. So first of all, we'll do that in a second. But how I would do that brackets and then in here, I put the position. So the first or second position I will see anyways, the second value in my array, because remember, we be zero, and the last value would be four. Now start adding things into my array. So the way that we've declared an array and we set it has length exists, or those buckets, there's not holding say new AR zero is equal to, and in this case, put our semicolon, there we go. We've just set Okay, so now if I copy this a few times, I can I did 012, and three, and here, I can just change And we can add one more, but we don't have to. So of it. And new AR four is equal to what we call it Okay, jus like that. Alright, so it may say string equal to Joe. So to print this out to the screen, this case, I will say x, and let's see what we these into the array. Now if I just comment this we do a new AR for let's see what we get, we get we initialize this array, we set it of a length of we've got five containers, five buckets, they're are yet. Alright. So if we haven't set a value well, we don't know what it is. So we're just right now. Okay. So yeah, so those are, that's I'm going to create another array and show you a gonna like statically type in numbers, okay, edge to save me from doing all these quotation to new it square brackets. Or actually, we don't we're just gonna put two curly braces. And in this case, this is now my number array. So I put 354, six and six. Now again, just to recap, two Because that's where we start counting. And now, error, I'm going to say nums four, which should this has to be an int, my bad. index equals lumps value six. So that's another way to create an all of the numbers like that, okay. And obviously, we could do string we do float, we do double, equal to and then in here, like 2.0 3.0 There you well, you need But that works. Okay, we now have a one, we have 3.0. And yeah, so arrays can get thing to be using for a lot of example cases. But videos, I'm going to be talking about collections, things rather than like indexing elements like on those. But for now, I would just want to So in this video, I'm going to be talking about of every programming language. And I can almost guarantee you that any program you a for loop is allows us to kind of automate a typically when you use a for loop, you're using to do something or like a condition is going opposed to what we're going to talk about in you're not really sure how long it's going to go but we'll talk about that when we get to it. the for loop can really like solve for us, simple example. And you guys will see in a second that I want to add one, and then I want to add and four, and five and six, and like an infinite Well, we could do like x plus equals one, we could things to x. And we could just keep copying and that's terribly inefficient in terms of a typing what if every time we want the program, we want like a pattern like this to x? Well, then we would right, so this is where for loop can kind of come going to type it out, and then we will talk about here and in here, we're gonna put three things going to first start off by declaring a variable. zero, okay? Now this can be called whatever you x, but you know, let's just use AI. And then what a semicolon, and then the next thing you're gonna gonna do this and then talk about because it's all work together, less than or equal to 10. And actually, is I first started by declaring a we're going to do this while i is less than or So pretty much the way this works, is every time here, is gonna have one added to it. So this is the end of your for loop. So this is what you're here, every time you run the loop. Now this here many times a loop is gonna run. So in our case, than or equal to the value 10, meaning we're going we're going to run this loop, then we're going to we doing? We're adding one to AI, then we're gonna we're gonna say, well, is one less than equal through, and we're gonna continue looping through to i, it's equal to 1111. Well, that's greater guys will see when I start printing stuff to the was a decent explanation of the way to do this. out here and I'm going to tell you right, now at zero. So the first loop here, where I come next loop, we come up, we add one, two, I check We're at one, and we're going to print from zero the way up to 10. Okay, that's how the for loop little curly braces 10 times, or 11 times in we can change this increment, we can change this do in this for loop. So here we say for int i and I can start at the value five and now we're looping 123456 times, right? We're printing six that If I tried to do something like i equals the screen. And that's because 11, well, that's even run one time, right. So let's go back, and can do in terms of incrementing. So to increment we want. So in this case, if I do five, we started add five again. So we get 05, and 10. And you can same thing here with the condition. These can tell you that. But if I do something like int right, and we can add that integer to it, we equal to this could be greater than this can be quickly go over one thing that a lot of people when we're going to stop and when we're going to this means we're going to start at this value. And to stop but include 10, meaning that I will hit if I remove this equal sign, this is only going that if I is 10, well, 10 is not less than 10. So you can see we only get up to the value nine. Now we typically want to do with loops is we want to typically that data is in the form of an array. I'm going to create an array, so an integer just give it some values here. So like 157345, what do I want to do? If or how am I going to do at look at these values, and maybe check them or something like that? Well, the way that I can is I could count the length of the reg and say, than six year. But a more useful way to do this way that I can do that is just to do a arc dot sorry. So we'll just do this in this way, say the them in an array, we don't know how many elements length so that we can change this loop and this Because we're just simply getting the length of you guys realized this would cause us an issue. array, right? But it's going to allow us to get i array. Now what happens if I try to do this arr that that will actually crash our program. And our last element in the array is actually going all the way to the length minus one, which is what I'm going to do now, is I'm just going to I'm just gonna say if the value is equal to five, I'm gonna say if arr index i is equal to the value dot out dot print, ln, I just realized this comma to print the value. So in this case, we could or we could just type five because we know do found a five exclamation point, okay, that's reason this is gonna work is because we're looping but not including the length of the array, make gonna get a crash, okay? So that way, we're going we're going to check its value. And then if we if this works. found five and found a five. Now I found this five, I could say found a five at can put pi. And what this is going to do is it's into a string for us and print it out with this so they don't get smushed together. But it says index five and we know this is true. Index a really simple way that we can loop through Well, I'm going to be showing you a different kind this is going to allow us to loop through the and do something with those elements, I'm also out of the loop at certain points. So if the get out of the loop the way that we can do that, of where we use loops. So let's go ahead and get here one's name names, and one is named AR, I just for right now. Okay, so what I first want to do and the way I did that was by having a variable greater than the length of the list? And then once right? Okay. So an easier way to do this, is to the same exact syntax, except in these brackets, I'm going to do if I want to loop through every this, I can say for element colon arr. Now what sorry, string element, or I can't say string in our array. So what I'm doing now is I'm saying what we're going to do is we're going to declare a equal to the next element in our array. So in this equal to one, and then elements going to be equal and then three, and then four, and then five. like print out the element, or look at certain like a counter variable i and then index all of know the length of the array, or we don't want going to go from start to end. Okay. Now, I'm example to really understand this. But the first out all these elements to show you that is indeed okay. And we'll just print this to the screen and 157345, right, starting at the beginning going again, we're just grabbing the elements in order, a lot of times when you want to do with this is want the index as well. So you want the element we used in the last video where we just have a and the element because we can do like arr of typically do this is with like an outside counter you how this works. So what we're gonna start int count equals zero. And then within this loop, every time that we run the loop, we're adding the index of the element. So if I print out the space plus our count, you can see that this is here says one is that index 05 index one, and it us. And that's a really easy way to do that. sense for this example case, but I just wanted where you want both the element and the index, this with this colon. Okay. So again, when you're because it's going through for each element in so the next thing that I want to do is I want for loop. So right here, for example, we have a, right, like all these elements are null, that we would go about doing this, and this is while I'm showing you this is we create a variable well, i is less than and then names dot length, simply add one to it. So this is the exact same how we can actually add the elements because it's here is I'm actually going to use the scanner to user. So I'm just going to say scanner SC equals and actually think I should probably not declare just going to use the scanner, right? So we'll this. And this way, every time we run the loop, know what, let's also just print out here, system, I should let us do print not ln, we'll say, input Okay, so input, we're getting input. And now user's input into our array. So how can I do this? is equal to input, right? So we're just declaring so whatever value by well, that value in the list an array I'm going to use to Python is going to be to print out the entire array, what we can do is and then this time, it's going to be a for each string, and, and names, okay, then we will simply print every value of n. Okay, so let's two good everything's working. So we run this input, I'm that, Tim, Bob. Joe, Bill. And then there we go. Bob, Joe. And Bill. Awesome. There we go. So that so now what I want to show you guys is how we can and we're going through, and we're doing where are like, so the loop is gonna keep or whatnot. Okay, then we want to break out of it. it in the middle of looping? Well, there is this does, is whenever this is encountered inside of a case, what would happen is, since I have break then we just break. And this would only happen one stuff said, this loop would only happen once. Now, how we can break out based on like a certain word end. Or what do you call it? The word Tim, if we encounter like the word Tim, while then we just want to break out like we don't want break out. So the way that I can do this right now but we'll break after Tim Okay, so what I'm gonna and equals equals or not equals equals dot equals, in here, then what we're going to do is we're we encounter Tim, we're simply breaking into the the names. So if I run this string, this console name. And then we say, Tim, and I'll just show you we get Hello, name and Tim. And these other two we hit m, and n is equal to 10, we simply break, a really easy way to just break out of the loop. we do in what do you call it the next video. to be using a lot like you only use this if you conditions work the way they should, and have the you know what I mean? So just try not to use this with using it, people just are frowned upon it in We're gonna be talking about while loops. Now, anything you do with the for loop, you can they do have different use cases in terms of anything you do with the for loop, you can do with you can do with the for loop, they're completely them in programming, you'd still be able to do nice to code, that's the right word for it, or loop is going to work when you typically don't something. So it's kind of like a question. condition. But you're not really sure like, if a it a set amount of times a while loop is it could okay, something like that. So what we're gonna do one up, and then we'll just talk about exactly while loop to do is I want it to just continually me like a certain word or like one or two words. gonna say, let's see, maybe just get an answer like this. Okay? And what I'm gonna do is I'm the number 10. Okay, so all I can do this as you these brackets is going to be your condition. Now, the first few videos, because they go a lot with this condition is true, then we're going to run x does not equal 10. Okay. Yeah, exactly. That's continue to do this. Otherwise, we will continue to get the INT in here, because every time that we in this case, we already have X, fine, we just do 10, I'm simply going to tell them like type in 10. I will just say, type 10 dot, dot, dot. And because I like to do this, we'll just do system say type a number. Cesar knows what we're looking print this here. And it should just be print, not the way this is gonna work is we're just this until eventually the user types in and we will not do this anymore. So let's run this data, type a number, type five doesn't work, type and it no longer asked us for that number. Now, this condition is true. Do everything that's about while loops. Now again, like we can what loops with while loops, because we can also count I could do something like int count equals zero. just say count plus plus. And then maybe at the how many times they messed up. Okay, what am And in this case, we'll just say you tried, tired, make sure we add a little space here. Alright, so you tried three times until like, eventually, you to do stuff with while loops. Now, you guys these lines are repeated up here. So I have this this without repeating those lines? Because wanted to ask a ton of different questions and the same section of code appearing multiple times. loop. So what I'm going to do is I'm just going a do while loop. And it's pretty much what it says And you'll see how it works in just a second. and now everything in this brackets is what is down here is true. So the condition here is going going to do everything in here. So now you can see I'm going to simply do is I'm going to take this, So we're not going to redefine that every time. this is going to allow us to do now is x does not do this. int x and then x. Okay, perfect. There But what this is going to allow us to do is we're this is going to happen once because we're going So we're automatically going to do this once which down below. So we do that. And then we check the And if it's not, then we will break. So we can let's do five, let's do negative 00. Number, okay, and everything is working fine. And that if you wanted to set one up to look like a for variable in this case, say like index equals zero, and you say, x is less than or equal to 10. And or plus equals two, or whatever value you want to do in the for loop underneath your increment. put it at the end. So at the end of the loop, Now in this video, I'm going to be talking about something known as the collection interface from correct me if that's wrong, but I think that's I'm just going to talk about really the basics and lists. I know, I'm probably gonna get some didn't talk about a lot of this, you didn't. But Because it's very difficult to understand, if which in our case, we don't. So I'm just going to in a very basic standard implementation of them. you're programming stuff, like a lot of Java these, because they're really complicated. things. So for example, with an array, what I had to set the size of the array, like you had to to do that with a set or with a list. And that's we're gonna be adding things into per se a list or be adding. So we can't define like an array of actually just get started, we're gonna talk about just gonna create a set, and I'm just gonna type doing, I'm just going to call this set t equal already probably looks confusing. And if you're lines. Now, what we should do to get rid of these click Import set by like clicking on whatever it this Id just literally type import Java dot util click on it and import it, just because this isn't Alright, so we have a set. Now what is a set? unordered elements that are unique, meaning that a doesn't know where that element exists. So you can and you kind of just throw things into it. And knows that they exist there. Now you also have to example, I've created this integer set. And this set. In these little like greater than sign if you're talking HTML type integer, and I have hash set. Now you don't have to understand what a implementation of a set. And then same thing, the Now inside of these brackets, if you had another called like W, I could put w in here. And assuming of the elements from W and start with that and Okay. So to add things to set, I'm just gonna You simply type dot add, so I'm going to say T And we'll just copy this and we'll add like a few seven, and what five again, and add nine. Okay? this set out to show you what it looks like. Now elements. Okay, so let's print this out. And you notice that this odd right here actually didn't do a five in our set, when we try to add another five and it just doesn't add it. Alright, now I'm gonna negative negative zero, negative eight, alright have any specific order. Now, see, when I printed so you think that should be the order that we or something like that. That doesn't happen with a because again, we're just a bubble, we just know or how many times they exist, we just care if they and this is typically something you want checking if something exists, that's why you use a named contains, and then any element in here that is contained in the set, and it's going to be able explain to you why sets are so fast. But just know set, you can do that very quickly, like very fast, the set is, the set could be 2 million elements, same amount of time to look if something exists removing things from the set that happens almost the array gets, the longer it's going to take us just, we have to understand that. So what I'm call Boolean, x is equal to this. And what I'm x. Now let's see if that is contained. And in if I do something like zero, then obviously we we can type T dot remove, or set name dot remove, remove. So in this case, we want to remove like print my set, so in this case, t, which get five, those are kind of like the standard operations, okay, so there's one more, or there's a few more, clear an entire set by just doing dot clear. So To see if a set is empty, you can do.is empty, and or not, to get the length of the set, you can do so in this case, value, size, change this to an three. So like, again, if we had nothing in there, kind of like similar in the sense that you can a hash set. A hash set is like the standard set. to you. Now they also have a tree set. And we also things, they're gonna pop up here, I'm not really gonna kind of show you the way a tree set works. you can only have the or a hash set, sorry that actually ordered and they're ordered in a tree this means just know that it's like it shows just want to read this error. Tree set cannot be well, let's just try this. That still worked. me there. But Teresa is going to actually you can see that we actually have an order and seven. Now like arrays, like we can't just like that doesn't work doing that, like we were out, or when we look through the set, it maintains really explain to you. Now linked hash sets are to import this up there. It's linked hash set. And certain operations. So I'm not I don't really feel like I'm already confusing you guys, but like operations and speed and time complexity. and a tree hash set or tree set. Whatever I typed, worry if this is a bit confusing, like, we're, I just want to show you cuz I feel like you your projects or whatnot if you're learning this these are easier to understand, don't worry. But what we're going to do is we're going to type case, I'm just gonna give my integer type. And just that's important that we need to use integer I'm going to call this one Tega and equals and we'll put brackets and there we go. Now we're up there. And we now have an A list. And what think of it as the exact same thing as an array, so we can add things to it, we can remove things or the end of the list, sorry, we can add another like a dynamically sized array. These have pretty things, you can do t dot add. And you can add like that works fine. To remove things T dot remove. we can actually index things with the list it's not going to just care that it exists like and then we can give an index, right? So even it's I do dot index zero, then that would give me one, put thing to put something or to set something on and you type the index and the element. So I want then that's where I would do it, index one is you what it looks like. Okay, sorry, that's we something. So to set something like this, sorry, index. I forgot I didn't add that. So I'm just is what this set actually does is you have to And this is going to change that index for you. And before I was trying to set one, when we didn't there we go. So now that works. We've changed right. So that's the way that that works. I've got few of these set. Yeah, okay, so that's the basic we can do t dot empty, or is empty. And this list. And what this allows us to do is get from argument, yeah, so we just need an int. So this is So say I add like these a bunch of times. Okay, do is I want to get from like index one to index let's just take this and put this here instead. So out and see what we get. So we get here now is has what do you call it, like six elements in it not including three. So if I type like 124, then we get five one and two, because that's from from four. That's what we're grabbing, we're getting Now, this is ArrayList. We also have linked list. really explain to you just understand that it is So for any of you to understand the difference And you guys, I recommend you to play with we're coming up on about 15 minutes now almost. with sets and lists. Now I know this video lot of stuff that I wasn't able to explain to you to do something and you don't know how long you You don't know how long you want it to be. It's you would just use an ArrayList the way that I because then you can add things, you can get to worry about like having a designated length. how many times something exists or where it reason a set is better is because it's simpler. terms of like a computer efficiency standpoint, be talking about hash maps, or like Java maps. The different implementations of maps, similar as to and like ArrayList, and all that stuff. So you can think of them as dictionaries. And I'm So a hashmap, a tree map, and what was the last sorry, just forgot about that one. So pretty much languages, they're typically called dictionaries, to create a map, and I'm just gonna do this, and just gonna create a map M is going to equal to new syntax, now to we have to import this. So I'm just it, we have to import map as well. So we'll import up now for us. Okay, so now that we have that, I like I said, is a key value pair, meaning that sun, so you can index things. But instead of keys. Now keys can be anything that you want. A actually, I'm not sure if it could be an array, it can be a char, it can be a float, what like And that key links us to a value. So the easiest and then to talk about what's really happening. So what you do is you have to specify a key, and map is, in this case, m dot put, and then you for my key, I'm going to type Tim, and it is going the value is five. So I put that in there. And print this out to the screen. Because I think it am I saying System dot out dot print ln Sorry, see what we get. So in this case, you can see we meaning that if we're to index Tim, we get the actually get a value based on a key, the way next to your map, are actually you can't do like I'm still used to the Python syntax here, guys, in here. So in this case, I'm going to put Tim as what we're going to get out to the screen. In this the key Tim leads us to the value five. Now to right. So we do Tim we could do like Joe, and Joe to another string. And that string could be like, we want. Like we can have the the key one and or and now if I just print em out, you'll see that we get Joe equals x Tim equals 511 equals 999. Okay, or don't type, whatever you want to call it, to overriding to getting happens in constant time. you don't really have to understand what that know that this does happen in constant time. Now and the what was the other map talked about linked the differences between them. So with a hash map, show you this one does not retain an order. So all unique keys meaning that if I try to add another 998. Instead of adding another key that's equal to key that is 11. So in this case, you can see that have the same keys existing in the map. But you Okay, so sorry, that kind of got me off track. hashmap does not guarantee the order in which Tim, and then I added Joe, and then I added 11. any kind of sorted order, because how do we sort It's not in the order that we added it in. So what is why this hashmap is extremely fast, because when they go in. So just know that if you're you can iterate through maps, and I'm going to the correct order. Okay. Now, the next map that now this tree map is what we're gonna have to or the tree set, or whatever one I showed you in it's actually going to keep it in a sorted order. kind of sort we're going to get. Okay, so we a good area to run into. Whenever we're using a to be the same, meaning that the keys have to be I'm gonna just gonna see if I remove this, if this we do get in a sorted order, we get Joe and then that's where it's going to sort strings. So if I it's even true on a key value, I'll literally can't set equal we have a comma. What's our air so we'll run this. There we go. So you see, we get in the alphabet. So that's going to show up for And that means that the data types for the keys numbers, we can use strings using whatever data same for that map. Now, the other type is a linked list in that it keeps the same order that you add you can see we get Tim Joe and then a and that's in which we added elements. So it's gonna say, be the first thing that we show. And then Joe, second, and then a, this is gonna be the third them in. And those are the only main differences run out, that you have to kind of understand anything, you're just gonna be using a hashmap, or a tree hash map, or tree map, whatever it's be doing right now. So what I'm going to do now, can kind of clear the maps, how we can like remove do. So what we can do to get all the key values Actually, I'll just show this one first. Well are going to be really useful to you. And dot contains values not available for type map. Hmm, so we just have to put something there. Okay. we're just going to put like any value on so in is actually going to check for us if this value all these these second elements here. And they it's going to tell us if b exists. Now we can do useful. And I'll show you why in a second contains contains the key five, right and that will give us with sets and lists in the last video. Okay. if I try to do something like m dot get, and I does not exist, the value five exists, but the when I run the program. m dot get five actually Because I'm curious if this is gonna crash. Let's so this isn't gonna actually crash for us. If we not exist in the map, but it's going to return us map. That's actually interesting. I didn't know or from a dictionary, and it doesn't exist, you know. Anyways, I guess another method I could this is going to do is it actually just prints out and I simply print it down here, we get m dot b, and five, which are all these and you can it's important to remember, values, let's see clear so I just got a text document beside me cuz forget which ones. So Am I clear? Obviously, what do you call it the map. So we get an empty this one like that is simply just going to tell us how much time we had 10 minutes. So I actually I maps. But if you want to think about this, and that I just showed you be good exercise. And that count all of those characters into a map. So and then the value for that key is equal to the times that character occurs, and try to do that well, then you're definitely learning and you're What I'm going to be doing is showing you some and how you can do that with the information everything in now, mixing it all together, and way to kind of like apply all the knowledge that computer problems. Because a lot of the time you don't know how to kind of mix it all together. I'm also going to be showing you some like useful to talk about in previous videos. So yeah, that's last video, I mentioned that a good exercise to and you want to count or like a sentence or a store them in like a hashmap and have the letter appear. So I figured for any of you guys that I would show you a solution here quickly to doing make sure you pay attention, because this is understand kind of how maps work and how you can is I'm just going to create a string, let's my name is Tim. And I am Cool. All right, going to do that just because we're going to human way to count this would be to go through okay, so I have an L how many times the L appear. for loops, like very efficiently in computing. what we're going to do is we're going to loop this is because if I try to do like for char right. And in str you see we get this red line, that we can do this is actually a cool method and string into a character array for us. And the way array. And this is if I literally just print this System dot out dot print ln is simply just going into a character array for us. So let's just run printing this entire thing, but it's actually loop through it. So you'll see in a second. Okay, I'm going to see if that key already exists in because that value is gonna be how many times it m it already exists in the map, I'm just gonna a new value. And you'll see what I mean here in Key of x, then what I'm going to do is I'm going and then the key is going to be x. And then what cast int, if I need this, forgetting all my should be interesting one second, saying I have to I don't think we actually need to do this, but and then we'll say, dot quotes. And for the key character. And we're gonna say old plus one. Now, the amount, so that's going to go up by one what we're going to do is we're going to put is going to be one because we just found the is going to be x standing for the letter. And to see the counts of all these letters. So to do we're going to print the line, and we're just this fast, and you might not really understand through every letter in this string, we're going map contains that letter already. So as a key, simply going to add in a key, and it's going to be of one. Because we just found it occurs one time, if that key does exist, what we're going to do is we're going to add one to that previous count and it goes up to five. Pretty straightforward. So there's eight spaces, we get a, there's three AC, an account all of the different letters for we could go through and count them like it does look as though that is correct. So yeah, it's really useful. And there's a lot of cases in so the next thing I want to show you guys is this is really just gonna take like 10 seconds. you probably already guessed, but it's literally So I just felt like I had to say this, because forgot to say it. So to remove an element, you want to remove like all the spaces, which actually then if I do that. Interesting why it's not it's because it's not because of character. My bad space is different. Yeah, so that it actually or from our map, whatever. Okay. Now, the next sorting is something you typically want to do on and I'm going to create a new array, an with cases do like three, and let's do a can get this to sort for us. Let's do negative actually really easy, all we have to do is just it takes two arguments. Now the first argument is x, and then the other two arguments are three arguments not to what these arguments do is let's say, like this part of the list that's way that we would do that is we would type one we were going to 71234567. Funny enough, we will but the thing is, it's going to work up but not going to that seven, but it's only going to sort this does, and I believe is actually just changes Arrays dot sort, we just say Arrays dot sort. And dot print ln, and we can print x. And let's see if us. Okay, so we actually, man of course, we can't loop to print these out just because when we try or we get that message because that's the memory and then we'll simply just print out I, it's got instead of printing, ln, we're just gonna print. separated. Okay, so let's run that. So there we of the list for us, right? So we got 1234567, you 99 was not touched. Now, if you want to sort the these indexes, you can just put x, in this case, all the way up to eight. And yeah, so you could or whatever, okay. And you can see, it's only list for us, or in the array for us. So that's a actually, in quite easily using just Arrays like x equals Arrays dot sort. Because what it's elements of x and swap them around, rather than Where you're going to be introducing object objects are and getting a little bit into thing to really talk about is what is an object. certain data type. So we know we have data like all kinds of different things that we can whatever, or hash map all that stuff, okay. And classes if you want to say that. So whenever we like scanner, SC equals new scanner, essentially, to a scanner object, okay. And whenever we create x equals five, we're essentially saying x okay? These objects are what allow us to have So you know how we can add integers together, or and we can have like a bunch of different methods object that we're using. So, for example, we so SC is equal to a new scanner object that's only use this dot next method on SC because it is a little semi colon here, you can see that we're int, because well, that method doesn't exist for kind of understand what objects are essentially, even just doing like string like, str equals, str is actually equal to a string object with the different types of objects, we have different with the methods we can call in, that's just kind create like objects and whatnot, that are specific videos, okay, so it'll all start to come together. things objects, essentially, that's like you have something, you're creating an object of that for now. So now let's talk about methods. So are because I think I went through a very brief essentially, methods are anything that you call on to clarify, when instances when we're creating we can say that we're creating FC is now an object instance of scanner of like the type of scanner, instance, instead of object, they're very similar. when we call this dot next method, we call it pointing to our scanner object. So our scanner showed you before, if I tried to call that on, for that doesn't work because that object doesn't is anything really that's just like a dot, and brackets, for example, if we had like, an array just another string probably should have deleted equals Hello. And I can do something like H dot to us the length of the string. And again, this not going to work on our SC, because well, what can see that we're getting this red line here. And this length method is not defined for a scanner call methods. And you guys have already seen a lot on different objects and different data types. and objects, data types are kind of like what the in in future videos. Just want to clarify in can we create our own methods? Well, currently, we're going to be creating methods inside of this because it is it contains this method. And this method automatically runs whenever we run the we're going to have in classes we create in future per se. But this is a method because a method is the class is what's going to define like our data now, there's actually somewhere that says public So if you do like brackets like this, it has a ton that we can use by calling them from within this method within this main class, what we can do, going to do for now, I'm going to show you why we but it's a bit advanced right now. We're something return type we want, which we'll talk about in of our method. So in this case, I'm gonna say Tim has your parameters, again, talk about that in here. In this case, I'm just gonna say system, you call up, it just says Tim, like that. Okay. So method that we can call from anywhere within this well. So what we need to do to call this method type the method name since case by type Tim. And I you see that we get is it running? one second wasn't working, because we have this SC dot next out for right now. And we will run this one the screen. Now I know, I didn't really explain what I've done here is I've created kind of like a other programming languages, you might see this means here is it returns nothing, okay, because which I'm going to show or sorry, functions to show you in just a second. So this stands we're just going to do something in here. So in screen. All right, now we have Tim. And this is here to trigger this to run, right. So if I wanted to print whatever string I passed to Tim, well, and then let's just say str like that. And now we have to actually pass it one piece of be a string. Okay, so I'm going to show you right here like this, okay, and we run the program. Now like with a bunch of M's can see if we run this this is called a parameter. So str is a parameter call this function, we have to type in arguments going to be when we get to the method. So anything what this is known as where we're like triggering so Tim is an argument. When we call this what's saying like str equals Tim like the other simply going to print to the screen. Whatever right? Now we can actually do multiple parameters I wanted to pass two pieces of information every and X, okay? And now it means that I have to pass that means we have to type an integer in here. to do now we're going to say four. And we'll say say i plus plus, we're just going to print this okay, so System dot out dot print line, what's got to do that, sorry. Okay, so now we pass an to do is simply print this as many times as like that we now we get Tim four times to the screen. in here, the two arguments are Tim and four. And x. And when we pass our information in str gets and then in here, we can now use those values by so I hope that makes sense. Now, in terms of this next video. For right now, all this means is that which is kind of what we're doing here, when we're object that's like a class main, which you'll how we can create our own methods. Again, we can I wanted to talk about now. So all I'm going I'm going to say this is public static. And in whoever's calling this Okay, or wherever this because this is what I'm going to return and the method is going to give back to us. And I'm going to take an integer x as our one parameter return Yeah, okay. So you can see, it's already a value in this method, because we typed in the I'm going to do here is I'm simply going to return is it's just taking a value x, and it's adding to wherever we call it. So let's just do something I'm going to say, system, dot out, dot print, ln, then give it a number, in this case, six. Now, you But essentially, what's happening here is we're our argument is six, it's coming in here, and the to return so back to wherever we call this x plus a value, and we go, and we bring it up here. And going to print eight to the screen. And you can obviously, in methods like this, you're probably adding to that shows you how we can return values. like a string value. So public static string, because I don't really know what to do. And we have to return a string value. So what we could point. But I think I need to put that in double now is we're adding an exclamation point to that. So if I call str here. Okay, so we'll I we'll do str. And then inside our brackets, we'll an exclamation point. And indeed it does. And going to be going over classes when we talk constructor methods, all that fun stuff, creating to be kind of an advanced video. Don't if you've able to follow along with it. But just know that of Java. So if you guys don't understand this, ask me some questions, leave a comment down below. have to understand this before you can really for kind of all languages, but Java, especially to understand classes and how to create classes. so far, we've been working in this class. Hold me class, all it's doing for us, is just running And that's what we have this public static void we click this little green Run button. Okay, so have some methods that I've added in here that we I'm going to do now is I'm going to create my going to start coding. So to do this, we're going tutorial, one for me, and I'm going to go new and now I'm going to give my class a name. Now, for And yeah, you guys can create whatever you want. since you guys are most likely new to classes. public class dog. And you can see we open up in in Java, we have to actually create a new file makes it really easy to navigate between different just have all your classes in one file. Okay, so class dog. So what does this What does this mean? data type. And whenever we create an instance of a doing is we're just using all the information you can almost think of it as like a blueprint fall for us? Like, why are they useful? So I'm right? So I want to create five dogs, okay, I want I want each dog to have an age. And I want to, print out each dog's name and age and like a nice do that. If we went back into main here, what we here is we could just type a bunch of answer you and that's dog one's age, we say int dog two, create 10 variables, five for the age and five we could print out each one each time. But I wanted to have like 10,000 dogs? Well, what like lists to create or lists or raised to create it doesn't look as good in our actual coding. So and you'll see how we can kind of accomplish this have attributes, okay? Now attributes are kind of this case, we want to have two attributes in our the age to create our attributes. And so the first right at the top of our class, we're going to type data types. In this case, we can say string, and name, okay, and this all we have to do, we're we're going to have the attribute name, and on in our program. Okay, we can also do private is going to obviously represent the dog's age. we would, again, type private. And we could keep is this private keyword? And why do we have public keyword does is it ensures that this name and meaning that if I tried to do something over from this class, I wouldn't be allowed to do that. attribute, you can't access that. Why do we do but we can also create public attributes as well if I wanted my things to be public, I could put we're going to use private, and it's best practice for methods, which you'll see in a minute. Okay. constructor method. Now this, you typically create multiple, what this is going to do is it is dog class. And the way we create this constructor, class is we're going to do public. And we're just so excuse me as a public dog, like this, okay. everything's fine. And in here, we're going to need to be passed in whenever we're creating a nothing in here, when you create a dog object, all object. You don't need to give any information and to create an age and a name with our dogs. So what and int, age, okay, just meaning that whenever we and we need to give it an age. Now what I'm going attributes equal to whatever we pass in. Okay? So keyword and it's, the keyword is this, it's kind just like saying this is a keyword and pointing then I'm doing this dot name is going to be equal age. So what is this, this this keyword actually the class, okay? So when we type this, it is going private attributes. And in this case, we have an reference things that are a part of the specific okay, and I'm going to explain more and more in like small steps. Okay. So now that I have this one more method, and then we can actually start going to do now is I'm going to create another I'm not going to return anything, so I'm going speak. And what this is going to do is it is to the screen. So I'm gonna say system, dot out, all we're gonna do is we're gonna say I am, and I we'll say this dot name, okay? And we'll say plus, plus years old, okay? So suddenly gonna say like years old, not great grammar, but that's fine. So Or how do we use this class? Well, from our main you know, we can delete all these, we don't need we can actually create a object and to do that of and we're gonna give it a name. In this case, And then remember that we have to give dog some have the name, and we have the age. So what we age. In this case, we can type 10. And I'm going we're looking good. So our dog's name so that's great. Let's run the program, make what I want to do is I want to use that I'm going to do is I'm going to type Tim, which dot speak like this, okay, semicolon. And let's I am four years old. So the way that this worked, and the instance was named Tim, and it referenced instance, we said, okay, so this instance, this and a name of Tim. All right. So it stored that our private int. And then later on, when we Okay, well give me the instance you're calling we're gonna say okay, so Tim, what's Tim's name? Tim, what's its age, its age. That's four. So create multiple dog objects. So let's copy this dog objects. I'm gonna say this is Bill, and he 11. Okay, let's copy this and keep naming the and then we can simply call the speak methods on Alright. And just to prove something, I'm gonna why I do that in just a second. Okay, so let's run I'm Bill I'm seven. Then go on and you can read again, it still retains its age and its name. Like this is not one variable. We actually now we have bill we have Bob. And there's specific to object okay. So that means that we can hold like and we can have like infinite amount of instances I think I'm going to talk about quickly. I Let's create some more methods in here and see about constructors because we're only at like, going to create a another method. And I'm going to And in this case, we'll say int, get H. All right. the age to, let's see a return statement to all we'll say it will return this dot h. Now, I want to get the age of one of my dogs, right? I don't know what it is I want the age. Well, we we'd be able to do like Tim dot age, right? Now lines. And it says the field dog dot age is not So it's not letting us see it from over here method only within this class, can we actually what we can do is we can call Tim dot get age like we say like, and x equals, I'm gonna say system, So now if we run this, we can see that we get of the screen. Now we can actually do the same change the age at some point, maybe Tim got a year another method in here, this case, we're going and we don't need to enter this time, because going to return to say public void. And we'll say, because we need to know what we're going to set it just like we've done up here, is the exact same the method set age. So now, if I want to change set age, and we'll give it a value of 10. Then What's gonna happen now sorry, guys, I'm a bit I'm going to do is, oh, what's your air timeouts second here, sorry, public, let's try this. Insert here. Oh, okay. That's why I can't do I can't set age by about on that guys. We do speak, we can and we've changed from the age of four. So that's later on within the the class. Okay. Now I want to and show you what this is. Okay, so I'm gonna it. Okay. And we're going to call this add to it, but just, it's just an example. Okay. And in here, but we're going to return we're going to this is a private method, meaning that it So say I wanted to use this add to, maybe I and just do a little semi colon. And there we go. no issues with that. Okay. And that's how you use I can easily every time we initiate the dog, call class, you don't need to do like something dot really visible within here, right? Now, what would so add two, so we'll say Tim, dot add two like a red line and says, This is not visible, you So in today's video, we're going to be going over this is going to be how we can inherit methods new class, and then override methods and all kinds save you a ton of time. And yeah, so let's get this dog class that we created in the last video. at least in this video, the problem is, I want to class, except in the speak method here. Instead of name is what I write right Just want to change But other than that, I want all of this to be is, well, we just take all this, copy it, put it this to be what we want. Well, we could do that, are like 1000s, and 1000s, of lines long, ideally, typing like the same thing a bunch of times, read. So what we're gonna do is we're going going to create a new class, I'm gonna go new cat, alright. And they'll just click Finish like whenever we do this inheritance, what we can all of the methods, everything from this dog we can type extends, if we spell it correctly, Now what this is going to do is it is going to class. So this is known as our superclass because known as our subclass. So we have, you can also could be also called a parent class, all right. getting everything from there, but then it's going few methods to it. So typically, you start off and then your child classes or your drug classes same thing, just everyone likes to use different modifications to them, and kind of work based class. Okay. So what we need to do when we first us, we need to use the constructor for dogs. So the same constructor, otherwise, all this stuff. to work unless we set up our class when we first gonna do is I'm actually just going to click on this constructor for us. Now, I could have typed going to do. So since in our dog class, we get we have a constructor inside of our cat class that explicitly call our superclass constructor, which this formation or this syntax super. And then we doesn't stop us from being able to type in other I could do something like int, and I don't know should get, this works perfectly fine. And we can So we say private, or no, I'll just say food. here, we can go ahead, and we can just type this perfectly fine. And now we're gonna have, since we're gonna have name, and inside of this cat works just fine. Okay. So just to know, let's through pretty quickly. But all of these methods cat class, because we'll we're inheriting we're cat class when we first extend it, and do nothing we start changing a few things in here, it's gonna this functionality. So we still have the attribute because we're gonna call this constructor method, here. So we call this constructor. So we set up we have get age, we have set age. Now before you. So if I go to main here, and I just CIM equals new cat. And remember, we have to give because that's what we typed in. So for name, we let's say they get 100. I don't know grams of food Okay. Now I can use this speak method on Tim. So in my cat class, there's no speak method. But we can use it. So I'll prove again to you and that works perfectly fine. So now remember something else, I want to change it. So how can we this is to just rewrite the method in here because whatever's in the dog class. So the child class Whenever there's something the same in here, it whatever is in the dog class. So I do public, void other one. All right, and in here, I change I do just gonna say, system dot out, dot print ln. And name is what to say plus this dot name. And you get fed. Let's see here, plus this dot food. what's the issue here? Change visibility of name here. Okay, this just needs to be sorry, public actually able to see these attributes, because our cat class. So we just need to change them to to use them within our speak method, we can also to talk about near the end of this video. Okay, so get into protected. But let's see what happens. my name is Tim and I get fed 100. Okay. And that's since we wrote it again, in our cat class, and simply going to take this one, and we're going to obviously, when we're doing inheritance, we can add more stuff, and we do whatever we want, say public void, I don't know, eat. And in this like as how much they're eating. And we can say subtract from it however much they ate. And then going to be seen in the dog class, right? So we all the stuff we do in the cat class is not going dog does not extend cat, right. So it's kind of a branches off and we could have other things extend the cat class. And we can just keep going and extending. Also known as like inheritance, right? to show something called multiple constructors, a class, we want to be able to pass it like a class differently, right. So for example, my if however, I only wanted to give it a name and they don't have to be mutually exclusive, right? set it up, or I could give it just two. And to So I'm going to do the exact same thing as above, out one of the parameters here. Okay, so Second and name and H guy. And you'll see no red lines, doing here is we're giving it another way to set our attributes and set up the cat class. So we can or three arguments, or we can call it using two. using one, we're only using zero. So let's do work. Okay, so if I do string name, and then int, should just get rushed. actually get rid of this, I'm going to give name. But what about age? What know. How are we going to set it up? If they only they don't give us an age, then we should just let's do that I'm going to put in zero, just hard for example, they only want to give us a name, of zero, they want to give us a name. And in age, should do in here, if they give us a name and age don't know, maybe let's give it a default value of eats, we're just going to assume that they eat 50. know when I was like default parameters. If they a value for that. So that everything still works the three different ways that we can create a cat. we'll give it a name. So we'll say Bob, and we'll works fine. Again, this defines a cat right So let's do this one more time. And in this case, this One do, like the name Joe. Alright. And like Bob speak. And we could do, Joe does speak. can define a cat. Okay, so Meow, my name is Joe, I on like that. So again, when we have one, now we we should probably give them food as well. So we default value for how much they get fit. So that And now I'm going to talk about protected values. similar to private and public. But they're, they use the protected keyword instead of public here in my dog class, I'm going to go up and things that are within the same package, or are pretty much like name. Okay, so that means any of package are able to see this. But if I had another Java programs, anything in there would not be able what do you call it whenever we're creating Wow. Okay. We're going to want to use a protected our attributes so that we can change them access for these methods, it's fine. They're public well, if we didn't want another package to be able right, if we create a private method here, I'm if this is going to allow us to use this let me know which one I changed. Get age. this is gonna work. Yeah. So again, this is not made it private, right? If we made that protected, of the package. Now, I want to try this though, our cat class. So if I do, for example, when I so this isn't working as well. Which means we have to make sure they're either public or time you really get to create private methods using the map that so for example, maybe you're from within the class and you don't want anyone you create a private method to do that, because So in today's video, we're gonna be going over So you may have seen that we've used static actually, I'm going to delete all this. It says I guess I haven't really explained what static this video. So let's get started and talk about called attributes games, we have these two our dog. So when we created multiple dog objects, and other dogs were not affected when we change unless that dog was that obviously, right. of different values that are specific to different sometimes, we want to have variables that will we can change them in one instance. And if we do other. Now, those are known as class variables, are like kind of attributes, okay? The way that something like this. So yes, let's say protected in my dog class, I deleted a bunch of stuff out And I still have the cat class, but it's just say protected static int count equals zero. Now, doing here essentially is we're creating a class which is protected. Okay, I know it's a lot do so what this is actually going to do is it's which means it's not going to change for each it'll change like that. All together, right? So this static keyword is going to allow us to do. variable is a part of, we just care that it's a this value x, well, I do need still need to call then or actually, I'm gonna say plus equals one, here, consist, I feel dogs should be accessed in Okay, what I'm doing here, sorry, one second, this count, because I want to keep track of how know, like, see how many dogs have been created, then figure that out. Alright. So what I'm doing actually work, is I'm calling dog count. Because static variable, class variable, whatever you what instance I'm changing it on, because it's actually use the name of the class to change it. I'm not sure if you guys read that. It said we it's a static variable. So I could, however, call Because this will is an instance of the dog class but it's much better to do dog count, like plus you that this does indeed actually work. I'm not objects here. Say a Tim or dog. Tim equals new. say 10, and score nine for age. And we'll just maybe, say, Bill, and that is new dog name. Bill, is protected, I can actually access it from me. to print count out first of all, is I'll prove to keep thinking, we're in Python here. And I'll just and just see what we get as a value First of all, is indeed working, because well, when we added one it would just be one. But anyways, and if I want dog dot count, let's say equals like seven. Okay? count, we get seven. Now I'll show you two. If I answer. So you can see we get seven. Even though count. Since it's a dog part of the dog class, obviously, within 10 as well. Okay, so that's kind talk about static methods. Okay, so this was a a class variable just because it's what I'm used we're gonna talk about static methods. And what way that this works, but is a little different. void, display, okay. And in here, all I'm going to I'll just print. I am a doc. Okay. So what this is in here, what's going to happen essentially, is actually just call this on the dog class. So I since it's a static method, this works fine. And to if this was a regular method, so let's just here. So public void, and we'll say, display to it word for word in here, just to show you the to do dog dot display too. You can see that we're this static because we need an instance to call create a dog object. And then we can use that this dot display too. And that works fine because this represents the instance that we're using. So simply using dog but the thing was static is it values are our attributes, right? So if I wanted I can't do that for a static method like, I can't work. Because if you think about it, well, there's no instance, we're just simply calling age to look for, or what name to look for. So the care about the instance. And we just want to do class. You can almost think of it as a function if that is ideally how static works. So whenever you about the like the instance, you don't care about way you can call it without having an instance. So I'll quickly go over what this void does one in our functions, we can return values, when you anything, we're just going to do something, or in this case, printing something out to the the user, but we're just not returning So in today's video, we're gonna be going over a string representation of different objects. these are really useful. And I guarantee you guys objects, like maybe like point objects, or like to compare, without having to make things too right. So what I'm going to do here, and what I've set up. And this is just what we're going to work in previous videos were already like finished, and And currently the only attribute the student I've just created a few different students. out to the screen. So that's why I have that we just create a name for a student. Now I just like comparing objects intuitively right? So say right? Like if I want to see if they were equal to So what I would do is I'd say like Joe is equal know, their names are not the same. So they're that would be correct, but not for the reason that have Joe and Bill compared to each other. So watch right? So you'd think well, these would be right? Because they have the same name. But watch why is that? Exactly? Well, pretty much we right? So like Joe, and Bill, the computer what it does is it compares the actual object. And a new object. And here we're creating another new two different objects, like in memory, okay, so entities. And they're completely unique. Although, names, and we can do things. These need to be actually saying, well, we're going to look and see are not. Now that's useful in some cases, because same object. But in other cases, we want to see if So in this case, we probably want to compare the same. And in that case, we would say, Well, yes, Yes, they are, they are the same, right? When we do now is I'll delete this. Let me show you how we class, I'm going to add a method, okay. We'll call we're gonna say equals, and then here, we're gonna then we'll go like that. And there we are. So what our students, okay, we're going to pass another right? So we're going to call this dot equals on going to give it another student, and then we're say we're going to check the same? Well, we're going to do is I'm going to say if, and then we'll here as well. always forget about those. If this other dot name, then what we'll do is we'll simply names are not the same, what we will do is we we need to do for our dot equals. So now, what's we'll call this we'll check name, and then we'll if it is, or if the same will return true, try this out. So these two are the same names. I guess we will put a bill. So let's run this. if I change bill, back to say, Bill, then we now we officially have something checking for more kind of ones like this, like equals grade, how we can check for equality between objects. Obviously, if you had a student with a bunch more other stuff like that, or like a last name, you Or you can just kind of customly do it the way the same, right? Okay, so the next thing I want to than sign or less than sign, right? So I want to greater than Tim. And we should intuitively like can't really show you like a way to do it here cuz than bill. Yeah, see, that just is undefined, is we're going to use a method called compare to, to, what do you call it, sir, we have to implement at the top of our class, I'm gonna spell it then in here, we're going to do student. Now what is we're actually implementing something called about in I think, like two videos from now. But we have to use for the class to work. So when we're allowed to bring in a method that is going we'll do now, is we will say, public and actually, ins and compare compared to, and then in brackets this will be other, we'll put our brackets here return some kind of integer. And I'll show you how screen, so don't mess this up. Okay. What I'm dot compare to, and in this case, we're going to will be other dot name, okay. So essentially, this name to this other name, and it's going to away they are, right? So it's, it's kind of hard it from over here. And you'll see what I mean. to bill. Let's see what we get. We get a value of bill by a distance of eight, meaning that they are eight away, I believe, okay. So if we we do is we check if this integer value returned that's going to tell us true if Joe is greater and we get true. Now, let's see if we compare Joe alphabet, so we get a value of false, okay, and can see exactly what we're actually getting as a far away j is from T one, we're comparing them and if we wanted to check if Joe was less than 10, in this case, we get true. So that's a really easy that compare to method Okay, so like this a public implement comparable students. And then you can the last thing I want to show is a string what happens when I just want to print out him. And maybe ideally, I'd like to see like look what we get here, we get tutorial, one dot What this is printing is actually the memory are actually stored in memory, in RAM in like you guys. But anyways, this is like the address this is what it's actually using to find Tim and us where it is in the tutorial one, like folder, we this does not help us as programmers at all and gives us some valuable information. So nother method here, that's going to change this but this is exactly what I'm going to use, we're like this, okay. And what we're gonna do in here of our object. So what we can do essentially, is what we're going to use to represent our object. like this, okay, and just follow me for one and then we're gonna add this store name. And then you'll see when I printed out to the screen, then Tim. And this is just simply telling us that and the name value is Tim. Okay. And we could double brackets around this name, if we want okay? Now for our purpose, I'm just going to And you can see again, when we print this, it I'm not actually calling this two string method, Java actually knows that when we have this two a string, right? So when we try to print it, it's Okay. So now, what we can do is we also just I could just call.to string like this, and I the exact same way as before, you can see we get however you'd like. In some cases, like say your their name. And then after you have like an array Now, inner classes are pretty, pretty easy, class inside of another class or inside of a go along. But since we already know all about I'm not gonna explain too much of it, I'm just of inner classes in different ways. So I'm gonna that I've already created. can see on the side intercourse right now, in a class is just gonna make this a public void display. And in here, all to the screen. So we know that we're actually in inner class, okay? And what's our error here, mistake somewhere here, one second guys. Oh, know why I added those anyways. Okay, so this I'm going to create another method that's going to is actually contained within the outer class, can only actually access it from within our class. means we must need a method in our class to do inner, and in here, we're going to take nothing, instance of our inner class and just display Okay, new inner class like that. Okay? And then all make sure that this is working. Okay, so now our have these void inner and all that does is create screen. Again, note that this is private meaning okay, so now if I go to my main dot java, I can we can see this. So first of all, what I have to call that inner class. So outer class out equals that I don't have any constructors here, meaning outer class or my inner class when I first call brackets. Okay. So now if I want to see my inner enter. Ok. So we'll call that method to create run quickly here. And we can see we get this is Now I'm just going to make this public. Now I'm of the class. So right now what we need to do is then we need to call the method inner, to be able was private. But now that it's public, we should class. So the way that we do that is we still class is defined within outer class. So we need to right? As we did that, we have outer class. dot inner class, okay. And we'll just call this going to be our instance of outer class dot. And believe this is correct. But I guess we'll see new new outer dot inner class. And let's see what package out. Interesting one second, guys. Okay, like this, what we need to do is we need to do dot new instance inside of this right of outer class we've created this i n, which is an object, which n, which is an instance of inner class, right to so if we run this, see, this is an inner class, you can get access the in a class. Now, right? would I do this, because now it's just like a ton don't really care about like this instance, and it. So in that case, this would make more sense to methods than just one you're gonna be using. Okay? show creating this kind of inner class. So I'm actually create these inside of methods, which are we want to use a class and we don't want to have Okay. So we have this public void, enter. So I don't even leave in a class right now. And let's and I can say, we can do public private, in this to class in a class. And then here, yes, that So we'll say, public void display. And now that I my other code, but whatever, get some practice should probably be a T, we will just type inner fine. Whenever we call this void inner, then we an instance of it, and we're going to display it. just kept all that code. That's fine. Why is this new and outer class and brackets. And then in this so now we can see what should happen is again, and we get in our class. Now pretty much you can saying this is public or private is just because we're gonna have to call this void. So there's like private or public But again, like if you or Oh, actually saying you can't do that. So I inside of this void, you're only gonna be able in really giving it like a public or private we can still do public and private methods, be using those methods, right. So you can see inside of the, the voids inside of inner, it wouldn't work. Because this class is only interfaces are either unique to Java, actually, languages, but they're somewhat similar to And anyways, you guys will see as we go through they're an important part of Java, so we need to is we're gonna create a new interface. we're just gonna right click on tutorial one, obviously, we're gonna click interface. Now, example that I'm going to be doing. So we'll click no like, you don't have to package generate now we have an interface called vehicle. So something that is completely abstract. Now, this not actually going to like you can't create an is to be inherited from. So if we have a class car could implement the interface and use it. interface it just here, so that we can implement So inside of our interfaces, and you'll see and we actually don't define anything inside the a method in interface, and I'll just make one void, speed up. And we'll take as a parameter I don't put those, the brackets, I don't do this. Now, you could see that this is completely it just defines the fact that this method exists. don't give it a value, that's kind of what we're car class. And you'll kind of have to go through when you create a method, just know that you don't this method will exist in any of the classes that methods here and already call it like a attribute. interface because the easiest way to understand gonna slow down. And we'll have to go change gear gonna implement a vehicle from a car and you guys and then I'm gonna add a attribute. Now, any whatever you guys want to call them, they have in the last video, but final means that it's we can't change this value. So I'm going just say five. Okay, actually, or let's just go saying that each thing we're using is going to interviews equals five, that still works, but it's so just make sure whatever you're doing to have like variables or whatever that you they must be final. Okay. So right now, we've which is just called gears. Okay, so how do we that work? Well, the way we use it is we've typed and then the name of the interface in this case, getting a red line, we're getting an error. implement it but car saying the type car must so that means that since we've defined these three we have to define them inside our car class. So one of the interfaces, we have to define them, And if we call them well, we have no idea what right? So we're gonna have to create a void void Change was calling viewers or gear. and then it's gonna have to take one parameter. In gear do we want to change? Okay? And then we're private int gear, because we're going to define so now we're gonna go to and make another the we need speed up. So we'll say public void speed speed are actually not speed, we're going to go by, and then we'll do one more. So public void, change. And there we go. So this now we're getting methods that were abstract over here. Okay, now, just like, if we wanted to use it, we could, I'm actually gonna create another private int, I'm now is I'm going to just just fill up these, say when we change gear, we're just gonna say, it to. And then for speed, I'm gonna say, this and then down here, we'll say this speed minus now what we're gonna do is we're actually just works. So we've implemented the things we need to going to do is we're going to just create another like a display method so that we can display our And inside of here, I'm just going to print out a print, ln, and in this case, we'll just say, I am let's say going and how fast we going we're going little kilometers per hour, so let's do that. And is. So this stuff stuck here. Perfect. Okay, interface vehicle, okay, and we have our car. So objects, we'll say car. I don't know, let's say, what we're gonna do is we're gonna say car dot. up, and let's maybe change it to 10, we'll add 10 have to make this speed default at like zero, and Otherwise, you're gonna run into an air arshi Can you just change that to one? Okay, perfect. gear, and let's just change the gear to Okay. And Ford dot display. Perfect. Okay, so let's run this am a cargo in 10 kilometers an hour, and I am in implemented all that stuff from our interface some cool things, we can add into our interfaces example, you've used a bunch of interfaces with And now what you want to do is you want to add a from it, well, what you could do is you could do like this. And then you could go into every single be whatever you want. But if you want the method use something this is why interfaces are kind of and then maybe in this case, void, and let's just just to make it easy. What we'll do here is we'll this from any of the classes that inherit our, say system, dot out dot print, ln, in this case, creative. How did I just spell system? And I okay, System dot out dot print ln default method. this car class, we can use that default method. then we want to do the default, what we could do, that actually works fine. So now that we have out and we implemented, let's see what happens when we our gear two, and then says default method. It's of our interface. Now, I believe we can actually as something that's not a static method, because we can actually create static methods within our Like, we don't have to have an instance to just follow along for a second, as I'm going to int, let's return something, let's change it up. a keyword. And that's fine, we'll just do math. do is we're just gonna return b plus not okay. I just to prove a point. So now, saying, I'm in we don't create a car object. And I want to use what I can do is I can do vehicle, dot, and then up here, this method dot math, give it a value, variable. So we'll say x equals that. And then actually getting as a value. In this case, there we go. So let's see, you can create a static you can kind of think of these as functions. I'll just do one as an example. Because this is call this math, okay, then inside here, you could math operations for you. Like maybe you have the like Euclidean distance, I don't know a bunch of interface. And then when you want to access them, dot maybe like square root like sq. RT, okay. And I want to call functions, but they're really easily. So that is a really good example Now, enums are pretty much a collection of can do things with those constants. And they readable. And yeah, you guys will see when we create an email. Now to do that it's similar to go to your package, right click, we're gonna going to name mine. Actually, I'm just gonna name for this example. So again, the syntax here is interface or whatever, right? So in here is where this is really useful, because we don't have to like we can literally just type whatever value it's a string. So in my case, I'm going to you don't have to go all caps, we're gonna are the three constants, I'm going to store in my that's literally all I'm going to do right now, that we can reference from level and these are you want. And just keep going with commas on and It just makes them more readable if you do them. now I'm going to show you how we can actually use works. So to use this enum, we have to create a say level, and we'll say LBL equals new. Actually, say a high, low and medium. So my guess we'll just can see it's all showing up in different colors. as a constant, we can do certain things with it, value your constant is like what value is levels. like so. So I say like if elvio equals equals and I guess. And we'll just work our way up to high. I equals, and then level dots and medium. Okay, else, because if it's not lower medium, it must we'll just say system dot out, dot print, ln. because I want to show what this does. Okay? now we're just printing level each time. And happens. So you see, we get low. So when we print whatever the constant is that we have. And that's So we can convert these into a string. And I'll say we wanted to get this because right now like, we don't really know what type it is, it's just get this as a string value, if we wanted to do string. So if I say string, we'll say E. Yen, string. And that's just going to convert this to operations or whatnot with that. All right, so thing that you notice is we actually get all the screen. So where do system dot out? dot print ln. dot values. Yes, there we are. So we go level dot you're going to see when we run this, now, it the values. So when we try to print that we're it. So once we have these values, so I'm actually then iterate through it and print them out. What is the way you have to do it, let's say arr is working fine. So what we're gonna do now is we'll how we can loop through all the different values. level E, and then we'll say, in ARR, what we'll do print out E, and then we can see all the different here, and you see we get high, medium, low, and doing this if statement here, okay. And that's how that's really cool. But you might say, Okay, well, Like we just have these constants? Well, there's you know, add some methods, and some instructors to certain values, kind of similar to like a hash way that we can do that is we need to create first in this case, I'm going to say private, and I'll is going to just be a private value, that's just low, medium, high value of all these levels. we need to create a constructor for our IEM. And gonna say public level in and then none. Okay? And modifiers legal modifier for short only private sorry, my bad private, because we're just gonna level int num, and we're just gonna say this dot now what I can actually do is you see how these constructor, that means we're going to define for the enough. So I'm going to put brackets here two as low as one. Now, what this is going to do medium and low. But when we create a new constant, and it's going to set this level non equal to this case, 321, we could obviously have multiple, multiple arguments here and we can have a ton of since this value is private, we're going to need a probably where we're gonna want to use it. So that will change that level num and to get that level I don't think I can do a public. Eye we'll see we'll simply return. Guess it's gonna need to be this dot, LDL num. Okay, yeah, so that does work so this is just going to give us the level num. If What do you call it? level num. What I'm going interior it's just gonna be a void. Okay, and all num, and then we're gonna put in here, int, num, a way to not only get the level num, but to change and see how this works. So I'm just going to get right now. So right now we have our level and it's this level, we can use something called get value in this case, I'm going to say get level. So what and in here, we'll say elvio. dot. And then what So now if we print this out to the screen, we're getting one. So now I'll show you this x value ever get value? I'm not sure we'll see. So dot value of Yes, that is exactly what it is. And so in this case, we could say, low, it's gonna so the issue is, I just got to put this in string, value of and say I put a string in here. So like, and they type in a string, right, and you want actually going to get is we get low, right? In the enum. Although it's not a string, it value of is used for, I can't really give you know any good examples of using value of but I figured I would show it to you. So I guess we to make sure that all that is working, say elvio And then let's just grab this again, actually. just simply going to print out, record elvio dot changing and working fine. And there we go, use itams. Pretty much they're used for when you maybe you want to loop through, see what those readable, right? So we have level dot low, and whatever. And that's all stored within our enum as you want and you'll really see the use of like larger programs. Okay, so anyways, that has make sure you leave a like and subscribe