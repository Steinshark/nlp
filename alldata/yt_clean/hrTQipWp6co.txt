Git. Zero experience to professional in one tutorial. Git is a tool that's engineering job. need to know git and that's why we're So we're going to start with this important question: Google Docs or Microsoft Word the version history. So once in a while, document at that point in time your document in a version history like And this makes it easy for you to go document previous version in case you mess up. version history for our code, every file of our code, the code that we had in the past, to a past version. developing software. Version history is a small part of what and later on we're going to learn branching professional level. But for now, we're use git history feature tutorial you just need to have written You don't need any prior experience. I'm You can find the different sections of in the timeline, or by clicking here. the tutorial. First, let's learn how to install git. If installed, you can skip to this time in The installation process is pretty website: I'll leave a link to that in the to do is to pick the operating system mac os first. in the video. this section here. So the recommended option So there are two ways to do that: the this icon, which will open spotlight, and Terminal, and we're going to open If you find that the font is too small and then click here to change the font So now that we have Terminal open, we're And then we're going to press enter. So like this, that means that git has and you can skip to this time in the go ahead and press install and that will When that installation finishes we're going to reopen it. again and press enter. which means that git has been installed. pop-up didn't show up, search for After xcode finishes installing, we're then we're going to close and restart and then we're going to type in git and should have been installed, and if it and we'll figure out what's going on. simple, we just have to go to this section and the installer will download Ff it doesn't you can also click this After the installer finishes downloading, and then we're just going to run the options. Just click After that's done, we're going to search PowerShell we're going to open windows If you find that the font is too small and click here to change the font. So type in So you should see a message like this, If you don't see that message let me figure out what's going on. Now that we've installed git, we're ready version history for our code. on a mac, but these steps are the same or a windows computer. So the first step to practice with. project that you want to use, feel free otherwise we're going to create some go to my desktop and create a new folder, I'm going to call it git-tutorial folder in my code editor. Okay so I'm just going to type out some if you want to copy this code feel free Okay so this is our example code. We just name Just so that we can track which version version history. something to practice with. So git is mainly used from the command or PowerShell on windows. To open the we're going to click this icon, which to search for Terminal. we're going to search in the start menu PowerShell, and then we're going to open PowerShell. So let's go ahead and open about the command line to use git, concept. The command line is where we can computer to follow. ls and when I press enter the computer and list the files and folders that are So notice that I said current folder. So that specific folder. line the commands are running inside a the $HOME folder. So in order to use git, commands are running inside of code. So to do that we can give this cd, which stands for change directory. And we're going to change the directory desktop slash git tutorial. place by giving the ls command again in the current folder. source here which matches what we have so we know we're in the right place. So the command line is that if you ever restart it you're going to start inside So make sure that the first step you do folder which contains all our code. And that's it now we're ready to learn Now let's create the first version of So the first thing we need to do, is to contains our code. command: git to press enter. inside this folder, in this folder for changes. commands because i'm going to put all sheet below. So the next step we're going to do, called git status. what changes have been made don't have a version right now we're files. So there's a lot of text that comes out So git is just telling us that there is and a new folder called src that are And that is correct because we actually So our next step is to create our first and we have to do two things to make do next version, command: git which changes we want in our next So we actually don't have to have both actually just pick config.js this command, version and this other hand, if I give all of the files subfolders. So for our first example both of these into the next version. And is git add dot. So the dot folder that the command line is running And if you remember at the beginning we changed the folder that the command this folder, which is this folder that So if i say dot here, we're going to add including any subfolders. So that's a add everything into the next version. this command, again to verify that it worked. that are ready to be put in our version So remember that git add doesn't lets us version. So to create a new version we're which is git commit dash is known as a commit as this tutorial words commit and commit history just to help you get familiar with the But for now i'm going to use version Google Docs version history feature. message to this commit. to a commit just to describe looking at this commit down the road So since we're just practicing I'm going version one, and to run this command And that's it we just created the first So I realized that depending on your message that looks like this: feel free to skip ahead. to configure attached message. So we're going to explain right but to get past this error you just have So you're going to run git config and then you're going to give your email, name. user dot name and I'm going to put my And now we're going to run git commit and that should work successfully. So you here we're going to go through it one by So in this section we're basically and there were four lines of code added do this section basically just warning us an email to git. attach to each commit, your email. That way, in case one of your teammates know who to blame. and all we have to do is actually just So git config dash So I'm going to put my name you can put And git config global supersimple.dev So now that we've configured git let's, So we can do that using this command, git can see that we only have the one we just created, the author's configured the name and email after we so that's why we have a default name and And that's it we just learned how to add Later on we'll learn how to go back and code. other thing. So let's say you make a mistake, so for example you forgot to add a change. this up and change.js and let's say that we actually wanted what do we do? So the way to fix this is So we're going to do dash m version 1. made a spelling mistake, also going to give dash dash instead of creating a new commit the previous commit. and now we're going to run only have the extra file that we created has been to that version. So that's how you can in case you mess up. Now I want to show you how you can tracking editors allow you to see what editor instead of just that works. The editor i'm using is visual studio code. You might be using so you have to check if your editor So in vs code we can actually visualize since the previous version, so let's go I'm just going to change this to version it to version 2. the git to get here. status in the command line except we can So if i select one of these changes we what code we have changed in this file So you can see that it can be really feature have like 20 different files you changed. So this editor also allows for us, so for example if I want to git I can actually press this plus button running git add myself. to click the plus button here, equivalent is just a little bit easier to run git commands, have noticed that when we ran this area called staging all of the changes that we have picked the next version. the staging area is all of the changes but we haven't used git add yet. So this is called the working area, so all of area. just to visualize it. starts off in the working area, to add it to the staging area. about the staging area is that this file again. another simple modification, that config.js is now both in the and in the staging area. So how does that it actually tracks added the second change fundamentally tracks changes. places. So let's go ahead area, and you'll notice that it actually So that's just some foundational You're going to be using the staging some of these facts about the staging as well as the working area. So the last features staging area let's start with staging first. area our code editor might provide a and my code editor has one right here. So and it will take the change out of the git command for doing this. So reset works the same way as add. If we like reset config.js, it will only take give it in the folder including any subfolders area. So remember a shortcut that we can is git reset dot. So which is this folder that contains all So if we do git reset dot it will take area. So now all of our changes are in the changes in our working area using And that command is git checkout git add and git reset. undo all the changes to this file in the or we can give it dot which will remove let's go back into our code editor, So if I click doing, thing as doing And if I click the button up here, this dash dot. your code editor can really make your So now that we learned the fundamentals version history, other features that we find in the Now we're going to create two more history back to a previous version of our code. actually pause the video right now and own. we created our first version. code. just make some changes, we want in our next version. So git add commit this version 2 just because we're Now I'm going to create another commit by first modifying the code. and I'm going to pick these changes to Then just create another commit you'll see that we now have three And now we're ready to learn how to So you might have noticed that one big is that Google Docs automatically you. version and you can go back to it later. our versions manually. still creating our versions manually, why So the problem with code is that until it probably doesn't work so we don't versions of our code doesn't really matter if the thing's it's just a bunch of words and sentences. half finished document. code. So that's why we always create we want to make sure that a code is good history. So now that we actually have a version back and view git command for doing that git let's say that we want to go back to So in order to tell git that we want to it the commit hash, this version this commit hash checkout. we are back to version 2. If we look you can see that we are back to version And that's as simple as it gets. We just back to previous version of our code. So but you can imagine that if we had a big 20 or 30 different files this is really all of those files back to their our command line the state of our version history. commits here right now, only shows the current commit current commit, but not any commits of the commits in our version history git log dash dash all. different versions that we had word head, scroll up see that head used to be beside this is telling us which version we are So in Google Docs when you're viewing a usually just be highlighted, highlight stuff so that's why we use to indicate which version we are So now let's get a little bit more to the first version that we had in our So pause the video if you want to do it it together. checkout, commit hash that we want to go to so copy this and paste it here, and then So now we are on version one. If we check our code is back to version one, and we both of our files are back to version and we run git log dash dash all, version. So that's how you go back and The last feature we're going to recreate is the restore this version button, which back to a previous version. Let's learn except using git. So one thing that we is that we'll look at our code and back to what it was at version one. modifying it and creating new versions So let's give that a try and see what update here, and then I'm going to do the usual git and then create a new commit on top of I'm going to call this version 1 updated, we can see that everything appears to be We have our old version 3 commit here updated at the top so we restored our code back to version and then we restarted from version one. we want. go back to a previous version of that previous version, gonna start branching off the way it works in Google Docs version Google Docs basically takes whatever and then just copies it over to the So this is not exactly what we want. Now how you can view the branching effect in and you can do it with another command. we're no longer in the command line log is way too long, and so if you try to So to exit out of this view we're going And now we're going to run git log again dash graph. start showing you the branching effect to run this command of commits. what we had earlier is built off of our first simply go back to your previous version version. So this is a feature in git branching, and we're going to learn a lot now since we're trying to this isn't exactly what we want. pressing q and we're going to learn the for doing the exact same thing that going to do previous branch of commits which is here. has a word beside it. version of git you have it might also be main. So this is known as a branch name, first way is that it makes it really to another commit, so instead of doing checkout and copy pasting this long we can just do git checkout master. helps us with is that it always points so if I add another commit to this master will point to that commit. So this switch to the latest commit in any given So we'll learn more about branches later can git just git checkout back to our previous log dash dash all dash dash graph, main branch of commits that we had Now let's continue recreating that So there's actually a git command for is git checkout, first thing we have to tell git is let's say that we want to restore from We're gonna take this commit hash, and the second thing we're going to tell So this works the same way as git add We can give an individual file like this, and it will restore the contents of back to what it was in version one moving the head works so remember for git add you can We can also do the same thing here so if git checkout hash and then src, src folder their contents in this version. So dot, and this will restore all the code So let's do that. We're going to press run this command, and now you'll see that version one version one. dash dash graph to see our version has not moved back to version one. So if it's not going to start branching our So this is how the Google Docs restore we're just taking the contents of the pasting it in the current version. for doing that. adding these changes to our version So first let's run git status, checkout to restore the contents of the version it actually automatically adds So all we have to do is git commit dash and give our commit message as usual. So and now we're going to do git log dash dash and graph just to make sure that we And there you go, this is how we recreate Google Docs So I just want to say congratulations! the version history feature of google using git. And now that we're done history, to be using the words commit familiar with the git terminology. recreating Google Docs version history so now I'm going to show you some you'll find useful. you is like shortcuts. instead, I can type git s and it will do So this is called aliases, and to set up git config dash dash global the sort of shortcut that you want to and then I'm going to use the full should stand for. So s is going to stand so next time when I type git s, git is So that's just a way to save you some you're working with git. aliases that I use, one of them is git dot cm, and I use this to And another one that's useful is git global alias dot co, and use that to checkout. So now instead of doing git dash m I can just do git cm. use or create your own. show you is how to ignore certain files So this usually happens if you have a secret dot txt and inside this file maybe some passwords, your version history because it will be forever. So what you can do is you can add a new file called dot git which files you want to ignore and not So we're going to put secrets dot txt status git ignore, ignore this file, git It's not going to add it to our version So this dot ignore file is actually a version history, git add add git ignore. certain files from being tracked by git So the third and final extra feature I'm remove git from your project. our project want to remove git right now. just going to call this a new command line and make sure that into this folder that contains a copy of tutorial 2, and let's run git still in the copy of our folder. to press q for quit, All we have to do dot git. So all of the data in git, and our version history, if we just delete this folder, And this rm -rf command everything inside this folder. And now let's go ahead and run git log And you'll see that this is no longer a So a repository just means a folder that and that is how you remove git Thanks for watching we successfully feature for our code tutorial we're going to learn how to using github, about github features. My name is Simon tech career possible for anyone. please leave them down below. Remember listing all the commands that I taught And you can always contact me at I'll see you in the next one