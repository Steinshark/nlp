Hi everyone, Kevin here. Today we are going to learn how We'll start with what even is Then we'll look at how you can and then we'll look at how you can use it. After that, we'll look at GitHub. GitHub is a hosting platform where you can By the end of this video, you'll be If you'd like to follow along, I've included All right, let's check this out. First off, what even is Git? Git is open source and free source control With Git, you can manage and you can go back and see Here for example on the I say that our eggs come from chickens Did anyone ever really believe that? We So, I need to update this text on the website. I can now create another version and then I can update the text there. Once I can then merge that back into the Basically, that means that my changes Now, let's say that maybe the operations we actually do play classical Well, with Git, I can simply That's the magic of using Git. I could revert back to previous versions. I can compare the differences between Basically, if I screw something up, well, I Now that we know what Git is, next, we need you can head to the website up above or you can Once you land on the website, click on downloads and then select your operating system and When I installed Git, it came To launch it, simply click on your Start menu and but you could also use any other You could also use PowerShell or command the terminal that comes with your machine. You Hyper.is and that works across all different Once you've installed Git, you can use any I'm going to use Git Bash simply because it Here I am in File Explorer, and I have these four different files that make up the If you would like to follow along, you can download all of these files I want to use Git for source control. So how do we do that? Well, let's open up Git Bash. This is the terminal that we just installed. Now again, you could also use any Here I am in Git Bash and before we can get First, we need to specify your The reason this is so important write something to the history book, First, let's specify the name. user.name, then insert quotes and I'll type in Kevin Stratvert and then Next, we also need to specify your e-mail --global user.email and then I'll type in kevinstratvertyoutube@outlook.com the default branch name and that might Later on, we'll talk more about what branches But for now, let's once again init or initialize.default branch and we're Once you type all of that in, So far, we've been using a and as we're going through this, if there's what it does or what different you can very easily ask git for help. Here for type in a - with an h. When I press enter, this Now zoom out a little bit more and here you can see all the different Down below as well if you want you could also type in git help Here I'll press enter. This opens up a manual that's hosted on your don't have Internet access, you'll still be able information about what that command does and here and you can see all of the different options Back now in the terminal, to clear it out, simply type in clear, press enter, and Here once again I have the following make up the Kevin Cookie Company website So, let's take a moment to look at this address here and just remember where It's likely in a different location on Back here within Git Bash, we need to change the To change the directory, let's type in and then let's type in the location. I have it in Now I can press on enter and here we see that To now turn this into a Git initialize or init, and then And here we see that it's now Look at that, we've now created our very it doesn't look like anything changed, but option that says show and here I can show hidden .git. I can now click on that, and this Back within Git Bash, we're now going to Type in git status and this will tell I press enter, here I can see that Remember at the very beginning, Here I can see that there are currently no commits in a little bit. And down below, I see that These are all of the files Currently all of my files are untracked. That means if I make any changes to any of these Now if I track a file, Git will know So, let's say I want to revert I can do that. So how do we track a file? To track a file, specify the filename. So, let's say that Here I'll simply type in So, this file is now being tracked. once again, we could use the I can type in git status, hit file is currently being tracked and we Now let's say that for whatever reason, Right up here, I see the tracked file that I can use to unstage or I can type in git rm for remove So, let's try this out. I'll type in git rm --cached, then I'll hit enter. Now once again, let's we're back to the original state where all When I look at all of the different files that Git knows about, here one of the files And I definitely don't want to In fact, I would prefer to have Git Let's open up File Explorer In File Explorer, we're going .gitignore. This allows us to ignore certain Here I'll right click and let's go to new and let's select the name and the extension and let's Here it tells me that it might become unstable Let's click on yes. And here I have a new file called .gitignore. I'll take Notepad here and let's you could use whatever text editor you want, so I need to tell git what files Here I'll add a comment by entering in the hash Remember, the employee salaries is a .txt file. Underneath that, here I could type in an asterisk, Now I can go to file and save. To see a ways that you can ignore files, folders, or the website down below. This is ideal for things don't want to include as part of your project, show employee salaries. Back within Git Bash, Once again, just like we've been doing and then hit enter, and here I I really dodged a bullet there. To give us a little bit more Now that we're ignoring one of the files, Earlier we tracked that one file So how do I just rrack all of the files. Here I could type in Git add -all, Alternatively, I could also type in -A or I could Those are all different ways that I can and let's check what happened. Once again, let's type in Git status, hit enter, and here I can see that all of these files file that I ignored, and currently all called staging. Now that I've added all of So, what does it mean to commit? To commit, you're taking a snapshot of Basically, what all of your In a sense, it's like writing and if you ever want to go back to this To commit them, we could use the commit command. I'll type in Git commit -m, and then open quotes and here I can type Now remember when we commit something that's different files to the history books, and Here, I'll say this is my first commit and let's Then I'll close my quotes Congratulations, you just and there's now a page in the history book. That wasn't so bad, was it? And just like that, I've now committed officially part of the Git record. Here I could type in Git status once again and I Let's say I now want to change one of my files. I want to modify the index.htm file. Here I'll click on this file, and here we see the contents of the file. Now, if you remember, we say eggs from chickens found out that that's actually not true, so let me are, let's say, free range, and next I could go within Git, I can now type in Git status, these files has been modified. To see what's We could simply type in Git diff, and this I'll hit enter and right here, here we can see what the file name is, and and here I can see the changed text in green, to classical music and down here in the I'm satisfied with all of I want to add this change to the history books. Let's once again type in Git add index.htm. The file is now currently sitting in staging. Staging is a place where your files In a sense, it's kind of like a add that entry to the history books. In You have your working files where Then you have staging, and once again, this is to the history books. And then you have your and this has now been added as a log Let's say I want to remove this file from staging. Maybe I'm not ready to commit it. I could type in the command, Git Now, once I press that, this moves So, if I were to commit now, this file would not be included because this file was So, let's say that maybe you're working on 6 ready to commit. You can move those three and the files that are currently in the The index.htm file is once again in my working So once again, I could add it back to staging But I could also just bypass or To do that, let's simply type in Git commit -a -m, Then I can close my quotes and now when I and it's now committed this change. Here called Secret Recipe and I definitely don't want probably just delete the file, and I can do that rm for remove and then I could type in the file But an even easier way to do that, I could also delete the file right Back within the terminal, let's type in Git status this file has been deleted and the reason why is On second thought, maybe I should keep this file. I personally haven't memorized And right up here, I see a helpful I could type in Git restore and then I'll type in Git restore, and here I'll insert and then close quotes and hit enter. If I go back to File Explorer, Now once again, this is one of the If you've ever previously committed previous version, or you can recover Similar to deleting a file if you want directly in File Explorer, or you Let's try renaming a file in the terminal. I'll type in Git mv, and we're using mv, and that old filename to a new filename. Here, I'll type in I want to move to the new name primary logo.png, If we go back to File Explorer, here I can I want to add this change to the history books. Basically, I want to add an entry that I'll type in Git commit -m and then So, let's say we changed and then I'll close my quotes and here I could So far, we've made a number of different commits, or basically entries to the What if we want to review all the We could type in the command enter. And here we see all the different commits. Every single commit has a unique identifier. Here we also see the author and if you remember at So, I typed in Kevin Stratvert and then Then I could also see the So here at the top we go with the most commits and right here I can also see the If I want a more abbreviated version of this and then I could hit enter and here we see an Now looking at this commit history, I just and I could go back and commit again but I actually just want to amend that text. Luckily, with Git we can do that. I'll type in Git commit -m and to primary logo.png and then close my quotes I could type in --amend and then press Now here I could press the arrow up icon all the different previous I could go up to Git log --oneline, hit enter, corrected, so that's a really neat way that you commit without having to submit yet another different commits, but let's say I want to see I mean I have some text here, but what Here I could type in Git log -p, and then hit enter, and here I can look through example, I can see in the most recent commit, And here I can see that I updated text to here I can see what the original text and if I press my arrow key down some where I added all of these different To exit this view, I can press Q on my keyboard, Git log has all sorts of advanced capabilities. look for changes that happen before a Now once again, as we looked at earlier, if you could type in Git help log and then hit enter. and here you can see the description and different capabilities of how you could One of the great things about having this commit commits. To do that you simply type in Git So here for instance, if I wanted to I could simply type in this value Now of course, I don't want to do You also have the option to modify what appears all of these commits appear, and you can Here I could type in Git rebase This brings me into an editor. Here I see my three commits and options to modify the way things appear. Once again, I can change the order. I can even merge together Now this is beyond the scope of this video is possible. To exit this view, press the colon into the main terminal view. So far, just directly to the main branch, but What is another branch? Another branch is basically a copy of your in that history book, but this allows you or maybe you're fixing a bug and you can make all Once you're satisfied with all of your changes, This is also how software You'll have developers and maybe one's working work on that new feature. Maybe someone else another branch to work on that bug fix, they're satisfied with how it looks, they can there's a file called Secret Recipe and this has Now I probably shouldn't be showing you this, but we've been working a bit Let's click into this file. Here within the secret recipe, and this is a really good chocolate chip that it calls out heating the oven to 500 and that would probably burn the cookies. I Let's create another branch to make this change, then we can merge it back onto the I'll type in Git branch and now I can type in fix the temperature. I'll type in FixTemp and then To confirm how many branches we have, I and here I can see that there's one branch called FixTemp and there's another branch How do I know that we're currently in main, indicating that this is the currently active let's type in Git switch and then enter and here it says that Once again, I can type in Git branch and then currently active branch, and here I see the Explorer and all of the files that you see here in Now I want to edit the secret recipe temperature. I'll take this file and I'll drag it the contents of secret recipe. Now once again, Currently it says 500. Let's change that to Git Bash let's check the status of this branch. And here I can see that there is We just updated the temperature Now I want to commit this change to this branch. -a -m, and then here I'll say updated temp for and hit enter, and that has now Next, let's switch back to main. Here I'll type in git switch main, then hit we switched back into main, all of these files So here if I click into secret recipe, here Fahrenheit. We only changed it in the FixTemp from FixTemp back into main, or essentially, we the changes back in, let's type in Git merge -m I'll type in merge FixTemp back Then I also need to specify what Here I'll type in FixTemp and then file has now been merged back into main. I can now click on the secret recipe and here and here main is now referring to 375 Now that we've merged all of the changes from need for that additional branch, and at this To delete a branch, let's type in Git branch, then enter -d and then you can type in I'll type in FixTemp and then hit enter Let's type in Git branch and here I can that's the main branch and that's also the this merge went pretty smoothly. Nothing had changed in main so it was But what if you create a branch and but main has changed since In that case, you'll have a merge And first, let's create another branch. Here I'm going to use a command that but it also creates the new branch. I'll type in git switch -c, the c will UpdateText and then hit enter. Once switched to a new branch, I could type in Git I can see that we have two separate branches Here in File Explorer, once again, reflect the UpdateText branch. I want to make some edits I'll take the file and I'll drag it into Here we refer to the finest ingredients, but I and here I'll save the index.htm file, and back Here I'll type in Git commit and then I'll type in -a -m and here I'll Let's now switch into main and Here I'll type in git switch main and this now represents the main view, and here I want Here I'll select the file and and here it refers to the finest ingredients. Let's say maybe the most amazing ingredients Back now in Git Bash, let's I'll type in Git commit -a and then index text and then I'll hit enter. So, Let's now try merging the changes what happens. To merge UpdateText to main, and let's see what happens when we press enter. When I press enter, here I get an error message why is that there are conflicts and right I can see that I'm currently in Let's go back to File Explorer to see if Here in File Explorer, I can see all and if you remember, we had a merge Here, I'll drag that file into Notepad and Head refers to what's the current in main and down below I could see from the branch UpdateText, and I Now I want to keep the text from UpdateText, so here I'll delete the head and here I'll delete Let's go back to Git Bash. Back in Git Bash, I can now commit the I could type in Git commit -a index and then I can close my quotes and hit So that's one way you can And now that I've resolved that conflict, This should give you an idea of the You have some feature or bug So first you'll create another branch. Then you'll go in and you'll Then you can merge it back into the main branch. And once you do that, then you'll delete Now that you understand the fundamentals of how do you work together So far, we've just been working with local computer, but you can also host and one of the most popular cloud Not only do they offer a cloud repository, You could set up Kanban boards. You can track issues. You could assign features In a sense, it's a social coding website. Let's First, we need to create a GitHub account. You could head to the following website. You can click on a link up above or On the home page, type your e-mail address to Once you finish setting up a new Over on the left-hand side, you should Alternatively, you can also head to the URL GitHub.new and that'll also Let's click on this. You might be wondering, do I really need to create a cloud repo, especially if Well, if you're planning on working with a team, it makes sense to set up a cloud But even if you plan on just working by yourself, to your local computer, you have a backup, and all over here I need to enter in a name for this Down below I could also type I'll leave it blank for now. Here I could decide, do I want to can come in and access it or If I make it private, I could assign so I could just work with Down below I also have some other I could also add a gitignore file. Remember earlier when we we manually created a gitignore file, as you create your repo and down below Now all this looks good, let's Now that we've finished creating our Right here, I can see how to create Right here, I see the option to push an We already have a repository on our local for most of this video. We can take that So, let's take this first command. Git remote add origin and then this URL. Your URL will be specific to your GitHub account. Let's copy this and then go back to Git Bash. you can paste, or you can press shift and insert is establishing a remote connection with GitHub That's a common name that and here we can see what the address Here I'll press enter. Let's now go back to the website The next command will set Let's copy this and then go back to and then let's run that command as well. Once again, let's go back to GitHub and here we can now push all the contents I'll copy this and then let's paste this And here I can see that my entire to GitHub into the cloud here I can click on the repository name out. Here I can now see all the files from my Right up here, I see that there's and I had another branch called UpdateText. If we go back to you Git Bash, I could Here I could type in Git push --all, and that'll Let's press that. And here I can see that it Let's go back to GitHub. Here within GitHub, I I have my main branch and then I also Now that we're on GitHub, let's take a I can click on my different files, so Here I can preview what that Right here I could also see what the last So right here with the secret recipe, here I could instructions. Here if I click on that, I could So here I could view that log or Back on the main screen, if I I can simply drag and drop them onto GitHub Let's say I want to edit one of these files. Here I can click on the file name secret and I can go through and make changes I could also commit directly on GitHub. the right-hand side, here I could I could click on this settings gear, and I I could enter various topics and here I could packages, or environments directly here on the page, we have all of these different tabs related Let's click into this one. Issues is where you can enter in feature You could enter the details of So, let's say that on the homepage, I notice but it turns out we also So that's a bug on our homepage. Right over here, over here, I can give this issue a title, and let comes from India and the Philippines. Over here I Over on the right-hand side, I Now currently there's no one else on my team, track of this issue. Down below, I could also and here I can add a bug, but you I'll select bug. Right here I I could also assign various milestones. And I'm all done entering in the details This has now successfully created an issue social environment so other people could come in is this truly a bug that needs to be fixed We can have that discussion all Now I have this issue assigned to to work and update our index page In the top left-hand corner, let's click on the I want to edit this. I'll click on index.htm Within the edit view, right up here let's the text on this page, and if I look right India. And of course, we also so here I'll say and the Philippines. If I scroll down just a little bit here, I or I have the option to create a new branch So, what is a pull request? Well, I can start a new pull request and especially if you're working with others, you can and then you can have them submit a pull request, so the change has to be reviewed by someone I'll give this new branch a name. I'll call it IncludePhilippinesSugar This has now successfully created a new and now I want to submit a pull request. This is basically a request for someone Right down below, I can see It says update index.htm, but I probably I'll insert a - and maybe include some text that says we should include Philippines as one All of this now looks good. Let's click on create pull request. This has now successfully created a pull request about the merits of this change and if everything Over on the right-hand side, there's a section settings gear, I can tie this change, or So, here's the issue that I called out I select that and this is Now if I merge this pull request, here it merge this back into main, but it'll Let's go up to the top of the page and click into pull request or that change, it has automatically closed, here I could review that bug that came That one is all done. Up at the There's one called actions, and this is where you can run different tests. You can basically There's another tab called projects, and where you can view all of your you can filter the different views. It There's another tab called Wiki, and It's kind of like Wikipedia, but for your and this is where you could manage all define what should happen when let's You could also set up scanning, There's another tab called see,well who's contributing to your How many issues have been closed? How many commits You can view all of that right here. And lastly, there's another tab called settings, settings related to your project. Over on the here's where you can add additional Let's go back to the main repository we can also create a release. Now this is V1 And here I can choose a tag. Why don't we call this release. And here I'll select that. And here I could give it a release title. I'll title it V1.0.0. This is just the first you can see some suggestions for Now this all looks pretty good, And look at this, we now have V1 available could download the source code for Now you might be wondering, we made but how do we get those changes Well, there are a few different First, we could use Git all the history from the remote tracking branches. And to merge that in we could type in Git merge and that'll now merge it in with But instead of typing in those two separate and then I'll hit enter and this will download and merge into just one command, git pull. All understanding of how you can get started with included some fantastic resources down below in please consider subscribing and