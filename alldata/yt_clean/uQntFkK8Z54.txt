- Hey everyone, I'm Lee, the Head of Developer and I'm joined today by Rich Harris. We are going to talk all things Rich and how he ended up So Rich, do you wanna kick things off by introducing yourself? - Sure, I'm Rich. I've been at Vercel for Prior to that, I worked and I've been working in so this is a big, exciting change for me. - Well we're really, really and to kick things off, a fun trivia fact that I just recently found out, I didn't actually realize that you also created Rollup, which is something that so I was thinking about this a little bit and I wanted to ask you, what was the first popular and what was that transition like between, I'm just gonna build this just to see where it goes, and oh wow, there's actually a decent chunk of people using this. How does that change the dynamic of building an open source? - Yeah, I mean popular is an open source, but the first big was actually Svelte's predecessor, it was a thing called Ractive, which I released the It actually came out about I remember I was working on it, I was getting ready for a public release, and the React announcement appeared on Hacker News like a and I remember thinking, what a waste of time. But launched it and it had React was not yet the thing and so the market hadn't decided yet, and so for a long time, I sorta harbored this fancy that Ractive could be a and I really love that project, it is my first big open source endeavor, and I poured my heart and soul into it, and it got users, and what is kind of hard to see as an open source maintainer if you're not an open source maintainer is that a project doesn't have to be huge in order for the amount to become overwhelming for a maintainer. And so this thing that I had spend, I was spending all my it was starting to get users, it was even starting to like at one point we were and Delta Airlines and in addition to my own employer. It was becoming kind of unsustainable for me to work on, to the point that I got eventually just totally burned out on it. And I think that was my first introduction to the realities of being and it's what sort of taught me how to deal with having users and also how to approach problems of like, how do you get contributors on board? And how do you get them to think in the same direction and work on the project And also how do you say Which is a huge thing. As soon as you start getting you need to be able to start turning around to people and saying, actually, it's great that, you're excited about this project and it's great that you're contributing, but that's not what we're gonna do for the following reasons. And so, in every way it in the inner workings of open source, and it laid the foundation for Svelte several years later. Although, as you say, Rollup came in between those two projects. - That's fascinating. I actually didn't know so that explains a lot I guess. Then, so you've been thinking about building front ends for a long time now. I mean, that's, it's and I think it's also interesting, the mind of a developer who builds tooling and who builds frameworks and libraries and these type of solutions, it's almost wired a where you're evaluating tools and you're making decisions on what would work for my project and what trade-offs I need to make, and there's this final I'm going to build something that solves the exact problem I need. I understand that I'm diverging from the tools that exist, but it's worth it for me to build this that's hyper-specific to the needs of my project and my company, and I think that's interesting that you mentioned, even the company that you were working for started to use that, and I know that with, when we start to talking like with the Times, So it's interesting to me, from the mind of a framework author, how you think about, I'm gonna build this tool, not only for the larger community, but also to solve a very immediate problem that I wasn't finding a good solution with other tools. - Yeah, I mean I think a lot of open source begins that way is that, someone scratching and that was very much and it was very much the case for Rollup and it's very much the case for Svelte. If the tools that we could do the job then it would've been no But that wasn't the case. And I count myself very lucky to have had that experience in a newsroom, because the kind of work that you find yourself it's very varied, there's a lot of fairly that you need to try a over the course of a year. And so like you get this, like you're sort of where not only are you being exposed to the needs of this very but you're also working with people who aren't necessarily first they're first and foremost people who have adopted JavaScript in order to do their real job which is journalism. And so, there's no room for any nonsense in that environment. You need to keep things as simple as they can possibly be and no simpler. And I think that's why newsrooms have historically been responsible for a fairly decent amount of widely used open source. - That statement about and kinda no nonsense I feel like transitions well into talking about Svelte, which I'm very excited to go deeper on and hear more about how you want to evolve and grow this over time. But first things first, the elephant in the room I guess, you've joined Vercel, you have Svelte, this amazing project that you're leading and an amazing community, amazing open source collective. Why, I guess why join Vercel and what does that really mean for the future of Svelte? - Yeah, I guess there's a is what does it mean for me and then what does it For me, this is a massive It means that I get to work at what is clearly a very I get to work alongside and I've spent a long time looking at the sort of Next.js, change log, release notes, and kind of trying to absorb the lessons from that framework from the outside, and like now, I get to hang around or at least lurk in the Next Slack channel and watch those ideas And so, it's pretty cool from that front. As an open source maintainer, it means that I now have one job instead of two jobs, which is also a huge benefit. I mentioned that I got a little bit burned out on Ractive, same thing happened in Rollup. I mean, it's a reality of that eventually, the will cause you to burn out, and I didn't want that The reality is that for I haven't been able to the amount of time to the project that I would like, and a consequence of that is that other core team members are having to shoulder an unfair amount of that work, and that's not fair on them. The last thing that we on the core team to burn out. And so now that I'm able to work on this stuff full time, I can contribute to the project, the amount that I should be contributing, which means that the rest of the core team aren't having to pick up my slack, and it means I'm not either work on the of not working on the project while also having a full-time job. So for those reasons, me coming to Vercel makes a huge amount of sense for me personally. For the project, I think And I mean it's not something that I would necessarily have anticipated, if you'd asked me a year ago if this was gonna happen, I would've been very But I thought long and hard about what it's gonna mean for the project and I think it's an incredibly It means that, for example, there's a lot of people who would like to use Svelte for their own products, and they haven't been able to because there's the like they're worried that a project without any is just gonna disappear. And some of those people are now starting to turn around and say, well okay, it has a full-time engineer, Vercel is clearly excited about Svelte and is investing real it's not just me, you've also hired Steph Dietz to work on the developer relations team. And for all of these reasons, the project just feels like and so this is kinda a Companies feel that In many cases, their engineers and so now they're able to do that. They can start advertising jobs to work on Svelte projects, which means that Svelte developers can start getting those jobs. It means that people can knowing that they're likely to be able to get hired as a Svelte developer. And so because of all of those things, the community is likely to grow. We're gonna get a better idea of what the community needs, we're gonna get more people contributing, other parts of the ecosystem, component libraries, all of that stuff, and so to me it just feels like the beginning of this very virtuous cycle. Svelte was already growing very quickly, but I think this is quite considerably. - Your point about hiring and jobs, I think really hits home for me, coming from the React community, because I know that I saw, back towards the beginning of React when it was on that massive growth trend, then the next phase in it's being adopted at then these companies start putting out job postings 'cause they wanna hired React developers. So now it's attractive and to the potential employees, so those potential employees in the community are learning React 'cause they wanna get it's like this cyclical hiring beast of what takes technology from maybe a fringe thing to mainstream or widely adopted. I think that's a really great point for jumping into that next you see, I just saw you like Facebook was using Svelte for one of their sites, which is pretty incredible. And that's the one thing is even though they or Meta is that they've created React, is that they still like to experiment and choose different technologies where it makes sense. So, you start to see so they might be hiring to work on that project, you don't really know. And that's like that next phase of growth which I think is super exciting. - Yeah, my tongue was slightly in my cheek when I tweeted that because it was an outside agency that developed that page. I don't think that Meta is but we do see this. We do see that a lot of are using Svelte for these small, either marketing sites or internal dashboard type stuff. So, it is getting a but I've lost count of I've heard people say, me and my team we wanna use Svelte, but our PM or our CTO, and that I think is probably, we're about to start to see that changing. - So, we already touched kind of on the backing side of that and what it means to have you as a full-time maintainer, to have company support. How else would you kind of sell the vision to the CTO or the senior leadership on, you should go all in - Yeah, I've never been I prefer to let the work speak for itself, but I think what I would say is that it kind of doesn't matter what you're building, your comparative advantage by how fast you can ship stuff. And SvelteKit will let That is what it boils down to. So there's, I mean there's levels to this. I believe that moving from React to Svelte will allow you to write stuff faster. It's like we have a whole thesis about how Svelte is a UI language that is designed explicitly for solving this problem and it allows you to write But even leaving that aside, if you move from rolling your own application structure around a component framework, you're gonna be doing a and you're gonna have all of these undocumented bits and pieces and it's one of these things that's gonna succumb to bit rot over time. If you, instead of starting at the component framework level, start at the application framework level, be that Next or Nuxt or SvelteKit, then immediately, you've of maintenance off your plate. And so you can start building stuff much, much quicker with one of those frameworks. And so, in the, I don't know, on the ladder of abstraction access and the framework productivity access, Svelte is up here and and all these things are up here, and so the sweet spot is up there. And so that is, I guess - I mean, you have to get into sales now. That was a good pitch, I'm sold. I'm gonna rewrite my personal site to use SvelteKit. I'd love to dive a little bit further into thinking towards 'cause I've paid attention I know that with 3.0 I believe, you kind of rethought reactivity. So I'd love to hear you what is your master plan for Svelte and what you and the core team think about maybe the next year or maybe years into the future on how we progress the framework forward. - Yeah, so we are probably a new major version. Svelte 1, was November 2016, Svelte 2 was April 2018, Svelte 3 was April 2019. So I've had this like a year to a year and a half cadence, and it's been, let me see, almost two and a half years since Svelte 3 came out. And we have a lot of ideas for Svelte 4, most of which, I don't know, I'm slightly hesitant to make any promises or to give too much of like a bullet point list of features because all of this stuff is stuff that could potentially change, but the kinds of conversations that we're having are things like a lot of JavaScript tooling is being rewritten in Rust at the moment, and maybe it would make sense if the Svelte compiler One of the things that is the fact that because we compile your UI code to vanilla JavaScript, there's, like if you're then the scale of, like I don't know, here's your number of components and here's your byte size, the trajectory is steeper with Svelte than it is with some other frameworks, even though it starts lower down here, than something that starts here, there's this inflection point. And that is not something in most real-world situations, because of code splitting and because the inflection But nonetheless, it's a thing that people sometimes have concerns about. We think we have a different approach to compiling your components that will not just eliminate that problem, it could actually mean that the compile code is smaller than the input code, which I think would be fairly unique. And some nice consequences of that way of thinking about things is it potentially opens the door to error boundaries and something vaguely similar to suspense, so these are the kinds of things that we're thinking about. Also, React Server Components obviously is hugely interesting. There's been a lot of excitement around various different and once the dust settles a little bit, we'll probably start thinking about what those could look like. Finally, I really want us to think deeply about motion. This is something that Svelte We have these declarative transitions when an element is added to the DOM or removed from the DOM, like we won't yank the element we can play a transition on it so that you get graceful fly in, fly out behavior. We also have primitives for adding other forms of motion to elements that are already mounted. I look at some of the examples on, for example, Framer Motion, which is this React framework for producing animated layouts. I look at those examples and I think that if a framework treated that stuff as its domain, then you could do some with very minimal effort. And so that's another - Yeah, where do you draw the line on what is in a core library, or part of the core fundamentals of what you include Svelte? You have transitions or animations, even with Svelte Cubed being like a tangentially related project for 3D, 'cause I think the inverse of that, maybe is the React ecosystem, at least at the start where it was kind of a la carte, pick your own state management, pick your own whatever, and then we now have like a Next that picks a lot but where personally kinda do you think, maybe not, it doesn't even but what do you feel like is the threshold or cutoff between, this and this is community-driven? - Yeah, it's difficult. It's definitely a matter of judgment, and doing things the React way is kind of a blessing and a curse. It's a blessing in that it means that, you're sort of forced to create these very extensible primitives and instead of having the ability to work on these things locked up inside the team that contributes the entire community can solve problems like motion and so on. But at the same time, some things are just really, And as a developer using React, how do you add styles to your app? It's true that you have all of these different options, it's true that by leaving we've had a lot of but it's also the case that if you're starting a React app today, there is no one answer for this very simple question that every single developer has to answer every single time they build a web app, how do I add CSS to my project? If you think about it, it's kinda crazy that that's the case. We don't think of Svelte as a JavaScript framework, we think of it as a web framework, and by any reasonable definition, React is not a web framework, it is a JavaScript framework. And so I guess our definition of what is included in is a little bit more expansive than some other frameworks. CSS is obviously a good example, but I talked about motion primitives and transitions and things like that. In some cases, it's included in our vision of the framework because it's stuff that that it just makes sense for it to be in the same place. In other cases, it's there because it's just hard to do in UserLAnd. Transitions are an example of that. It's really hard to or to the framework, actually, don't remove because I wanna fade it out first. It's just much easier if you do that within the framework. And so I don't have a hard but that's kinda how we Because we are this and because everything is sort of being created in a world where we can rely on tree shaking and things like that. We can afford to be pretty generous about what gets included, knowing that if someone doesn't use it, they're not gonna pay for it. That is kind of our North Star, is like, is adding this feature gonna penalize the people who aren't gonna use it, and in almost every case so we can add pretty - Yeah, your comments really resonated with me learning React and then also learning Svelte, because in the React the paradox of choice. You have so many choices, how do you know which one to pick? Even when I recommend to or Next.js ecosystem, they want a single recommendation. They don't want options They just want at least, what's the best option that's gonna give me with the least amount of trade-offs? Now, there might be but for getting started, just give me the overall best choice, so that was something I appreciated when I started diving into Svelte and actually trying to Specifically on SvelteKit, I'd love to know more about when do you feel like a 1.0 is ready, is it around stability of the framework? Is it around certain or maybe something else? - It is mostly around stability. So there are people building production apps with SvelteKit today, because you cannot tell It turns out that as long people will just build stuff, and they'll be like, it's okay, if stuff changes, then we will update the app, it's fine, we're just gonna use this to build our company with, and more power to them. But we're not yet at a position where we would say to the that that's what they should be doing. And so 1.0 is the point at which we're confident that there aren't gonna be any significant, or at least, I mean, I guess you wanna take the 1.0 means that we're not gonna have any breaking API changes until 2.0. And so I wouldn't say 1.0 is when SvelteKit is We have this very long list of ideas of things that we can but there're things that in a non-breaking way after this first stable version ships. So things like built-in So you can do with the SvelteKit app, but it's, you're gonna have to do a lot of work, and we think that that should be a first-class concern of the framework. And so that is something that is gonna take a lot of design work, it's gonna take a lot of consultation, and so we're not gonna be able to get that in for 1.0, but for 2.0 or for 1.X, definitely. And so we're trying to limit the scope to a manageable amount, because people are and they want 1.0 to get out the door, and so we're kind of looking at how soon we can get that out the door. - From the Vercel perspective, I'm really excited it aligns with a lot and messaging that we've and educating developers which is the framework And I think specifically what I'm really excited about too is some of the features that we have historically built, starting with Next.js, to explore what that would look like, and then expand it to all frameworks on the Vercel platform. I'm really excited to help to the Svelte ecosystem as well too, specifically things like Next.js Live, which is still in beta, but I'm really excited to what a Svelte Live could look like where you can collaborate in the browser with a SvelteKit project and have your whole team or even Vercel Analytics for SvelteKit, like being able to get for the performance of your SvelteKit app, just without having to configure anything, it kinda just works, I'm really excited for that. I would love to hear about, not necessarily just Vercel, but thinking about how that thinks about the or is trying to optimize for running code as close to your customers as possible. How does that play into and some of the decisions that you make for maybe what you include or what you don't include? - Yeah, so this was the reason that we kind of abandoned it's a project called Sapper, and started working on SvelteKit, was that there's this that's been gathering pace over the last two years. Sapper was very much like Next, you could either run a Node server or you could bake out a static site, and then Next started where some pages were pre-rendered and some pages were rendered on demand. And then when everyone edge stuff is like, well, clearly, a Node versus static solution is not gonna cut anymore, and so day one is like, how can we build this framework in such a way that it is going to work on any of the platforms that exist today but also future platforms And what we've come up with is, it's a slightly, like if I were to diagram it, it's a slightly complex build process, but the output of it is a few bundles of JavaScript that don't really care and then you apply what And an adapter could turn so that you can run it inside a container on Google Cloud Run or You can also generate a fully static site, just bake it out as HTML as before, but you can also run the which right now, turns What I'm working on number one is, allowing adapters to have separate functions per page, so if you've got, I don't know, your blog post page, that's a single function. So that's one part, which is, it's a pretty interesting I think I'm close but it's, we'll see. Check back on that statement The other half is getting it to work with the new Vercel File System API. So we support the version one version two is gonna allow us to take those individual functions that we're generating for the different parts of the app and map them to functions And that is gonna mean that if you're building an app with SvelteKit, even if it gets absolutely huge, then a user in some is gonna hit an edge and it's gonna run just the code necessary to handle that specific request and then it's gonna come back to them. And in many cases, the the page will be pre-rendered anyway, because that's a very easy and this is kinda where we think that all of this stuff is going. You build your app in one you have this sort of cohesive code base that isn't tied to any one platform, and then, depending on how it will optimize the experience for users based on And in the case of Vercel where we have this global CDN and we have this global edge network, we can really push that And I've lost track of but that's how we're - It's fascinating to me because on, stepping back a little bit, watching that trend away from Node and towards edge-first frameworks, you see it from Vercel, you see it from Cloudflare, you see it from Remix, Deno, like there's so many people in this space who are thinking about this. And it's really fascinating because for my perspective, a lot of the major browsers have now standardized on a common set of APIs, a common set of specifications. The compatibility between them is better than it's ever been before, and you combine that with more readily available that's based on V8 run if you wanna call it that, and it makes it so much more feasible to actually do this. I think if we would've talked about this, five or 10 years ago, I would've said, that sounds great but it isn't really fully feasible yet to do at a large scale, and it seems like we finally kinda caught up to that point, and I think one of the that's fascinating to me that didn't really click for me in the Next.js world was the individual functions per route. I never really thought about that from a resiliency standpoint, but when I was learning more about the hybrid approach with Next.js, it was like okay, my home page is static, and then the about page, it has a single bundle for that page. So if for some reason, a push code that threw an exception inside of the about page, it actually doesn't take down my home page 'cause it's a separate or it doesn't take down any that might have individual and I never really until it was explained, I'm like oh yeah, that actually, that makes a lot of sense, that's really good for And then your other point you made about then using the file system API that Vercel provides which is essentially a standardized output that as a framework author, you can output your format or output your files too to take best use of the primitives, in the structure primitives that our platform provides. The combination of that with edge functions is because on the DevRel side, when I've talked to I often have to give a caveat, I often have to give a, this is gonna work great, except you might run into and those couple gotchas are actually pretty annoying and can be difficult sometimes. Like if you're trying to, if you hit the connection pooling problem or if you hit the, a cold start problem, it's like okay, that's actually kind of annoying and I wish I didn't One of the things that excites me a lot about edge functions, is it helps provide these that are faster and eliminate It's not perfect, but it helps give developers a really solid option. - Yeah, the problem with that I've become more aware of recently is that if you do break your app into multiple functions for the different parts of your app, then you're actually increasing 'cause it's now much less likely that someone is gonna hit a warmed up version of your Lambda. And so there's this inherent trade-off that you just don't have So I'm pretty excited about how that work is shaping up, and I think it's gonna - Well to kind of start to wrap things up, I wanted to shift gears a little bit and just talk maybe a about open source, because we've talked it's exciting that you're getting to work on Svelte full-time, it's not necessarily just a side project or a side gig anymore, you're not juggling two full-time jobs. I'm curious your take on how we can solve the problem of funding open source, and obviously there's probably not one good answer here. But maybe to make it more tangible, what do you think companies like Vercel that have venture funding can be doing, like sponsoring open source libraries, and what do you think companies that are very large, the top 100 companies I won't even name specifics, how can they distribute funds to support the software that their platforms rely on? - Yeah, I mean I do not have like a sound bite answer to this because it is such a I've spent a lot of time thinking about this over the years and I haven't come up with I will say that the situation that I'm in right now, this feels like the ideal open source funding scenario. Because the limiting factor wasn't money, it was time. And now, with Vercel's backing, that is much less of an issue because I'm working on it full-time. But it's also not, it doesn't feel like a PR thing. Like often, when companies announce that they're backing open source projects, there's a little bit But this is like it's for Svelte to be a better project. And so I think where it's to directly hire the people who are working on open source, then I think that is As long as open source to particular companies' agendas, then that is the route And Vercel has done this like Tobias from webpack two recent examples. But how you get to that point, for projects that don't or for projects that don't yet have the recognition that would make it logical for a company like Vercel to hire someone, I don't know. There are some cases where, maintainers don't have full-time jobs and receiving funding would allow them to spend more time on the project because they're not or whatever they would be doing. But in other cases, that's not the case, like the money isn't a limiting factor. And I don't know, there is really no for this problem. - It's a really great emphasizing, in a world where we could throw millions of dollars at all these projects, that doesn't necessarily Because like you mentioned, you're a great example, it's not like if you had more money to work on Svelte, it would just immediately give you 48 hours in the day to do all of your two full-time jobs. Time was the limiting factor. But how do you quantify that or how do you signal that when you say hey, I have you can sponsor it, but that's not really actually I need to almost like sponsor like a PM to help me manage the so I can get more work done, like maybe there's a world where, I don't know if that's like a foundation or something, if a project gets to that stage, where it's like there's a body of people that are helping shape that alleviates, or it to the person who was maintaining it. - Yeah, I think there are that could benefit from a PM, and if, I don't know, maybe there's a model where someone acts as a PM to a variety of open source projects, and I think that the OpenJS Foundation has some version of this. I would need to better understand it, but the biggest problem that a lot of open source projects have is just being able to triage and I think if you had someone who wasn't responsible who could take on the okay, these are the things that are the highest priority items this week, I think that would probably go a long way towards helping a lot of those projects. Again, it's not a one-size-fits-all, but, and many projects want someone from outside the core team to be setting priorities, but maybe that's a model that could work. - Yeah, 'cause successful at a large scale, before they maybe have company backing or have some larger backing, the founder or the lead maintainer of that is almost functioning like They're doing multiple job, they're doing product, marketing, engineering, tech leading the project per se, PMing the different areas, and then they have to effectively scale that outside of themselves and delegate different or to maybe open community marketing on how we talk about this thing, here's how our community or we have this Discord where everybody talks so yeah, that is really interesting. To kinda go back to your point too about, I think there, something that we didn't but a general confusion on why would Vercel have an interest in bringing on Svelte? Because I think there's this feeling that there's some inherent competition between a SvelteKit and a Next that it's a winner take all thing. And I think the message that I would like to get out there is like, it's not like a zero-sum game. When Svelte wins, Next.js wins too, and they get better together, and that probably sounds like, I don't want that to come off as like, some happy-go-lucky, I don't know, I truly and genuinely mean that because the best ideas from one, ultimately end up bringing up the ecosystem as a whole. So I tweeted about this earlier today, but it's interesting that in the dev tool space at large, really all developers win. When Svelte wins, when Svelte succeeds, when the SvelteKit API has an impact on the ecosystem, that's gonna impact the React ecosystem and maybe change how we design some APIs or how we do some things in Next.js, and that goes all the way down from, it actually starts at the language level, and down to frameworks, the individual pieces we use for bundling or minification or So, just from Vercel's standpoint and from our interest in Svelte, it actually makes a ton of sense when you view it not as a zero-sum game but as uplifting the entire web ecosystem, because we have a vested interest in seeing Svelte succeed because it means that and that's kind of, especially for me in the DevRel position, that's kind of my core mission is to help educate developers and help them succeed with or the tools that we recommend. - Yeah, and then in the case of SvelteKit and Next in particular, they've always been kind of like SvelteKit is very overtly based on some of the ideas that Next pioneered, but that's also gone the other way. We added this form of where you could have dynamic parameters written into the file name, and then Next looked at that and said, we'll have that, because Tim and I have had We just have a higher And so yeah, I haven't thought of the two not that it makes sense to talk about a project with a million downloads a week and a project with a few tens of as competitors in the first place, but they've always been, to me, rowing in the same direction. - Yeah, absolutely. Well, thank you for taking the time today to chat and talk about all this. It's been fun just to kinda hang out. I'm really excited that you're at Vercel and that we get to talk more, I definitely learned some and about the future of Svelte, and yeah, thank you again. - Thanks.