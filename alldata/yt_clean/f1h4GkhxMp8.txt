Welcome back everyone, Dan Vagie here, spring security login form with Java Now, I've been doing a bunch of videos on spring initializer, and I think it's a So if you're unfamiliar with it or want playlist in the description below. One of the questions I got was, hey, this security? And the answer is yes, because at the end objects or, types or principles or authorization and send that down to the model. So we can make that available to the We can display a username, an email, get of those things we can do right in our So we're going to build out a fun example the things that, like a starter that I application with. So I think this will be a really good point for you to kind of kick off your means, but we'll definitely give you a starting head over to the browser. We'll take a look at the example we'll go through and build it together. All right. So here screen. So this is not secured. So you can come to this screen. want on your home screen. And then we can go ahead and click the sign in screen. So you can sign in a few different ways. You can I'm going to go ahead and do that. So admin and admin sign in. And you see that it's taking me to this dashboard. So the authenticated to go ahead and view this. We also see that it username. In other cases, maybe an email address. And then it has username and the roles. In this case, the spring security log out. We can come back and log in. And we also with Google or GitHub. You can add other authentication go ahead and log in as Google. I'll log in with my main Danviga continue. And now I'm logged in. So now I'm logged in and I have my address. And these are the different roles that I have been awarded. time and I'll go ahead and log in as GitHub. And again, have. So I think this is pretty exciting. This is a nice sign -in it. I'll show you how I can I put this together really quickly. point for your applications. If you're using JT, if place to get started. I will also leave a link in the repository, SpringBood OAuth demo. It has some information about prerequisites, kind of a quick start. You will have to want to just get started quickly, you could hardcode these in the it also has some information on how to go ahead and set up those Google, you need to go to like Google's cloud council, go in there out those credentials. And then it also gives you running this locally. The authorized JavaScript origin is Local want to put in the redirect URI. So those are one for GitHub OAuth set up as well. Then once you do that, we can come into I'm using an environment variable there. If you want please do not check that in. That's why I like to get environment variable, so I don't make sure I don't check those really good at, hey, I'm not going to allow you to push in there. Then we have some project structure, key troubleshoot if you're having some issues. I'll bring this one up too. Again, that that would have prevented me a while ago from doing but man, I just don't do it every day. I have enough skills to be that stuff. Now with AI out there, I went in there and I said, email address and a password with options for Google and because it's trained on the internet. It has a whole bunch of tailwind login form can look like. And so what we got out of really nice and gives me a starting point. Now, I don't have to something that is ready to go. So with that, we are going to start .Spring .I .O. We're going to pick Java Maven. We're Boot. I'm going to fill this in, that, oops, dev.! We'll call this Oath demo, right? I'll put this in a main package, and I'm using to be on at least JDK17. So I'm going to build a web application. I'm again, you can use different template engines groovy, Apache, mustache. JTE was so I've been playing around with that lately. So I'll to choose Spring Security. And finally, you also This is integration for Spring Securities OAuth 2, Open ID allow us to kind of plug in those Google and GitHub credentials. With that, click this generate button. it will download a zip file. You can open most productive in. For me, that's going to be I think we have everything we need. Let's write some Now I'm going to try something a little different today. There for us to code along together. In this instance, I have a lot and paste it in and we'll walk through it together. The code is all pull that later or give this to try yourself. but I don't find a lot of value in like together. Let me know what you think. If you want little bit more, I'm happy to do that, but I figured I we'll just walk through on how I kind of put this together. So screen here so you can see all of the code. And I think a good place So we're going to go ahead and say security config. This is class. We're going to to mark this with at configuration, That will give us our security config. So the first thing you past when we want to go ahead and override the default security new bean, and this is going to be of type security chain and we'll call this security. filter chain. We'll take in our HTTP then what we'll end up doing is returning. So we'll return. Actually, and set that up and then let's see. So let me, I'm going to copy this. And we'll just kind of walk through what this does. So let me do we need to add an exception here. And this will be do is authorize HTTP requests. What we're saying here is we're going to permit all. We're allowed to go ahead need to be authenticated to view. So this will be the dashboard. was that hidden template that you needed our form login because we're defining a custom login is at slash login. Default success URL means when we log in forward us to the dashboard. And we can permit all on those. Next is That is the username and password. Oath2 login is Google and Again, that's going to be at slash login. of slash dashboard. We're also going to have a logout we're just sending you back to the home And that's our security for this. We'll You could do this in application .e .m. I'm going to do this this in a real world app, but we just need a single user for this that here. So we're defining a user named is an in -memory user. We go ahead and set that up. So now we've security settings. We have our own security. We are in a good place create a new controller called, let's start with the login class. And we're going to define a couple things here. So first to have basically two mappings in here. We're this is going to be, oh, I'm sorry, login. And this is going the end of the this just returns the page that we're So that will be a template. That will be a We'll also go ahead and set up a simple controller, but it's okay for today. So I'll say that and this is home and So that looks good so far. Now we haven't that's okay. We're going to set up some JTE templates. file. Again, I've done this in previous This is given to me by the documentation to put a dot JTE root file in the root of So we'll go ahead and follow that new directory for layout. and I'm going to create a new directory So this will be our default layouts that And then each page will be like the home, So in layouts, I'm going to create In here, I'll paste some code. So we're going to be using the CSurf I also import content. This comes from. from a Java template engine. And this just says, hey, we're going to we're getting from one of the templates But this is wrapped around each of those So, so far so good. Let's go ahead and next create a home So this will be just that login screen or button. So we'll come in here and create a new We'll call this home .j .j .j. I'll paste some code in here. Again, we're using that default layout. We have some tail in code here. Again, I just generated this. I didn't write this myself. Welcome. There's a login button. That login button forwards to slash which, again, is going to be the template And so let's go ahead and create this. This is where it gets a little So let's go ahead and create login .jt Pase this in and talk through this. So we have our error and our error This is something we're going to check we want to actually display that on the Are they logged out? No. Here's a login message, which is null. And then again, our C -Surf token. So we're using that default layout. We have this sign -in to your account. If there's an error, we're going to If there's a logout, we can display it. But I think we just actually send them But if you wanted to display a lot of. log out message you could here. And then we have our login form. So we're checking if that C -Surf is not If it's not, we want to go ahead and We have our username and our password So we'll fill those in. A button to submit. So that will sign us in. And then we have our Oath2 buttons. Or you can continue with. And then we have one for Google and we And again, I kind of generated that from So I have that from AI.! that nice form. So those are going to is, again, part of Spring Security and the OAuth2 actually sending that to. We're sending that over to OAuth2 be everything we need for our login form. Now, to get some of got to do a couple things. So I'm going to come back to this And I'm going to replace this with some And all we're doing here now is we're We have the model. These are supplied to And then we have this error for a string So if the error is not equal to null, of those attributes, right? We want to say that there is an error and Now, this could be more detailed, but for username. your password. Same thing for the logout. we're trying to get that from the request. If to the model so that it's used in our templates. And then onto the pages login. So I think we have one more template to dashboard. Again, this is the dashboard where you're going to be sent So you have to be authenticated. So that. And we have a username which is blank, an granted authorities. So this could be something like simple authorities and this is equal to null. Once we are logged in and we pass those use those. Again, we haven't built out this second. So we're using that default layout. We username. We are displaying email if it's And then we have this form to log out. button just logs us out and default sends Then we have some user information where And then we can display the roles. So that authorities is a collection. We authorities. And then we'll just get the had a bunch of different authorities. We display each one. And then if the email is and display the email. So that's our dashboard controller. And we can go ahead say dashboard. controller. And this is going to be a for this. So this is Git mapping slash return a string. We'll call this take in authentication. This is going to call this request. And then the model right. And then at the end of the day, dashboard. But as you remember, we had how can we get all of that information we One was email. One was authorities. But authentication, we are sending different. different information into that template. authentication. So if authentication is not equal to know and authenticated. Now we know we're authenticated so we can get the authentication. Get principle. And now what I can do is do a little instance, I'm going to have a user details object. That is if you log in instance, I'm going to have an oath two user. And again, those have for. So what I want to do here is basically use pattern matching to say if We'll say user details. So before pattern matching, we had to to it. We can do that all in one right So if it's that, I'm just going to copy We're going to add a couple of attributes can say userdetails .kit username. And the authorities is user details is an instance of the oath two user. We can call that oath two user. Then we a couple different things, but we're attributes. So we're going to say, oops, let's do OAuth2 user. . Git attribute name. The email is going authorities is get authorities. So now we have all that want to do in the dashboard is again assign that CSIRF token because log out form actually uses that. And then I think we're done with the So I think the only thing left to do is I'm going to delete this in favor of I find like when I have a lot of stuff to little easier. But you can certainly do this in Dot properties. So I'm going to go ahead and copy this in So this is our application name. For registrations. We have one for Google. We have one for Here is the client ID and the client secret. This is what again, that information is in the readme, so you can go figure out how environment variable. If you don't want to have to do that, you say, environment variable right here we can bunch of those in here and set those values so they're not hard Or again, if you just want to get this up go ahead and hard code this in here, but don't check This is for Java Templin Engine and then Logging level org, spring framework, info on things that are going wrong, a good way to do that is change this to And you get a lot more info in the what's going wrong. Okay, so I think we have everything we Again, I've done this before. I had it It should work, but let's see if it this. And our application started. Let's go So here is our main screen. Again, it's It's the home one. It has a login button. This is going to use the user details. So We're going to sign in and, oops, okay. I And actually, we have no information back to that in a second. I'm going to go ahead and click login. with Google and we'll continue and I'm see. Did I? Ah, I made a little mistake here. null. We want to check if it's not equal to Things happen. No big deal. Let's see if we can get this to work going to click login, admin, admin, admin, one, two, three. Ah, to like turn these off. Okay, let's log out. We won't try both of there we go. So there you have it. I thought that was I had a bunch of questions around Spring Security and Java taking whatever is in the request or in the controller, putting it in the model. So you can send the other. authorities down. You can go ahead and and check something, all the things that you could do can do here. So I thought this was a fun example to put together. but for me, this is a great starting point. So the next time I need that has a nice login form, that has OAuth2 support, I've right away. So if you think that's true too, please and let me know in the comments below if But hey, friends, I hope you learned together. If you did, you can do me a big favor. I favor. Leave me a thumbs up. Subscribe to the I'm