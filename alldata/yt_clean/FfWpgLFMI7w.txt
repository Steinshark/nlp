Alright guys, welcome to this Python game using the famous pi game library of Python to we are going to go really in depth into the spy And specifically, we will be learning a you haven't explored yet. And new parts of pi understanding game concepts like game loops and a game, or you have only created a very basic for you guys. So before we get started on all of and stuff like that, you should make sure that the obviously Python. So if Python is not installed, just go to python.org. And then click on downloads After downloading Python, we are going to be using of Python. So I'm going to be using pi charm. And although you have a 30 day trial, which you can it, just download the community version, which is version. But if you're using something like that's also fine, it won't matter. But if you want download pi charm. And thirdly, you can just have to be using to create our game. So you can just you can just have a look at what has been done and you know, just kind of get ideas. So let's Python, after you have downloaded pi jam, it everything installed, we need to make sure that just go to file, click on new project. And then already created the project and I'm calling it be creating, and probably have already played idea is that there is a ship at the bottom and by shooting a bullet. And every time you hit an come down. If it touches the spaceship, you lose. have shot. So that's the basic idea of the game. videos. So after you have created this project, we're just going to call it main because most Python file. And after that, we need to install open up your terminal by typing in cmd. And you for people who are not using pi charm, or you're terminal. But if you're using pi charm, what you would go to settings and in settings, you would given if you want to follow along called spacing over there you can see I've already installed installed, just go to this plus sign over here select it and click on Install package and this already installed pi game, so I'm not going to in by import pi game. And if this doesn't show your computer. So this is pretty much it. This was we're going to be doing a lot of cool stuff. our game, we are not going to go into theory and stuff and actually start creating a game. So we So as you can see, this pie chart has a window kind of a window in the next video with a cross And just to recap, what we did in the last we are going to be creating our first Python thing we need to do is import pi game into our this mean.py file, if you haven't just created import pi game. And then we need to initialize pi the other stuff that is inside this PI game what we need to do is just type in pi game.in create a new game. Just make sure you add this not going to work. So let me just add a little PI game. Alright, so after initialization, we have really easy. It's just one line of code. It's this is our variable. And we can just write pi inside this pygame module. And we need to access these brackets, we need to add another bracket. So inside it, otherwise, it's not going to work. why is it not working? It's because you haven't it is going to take in two values, the height and So I'm just going to give it for now a value of So this should be good. And let me just add a this properly. So this is all you need to create program that it has won me bad thing about it. So after a few seconds is just went away. Let me show it stays there for like one or two seconds, then program goes through these three lines, and then see that screen for a long time. Because it just And that's it. So one way to bypass that is just has problems. But just to show you guys that it sure that my task managers open because this task manager is also open. Because this will Hank just to show you guys, I'm going to run this there. But it is totally hand. So you can see the here. And this cross button is not working. Let me click on end task and it has been closed. Now why pressing this cross button? It is because we don't there is no way to quit the program. Our program to end and Windows make sure that that program functionality to our PI game game window. Just this window closes. So for that we are going to into events more a little bit later. But for right happening inside your game paint. By game window, being played. So anything happening inside that if you press arrow keys or anything on your and even when you press this close button, that the close button is actually known as a quit that we exit this loop when this close button is we are just going to create a variable, let's call true. And inside this while loop we are instead of loop, let's call it while running. And whenever we're just gonna turn the variable of running while loop. So if you don't know the basics of infinitely and when this value of true is turned going to go into much into that because that's after writing while running, what we need to do is inside our game window. So for that, we are going And then we are going to loop through all of window. How do you do that pygame makes it really then brackets and this makes sure that all of get into this pygame dot event dot gate. And then and one by one check. If this cross button has is being pressed, we'll just turn this while loop for event we're gonna check if the close button in if event dot type equals equals two, and then is quit or not. If it's great, then we're going this is pretty easy. So we have changed the value being pressed. And this close button is basically all of the events to find this create event. So bit later. But for right now, just understand this understand whether it's working or not. Let's see. initialized, it's giving us an error. It says pi is that we have misspelled This is not pygame dot that's pretty much it. So when you are dealing you write the correct one but small problem, we that this is working and our window is not going pretty good. Alright guys, let me just go through have created our screen, we have initialized our loop. So let's actually call it the game loop that says game loop. So this is an infinite loop, and the window doesn't close down. And we know we a play or something like that move a human being do stuff inside this while infinite loop which And we have implemented that close functionality of the events using this PI game dot event dot get events. So if more events are added, for example, that is also going to be looped in does pygame condition that if arrow key is pressed move For right now just understand, we looked at event change the running into false to make sure that I'm revealing a lot of stuff right now. But this to make sure that you guys understand it properly. video. In the next video, we are going to change So I'll really look forward to that. So right window is not cool. So we're going to look into So in the last video, we learn how to create this little bit not personalized, because it says pi the logo is not there. So in this video, we are So first thing is how to change the caption make it something say something like Space the logo of this window right now is like and how to change the background color of this but obviously very important when you're creating thing we're going to do is obviously just comment and look what's happening. So we're going to we are going to change the caption or the title you just write it by game dot display. Because we have to write in on display, and then dot the title of the window let's just call it creating. And then we are going to create the png image over here we are going to be using this you can get this image but before that, let me that this is also very easy. First of all, what that you can go to this website known as flat kind of icon so I've searched for spaceship and you can just click on Download collection and 32 pixels size. So whenever you're working the 32 into 32. I haven't experimented with 24 to go with 32 into 32 pixels. You can select icon and I just downloaded it into my project and Python program it's pretty easy Just type in icon an image, so we are going to be using the image we want the image to load. And then we just it's UFO dot png. So we are going to use that UFO we are going to use the same dot display that write that over here. And then just said, snort icon. So you can use that. And then you just that we have created. And this will make sure this and see if it's working or not. So as you Invaders is there. So this is looking pretty good, an image just icon over here and change the title third thing we need to learn is how to change the we need to use something known as screen dot fill. loop and over here we are going to write screen. our game window that you want to make sure that can be some text, it has to go inside this running change the color inside this running infinite dot fill. And then inside this, we're going to inside it. So there are two brackets, and then give it I'm going to explain what RGB is in just Right now, just to understand this RGB means is this world is made up of these three values. And that. So RGB basically stands for red, green, and values that you can use to basically implement any value goes from zero to 255. So you can make it a combination. So they say we want just a pure red green zero and blue zero. And similarly, if you and blue as zero now what if we wanted a light, to maybe like 150. So this will be a lighter basically. And just to show you guys a more better you haven't understood it properly, let's go to and go to any website. But I'm just going to go to these RGB values. So obviously, I told you red and so on. So let's go with this red color there are a lot more colors, you can even make values. So just experiment with it a little bit. are going to go back to our code and I'm going work even though we have tried, but this is not can see that it's not working, it's just a black known as update. So right now our display is not known as display update to make sure that if we updated inside this while running loop. So we for it after every game. So it's pi game dot display. it. So we have to add a couple of lines inside init line. And obviously you need to make a screen this init line. And the second line that's always want to update your screen because your players is to Amy's going to move moving the score is going display is always updating and by display I just this program. It means this screen variable. So it a shot. Let's click on Play and as you can see changed the title. We have changed the logo and I just wanted to show you guys that you can change a little bit more funky in the later videos right And that's pretty much it. So guys, I'll see finally adding images and our player that is maybe so I'll see you there where we are going to learn So in the last video, we learned how to add background screen of our game window. In this image to our game window, which is pretty cool and let's look at the player PNG which we are is kind of a spaceship which is shooting being you can just go to flat icon.com and download you want. But I'm just going to stick with this obviously search for arcade space over here. PNG and choose a 64 by 64 pixel. Obviously, you better if you already get the image of the size 64 pixel version. So I'm going to take that, and So after you have done that over here, then you But before we even start that, I just want to I wanted to discuss this because this 800 is the have said something wrong about this. In the and not the height and the 600 is the height. So you can think of this window as an x and y axis an X axis. And if you could go from top to bottom, comma zero, which is at the top left corner, the x value starts to increase. And on this top stands for width. And now if we go from top to value remains the same. So over here, the value don't understand it a lot, don't worry about it. basically x. and the value right now of this whole from top to bottom is 600. And the value at the middle, it's approximately 300. Not approximately because we want to place our image in a particular coordinates. Obviously, you can experiment with So let me just add a comment over here so that we we need to add the player image which is pretty logo. So let's just copy and paste this over here are going to give it the x and y axis. Where do create two more variables. Let's call this player And I'm going to go into why we give these values basically represents the coordinates that we want. value of 480. So why have we done that. So if we appear somewhere over here, which is exactly the at the starting of the game, at least we want appear in the lower half of this window. So the y is 600. If you guys remember this lower part, so can give it a value of about 480 or 450, whatever it 370 which is a little bit half less than half a little bit less than this, this is 370. Because If we give it exactly the value of 400 then it's given these values so you can see that the 370 is 600. Obviously when we change the values, you will feel free to change this values and see the effect a function and we are going to call it player. function. But let's just create a function for as screen dot blit. So grid basically means to our screen. And this screen is actually known as surface, which later I know I'm saying that but just understand that we are drawing this image this method known as dot blade. And dot blade the image, you also need to draw it on the screen. method. And over here, it requires two parameters So we are going to give it the image. And the So we are going to give it the coordinates of After this, we are going to call it I'm just think we should call this player, we want this we don't ever want this player to disappear. you guys are correct. So we are going to call this it and we're going to just call it over here, like after this screen dot fill method. Otherwise, think that is, this is because the screen is drawn player or a spaceship. If the opposite was true, skin, the screen, not the skin, but then it will always want it to be drawn after screen dot fill. to from there to over here somewhere. So that we be adding a lot of images and stuff. That's why just above everything, and all the other things so this is pretty much it. Let me just add another standard for RGB, and red, green, blue, just to is. Alright, so this is looking pretty good. And run it. And then we'll just go through all of this so as you can see, our image has appeared on the an image variable, we pointed out the x and y on the screen size that we gave over here. 806 me just close this one, the old one. All right. that is why we gave it the value of approximately value of let's say just to experiment, let's say close to right hand side, and we reloaded it. it appeared on the right hand side. So you can if we decrease it to, let's say about 30. I'm can understand the x and y positions clearly, side. So let's change it to back to about 370. 30 you will see that it appears on the top of the as we get go down, we are getting closer to that So let's get back to 480. And hopefully now you x and y axes. So anyways, after that we created that we drew this image onto the screen and y coordinates and then to make sure that this it to this wild game loop infinite loop. So guys, repeating a lot of things a lot of times that but hopefully you guys understood it properly. move this player from left hand side to right That's going to be really exciting. Let's wait In the last video, we learned how to add an image going to learn how to move this image left, right about the movement of an object inside our game it can be an text after you watch the 3d game in a game works. So just to make sure that you that you guys can understand what we are going or anything that you want. So obviously, we have is 800 wide, that is 800x axis, and then it's as y axis. And our spaceship currently is at that is the player x s ad 370 pixels. Now if we go move from over here to over here, we can just add this image will move in the right hand direction. so this five pixel will be added continuously, right hand side. So for example, we can add existing 370 pixels in a while loop, some kind of after every iteration of our loop. Similarly, we can just decrease some value from our 370 player x value and we will move towards the left we can subtract some y values. So currently, the y from this 480, it will move towards up direction downward direction. So adding and subtracting position of the object or in this case, patient to add it to a while loop because we want it to we need to add one thing before I can show x and player by or we how we can subtract it. So currently there is no way to manipulate the x and you didn't understand what I meant by this over the code, you'll understand what is happening and towards the right hand direction. Basically, if the image is moving, it will just seem like that the effect of persistence. In our eyes, we can't Like magicians do, they create illusions by moving in it tells us that the image hasn't been erased the image has moved on the right hand direction existing x coordinate. So anyways, we need to do player x and player y from the running y Lu. So and over here at x comma y, so that we can send want. And then instead of player x and player that we send to this player instead of the last y. Instead of that the new values that we send in drawn on the screen. So now we have to go back to over here, right now let's just write in player been no change. So let me just exit this first and that there has been no change because you're not now. So let's go through this once as to what's code, it creates the spaceship, then it takes the spaceship, and then there is this player exchange. then if we go down, we have created this function drawn on the screen. So this code hasn't been while running loop. But the program just sees then this player thing is called and it takes the it to this Deaf player function and it Inside this image is being drawn at this coordinate. running function. So for example, let's say we this let's, let's increase continuously by five. won't be able to see the image moving towards the guys for the speed. So you can see how quickly it I'm just going to give it the value of 0.1. so see that it is moving in the right hand side So every time this while loop is running, the value is sent over here and this function player function. And a new image is basically drawn on removed. So for example, let's also just, let's print out the value of player x so that you guys our original value. So here, you can see it being right now. And let's actually try it to move it in give it a minus value of 0.1. So now we want to value, we want to decrease the value and move it this time, and hopefully, let's just remove the it. So now let's play it. And you can see it's if we do instead of the x coordinate, we do the y towards the up direction. So let's reload it. towards the up direction. And similarly if we you guys understood the mechanics of a movement of happening? Why is when when we are decreasing, the the value of y coordinate is 600. So if we it's about 480. And if we decrease it more, it's if we increase it, it's gonna go below more there are some, some fallacies with this system. and you will be able to see that it just goes of things. First, we need to make sure that we can and the right hand direction using an arrow keys do is add a boundary so that the spaceship is just disappearing by going outside the game in the next and the coming videos. In the next support to our game. So basically, we are going to going to be really exciting. So I'll see you in And the last video we learned about the movement for example, if you do player y equals two the other direction. So if I run this man, you direction. But right now we don't have any way to our keyboard. And this is exactly what we will be that when we press a left arrow key on a keyboard, hand side. And when we press the right hand side the right hand side. So what is the algorithm check whether any each stroke is being pressed going to check whether the keystroke pressed is side arrow key. So we are going to do that. So just remove this over here, we don't need it. So So any keystroke that is pressed on a keyboard is that an event is anything that is happening inside example, if we move a mouse, we click somewhere And similarly when we whenever we press any key So for example, every event gets logged inside all the events that are being stored inside it. let's say in the first iteration of this while 10th iteration. A keystroke is being pressed and dot get And we'll be able to loop through that. or not. So, inside this, I'm just going to write let me just add a comment so that you guys if key stroke, the stroke is pressed, check, what we'll be doing. Not keystroke or keystroke. keystroke. Can't get this feeling right. All keystroke is being pressed or not by gay makes which is pygame dot key down. So this basically or the right it can be alphabet, a even backspace being pressed. So first, we are going to do which we did inside this if condition. So we we'll just press this tab button over here. Let's loop. And now we are looping through all the type is equals equals to pi game dot key key down, on a computer. And now we have to check whether so this is also pretty easy. We just again because we want to find out the key that is being key left. And this will just check whether the key If that is the left arrow, it says for right now going to write again, I'm just going to copy and I'm just going to write right. And instead of Alright, so basically what this does is it checks whether the keystroke that is being pressed, to check when the keystroke is being released. when we remove our finger from that left arrow or the key up. So key down is pressing that key is basically releasing that press. So we're going equals equals to pi game dot key up. So hopefully then over here, we're just going to check if and then we are going to print something so from here. Let's copy this, paste this and we are right arrow key was pressed, so we can just copy over here, we're just gonna write key keystroke what is going on. And I want you to write this so that you guys know what's happening behind the here is going to do nothing. But on our print things. So let's press the left arrow key and see our window over here, and then we can press the is pressed. And when I remove my finger, it says pressing on a left arrow key if I keep pressing, keystroke has been released. And similarly if I pressed. But if I press any other key, it prints over here to let's say, a keystroke is pressed it also runs. So over here, we can just press the is pressed left arrow key is pressed and keystroke else, let's say enter, it just says a keystroke key. And that means that our keyboard strokes are going to create a new variable over here. And this want the X to move in right hand direction, value and we wanted to move on the left hand side I'm going to just call it over here create a new equals two and right now I'm going to give it a the left key is pressed, I want it to increase we're gonna change this 0.1 number, it basically to move. And in this case, it's spaceship, and we are going to change it later. And even in too slowly or too fast. But anyways, right, now we is pressed and increase the value when the right in our x, when we want the left arrow keys press, and it's called change, and we want to decrease arrow key is pressed, we want to increase this from over here. And when the key is released, is why we want the change to be zero when our going to paste this over here. So this is looking from here. And then we can just add this player so I'm just going to write here x plus equals whether we are adding over here because we have we are given it a positive value. So whenever so I'm just going to give you an example. Alright, properly. You might be thinking that why are we right, so let's say our current value is let's take our player x coordinate is five. And means equals to five plus, and then the value that value is minus 0.1. If the key left is activated, this arithmetic is processed, this will turn this will actually turn into five equals to then the addition is pretty, pretty obvious. So same just 0.1. And the value will be 5.1. So this need to worry about whether we are subtracting or over here, in this case, it smiles. So this should it is working. So let's activate it. And over is moving. And when we press the right arrow the keystroke, it is still moving. Why is that the so here the place x underscore change is 0.1. we don't want it to move, you can actually change is stopping. So let's try it again. Now when we the keystroke, the ship actually stops. So the speed is a little bit slow. So I'm going to our speed should be sufficiently well. So this is a higher value when we use the clock concept. But pretty good as patient is moving perfectly. And we checked whether any keystroke has been pressed pressed, then we increase or decrease the value key is present, we increase the value by 0.3. And sure that the player x coordinate stops changing. to make sure that the spaceship stops and doesn't over here which increases the value of player upon the value of this player x underscore change. video. If you have any queries please ask them video. In the next video, we are going to give space it's looking very lonely for a spaceship. any planets or any enemies. So it's thinking about happening with me, so we are going to give it a in the last video we learn how to move our hand The right hand side direction. And this But then I realized our spaceship is just left and when we go to the right. So why is this right border of the spaceship of our game we have said. And when it goes beyond this 800, restriction right now to the spaceship movement And similarly, when it moves to the left hand angles goes into minus territory, because this x go to negatives. And even it can go to minus so what we are going to do is that when it teaches it goes into negative stuff, we are going to condition. So we are going to basically tell our zero or less than zero, make sure it turns back we are going to tell our spaceship, if your x then I don't want you to go beyond it and change goes beyond 800, it's going to just delete itself quickly that the eyes won't see it. And it will So let's do that. That's right. And if condition here. And as I said, we are just going to write that is the x coordinate becomes less than zero, X to zero. And similarly if our let's write f l pixels. So why are we taking this 730 by 36 pixels we have to take into consideration the size size of the spaceship is 64 by 64 pixels. So the we are subtracting 64 from 800. And that means for example 800, then it will stop at this point here and not allow any part of spaceship to we are choosing this 736 pixel number, we we are just going to change the value of whenever two back to 730 6x coordinate. And this will mean actually but it's just deleting that spaceship and let's check this out. And hopefully it works well. you can see when I press the right arrow key it yourself and change the x coordinates just video is pretty long. And this video is pretty we're finally going to create an enemy The last video we learned how to create boundaries bounds. And this video we are going to give it image which looks like a happy Space Invader. It's spaceship. But anyways, let's get this icon from for Space Invaders. And I'm going to go with this and download the 64 by 64 picture as usual, and to our code and just like we did with a player, let's do that. Let's just copy this whole code and So we're gonna change everything to enemy so we enemy and then I'm just gonna copy and paste this paste everything and instead of the player dot png sure you rename the PNG file otherwise you tried anyways, so we need to also create this function So we're gonna paste this over here instead of else should come in the same. Let's format it to format everything properly if you have written what you can do is you can just press Ctrl, Alt, inside your code. So it's just Ctrl L. So as you make your code look good. So again, the command anyways, now that we have the function of the over here so that we can call the function while over here. And instead of the player x, let's just going to call enemy x. And instead of player y, right now you can see that the coordinates are the our spaceship. So let's see if it's overlapping let's actually check out why is that happening. we have not renamed this to enemy dot m g. So and then just reload it, and this should work on top of the spaceship, but he's not we want, we maybe in the middle, but on the top, so we can to change the enemy y to something else. Let's out and 50 looks pretty good. So let's see how and we have an enemy. But the problem it's very boring. So we're going to fix what I want is that this enemy should appear in it is going to appear again or in a game terms is different places, maybe on different x axis. update scale, and maybe in y should also appear and it's same over here. So you want it to appear Basically, we want it to appear in different it should not be constant, it should be totally going to make this enemy x and enemy y actually that actually helps us randomize values. So we this is pretty easy to do. So let me just minimize we are just going to write instead of 370, we're is a method inside the random package to choose have to give it the value that we want. So we want we want it to appear anywhere between zero and value of zero, and the end value of 800. And between maybe 50 and 150. So let's change this to height should be 50. And then it can go down over I'm going to give it a value of 150. Alright guys, it again and see if it works. So let's run main. let's reload it to see if it responds somewhere it appears. This time it appears over here. Let's always works. So this time it appears over here. created an enemy and it is responding in different the next video, we are going to make sure that our it's not moving from the left or the right and that we rectify that in the next video is going So in the last video, we created our enemy enemies so that when it gets destroyed and created can see when we reload our program is going to we are going to make sure that our enemy is moving now there is just when one enemy and we haven't problem. But imagine there are multiple enemies also when they hit the boundary they come a focusing on today. We are not going to be creating on the movement of this one single enemy and then right now just focus on one enemy. So what exactly Do we want. So what we wanted to do is move from this enemy will move in the right hand side. And pixels, it should change its direction and move the left hand side, then again when it hits that changes direction and move towards the right hand Now there is also a movement in the y direction. be right boundary or the left boundary, then it there are multiple enemies, and we are trying to game get over. So whenever these enemies hit the they are going to hit the spaceship as they are like in the classic Space Invaders, so we need to execute the Y movement, this always is going to the spaceship, and we are going to do the same we will just scroll up, let's minimize this over enemy is going to have the exchange as well as over here and also make sure that we add our we are going to give it the value of 0.3. Maybe also at the speed of an exchange of 0.3. Maybe I'm just going to give it a value of 0.3. No, I'm we haven't, we have just given it a value of zero its direction by typing in negative and positive, V is going to provide the value of 0.3 over here. the same thing that we did with our player. So hit the boundary, so this is the algorithm but it's pretty simple. So whenever it hits the whenever it gets greater than says 36, we make and this prevents the spaceship from going out of boundary. So we can do the same thing with our here. And instead of everywhere player, we're just So over here, also, let me just copy actually and sure that we save up some time, not a lot of time. I wish there was a quicker way to do it, but comment over here so that you guys can understand for boundaries of spaceship, so it doesn't go maybe enemy movement, enemy movement. And this we want is whenever a boundary is hit, we want it left boundary, we want to increase the value of direction. And similarly when it hits this right value of x. And this will keep on happening we are going to use the same arithmetic operation a little bit, you can see when we wanted to change the left, we gave it a value of minus and when a positive value of 0.3. And then we just added going to do the same thing over here. So instead do is we are going to write and meet exchange hits this left hand side that is zero coordinate, that is it should start increasing the x value. hand side we are going to change it to a minus and this should be enough guys. So actually, if I enemy x underscore change equals 0.3. We can leave really matter. Let's run it and see if it works. so that we don't get confused. And I'm just enemy will start moving. So you can see that the side. And actually, this looks pretty awesome. y direction is just moving in the x direction. boundary, it should move downwards. Or even if it bit downwards. So what I'm going to do is I'm change equals 240. So that we can move it down by we want it to move down when it hits the boundary, so we can just increase the value of y over here. write in me, y plus equals two, and then we want over here. And then we can do the same thing over here. So now let's just reload it and see how it it actually goes a little bit down. So you can boundary they are going down. So it's gonna be a all of them, but it's going to try its best. are going to give it our game over. And depending which we'll be creating mostly in the next video enemies he can eliminate with that bullet, the can kind of get the idea of the game with this today we are going to be learning about adding if we open up our space invader game, you we have in spaceship, but it's happening in the we need to add some kind of a space background I'm already downloaded an image of a background looks like this. So how did I get this image. So pic.com p ik and then free free pick.com. And spaceship background. Obviously, feel free to get get an image that's 800 to 600 pixels wide is that As you can see, we are made again window of this can choose any of these images. But the image that so free pick is a website was going to give you a to edit it out to make it your own. So I removed for example, this rocket, this text and stuff. illustrator, feel free to make a new image on if you're not able to get this image on your own or attach it somewhere so that you guys can text. So what I'm going to do is after we download make sure you do that, then we're just going to add images to our program is just by pygame dot going to add a comment, let's say and we are going And then I'm going to create a variable called that we did with the wrist. So I'm just going to I'm going to write background. So obviously my is of that size. So now that we have added it, because it just appears for a second and then we make it persist is by adding it to our while while loop over here and we are going to add it then this black color is going to be on top of our going to do is I'm just going to add another image, and we forgot the B's. So let's add B and Just typical thing we do when we want to add an draw the background image and then we need the And then we need to add the coordinates of our left corner severe Going to add zero comma zero. main.py program, let's run main. And you will But the problem with a background and NP and very slowly. And why is this so? Pause this video But I'm just gonna explain it over here. So our 226 kB, so it's a little bit heavy. But what iteration of this while loop previously used to to load this hairy background image, the iteration bit more slow. So that is why whenever we are we are increasing the value of player, it is too just increasing the value by 0.3, which is very a lot. So what we are going to do is we are going I'm going to change the value of our enemies. enemies, I'm going to give it a value of let's little bit slower than aspasia. Because when they want them to appear like really, really fast. So still slow. Why is this happening? a spaceship slow. So let's see if somewhere our old values are value over here. So let's go up and see where enemy exchange is still 0.3. So we have to change reload it and you will be able to see that the the background image, we have our spaceship and bullets because we don't have the bullets right we are going to make our bullets or get started In this video, we are going to learn how to shoot see, I'm shooting a bullet and the enemy. So right haven't implemented a collision yet. But more we're just going to learn how to shoot a bullet. with the code, I just wanted to explain a couple is what's the starting position of the bullet. is at 370 pixel x coordinate approximately, but if we move left, it still shooting at the x where our spaceship is, the x coordinate of the our spaceship, just the starting positions. For if we move our spaceship, the bullet is not moving the bullet is equal to that of our spaceship. So that as we shoot the bullet, the bullets of y the value is 600 y coordinate, and as we go up the zero. So at the top, the y coordinate of y of a the value from about 480 pixels. So because this decrease it as we go towards the top. So right now the third thing I want to talk about before we go is the state of the bullet. So right now when But when you can see the bullet state is going on the screen. That is That means that we are you can see the bullet and that means the bullet firing period anything. So this is what it means. we write down the code. So let's get started is add an image of a bullet inside our project left hand side bullet dot png, and it kind of so you can just go to flat icon.com like we have you can just download this bullet from here. And and even through Google or something but make 32 pixels. This bullet is not the same as I'm sixth or seventh page of this flat icon.com and this image it doesn't make a lot of difference. sure it's 32 by 32 pixels. Let me just close the last video. So after adding the bullet dot So over here just below the enemy, we're just to create everything again. And instead of enemy, replace everything of our enemy with our bullets. going to copy and paste everything. So politics and some of these values we are not going to use. x direction. So using this x underscore change is over here just for this sake of conformity. we are going to give the value of zero bullet inside our while loop. But bullet y is going to be as you can see as clear why is at 480 pixels. be short. And so if I run this main program over And what's happening to her enemy, let's reload No. So as you can see, when we move, our spaceship shoot our bullet from its top of his nose, which have code and this 480 over here. And then we are bullet state. So this is the state I was talking a variable bullet state and we are going to give actually over here so that you guys remember what basically means you can't see the bullet on the Alright, so this is the state we are going to be the bullet is in motion or it's in a state of going to help us decide the movement dynamics of state equals ready and now we are going to create be called whenever we press our spacebar. So in is being fired, so that is what you want. And what happens when we press spacebar, we want this And we are going to do the same thing over here we below that, we are going to access this bullet our function. Now how do you do that, we need as global so that it can be accessed inside this call it state. And now we can access the value So after this, after we press space, the bullet on that screen. So we need to change the state of it's actually being fired currently in motion. appears on the screen. So I'm going to write on the screen. And then I'm going to write the we are going to write the coordinates of where do on x comma y the values that you are getting at x plus 16 and y plus 10. Why is that? So let me Ctrl Alt plus L if you're using pi charm to make Xpress 16 why plus 10. This is to make sure that if you don't do plus 16 is going to appear on bit. I've already tried it out. So that's why a is just make sure that it appears a little bit bullet being fired from the top of the nose and before we go into the while loop, I just want pulling is moving in the right direction. And We don't want the bullet to move this fast we want window now. And let's just go below and what we not an arrow key, if a keystroke or space on that fire underscore bullet function. So let's and paste this line. And then at the end, we can space. And this is going to make sure that we can you press a space, we want the Firebird function this. So right now we are going to give it why this is strong. But this is just like a logic but I'm gonna tell you why it's strong. And we it if event dot key pygame dot k underscore space run this right now and see how it looks. Obviously but we're gonna it's gonna look how it looks. So when we press the space, nothing is happening and if you speak, if you've seen yet near the haven't changed the name of our image. So let's go are going to call it bullet. I know when I was slide, you guys must have screamed that, hey, this no worries, we have changed the value. And if we the bullet over here. But it's actually appearing So actually, let me just change it to enemy It's happening behind the screen. So let me run the enemy is appearing at near the spaceship, you the bullet is also appearing. But right now you bullet dot png. To put a dot png so we need to and disappearing so quickly, what we need to do background. And when we need anything to persist right now this code is only being called when we and not disappear really really quickly. So we we're going to call this bullet movement bullet change the values and first check the maybe the when you press the spacebar, then the state always remains at ready. So as you can see that when we press the spacebar, the fire underscore the state changes to file. So outside over here we then we can actually move the bullet in front of So we're going to add some values and we're going and we're going to get rid of value of clear x, below this, we are going to decrease the value of of the video, minus plus minus equal minus equal run this program now and see if it works. So this y is going crazy. Let me just reload this what's see that the bullet is moving. But this this there one bullet. So you can see after we have fired one one problem. And the second problem is that when the bullet is moving with aspiration. Just to the bullet is going and when we move the spaceship So we will be solving both of these problems in give you a recap so that you guys can understand you press the spacebar, so when you press the this fire grid function is called. And over here player x and a bullet y value. The bullet y value movement where the spaceship is the x coordinate why the bullet is moving in the direction of the next video. So for right now we are calling this pressed, and we're transferring the value of unit function. Now this fire blade function is underscore to fire so that when we execute this finding firing the bullet and to find the ability blurting it out or drawing it on the screen. And to show you guys why we have changed the values, you guys can see the difference. So I'm just going you can see, the bullet is being shot a little be shot from the middle of the screen. That is why the from the middle of the screen to be exact. But function has been called the bridge state has infinite while loop which is running but it wasn't before pressing the spacebar, the bullet state executed. But after pressing the spacebar, the can put blade this out on the screen by calling start actually changing the location of the bullet the value of y. So guys, this was the logic of tackle the two problems that we have discussed The last video we learned how to shoot a with our program right now we can shoot only for the whole game has a pretty big problem. And following our spaceship doesn't matter where it have an individual path. So for example, we wanted point of our spaceship, the x coordinate our that bullet should continue on its original x these are two problems we are going to solve. multiple bullets. So for that, what we are going So right now, if you watch over here, when the and then we are not doing anything to a bullet. So we are not removing the bullet from our screen. the zero coordinate, we need to make sure that it it goes above zero coordinate, two things are pixels of y. And the second thing is because you has gone beyond zero y coordinate, we are going so that we can fire it the next time. So let me movement, which says if bullet y is less than be negative values. And over here we are going to state of the bullet that is the bullet Why should we need to change of the bullet state. So bullet sure that we don't misspell anything. And we are now let's reload it and you will be able to see see we are short one bullet, then we can shoot now that we have fixed the first problem, let's bullet is following our spaceship. So why is this we are still using the player x value. So if we go we are using the player x value. And even we are still using the player x value. So it's bullet to be at the spaceship that we just removed we want the bullet to be at the x coordinate the bullet starts from the spaceship and not we want to x coordinate of a bullet to be that we move after firing the spaceship, the x So that is the problem that we are having. So how the space player x value everywhere, which is just x coordinate just should be just saved. So we're we haven't used this variable yet. And we are And then instead of player x, we are going to send And we are going to do the same thing over here you're going to use the value of bullet x and main program again and see if it works. So this the bullet is not following our spaceship. So, pressed, then we are saved the current spaceship x we are using that everywhere instead of just using one more problem to fix, which I've just realized. the spacebar again, so for example, we press you press the spacebar multiple times this bullet to our spaceship. So multiple spacebar changes while the bullet is a moving condition, it's in press our spacebar, so we have to make sure that condition. So we're going to add a if condition let's add double quotes for the string. If fire another bullet, otherwise we can't fire the coordinate or our bullet is in ready state only play space, all the errors have been fixed. Except sometimes. Alright, so let's shoot. And you can and it resets to 40 y coordinate again, only then pretty good guys, we have finally completed the because there were a lot of complications in it recap so that you guys can understand everything perfectly, you guys can just stop this video. when you press the spacebar First, it checks If it's not on the screen, then it makes sure that just add a comment so that you guys can understand it gives the current x coordinate of the spaceship then it fires the bullet using this bullet X which we have said before that is 10 because we change its y value at every vile iteration at 10. function and over there it changes the state to changes its state to fire it goes to this while is fire, and it keeps on firing the bullet. If we then the bullet won't appear on the screen. So game needs to be included inside our while loop. loop. If this statement was not there, the bullet sure that the bullet is continuously appearing on after it fires a bullet it keeps on changing it happens that it goes above the screen. So is activated, and it resets the bullet to 480 y ready again. And then we can press the spacebar it's saved again the x coordinate of a spaceship that is pretty much it for this video. multiple enemies. So right now there is only or maybe depending upon what I want. And shoot this enemy. So right now this enemy is happening to him. So we are going to So in the last video, we created multiple we can shoot multiple bullets at the enemy and bullet during the whole game. But as you can see, not colliding and nothing is happening when the and the enemy is also at the same place. It's not video, we are going to learn about the collision collided. And that's a very important concept in just actually reload this game so that we can see going to be doing is we are going to calculating And if the distance is short enough, then we So the bullet has an X and Y coordinates where this enemy also has an X and Y coordinate, when it down. So we are going to use all of these four coordinate of our bullets and the y coordinates distance between them. So now what I want you between two coordinates. And we're gonna take you there is this equation, which says distance other objects squared plus y coordinate of one and then a square root of the whole thing. And at front because and by the end of the day, we are this in school or in college. But if you haven't, a little bit, you just need to execute this code don't understand what this is doing, we are going in Python. So that is going to be really helpful let's go back to our code, and just beneath this create a new function, and we're gonna call it is help us with define whether a collision between he's going to take four values, the x coordinate the x coordinate of the bullet, and similarly, going to create a variable known as distance, so bullet and our enemy. And how do we calculate so distance equals two, and then we're gonna any kind of mathematical operations, you need to I haven't imported math yet. So I'm just gonna And then First of all, we want to do the square math.sq Rt. So this is the basically the function apply some brackets. Now we need the Nv x and the the formula. But before we even that, we need to can see after the square root, the x two minus x that mathematical formula. So we're just gonna and then it requires two values, the x and the y. write comma two, because we want it to be squared, value of enemy x minus enemy y. Alright, so this of our equation, now we have to execute the second y one and two squared. So we are going to go is this part math.pi x two, and this is enemy, And then we are just going to write plus, and because we need another power and requires to two squared again. And then we just need to subtract y. And this should give us the value. Obviously, so we're going to apply another bracket but looks is math dot pow, we are doing x two minus x one or and then math.pa y two minus y one squared. So we are going to apply another bracket over here. not blunder Alright, so there is some problem apply a bracket over here instead of that, we are going to do is we are going to write an if then return us the value of true that is the of false. So we're going to write f condition and Save condition. We could have just return false you guys understood. All right, let's format in PI charm, make sure you press Ctrl Alt plus L you press Ctrl Alt plus L if you're using Python, so our escalation function is complete. we are going to scroll down, and we are going to just below this enemy x or even the politics, we for collision so that we know that we are we can just check whether a collision is happening collision and then I'm going to call this going to set the value of enemy x and y. And over we are manipulating the value of x and y of place to call this escalation function. So here we so this is looking good. So this is collision is the collision has occurred is going to store the so this is looking good. And then we're going you want us to do if the collision is occurring? what do we want after a collision has occurred. bullet to its starting point. So we are going the bullet is not being shown anymore, we want to change the state of the bullet to ready by writing thing we want to do is obviously increase the let's say, let's actually just go over here so the value of score equals to zero. All right, so scroll down, and over here, I'm going to write squared plus equals to one. So this will increase after that, we are just going to print out our screen. So now let's just run our program and going to run the main program. And over here, we if it hits, and I'm not a bad player, as you can hit it again. And as you can see, the score is the score is not increasing. So let's try all right, so the score is five. So what one is still on his current path. And it's not need to fix that. So what we are going to do is we the enemy x and the enemy by over here. So I'm declared the value of enemy x and y. So I'm just our F collision, obviously, like this code can all of this stuff that is happening over here. all the optimization classes and functions, we'll such a complicated program. But maybe we will. So enemy y will get restarted or respond to a default that is between zero to 800. And why is 50 to 150. basically gives a default position to the enemy. the mean again and see if it works. So let me just just going back to its new location. Alright, little bit down so that we know that our code so our game is responding properly, our enemies thing you might have noticed that when it comes to down. Even if you're trying it on your own. If an window of a window, it just goes down. So why is respond our enemy or just be when you're creating but inside our code we have written in over here you change its y value. So there will whenever 736 it's immediately going down without a chance over here when we are creating the enemy that 736 Just for safety, we are going to write 735. So also goes in when a collision has occurred. So I'm this looks good. We have also fixed an error. So look enemies responding properly. Let me just this is pretty much it for this video. In the multiple enemies. So right now there is only just play it really easy, and actually is pretty also playing. But anyway, guys, let me just recap So if you already understand the video, just not understood properly, so we have created a coordinates to off enemy coordinates and to have four coordinates in this formula, which we got this formula and then we try to execute this you shall start doing this man thought squad, we made the square root. And then inside this just like we have done in this formula x two minus we squared it and make sure that the brackets are the code, it might like it might you might mess this code properly, line by line. All right, all so you'll find it somewhere over there. And by the all the videos. So you can wait for it a little attachments or something. So math.pi and e x minus and then how this 27 network number came to be. So for distance between enemy and bullet to call I came on this number if the distance between I'm going to call it a collision. And then if and obviously we are calling this function over what do we want from a program, we first of all, the starting position of the spaceship and then ready because you can't see the bullet anymore. state is ready. And then we increase the score by sure that the enemy respond to its new location. to track back a little bit this is just a way to create a new enemy. Alright guys, that's pretty in the next video we are going to learn how to In this video, we are going to learn how to create we learned about how the collision system works. to respond to a new place, as well as increase enemies appear on a screen so for example, six store all of these six enemies in a list or an going to store all of the enemies in a list and going to happen so fast that it will look that on the screen. So we are going to turn all of you do that you simply copy the variable name an empty list. There is nothing inside this list inside this list. But we have to do it with all it with enemy x and then enemy y. So I'm gonna just copy everything first and then I'm going to the quickest way and then I'm just gonna copy and how do you add values inside a list so add values to a list is by using a method known going to use dot append over here. But even before num of enemies which stands for number of enemies to increase the number of enemies. So we are going this we are in a port number of enemies. So this of our enemies are gonna be created. Obviously you list that we have created of all the variables. we are going to write dot append. And this is So for example, the first enemy image is going to going to do all of this with all of the variables. change because these are like constant values, we are going to do it with all of them. I'm going to copy this dot append everywhere. So but the quickest way and that is what we want, practice after everyone so that there are no this is looking pretty well. So whenever our code and it's gonna create six number of enemies. you can see that we don't specify which enemy x are using for the enemy to move towards the left movement. But if we don't specify which enemy x we have declared six enemy x. And because we created an empty list. So each time this for loop enemy x and scientists and we x list. So we need enemy x we are talking about. So we are going to to do the same thing that we did over there number you just need to change every value over here to which value you're talking about. And this is a if you know less you probably already know about going to I this I bracket everywhere. So let me program knows which anyway we are talking about me just copy this everywhere. All right, this is sure that a collision is also inside our enemy. over here. And we are going to place this inside we calculate the collision for every let me just our collision is it's not inside our for loop but loop but make sure that it's not inside this it's not going to work a lot of people make this correctly or don't pace anything properly. So is probably inside our for loop we are also going we are going to make sure that our Python we are talking about. So let me just paste it good. We also need to make sure that we add talking about the enemy or the coalition, you coordinate or which enemy we are talking about. we are calling the enemies for example over here will basically blitting the enemy we also need to be plated. So right now it's not specifying for loop and make sure it's not post pasted inside indentations matter and then we are going to send coordinates we want to be printed on the screen. So if we go up to our enemy function over here we need to specify the value and also the which you will be thinking there's only one image but have created a list of enemy images too, so this is looking pretty good. I think almost and then we will figure out what we have to recap So let's play it and see if it works. Alright, six enemies and when we showed them so let's try so when we are shooting them, our collision is so this is looking pretty good. So how is Space Invaders come and hit the bottom of access then we are going to end the game so we right now there is no place where we are we are going to make sure that we display All right, guys, welcome back. So in the and our game is looking real, real good. So the being currently displayed on our game window. sure that the score appears on the top left so that is simple, we use a font object that is us create font or text on the screen. So the first we are going to actually remove the score variable we are going to just press enter and write score statement. And then right now we are going to going to give it a value of zero. And obviously, error with say a score plus one, we are doing value. And then we can remove the print statement now. And then we have to use the score object or You just create a variable known as font. And font is just the type of text or the style of the line often is, is actually dependent upon we are going to define what kind of font we want. font method that is inside pygame pygame dot font to give it two values. The first is which font Do which is known as free. cents bold. So right now the extension of the font. And then we are going a size of 32. And then after that we are going to this text to appear. So we want it to appear just attached the screen a little bit away from text text the x coordinate of 10 pixels, and then just like we did with these player player enemies, this score value on the screen. So let's do that going to call show score. Pretty easy stuff. And and Y value just like we have done with everything can see how we are plotting the image inside this the player on the screen, we are going to render what I mean by that. So we're going to create a write font dot render. And we're going to require by instead of bleeding, we are going to render the font object we have created over here we are now a couple of values the first value is what text Do score. And then we want the score value in front we have to convert it into a string. So right to use typecasting and inside this. So basically by writing str in front of it. This concept in programming This concept is known as type casting. then after that the second value is required is then the third value requires is what is the color color you want. Obviously, we have to use the RGB just going to use the white whether that is 255 is looking pretty good. Let me just format this screen and how do you show it on the screen. called render the text. And then we have to blit screen. That is why I said this is a little bit to break it on the screen. So we are going to use let me just copy this from here and paste it and So this time is not an image it's a font or a providing through this function. And now one we just have to go down and anything that you be called inside our while loop. So I'm just gonna and text y. Alright guys, so this is looking that it works. And hopefully it will run without left corner. And when we shoot someone, let me increasing. So let me just shoot a couple of more is looking pretty good. Our score is increasing created. So one last thing I want to tell you guys if we go to our fonts, so for example, here is pilot. So let me just close this, how do you add you can go to a website or something and download extension dot TTF. And you can just download this, write the name of the font. So for example, what d a font. And this gives a lot of fonts for free. want. And we're going to give you a zip file, just a dot TTF file, then paste that TTF file inside the name over here. And then you can use that And this transfer the font size. So let me just not that crazy. But as you can see the score has it small 32 pixels. Alright guys. So that's pretty first we create the score value, we added a font of the font where we want it to appear. And we rendered the font and then we blurted it or gave it three values, the score the true and the So let me just show it to you. Yes, RGB. So GB values are zero red and blue. And this should make green. But we want to invite color white, I think to 255 again. Alright, let me just give a space then the last thing we did was before changing the to make sure that the score value is increasing the second thing is we call the show on the score so in the next video, we are going to learn is not ending is just keep on going even if the is that the enemies are not moving very fast. a little bit in the next video. And we'll make Alright guys, welcome back. And hopefully going to learn about how to add sounds and music inside our game. So it looks pretty simple. to add three types of sounds. The first sound continuously in the background. The second is I call it laser dot wave. And the third to be produced when our laser bullet hits our I'm going to play this main dot Python file, you guys can see what's happening inside again. So you must have seen there are three sounds first on laser or the bullet sound. And the third is when these three files? Let me actually make sure that used. And now how do you get these three dot WAV you to go to github.com arthropod Space Invaders that I've written till now and along with it you talking about after downloading these three files by clicking on this clone or download and done to your project by going to Space Invader and just with adding background music into our game. So Known as a mixer from our pygame Library. And to import this mixer. And what does this mixer This kinds of music inside our game, whether it can that want. So you have to look inside this class music. And then just below this background, we write our comments. so that you guys can know in just going to use the mixer library by writing we want to load the file and then we are going to to write background dot WAV, which is the name of and then we're just gonna play this sound by And now we want this file to play continuously. inside this dot play, this file is going to play in a loop because this is a game and can go on for do you do that inside this mixer class, you just now let's just test it out and see whether it's music must be going on. But we haven't yet added be there. So that's why we are going to be working you guys to notice is that currently we are using played continuously in the background. So this for example our bullet sound then we have to use where we have a bullet shooting. So how are we released. So we are going to do that inside our is ready. So over here we can release the sound because over here we are getting the x coordinate bullet over here so we can somewhere over here at very easy. Just below this we are going to write dot music, it's mixer adult sound. And we're variable and call it bullet underscore sound just and makes a dot sound and inside this you have our case is laser dot WAV. And then just like we we're just gonna write bullets sound, not state be played inside a loop. That's why we haven't a sound now we just need to add a sound to our let me just copy this first and we are going to are going because this is pretty obvious we are sound p plate and that sound is off explosions. here because most of the things are going to explosion sound. And then I'm just going to copy laser dot wave we are going to go with explosion actually play our game one more time and see if Alright guys, so everything is looking really obviously Feel free to walk around and play add your own songs. That's going to be fun. In make sure that our game gets over when our enemy In the last video, we learn how to add sounds show the game over a screen. So I removed all of be difficult to explain what's going on if I add of these enemies come close to our spaceship these enemies or maybe just get them out of the like we are shown over here the score zero we here in the middle of the screen. And when is this close to the spaceship when they're gonna hit the top at zero pixel at the bottom is 600 pixel about 480 pixel, but just by experimenting, I that 440 pixel As a limit, so when our enemies for our player. And the final score is going to is we are going to come to our enemies where we down and come to enemy movement. So enemy we are just going to add a text. So let's add are going to be writing the game over code just an enemy lets enemy right, and whenever enemy doesn't need to be all of the enemies when one of just to test it out, I don't want the enemies to very small, maybe 200 pixels. And just when we are I'm going to change it again to 440 pixels. So then what we want to do, we want to move all loop for j n. And then we just want to copy the enemies out of the screen, that's how I'm big for loop. And then under this and is going to this should make sure that these enemies go below I'm gonna just make sure that we display I'm just going to create a function. And this And we are going to call this function and then we sure that we are not doing anything weird with the break. And this looks pretty good. So what we are all the enemies when one of the enemies reaches actually going to be 440. And then we are going to And we want each of the enemies to be moved out of y axis to 2000. It is not going to be shown on the function which is going to display the game over of this loop because we don't need this for i in over underscore test functions. So we are going to over here. So you can see we have added our score the same thing. And we are going to write game the same thing that we have done over here. And or we can write or underscore font, and we want font, we are going to make it 64 by 64 pixel The our function. So just below this show underscore next function. And we are going to do the same score function. And then over here, let's just this paste over here. And then instead of score, we don't need all of this stuff, we just need to just to make sure it looks good. Game over. So it all drawn on the screen, we're gonna copy and paste this over here. And then instead of score, we are not because we are not going to use the game worst takes is going to be displayed at one of that, I'm just gonna write 202 50 pixels. middle of the screen, you can try out different I've divided the both of these values by two and And that's how I got to the center obviously, you good. Anyway, so this is looking pretty good right working. And you have to remember that we have what else is being displayed, but it's not in the And this is because we have used the same font this font, we need to change this. And because the Oh font. So we're just going to copy this are going to paste over underscore font, because a score. That's why it's so small. let's reload wait for it to come to 200 y axis and after that can't hit any of the enemies so the score is going again. Let me just hit A couple of enemies. And 200 pixel to get over. And it's going to happen And now because you can't hit any more enemies, you can add more buttons like play again and do to do it. So I'm not going to go into it again. that our code is working instead of 200. Let's sounds again and make it a complete game. So guys, created our space invader games from scratch. And about pi game or creating games, now you have It has been wonderful hanging out with you guys.