[MUSIC PLAYING] DAVID J. MALAN: All right, this is CS50. And this is already week nine. And this means this is the the past several weeks, from Python Each of those languages that we've now rather come together more modern applications, be them web So, up until now, we've been using, that you've done, this Now, this isn't a CS50 thing. It's just a standard program that So it's a Linux program that And it allows you to run For instance, you've been only because Codespaces is using 80 and But, up until now, this was just to serve static content, maybe some CSS, maybe some that just never really as you log back into the server, save and then someone reloads their page. But, of course, the web that we all is so much more interactive. When you search for no Google engineer that, in page containing a list or 10 birds just waiting for someone Rather, there's some database involved. The HTML's being dynamically generated. And it's all indeed very dynamic. So whereas, last week, this week we'll focus And, really, the key difference take input and produce output whereas of as static. But it's a blurry line. It's not necessarily a But today things start to So we're not going to be able We're going to need something to take input from users via the URL. So, in fact, let's look at some sample just to remind ourselves of some of So here's a standard is just the default page on the server. And, usually, the file is But, depending on the operating it could be a different file. But index.html is probably So you could explicitly state like file.html, You can have folders or And this would imply that in a folder called folder in this case. Or you can have a folder/file or even So this is a very direct mapping so to speak, like the But, today, we're going to do, like is more of an abstraction of this. This is how URLs look. But it turns out, once you you don't need things to line up You can really put your And so, in general, we're on just thinking of everything generally speaking. And a synonym for this, in the context So a route is just some number of a file extension that refers to But, more interestingly-- and this and not just a static website-- recall, that this is how in the form of URLs, a question Or if you want two or you separate them with ampersands. But that's kind of it. The web today is going to work but we're going to start leveraging more powerful, more interactive way. So here, recall, is what might when you search for It's going to request of is the name, by convention, because they've got a lot of And if you have ?q=cats, this the HTTP message that would've been searched for cats. Hopefully, you get back a containing those actual cats. But, again, there's probably a lot and somehow generating that HTML So we, today, are going what's called a framework or means it's relatively small versus And it's called Flask. So Flask is really a and it's popular in the just going to make it easier to Python. There are alternatives. A very popular one is called might've heard of before. And there's dozens of others in But Flask is among the most which means you can really just simply without feeling like you're as much as you are learning one particular implementation. So we're going to introduce you And that's going to to start web applications not but literally running flask space run. So this framework literally on your Mac, your PC, your that allows you to start flask run instead of HTTP server. So, again, last week, it was This week, it's all about And, by framework, we really using some third-party code that just some human or you will build your applications. Usually, this is just based on lessons after application. Humans around the internet We should probably standardize the names and how things are laid out. And so, even though this is the way that Flask prescribes that We'll, starting today, always have by convention, like in our folder. And we're going to have a folder is any of the actual HTML, maybe But you can actually put some And, in fact, you'll see two other files or folders you'll One is called requirements.txt, file wherein you specify one per you want to use. This file just makes it easy to And then, lastly, a static folder. And it's in this folder that you put literally files that are meant to be in a while, but they're And so you just want to isolate Why is it this way? Eh, a bunch of humans decided But reasonable people will disagree differently. So, when using a framework for the first or read the documentation. And it will essentially guide you to So let's go ahead and do exactly that simply and, by design, underwhelmingly But, rather than do do it in a way that starts that, in the next version of it, and have it say not Hello, David, or Hello, Yulia or anyone else. All right, so let me go And let me go ahead, and, initially, And let me go ahead and start by simply want to show to my visitors So I'm going to go ahead and, but just to make a point, code index.html to open up a new tab. I'll hide my terminal window just And then really fast I'm going to So DOCTYPE html, just like last week, to tell the VS Code that I'm-- to tell the web that I'm In the head of my page, I'm going to And I'll keep it simple and But just so that this website actually I'm going to use one of those about last week whereby if I and viewport refers to just the big the content of this meta tag equals 1 and width equals device width. I always have to copy-paste But this line here that, no matter how wide a laptop or desktop or maybe a size the viewport to that device. Otherwise, your website might if you don't use this tag to tell the actual device width rather to something that's So, for now, I'm just going to from my printout here. All right, beyond that, we We'll keep that simple. So body, and then, in So that's it for my website thus far. It's static. Nothing about this is going to So I could technically use HTTP open it in a browser, and I But let's instead create and sort of overengineer this problem taking in dynamic input So let me go ahead and to do this. I'm going to go ahead and I'm going to close the index.html file. I'm going to make a new which, again, was the mentioned that this framework expects. And I'm going to move index.html into command. If you're more comfy, you can open up You'll see, in advance, I'll occasionally borrow but there is my templates folder. And you could click in what I just did at the command line. All right, and, after this, let's app.py. And, in app.py, let me I'm going to import some functions that So I'm going to say from flask, in and also a function called render Now, how to do this? You literally read the documentation, like me tell you to begin In the Flask framework comes that are just useful to incorporate into Here's the line of code via to treat my file, app.py, I create a variable, I set that equal to the this Flask function and pass the name of this file. So this is the only weird thing for if at all. __name__ is a special refers to the current file's name, So it's a nice way of without manually typing the file name, And then, lastly, I'm going to do this. And this is one other piece I'm going to use an @ and say app.route. And then in quotes, as an I'm going to specify the route for / being the default, by convention. I'm going to define immediately that I can technically but I'm going to get in the habit So I'm going to call this But that's not a hard requirement. And then, inside of this going to return this, return And that's it. This I now claim is a beginning It looks a little magical or But, per the jargon I introduced is defining a route for implies that whenever on this application, this function index should get called. And that function's purpose is just to return, quote, unquote, So let me go ahead and do this. Let me open my terminal clean because we're going to today in the works. I'm going to create one And I'm going to move app.py and So if I now type ls in I've got that folder hello and also So if I now cd into I'll see the two things we and the templates folder. And if I go one step further I should see, of course, index.html. All right, so a lot of steps to But you'll see that this is I'm not going to run am going to run flask run, which will application. The output after I hit Enter is It's going to warn me this You should not use that same You should actually configure Flask going to use it in the real world. But it does show me the random And I'm going to go It's going to open in a new tab. And, voila, that is my web application. Completely underwhelming, that, even though Chrome is the equivalent of my having visited All right, if I zoom out here, though, and I choose View page source-- recall, this is available you'll see that this isn't actually I'm literally just returning, So, yes, it's text. It's being rendered as a web page. But it's not technically a So what I'm going to do here is this. I'm going to go back into VS Code. I'm going to open a second the plus icon toward the just so I can keep the server running. But-- actually, nope, let Let me kill this terminal. Let me actually-- oops, Let me instead go into Let me open up app.py. And this time, instead of saying I want to return the which is that whole file I created, But I can do this. I can call a function which comes with Flask. And its purpose in life is to called templates, open all of those bytes, to the user's actual browser. So let me go ahead and do this. Let me open my terminal again. Let me do flask run inside I'm now going to go back to and nothing appears to have changed. But if I right-click and choose View now you'll see all of All right, so this has to do what we achieved by just But here's where now things can now that we have this we can actually introduce to make things more dynamic. So, for instance, what I'm going to now introduce that I also imported called request, And it turns out, of there called args, to be a dictionary of all that the human might've So I don't have to figure out, how do I I don't have to worry about Flask does all of that me anything after the URL in So let me do this. Let me go back to VS Code here. Let me go ahead and hide the terminal. But, in app.py, let me go ahead and Let me go ahead and do this. Let me go ahead and open up in my hello And let me go ahead and get rid of Using curly brackets, two of I'm going to go ahead and So here's now where I'm treating an HTML page anymore, but more as So a template is kind of you can construct most of what leave little placeholders where you can fill in certain blanks. The double curly quotes of technically another a programming language-- called Jinja. But Jinja is simply a language came up with that you can use for these placeholders So this is going to happen more in programming and CS. It's not going to be as simple as, oh, Or, oh, I'm implementing something oh, I'm implementing something including HTML, CSS, Python, some So into your vocabulary is now going to that you're using when longer individual languages. So, by this, I just mean this. The Flask framework took a look OK, the humans at the with a nice simple syntax Let's support that syntax in Flask. So it's sort of one framework So if I go back to app.py now, how do to that template whatever Well, it turns out I can Let me go ahead and in my is what's going to get called anytime I'm going to go ahead and I'm going to set it And then I'm going to go ahead and I claimed, a moment ago, that just comes automatically a human makes a request puts in that dictionary all of And the last thing I'm I'm going to actually say-- me make this more explicit. Let me call this placeholder And what I'm going to do I'm going to take advantage of one other It can take one or more arguments. And if you pass in more, that you want the function So I can literally do something So recall that Python supports just means that you can pass in But you can specify them by name. So I am calling one of And I'm setting the equal to name, which defined just a moment ago. So, now, what's going to happen? Well, let me actually I'm going to go ahead and The URL is not going I'm going to go back to my other tab. I'm going to go ahead now and change to be /?name=David. I'm not going to hit Enter yet. Let me zoom out. But, when I do zoom out here, I think So here we go. Enter. And, voila, we see hello, David. But, more interestingly, here by right-clicking or developer tools and so forth it appears that what the is literally a web page There is no more placeholder. There is no more curly braces. Literally, the content that came And so this is the a static application versus dynamic. What I wrote statically was But what got served plus the substitution or interpolation So we have the beginnings, it And think back to Google. Google is essentially implemented So they're doing more with the key value but we have the beginnings Any questions on any of this Any questions thus far. No, all right, well, if I don't cooperate like a human. Let me actually go ahead and get rid and I actually now So this actually seems bad. And it's a little subtle, but if I zoom That's one of the HTTP status see unless something goes wrong. 200 meant OK. 404 meant file not found. 400 means that something went wrong. I guess I didn't pass in a But that's only because I was sort to exist. So let me be a little smarter and code a Let me say this. How about if there is a name then go ahead and create set it equal to request.args, So treat it as a Else, if there is no just default this variable to quote, unquote, &quot;world&quot;. So, now, let's proactively, using conditional code, albeit in let's just check is name in Otherwise, default to world instead. So I'm still going to passing in the placeholder for this But, now, if I go back to the browser in name=David or anything else, And if I go back to my View source tab world in this case. However, if I go back up to that URL If I change the URL to be So, indeed, we do have the beginnings Of course, this is a to write out this if and this else. There's ways to condense this code to to actually implement. And, in fact, let me go We just do this. Instead of treating we did with square brackets-- if that key does not exist. In fact, let me go back to that version. Let me undo, undo, undo, going into request.args to get name. In fact, instead of just blindly called args, which turns Let me go ahead and which is a function that and I can specify the name of And, by default, if there is no you're going to get back which is kind of like but it's none, capital N, in Python. But if you want to give it's handy to know which you can use with can take a second argument, value that you do get back if, in So what this means is I can actually but it's a little tighter. There's no if or else. I can go back to my other and it still works for Carter. But if I get rid of that, world still working just as before. And just to add one more potential it's a little dopey to say placeholder especially if you're going to be using variable or another or another. So better style would the variable what makes sense for So hello, name, with the This is-- I show this, though, if your variable's called going to be the value you pass in. You're going to very often this convention, where you literally the names there are exactly the same. And the only thing to keep in this is the name of this parameter. This is the value of this parameter. The fact that everything seems is because these technical terms that you and I know as name for my But get past that only because it something equals something, the variable's name is exactly the So that too here is conventional. All right, a little cryptic. But common boilerplate that you'll Any questions now about this? No? OK, so let's make things a little of a real-world app. Let me propose that, now, maybe a second template altogether. In fact, let me go ahead and do this. It'd be nice if the human doesn't need to say that, oh, if you want you have to literally change the no one does that. That's just not how the web but that is how browsers But, of course, on the web, So let me go ahead and do this. Let me go into index.html, and let And, instead, let me This form is going to use the see what's going on inside of the URL. This form is going to have an input off, just like last week. I'm going to do auto focus just to move Somewhat confusingly, I'm going because I want Carter's name, my But I'm going to give quote, unquote, &quot;Name&quot;, to be grammatically clear as to And the type of this Although, that's the implied I'm going to lastly have a button is submit so that the browser And the label I'm going to So I'm going to type in And I want to see hello, But I need to specify And recall that, when we implemented we did a little something like this. Https://www.google.com/search, not going to punt to Google today. We are implementing So if this were a search application, of /search, but let's do something Let's create our brand This is not the name of a folder. It's not the name of a file. It's more generically a path or a route If I go back, though, to this notice that I have the beginnings that's asking me for this name. However, if I do type in I'll zoom in just a moment-- notice that the URL does change to works. But, of course, we're getting haven't implemented this route yet. So let me zoom out. Let me go back to VS Code. Let me open app.py and make a Let me make a little bit of a In app.py, instead of just getting let's simplify the index route and be to render index.html, the I'm going to now, though, create a unquote, &quot;/greet&quot;. And I could call this But greet seems sensible. I'm going to call the function But, just to keep myself sane, I'm going even though that's And then, in this route, I'm I'm going to create a variable called quote, unquote, &quot;name&quot;, then, the exact same line as before. And then I'm going to return is the function that comes with Flask. I'm going to specify this time, though, which doesn't exist yet, but that's not and pass in that variable. So the last thing I need to do is this. And I'm going to cheat paste the contents of index.html into a Let me open up VS Code Let me go ahead and write Notice that I'm making sure to put Or I could cd into it and That's going to give me a new file. I'm going to hide my and I'm going to get rid of the form. And, frankly, I should've just because the only thing I'm going and then, in curly braces, we started to call name a moment ago. So, to recap if I go into my I've still got app.py. I've still got templates. But if I look inside of templates now, and greet.html. index.html is the thing greet.html is the thing you see when So, indeed, if I go back to so I get back to that form. For good measure, I'm want to make sure I have the I'm going to now try I'll zoom in. You'll see that the URL will again and my name. But, hopefully, we now because the new route actually exists. And if I zoom out, and go to View page what appears to be a HTML file just generated instead. All right, if you're on board that insofar as it does let's critique the design as I've now got three files, app.py, What might you not like about the even if you've never Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, greet and except for that one or few I mean, I literally copied even though I do it sometimes if I end up with the that's probably cutting some Why? Well, what if I want to go in and from hello to something else. It's not a huge deal. But I have to change it in two places. What if I've got some And so I've got some I need to copy it into another Generally, having duplication So it turns out, there And this is one of the start to get from a web framework, You get solutions to these problems. So what I'm going to do now is this. I'm going to create a third and by starting by copying Let me go back to my And let me create a third template layout.html. It doesn't have to be called So I'll always do that here. And, when I create this I'm going to go ahead and But I'm going to go inside of the which is otherwise identical And what I'm going to do is This is more of that Jinja syntax with years ago. And I'm going to do this. Single curly brace and a percent sign. I'm going to specify the word block and And, by convention, I'm and just use the exact same that I'm inside, so block body. And then I'm going to put a percent I don't need anything inside of this. So this too's going to But it's a convention. I'm going to do another curly and then literally the And I'm going to open and It's a Jinja tag, if you will. So, again, you see yet more in the world kind of or at least using syntax but doesn't clash with the syntax, the Long story short, this that you want a placeholder, not but for a whole block of code. Maybe it's simply a sentence. Maybe it's a whole-- a This is a placeholder And the way I can do this-- or and this is where template now in the sense of what templates do. I'm going to go ahead and do this. I'm going to go into my two The only line that's different is which line number? 9 is the only line that is unique. So what I'm going to do is this. I'm going to highlight that and copy it. And then I'm going to delete because it's just redundant. Everything I need is in layout.html. At the top of this file, I'm going to sign, but I'm going to comes with Jinja called extends. And I'm going to specify in quotes that I want to extend, so to speak. So this is an example of what's in I want to take everything from all of its lines but sort of from a Inside of this file, that the custom body that I want is And then, down here, I'm going to finish my thought in advance. And then, inside of this block body, I'm that I Stole from the original version. So I'll concede that I've added three cryptic-looking relate to Jinja that humans invented to give you or blueprints. But the point is that this is going to get plugged into that wherever that body block is meant to go. Lastly, I'm going to The only lines in index.html that are So I'm going to highlight those And then I'm going to do the exact same of this file, then, Inside of the block body, I'm going And, in the middle of that, I'm Just stylistically, I'm going to indent on what is inside of what. But that's it. So ugly? Yes, but, as soon as your web this ends up being a drop in the bucket. It's three ugly-looking lines that you might be plugging in and So now index.html looks like this. greet.html looks like this. And the only way they differ is the layout.html is the main what the whole website looks like. I can change the title in one place. I can add some pretty CSS It's going to apply to And, now, somewhat if I go back to this nothing is different But I've made arguably a when I change things to Carter and just visit the default-- rather, if I just visit slash I've at least handled I've eliminated the situation the same boilerplate code. So odds are someone like Google It's probably fancier But any time you search for something on looks the same. Maybe the bottom of the There's maybe some And then there's 10 search results. So, probably, what they've done is they like this with all of that they want every human to see And then they're just somehow a block of code somewhere All right, questions on any of Anything at all? All right, how about another If I go back to this URL here and it's not that big a deal And, in fact, what's nice about is that URLs are therefore stateful. If you copy this URL and assuming the web server is still up and And the human to whom they will see David or actually in that form, which Not so much for this that you want to send someone a It's a good thing that Google puts in the URL because then What you see is what because all of the inputs of the But suppose that this wasn't asking for my name but my credit That should start to rub feels like no good will come from because if you have a nosy There it is in your search history. A roommate goes through your Or if you do, for whatever you're accidentally including So I said last week that there is in the URL and that that's not called get but that's called post instead. And it's actually a If I go into index.html, I can simply Get is the default. Even though, in some contexts, it should be lowercase, another example But, in this case, if I go now reload the page because I want to if I now type David-- and I'll zoom in-- before hitting you should not see that nor would be your credit Unfortunately, we're code we haven't seen yet, Well, why is that? That's because now that I I need to tell the web server that which is the default but post as well. The method the user is So this is an easy fix to look a little cryptic at first. If you want your greet method to you can specify another So the default is literally this, quote, unquote, &quot;GET&quot;. So what is this? Methods is apparently a named argument I claim its default value is this. What do the square brackets Not a dictionary. Square brackets. A list, so it's a list of This is the implicit default. So you don't have to type this. It's just what works out But if you want to change you have to include methods that you do want to support. For another time, there's There's delete. There's put. Those are the two biggies Those are generally not supported but get and post certainly are. If you wanted to support you can literally have a comma But we don't really need I claim I'm only going to use post now. So now if I go back to to the form, reload to make and now type in David and zoom in, But you will-- or you won't see But nor will you see it even So it's super secure. Why? I screwed up, but why? Yes. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yes, so good intuition. Even if you knew that before, you how might this be-- why might this be behaving this way? Well, if I go into app.py, it seems placeholder, well, it must be key in request.args in this case. However, there's an and it's called request.form. This is another example of visible and request.args and are not obvious mappings to But that's what the Flask folks did. And so the simple fix now, is to change request.args if you want to use post instead of get. This is a weird misnomer because whether you're using GET or POST. But this is what some folks decided. So let me go back to my browser, go to make sure I get the fresh zoom in, and click Greet. And, this time, you won't but you should see it So we've achieved some form Better applied to things like credit Phew, other questions? On any of this thus far? Anything yet? No, all right, yes, in the middle. AUDIENCE: [INAUDIBLE] post and DAVID J. MALAN: A good question. To repeat if you were should we have a second line Yes, if you were. I, though, decided, at the last So I don't have to bother with that. But your question's a perfect segue to a where you can actually consolidate into individual routes. Why? Well, at the moment, this It's literally got one form But it's implemented, therefore, with No big deal for small applications. But if you imagine a more be it Google or anything else forms on different pages, if every form needs to separate have to keep track of literally Your colleagues, your to know which one is related to which. So there's something about consolidating related so that everything is together. Well, we can achieve that So let me go ahead and completely have everything exist in the /route. And I'm going to go ahead and highlight altogether. But if I want my single /route I indeed need to use methods equals and Order doesn't matter. But I'll keep them Inside of my index route, I need to via GET or POST? Because if it's via GET, I If it's via POST, I want to do something with the user's input. So it turns out it's relatively simple. If request.method equals equals So you can literally check the request to figure out, was the word GET or the And, depending on the answer, I can paste those lines the variable name from request.form. And then I render the template Otherwise, you know what? I could just do else, So if the method is POST, go ahead and Else, go ahead and just render the Strictly speaking, I I can get rid of that, just to and unindent my last line. Why? Because recall that, from C, from nothing in that function is So you might as well kind that you don't bother adding So notice, now, if I go back it's not going to work yet. But let's see if you If I type in David here back to getting a 404 but AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Good, I haven't But I haven't changed the So if I go back to VS Code here the HTML, POST is still fine. But there is no /greet route anymore. So I actually can just specify slash. Or it turns out if you omit that that you want to submit it to came so that is fine as well. I'm going to go ahead now and go I'm going to reload the page. And, just for good going to Control-click or And, here, yep, the So I think I fixed the bug. Now if I type in David and click greet, So notice that this still of having two separate templates, which collects the user input which displays the user input. So I'd argue that it still makes But I can avoid bloating two methods for every single feature Now, there is still a bug even though it's a little bit subtle. So recall that, previously, we just in case the form doesn't as might've happened if I didn't-- if requesting manually as I did before. But it turns out that if you're of course, expecting the human to no human would do, it turns going to submit a name parameter that is, empty, the And so even if it's still going to be and, therefore, not worthy of having In other words, if I open up my and go back over to my browser, and as before, I'm going to be But if I try this again and don't Greet, it turns out the going to be submitted to the server, going to rely on the default value And so we see what appears to be a bit So how can we go about fixing this? Well, perhaps the simplest way is value here inside of app.py. So, in fact, let me go ahead and and pass name in as the variable it But, in greet.html, there whereby we conditionally display In other words, before I output blindly let me borrow some syntax from Python template, a conditional like this. Open curly brace and then a I want logic, not just And I'm going to say if name. And then I'm going to do another And then, after that, I'm going inside of two curly braces. But, after that, I'm going to do again sign, and then I'm going to say else And then, after that, I'm going to go world and then close this if a single percent sign, and endif. And then I'm going to go ahead So, in Jinja, it turns out that we We can also do a bit of an if and an else and an isn't quite like Python-- indeed But this is particular And I've done it all on is a fairly bit-sized conditional, or print out world. Otherwise, I could actually put these in order to spread We'll see now, before some other control flow capabilities But, for now, this is a nice way to when I go back into my application in D-A-V-I-D, it's still going to But if I go back one final time, an empty value to the server and click now we do, in fact, see hello, world. All right, any questions on this From those basics come pretty much No? All right, so if you'll indulge me, that I made back in the day. So, when I was a sophomore, I so I didn't so much do freshman with a roommate of mine. So we were sophomores in Mather House. He was the athlete. I was the aspiring computer scientist. And so this was actually a screenshot I ever made. And this will sound old too. But, back in my day, registered for Frosh IMs, or you would literally to Wigglesworth, where a certain proctor And you would literally under the door with your name that you want to register for. So that was the state This was ripe for disruption And, once I actually took CS50 in teach, funny enough, web I think I spent that winter how to do stuff with web programming, At the time, I was using a language but not as popular as But what you're seeing here of what the user interface was. This was me learning how to repeat no matter how big the page was. Back in the day, there was no So every one of these menu And even though-- this is a If you would hover over I would do using JavaScript, was just change the image from creating the illusion of the trickery as you might recall in hover. So the web's come a long way. But this is still representative, of how web applications still work. I used a different language. I used a different backend But everything I did then we and beyond because the It's all based ultimately we discussed thus far this So let's go ahead and make the though, perhaps without as many of In my VS Code, I'm going to go ahead I'll open up my terminal, and of Flask just like you can hit Control-c I'm going to go ahead and hit cd And I'm going to create a new so that all of my new application I'm going to cd into froshims. And let's go ahead and make that essentially pretends to let So I'm going to need to do But I'll do the first one from scratch. And then we'll start just Let me go ahead and do this. Let me go ahead and-- actually, we'll do this. We'll cut one corner. I'm going to go ahead and copy, from my I'm going to go ahead and templates my layout into this folder. I'm going to create a new I'm going to move that so that, at this point in the story, I've got the beginnings even though it's specific But I'm going to go ahead and go into layout.html. Let's just change this ever so just so we know we're looking And, now, let me go ahead and about index.html inside just as before, is going to extend that Inside of here, I'm going to Preemptively going to say endblock. And then, inside of the beginnings of a super simple So I'm going to use an h1 tag just says register at the top of Below that, I'm going to have a form. The action of this form I'm going to /register. So that's a to do. We're going to have to go The method I'm going to use is so that if roommates are they don't see, in the autocomplete, Inside of that form, I'm going to autocomplete is off. Autofocus is on. The name of this field to ask the humans for their human name. The placeholder, just is going to be, quote, unquote, And then, lastly, the type of this is text. So, so far, this is actually pretty soliciting someone's name. But now I want to maybe menu via which you can select a sport. And, back in the day, I think students could only register and ultimate Frisbee. So those were three of the fall sports. So let me do this. It's a little weirdly named, is called a select menu because The name of this input, which is really Though, I could call the And, inside of this select element, I'm going to have one where the Another option, the And, lastly, a third option, the So just those three sports. But suffice it to say And then, outside of going to have a button just like is submit, just to be super strictly necessary. But it's another attribute And then the name on the value So it's clear that but you're actually Now, we're not quite good to go yet, again. Let me open up app.py and And let's just whittle this I don't want to get I don't want to support even POST. So let's just whittle this So I can do a quick check when I run flask, that I'm So, in my terminal, I'm going to So far, so good. It's going to be by default the same a brand new codespace. So let me go back to my other And, OK, we've got the beginnings So it's got place for my name. It's got a dropdown So let's see what happens, And, when I click Register, just I find myself at per my URL? Slash. What was it to be? If I go back into my index. /register. But what error will I see given that app.py has only been So probably 404 because So if I click Register, I But if I zoom in up top All right, so it's the But I've not-- I've implemented the user interface but not the back does something with the user input. But a couple of enhancements here. But these are largely niceties in HTML. It's a little bad user registering for basketball. I mean, that's fine. But, arguably, you're biasing people Or they might not realize that they're didn't explicitly choose a sport. So having a random, an just happens to be the is a little weak when So there's different ways to fix this. But one way is to do this. Add a new option at the very top. But go ahead and disable it so select it because you want By default, you can specify And it has no value. So not to judge any sport, but this But what the human sees is So this is kind of a hack. Ideally, the Select menu would like the actual input boxes does. But that does not exist. So if I reload now, it looks So it says sport. I can't select sport ever again. But it is the default, but I can which just increases the what you might expect. Of course, there's something Suppose I don't even give my name. It still went through. It didn't work. It's still a 405, but the-- 404. But the browser didn't stop me. So recall that we do For instance, I can say that is itself required-- The text box is itself So now if I go back and I just ignore the name the browser's going to yell at me. Now, recall that this is not robust. Client-side validation is not good. Why? What'd we learn last week? Yeah, I mean, I can literally and open up Developer Tools. I can go into that form I can literally find the word This form will now go going to do what I change. So it's useful for user experience, and faster to validate. But it's not going to be robust defense. All right, so let's go back now and implement at least something So I'm going to go into app.py. And, in app.py, let's So, at app.route, quote, to match what is in my HTML. Let me define a function. I can call it anything I want. But, again, good convention to just name so you don't get out of sync. And then there's a couple of When you register for what are the two things that the What kind of logic should I have here? Yeah. AUDIENCE: [INAUDIBLE] at DAVID J. MALAN: OK, so let's make and the sport is present, ideally. So let's actually validate the did back in week one. Just like get string, get they made sure that So there's a bunch of but I'm going to go ahead and take If not request.form.get, I'm going to go ahead and then failure, quote, unquote, &quot;failure&quot; So if it is not the case that there just assume that there's a failure. So how can I test this? Let me go back to the other tab. Let me go ahead and not type And notice-- well, OK, I need if I actually want to see So you know what? Let's just change the template. Let's get rid of that so I and delete things manually. So let me reload the form. Let me not type a name. Click register. And, oh, dang it. 405, Method Not Allowed. What's the fix for this in my app.py? What line number needs to change? Yeah, over there. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Yeah, I need to allow So I'll keep it more restrictive. So methods equals and then POST because that's what I'm using All right, let's try again. I'm going to go back. I'm going to not type a name, OK, so we caught the fact that Let's now go back and try David, Register, OK, now So something's gone even worse here. And, unfortunately, you're this over the next couple of weeks. This is like Python and the web's It's a different issue, but it's going So let's go back to VS Code here. Nothing seems to have gone wrong, but Let me open my terminal it looks like I made a crazy But let me go ahead and focus on-- and the formatting's a Here we go. It's a little cryptic at the most important line of output. The view function for, quote, return a valid response. So you're not going to most likely unless you do what I did, You didn't handle the and something should've come back. So maybe I could do this. By default, I could just say all even though I've not Let me try this again. Let me go back. David is typed in. No sport, Register. OK, so now I'm making progress again. So just like week one stuff, I make whether it's success or All right, let's do something a I could do this. How about elif not I could similarly return failure. But this is a little silly to have So, actually, let me Let me go ahead and, instead, and maybe just do something like this This is maybe the tightest way just to the same but for two different keys. But returning, quote, unquote, That's not a valid web page. It's literally the word failure. So maybe we do this, render_template, And you know what? Down here, render_template success.html. So we actually send the browser a single English word. Of course, we're going So let me go in and do If I go into, how about, I need another terminal because Let me go into froshims and let me I'm going to save a few keystrokes and But I'm going to delete most of it. And I'm just going to keep You are registered. And then-- well, really, not going to bother doing anything Let me do something So code templates failure.html. I'm going to copy-paste the same thing. And now I'm going to say the But I'm not going to be going to even yet tell the But at least now we have the So let me go back, reload everything. Let me not cooperate at OK, so you are not registered I'll type in my name. OK, let's at least do that much. I'm still not registered. Let's go back. Let's leave David and choose soccer. Now, OK, now you are registered. So I got the success template instead. All right, so that seems to be better of an actually useful application. But let's actually do more validation. Why? Because notice what the Suppose that, out of want to register for a different sport. So you're not a fan of soccer. You want American football. So let's right-click or Choose Inspect. And you can even do this client side. Let me write click on the Select menu. In Chrome, let me select Edit as HTML. You can start adding any HTML you want. So let me add an option And, aha, now you have to Of course, this is going to work and Register even though I'm not I got through that validation checking that there's an actual value. So this is now no longer really correct just taken CS50 is now like this to my web application. And we're going to have bogus So how do you defend against this And, honestly, as soon as you put bad things will happen to it because So how do we defend against it? What would be a better approach? Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Nice, so that the only things allowed are offering this semester. And, in fact, you know what? We can take this one step further. The fact that I hardcoded into my form, it'd be nice to maybe factor so that I have one authoritative list and also validating the user's input. So let me do this. In app.py, let me go in here. And I can put this, how about, the I'm going to create a global By convention, in Python, I'm going to doesn't mean anything functional. There's no const keyword in Python. So it's more on the honor system But, inside of my list and do only the official and ultimate Frisbee. So now I have a Python would be nice to use to So this is maybe nonobvious. But I think it's just an What if I do this? What if I pass into a placeholder called sports of that global variable sports. Now, I'm trying to The placeholder is called But the actual variable I to make clear that it's a constant But this too is conventional. This is a Pythonic way or a But now, in index.html, this is This lightweight syntax gets interesting because I can I'm going to delete but not the disabled option, which of this select menu. Now I'm going to do this. Just like Python, I'm in sports using the curly brace are Jinja specific even though Jinja And that's one of the upsides of it. You're not learning two things. You're learning 1.1 new things. endfor, which looks stupid, in a lot of languages to literally that you are ending with no space. Inside of this Jinja loop, I'm going to And then, inside of the going to do my placeholder and just say sport like this. And if I now go back into my and I reload the page, have a dropdown that's still because indeed if I go to View page there's some extra weird because I hit Enter in my template. And it's generating literally what It's generating that list of sports. And it turns out-- I'm going to do this It turns out that the option you specify a value for that sport. Often, they're one and the same. What the human sees is what It's kind of like the a href But this is not going to But it's going to do this. If I reload now and I View page to see options where, in is what the server is going to receive. In white is what the They don't have to be one and the But what's nice now is want to officially support American add &quot;football&quot;, quote, go back to the form, reload, and voila. Now I have a list of all four. But I haven't done the second which is actually validate those sports. So let me do that. Let me go over to app.py. And, in app.py-- and we'll no let's do this in my registration route. So, instead of just And the whole point of using where you use an exclamation So if it's empty but it's not, then Let's get rid of this line. And let's instead do How about if not request.form.get name. So let's still just check for a name. Or request.form.get, quote, unquote, Now go ahead and say there's a failure. So what does this mean? If I go back to the browser and And I think this will work, OK, David. We'll register, say, for soccer, But if some hacker wants to register for American I'll inspect this. I'm going to hack the form at the very end just for myself. And, down here, I'm going to say &quot;football&quot;. And then, inside of to say football just to be consistent Save that. Close the developer tools. Choose the hacked option. Register, but, no, we So this is hugely important. And there are so many darn the programmers either to actually validate stuff server side. This is how servers You might have client-side And it looks nice. It's immediate. It's very pretty and graphical. But if you're not also paranoically this is indeed how servers get hacked. Or, at least in the best is sort of polluted with sports that So this is not a very representative of what kind of if you don't distrust the user. So, unfortunately, this Never, ever trust user input. We saw that already with All right, any other questions? Any questions thus far on this? Otherwise, we'll add a bit No? All right, well, just to show let me change the GUI, the Drop-down menus pretty compelling here. But there's other techniques. And we won't dwell on HTML tags, But let me go into maybe one different approach here. And if you really like radio are mutually exclusive-- this is a in cars where, when you pushed it would pop out the buttons for your favorite channels. Radio buttons are, by definition, So if I want to see those radio let me go into index.html. And, instead of this select menu, And even though this isn't going for sport in sports, just as Inside of this Jinja loop, I'm going to do an actual input tag. But it's not going to be text. But the name of this tag-- of this element is going to be sport. The type of this element is going And the value of this button is But what the human is going to see is the same thing, So this is going to And it is going to look ugly in my black But it does speak to how you can different building blocks. Let me reload. And, OK, it's probably because it's just kind But it's as simple as that because if they're indeed mutually exclusive. However, suppose that you want to allow to sign up for not one but In no case now can you The workaround now for be, oh, just go register twice, It's not a huge deal And then you change the You hit back you change But that's just bad design. Surely, we can do better than that. So, in fact, let's make one And if you've never really thought radio buttons and checkboxes where the former is mutually is inclusive whereby you can check 0 So if I actually just go and change the type of this and then go back to you immediately get what you and I And the upside of this is that you But the catch-- and this is subtle-- the catch with our code right now is So it's a minor fix, but If I go back to app.py, if I actually from the users, I'm going to have So I'm going to do this. I'm going to check for the But then I'm going to use a loop don't want them to slip, like even if it's not there. So I'm going to say this in Python. for each sport in request.form.getall. If you know it's a checkbox, you want to for the sport parameter, If the current sport is not then go ahead and return Did I make a mistake here? I think we're good there. So we're checking against every Is it actually valid? And so now if I go in here, reload, just check one of them, for instance, and added something bogus like football. Maybe someone was alluding to this. I see now an error. So let's do this together. Not sure what I did wrong. I'm going to open up my And, oh, interesting, my But attribute error. Immutable dictionary So this is me lying to you. I don't think so. But [INAUDIBLE], are you here? Did Flask change since I last did this? No. OK, so Flask post form getall. All right, here we go. About 2012, this is But ah. You know, that's not a bad idea, OK. All right, OK, in Flask, how from an HTML input of type Well, this is horrifying. getlist! Damn it, OK. What a good duck. All right, so-- all right, So thank you. [APPLAUSE] So that's a good lesson. Just do as I do. All right, so getlist will get So now if I go ahead click just soccer without like American football in fact, registered but not that we haven't actually So this is to say, ultimately, that not only in HTML, which is mostly a in Flask, where you can process and take control over is usually the domain of Google or Now you actually have more of to implement these things yourself. So let's go ahead and add some here where we're actually doing And, for this, I'm going to So I'm going to go over to VS Code here. And let me go ahead and close these tabs And I'm going to go into And I'm going to go into everything we just did plus a bit more. In particular, I'm going I'm going to show you has some comments throughout. But, in app.py, what you'll notice I'm actually got a couple It's a little weak in terms of You are not registered. That's all my template previously did. But what if I borrow an idea from my for hello and froshims, So what if I do this? Let me show you. In templates, failure.html-- or, rather, So notice this, I can of a common format for an error page. So, in error.html of I've just got some big, bold But I have a paragraph is a placeholder for an error message. And then I've gone one step further just cat as an image to let you down But this is like now every website where message when something has cooperated with the rules of the form. So what am I doing instead? Instead of rendering I'm rendering this new And I'm passing in a custom message. Why? Because now, in my app.py, you're missing your name. You're missing a sport. Or I can tell the human what the error, Down here, though, on where I'm now beginning to What's the easiest way to do this? Well, let me scroll to And you'll see that, in addition, I also have an empty dictionary Why? Well, dictionaries are this nice Swiss key, value. Names could be keys. And maybe sports could if I'm supporting just single sports. So I could have a fancier seems sufficient, two columns, key, and so forth. So how do I put a person's name Well, I'll use the syntax from equals sport that associates And, now, what you'll see in that And this is where If I look at this premade as you look at code that's been well, this sort of invites me Why? Apparently, this is being passed this global dictionary. How might I use that? Well, let me go into VS Code's terminal. Let me take a look at registrants.html. And, interesting, we I used it super briefly last week. This is an HTML table. It's not going to look using bootstrap or CSS more generally. But notice that, in the name and sport from left to And then, in the table that I have a whole bunch of tr, tr, tr, loop. Each of the cells, the table And then if you go inside of that you get the value thereof, And the route, of course, again, is by passing in that dictionary. So what is registrants.html? It's just this. So I think if we go and run we have some nice new features. Let me go ahead and do Flask-- let me kill Flask in the other window Let me do flask run inside of froshims4. So far, so good. Let me go over to my other tab. Let me reload. So I get the latest HTML. I'm going to go ahead and but select no sport using radio buttons. So, again, you can only pick one. And now not only am I It's also telling me at the Conversely, if I reload the But do give the sport and register. Now you see that I'm So, again, the UI is not very pretty, of being much more appropriate. Let me now cooperate on both fronts. David wants to register And now notice where I am. Apparently, I got redirected inside of which is It's not very interesting yet. So let me go back to the form. And let me register for, say, basketball, Register. And now there's two of us. Let me actually go back to the form. And let me register Yulia for Now there's three of us. And, again, the CSS is ugly, And if I right-click you'll see David, soccer; Carter, as tr, tr, tr. So, again, if you now think about odds are if your inbox then it's probably tr, tr, tr, tr. And Google is rendering all based on all of the emails Well, let me go back here and Let's watch this a little more slowly. Let me go up to the main form at slash. Let me type in David. Let me type in-- select soccer. And let me Zoom in to the URL. And notice that, when even though the action is /register, So how is that actually happening? Well, let me go back But, this time, let me Let me go to the Network tab, which, And let me go ahead and do this again. So David, Soccer, and I'm And now, notice, interesting, two The first one here is Register. But notice if I go to 302 indicated some kind of redirect. What's the redirect going to? Well, if I look-- scroll down there's a lot of stuff but location was the one we cared that's why the second request over And it is 200 OK because it's blocks from last week and now this. Where did that redirect come from? Well, now you have the Notice that, in my register route, was add the name and the value But the very last thing I did was route. What is redirect? Well, at the very top that I proactively imported not just I also imported redirect is a function that comes with Flask redirect for you without you having or otherwise. Let's do one final example In this final example, froshims5, SQL, after all, allows us to persist with this global dictionary, what's the to store all of our registrants? What's the downside? Yeah. AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Exactly, so, or if something goes wrong or we have multiple servers we'll lose the contents And so that's not really that you care about in the You want to store it on disk using and all of the file I/O But, in week seven, So that writes things So let's actually do that Let me go ahead and close Let me go ahead and close and go into froshims5 now. And, in this version, let me show It's almost the same in terms of But I'm also going to a SQL function, which we used in Python to talk to a SQLite database. This is the one example that we actually do keep on because it's actually to use most third-party libraries You're welcome to, but I do think be using get in getstring, getfloat pretty darn useful, I would say. So how do we use this? Everything in this file so far is pretty including these lines here. But notice that I am opening And that's a database But it is in my account. So, actually, let me do this. Let me run sqlite3 on froshims.db. Let me increase the size of my terminal. Hit Enter. What can I type to see the Sorry. Wait, what? AUDIENCE: [INAUDIBLE] DAVID J. MALAN: Oh, yes, thank you. .schema should show me. OK, it's actually a very simple two, three columns, an ID a primary key, the name of for which they're registering. And, presumably, the ID will be So let me exit out of that. Go back to app.py. And this line 8 here is just giving And recall that the three It's not a typo relative Here is my three sports Looks like my index route So nothing new there. In fact, I'm using that in passing in the whole sports list. Notice that, OK, this is interesting. Deregister, this version is going to as tends to happen over But we'll come back to that. But let's look at register now. register is almost the same even We're making sure to validate the form. But this is where it gets interesting. I'm now inserting rows into the Notice that I'm using CS50's library into these two columns name And I'm being very careful to use input to avoid injection attacks. And then I just redirect the user. But what's going to be interesting /registrants no longer just uses Jinja In this version, we're and getting back a list of dictionaries. And then we're passing into the Jinja template So, just to make clear let me open up templates It's almost the same as before. Notice that I'm using the dot notation And it's almost always the same So you'll see both in But notice that I have a third that's a little interesting. And this will be the A button via which people can deregister So let's do this. Open the terminal. Let's do flask run in Let me go into my other tab, close and I have a form quite like before. But now, when I register, Register, notice that it's ugly UI. But there's a button next to Let's go back to slash. Let me also register Carter, for There's now two buttons. This, now, is what really ties and primary keys with Suppose that there were two Davids two Carters, two Yulias, We clearly can't rely to uniquely identify So we probably should that is, those numbers, 1, 2, 3. Indeed, if I go into VS Code-- let me open another And, in my src9 froshims version 5, And, sure enough, if I do SELECT * FROM thus far. And we've indeed been assigned an auto-incrementing That's useful now in the web especially If I view this page as notice that both David and Carter element next to them. And that's what gives us this. But notice that form, even is a form that will post to a the name of which is ID to the value of which is 1 So this is how you stitch When there's a database uniquely identify the things you from browser to server and back. You might visually show David and But the server only needs And that's why we dwelled on these primary keys and, So, when I go back to this form this is going to submit ID equals 1 to and this was the only route Let me open up app.py again. You'll see that this In the deregister route, I'm going to get the ID from the form. If there is, in fact, an ID and I'm going to execute where ID equals question mark as a And then I'm just going to redirect so they can see who is So if I go back to my browser we should see that now that's gone. And if I deregister And if I indeed go back to VS Code, open run SELECT * FROM registrants, now And so we've effectively stitched So that's all how we Just so you've heard the is a paradigm known MVC, where the view is everything the human the JavaScript. The controller is everything that we've actually been implementing. But, as soon as you introduce a global dictionary, then you is where all of your data is stored. Now, you don't have to But humans, over time, realized follow this similar paradigm. So they started thinking about as having these different identifiers. So there's still a lot more. We have not yet considered how, the website remembers We've not remembered how inside of someone's shopping cart. This was a lot of effort But let's go-- with that as served, let's take a 10-minute break. We'll see you in 10 for All right, we are back, how web applications typically have to log into them, which is Somehow or other, even at least at the start of the day that you open, somehow are still able to remember And that's how you see your Gmail inbox So here, for instance, is a This one here for Gmail or And let's consider what actually to those virtual envelopes when you do to a site like this. Well, typically, inside that your browser sends to Google is a request maybe for that form. So GET slash HTTP version 2 or whatever and some other headers dot, dot, dot. But, for the most part, that's When you then actually log in-- or, rather, when you visit get back a response from the server That is 200, OK. And the response that comes back This is just what's inside of those But, when you log in to a what's happening is that the kind of stamping your hand once and your password to remember In particular, what to send back after you visited that form is you're going to get back a It's going to, hopefully, say 200, OK. It's probably going to be a But an additional HTTP header that is this one, the Set-Cookie header. And the Set-Cookie header of these key-value can actually be anything depending is some unique identifier. So you've all probably heard about You've probably heard that And that's generally true. But cookies need to exist or websites to be stateful, that is, And so session is the name of the-- session is a word that of state between a client and a server. That is to say, if the server's you have a session with that server, the So, in fact, if you go to amazon.com or log in but add items to a shopping Shopping cart is the So this Set-Cookie header from the server to your browser to memory somewhere, either for the life for an hour, a day, a year, depending set. The idea, though, is that because your also, just like the server, you're such that the next time you you should remind the That is to say, the browser not set cookie because it's already contains exactly that same value. So the metaphor here you go into maybe a bar or and you showed your ticket, or they'd do something like stamp your go through the line, you don't have to and prove that you have paid You just show your hand stamp. And the idea is that that if you're presenting and maybe it's the right color and the they should just let you in for your ticket or your money or, in So cookies are a very They are a feature of HTTP. And they are how servers implement because, after all, when you or another link on a the browser icon stops spinning. And it's no longer But, so long as the next link you click from client to server it's the equivalent of just This value is generally a big so it's some unique identifier. Generally speaking, cookies do not your actual password. That's generally frowned upon. The useful information your password, what's can be stored entirely server side. This cookie is just a reminder The problem with is that they're used so for tracking, and the like. Why is that? Well, this is a natural result If your browser unbeknownst to you this hand stamp every you're proactively you are again and are in the sense of if you logged in. Now they'll always know who you are. Even if you're in incognito mode, your hand is still getting stamped. Your incognito window is still again and again. And, so long as you don't know that your Carter know you're the same user or the same the same browser visiting the going to be sent again and again. But, when you clear your cookies or that's like washing your getting a new unique identifier. So you appear to be someone even if you're in the habit and clearing your browser with very, very high probability, based on your IP is on the outside of those envelopes, extensions that you have installed, that you have installed. There's some that a browser can uniquely identify your tracks in this way, so just FYI. But, for today's purposes, it all And this is how they are then set. So let's actually use this and leverage it in the context of Flask comes with Flask that you can to the equivalent of a shopping cart. That is to say, Flask deals like setting cookies and checking Someone else have solved that for you. And Flask just handles the or the username to you in So let me go over to VS Code here. And, during the break, I created If I type ls, I've got the beginnings And, in the templates folder, of a layout.html and don't have to type quite as What I'm going to do is let's implement a very simple and demonstrates how a server can logged in. So let me open up app.py. And, at the very top of this let me shorten this even further In this app.py, let me go ahead up here called session. And that's going to give me cart at my disposal. But I do need to configure it. And there's some different But the conventional here is as follows, to run app.config. And then set this configuration called SESSION_PERMANENT equals be treated as a session cookie. So, as soon as you quit your browser what's in the session will be deleted. This does tend to vary by browser. Sometimes things might be kept But, by default, this is going to deleted when you quit the browser. I'm also going to do this to equal, quote, unquote, &quot;filesystem&quot;. This just ensures that the contents are stored in the servers-- in the server's files, not in the And, lastly, I'm going to by just running this line of code. These, for today's purposes, are that just get sessions working Hereafter, now, we can just use So let me do this. Let me now open up another file in And, in index.html, I'm going to just going to check if the and explain as much if they are. So, in the body block of index.html, I'm going to do this. I'm going to use Jinja, not to but an actual conditional like this. If the user is logged in with a name, and let me do this else here. And, actually, let me so you can see the structure, endif. So I've got the beginnings If there's a name variable You are logged in as name period. And then let's give the human a link-- actually, nope, let's do this. Else, if you are not logged So super simple English text is the user logged in with a name? Or are they not? And I'm not even going to We're going to keep it simple All right, so now what am I that is to say, app.py? Let's go ahead and do this. Let's go ahead and create So I have a route that just And I'm going to go ahead and do this. Initially, I'm going to define And I'm going to have it return So this is going to be Well, let's create that. Let me go into my templates directory. I'm going to go ahead and create And, in login.html, I'm HTML-- this template from before. In login.html, I'm going to just in, again, no password per So let's keep it simple as follows. form action equals, The method for privacy's Inside of this form, let's just ask off by default and autofocus on. And the name of this field will The placeholder text, as before, will And the type of this field will be And then, lastly, let's have is submit because its purpose And, inside of that button, So very similar to greet, But we're now just OK, now let's go back to app.py. The only thing login does But let's actually handle So I'm going to do this. If the request.method equals, and, therefore, the form was Let's use this session variable. So this session variable is essentially a dictionary. It's an empty dictionary ready to receive keys and values. So if I want to put in someone's I can just tuck it in the session. And it's similar in spirit to this thing giving myself a global dictionary. But the problem with that was all of the memory contents are lost. And it was also global. So no matter whether it was me or there was no distinction among users. All of us were treated as the same user. But what's brilliant about this session knows about HTTP and it creates the illusion that have one user or a million are guaranteed to always be unique or whatever human is visiting You have the illusion that everyone has or, really, everyone has just like you would So let's use this session Let's do this, let's remember the user's quote, unquote, &quot;name&quot; and set the value name. So whatever's in the form, let's plop to remember the user. And you know what? Just for user interfaces' let's return a redirect, a Let's just redirect the user back to the logged in at that point. So I think, at this point, that's If the user has submitted their name via and then redirect the user The home page meanwhile If there is a name in this template, Else, we're going to see So how do we get at that name? Back to app.py. Let's just assemble In my index route, I'm going to do this. name equals session.get, So you can treat session similar to But it's a more permanent thing. At least so long as it's I'm going to get my name or depending on whose browser is visiting All right, so let's cross wrote a lot of this on the fly. Let me open my terminal window in And, OK, I screwed up already. Session is not defined. Did I mean session in lowercase? No, not in this case. It turns out what I should have done is Session. Why? This is another flask library. It's technically a third-party wrote for flask users to use. So I copied and pasted that So clearly forgot about it. Let me get rid of this has nothing to do with this example. Let me now open my terminal OK, now we seem to be in good shape. No error message is apparent. Let me go back to my URL and reload. And notice I am not logged in. Now, this is not very user friendly in is by going to /login. So let's actually improve the UI. In index.html, if you are a href equals /login. And let's give them a link to log in. And, otherwise, you know what? Let's do this. a href equals, quote, unquote, /logout want to facilitate the user logging out. But I think this will be a nicer I'm told that I'm not logged in. But there's my new login Well, let's do this. If I click on this, it's super small. But, in the bottom left-hand I'm seeing the /login route. If I click on that there is that just a name. I'll type in D-A-V-I-D. And I'm indeed currently But, when I log in, I'm going to be-- oh, damn it. I did make a mistake. 405 method not allowed. I think we fixed this before. I can go back into app.py. Which line number do I need to fix? Method was not supported So, yeah, line 16. So I think I need methods So GET so I can display the form. And POST so I can process the form. Let's try this again. I'm just going to go back. And I'm going to click-- type David and click Log In. And I'll zoom in on the URL. Log In, ah, you are logged in as David. Now I can log out. And, indeed, if I log out. This one's not going to work. I think I'm going to get a 404 So let me go back into VS Code. Let me go down to the And let's add another route /logout. Just GET is fine because I'm I'll define a function called logout And you wouldn't know this but if you want to clear the user's name, forget the you can do session.clear. And that will just clear wherever the server is storing them. And then I can just return a redirect. redirect to, for instance, slash. So let's see this in action. Let me go back to the I'm logged in as David. But now, when I click Log out, and I'll show you in the inspector. Inspect, Network tab. Let's click on Log out. I indeed end up at logout first. But then I'm redirected to this long But the first logout URL redirects And I'm back at the home screen. So, even though that was a that is how every website implements carts. Now, you might add some fanciness and the like, maybe two-factor But it all boils down to and using those cookie headers in Any questions on these No? All right, how about an actual Let me do this. Let me go back to VS Code here. Let me close these tabs, and that I wrote in advance, this one so the beginnings of an Let me just dive in blindly And let me go to my browser going to see my new app now. And it's super simple, also ugly. There's no CSS or fanciness there. But it's just HTML. And this is the earliest version, where they just sold books, and So what's going on here? Well, here is how using you can start to infer So let me View page source. And, even though the UI is not very There's an h1 tag for books, There's a whole bunch of represents apparently And below every title is a unique form. Every form, though, And every one submits But notice this trick. Just like the deregistration for has a unique ID that's hidden, The value for this one is 2. The value for this one is 3. So even though for froshims, to opt out of the froshims, here, to your cart. Why? Well, where is this data coming from? Let's poke around further. I'm going to open another I'll make it bigger. I'm going to go into src9 and store. And if I type ls, you'll see all of which I predicted would exist. There's a temporary folder This is where, surprise, are temporarily stored on the server. So even if the computer quits or The shopping carts are still there, And definitely don't change things But notice store.db, which Let me run sqlite3 of store.db. .schema to see what's going on in there. It's a super simple with an ID column and a title column. And that's it. Let's see what's inside. SELECT * FROM book; Not surprisingly, So, again, you see how we're using these basic building blocks. So let's look now-- let Let me shrink my terminal And there's some comments in here. But, for the most part, I'm importing some of the track of whose shopping cart is whose. I'm opening, though, in this version, I'm doing that same stuff, copy-paste that it works. And then, down here, get really kind of interesting apps everywhere. My /route, that is, my index, a book's variable that gets the CS50 execute functions. SELECT * FROM books return value. What does that return? Well, recall that, when using using the SQL function, this you're getting back, from db.execute And the keys of those from the database table. So here is a Python list Every element in this list is a not to be confused with and that's in the HTML files. Here's one key. Here's another, value So, again, db.execute, returns just a list of dictionaries. It's as simple as that. So if I go back to VS Code, I have a to this Python function. That gives me a variable is a list of all of the So I can certainly pass to render template so that, it has access to all those books. So let me do that. Let me go into templates books.html. And, perhaps not surprisingly, here's We extend the layout. Here's my body block. Here's that h1 tag that just says And here is a Jinja for is going to output, for every book, for the title. And then inside of that-- or below that book except-- notice that I'm very cleverly for every one of those forms. Just relying on those primary and forth to implement And so what is the /cart method? Let's follow these breadcrumbs. And I'm doing this deliberately live. If you were to receive from a colleague, a just follow these breadcrumbs to wrap And, honestly, start the simplest like I did, like So let's see the cart route. It's a little longer. But let's walk through it step by step. So the cart route supports It looks like, with these lines, which I'm just checking. If there is no cart in the session, And I'm doing this because I want to make sure that the Even if it's empty initially, is essentially doing. So we can put things in it. So if we have submitted something to let's go ahead and grab the ID Let's go ahead and make sure and it's actually a number, so And if so, do this. Go into the sessions cart, which And, just like we saw in week Append, append, append. So we just have a list of book IDs. And then, when you are done with Well, that's a little because the cart route that we're But redirects are always get So even though we ended this redirect is going to send me And that is why now, outside of the apply. Here is a books variable. I don't want to get all of the the catalog now of amazon.com. I'm showing you your shopping cart. And how do I do this? I'm SELECTing * FROM books WHERE the And you haven't seen But, in the CS50 library, if you so placeholder as always, you can then and the library will You might have for a past We will generate the commas for you. So everything is nicely escaped. And then we're just rendering a template So what's cart.html? That's the last breadcrumb to follow. cart.html, and really nothing going There's an h1 tag at the top. There's an ordered list, which And then there's this Jinja loop that's for every book showing its title. So if I go back to the store adding things to the cart, there, All right, just one book. Let's jump to the last one, so the How about Mostly Harmless? Click that. Now there's two items Let me go back. There's now three items in the But if I were to make this URL public-- So not everyone on the internet If I were to make this were to open it on your would see an empty cart because you a different cookie. But the server would be keeping in, if you will, that flask happens automatically. Phew, OK. So that then is how Questions? Yeah. AUDIENCE: Or is the client-- so let's say if you open How do the server know that [INAUDIBLE] and someone who How does the browser [INAUDIBLE] like a new session? DAVID J. MALAN: A really good question. How does the browser-- how does the server to give you a visit a website? When you visit something.com your browser will not There will be no cookie It's just going to be blank, my other hand that has no ink on it. Then the server will know, well, I'm going to set one for you by stamping It's just going to generate typically different for you, for me, for you So that's all. It would just happen by default. happen because we have not only We have also used these to ensure that the server does If you had to do all of would be so annoying to make do copy-paste all of the time. This is still some copy-paste, but all of this cookie stuff on your own. All right, how about a that allow us to escalate set and make this more like an actual And we'll do this by way of a rather than do all of So I'm going to go into I'm going to hit Control-c to kill And I'm going to go into shows version shows.db from our SQL lecture, which using the same schema as then. And there's an app.py. There's a requirements.txt. And there's a templates because we're still using Flask. So let's go ahead and going on inside of this file All right, so I see some I see shows.db using the SQL library, The index route is super simple. It's just rendering index.html. And then there's a search route. So this is kind of an amalgam I want to implement this website for IMDb, just a search box. Well, we can kind of preemptively A shows variable is being set to where I'm executing SELECT * FROM equals this question mark. And what am I plugging in? Well, just like Google, I'm plugging from the URL apparently. Then I'm rendering a And I'm passing in those shows So that's it. It's only-- that's the entirety It's a search engine. So what might I want to do next? Well, my mind goes to index.html. Let's just see what the So I can wrap my mind around index.html. OK, it's pretty darn simple. It's just a form that which aligns with the route we just saw. Method is get. It's got an autocompleting and a button called Search. So not really that stimulating there Let me go into search.html, which So let me open my terminal and Close the terminal. OK, this is kind of It's just iterating over the shows, list item. But I'm using an unordered So there's not that much to this But recall that, two weeks ago, when we we completely punted to Today we are, if you will, So let's go into the terminal I'll go back into my browser and reload. So we no longer see the store. We now see IMDb. And it's a pretty simple search box. Let me search for the office And notice two things. At the top of the URL is ?q=the+office. The plus is a way of encoding spaces in but that's conventional. And then there's a lot of offices. But why is this? Well, there's the There's some prior ones that So there's a bunch of offices in there. But we could probably-- we can tie our ideas together here. Let me open another terminal. Make it bigger. Go into src9 shows0. sqlite3 of shows.db .schema. Oh, yeah, there's a lot Let's do .schema show specifically. OK, so we have the year of every show. So this just means I can play around now as follows. Let me go back to how about search.html. And, instead of just showing do something like curly curly Curly curly brace because why? Well, every element in So I have access to all So let me reload. And now you see, oh, that's They're each from different years. So every piece of data you have access now have access to in how to stitch these ideas together. All right, so what's Well, if I go back to the search box there's apparently no show called Let me try a little more specific, OK, so there's one version of But what if I want to have Well, we can borrow these ideas too. So let me go back into VS And I think here, instead of Yeah, so we can do like, for instance. But this we have to be We don't want to resort where we plug in values with So this is a little bit knowing that if you want to we still should distrust So what I'm going to do going to look a little cryptic. I'm going to just do a question mark. But, instead of passing first, let's tuck this in a variable q equals that even though that's Let's do this. Let's put my percent sign and then put another percent sign after joining and joining plugged into the question You should not use an You should always use the question All right, so now that I've done this, got way better. Why? So if I go back to the form-- and I'll reload to clear everything. I'll zoom in a little bit. Let's type in just office And I think I should get now every in it somewhere even if it's officer. So that might not be quite what we want. But there's indeed a So more like the imdb.com. But now it's a design decision. Do you want your-- do you and require users to type in The Office? Do you want it to be capitalized? This now becomes more of a user much code. All right, well, let's that's representative all the It turns out that this new HTML every time a user is increasingly dated whereby every being much more interactive. So it turns out, there's in the world of the web, called AJAX, which used to stand Nowadays, it just refers to get more data from the server so and the whole browser screen doesn't being reloaded. So this is going to look But let me go ahead and to this relatively easy approach. A lot of today might It's about to feel more that you need to replicate, just to apps are doing. I'm going to close these two tabs. I'm going to go ahead I'm going to kill my And I'm going to go into And, in shows2, I'm So the app is running. I'm going to go back to my And notice I've gotten rid of minor aesthetic detail. But what I like about this now is you're seeing the which is kind of everywhere. But you can't implement autocomplete reload the whole page. Why? If nothing else, the see a big flash of white as which is not what we're used to. If I start over, O-F-F, notice the URL flickering. Just the URL is getting And if I really go shorter, there it is. Officer, now I have only this There's no more below the break. So how can I do this? Well, let's try to and be demonstrative how a third-party websites are working. If you want to-- if you or just learn better how they Let me open up developer tools. Let me open the Network tab. And let me search for O. And watch even though the URL of O. Apparently, an HTTP request was which is essentially Notice that the response was 200. And what is in that response? Well, let me click on that row. Let me click on response. And, very interestingly, It's not a whole web page. It's just a bunch of li elements, are probably the ones that are getting So if I go back to the It's just a bunch of lis. And watch what happens this time. Let me close that panel. Let me search for O-F Here we go, O-F. Now And If I zoom in, there it is, q=OF. If I click on that and zoom out, But let me claim there's fewer of them And if I finally type in notice now, at the very bottom doing an autocomplete, it's sending HTTP request. Back in my day, you'd The whole page would reload, and This is more modern. And this is an example AJAX, Asynchronous JavaScript and slipping it into So how does this work? Let me go to VS Code here. Let me open up a new terminal. Let me go into src9 shows2. And let me open up, template, which is the entry point. Everything at the top is sort of boring. Here's the head of the page. Here's the input. I didn't even bother with the submitting a whole form. So I don't need an action or a I'm just using it as But notice that it is indeed Here, now, is an empty ul, initially. So this is why, when you visit the because the list is empty. And, in fact, watch this. If I click on elements in the Developer there is the ul. If I zoom in, there's That's why we see no bullets. But if I go back to the template, which we haven't spent can start to wrap your mind around Give me a variable called input. Set it equal to the element from memory for the input element, so from last week. Then listen to that input I showed briefly last week a list of and mouse down and key up and key down. And input just means generally Here, I'm calling a function. It's an asynchronous function it's going to get back to me eventually. If the server is slow, it But, inside of this function, give Go ahead and fetch the URL whose concatenate onto that whatever the input. Then create a variable called shows, and get its text value. So we're not going to But fetch is a function that in JavaScript that lets Fetch more content from the server. And you essentially pass it in the This function here response.text from that response, which means if I as before and I click this, that we manually looked at earlier. So you're just getting all of the text happened to be lis. Lastly, go into the document, go into its inner HTML, and change the And so what's happening here-- reload the page. Let me show you the Elements tab. Let me highlight and zoom In the bottom of the screen, As soon as I type O, and I and they get crammed into the inner HTML there's now more stuff there. And, indeed, if I expand it, That is the inner HTML that just And if I type in more, officer, there's only so many of them. And if I just type in because there's no text This then is an example of And I've used this term over time, but Interface. And it's a standardized way, from someone else's server or Now, in this contrived scenario, and I'm the author of the API. But they're implementing-- they're being But you could imagine, actually, and actual prices and from their servers instead of your own. And so they might very those kinds of responses by just sending might just look like all of these lis. But the lis is a sloppy Nowadays, it's not common to use to send back your data. Rather, it's more common called JSON, JavaScript Object Notation. And odds are, for your final project, you'll encounter this in the real world. And JSON looks very, very similar looks like in Python. The syntax is almost However, in the world of JSON, you have to use double You cannot use single quotes. And, generally, it might look like this. So here, for instance, is a of a server that's not sending back It's sending back something So this text, ugly as it is, is much to read, because it's all standard. It's all square brackets, curly braces, And, even though it looks it's very standardized, who knows what might come Since there's so many HTML So let's make a change here. Let me go back to VS Code here. Let me close this tab and quit out And let me show one final version of And, in this version, I'm I'm going to open up app.py. And, in app.py, I'm going from the flask framework called a technical term. It just means turn something into JSON. So what does that mean? Well, notice that, down here, I have But, before we look at that, which like jsonify, let me actually do this. Let me open up also the previous version of this, This was the app-- the search route from Here's how I got q. Here's how again I did the escaping But notice that I also did this. If the user got back no results, then But let me show you two from last And shows2 in templates, shows.html-- whoops. search.html, what you'll see that generated all of that text, and again and again. So we're going to get in this third and final version here. So if I go into shows3, notice I'm building up a Python list of shows But, instead of passing I'm just jsonifying that text. What that means is that going to send from the is literally something that looks So if I go back to VS Code here and and I go over to my other I have the same response as before. And it's actually Office is going to still work the same. But if I undo that and go to inspect and now search for O, There /search?q=o, let's click on that. But notice-- and let me make this, even though it looks more verbose And this is the, quote, unquote, &quot;right when you want two pieces of software to Here, now, we have not only but I've even been generous and the unique ID, the title, sent the entire SQL database in a that my code can now use. So, when you think about most any modern When you access something and you are waiting and waiting and what has happened? Tonight, for instance, Watch the Network tab. And, odds are, every few you'll see some kind of response coming some other format, including at least its what's adding more and Indeed, if you open up the in the most watching-paint-dry you'll see probably more and more or document object model So I can't stress enough spent just a few weeks on SQL and now Flask together, That is how all of today's you too with your final projects. That's it for today. We will see you one last time [APPLAUSE] [MUSIC PLAYING]