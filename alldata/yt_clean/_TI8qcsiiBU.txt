Do you know how people only use T-Max to attach and detach from a certain shell, or maybe they just need a fancy split pane? Some even open multiple windows, and that's where T-Max ends for them. But there's another level of organization that some of you may never found sessions. Short recap. T-Max has three layers, paints. These are instances of terminals, windows. These are collections of and you have sessions which are a collection of windows. And while they're always there, for some reason, they're not first-class citizens far from it. Personally, I believe that's because of actual usage type of most users. They're utilizing T-Max as the old screen replacement for a detachable shell, or a multiplexer that isn't emulator dependent. I mean, T-Max works on every platform and that makes it a great choice. Without in mind, how can you enjoy separation offered by sessions? There are a ton of tools starting from the famous sessionizer script made by the prime agent. There's T-Max in nature. If you're into template thing, there are other plugins from talented devs like Josh Meteski, who created the T-Smart Manager, which was now rewritten in Go, and is now named Sisch. You also obviously have the native way to go, but that's rather hard. All these offer great options, but I wanted more. I wanted something that suits exactly my requirements. I wanted to have all the options, but still be simple and visually pleasing. I wanted preview of running environments. I wanted to be able to create delete, rename, manage the lifecycle of my sessions from one central place. And so I made this, the T-Max session X, because yet another T-Max session manager sounded bad and it was too long to so it works like this. Viewing the running session is as easy as hitting the prefix. Mine is set to prefix O, but by default, if there's no special config anywhere made, the plugin pops a window with a fuzzy searcher on top of the existing sessions and allows to scroll up and down the list. Choosing an existing session simply attaches to the view of that specific one. You can pop it back up at any time regardless of what you're doing. As long as you're in a T-Max server running, over time myself and amazing contributors with me added additional functionality. And so there is a view of a tree showing sessions and their windows. There is window mode where you can scroll the list in a more granular way going through all the windows inside all sessions. The cool thing here, as noted before, is that the preview on top gives you a visual peek into the session in case you forgot or want to see something or the current status without actually switching back and forth. With control R, you can rename a session, something that previously was done with prefix and percent only when attached to one specific session, not the most intuitive way. This feature is not supporting all shells and while I'm using the assage, you can find it failing on the other. Please open an issue or suggest a solution if you find that, for example on fish and other similar shells. When selecting a session, if the name isn't there yet, this becomes immensely powerful to me, where if a config session isn't already there, on my list I just created and will pop itself into the right path, or even T-Max and Zoxite takes care of that magic for me. To get the plugin, assuming you already have TPM installed and by the way, if you don't, catch the video up here for the flow or follow the link in the description. Open T-Max.conf and add the plugin, hit Ctrl-I to install, that's pretty much it. In terms of prerequisites, make sure you have TPM, we touch that, you want to have FZF and specifically the FZF T-Max script. I'll leave a link to both below, but make sure you have them installed. With these out of the way, you won't bat, which is an amazing cat if you don't already have it. And if you like the idea of Zoxite helping out with navigation, go ahead and install that too, but keep in mind it's only optional. It's important to note that FZF, prior to all 39, it isn't playing nice with the plugin. So there is a way to configure legacy version in the settings, but this means you're running two plus years old version of FZF, so you might want to consider updating that. By the way, if you're unfamiliar with FZF, it's one of the most powerful tools for any CLI user. You can fuzzy search over lists and files and folders, your history, and much, much more. I've got a video covering all of that and everything you need to know right up here. The power of Zoxite can be seen here just by running ZOmerXX, for example, finds an old path of my blog and sends me there. Combined with session X, this becomes one of the tools I love working with every day. But as mentioned, you can set it off and if you don't want the functionality or don't want Zoxite on your machine, for whatever reason, this is fine. By the way, if you're wondering, I'm using Charms Glow here to view markdown within a team Glow presents files with color and beautiful syntax highlighting, and if you find yourself working with markdown, go ahead and check it out. I spent 50% of my time around code and the other 50% I think around markdown, mostly because of my notes, reading any of them, obsidian integration, the video covering all of that is up here. Back to our story. Remember how the primogen sessionizer was all the rage? I got too many comments telling me this is how people work with sessions and I couldn't comprehend the fact that you need a script to create sessions for teammates, and you don't have a nicer way of switching between them, let alone deleting, renaming, etc. Other than the native ways, which are not the most productive ways to do things. And so I just integrated the same functionality into session X, setting custom paths will make sure that these paths are always on your list, whether the session exists or not, making them always visible. In a way, it's a tiny bit more efficient because you don't actually create a session if it's not needed, but it will always be shown on the list nevertheless. I know this isn't exactly the same, but for me, it does the job. If you feel like you'd like to add additional functionality or similarity to the sessionizer, feel free to create an issue or better yet open a PR. Let's see this in action. I'll use session X to pop me into a team accession, which should take me to the configuration path for team x.conf. I'll create a new line with session X custom path, and the value would be a comma separated list of absolute paths on my machine that I would like to see. After sourcing the configuration again with the running server, I can pop the plugin again and see slash test that appears on the list. Let's use something more useful now, like the user's directory, for example, to see if the plugin actually takes me to the path. And there we are in slash users as expected. One more thing to note is that when you create a session here, it'll do it with the document's path. When I'm attached to it, session X filters out the current session, assuming you opened it to switch to something else. You can turn this behavior off as well in the configuration. If, for example, most of your usage is actually around window management or session management, renaming, deleting stuff like that, this can be useful. I'll switch over to another window and pop the plugin back up to see the documents showing on the list. A nice touch added recently is having an absolute path hidden when the session was actually created to avoid clutter. This also helps with understanding visually when a session is just a placeholder from a custom path or a real one that was created. The amount of configurable parameters is really big thanks to a few incredible contributors from different window modes through hidden preview, changing its location, different layouts, window sizing and more and more and more, it's all on the readmeed document that perfectly. You can also change pretty much every key binding used by the plugin, its trigger key scrolling, deletion, renaming and most of the available features. If you wish to contribute, please feel free to join us. Session X is mostly one path script and while it sounds not as sexy as rust or go, it makes it fairly easy to get into the code and make changes. So while the plugin is fully customizable, there's still lots of work to be done. I'd really appreciate it if you head over to the project and star it and if you're up for it, open an issue, maybe create a small PR, any contribution will be greatly appreciated. And lastly, a small personal promotion. If you want to support this channel and you're interested in combining T-Max, near VIM and no taking with the system that you'll build from scratch, I invite you to check out a recently released workshop that I created, taking you from zero to a fully functional second brain with tricks, templates and the very essence and core concepts that you need to know to get yourself started. If this sounds interesting, the link is up here and in the description. Lastly, mastering sessions is no good if you don't master the basics by making them exposed beautiful and effective. So go ahead and watch this video right here to take you there whether you're a complete beginner or a long-time user. You'll find something there for sure. Thank you for watching and I will see you on the next one.