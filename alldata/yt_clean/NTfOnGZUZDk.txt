I thought today maybe we would talk about 'grep', a well-known command 1970s. What 'grep' lets you do is to search for one or more files and there could be an unbounded number of files of input. Or the input could be coming from some other program, for example as it is if you're using Unix pipelines. So you take some program and you pipe it into 'grep' and filter out, or show you, the things that you're interested in. And that's stuff that you can't do with a text One of the issues with 'grep' has always been: Where does that weird name come from? And so I thought, perhaps, I could tell that story, if it would be The way it came about - you have to put yourself back in the except me, was born. Let's say something like 1970-71 -- the very, very, early days of UNIX. The computer that UNIX ran on was a PDP 11. At that point it was probably an 11/20. It was a machine that had very It also didn't have very much memory. Probably something in the order of 32K, maybe 64K bytes and that's 64 Kbytes, not megabytes. And very small secondary storage as well, you know So, very very limited computing resources and that meant tended to be fairly simple and straightforward. And, that reflected not only the sort of ... the relative 'wimpiness' of primarily Ken Thompson and Dennis Ritchie. So one of the prop ... one of the standard programs that The UNIX text editor was called 'ed', and it's not pronounced 'edd' At least by those in the know, it's pronounced 'ee dee'. And this was written by Ken Thompson and I think it was a, basically, stripped-down version of an editor called QED, which Ken had worked with So a very small, simple, straightforward editor and the thing that you have to remember you didn't have actual video display terminals - not of the sort that we're used to today, or But in fact all the computing, all of your Remember paper? If you zoom down here you can see paper! This meant that there were a lot of It also meant that editors worked one line at but there was no cursor addressing, so you And so the 'ed' text editor reflected that kind of thing. Maybe what I should do is just a quick look at what 'ed' looked like? So, for example, there was a command called 'p', Which stood for 'print'; there was a command called 'd', There was a command called 's', which took a little bit ... which y'know, 'ABC' into 'DEF', or something like that. There was an 'append' command that simply said 'add some more text' and There was, of course, a 'read' command so that you could read information from a file, and there was that you could put it back in a file. a handful of other One of the things that 'ed' did very nicely was that, But what do you do when you want to have more And so you could say things like 'line 1 to line 10 print' So, this would print the first to 10 lines. 10 was that. But suppose you wanted to print all of the lines in the file? So there was a shorthand called '$'. So, I could say '1,$p' Or I could say: &quot;Gee! I wonder ... I just want to see the last line&quot;. give me that. I could even elide the 'p', but that's good enough. Or I could delete the last line by saying '$d'. Or I could That is sort of the line addressing. So far not very complicated. The thing that 'ed' added to all of that, and this is definitely So, a regular expression is a pattern of text - its a way of specifying patterns of text. They could be literal texts like the word 'print' or they could be 'Prin' and but might go on to 'Print' or 'Princeton' or 'Princess', And the way that regular expressions were written in the 'ed' text then you wrote the characters of the regular expression. and that would be something that would match the next line, anywhere within it. eSo the regular expressions in the 'ed' editor sophisticated, and complicated, than the regular expressions where, for example, a star means 'anything at all'. So, the same idea of patterns of text - a slightly different specification - a different way of writing patterns but suitable for occurrence of the word 'print' in my file&quot;. And then there I would be. And on, and on, and on, like that. OK, so that's the 'ed' text editor. We are a long way away from 'grep' at this point. Well, it turns out that at the time that this But, as I said, the machines you're working on are very very wimpy. Not much computing capacity in a lot of ways And in fact one of the limitations was that you couldn't edit a very big file, because there wasn't enough memory and the 'ed' so you were stuck. One of my colleagues at the time, analysis. The sort of thing that we would call today, perhaps, Natural Language Processing. And so what Lee wanted to do ... he had been studying something that, at the time, was the very some fundamental American documents called the Federalist Papers. variously, James Madison and Alexander Hamilton and John Jay in 1787 and 88, if I recall correctly, There were 85 of these documents But they were published anonymously under the name Publius. And so there's been a lot of scholarship trying It's well known who wrote some of them and others are still, I think, a little uncertain and so Lee was interested in seeing by textual analysis of his own devising, figure out who wrote these things. So that's fine. But it turns out - I mean down in the noise by today's standards - wouldn't fit. And so what do you do? So one day he said: &quot;I just want to go through and find all the so I can look at 'em!&quot; And he said this to Ken Thompson and then went home for dinner or something like that. and the program was called 'grep'. And what 'grep' did was to go through a bunch of documents - one or more files - and simply find all of the places where a particular regular expression And so the way ... it turns out that one more of the commands in And what it said was, on every line that matches a particular so, for example,'print'- I can then do an 'ed' command I'll just print it&quot;. So, I can see what my various print Or I could, in some other way, say 'g' - and some other regular comments in a program, or something like that. So the general structure of that is 'g' followed by (in slashes), a followed by the letter 'p' - g/re/p - and that's the genesis of where it came from. OK, and so this is in some ways the genius of Ken Thompson. other program and just trimming it out and then giving it a name that stuck. Let me add one thing - 25 years ago [it] literally was the spring of 1993, I was teaching at Princeton as a visitor. And I needed an assignment for my programming class. And I thought &quot;Hmm!&quot; So what I did was to tell them - the students in the class: It was at that time probably 1800 lines of C. &quot;Your job is to take these 1800 lines of C and convert them into OK, and you've got a week to do it&quot;. And I told them, at that point, that they had they knew what the target was. Somebody had already done 'grep' so they knew what it was supposed And the other thing is that it was now written in C. And of course, they also had one grave disadvantage: