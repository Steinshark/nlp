[Music] Back in 1999 or 2000 I had this web design company business, and we were doing some web design for also doing called Single File which was this book, build. And I was building it out of PHP, I didn't and I started making this thing. And I got pretty online asking for help, it was a general call to do this?&quot; you know, this is way back before answers, there were no answers, so help! Someone! Back then I was here in Copenhagen, and I was just a big fan of the company. Right vs. Noise, that I followed religiously right from this was a design company that was focused more on or anything else that I associated with design at couple of years and then in 2001, Jason Fried, one partner to this day, posted on the blog a question like &quot;Hey, I know the answer to this!&quot;. This is a enjoyed reading and learning from in the past two explaining how to do this thing he wanted to do I wasn't an expert programmer really His answer and his help was so thorough and there that made me feel like he really wanted to help help. And so we started talking back and forth and he's like &quot;Can I see the whole thing?&quot; and he's like &quot;This sucks, we should really start my relationship with David actually began: he let's do something better then&quot;. And it was a I got my first computer when I was 6 years old, was my first exposure to programming, typing wasn't very good at them, I only made a couple Next up was trying to learn programming a programming environment called Easy AMOS. It it wasn't easy. So I failed once more to learn basics of variables and loops and conditionals how to program. So I gave it up once more, and 1995 getting involved with making HTML that for me to be able to create something!&quot;. And with another programmer in PHP. and that was time I'm 20 years old, this is my third attempt And that was really the prep I had before a So the first time I met Dave was in we had been working together for quite a just on Skype you know. So I'm at the John building in this big plaza waiting for him in the morning and so I'm waiting there and I'm is that him?! and then no, it wasn't him, but corner and he's wearing all white rail thin white capri pants, white shoes. I'm like &quot;there's actually you know, I'm thinking he had white on now that I think about it, I'm not exactly After we'd worked on this book thing for a then actually a few because we were a web design a few more things together and then we started projects. And so we had this idea to build this was still a student at this time, he was still in have a lot of time, he wasn't a full-time employee the back end of Basecamp, and at the time he's computer equipment&quot; because it was very hard for time he came to the US - this is probably illegal, him a laptop or I gave him a, you know, whatever for Basecamp, and he would only give us like 10 2003 is when we decided to start on Basecamp. We and most of the organization around that had I think if they try to organize projects over how to make web applications, can't we just for us to do so we don't have to deal with of the file is the latest and what's left to do and I had just earlier that year discovered and Dave Thomas who were using Ruby to illustrate in programming magazines. I just thought, this is of all I hadn't heard about it before, and I'd at that point, that was intriguing. It was out and it looked just like pseudo code, you know how sometimes you won't write the exact right syntax, English. And that's exactly what Ruby looked like. And here are these two titans of the industry, very enamored with the language, expressing that if they could only get permission to do so. And we can choose to do whatever we want, so I got to I remember in the early days of building Basecamp, but David's like &quot;you know, I'm going to use cause we've been been working in PHP previously never heard of this. He's like, &quot;It's all right, I mean really I truly I didn't it's not my job to tell him When we started working on Basecamp in 2003, I start to develop a taste for what I liked in to express that taste. It really wasn't until language that simply clicked for me. And what the immediacy of PHP being able to get Hello fuzz together with a really sophisticated well language. That was the appeal I found in Java software pattern and all the other stuff that about. And Ruby to me brought both of those of those two things together. And that's where I I had a two week window that I gave myself application, could I get HTML up in the screen to a database and could I simply make those things were not a lot of frameworks, there were certainly access or with the web development in general. to build the tools myself in order to be able to system we were creating. It wasn't because I had I had looked at other things in PHP, I looked at wanted. But Ruby was the language that gave those that wasn't just functional, but it was beautiful. Basecamp, and during that process I extracted to create this grand web framework and release of releasing it originally. I simply needed between the summer of 2003 and the release of gestation period for the framework itself. But I because I had this vision right from the get-go the first version of Rails needed to be good and in terms of the documentation. So I spent a the release of Basecamp, polishing things up, Right here behind me is where I lived So when Rails started to take off, it was about it. On the one hand, it was great to see much excitement. And at the same time I was the vision I had put into Rails. More and some of those people were interested in pulling very easy to lose control when something like with other people's contributions that you put If you say no to someone, you are risking a I said no to certain things I did not want at a early Rails conference in Canada where and I put up those words as a way of expressing up with what I considered an unreasonable demand up with a threat: &quot;Unless you put this thing into you don't get to tell me what to do. I'm working and I will solve my problems, and I will protect be your servant, I am not allowing you to buy I love open source so much, it is not a commercial you don't get to tell me the direction the Rails thank you very much. I'll take input, absolutely, because thousands of people contributed really [Music] I arrived in the Ruby Community cause I thought I would dabble in them and just try things out in just it stuck with me in a special way that I kept didn't try to analyze it too much at the time. in Java and PHP and Pearl and other languages, I isn't Ruby here?, Why isn't Ruby showed up?. Here list, &quot;I've got a plan&quot;. It's like, are you coming gave you these commandments?! The way to develop we haven't seen you before! So it was it was I was like: &quot;Is this guy an $%/&amp;!* or does little bit of both: hear this guy with like the right ideas and willing to set those ideas they were good ideas. Sure, some of them were pitched as anything but that. The active now it took it from a pattern to being a framework of electricity and a Ruby community that was of aliveness like, what's going on here? How do with this person?!, and it varied from tolerate [Music] I first heard about Ruby on Rails at I was working for Brigham Young University at permission to go to this conference because I language and was doing a lot with Ruby on the so to speak. And I went, I was actually presenting on the side. It was not a big conference, total. But I remember sitting there and one of who I' had never heard of before, it was brand new just barely released. And Rails. He really was pushing a better experience there holding an imaginary piccolo to his lips and he was going to lead programmers to a better For about the first year, there was no one else I took patches from people, we took patches over This was well before GitHub was created and made to the code itself until I think almost a year in. which were basically just a group of people who best work. Those people got access to the code I remember being struck by just how excited he about it. He never showed a line of Ruby or Rails why he wrote it, what he was hoping to accomplish especially those who had heard about Rails, it. I think there were some there who were hoping but his was all about the charisma. His excitement it was easy to see that this was something I mean this was 20 years ago almost, you could see Jamis ended up then being the first programmer off. And I remember reading Jamis's this guy is really good!&quot;. He just had such a and I was eager to be able to work and that's how we got started, that we hired were all hired out of the Rails core team or Something that was exciting about the Rail's from 37signals. I knew about 37signals, their toes into Ruby, it was interesting. Like, here? This wasn't just somebody coming up it was somebody doing something in a 37signals design world was showing up to the Ruby world of a neat interesting curious kind of odd. So it didn't know what it was yet, but the fact that it That reception was of course very warm and seeing something interesting happening in Ruby. bit more mixed. Of course it was, in part because I was a little brash about it. I knew that the odds such an unknown programming language, couldn't went out shouting! I did a bunch of controversial certain problems and Rails implementations of the as poking Java developers in the eyes. So of was push back and this was why it was so helpful with real success and growth and paying customers itself. Things like the 15 minute Blog Video and solve this problem in Ruby on Rails, what does it Here we go, I hope you can read the text. The 2002 I moved from Germany to Canada, I tried to and found out I couldn't because I didn't have kind of things. So I found myself with time. My you've been talking about starting a company do it&quot;. I didn't feel that spark anymore during was reclaim programming as that passion hobby opportunity of &quot;I'm going to build something snowboarding and while I go program for fun&quot;. unsuccessful on that particular plan, because because of all the snowboarding I was I just like you know online stores! whereas I couldn't find a good online store. It I tried to use different packages they all well, if I can use anything, like I don't have no matter what it is, it just needs to respond to just love to use Ruby!&quot;. Like, it's just this I just realized my brain was running on Ruby since got just very lucky, that I was paying attention talking about him doing the thing I wasn't brave everything that's needed. This may well have been file back, the details are little bit hazy at this I tried it and I just fell in love with it. I was was certainly the only engineering team on planet Everyone else who was building online stores productive. Simply because it's hard to for people difference of effectiveness, of what Rails did and it just became a very natural thing based on turn into Shopify afterwards. It just seemed see the influences in it, right? I loved I love working on the technology. Being inspired you thought you could, or you were allowed to, or underexplored, and in fact literally what Shopify I don't remember us calling it a core team from those beginnings of Jeremy and me It wasn't long before there were more Sam Stephenson, some of these others, Michael And it really was a wonderful thing. I had but there was something about all of us having early stage on something that felt like it was Being part of her core team meant that you the quality bar that he owned. We had that's where the real conversations were about, what would be the next features. And this is and it's still active. We have much, thanks to another thing that grew out of there was no GitHub. The concept of having much higher trust affair back in those days. That created it for us. Like we, a lot of us, came programmers afterwards. Rails compelled me to gave me the ambition to reach high, because a lot than inherent. And it gave me the configuration When I first released Rails it wasn't source. We had been building our business, had been with open source tools. These were to work with the web, so when I finally I didn't even think twice about it. I remember one of the most fascinating to be part of in my life, was a conversation and definitely a few others, and it was one where we're building important companies, they with small teams than larger teams with lesser A) Shouldn't we charge money for Rails? B) Should comparative advantage?&quot;. These were ideas that source is important, in fact MIT license open Rails extraordinarily successful&quot;. And I'm that's not something you can just sort of decide. be successful, that is like an outcome that happen And he said &quot;No, we can decide this&quot;. When this right? I'm just like, I'm trying to figure out still seems remarkable. Because you know, and in a lot of people who have kind of that kind of of market dynamics, attention, drama, and frankly, degree during those years accidentally, playing to get work done that I wanted to get done. When I was first hired by 37signals, they asked deploy Basecamp. At the time, Basecamp was server all on one machine, which is laughable now, two machines, and we had to figure out how to became my baby, Jason and David actually told though you wrote it for us, this is your baby, extreme fulfilling, to be able to work on this There were some really key moments in early but it was the starting point of what makes that really kept the sense of momentum. Rails release. It was a very stable early release is what it's like to be a kind of mature web about like the audaciousness of we're just and everybody's along for the ride, and everybody same year, December 2007, when we cookie based sessions, brought things like named well, it was a look at what it looks like One of the big criticisms of the detractors scale&quot;. That was their mantra. They and we could point at Basecamp and say, &quot;This is million requests a day, but we're serving Isn't that at the end of the day, isn't that the people pooh-poohed our accomplishments, they were a point where we're like, &quot;Oh, well, I number where we can't go beyond it. We're It actually became a bit of a meme joke, &quot;But will said in the early days of Rails. But that question FUD: fear, uncertainty, and doubt. People who bring up scalability, because it was something applications like Shopify, like GitHub, or even really had a foundation. In reality, Rails was Various people took this pretty seriously, some system at some point as well documented in is pretty fun. It's like, if you used to write are really fast. From personal experience, traffic. It's about 10% of e-commerce global. by the way, if you would look at it, same folder just generate on your laptop right now. It's on of code of Shopify are in Ruby. We are not like and Ruby is the best tool for a lot of by the thousands of engineers in around Shopify. build. Like, I don't know who is supposed to with Shopify? Like, we have uniquely complex, You know what's harder to scale than performance scale for 20 years and still feel good. don't get it--like, that do-over is On the security side, it was a bit more to do explicitly to prevent common attack efforts to ensure that security was a thing The next big release for me was rails 2.3 in March the release that felt like Rails was kind of had web developer needed to develop small scale, that time, jQuery was coming on the scene and it. There were energy happening in the JavaScript arriving. After Rails 2.3, we had everything with the way all the tools behaved. There weren't It felt like we were at the sweet spot for web was a new Ruby web framework Rails 3.0 was that, that was like that that was a, that took some doing. Oh my god! have frameworks merged ever and became We had a competitor. Merb came on the scene as a by being faster, lighter, slimmer, doing less. fire under us as Rails developers, we wanted those to offer, and it was a competitor that really Carl from the Merb core team showed us the way. the internals of Rails to be configurable, a framework like Merb from it. The Rails and This Ruby approach, this Rails not all, not most, it's not better. But for It's not a bit better. And this is why you why you see the love and the hate, and very little world is like a small group of people who really that are being solved. And most of the spectrum is exists or is good or bad, doesn't matter. Rails? it just it comes from a different place. I you know... honestly like an honor it's been important. I know these terms are so hang out in a IRC channel that you got invited special. I would be a completely different human gone the way it did if I wouldn't have, if some of rearview mirror would have gone any which other Just the the community that we were building, the friendships that we shared. And it's just felt so natural and so exciting. And to that degree. And it was really fulfilling Seeing the Rails community seeing others have that kind of experience Each person has the opportunity and I can help create an environment them and respects them. But that's all appreciation for others being able to share in it's been the experience of a Things like Rails, things like Basecamp, things. These things don't happen or something in advance. These things it needs time to unfold. And I think that As it says on the website at the moment, Rails IPO with a tiny team. As you get started, we have is able to make a huge amount of progress in the framework, the code base has never I have so much respect for what David has built, hate it and do not deny its effectiveness ever think that Rails is what it is despite it's as successful as it is, as good as These things are not separable. Ruby on Rails is full of people who were who are not trained to be programmers, who came interest in creating web applications, were able it was easy, because it did not require this going. Ruby on Rails has, from the outset, because if you can't get started, you so many people is so tall. I faced that wall programming several times in my life. Ruby on down really low, really simple, having to learn to become the top person programmer in your have the credentials. I love that part of Ruby have been able to create a career in programming