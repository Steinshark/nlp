Hey! Did you ever wonder how hard it would be to mathematical concepts? Just like, for example, Grant &quot;3blue1brown&quot; Do you maybe even have a little bit of knowledge In this case the Python animation library Let me give you a very quick example of what You might be aware of the fact that the unit using the complex exponential function. Lifting the corresponding curve into three allows us to see the exponential functions sine, respectively, simply by changing our In my opinion, animations like this make all more approachable and easier to grasp. This is why I want to help you learn how to like that yourself! You might wonder, &quot;Who is that guy even, why You are right, I have not introduced myself My name is Benjamin, when it comes to mathematics I actually did a PhD in that. But, more importantly, I am currently one In other words, I've been working with Manim As a hobby I help out when it comes to fixing contributions of other volunteers, and making to time. Now, with that out of the way, let's get to The first part is about, well, important things So probably the most important thing to know that there is not one single version, but of Manim floating around. And it's quite easy to get lost in, well, the old version instead of the one you should version. This is what I mean when I say &quot;Manim&quot;, and Packaging Index is called. It's just &quot;manim&quot;: no manimCE, no manimgl, So when I speak of Manim, I, in most cases, The other version that usually pops up quite or manimgl. When you see code, you usually see a reference version. That's the version that Grant has written more or less. For all practical purposes however, it's recommended version. Simply because it is much better documented. The original version, there is some sort of But the community maintained version has proper And yeah, needless to say, this video also Which brings us basically already to the next Manim? I won't go into details, and this is not a There are two ingredients basically that you recent version of Python; everything from And on the other hand, you need FFmpeg, which Manim uses that to stitch together several Optional, but very useful is a LaTeX distribution. For Windows, that's usually MiKTeX that is is the way to go. There is also MacTeX on MacOS, but yeah. Details for all of that can be found in the if you say, well, I don't really want to read, the process -- I'd recommend against that. Because most installation videos are simply The community maintained version has moved were created before that, and nowadays the So my recommendation is: go to the documentation a look. You see there is this installation section operating system and then just follow the In most cases this should work as expected. So that is regarding installation; as I have more. But something else that is very important resources. Pretty much all resources that the community on our website, which is just manim.community. We can visit, it looks like this currently, We even have some examples that you can view in a little bit. If you are specifically looking for places issues which tend to appear from time to time, consider is our Discord server, which you Reddit is also sometimes quite useful for which you can ask your questions in, all of is the GitHub discussions thing where you usually by developers or other people who time to time. The most important thing when looking for entire code that you are trying to run, and If there is an installation issue, exactly the input, post the output: we need to see Don't worry about if it's a long post then, for us to figure out the problem, and then Which brings us slowly a bit closer to the Specifically for this video you don't need PC because what I'll provide in the description where you can run the examples that we'll in your browser, you don't need anything else do everything from there. Link for that is in the description. Okay! It's time to actually look at code now. I want to start with a first rather simple Before I open up a code editor and, well, still in this presentation style. We'll cover this line by line, and in the code into the actual video in the end. So let's get into it. The first line, it's the line where we import Then, the next relevant line is the line where Now, Manim's design basically works like: Every class will have a particular method, this construct method, your animations will Or you're going to write your animations in You don't need to know too much about object-oriented this, conceptually just think of the class canvas and the construct method is more or should be constructed. Looking at this again, and in case you do then you will see that we define a class of inherits from Scene, and Scene is a class So Scenes are these special sort of canvas-like on. And well, I've already mentioned the special self, and you can think of this &quot;self&quot;, if as the scene. So if we then use some command self.something, - which makes sense and is actually quite Okay! Let's now see what the next two lines do, I define two variables, one is called blue_circle, well, it would be pretty disappointing if Indeed, we create some Manim objects, or Mobjects the color blue, and a property that is the You can see that these capital letter constants, these are also provided by Manim. Just as the classes Circle and Square are. Those are Mobjects, those are the things that At this point we have created two variables square. What has not happened yet is: those are not You are basically holding them in your hand onto the canvas, but this has not happened This is very important! Just instantiating these Mobjects does not And this is actually quite useful, because should appear on the screen. This line is about positioning. It tells the green square that it should be Something you have to know in this context, will be placed in the center of the scene. We'll see how that looks in a moment; in your should now be right of the blue circle. Blue circle in the middle, and the green square And now in the very last line of our construct screen. This is the step that actually takes the things puts them onto the canvas. Asking Manim to render this scene now will this. How exactly can we ask Manim to render this Well, there are two main ways that you should You could either do it the &quot;normal&quot; way, I'll we take this code that we just discussed, the Manim command line utility from the terminal. In this case it would be manim -qm -p, then you want to run. And it will render the file in &quot;medium&quot; quality, the output which is why we have this little The other way how to generate output is if like the interactive notebook that accompanies There we - again, example above - we import in a different cell, and then in the same we add on top an instance of this manim IPython %%manim -qm, and then the name of the scene medium quality. We don't need the -p flag because the output to take care of that separately. To make sure we are not moving too fast, here's seen, and the concepts we have encountered: basically the animation canvas where all of upon, and then arranged somehow, and then We have encountered Mobjects; Manim objects: There are many many others, there are like a number plane with grid lines, you can have other things. We have also seen already that when we create properties; in particular we have seen color are lots more. Especially if you're looking at more specialised We have also seen some global constants; in and some directions. In the last example there was only RIGHT, LEFT as well, actually also IN and OUT, but You might wonder, well, now I know that there these now, but where are all the others, and That's very important, we have in our documentation manual, and the reference manual contains classes that Manim ships with. If you are looking for something, then go it will bring you to the corresponding section there is some documentation for whatever you Now, let's do a slightly more advanced example I have opened a file, first_tutorial.py, and So we have seen Circle and Square, two rather Let's try and look at something a little bit So I'll create a new class, SecondExample. Again, this should inherit from Scene. We write the construct method, and now I want Meaning that I'll need some sort of axes. And actually, the corresponding mobject in We can specify, if you have set up Visual know the signature of the class, which sort case I do want to specify an x_range and a that the axes will contain. So we have x_range, let's maybe go from -3 creative. Let's see. And let's add it to the scene and look what So self.add the axes. I save the file, and next I render the thing. So, I call Manim, medium quality, with the and the scene is called SecondExample. And what happens is: yay! We generate a Mobject which looks like a set Alright. Now to these axes I want to add some sort I want a variable called curve, this should And to plot it I can use the plot method of ax.plot. And for specifying a function I could either an extra thing, and then pass this here, or inline functions are specified using the keyword So I say lambda x, x should be mapped to, and maybe that over 2 so that it fits the Maybe, let's see. And I can also specify the color, let's do The color should be, let's put RED. Alright, now I have a variable containing for it to be visible. So, I say, I add it to this add-statement what do we see? Excellent! We have the plot here. Great! So, now what could we do next; let's get even open it again. I want to plot the area that we see here under How could we do that? Well, there is fortunately, we could look area and we will find that our Axes also have So I can define a new variable, area, which We want to get the area, so the axes should we need to pass that again, and then we should That's the x-range in this case, and I want to 0. And, let's see what happens if we add the Save and render - and there it is! So now we have created a cute little scene and for this function we have even visualized interval. Cool! So, there is one pretty substantial topic is animations, actually. And that's what we are going to do now. I do want to say a few words in theory again, One, what is the general mechanism? We have seen that we can add our mobjects add method of the scene class, which adds But what other mechanisms are there to well, One thing that exists is Scene.wait, so we and then maybe specify some amount of seconds. This creates a pause in the video, in the So if you go back and do that in the example you would see that you would suddenly create video. It would just be the image you've created And now the more interesting thing is probably animations. Now what are animations? Animations in Manim are, just like Mobjects, For example, there are a few animations that are the Create animation and the FadeIn animation. There are animations that can change mobjects, this is the Transform animation. There are animations that emphasize certain Circumscribe animation. And of course, if there are animations that remove them again; in this case it is Uncreate Okay, now I have thrown a bunch of names at coding. Now we want to animate things here, so we create themselves on the screen, so we want axes. Let me delete that, and let me add self.play. We want to play the Create animation for the And just look at what happens if we do that. So let's go ahead, I render with the same we have the preview of the file, which is And go! Something happens, a video opens, let's play Nice, we have a one-second video now where Okay, we want to see more. And sometimes it is also good to add a little at things before the video player closes itself, that. So what I usually like to do is I add self.wait video stands still for like 2 seconds in the We have the creation of the axes, let's now and see how that looks like. Fancy. So, first the axes are drawn and then their What should we do if we wanted to draw axes Well, fortunately you can pass multiple arguments so we can just take the thing from the second We will find, when we run that again, something play that again, that the curve and the axes Both appear at the same time. Nice! Let's use a second animation for making the the area. Alright, let's go and render that. Okay, so first the axes appear and then the Very nice! I would like to make the creation of the axes now this happens very fast, and there is a the play call or the animations themselves, You can add the keyword run_time equals, let's then it will be passed to all of the animations You could also specify different run times So, let's try to render this. Okay now, exactly, the axes and the curve So you see it's substantially slower than Let's try also what happens if we try and let's put run_time = 2 seconds for the axes, Now the curve should be really, really, really Yeah, that it is. So that is how you can control the play time Okay, we have the FadeIn thing and what else... that's all that I wanted to show for this Let's do another one where we animate some Let's go ahead and create a new class, this we want to have a look at what happens if So let's do that; again, it has to inherit and we create, just as before, a green square, should be green, otherwise the green_square We have a fill opacity that we can set or I put 0.5, because I like that. And, first step, I want to create the square; yet again, this time I want to use the DrawBorderThenFill We'll see it's slightly different to the Create Then we look at that, that's already enough SquareToCircle is the new thing I want to It's rendering, and here is the animation. So it does exactly what the name of the method Mobject just like the Create method, but then it, it fades in the fill afterwards. Okay, so we have that, and now I want to create again, because why not. blue_circle equals a Circle, the color should matter. Let's again put 0.5. And now we play the transformation. We transform the green square into the blue And then we maybe wait at the end of the scene So, self.wait, let's put 2 seconds. Okay, let's render and see what happens. There it is, and first the square is drawn, Pretty neat! One thing that we haven't looked at yet from previously is the Indicate animation, so we And then also the destruction animation, so investigate. And while doing that we already, we will actually see what happens if we try to FadeOut the Because our green square has morphed into So self.play, FadeOut of blue_circle. What we would expect is that the scene would So let's try it. Here is our animation. Square, into circle - and then you could dark again. But the circle is still here, why does that That's actually a weird thing that Manim does, Transform animation is that the first argument Which means that now after this line here, been played, the variable named green_square So, if we want to keep this as-is, we would which is a bit ridiculous, but let's do it Green square fades in, morphs into the circle, You could work around that by using a different so this is a different transformation that the target mobject, meaning that after this So if we try now to fade out the blue circle, the square, morphing into the blue circle, So this is the difference between the Transform We might fix this at some point. Okay, one last thing. Let's try and see what the Indication animation just called Indicate, the blue circle. Could have also just looked into the documentation, more fun I suppose. First the square, then it morphed into the this little increase of size of the circle does. It colors some mobject yellow and makes it in and thus makes it pop out of the screen. Which is pretty useful to draw the attention screen. Okay, I'll leave it at that for the moment. We'll continue our exploration of Manim in Until then, I want to know from you: do you Should some of the content you have seen in documentation? If so, which part? Let me know in the comments below! Don't forget to leave a like if you enjoyed this to come. Thanks for watching, and see you again soon! [Calming music outro]