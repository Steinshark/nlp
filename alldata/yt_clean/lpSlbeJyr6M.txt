Rust will make you hate JavaScript. When I was learning Rust, the same comment everywhere And this video, I'll walk you through you need to understand as a JavaScript If you stick around to the end, to start learning Rust. Today, Rust has been the favorite eight years in a row in the StackOverflow the JavaScript ecosystem. We've got Turbo Even existing tooling is moving to rust. Both Veit and Parcel are transitioning and Tailwind has planned Now aren't you curious? Could you learn Rust It might be easier than you think. Let's cover these five high level I wish I would have known before learning but I think you'll find that this syntax will come much easier to you. The first key concept is In other words, there's If you're familiar with TypeScript, Since the browser can't read TypeScript. You use BABBEL or some other tool to vanilla JavaScript Rust doesn't target So you'll need to build your code before running it. Memory Management. How Rust manages Most languages either handle memory or give you complete control These two memory choices are opposite Garbage collected as you don't typically have to worry Buffer overflows and the like. But you sacrifice your ability to control Rust follows which gives you control over memory, to help you avoid many common pitfalls You still manage the memory, but Rust If you violate a rule. Rust won't compile your program. So what are these rules? First, each value in rust has a variable It's responsible for the value. And very importantly, there can only be one holder Here I have a string, Chris. Currently the variable name is the owner. I can pass that value to my function but at that point And that brings us to the second rule. When the owner goes out of scope, I can't then access the list again So name owns the string, then it's passed to print string, And finally, once it's printed, Since its owner is out of scope the value would live on in memory which can be ambiguous. In rust, it's very clear when the owner moves out of scope, These rules are the special sauce Now I know what you're thinking. Wait a second. How can I ever pass any values That's While values cannot have multiple owners. Functions and other calls can borrow which belong to other owners. Again, here rust is explicit. You add an ampersand We're getting a little ahead of ourselves, but borrowing a referencing of value And here I think an example would help. If I let you borrow my car, I'd expect you that would be immutable borrowing. You can borrow it, If you were my mechanic borrowing my car, though you want to improve That would be a mutable reference. In other words, you can change it Though I'm still the owner in this case names I let the function use the string since the owner retains the value. That also means I can pass a reference This brings us to variables and mutability and rust. All variables are immutable by default. In other words, they cannot be changed. To mutate a variable with a mute keyword. So for instance, if you wanted to pass a and now the references mutable meaning while it's borrowing it. And since the variable name I can pass the mutable reference In practice, JavaScript while let mute works Since rust is explicit, it's easy to tell It's not dependent on the type, if it has that mute keyword. So here count cannot be modified As a JavaScript developer, Hang in there. We're used to changing around but that flexibility introduces For example, you've also mutated the array in place which methods mutate Here we've mixed a specific value. The last item in the original array Does last item mean the last item You'll have to manually track down in JavaScript and rust, First, you have to mark the array Only then can you mutate its values. But the changes is explicit and clear. The second difference is that you cannot You can either have or any number of immutable references. For this reason, some rust developers and shared immutable. That was a lot. Mutability References Ownership Compiling. Let's take a quick break that will look very familiar to you When rust was being developed, they built its package manager cargo So it feels very much like AMPM, but with superpowers, it handles packages, There are lots of other similarities too. Instead of a package that JSON file, Instead of packages, you have crates and you can explore all 130,000 An online registry like NPM Jasco. But you'll notice like the comments syntax, the structuring, Let's jump back into the overview by Now, if you're familiar with TypeScript, this is going to look very similar However, Rust gives you way more options It's a static and strongly typed This means every value must have a type and that type is enforced at compile time. Sorry, whenever you feel like it Like TypeScript. Rust can often infer types for you, It can infer that my NUM is an I30 too, While using you can provide more direction with an explicit declaration in rust You don't need to know them all by heart But as a brief example, instead of the single number Rust gives you size specific options So that's what, more than 20 different number types, But what you can control instead of the inferred I30 two, from about -2 million to positive 2 In other words, I can type this number as a U. Eight which reserves space for a number to positive to 55 as the U means unsigned. That's quite a memory improvement. There are lots of other types which are custom data types that look and Enemies which are lists, Again, the specific syntax here in your journey. Just know that you have to give everything and that you have lots of options. This also means there's no any in rust. Sorry, I know. That's because rust forces you to handle And that's our final topic. Error handling No language but rust forces you to handle them. Rust divides unrecoverable and recoverable that should stop your program, Your program will stop immediately and produce a trace to the here Rust provides lots of tools to force you Let's talk about just two matching We'll call the divide function Note the match keyword matches but it forces you to exhaustively handle When the divide function runs will get back a result type, Okay. Or error The divide function then returns an error and the result for any other value. You may notice that you don't have to say and both the F and else blocks Understanding will prime the path Now I promise you for learning steps. Unlike the jungle of YouTube videos, with 20 ways to do everything a JavaScript Rust gives you a defined learning path. Start by going to rust lang dawgs learn. Here you'll see three steps. The book is a comprehensive There's even a new interactive, with quizzes and fun projects Second, there's an official course that focuses on syntax You can even run it in your browser. Solve each syntax error Third, rust by example is a collection of examples Each example is heavily documented using actual code examples. Before I mention did you know that there's official editor display errors and more Rust also includes a built in formatter that works like s lint. And since rust is static every crate has full documentation Rust feels safe to write and strong opinions and how you should The fourth and final tool It's famous for its clear If you ever get stuck, this example and teach you rust along the way. So there you have it you'll need to understand Learning rust Once you learn rust, spin up a full stack a command line tool with clop, make a game And if you're interested in more tutorials Thanks for watching.