I'm going to talk about the focus of our course So let me explain what kind of areas in this In fact, because this is a course, for beginners, assuming the the course taker to have any language before, not even not even the problem, science. So, we will, we will focus on problem from the very beginning what problem solving second focus of this particular course, is why Python is so important, particularly for the main core focus is to learn Python, obviously, to solve a problem. And once we know that with, then what is Python, how to learn it? focus of this course, obviously, we will start which means we will start from how to install and then we will see what are variables, I we will be moving on and on and on to data transition from 02 onwards, that transition you know, so far, in the course, that will very, very easily getting the understanding So in this Python, we will include all concepts after I mean learning, despite on the way this Python, you will be having an understanding here are explained in so general way all over but the concepts are expressed in so general for practice are so generic that you will be having understanding of programming languages of this course, actually, the whole course about Python, it teaches you problem solving, languages and how computer can be used to And and using Python, of course, and then that are available in Python, because they very easy to use, and very, very powerful for data understanding for visualization, what we are not focusing at because that's are are are the things that we are not covering, programming, we are not covering exception or any general kind of tasks that are doable Everybody solves different problems every some are difficult. And yet some are impossible But think about different instances of the again. For example, sorting the sale records. with respect to the sale value. And we have of instances if that number is huge, the optimal automation is possible, but how how to come with a general solution that works for every But to get that solution running on a computer Problem Solving deals with formalizing a general And programming languages, like Python deals Python, as, as we will see, makes the transition much easier and quicker. And that's one big of words. Let me take an example to clarify video. And I will make everything what I said Let's dive into an example to see what I just B. And your friend B is always willing to And then a just said, I want off just for He said, someone have to do my job in my absence. problem? I'm available? As always go buddy, friend. Okay, I'm leaving, wow. And be just your job? At the end of the day, I'm going do? And then he said, after every eight hours, sales. So that's what you have to do. He said, that email of the customer from where, where sales records. I mean, at the job place, there email of the customer with maximum sales. I do with the email that I just picked? Then priority records, just write that email after records. And then be said, that's it. That's he said, Yes, that's my job. That's all. No, a call from B. And B said, I don't really What to do? Focus on again, I'm reading this step by step what to do? I have sales records eight hours, what to do, I just messed everything call, he just described a procedure to be let's see the solution. He said number one, several columns of the record, the customer email, the customer products that he buys said, he said, start from the first record, then, then after that, go to each next record sales. Obviously, once you have focused on of different records with each other and will maximum sales. Number three. If there are more than one records with maximum value let's say is 100, whatever the units five records with the maximum sales 100. Then three, that if there are more than one records from top to bottom and ignore the rest I mean, five records with maximum sale value, which pick that one and ignore the rest. That might policy, but just do that. And then the fourth you found in step three. In Step three, you see the email address and write that address eight hours, then repeat this process, see after every eight hours, I'm gonna repeat solution a is communicating to be in in this gives a precise idea of what to do. Still, to be is maybe asking, for example, B may that person who don't know how to find out question we might may ask is that when when priority rock records, where should I write or, but at the end of the day, a solution this kind of if you see the solution, although be more steps that should be added, but if this is a general solution. This is a general instance, but every instance I mean, after records, and you have to do this procedure after that, that after that eight hours, you after every eight hours, you have the same, is different, because the records after eight says whatever the instance you are right, in, just perform these, these steps, a step step solution is is one module of the one step by step solution is called algorithm. algorithm. Obviously, the step by step solution in plain English or in natural language, you explain these step by step solution. So, the meaning keywords you use in your step by step your solution takes place. And going from in plain English, going from this to a more that can that kind of work that one step that will see in the next video will be called will be few steps that will take us to the languages will solve the get the solution this video i i wanted to explain you that mean, coming up with a coming with coming that hard, but communicating that solution procedure that can solve every instance of step treatment of the procedure. And those and they should be unambiguous. And if a particular might be broken down to further steps. But day is called algorithm. Now that algorithm later video that there are better ways of or better than natural languages. So, so, step by step solution of that, though, every by that step by step solution, which is called see how to actually how to actually eliminate to incorporate the uniqueness of understanding concepts of pseudocode. And after the pseudocode, to any programming language and we will see generally think, I mean, it's very easy, the to see you in the next video and I'll be explaining way. And, and in the same video we'll be focusing off of the actual core of any programming video. Okay, in in the last video, we were is and how to express that any any algorithm step procedure. But, but how to express an to have plain English to or any natural language natural languages are normally so expressive, multiple meaning. So, it is it is a good idea an algorithm such that each and every statement is is to express algorithms using flowcharts algorithms. Here we are taking. The problem of different employees of some company. And employees, let's employ one employee to employ employees in a company and having each employee credentials. And then let's say the pay is has worked certain hours for example, eight might be let's say 100 units, whatever the employed to might have worked for example, might be 200 different employees, they might and each employee can have a different hourly or the or the job nature the employee is doing pay of all employees, one by one, the procedure they differ for employee one, the value of employee to the procedure will stay the same so what should be the procedure, the procedure of let's say employ one or whatever employee hours hours value in a in a placeholder call placeholder or a variable y this is called this value will different will be different, one this this variable, this placeholder will Similarly, once whatever employ whatever employ if you have taken the hours from some records for the same employer as well. So input this the steps the sequence of these two steps the rate value first and ours value later of that's one way of expressing this this this formula. So hours multiplied by rate. Maybe maybe We should write this cross symbol Or maybe this whole line can be replaced by, equal to multiply hours. And rate. Maybe this I mean, when you start writing pseudocode, kind of keywords begin is a keyword and is and stay with those keywords for example, get the values to to process on then the input do such kind of operation. If you if you're input then use get always but come up with as well as concise and then take the sequence should be should have a unique meaning, it should be in the sequence describe the flow first we take hours, then we take rate these and then we will just multiply them and after to make, based on this pay, we will do that, at at some other records register, we may may have emailed this value to some other to make, but the procedure really is still are going to do that that may differ. Similarly of structured example of, of the, of the expressiveness And what kind of keywords you're going to some people may use get some people may use is good to come up with a set of keywords the solution of the problem in flowchart for here, that is here in in pseudocode every shapes for different kinds of statements. describe that action using a parallelogram. have to express that using a rectangle the end of any procedure in flowcharts they are in that oval normally the flowchart sequences just print the arrows to describe the flow, there are loops there are if conditions there describe the flow using using arrows. So, because flowchart also looks like a very cool pseudocode is also a way of expressing an programming code is somewhat tedious, writing which is precise, concise, as well as unambiguous any programming language, that is not that for very complicated problems is somewhat another transition from flowchart to reactive is more feasible, if the goal eventually is programming language. So, you can go with one is fine, but more feasible way of expressing a very simple example. I mean computing, computing for that. I mean, this is so simple, nobody have this kind of problem as a as an algorithm basic idea is, is is is the same, even if you have a problem with maybe many more steps, next video, we will we will see a procedure that may look look to you funny, I mean, do procedure to make tea? Well, the idea is not how to express the solution of this problem of this for how to how to express solution will see one more example of flowchart as Okay. In the last video, we saw flowcharts we took a very simple example computing salary and rate. And I also described weatherflow, And I said that pseudocode is closer to the we need, because eventually we need automation we need a code of the digit the code for the language, so flowchart and pseudocode, and like Python, it is somehow in sometimes handy to to break of any problem for in first step in a flowchart generic, more general, maybe in a graphical clear, once it is clear that this is indeed it has no errors, it will work always, then to pseudocode. And then pseudocode can be in some programming language. But writing beginning without flowcharts is also a common you. In this particular video, I'm going to You might be thinking, what are the different is making tea. What what kind of different be liking tea with, for example, 1.5 units person may want a tea with, let's say, two a D with, for example, point five units of of milk, and so on. So the procedure of making means the different people want tea in a different let's like let's see a procedure first and making a tea, for making tea. So let's start you look to you a kind of funny kind of problem. if you want to make tea, what is algorithm step we do is we put teabag in a cup, that this be a first step should that be the second solving one problem, you can have multiple may just vary because of the sequence of statements not talking about that the algorithm or the different general solutions or procedures. that might be first step, or the first step the water and pour the water in the cup and this way or that way. So let's start with an input. We take the tea bag from somewhere. input is taken as parallelograms put a teabag boil the water somewhere there is a water it and see if after let's say five or six are, see if the water is boiled or not assume water is boiled or not. So, there is a test and check that the water is boiled or not boil it again. And assume there is a procedure boiling water is just happened by I mean keeping putting the pot of water on fire or something So, while the water again and boil the water again it again. If not boil again then check if this is called a loop or repetition you are Until there is a particular condition that is when while the water is not boil, keep This is called repetition or loop. So you if the condition is true, for example, the then you can exit this loop and come out. cup. Here we should hear we should describe Well, this see you pick up here is acting the water is going in. So we have a cup, we in it, but before pouring the boiled water then after we have water in a cup and a tea we actually first test one sugar or need more apply some arrows. If yes, add them add sugar. more sugar? Or one sugar now? Yes, add sugar. loop that is again a loop while while the the sugar is okay or not. Here you test that you need. If Is that okay or not? Until that sugar, add a teaspoon again, then test out Once the condition is met once you know then people just take tea without milk. Maybe somebody milk? Yes. So add milk. So that's that's a right there. And this line shouldn't be there. what milk? Yes, admin, that's again a loop. to steer. Yes, steer, then ask again. This another loop. Once you exit this loop, then done with the procedure. Now let's see the keyword and that's what program name is program while water not while while is a key word, not satisfied, keep on doing this. Whatever of this repetition are called loop. So while check water boiler not know what again. I'm Once the water is boiled, which means this false so water boil, then you exit this loop, key word, you in a cup, and then you ask, yes, add sugar. So you keep on doing this again a loop. So, so, you might be thinking this boil water to writer to this this why pseudocode to just display that this is inside set of statements are called the body of the alignment here in this line and so, there be here okay once this condition is false sugar you go here while milk needed yes add milk, needed yes add milk. Once this condition becomes loop, you can just go to here. While latest sturdy he was there yesterday, once this condition whatever you want to do. This example was tool in in the pseudocode as well as in flowcharts. is there to repeat a particular procedure and again to until there is a particular condition the The purpose of this slide is was just make you comfortable with the pseudocode and any further from here on we will we will be or two more videos. And then we will be directly enough with pseudocode for solving certain be moving from pseudocode to actual Python you that the pseudocode in the next video easily will be converted to the actual exact going to actually solve a problem of finding called the searching problem, we're going then in a later video, we will see how to So hope to see you in the next video. Okay, given, you're given a list of numbers, let's let's say we define list by these, these square Let's say that's a value minus four, that value, and maybe maybe minus 10. That's a just take an example that we have 123456 values took the list here as L and we just describe expressed by the square brackets, and the comma. That is just our convention for this this code. And And I'm not talking about any is just a list of numbers. And let's say we value of any list. Well, first of all, why we need to come up with a solution that works the list has these six values, then the procedure the minimum value in this list out of all Because minus 10 is smaller than every other than 23. Zero is bigger than minus four, because with the value of a positive sign. But if value with a bigger number, in terms of magnitude if you compare minus four and minus 10 minus positive domain, the result is different. multiple instances, why you need a general find out the minimum that is minus 10. Go works for another list. Another list with of numbers. Maybe in this list, we have six another list may have 1 trillion numbers, finds out the minimum value in that list. mean, the minimum value may occur more than rather than knowing how many times that occur, finding out a minimum value, and we want to that finds out the minimum value, regardless should actually return or end up finding out case, again, for this particular example, take example of this list, and we will see before starting this procedure, what kind pseudocode. For this kind of problem, we may previous video, program name as search. And take input, the number of values in the list on as as we want to move on. But writing out always good to to avoid these input statements whatever needed, always supply the instance, is supplied and then just work on that instance. taking the values of instance, a particular a good practice to, to, to supply the instance and this n is really the size of the list. is the list, then that list will be there, to supply that. And this n value here, in total number of values in the list 12345, good practice to rather than writing program problem you're going to solve in this particular And then this particular we are talking about as n whatever the values inside the L is we values, l can be different, this n can be is not a good practice to take input from that, let's say list of two represents the case, L of two is basically L of two is basically four, L of let's say three is the third element So let's let's take a convention, that whenever whatever whenever you want to read the elements by giving the element number here let's say it means the ayat element of the list. So, first we take a variable, we are assuming number of elements in the list is supplied we, which we really want to compute the minimum be supplied in this procedure. So what's the to compute, we just consider the very first value is 23, we consider that is the minimum minimum value, minimum value may be somewhere but we are not sure that the first value in just hold on for a moment and move on. Let's called the assignment assignment. This min I have assigned this value l one to it. Now, be will be having a value which is 23. In this, which is 23. Now, let's declare, let's counter, we may need this counter. And let's this with two it will become clear later on. particular list, the min value takes the value are two things for these two variables. Now, n smaller equal to n. Remember the value of counter here is two. So because counter has to six, first check whether this condition is true, then you will go to the body of the this condition becomes false, then you will is to the so two is smaller or equal to six. is to two is indeed smaller than or equal to the box and see what happens. Then what from at the index counter. Right now the counter value, because the counter has value to pick pick that value minus four from the list, that value to a variable v. That's a new variable the min value which is a variable, it was Now we have picked the second value the counter value from the list, which is minus four. four is that value smaller than our minimum is 23. So minus four is smaller than 23. Yes, true, we will go into this block, otherwise condition is true. So we will go in this block the new value. And the new value right now smaller than 23, so we are here in this body, body, and the minimum value becomes whatever the value in V is minus four. Okay? So if not going into the else part, either you're them. Okay, so then we move back Oh, there's need to increment the counter here after after increment the counter. increment counter. So Now increment the counter after this if will become three. Now, we will repeat the six, yes, we will go inside, and we will pick and pick the third entry. And now the third zero. Previously it contained minus four now minus four now, so zero is smaller than minus then do this. But zero is not smaller than as far as just saying just go on do nothing, don't do anything except if condition increment counter the counter value will become four check for is smaller equal to six Yes, we is 7373 is smaller than minus four no do nothing check the while condition now counter will pick the fifth entry because country's fifth minus 10 is smaller than minus four yes okay. the min value will contain minus 10 okay because exit the if condition and then you increment six is smaller equal to six Yes, because six Now, you go and pick the sixth entry which min value is containing minus 10. So far, two else part just go on to nothing, increment and you go back and check the condition seven Okay, exit the loop, go to this condition, the loop and return the min value. And see min value which is minus 10. So that's how a keyword. So which means if we if we just we if we just use that pseudocode with if kind of lists with with its sizes, whatever if we chain the list, the procedure will work counter statement was not there, it should while here. So this that was the pseudocode we are going to use this pseudocode and we of a list or sorting the values of lists such become earlier than the bigger values. And the next video we are going to talk about the sorting problem. And after that problem, that problem, you will be having a fairly a pseudocode for a problem. And the way we the actual Python code which will become so video. Okay, in the last video we talked about value from a list of values. And we came up list. Here we have just made a little modification value, we are also returning the position if the list is 17024, let's say in nine letter the list, the minimum value is zero. so the that appears in position three. So when when contain zero and the ID x which is the position that will contain three So, not only we are but also we are finding out the position of This procedure, our pseudocode actually describes the very first value as a minimum value and minimum value, and then traverse the list any value that is smaller than the minimum your minimum value with the new minimum value keep on moving till the end of the list. So, the behind this algorithm searching minimum use this loop while loop. So next we solve famous problem in computer science. So the let's say 14035. And seven, let's say and is the order in which the list is presented the second minimum, then the third minimum, list will be this, so this is the result, procedure. So let's see how can we solve this list and sorted list contains this L. In this this n is the size of the list. In this particular and right now l two is empty. So although is empty. And counter again, we initialize Conqueror is smaller than six, we keep on that's the that's the body of the loop. So of the list. And we use the previous algorithm the minimum from the list will be found as So min value will contain zero, and Id x will minimum value and insert in L two l two was insert the minimum value, which is zero so we delete the value at the position index. so we delete this particular value. So what this particular value. And the list now becomes we decrement the size with with one and then N value rather than six. Now the N value is list has no zero now in it because it was we insert the minimum in the list. Now the delete that value from the list. And we decrement list l two will be populated like so. And which is minus one with we will exit the loop how this sorting procedure actually uses the previous video. I'm not talking about that this kind of sorting There are efficient algorithms very great here is not to actually teach sorting the for this sorting problem. And also to show can use existing pseudo cores as as instructions problem solving. If you really understand really well, you're actually very good in is that we encounter in the logic that we in computer science. In the next video, I'm to Python codes. What do you need? Doo doo python programming language, and how will actual python programming language, we will starting from right zero and ending at the video, I will just be showing you how to convert Python, we will start from zero and we will detail. So don't worry. In the next video, in a very beginning, these are just because I'm just want to show you how the pseudo codes can be easily converted to Python programming, of Python programming language. So in the codes to Python code actual programming code. Okay, in the previous video, we just get a sort called the sorting procedure. The idea kind of problem. And we saw in detail, not we saw how to write a pseudocode for solving a list to be sorting in ascending order. For first this code search minimum from list, we're first going to convert that code in code in Python code. So see step by step, that we will see in detail. When you define they are called functions in Python. And rather statement before it and then whatever name stays the same, except at the very end, we Python. So the changes from here to here is for defining def for define. And then at the will see in detail, don't worry if you if you're if you just see that why we're messing in detail. But just to compare the in pseudocode. of the list start from one. But in Python list usually starts from zero. So they are list here, the first value is actually the are same, you declare the variable as in pseudocode. because the index was one. And so the counter Here, the counter is simply one, we need to just missed. In the previous the ID x is one, then next, we write while counter is less less or equal to n here. So here we just write this equal sign here, this equal sign, we is there. So now, but see that see the difference a colon at the end, rest of the things are v is equal to L counter the same thing if if v is less than the minimum value in the see the colon at the end, we have colon at at the end of the definition, we have colon statement in pseudocode. In Python exactly In Python, we have l statement. If we want a colon at the end of that. Then in Python in our past statement, same things in pseudocode. f ends. In Python, everything is described goes on, if we have If you're here, then this write ends every day. Similarly, the vile the while body, whatever that is, that is So, rather than writing the tokens and while indentation, so no need of end if no need written a counter here. So we have to write same statement, we missed this statement in the same statement goes here. That's it. The an end search here. The goal here is to show write the pseudo codes, they are they're highly, they highly resemble with the actual code is very, very high level language. I mean, in the pseudocode, the actual Python code is very, very simple. The simplicity of Python that's one big reason of popularity of, of everything is same, then we move toward the to write the Define def define, and then we the colon there, then let's do is defined Counter starts from zero, because they are the list starts from zero, so we are at zero, colon, maybe, maybe an equal sign, maybe an are missing an equal sign. But either way, statement exactly same as this statement, band append function, I'm in Python, here statement, rest of the story is exactly same. code is, is way more easier. This is this to Python. I mean, the the goal here in this to introduce you with problem solving. But to show you that the pseudocode actually resembles we will be dealing with variables lists, while in them in a in a big and huge detail. When the Python syntax and variables and all that each and everything in Python. And, and further, do stuff in Python, I mean, the whole dad done. I mean, you need not write a lot of I just showed you that if you have a procedure, like much like the same as Python, which, of Python and simplicity of Python, and how problem solving in Python does not require so many lines of so many powerful procedures. For those you is done for you. And there are very good one programming in Python, you did not write a a few lines of code even a single line of need to know the features of Python the feature syntax and features and libraries and the I tell you almost each and everything is available you know the what what what what are the things lengthy codes you need now to build a lot they're waiting for you, you just have to what what kind of features are there in Python, not to be writing these kinds of codes and all knowing that is a is a is a huge advantage, Python will give you a lot of features a lot and you need not write a lot of code for it. is simplicity. Second, it gives you a lot of built in stuff ready for you, you want in Python, you need to know where it is. And to know Python each and every step in Python, Because knowing important packages and knowing for you. So spending some time on learning To solve the actual pure problem. Whatever And Python is a real programming language language is almost enough. So hope to see Python from exactly zero. And we will see to see you in the next video. If you're new the best language for data science. And in about Python, which is the greatest language of Python, let me first go back to a little It basically starts in 1980s. It was introduced and a lot of bug fixes. It was officially created by Guido van Rossum and it is open Even though it's open source. It can be used was to keep the code easier to use and understand. work faster with the ready to use tools it you are defined that you are defining that to set the type whatever the contents in bring It is more readable and uses lesser code to programming languages. It is flexible, portable, scalable, and can be integrated with other is easy to use, and has a simple and fast understand Python, but it's easy to use syntax this point is basically it's it's really a programming. Well, Python offers you a very plenty of data processing tools that help for data scientists, because it provides a science, it also provides more flexibility learning. It has, it has a lot of packages like TensorFlow, to develop specifically the trending deep basically, the sport, the sport of machine That's huge. As, as is the case with many libraries that lead to Python success around package index, sometimes called by pi, Python. packages are available and they are good Constantly. are available. It is free open source and package to extend its functionality. Data these particularly ponders The Big Daddy of is there are millions of users who are happy stuck in something, chances are someone else is there, a lot of packages are there, it's to learn. It's simple, it's readable, more you code less you do more, I mean, you write a lot of work. So, I mean, I've spoken a lot Python really is best suited language for you some statistics about Python, the popularity to its use, and with respect to the job opportunities if you see this chart, in the ranking of top that's the latest statistic, collected in the total share of the languages, I mean, trend is moving up, which means the people trend of using Python is getting larger and like Java, JavaScript, C, sharp, bhB, C, our of them are used for data science, but Python language. And further, if you see, for example, says, I'm in a different companies like Facebook, companies. This actually graph shows from job postings are in different languages are of Python, although starting a bit low, but 80 if you see the numbers 85% of the total I mean, Python is not just for data science, it's open source, it can be it can be used for, uh, for for posting, I mean, codes or and whatnot. You can you can, you can do the web developer knowledge you can use the data programming language. In other disciplines for data science, it is almost the default So, I mean, if you're going to learn data really is the choice, the default choice, we are going to, we are going to introduce will start from the very beginning level. advanced programming in Python, including like pandas and matplotlib, for visualizations, like so. So, in this particular course, we we are not assuming you have any programming of Python. I mean, whether you're an engineer, coming from biology, you're coming from arts, that is very easy to get hands on. So if you're background, you have any data science background And we will gradually move to 200. So, and packages. So Python is the best, it is a default. is the default. And we are going to, we're beginning to the very professional. So hope discussing the best ID for Python, and particularly an ID he is, as you start your coding journey, maybe like notepad plus plus, where you write execute your code. When there is an error the text editor, correct your errors, typos is fine. Typically, for large scale problems, also need to make sure your code works in testing module. Many times you have multiple editor and terminal often becomes both confusing where you can write you can run and play with provides you with the capability of not just also testing your code, running your code auto completion, debugging your code, code is called an ID II or integrated development for different languages for for Python, there is an ID IE by charm is an ID IE spider is there are a lot more there are several of in particular, what Id E is is the best or before actually showing you the statistics showing you the actual numbers, the statistical are the other let me just go through a few and stuff. And then we will move to move to that which one is better over the other. So For the past couple of years Jupyter Notebook of coding and debugging. notebooks have been adding more and more features on to it. Jupiter ipython and from that date, it is really considered Jupiter stands for I'm in some people say I come in that acronym does not mean just more than Giulia, Python and R and by the are open source languages for and they are Notebook, it has markdown editor. It allows latex in it. I'm in a lot more. Further this server client structure, which is easy to manipulate documents. And all these documents web web interface, it can integrate with many for data visualization. Jupiter has so many labtech run a Python code and visualization. plotting library, all in the same notebook. it's widely used and an educational tool for can export your notebook from iPython Notebook is the Python file. The user interface of amongst the data science community. And one to start, I mean, very easy and very quick to write your first goal, you want to write you're better to go and do that. By charm, some of its properties, and let me just discuss, company JetBrains. And if you have never used running your first code successfully can eat large amount of your time maybe such as I charm, however, is, is much better for, for files and linking them together and huge large Python is it supports Anaconda. And as a result, are supported by char pi charm as well. And matplotlib, and so on. Just like other IDE a graphical interface. It offers jet integration, control system. Python, it is customizable, themes, color schemes, and key binding and plugins for non pythonic files. And these the errors and keywords just on the fly. So for coding Python. But, I mean, the one bad but one bad thing is it is memory intensive. And secondly, I mean getting getting getting mean, it takes a lot of time to just go with source ID Oh by the way, this by but this Edition and and Community Edition and it does is a lightweight open source, ie that comes mainly for data science practitioners and MATLAB. So if you're a MATLAB programmer, Spyder and you get a mean much look and feel cannot be also has roughly the same look and So, but spider was built for data science data centric libraries like NumPy, Sai, pi, The built in capabilities can be extended features like text editor with syntax highlighting variable exploring, it also has profiler that of calls for every function and methods call cannot be there is a vendor's atom there are But But the question really is being a data choose being a beginner? which one should you want to stay in data science, which ID there are so many of them. I have just described based on popularity of different IDs for data over the other. So for example, this data here, this analysis by was was done by Katie that the most popular Python editors till is at the top, the second is pi charm, then tags, then add on atom women there are so this is for I mean, these all are listed with in the data science community which Python Jupiter is at the top I mean it is it is way It's it's supporting to so many different it makes it makes a web page that is interactive, another web page and so on. You can you can online survey system and whatnot I mean it and easy to use. If you for example see the employment then then you can see overall the to pi charm spider also your code and sublime the Jupiter is V out it has been if you see choice. If you go to academia or university, government or nonprofit Jupiter is the choice outlier it is it is staying at the top everywhere. of Python, it is with respect regions for If you see US or Canada Jupiter's most popular Asia, Jupiter is the winner, America use Jupiter Australia, New Zealand Jupiter. I mean, these at the top, not just at the top. It's easy, stands on the top for the data science. So that we should use Jupyter Notebook for Python. particular course we'll be working on Jupiter next video, I will be just showing you how Jupiter environment how to install basically time from it. So I hope to see you in the you how to install Python. There are multiple and install Python from there I would recommend it has a lot of packages pre installed it through Anaconda is easier as well. So if system you should download the executable three rather than Python two. So you should three point whatever the latest version is. be installing 64 bit version otherwise you say you have downloaded the executable file from that xe file and follow the steps and Anaconda is installed then in the search bar prompt kind of symbol that my mouse is pointing run it you will see a command prompt like and press enter and you will be having Jupiter you that on my on my system. How to do that. bar. Let me type and conda prompt so this it runs then I just typed for example, Jupiter first time it will take some seconds to run. it will show you kind of browser in front is. We will see then how from this Jupiter files and stuff but that's how from Anaconda how you will launch the Jupiter. So this is you can install you can install Python if the version for Linux. And then rather than is downloaded in the Downloads folder then file name. The installer prompts in order in these kinds of commands will will appear the installer will finish with the thanks folder and type Jupyter Notebook and the Jupyter will appear in front of you. You can have you can in you can download the Anaconda distribution navigator, the launchpad you can launch that in front of you just press the Launch button in front of you. So in this video, we just install Python using Anaconda you will be video, we will see how to actually use that work on Windows, so I'll be having this kind like same because it's a browser based web show you how to get comfortable with Jupiter program in Python. So hope to see you in the show you how to write the first program in Python basically previous video, I show you I showed you how Jupyter Notebook, whether you are working or Mac, whatever, when you will launch the interface. And here you are in the right corner it, you will select Python three, and you you that will allow you to go here, there of parents kernel and a lot of controls here how you this is this is what the coding environment this is complete, ie interface in front of bit. Step by step at least the controls that where my cursor is moving. That's the file the notebook name or you can just write for you want, for example, mastering by Thorne for beginners. Okay, so let's say that you're to hero, maybe. So let's say this is your see this mastering Python zero to hero that Second. This is a cell in which you are going modes of writing is one is you can write the the markdown. The markdown is important in code, if you want to write other stuff other cells and they We will be helping you. For just select this markdown, and I type here, this is by THON directorial. And then I press And a new cell will be graded down. This is As you can see, now in this cell, that's a to markdown by just pressing an escape key, the color will change here, you can press to markdown. And if you press Y, it will change that are available keyboard shortcuts, if see this keyboard shortcuts, there are several of us. For example, if you press escape, and operation. And if you press enter, then that if you press Shift, enter, the cell will run cell. And there are a lot of controls you a good grip on these controls will help you So for example, this is a Python tutorial this, this cell also as a markdown cell. And our first program in Python. It there it is appears like like a description. And again, write your code. So let's write the first will write Brent Brent command will allow says double codes, starts ends. And in the be printed on the screen, for example. Hello, world. And once you have written that code, just execute in front of you. So that's HelloWorld program, I mean, writing the very first program only that, this Jupyter Notebook will be created, you can write the headings, you can write And for example, let me let me write lattic, you're making a notebook that requires some mathematics as well. For example, A equals a mathematical equation, not just this, you and and, and this whole notebook will contain or descriptions, and code and all that mixed can, you can just download this. You can just a PDF file PDF file. If you want a notebook if you want just a Python file if you want the same thing as slides. It will make slides this notebook. And that's a ready made document. for you. So this notebook is really, really is not just the coding. I mean, it is Preparing you want to describe anything you want to will be an HTML document for you. It can be we we want to further finish it. So that was continue to build this byte mastering Python in that we will describe the headings we will And we will at the end of this course, you of descriptions and code in it. You can use well one notebook, one complete notebook for world. In the next video, we will see how Python, what are variables and other stuff. this notebook is an enhanced worryin are the want to show you ipython shell as well. So shell and we will see how can we how can we ipython shell. So hope to see you in the next I'm going to show you the ipython shell just like you want to open a Jupyter Notebook, And you will be you will be in the in the you just type in ipython and press enter, way. And this is perfectly fine to write any Jupyter Notebook is more enhanced and more that I bought, that is there in ipython is has more features more documentation and stuff. here, hello world, let's say it will work in ipython in Jupyter Notebook, we type Shift Enter to enter and everything will work. If you want we typed here, if you want to clear that, l will work on Windows. Now ipython is just shell just like a calculator, for example, five, let's say it's nine multiplied by seven, statement as well, for example, 45 minus eight by multiplication is achieved by a static then divided by two and just press Enter. by the way, I have just press the up arrow pressed up arrow key again. And the second key again and the third last command appears So for example this and you may have whatever by 10 and minus or or maybe plus plus 15. this Python ipython shell, you can write very Python coding can be written in ipython shell. Now let let's see, for example, you you compute and let's say you compute this result, whatever a symbol, let me call that symbol as a variable. that in a, and then you have another variable, three steric 2.6, that is saved in B. Now, you know that 45 minus nine is in a, the result result that is in B. And now, you just want to print the what what normal calculators does not have them. But here in Python, even if you just you can declare as many variables as you can can retrieve the previous results. And you and so on. These kind of symbols that are be just used afterwards, these are called what are these variables, what are the types, one way or the other, if you want to go beyond saved and retrieved retrieved afterwards. variables are the features that actually do this ipython shell just as a calculator. But complicated programs, I mean, you want to one way or the other, you have to save certain combine the results together because the longer piece of problems. And each smaller problem and afterwards the several results they should are after. So these variables are required complicated calculations or computations. Jupyter Notebooks spit out just the enhanced shell just people used to write a lot of Python even today is several people are writing their the Jupyter Notebook is more enhanced for better interfaces and several features that So you have seen this ipython shell, it's it. But we will be using Jupyter notebooks, ipython for our upcoming coding. So the purpose you with ipython shell and just to tell you and even more than that, and in the next video, Notebook and we will see the Python or Python a calculator. So hope to see you in the next variables and operators the operations that in a very layman term is basically a symbol on. So for example, this x is a symbol corrector normally, and these are called names of the name x, y is a variable name y, x y is a variable store different kinds of data, I mean, whenever and again, it is better to save that data name so that you can retrieve that team retrieve one way or the other. This this variable actually to use our store and you want to use later are there, for example, the integer type data. For example, if the data you want to store is just the integer number it does not have data and that can be stored in a variable will be integer, you need not to specify the data to it the storing data to a variable or assignment. For example, if your variable say two, then two is integer value its integer to is assigned to x, based on the content automatically this the type of x is set to dynamically typed Python is dynamically typed specify the type of the variable the contents will define the type of the variable on the I'm storing two insight x and next time if in x the the print value will be two. Now, no keyboard symbol that looks like so, so normally an equal sign symbol is used for that means two is assigned in x five is equal in y 7.2 equal x y equals 7.2x y is completely x or y. And it is handy sometimes to to to too descriptive that are very, very descriptive of the code, because later on you will you data science and other stuff. The programs short programs, they might be lengthy programs. of a program becomes an issue if you if you carefully. However, if you write the names the name of the variable by just creating tells a better look and feel of what kind So, I was talking about this equal sign this examples when 7.2 is assigned to a variable is set to be a floating point integer floating Python that describes that the particular expansion as well not just integer and floats several others for example, you can define can for example, defining a complex number C and you write two plus four j if you write complex. And now you can you can use this created. Similarly, there are other data types further data types, the objects called strings. say s equals double quotes Hello then that S is also a variable and the type sequence of a lot of collectors, where he L is a collector always a collector W is a any sequence of characters inside the double or the single quotes, single quotes and double become strings. And these characters should we have another variable s two and we just two is no longer 12 as an integer. It is a is one and other graduates two, we will talk but just to give you a look and feel that a lot of interesting data types including and string as well that we will see in detail. than one values to more than one variables multiple assignment. For example, if you write will be assigned to a and 5.0 will be assigned like an integer, but when you when you write float. So, if you Now type the type, if you and if you check the type of B it will be they stay in the memory they occupy a particular just a label to a memory inside the memory is also located somewhere in memory. And similarly this is the data inside that memory. These memory. If you if you decide to no longer in the program, then you can call this function it will delete the it will delete the variable once the variable is no longer in memory, the variable again, you will get an error. most of these concepts in Jupyter Notebook define certain variables, use them, print a lot of stuff in in Jupyter Notebook. So our notebook that we were doing, that we were say I define a variable X, let's say x is as what we are doing here is let's say variables. in variables, so variables, notice that now markdown cell, notice this change in this particular cell, this is code cell, C that let's into this. Now x is assigned a value right now are there in the memory, we can symbol, if you write percent a symbol and tell you all the variables that are on right now the memory has a variable with name x, variable is three, that's the memory view to explicitly check the type of x, you can type will will actually find out the type this print function will help you printing type of x, the type is basically its integer if you for example, change the value of x variable, but you just change the value from So if we call us again, we have now the variable it's type automatically change to floating a floating point number to it. And this is type of this x, that would be class float ABCD. That's a variable name, let's say and that's that's the value. If we now called two particular values, one variable as ABCD, its type is float, and that is there. If we, example, a comma, when you write comma, first A, B, C, D, F, let's say these are five variables. again in a comma separated list, 356, point So if you enter that, and you now check the values are assigned to the respective variables, integer type variable with value three ABCD, it's already float B is also integer, it has 6.0 looks looks much like integer. But when becomes it becomes a floating point number. it's minus five. And x is the old old variable delete a particular variable, if we for example, ABCD. That's one variable that we don't want the view of the memory, we don't have this if we want to print this ABCD, we will get we should get an error because this particular points to no data, it has gone, it has gone that's about the variables. We just talked other variable types as well. For example, of a complex number, if you are really interested type so that the type is complex. Similarly, hello, how are you? That's a string variable, a string we will we have a whole set of videos very important data type we will we will see to tell you that there are a lot of data types typed whatever content you are assigning to of the screen you need not to specify. So I end this video here. In the next video, what kind of so once we have decided once of variables, what we can do with these variables, the result stored in another variable can have an operation like addition or mixed types number and other variable is integer number two different types of variables together of the result and so on. So a lot of these operators on these variables, particularly that in the next video, so hope to see you saw variables and we particularly saw integer type. We also saw very briefly on Jupyter So in this video, we are going to talk about Obviously, if you are defining variables, just to just to view them later on. Most probably and then you are you're applying some computation new results saving that and doing some stuff, some one way or the other in inside a program, have to subtract a variable from the other, have to compute for example, these are arithmetic symbol is used to add to variables. This minus a variable value from the other variable value. not the names. Division, it like like the this this person to a symbol when it is applied and y is on right, what it does it, it actually is, for example, if x is 27, and y is five, If we divide 27 by five, what's the remainder will be two here. So this computes the remainder. as multiplication like in mathematics, we Python, and in most of programming languages, This double slash is like the division, but quotient. What I'm saying is the following. by three, the result will be a floating point like so. But if you want just the quotient, that's the quotient value, then you write just the value that is that is there before be returned. So this is kind of the integer is used to compute the power. For example, four, that means two raised to the power four And the result will be 16, you can save that print it or you can write that in a file of One thing that I want to tell you that these point numbers, the applications of these operators see the objects or the data types that are that are beyond these integers and floats, and all some of these are all of these, they this plus is used for strengths. Now think hello. And you have another string, for example, another string, let's say s two, which is kind of data types, although some doesn't variables, but we will see four different these operators, they actually changed or we are much more fluent a four with plus with to add two integers to subtract a floating and stuff, but with data type that is unfamiliar make that sense to you. But there are definitions For the data types that are even there or numbers, we will see all these details as to the videos. And I mean, as in later on, just to tell you that these operators are point numbers or complex numbers, they can So a lot of words, I guess you were born Now, with these kinds of concepts that we are dealing escape, then m just to change it to markdown And here I write, let's say operators, and go to code. Okay, now let's say I have a variable. have. In the previous video, we use that. with us. Now, what is let me define a new a new variable sum underscore AB, that's a will name maybe some of A and B, that might variable names that are descriptive that describe the programs become manageable, readable, a and b, let's say that's a variable name. Let me make the zoom level a little high so let's say that's there. If you press Shift, way, if you have written some of you need it will automatically complete the remaining and you have eight. If you check the type completes tab complete that is called tab this particular variable is integer, that's because a was integer, B was integer. And if we add an integer with a floating point the result? If I just type type? A, that's number. So a plus d, the result will be here, type of that result? What do you think? Let no, no, not for a few minutes. For a few, what will be the result? What will be the Well, the types are up costed, which means be a floating point number. And the reason point number, a floating point number is a So in Python, in Python, by default, the types integer plus a float, the result will be a you might be thinking why we have why we haven't if we want to store the result in another result and apply some operation on that, we following, for example, a plus d. That's whatever the result is, whatever the result is, divided new variable. Let's say. Let's say the new and V. And now we print we, and we have the stuff with these kinds of variables. Let me on. Don't worry if you don't get it just as and let's say s two is world. And we have one plus s two. What it will do is it will strings a lot later on. But just to tell you it is for other data types, very fancy data say we define 10 and we divide it by Three, However, if we have 10 divided by three, Shift on, you might be wondering we have not saved the result is saved, actually, if you do not, assign the result, for example, in this way, or, but if you do not assign if you do not explicitly, by default, there is a variable contains the last result that you did not So, that underscore is basically one default don't try to update this underscore, just For example, if you assign something to underscore of underscore will no longer be there as they so, that's about it, I guess. So that was and more later on. But before ending this question is, we saw the variable names like, be lengthy can be descriptive can be short variable name start with a digit? For example? is is starts from the variable name starts variable name? Or, for example, at the rate Or, for example, this symbol times two times to for variable names? can we can we write let's say 3x? Is equal to four? That means Python? Or are there conventions to define Yeah, think about it. See you in the next will, you will be having answer for this question. in the last video, I asked you a question names. In particular, I asked you whether So what's your answer? Yeah. What do you think? many of you say yes? Well, by the way, you name and Jupyter Notebook, and then you might let me tell you, the answer is no. A variable at the rate of not with hash symbol, not with other special characters are not there except Let's go to let's go to Jupyter Notebook and five error, invalid syntax, let's say activate error. Well, an exception is underscore underscore name with underscore is allowed, it is different this underscore E is different than simply variable names that start from these because names should be descriptive. They should give are containing and you're free to define variable is a good practice to, to start writing the notation, one better notation of defining we will see the functions later on. One way camel notation camel notation is you start letters, let's say your variable is starting variable name. So you write starting, that's start from capital T, starting time of the is called camel notation. And very famous, follow this and several other developers. is one notation, there are other ways of keeping of defining variables. There are several other the course is let's say 2.0. That's it. So check, that's a variable name. But now, if suggests the data inside is doing what? So make that as a habit. So, yeah, I guess we that variable name cannot start with a digit underscore, okay. In the next video, I will For example, what if you want to compare whether not? What if you want to compare whether the are same or not? What if you want to do comparisons variables, and based on the result of the So in the next video, we will see a bool data used in a lot in decision making. And we will the relational operators in the next video, in this video, we are going to talk about very famous data type. Actually, it's the decision making all the control flow most Although it is very, very famous, very much is a data type with just two states with just of different data types. For example, in T different kinds of values that you can store in it, you can store zero, you can store any point number or the number of values that than integer and the complex number is even type, it has just two states one state is And false is a value just these two straights the true is denoted by one, and the false is just t ru e true that thing and false is a variable let's say any variable name, whatever then it's its default data type will become see which is false. Then C is also bool. One other than arithmetic operators that we saw, are other operators that we can apply on bool keyword combining true and true. If if there a boolean variable a with data true. If there a and b is also true. So let's say I've used the D will also be true. So true and true is always false. And this is committed if false is false, false and true is false, false and keyword to combine the two Boolean variables result a true otherwise and will result of is there is another, there is another operator, are false, false, false, false or false is result is true. Remember the difference between the two operands at least one of the two operands then the result is false. If both are or are otherwise it is false or will result false if both of the options you now know and you now know are there is not for example, returns not true. Results So knot is a unary operator. unary means it operate on that, and is a binary operator variables to operate on, or is a binary operator two variables to operate on and so on. So we'll return true if both of the variables will result false. If both are false. Otherwise, the the state. So not true means false, not how you can combine the Boolean variables how to apply these comparison operators and can we combine the Boolean types together this particular video, I just, I just introduced the next video, we will see where the boolean our, our our programming style or thinking in the next video with comparison operators Hope to see you in the next video. Okay, in and I discussed that a boolean variable takes these Boolean variables together with and operator on a particular variable. And we and otherwise it also returns false. Similarly returns of a true before before actually discussing just go to Jupiter and just just play with a moment. Let us just convert this to markdown variable. So let's say A is true and B is are variables. Let's press those to see what with value true B is a boolean variable with false. So, now it is true B is true, C is and b, what do you think? What is what will will be the result. And let me Brent? C and result will be true, because C is false, false, they will result false. So first value will false. Let's, let's check the or print. And variable, let's say A is true, or C is false. here, because or gives false when both are be true for the not a, because A is true, not a will not B will be false. Not C, C is true, C is not D, we can save the result in another variable, of D if we want, that's a Boolean, we can false. So, yes, not only that, I mean, we level for example, A and A and B, whatever is, and whatever the result is not of that. complicated way. If we want a and b the result Boolean there are the result eventually will be a Boolean, and then is the result is false, well, why the result let me go to comparison operators. So, the comparison operators. This equal equal to whatever the variables are whether they are two variables are are, they have same data That will be true if x and y, they both have four, and y has value four, then we are just result will be Boolean. Because an X may not variable. If we want to compare the values a space inside. Remember, if we write single If we write w equal that means we are checking if we write this particular symbol that checks example, x is not equal to y, the result will values, otherwise the result will be false. a Boolean, it is either true or false. Okay, if x is less than y, the result will be true. y, let's say x is two and y is 10. In that the result will be false. Similarly, we can we can compare the two variables by less or or equal to the other. For example, if X is of this comparison the result will be true as long as x and y are equal or x is smaller otherwise false. Similarly, greater than or the next video, we will be, we will be moving and seeing the return types of Booleans. And ORS and doing doing interesting stuff with about the comparison operators, the boolean In the next video, we'll be first moving to we will write all these statements in Jupiter And then we'll be moving on verse. So hope video, I talked about comparisons, w equal than or equal to, greater than or equal to. they actually work. So let me just first enter Enter comparisons. So we can we can compare variables. And then comparing those variables or for example, rent. Two is less than three. result will be what Remember, the result of is either true or false. So in this case two because this statement is true. So the result we can store that result in in another variable the result is, the result will be true, the we check the type of see reject the type of seeing as long as let's of C is Boolean, and C in this particular have three equals to four. Is that true or three, w equals to four, that is false, three result in D, remember three double equals false. This equal is an assignment operator variable D. and here we can see Brent D. Burn Three double equal to 3.0? What will be the a floating point number. And I'm comparing other is a floating point number. So what true, because they are comparing the values let's see. Three is smaller or equal to so nine. And z is equal to let's say 8.3. And are our variables. Let's see. So what do you than y. What will be the result of that x and z is smaller than z is smaller than y. than y or r r is r is equal to for example, at the end after this, so, let's see first true, and that is false. Okay. So, this true the result final result is true. So, this I just do if I just switch the order, for is false, this particular statement here and Now see, x is smaller than y it is true, r will be false eventually, and z is smaller let me just say z is larger than one, let than I just just do just to tell you. So, are let me let me switch the let me switch show you the precedents of r and x is smaller this is true, false and true is true, true And the result overall is false. It should if this goes first, I mean, I want to show operate first. So, in this particular case, me let me tell you this in more and two, or true, what do you think what will be the result operate operate First, if true or false operate the result is true. If however, let me let First, if all operates first, then false or eventually is false. And if and operates first, the result in both cases here is is false. of sometimes sometimes they can make confusions, if we have a true here, if you have a false How can I so, false, false and false or true. or true that operate First, the result will the result will eventually be false. However, here, false or true the result will be true. is applied first, then the result overall first, then the overall result will be false. be applied first or off will be applied first first even if you even if you change this if you even if you pick this thing and apply first and or will be applied after, it is the precedents and will be applied first then Another good thing is to specify the order this first our will be applied and then four to always apply these parentheses and and the combination will be applied. So, the in be bullions. Question, what will be the result or false and true. See this slide for a while. the video, see it? and answer the Brent will I end this video. In this particular video, Just see how the comparisons return true or and different Boolean values using ands and I will see you in the next video with answer in the last video. So that was the question what's the what's the result here? So what's will be true or false, because these are all So let's see step by step. First of all, let's is two is not equal to three Yes, it is true, not true not true is false. So, this is false. true false and true that is false. So, this have or or and then we have false and true is false this whole thing is false and or result of this. So the So the answer to this you by typing the statement in in Jupyter Brent, not two is not equal to three and then that was a different one. And true, sorry, we were having our and then we were having these false and true. I have some I have some parenthesis mismatch. one I guess this goes to there and this goes false. The result is false. The purpose of of this question is to appreciate actually values to to to achieve the final boolean become very, very helpful further in in control decision making and stuff so The answer to video here. In the next video, we are going after seeing the some some kind of useful, just a few of them very useful of them. And directly jump to control flow basically the these comparisons, these Boolean values in So hope to see you in the next video. Okay, some useful functions in Python. Obviously, I will be covering just a few of them. That be covering more and more but let's start in function is is basically a feature from to achieve particular task. For example, around let's say 4.6. This 4.6 is a floating point And what round does is it finds the nearest this case is five, because five is more closer for example, on four point, let's say three, is more closer to 4.3, than five. So that's a floating point number to the nearest integer. argument that that is called an argument to Brent. Brent, let's say a, this a is called is a function 4.6 is an argument round is in details, and we will be writing our own bear that just bear with me that functions However, we we will be writing our own functions two arguments surround has two different kind only one input argument, it returns the nearest point number as well as another argument like point, after decimal, go to three places only, this 4.55 and then eight will be rounded based than five, then eight will go to nine and then it will stay as eight and the result let's practice this round function just on So here we are. So let's see rent around, will be 4.5. And the reason is 4.5. And it's is this 4.556, it is more closer to five then than four. However, if you if you just print and the result will be for the reason is 4.345 this round function with more than one argument, let's do that means the result should be only point. So in this case, the result is 4.56. on the next digit and the next digit is larger If however, I call this function for three it will be 4.55. And the six will be rounded 4.557. Yes. However, if, for example, there if there is a value, let's say three, then based on the next value three, the six will the result will be 4.556. Yeah, so that's, another function is diff mode, diff mode function and remainder. So in the next video, we will actually works and how, how it is useful. function in the next video, we will see diff that we will see in the upcoming videos. So last video, we saw round function that sometimes two arguments and behave accordingly. In this function dev mode. And it accepts two arguments, different arguments. And it it returns two quotient and remainder. For example, in this the remainder is two, because if five is divided five, but then the remainder is two. And the pair. And these kind of collection in which collection as tupple that we will see in detail of this course. But right now just bear with and the two elements are ordered in an ordered not just an ordered pair, it can have three several elements. But right now we will a see in detail. So let's see the working of Let's see. So let's say we have dev mode. we have lots of them. Or maybe let's say nine, and what will be the remainder. So 918 27 is remainder is seven. So three is quotient save the result, for example, if you save if you see the G the type of G if you if you type of ci it's a tupple, which we'll see G if you see the contents of G the contents access each element independently, then you the if there are multiple elements in in a are called collections that we will see in the positioning is start by zero rather than G which is three in this case, and the second at one, which is seven. So, this is basically elements or data in this particular collection, of collections in detail in in the in the and strains and different kinds of structures. sometimes it is helpful. By the way you can thing. For example, if you want to achieve by let's say 34 divided by double divided the question is three and further if you write the remainder that you need. So you can call two there are multiple ways of doing the same it's useful when you're going and knowing and remainder. Okay, next function that is this function in the in the next video. So function is in stance, it actually returns particular given data value belongs to this whether one has type integer, so, you can you know that one is of type integer then be interested in checking the type of one we have certain variables and certain data data inside it belongs to which kind of type is not assigned by us It may be read from some number or something like so. So, sometimes a particular way if we are if we are expecting is different than this function might be helpful. available in Python and it checks whether So is instance one int returns true is instance this is a floating point number, and you can the several types or not, you can give several whether it belongs to this, this or not. So, how it works. So, by the way, this is the So, hold on with me, at the end of the day, is in stance is instance, let's say three true in this particular case, if for example, nmt? Is that an end user? The answer is no we check if this is not in nature, then maybe we check that. For example, if that value these, then I mean check that particular value to one of these types, we can increase these a complex number here and check is in stance number. And let's say we asked whether it is obviously false. And the reason is, it give string there str, so, it will still say not any of these, but maybe there is a complex because it is complex. So sometimes this is is power. So power you can you can compute if you want to compute x raise to the power exactly x raised to the power y or equivalently that will give you the same result as this as well. And in that case, it it a it performs So for example, if you supply three arguments to the power BI whatever the result is, then result. So let's see the functioning of this say Baba, I want to compute to raise to the raise to the power four, I can compute the way, how can we use this to raise to the power take the remainder, by let's say, I want to got four is 16, then if we take the remainder the result two. So that's how you can use you some built in functions that are available, I'm just getting you comfortable with these see another function that he had not seen So in this particular video, we saw this is In the next video, we will see one more function user. So far, we are supplying values or assigning fly, we want to give the values and those So in the next video, we will see the function, to give input from the keyboard, hope to see are going to see a very important function is beneficial for taking input from the keyboard is you type input. And then you type a message that for example, into something if you want let's say, a number, you can write into a to enter whatever input the user want to interest the user will enter, the variable a will be a number, let's say 12, or 34, or whatever, there are ways to convert string to number receive using input function will be a string. string, if that was a number, how to convert for example, let's see, let's see on the Jupyter example, x is equal to input, enter a number. Enter, a prompt will appear in front of you, example, if I enter, let's say 56, and then x will receive 56. Now, you might be thinking be an integer. But this is not the case the is, whatever you enter is received as characters else that would have been received as a sequence as a digit five, six as a digit six. These Now, if you want to, I mean, there are ways to convert this x, or x as int x. So this means you have now whatever the result is, you have stored that of x type of x, the result is integer. And the result is 22. Because X was X was 56. one way by the way, if you if you're expecting let's say you're expecting a float value, enter a real number, maybe or any message, at the time of import, then it is okay to a float. Yeah, that's it. So, now, for example, type of a will be float okay. But there are expecting float and somebody enters into something say B equals load, input enter are real number, somebody just interest let's say ABC. So, to a real number no matter what. So, you will kinds of errors and programming program breaks ways, but be careful I mean the user is not enter the input if that that user is not restricted this is not the case that whatever you will really, if whatever you have entered is really then it can be convertible to a float, not no restriction you cannot restrict the keyboard are ways although there are ways to do that. have seen some of the functions, let me just input we have seen is in stands, we have seen we have seen the round function and there will be actually moving towards basically these kind of functions, mostly you will be be using maybe other functions like these decision making based on the ease and and you is if for example, you know the function you know, that POW power is a function, but One way is to just type question mark in front and in front of you, the documentation of this is power, that's how it should be called of you that equivalent to x raised to the are equivalent to x raised to the power y so on, if you want to see implementation of later on but if you want to see more about a double question mark and more things should case, the small function does not have an mark and double question mark are the same help out and you will get a lot of information and function power in module built in. So key types and stuff like so, or for example, for example, so you can write help on input it is okay if you know the if you know the use it, you can just open up the documentation a help function or you can use just a question about the functions. In the next video, we the decision making or sometimes called the the next video because we will be actually and which part should Not run based on based in the next video. Okay, we are in control language will assume that you have two numbers, you've taken that number from the user using here, the message is optional. It's a description supply even that, that's okay. So A is some will run B is some number the user will supply a and b in front of you, obviously the user what the value of a and b are. Because when A will be populated and B will be populated. is that you don't know whatever the value supply that value those values, your task both. So for example, if a is bigger than print B. So whatever the bigger value is, How can you do that? So the question is how to do that, for example, if a is bigger than should print B, remember again, and again bigger, if so this is this is this is what will be true. This is like the comparison. F condition as well. If A is bigger than to things. Otherwise, don't do that. Those kinds really powerful, and is available in all programming if a is an input B is an input, writing an a comparison that we have done earlier as in front of that. So if this condition is to remember the comparisons, they return Boolean the result of this operation is if that is the statement inside is do that, for example, Now my question is, is that is that done? print the bigger number. If b is greater than have printed, for example, we might have printed have printed, let's say just print B because will? What we will do them. So yeah. If b Because then you will be inside here. If b We will do what then? So that's a question. notebook. And then we will see how can we of condition? So let's first see the blessings so let's say a is an integer. Let's say you're and then you write if, let's say B is again, is greater than b, then print a. That's it. I have not written this print here. This is a let's say if I want to print a, then I want condition, condition, and so whatever that whatever that starts from this alignment, equal to five, all that block all that block it starts from this alignment, If however, in that kind of alignment, the alignment like So, for example, here I type I am outside these multiple lines is just the if condition of code, it can contain a whole block of code inside the if condition. So, now we will take be, if the value in a will be larger than be printed. Once these two are printed, then of a and b, because this does not this last This does not depend upon the values of a on that, that is just a sequence of statements. if are just these two. For example, if a is execute, nor this will execute. But this will to do with the condition. So let's run this value of a see the power of descriptions. the description could have been could have of a let's say 12. The value of b let's say, the value of b is 10, the value of a is 1212 this statement becomes true. Whenever this prints you are inside the if condition. Now this print executes and you get I am still no matter what the values of NBR so now let and b let's say the value of a is 10. And can this condition becomes false because 10 is false. So whenever this condition is false, and you go out from the if condition. So these condition they cannot execute because because you never becomes true. So then once you're out the going to be executed anyways. So yeah, so and making and this is the comparison operator different kinds of comparisons here or combination upon your logic. But the question is, are number we have, we have printed the one that if if b is bigger, we have not solved the the task yet. So how to do it. Okay. So yeah, that number that is bigger. So if b is bigger we should make maybe we should apply another B. If A is bigger than B, then print eight, um, so for example, let's go to Jupyter Notebook write a whole new program here. A equals and and input and then if A is bigger than B, than a then print B, I guess we are done. here and we know if this condition becomes because it cannot happen there is because cannot happen. So, whatever the bigger number can see I have this if condition and this this if condition is not this the second if if condition, we will see such cases such I guess we are done. If A is bigger than B, B and only one of these if conditions will is bigger than a, these two statements cannot A is 10, b is 45. So the answer is 45. Well, So A is let's say 22. b is let's say four I guess we are done with the task, we have task to print the number that is bigger and from the keyboard Yeah, I end this video here. features of this if condition particularly recently with another if could could be achieved and more readable. So in the next video, I of F so hope to see you in the next video. and we actually had an example in which we greater number. So we input a number a we a we printed the is greater than eight, then a is greater than b, then paint a the else name suggests, if this condition is true. condition is true, then go there. If this then go there, else go there. So if this is then you learn else part for sure. And this this condition is true, then you print this B or A might be equal to b either way you both have this alignment, but then the block maybe you have more statements here, the alignment you may have more statements here. So let's running. So let's say a equals and input and B is int input and we say okay, if a is greater else else rent else brand be elsewhere outspent to A or if it is greater than a either way, just run this and see what happens. So Shift 10, and B is let's say, 12. So what do you printed, B or A, B, B is printed, that's what a is done, and B is done, still the 10 will just say, print. If part. So that means we Ellsberg. So just to be more elaborated, let's And the reason is if a is greater than b, 10. False. So you got two L's, and the LS what else is, it's really very nice to have if this is false, whatever that condition So yeah, that's the health part simply now, have one more power with this F, what if we print B. Else, if A is equal to b, then you and this condition is false, if both these part. So basically, if else if else if else, for example, in this particular example, if part else, if this L is just short form of you can have another check elsif A is equal l l, if we can have one more check, we can have and then else else will only execute if all conditions, they are false, and only then diff running on Jupyter. notebook. Okay, so let's say is one, B is let's say five. Let's five, if A is if a is equal to b, then the now, because this is if you should you have true or false. If A is larger than B, then let's say your brain be okay. So that's it. Not, not in if this is outside complete, this and LDAP parts, and this is no longer inside. will be the result if A is one B is five, is not equal to B, A is equal to b that's So you will learn in export and B will be which is not an F. So yeah, so B is printed A equals to B that is false, so you will not You will land here because you land here else then not enough. If A is 10 and b is also so that's elsif. Okay, so that's about if In the next video, we will be talking more bit more detail. And we will also be giving if elsif elberfeld of structure. So hope to writing this, if elsif else kind of structure down here in a in this green color, for example. the last video, but that's the short form, print a if A is larger than B, else print l sprint that this is exactly the same kind larger than B, so you just read that if a equal to b, then print equal, else print that. this if Elif else kind of structure. But I the structure in this particular horizontal way. Because this kind of structure, that readable, much more manageable. And this might time for for some kind of readers or, and on, which we'll see in a in an example today. structures in short form is not very feasible. if you like to write if elsif else kind of Python. Okay, let's let's get a good grip Let's move on to Jupyter Notebook. To see the example is user will input a number, let's let's say enter marks for a particular subject, And our goal is if the marks are larger than are larger than larger than 80, but smaller to 85, then we will print a grade. Else if than 85, then we will print a minus grade. equal to 75, but smaller than 80, we will example, b grade, and so on, let's print this this else. if else if elsif kind of structure with it. So if a is larger than or equal to a space is a space after the variable and there because larger and equal to the combined than 85, then print let's say a grade rate E is smaller than 85. So let me let me write smaller than 85 and is larger or equal to good to include these kind of parentheses more readable that this is one block. This this is one to see and this font is E and okay. But writing the parenthesis make code a is smaller than 85 and a is larger than only when the left side is true and right becomes true. And I promised you that I will combining the Boolean variables using ands seeing the one. In that case, let's say brand. is if he is smaller than if he is smaller that's the case, then what should we do? Let whether writing parenthesis or not writing right parenthesis, so the code becomes much have Brent, let's say, b grade. And let's And a is larger or equal to let's say 70. samedi, then Brent b minus grade, let's print. below. Average, for example, let's So, we will we will enter numbers, if the when this condition becomes true, then this structure right there. If this condition is If this condition becomes true, then this this structure. If this is false, and this is true, then we print degrade and we are be checked. And if this is true, then we'll this is also false, then we will dive into So let's see, for example, let's say the marks that makes sense, a minus grade because the larger or equal to 80. So a minus grade. Let's, marks let's say 64 below average. Okay, great. can go as long as you want, depending upon combine several comparisons several billions, you whatever you like to like to do. Let me let's let's let's create an L without writing lF and implement ELS completely so we are are going to write a program that actually say, three. If A is larger than 10, then Brent going to write else, but we are going to achieve Tell If not, a is bigger than 10. To see, then print you condition is true, then go there. If this true, then you learn here. And you need not I have implemented l spark using l f. So see If A is let's say 13, then we will think okay, Okay, great. So, we saw if condition it's lengthy way. So in the next video, we will another if condition, which is called a nested In the last video we saw if lF structure, F, or are simply called if inside the body understand what nested if condition is simply if condition, that's all rest of the story it is inside the body of another if or or a number, and then we check if x is larger If that is true. If that is false, then you work from here. But let's say x is greater than 10, your number is above 10. Let's say this statement, you move to the statement, than 20. Now you see this if condition. This if condition, if this, this condition becomes not. So here you're checking if x is larger making more checks. So for example, if x is stuff here, then you apply Further more, more logic is. So let's say here you're checking is true, then you move here else now this 20, then you move to this else l squat and inside this particular F or an F inside this nested if and we can have I mean deep structures, something then if so maybe we can have a very upon the logic. So let's get ourselves comfortable. Notebook because that makes much more sense. So let's say a is let's say again, and let's than 10, then we say okay, Brent, larger than If condition, okay, then then maybe we have say rent greater than now rent inside the nested if, okay. Else equal to 20. And then brand, for example, and you can print here, brand outside all the structure. So let's see, let's give an input is not larger than 10, this if condition statement and all this structure is not going is called the body of this if condition, and becomes true, whether that condition is just of a lot of comparisons and a lot of Booleans whatever that condition takes form of, then And when you are in this part, then that's in the new part, in the new part, for example, in this part, that's the body of this particular part, see the the body of the top if condition that are in the body of if condition, they all the statements that are in the body of own alignment, and this indentation is necessity is in what kind of block for example, if I print statement is in this L sport and this of this print, if for example, I press I align here, then this print statement is inside that is defining the placement of different then it is completely outside of all if conditions and see what happens. Let's say we brand let's what do you think what should be printed, is true. So greater than 10 will be printed this check will be executed and this condition than 20 then you will go to the else part will be printed and then inside the else part you will be out of all if condition then outside see whether whatever we have said is correct top if less than or equal to 20 inside the Yeah. So that's what the nested F is. And example, more if conditions inside the nested here, if A is larger than 30 for example, 30 as well. And for the brand, maybe not necessarily can do any interesting stuff inside inside the nested if of nested if find particular if condition here if you want to structure as you want, but that completely if condition inside that l spot here for example, that is also, that is also perfectly fine. this if A is larger than 30, then this, for here else, print less than or equal to 30. the else for all of nested if of nested if, me let me just scale it down so that you can yeah, it makes perfectly sense to me, for than 10, then you're here. If it is larger than 20, then you're here. Okay. So let's than 20, then you are here further, if it you are here. And once and by the way, if here. Wow. So let's run this code. Let me more. You can see more text. Let's see. So say the number is let's say 25. So, what do is greater than 10 inside the top if it is smaller than or equal to 30. So inside the outside all the hips conditions. Great. Yeah. so that's about the nested if one more thing me tell you the power of indentation. You condition, that's the if condition and that's this if if you move this L sport in in the then this is else part of this if and this the power of indentation the this is the indentation kind of block or structure in Python. In other they they normally use to write these curly doesn't really matter. But in Python, this and everything. So, for example, this is a and aligned with this f you get this else this is still nested if without an L sport. I mean this is not aligned with this if this error because that is not a proper indentation. important. Yeah, so although i have i've told you but I just I just found to make a slide Sometimes you may get confused whether this indentation defines this LS belong to what? control flow indentation here. So from next loops, I just want to I just want to write I just want to write a Jupiter program for the conditions that are ands and ORS and nots we will be practicing more on Jupiter for video. We'll be jumping toward loops, the see you in the next video. Okay, so let's more in this particular video and we are going some task here. By the way, this has comment, symbol. And that's a statement that will never for example. So like it, like, it is not there. file. Like hash sometimes represents. Comment comment goes on multiple lines, it is good line comment, for example, single line comment, quotes, and then end with three chords. So particular block, that's a multi line comment. line comments, because that's the problem that problem using using the code. So that's user will enter of loading point number. Number, task is, is to so let's just adjust more readable, find out the teacher integer, portion, integer let's say for the for the point, in this case, and and then check whether if that teacher portion or no. So print even if it is even number, the problem statement. That's the problem to commit now we are outside the command that's to solve that problem? How to solve that problem? to spend some time on this program just to say let's say that number is x is input, let into our real number. That's it. Okay, we're just assuming real number. real number might be I mean to that's also real number. That's okay. But let's say some characters like ABC or stuff now, assume that x contains real number, it just enters 10. And that's it. So it may be whether that 10 is whether that 10 is even user may enter minus 34.7. Or the user may point 30 535. There are a lot of possibilities any kind of number, and we have to check according that number let us just extract the decimal extract that how can we extract that there if x is positive, then do what else do what? is positive, then what we have to do? And So if x is positive, then what we do? We, here. How can we extract the, the decimal thing? How can we extract that? That's, that's any ideas? I guess this? The the structure that x is positive, just make our life easier. number. How can we extract this portion out? the decimal point, but what should we do? Will that help? x? Will that help? helps. contains the rounded value of x then, so what? the the decimal portion, the portion the integer actually round down? Let me check whether is not a function, I guess. So let's say round forever the Xs we are now assuming that x y is larger than x, that means we moved up. case, what we do is we just subtract. So the So the let me in teacher portion, let's say portion is simply y minus one is that correct? integer portion is simply y minus one. For it, if When, when, for example, if the value 30, so 30 minus one will be 29. There is what so otherwise, if for example, else, else, an integer portion. Y itself is an integer portion. Is that correct? if for example, if if x is larger than effects, than larger than x itself, then we just subtract the rounded value itself is the portion, just now and check whether what whatever we have just print, let's say the integer portion. Okay. So enter a number. Let's say the number the integer portion here is 25. So let's say Oh, the result is 25. magically Oh my god. it again. Just to see. Okay, let's run this 45.8. Okay, the integer portion is 45. But minus one, we will dive into this particular 45. We are we are still moving very bill. play with it. Let's, let's give, let's give right? Let's run it again and give it let's should be four now, it is four. Great. So, the integer portion as long as the number will be negative? Let's say that was true, if x was positive, so if x is positive, then What should we do? If x is positive, then then what will happen? Then how can we find to find out the integer portion and then we portion is even or not finding out whether be simpler. But first, we have to find out check the behavior of round function on negative result is minus nine. Okay? If we say okay, 10. So it looks like the same as working in actually working roughly the same way it should should we do here? Any idea? Maybe, maybe by the way? Yeah, maybe first convert the like before, but then what? Then what? So the rounding helps the same way. We should is going to work in the else part as well, code? So why is round x let's say then if it is negative y is greater than then what the integer portion will be portion will be y minus one or one? y plus one? Yes, you got else I guess we have in future portion. Equals that's the good. That's cool. I guess that's code. By the way, this else part is, this So maybe, maybe we can combine this code and would work. Let us just print the integer well, so far or not. So let's enter let's not change our previous I guess our previous the integer portion should be minus nine, that? Oh my God, this should be changed when rounds it actually becomes lesser than 10. lesser than a negative word. This condition here. Let's fix that. Okay, let's run this minus nine d 3.2. Minus 93. Great. So then 8.9. minus eight. Yes, we are working perfectly we just right here. At the very end if integer if that equals to zero, if that equals to Art. That's it. That's the whole program. Let's say 22.6. It's even, let's say minus if condition and, and how can we think in That was a lengthier video, I know. But I of if conditions and thinking and building we will start loops. So that's a beautiful the best way to understand loops is to think structure. Let me let me give you an example. in a while. The example is let's say a user And you want to print all the numbers till and you keep on moving and printing all the So for example, if user enters, let's say, two, then print three, then print four, and user print, if user enter, let's say, three, you stop. This is easy. If user enters in this thing, print. Brent, I, let's initialize I equals two i plus one, or in Python, we one that means I that means in I store a plus one, this is that, you just apply an if condition. For and say, Okay, if I is smaller than n, you just increment again this, then check the is visible if n is five, or n is three, what you're writing all that structure again, and code. Well, the loops are just a solution perform the same kind of task again, and again, For example, let's just consider the VI loop. in if condition like an if condition, you an expression that results a boolean value. in this block and after executing whole block condition is again true, you will dive into dive into the block then check the condition stays true, you stay in the block you you is false, then you exit this while loop then further processing just like an if condition becomes false, you accept that if condition particular case, for example, if n is five, number that is five I is equal to one, now true, we move inside, you print I, the value print one, then you change a, you increment so I becomes two. Now the body of the loop body of the loop can have many, many statements, you move on and you check, okay? Two is smaller the block again, you print two, then you update finishes, you go and check the condition again, it is still true i is three i is three is print three, you update, I, you check the you move inside you print four, and then you smaller than five false. Once the condition of the loop, you will exit the loop and you loop becomes very, very, very handy. In in, structures. And in most of the interesting these are the loops that play a very huge hands, get our hands on this loop. For example, let's take n and is in input. Let me make input and input is a number, let's say n i while I is smaller than n, you may have written readability just to make readability. And perfectly fine. If as long as I is smaller you do is bring, for example, the square of it, let's say, and then you say, Grant, for you just print I, that's the iteration number That's the equation number I this is just our variable, its value will be printed. This you pass. So you can you can write a comma That's very flexible function. Okay, then one. By the way, this i plus equals to one I have just commented here just to explain i plus one that is also that is also correct And that's it. Now, again, when I de indent, done, for example. So that's the code for this code. For example. Let's say n is equal this is the aggression number one, then two two, then three squared is nine, the aggression is the iteration number four, and then the snapshot of the loop. We will continue from show you more and more flavors of this loop. in the previous video, we saw a while loop loop, just printing Just printing a bunch when you are inside the body of the loop, you want to write, for example, you can you and check that an at each iteration a particular in this particular case, I'm going to print number if it is even then printed, else pass statement of saying that do nothing It is have we could have omitted the whole else is equivalent but sometimes writing this past this boss statement just means do nothing and we omit this boss, that's perfectly okay. Let's say n is let's say n is five i equals an even number. So go to the else part else i this print statement is outside the loop not inside the body of the loop otherwise, now i is incremented I becomes to now move two is zero Yes. So brand two, so two will not execute and I will increment because I the body of the loop. So I incremented I becomes years. Three, remainder with two is zero false. is smaller than five years for remainder two not execute now increment i, once you increment five is smaller than five false, so you go what this code is. So, you can have if condition the loop you can have loop inside the loop nested loops, I mean, that's that's all allowed are sometimes two important statements that are there, one these statements because they have a deep written inside the body of the loop tells brake is encountered, whenever this brake brings you outside the body of the loop. That's if I becomes divisible by 17 and the remainder when this break statement will execute you of what is the value of AI What are other great. Now, the continue continue statements brings the next iteration loaded regardless loop for example, when this continue will are there onwards that are there, in the body iterations iteration by going through all another iteration immediately. So continue loop and starts another iteration. Here I means always run. You might be thinking always when we will exit the loop because this true changing this true anymore. There is no condition go inside the loop but once where whenever loop right away. And this break exists, the portion of the loop body and starts the new continue means start another iteration immediately So the rest of the statements inside the loop and continue with just just in Jupyter Notebook So let's say we have, let's say again, let's taken that as an input, let's say n is equal it might have taken some value here, I equals, with, let's say, nine, if that is equal to Else, what you do is really you increment divisible by nine, then what you do is i equals we we have written this way. So either way this form, so else this okay. And that's, After the loop, you just write Okay, print, output? The output is done straightaway. And is divisible by nine, only then you could Oh, it does not print anything, we could have we went inside the loop or not. Okay, so inside, Inside else. So let's run this again. Oh, sales inside rails, the first time it go inside, pants down. That's what this break statement statement. That's for example, just copy and how this continue works. So, let's say we this, if I is nine is not equal to zero. If nine, what you do is you get take i plus equals statement. And whatever else you write here else something else whatever that is going will be encountered whenever this eye is whenever is then you continue once this AI is divisible then you will not dive into this if condition Because this this continue will not allow these are printed, let's say we break our for the very first time one is not divisible three statements will not be executed the becomes false, this continue will not operate, then we will print this statement, and only and print the data. So let's print here. Brent run this code and see what happens. That's I should I should just yeah, NASA better font, run inside if inside if you see when you when this is the body of if condition when if condition but continue is telling the cursor to go back this if condition becomes false, only then if this break was not there, you do you then will be running an infinite loop and then and break does. So, in the in the in the very here we saw the while loop in the next video famous kind of loop for it does almost the runs based on a condition they fire the for loop that many times it should run and so and the application The for loop in the next in this video we are going to discuss for video we saw while loop although most of the through while loop and sometimes it becomes example, I'm going to populate a list. So see very shortly what a list is, although this lesson in much more detail when we will for the sake of example, a list is a collection 234, that's a list of three elements. So two type values, for example two 3.4 and stuff for example, L of zero means the very first the index starts from zero then index one zero the result will the result that will more values inside a list append let's say list will be having these values 234 53 we stuff we will see lists in detail, but just collection of a lot of elements and we can we can change elements and so on. Or we can list and start inserting elements one by one an empty list for example, and four is just range then means sequentially give a number a gift num give numbers one by one for example, time give 1/3 time give two and so on after number as long as the numbers they are smaller will return will be nine. So whatever this from zero. So as long as I is in this range the body of the loop just like the body of and zero is smaller than 10 Okay, you print in a list. Then next time this range will I. Now next time I will contain one next time In three, four or 5678 and nine, once the iteration of this body of the loop. And after on this very very first time I will be zero I will be zero and one will be printed because list and the empty list will be having one be having just one number zero, because zero will print two and the list will contain one we will I will be two we will print three is four, and so on till so until 10 here, And in this list, we will be having nine square finishes and we will be out of this loop. Okay, let's see this. Let's see example of with with list as well as the for loop. So let's say an empty list. Just to consider can write another variable a name, that's in is a keyword range is a function in is say then, what you do is you brand, your brand the body of the loop, and Eldad a band, that's in detail in the data structure sessions. you finish the loop, just print the whole see the result 1-234-567-8910. And that's I mentioned earlier, all the little the values. if What if we want it to jump more than just zero, it reaches 10. And let's say we want and one. So the very first time so that's which is not included start location is included step size. So very first time I will be one taken the next time I will be so very first then the jump of two, then you move inside long as you stay smaller than 10 you will let's see what now printed let's print just was the error 00 the range function does not my mistake. I was just a MATLAB user one. So I was just confusing MATLAB notation with zero, next time a jump of two, I becomes two. I become six, then I becomes eight. And next So you're out of the loop. And that's the that you always start from zero, you can start the jump of three. And it's not necessary example 20 it's up to you it's completely kind of vibrations. So this range function loop body or a structure. Okay, great. So iterated here on on our list we just have Okay In the next video we will see more details hope to see you in the next video. Last time, this else has something to do with for loop for F. But in for loop it hardly makes sense. of else clause for follow there is an else other languages. I don't know any other language but I don't know. So this else part in Python, particularly blocked will only execute if four completes a set like a list is is a collection list by curly brackets, the set is just similar set lists tuples dictionaries and many of portion, but just I have introduced this, Apple 4.9, and Jerry. Apple is one object point data and Jerry is one data which is three different elements. So now for x in very first time the x will be Apple, so it a 4.9 as long as so I create over this set, one by one, and just print them all. Okay, first time x will be Apple, it will print 4.9. Next time x will be cherry it will print no item in sets to iterate over. Because the are expected three iterations and the loop and you will say okay, loop completed. So what case the else will not else will not inside the loop body, which means you forcefully that were going to be executed but the loop then the L spot will not run. So let's see grip on this else. Okay, let's define a set variable name that say it Apple, or let's say, Sherry, if if these Spelling's are correct, long as x is ns Brand X. Fine ELLs rant, when or all iterations it completed all its iterations. outside the loop. side the loop, so let's loop terminates with success outside the loop. this else will not execute. Okay, if, for let's say I take a counter here, I equals time I just increment i, i plus equals one, y is equal to three, then just break. Let's else just for readability else was now this else of this if and this POS statement is you do when is equal to one you Brent this three false, so you pass you move on. Next and three is equal to three, that's correct, should have one more iteration, but the break should be there, because the loop could not condition, this else part of the loop will this loop. So let's run this code and see by nine outside the loop. I would recommend but I would recommend to avoid using ELS in this else By the way, there is a there is a colon here, okay. So I would recommend to until you you really need it. Because you of F condition. And you may think something way. So either way, if you want to use LS just one more example of for loop. And here structures here just for fun, we will see So dictionary, that's a key value period like that's called a key. And that is called a a dictionary, we have key and values. So now and d is our dictionary and D off x represents Apple is a key that points to 44. Cherry is we're ID, apples, apple, the result will be be game. Okay, so let's I create over this you that this for loop is very, very handy and a lot of data and stuff. Whereas file conditions and stuff. Although you can do stuff using for loop but one is better over that's let's let's just run this for a dictionary. like a set, let's say my key is a and my value minus 19. And let's say my key is C and my dictionary. So for x in the Brent the key can see the key is a the value of Stan The of C the values ABC. So this far loop is really structures and stuff although it has other great. So that's about loops for loops. And important loop these are two important kind Python, in the next video I will directly will be practicing for this for loops or while will be doing actually examples of nested like we did in the if conditions we solve it. Here we will also write a code and we to see you in the next video we will solve hope to see you in the next video. Okay, welcome to practice for loops are basically loops. what problem we are going to solve let's have solve is let's define given a list of of numbers, minus five, a 7932, like this, make another the items in sorted order from minimum to Like, in this particular case, we will be we will be having one, then we'll be having be having two, then we'll be having three. order, then we having I guess, four, then nine. So that's your, that should be your is available to you, or any list is available So how to solve that problem? Let's start. That's it, this is the list we are going to So, what should be the logic? What should This is, this is an easy looking problem, Let us just simplify this problem to just say we are given a list and we just want to the list. So how can we move that. So let's value of the list, let's MSP our variable, we do is for i in the for i n L, as long as if AI is smaller than m, then m should contain the end, rentas m, then this m at the end. So so that's the nasty, basically. So yeah, the minimum value. So let's run this code. us. What if we want to store the minimum value example, we not only want to just find out find out at what index for example, here 012, minimum, what if we're interested in the index the index is zero. And then what we do is we moved on and we say, okay, we maintain c equals zero, for example, right now, and and then this ID x is just that C, whatever we find this C, that index is also there. value. So okay, so at the position three, okay, now we have written kind of a code block How can we actually how can we actually do find the minimum value and swap the that value then move the loop next time find out the swap that minimum value with the second value. as the position and swap that with the third rearrange the same list using this but, but minimum value. So happened with the first from start from the remaining values, find of the remaining list, then reduce the list order, but how to start with how to find out and we are going to so for example, in this what I will do is I will say okay, swap with contain a temporary variable, temporary variable so what I will do is at least zero, right at zero you write the minimum value, but at the minimum value, just place the just place after that, after that operation, the minimum index, and that value will be some minimum value. So let's run this code and see what see, for example, the minimum value is swept was, but we want to do that progressively out the minimum and follow up with the first How can we do that? So yeah, that's, that's, depth a bit, let's say control right bases range, length of the list, whatever the length do is M is the gf value the index right now C is also starts from J, okay, great. Now, I to start from J and move onwards here. So till length of L, one by one, take the step value will be L of I, rather than simply L do this. Okay, and the index is just C. Okay, great. after this loop, what you do is you pick the And you do that. And that's it, you keep on If you branch your list, you will be having maybe there is a bug in the code or maybe this will work. What we are doing progressively a loop inside the loop and that's and then loop. Loop inside the loop. Great. Let's see is an error length of range. Oh, we haven't That's a problem. Oh, we have a sorted order. the applications of this. Oh, one three is Oh, the output we have written here is wrong, So you have sorted a list. If you remember, the problem. So problem solving session very selection sort, but they are we just wrote simpler than actually the Python code. If in functions to do that, but I'm just telling all that stuff can be used to communicate to actually perform a problem solving task later on in Python, most of the problem solving a built in function for those that are available that stuff, but to mastering to to master these constructs. So that for a new problem, eventually you you may need these kind of is really essential for problem solving and the loops and if conditions and control. So, start talking about functions. So you have this range, that's that's function idolater. have seen def mode, you have seen print function, How can we do that? From the next video, I'm function? Wow, isn't that great? That's great. video, I will talk about functions. A very language. Python also supports functions. the let me describe the need of the function The scenario is let's say you are writing to print particular messages whenever needed, message the task, the task was successful, you have to print moving to the next task your client. And then you have to ask, okay, the previous task, let's say you want to print some more stuff. And let's say you want to Somewhere, whenever you complete a particular messages, and then somewhere else, whenever all these messages again. Now one way to do whenever needed in the program. One way is has a lot of coding, maybe maybe maybe a very amount or magnitude of the coding. In this we have a task that we want to perform again task in terms of the coding. So, one way to do that is to just write all a function and that function means the function whenever you need to perform that particular one statement, just this one statement, and under this content maintaining this as a heading I mean, that task that is under this heading be complicated, may be simple one or anything, whenever we need. And we do not write to code we do not write to we do not want to write again. And again in our program. Just write a function, just like a task. Whenever you or the name of the function. And the whole in almost all programming languages. They In Python, the syntax of defining function have to first start with D E F meaning definition of that function the name of that function I mean, the name of functions should be descriptive, actually is doing. So, it is good to write that are very descriptive to make the code the function name is sprint success, you can then you end parenthesis and then you write if conditions are for loops or any other constructs. for loop like the body of the if condition, the function is all should all be aligned, that you need to be performed whenever this contain if conditions for loops inside, I inside it. And whenever you will call this wherever in your coding, the whole task under and again whenever you like. So, let's take notebook. Let's just I guess, yes. So, yeah, that notebook. So by the way, if you if you if I want to, for example, invoke that notebook from the Anaconda prompt, you will be having one file is for example, this you just click whatever you want to open up that will open opening up, it's a lengthy file, so it may take a better zoom level, just to Okay, so our first function, let's say D, F, define. That's a, that's a syntax, then press enter, task. Let's see. And that's it. Let's say the body of the function here contains only run this command, just like Shift Enter, you it is it is reported in the symbol table, maintaining Python is maintaining all the So once you run this cell, then the then this to Python. So that whenever you want to call Now if you want to perform this task, let's to perform this task whenever you want. So calling of the function. whatever I'm doing Shift Enter, and the all the statements that some other stuff, let's say three plus eight afterwards, if you want to do the same process all the coding inside the function will be task if you want to perform that task repeatedly, task in a function and then just invoke function power, a lot of debugging power if you have you just go to the code we just go to the and come back You need not to you need not the function and you have called these lines then it will become very difficult to handle lot of simplicity of managing and readability So that was our first. That was our first be talking more about this functions in the video. The function name should be descriptive, to have a documentation of the function sometimes you to write the description of the function. it will be available whenever you need help. Sometimes it happens your function can contain function, let's say, fun, let's say it contains stuff inside. And it is sometimes required So this document string is one way of describing that if you're writing this document string function should be written, we should open is doing, or should we actually open up this code is written. And then we have to read gives you another power. If you have written a top statement before the first coding statement. string, it will be available without actually inside the funk without actually opening up of this function. Let's see, let's see. Two I'm saying right now. So for example, let's say the function name, this function is print two, although it's not a very descriptive but that's fine. Print success to here I just may contain maybe just in one line, or it comment, or maybe a single line comment if and ends with three quotes. Let's say I write renting. message, printing a message, let's say I define more in saying that that message Hello, let's say, let's say are any description document string, and it will be available starts, let's say you, right according here, Now, let's say we are not seeing this function We are not available with the code of this actually does. First of all, we can just write will allow us to access all the functions say we go to print success, brand success. be capital, Brent success, let's say so print mark in front of it, and then just press Shift will pull the document strength whatever we actually this this is doing. So this document if we I mean this is this is kind of whenever The document string is one way to just go now this function implementation is in front will not be in front of us several times, people have written in their libraries. And So document string is one very, very healthy recommend to make your habit writing document I was telling you that if you write a double the document string for you, it will pull you see you, they said the document string, will be available, if you want. And this is that are the functions that are third party that function and so on. For example, you several times. So let's let let's, let's see, number of items in our container, that length written that function that's a built in function, tells us, okay, what this function is doing, obviously, somebody have written that function. get an implementation as long as the implementation of a lot of implementation of Python itself have C mostly. So several built in functions, implemented in C, and if you, if you want code, the code will not be available for most write a double question mark, and the answer an indication that this particular function in some other language and is used in Python. of Python, you can engage multiple languages Help, help command and I can get this Brent success too. And the help of print success help will tell us, you see the Help is telling this function, if and this and this is the we have written, this function is doing nothing there. If, at some time, if we are supplying of a lot of functions, that we are writing to know how to use these functions. By just string actually tells us how the what the way, we haven't called this function yet, let's call the function print. Now we know call this function. And whatever written inside called this is just acting as a comment and Stay with us. There is much more about function you in the next video. Okay, in the last video, thinking, what is power of this function, this video, I'm going to tell you that the the function can be dynamic, based on based that you will be defining at the call time. programming languages, the functions, the that receives an argument. And an argument and performs its task according to that to simple example. Let's say rather than having print message, and it it prints whatever message we call this function like so print message. success. Let's say now success will be printed. another argument maybe in a string, let's that will be printed or anything, I mean, Wow, isn't that great? I mean one function. function does that what's the power of this? the function does not only contain one line, this input argument. And the whole task will input argument you are supplying there. You forgot, what is that thing I define this function? missed something Oh, document string, I should string is not essential. If you do not write function will run but it's a good practice. a document string. Okay, let's see the power good friend Jupyter Notebook. Okay, so let's Brent grant message, let's say, edit receives just a variable, it's just a variable. And let's say you say, if is in stance message then simply branded. If this is not a string, is not a string. And then you say, Okay, here okay, whatever you have slide, just see, okay, the function, we might have written a document supplied by the user, or brains, that message worry, we have to see the strings in detail, as well, because the sprint has a lot of lot mean, that's our function print message, let's string does not good, this is this should steak like this, your input argument is not is what you have. So here, we can, we can of what you have supplied. And then we can just print just create a function that prints a message it is not a string, then it prints that okay, a string, it is not a proper message in string receives a string, let's say that's our logic all, let's see what it does help rent message. by the user. We can access the same help by the document string If however, we want The code and implementation is also available. let's call this function. Let's call this want to print, let's say, this is the message. print this. And this is the message that's function again some time, and you supply 23. a string, here is the type of what you have you can have, you can have, you can call this define a variable y, and the variable y contains Hello. Hello there. That's it, that's your, and then you called, print hello there, because y is also a string. you can pass different arguments and instruct actually writing the whole logic of the task once, actually, this is actually the logic to, that's what the task you want to perform. whenever you need this kind of stuff, you and it will behave accordingly you want. Great. receives one argument, maybe we want to supply arguments, maybe three, maybe four, maybe arguments. And we want to do some task based variables. So in the next video, I'm going to see you in the next video. So in the previous we can supply input argument to it. And in actually send more than one arguments to the these are just variables, whatever value we Python is dynamic dynamically typed dynamically here we have supplied just two variables, on supplying more than one input arguments, we can do anything, we can do anything. So input arguments to a function and and we can, to whatever logic we are going to do with and see an example of a function with multiple B define a function, let's say, my power, you remember there is a POW function in in to write my own function, let's say it contains computes power just like built built in power function. Great. we want to do is we want to print Okay, let's that is a power B. Okay, then we print this goal. So we register that function by just shift enter in Jupyter Notebook. And now we function can be horsepower, just like built you again and again, the importance of document let's run this function, my power, let's say result is 81. Oh my god. So whenever, by the although you have, you can you can create you can use your function, not a big deal. if, let's say, you can, you can define a function say, display types. That's it, that's your is our check arguments, let's say, check our B, C, D, let's say E, these are the input want to know whether all the five variables all of them are numeric values or not. If on, and you're doing something because you taking input from somewhere reading from a to check before moving on whether A, B, C, Otherwise, if if if any of them is not into not moving on, and you're going to check the of functions are there because whenever you on data, sometimes it is required to check in a way that you were expecting and so on. not writing document string here, I guess, again and again. So let's see. If is instance. And is it let's just have three variables just B. and of them are? If all of them are integers or a plus b, plus C, maybe, or a plus b plus square, let's say else are if they are if interesting task here some task. Otherwise, air. The input arguments are not of the expected. say, let's call this function. The function was check arcs. So let's check four, or five. So now you have all of them you call this check ARDS. On, let's say, three, four, but this five is a an error. The input arguments are not all of them or whatever. Yeah one more thing the if you call this function by less than three an error for example three four although this calling it with just two you're getting an arguments that the function is requiring although are of the type that it is expecting, but that the function is expecting. Similarly, arguments, although it requires three arguments, expecting three arguments and you have not on, we will see how to write a function that will see that but right now, in this particular the function in this particular way, you have the number of arguments it is expecting, you you are getting an error. Okay, so that's Well, next time, in the next video, we will of order of these input arguments? What will one? Will that will that change the behavior? The first variable, the second variable, third input arguments? Yeah, there is. So let's we saw, how can we pass multiple How can we arguments, it is important to know that the important. So whatever argument at the call function, the name of the function is f, that's a descriptive but I recommend write good names, the very first variable is C to the second Now you let's say call this function like will happen is this too will be copied in one and this nine will be copied in this C a value four and C three has a value of nine. order here, whatever order you have written call time will be passed to the first variable the second value at the call time is copied the symbol is. So, this ordering is really for this is at the call time, you actually For example, you call you call F and you say this way you need to know that there is the So, C one has this value, C two has this value, time, if you have defined your variable names free. Now you change whatever whatever if c one is a now no matter in what order you this C one is going to be copied in C one, C three is going to be copied in C three for it is it is good to it is good to call the is a chance that calling a function in a different like so. This actually gives you more grip you're happy with if you're very smart and particular order, I will always read the document that's okay. Otherwise, this is also a feature the values of the functions that are there in what order you are calling that function, at first position, the relative values will that's a good feature. That's a very good example of this in Python. In Jupyter, notebook, say it receives a, b, and c, let's say three it, Sprint, a, is a. And you'll say okay, is, whatever the value of c is, that's the with, let's say, two, three, and game. So, is game, fine, great. Now, this tool will change this, if we change this calling order, we just we just moved to we just moved to is three, this is game, this is to be called will be copied in B and two will be competency. want, then you are good to go. Otherwise, the following ways just fix, okay, a is a again, if you want these numbers, now, if Now, if you change the order, no matter what with, it will stay the same. For example, And a is at the second position, let's say the output will stay the same. And that's thing. So that's one way of handling with time it is important to define the variable to know you need to know exact variable names. to know what it's see one, you need not to with C one, C two must match with C two and great. In the upcoming videos, more features be discussed. So stay with us hope to see we saw the ordering of input arguments in And we saw a fix to it. I mean, if you if a proper order, there is a way to fix that another another thing to discuss this x variable is defined inside a function although the else, but it is defined inside the function or the variable that is in the scope of the the function something like so it may be handy. something you do some processing on your inputs. in another variable. And let's say now you further process, let's say, what you do is this is the this of the function and say, a is equal to 12. And B is equal to, let's add a, b, now the value of a will be copied okay, and now, you need the Sum of a and b, a variable in which the results should be D, let's say, and then you want to do some five, mod three, and maybe you need to apply zero, then do some stuff otherwise, so let's happen is this C variable is not accessible C is defined inside the function when the C is lost sees no more available, C is defined the when when you're executing the statement in a C sometimes called the function space in memory. But once all the body of the function the variable they are lost, what how can you receive the value inside see outside this this slide, how can we do that further, this particular function can access all the but that are available outside this function say I have a function, f. And the function this function is defined, like so f, let's like D, E, F, and that's it. And here it prints now now you know this a variable is no longer this a variable is defined, before calling writing the code and we say okay, a is equal a was available before calling f a will is that are available before the call, they are that are defined inside the functions, they further, if we define this ad here is equal local variable or the function where the variable a is is is defined inside the function and to rather than the sound considered sound too has a separate location and memory, both to when the function is executing, after the this has gone from the from the memory and still be available. So it is good to know and you still call F, then either you will global variable or available in some package so, in that case, this eight will be accessed it is good to know the the scope of the variables them what functions if this if x is already like 34 and then this x is 34, as long as here, this is this x actually is the local function. Once the function is gone again copies or or the function space itself. The them. This variable the value of this variable defined inside how to access that? Well, well, there is a If you write the return statement, for example, have saved these values, you might have saved y, that's okay. And then you say, okay, return, called this function, d equals add, let's in this particular case is five, that value of this variables are returned in D. So just further, whatever you want to do with this So, in the next video, we will actually code statement running and we will see the scope So hope to see you in the next video. In the if a function if a variable is defined inside and if a variable is defined outside the function, versa? and so on. So we discussed those kinds scope of a variable. And further, we discussed the function that is computed value value inside a function? What if we want that to So we discussed that in detail in the last a running form in Jupyter. notebook. So let's variables, let's define a function, let's it receives two arguments, let's say a and say that C are our c value, that's a c value to call that value, some value. That's it. to access that some value from outside the first call this function, let's say my app, two will be copied in a three will be copied this value, some value, it will throw an error. is not accessible outside this function. What inside the function? What if we want to access result and then use that result outside the the last video is return statement. Return me let me go if we call that again. Now, what remember this, that's, that's a common error If you change the implementation of the function, the updated copy of the function to the Python, yeah. What's the problem here? Now, when somebody still not accessible. Because some value is defined inside the function it is scope in, body of the function. So let's receive this print D and D is five. Great. So one more of variable outside the function, let's say name, but let's say that's the name variable. is three. And then then let's define another function somewhere. somewhere, let's say define F, maybe G, and a variable. out side the function. And that's we call this function, this variable outside function. So so and and, and if this function, here, and if there is this is defined somewhere still be accessible. However, if we define outside, outside the function, let's say five, because that's the local variable, that's will be accessed in this print statement. if you print the variable outside, now the this particular variable that was inside the finishes. And this is available again. So a good practice whenever you want to, whenever it is a good practice to pass that variable because this can create a lot of confusions. is available and sometimes useful as well. as input arguments that whatever you want more thing, this, this function g is returning anything, it is just printing, let's say something, say, let's say this is a comment, let's say then we call this and that's it. So it has if you even if any function, even if a function a value, which is called none, which you can returns a value. If you write a return statement write return statement, when the function Let's see the type of this output. What is of this man, what kind of data type is this? a type in Python. So downs are non type, output, statement is not only used to return a particular function, let me write a function here. Let's inside that function, you do something, let's variable, let's say a equals to three, let's you add those values A and B. And then you And then you just write a return statement anything. You can still you can still I mean more. But what happens is whenever the first the function returns from there. So the effective returns right from there. If you return a that value outside the function. If you do That means exit the function right away. It the break statement it It resembles to break right away, no problem. And by the way, when that is returned is none type if the return so for example, let's run this function. Let's So it prints a, then it brings something and It returns nothing but anon. It returns or then it returns a C, value of C, which is eight. And this none type, it is probably an integer type. Make sense? Yeah. So return statement has two, you can return, you can just return the the break and loops. Just Just one more thing. For example, let's say we have defined a function, defined, we can redefine it. But let's say five, b equals seven, and D equals let's say b, and A, D, and D. So return statement can if you receive those values, let's say X, is a first return value, it will be returned in y, and D will be copied in z just as a the return statement, if you change the sequence the first value here is the first value here, value here, and so on. So let's run this and yeah, five salmon and something. So this return return multiple, not all the languages, actually, return multiple values. But Python does have more than one values of any type A can have you can have different type, and so on. So as well as the variable scope. And whether the function or inside the function, and so video, we will talk about what if we want I mean, we do not know how many arguments arguments a particular user is giving, let's Just to give you an example, let's say you add that say add to another function, add of arguments. D in I don't know how many and wants to call this add to it, if that person should be added. If the person gives three the person can give arbitrary number of arguments. caller the this is the call, this is the call, seven arguments. And earlier we saw in the when we specify, we have to pass those many missing, or a single argument is just more will be getting an error. But how can we handle variable number of input arguments? How can how can we do that? See our next video? It's about how can we handle arbitrary number of say we want to write an add function. That integer or floating point numbers that are in an earlier video, that when you are defining that you are defining, you have to pause exactly getting an error. But but this may be required kind of add function that has that has capacity matter how many arguments it receives, it, a function, if available will be very, very that function by just two arguments. Sometimes with, let's say, three arguments, and sometimes more arguments this kind of feature available, but the implementation have a very, very easy way of handling this the way you do that is when you receive when a star, and then just Brent let's say, one that, this arts will act like a list. And are this arts has a property, this this x send in will be received like, like you're elements, which are the arguments in the list, will see lists in detail later on. But right it is received by indices, for example, the zero, it is at the zero location. At the zero for example, the location index number one, will be copied at this and so on. Now, no it will be of that size, and there is a function many arguments are there. Now if you pass the arc will be two, if you have three, if of the arts will be three and so on. No matter will receive all them in one by one and all 012, starting from zero until the length of said the sum sum equals zero, let's, let's And inside range, we just give the length of arg is five. So I will start from zero So the very first time I will be zero, and value value of the first variable, which is time, I will be one and add the position one which means three equals three plus four, of the sum plus for the next time, the value works, we discussed the loop and loops in all these numbers. And this variable sum actually you can return the sum and that at this particular that receives arbitrary number of arguments. to get more convinced how it works. So let's function, my ad, they might add, let's say or universal. Universal might add universal, variable name is, that you can read, you can other variable limits. This is this is just let's say we have let's say we have s equals loop. I guess you know, the loops we have that's a built in function length arcs. Okay, i, which means access all the elements one equal to s plus r x i. Either way you write Then when the loop finishes, s contains the Now, let's call this add function, my add two, four and five for these, and let's just Okay, the result is 11. Well, because two this function for let's say, for for, let's these five numbers. Wow, that is great. I we need not write a function for two arguments, then another function for four arguments and we need not to write separate functions. We While so, yeah. That's doable. I've done in this. Yeah. In the next video, we are going to see scenario. But we want to handle the sequence way. Remember, in some of the previous this remember that we receive three arguments and way. And then whatever these are, we don't what if we want to fix the issue? Or we want orderings. But then we also want the arbitrary wait for the next video. And I will show you promised you that I will show you how can but still having the arbitrary number of them. you, that's a call that can be made to a function. previous slide was like C one, C two, and we want an arbitrary number of arguments to example, let's say this particular variable name, and that's the value. So let me call is the value that is copied in the variable. another key that's a value and so on, what if we have a lot of them. And we also want say we want to specify those. But we want say here, for example, there are only three, of them, and then we want our function to arguments it received. Yeah, and and maybe check that if the key value is C one, then two, then do that kind of processing and so symbol names, we want to process the value still having the need that these number of variable length, they can be an arbitrary a very, very simple way. Rather than writing and then you receive in whatever variable you are receiving a key value pair list. It's that resembles two that resembles to a data will see dictionary later on in detail but argument this input variable C, it contains and then you just you can just iterate over the contents of this Remember, we have actually of loops. Yeah, here. Remember that was a was a value. And we did that thing, we could just just using for loop. Yeah, it's the same of that that's exactly the same thing. So a dictionary. Now this is key, this is value, has value, you can this x points, the first on the based on the key x, and then x point so on you that that is very simple procedure, you can, you're printing all the variable complicated processing, if you want to, let's get convinced that this indeed works. Let's d f, that's the function name is Brent, all variable, variables, and values. So that might but descriptor one, maybe we can make it more names and values, while that's more descriptive Any variable, let's say the variable name you want, then what we do is for x in orgs, Brent x, and then the sprint x and then just x. So let's say you, you done this, you did value is this, okay, and you want to do this pairs that you that you send at the call time. names and values. And let's call this let's say is a, and its value is three. The second capital B, let's say the third Will you third let's say the fourth variable name, I mean, here. Wow, that's amazing. That's the fourth further notice, you can you can pass variable different number of them. And and much more. function by just having four variables and variable name is a and the value is three name is C and the values CCC, variable name lampi list here if you want. And Python just do that in a very, very simple way. That's why a high level language or radio, a powerful Python does have this feature. I'm really By the way, I'm not saying the other languages support this kind of feature, but Python supports that. I mean, it's not not a rocket science. number of arguments even when the ordering We have one or two more videos on functions. we will practice on Jupyter Notebook, we'll a lot. And we will be calling one function be having one better program just just program with this functions. But before that, let's the functions. Yeah, let's see. So I hope want to talk about these default values for and mostly needed. The default value is a well, while you are defining a function, and this F, with let's say, the input value three, print will be three. But if you call this acts as as if you have passed this. So this the value, this is the value that is going variables with default values, some variables With default variables, a default value is one here must be taken here that the default and you compile this function, actually, you At that very time, this variable is assigned not assigned at the call time. So sum equals press Shift Enter for a cell that contains Now later on, if you pass a value, that value pass the value zero will go on, it looks like here that I haven't mentioned earlier, in that are referenced rather than copied, I data in detail in data structures. But let define a list, let's say one, two, and three. another variable, let's say l two, what will way, this is not the exact view of the memory, particular memory layout for which this L two is also labeled for that, which means the structure that is made, I mean this is equal to three and b is equal to a, a will be a separate position in memory. That is are. But there are certain variables in memory and time. People have people have designed copy them, when you just assign a variable change the just it's it's another name for location. So what happens is if you change l two, at the very, the zeros and add the nine, the because it is the same view in memory the elements of L rather than l two, you will value. And that happens. Now why that is important the function. The reason is, if you are accepting you're accepting a list and you are also defining your definition, let's say then this list very first at the very first time, and this the inside the memory. Now when once this sowhat call the compile time, when the cell happens once. Now if you call this list with three and four. Then if you call this L two, and everything is fine, but don't then expect staying l because l is this default. values, as it is, every time you call the function, the call time they are assigned at the compile be taken. I will show you that example that at this, this might be confusing right now, lists in detail. But I just want to make this that's important difference with ordinary I mean, just like like a value. And if you works. But with the variable that are referenced And the Python function behaves maybe differently. are assigned at compile time they are not compiled language, I should not use the word when we define this function, and we run the value is assigned. And the default value never show you that example. Why don't we move to So or why don't we do that in the next video? with you. Okay, let's go to Jupiter and mode let's see. Let's say we have define a function, let's four, let's say that's a default value. And From the call time, if not available, then now we are going to print, now we are going to for S has no value for it is assigned there. input arguments. Now the four will be printed. let's say 56. Now the 56 will be printed, about the lists. For example, let's say the l two is simply let's say l two is L, then two, let's say we change the very first value and then we print L. Now, you might be expecting thing. Because l and l two, they both are through l two actually changes the memory result minus nine in L. Well, the behavior default values. When we when we talk about f f and it accepts a list and the default is let's say one, two, that's the default the default list is one two. Now, in this for example, for i in the list, brand, I let's Now we will press Shift Enter, and at this a default value that never, that is not going that is simply let's say two, three and four, we do is we call F and we just press Shift anything. So, the default list is printed, be printed. Now the notice that this L two it. So l and l two you may tend to think that the same contents as l two. So if next time because they are by Reference. Next time you l two is past there, so l two L is also L, layout. So l has also the same data as l two input arguments, then l might be pointing might be printed, but that is not going to So, again, you will be getting one, two, so, that is different ordinarily, but when you that, that, that might work in a different that these default values they're assigned not at the function when the function is called. So, so that was about the default value. And concept, I guess I have made it too complicated creation of these variables, at what time I guess, I shouldn't have told you the list true. And in whatever I have told you is true. way, but it's true. Yeah. Okay. One more video on the functions and then we on Jupyter notebooks. So just be or one more video. Okay, this is probably the last video be having one more video. But but that will that we learn about the functions not? Not Yeah. So let me ask you a question to actually, slide. Let me go to the Jupiter and ask you let's say, let's say you have this particular universal, let's say we have written that before, let's say you have this function, very, very excited, wow, what kind of masterpiece number of values pass in it well, but this particular file, which is mastering Python months later, you are writing some code for somewhere and you are writing code, and there You just needed a, you just needed a code And then you just remember, oh, I have written function? One way is to just go back to that copy this function, this particular this code that and then call that happy. What if you let's say you have written a lot of functions to use all of them. And, and let's say this you notice that this usually happens that almost every almost in every project, let's are that are required always, one way to do those functions in every file, run them and make a module a file of containing just those is required, just import that module into and then access all the functions as if they in in the port file that you are working on. of so module is basically a Python file that several different coding projects or the functions Having the implementation that you don't want can have several of those functions stayed are residing there, whenever you want to use and use the functions. So, so module is just code for you that whenever you want to use, maybe more than one function and several functions. use, and that you have written once in very it again and again in several different ways. in every coding file you need, you just make important for you, that is called a module functions that are there in that module, you the modules we are going to make. I'm going how to use that. But but to use the module, the module actually resides using this cess import kind of commands. And then I mean, get this module running in our code. So in that extra work, very little amount of work for example, my funks.py, that's my Python And let's say I want to use one of these have and that file contains this particular code. to how to actually make and use the modules. Okay, in the last video, I told you about can contain a code that can be used anywhere, the modules, they contain a lot of functions, and so on. So think about file myfonts.py, think about a different file, maybe Jupiter, And now you want to use these two functions. call the system module says you have to have are a lot of built in modules that are already the search path. When you want to call a function, in the search path. If you're making your either copy those, those modules into the maintain them separately somewhere else, then path as well. And the way to actually insert then you actually write the the path of the files are located. Once this is added to the can import your file and your file as it is name if you want, you can rename that on the you can use all the functions like the built functions are not there in your coding file, this module into some other file and use their of projects. It is good to make modules. Actually the directory structures that contain modules. for maintaining a large amount, of course, use again and again. So let's just let's let's Let's say let's go to Jupyter Notebook. Let's file, let's say new Python three and let's let's name this file as my universal, let's Let's classify the name. Let's create another defined some functions. Let's say we want Let's say that's the function it receives, let's say it receives a dictionary like input. set check type of all arcs. And let's say, numeric, let's say, let's say you want to lot of arguments. And you want to check whether numeric, you want to return let's say, a flag. say, so for example, you may you may need in in your core, you're expecting numerical there are a lot of variables that you are numeric, you might want to check all the all doing that is just to create a list. And that's of those, I mean, you can check all of them. the dictionary kind of argument. So maybe say for so the output, let's say output is Let's say that is already true. And we will arcs. If x if is in stance, x is and float, that is not true, if that is not true, then is not true for any value, then we just return. we need not to break anything, we just return if we finish this loop, if the loop finishes that is called already, then we return, maybe variable. Let's see. So this function will int or float. If any of them is not of this can have another we can have another function, cell or in different cells. Either way, define add all values, let's add all that's in Numerix, say, arcs. And the goal of this function is sum. So let's say s equals zero for x in for it, then return us, let's say these are two this, or some some variable, let's say you, out of the function we are writing something variable, my name this, this does not this these functions. And my name is Python. Course file with name my universal functions. So file.pi file. So what we do really is the you can see the download options. We go to this as we download this as well as by file, so Python this Python file as in some other editor if file here, copy it. Now copy that file. And any, any folder if you want, just, for example, make a new directory, maybe, maybe you want and make a directory, maybe in D, let's say, and then make a module anywhere. For example, as my, or any name, whatever name you want, for example, utilities or whatever name, I as ABC, for example, ABC, whatever. And you here, my universal functions.by. Now, if you is a Jupiter, here is a Jupiter. Now you go to your code, let's say this file is no longer a system module and says dot path dot bend. So the module right now is located at ABC, you can import what what was the name of the my word. So I just I just don't remember the How it appears, actually, when I when I have after the dab completion, just fetches that lengthy. So you can rename that as let's say, import that once you have imported that. Now example, you can check the implementation want to check the implementation of that. in this particular file is located somewhere like the built in functions, my apps dot add let's say accepts the input arguments, let's That's the, that's the return value, you can variable, let's see. And then later on, you this. See, that's one thing. Another way of don't want to use all the functions, you just that's the only function that you want to functions, let's say for this particular file, what you can do is you can just say okay, add all Numerix and you can rename it rename that function the same way. So you do that thing, you just call add all Numerix because and you'll save that in let's a D, and then with that. That's it are you can import several them. Other than modules, there are I mean, module that is there, I mean, there are several in in a directory structure, where the directory and so on. So the modules that are arranged accessed, much like the same way, that directory these are basically the packages that are some data science packages, like NumPy is pandas, that's a data science package, we package for plotting and visualizations and are arranged in directory structures. So now Venus two, we actually missed to import the a name there as well. So let's go back. And many things are available. Let's go to some tab completion, my name is available. Remember, So the name is Python course. So this module it can contain any information, any data that and stuff, and so on. So, yeah, that's about practice about these functions a little bit, another function, how to make a lot of functions we will be practicing more on about these Notebook, just to get a better look and feel we will be then jumping towards data structure in the next video. Okay, before moving on, let's get a good grip on functions and multiple way to do that is to solve actually a problem. we, when we are done when we were done with when we were done with loops just to get a Let's just solve a problem using using the What kind of problems should be solved here? we solve a problem using loops that are sorting the same problem, but in a different way? Jupiter file? We have actually solved a function, find that out. Oh yeah, they're here. So here. another list or maybe the same list that contains to maximum, your result will be another list Okay, let's solve the same problem. Exactly using a different way using a different user So let's say that's our problem we want to want to solve that. So how can we solve that? Let's just make a function. Let's just make a function that let's just and the function accepts a list. And we're the minimum value of the list, but also the as well as find out Some minimum as well as how can we how can we solve that problem? matter what list you pass in, it will find is defined for the items of the list, for the metrics, okay, how can we how can we do Zero, that's let's say, the minimum value. is, let's say, is zero. Okay? like we did goal, but let's try it a function for it. how can we how can we proceed? What should see. Concrete let's or it may be that city x is smaller than our minimum value, if that's And the index where we found that is high, just go away. And I plus equals one. So move on and on and on. As you follow the list, variable contains the position of the minimum we might be adding an else clause just write I'm in do if this condition holds true, do because of readability. If you want, even statement, even then everything is fine. So this function is working properly or not. anything. We need, we need the minimum value value as well as the position so return that. the loop that becomes in the body of the loop. even in the first iteration, the return will the function will finish indentation, remember, no longer inside the body of the loop. Great. So let's go find, let's receive a B, so a contain the index of the minimum value. So let's give it the list. 13423409. Let's say value appears that 0123. That's the third So let's see, what's the value? What's the And the position of minimum is three, I guess find a minimum? Let's find another let's write another function, let's say swap values. And index one that actually accepts list then what it does is it actually swaps the value index two position and index two value should and then it returns the list. Okay, great. example it would, it accepts a list type variable, Great. So let's continue with let's define a variable store it in a temporary variable, then at this value. Don't worry, we'll see lists in the value of index two is copied. But it is the value somewhere before that copying appears. the list. So that's how you can swap the two it, whether the two values are swept or not. a that's list. And let's say we want alto the list and we want the values to be swept may add position one, the value is three, at the third position, the value is seven. be 276. And three, let's see what's the result? great. What else? What else do we need? So values function. What else? So yeah, what sorting. Let's write that function. And we inside that function when you call these functions. our function, it accepts a list and it returns do you think? What should we do for the very check whether all these list it contains the let's say we're just doing this for numeric the arguments are are of numeric type or not, should do that oh, remember that function module we made that module ourselves? So, My remember that my universal functions and function one just from from my universal functions if not numeric, as you can write that function that function. Now you may be able to use that function. If check, if not, numeric list all the values are numeric, otherwise, it on the if it is not true. If it is not true, it is not true, then you might be printing values, maybe that and then you just return. to write anything in return. Fine. Great. this return will take care of that but it If all are numeric, then what should we do? what we do is we will be doing what we will minimum and then we will be swapping the minimum what should we do what we we have already just right away we have a function swap values used this function. How can we combine all functions just to achieve the problem sorting, Okay. Yeah, that's, that's, it looks like So, let's just write out, let's just for x every element that is in list for x and list out the minimum and slap the minimum with well as the index of the minimum and should will become great. Yeah, I guess Yes. Okay. going to maintain a counter right now, the which we are going to do is we are going to the minimum lies. So, by find minimum in the well as the index where the minimum lies and what we want to do is, L is actually L is and list with index c. So, index c should will that work with that work? So, after this let's return the list is that true, I mean, one, the only catch is the list is updated are finding out, when we are finding out the the list. And every time the same minimum looks like this fine minimum function is not the, we should go to find min function and from a particular index. So, don't don't search finding out the minimum from the following index and maybe an end index. But let's give from right from there. How can we change all Let's change the code. Let's say that's the the index right now is start index and I is here, that might be much more feasible to than this let's change the coding a whole the code for i in range starting from start index, starting starting list and doing a step of one Okay. Now x really x is smaller than m then this is that an index because this is this is happening automatically. That will work out. Okay, great. Oh, there here. Great. We fix it. Okay. Now, so if value maybe there is a bug. Let's see, let's let's function l two is sort list. And let's pass That's boss this list and see what it returns. we will see where is the bug? If there is Why not? list does not contain numeric values. all the American values. We read the problem, see the implementation of check if not numeric. see the implementation. And there is the bug. not numeric x in arcs, if not is instance or float, so if x is int or float, then return if all our if all our numerix. So it returns false. And why why does Why does returning why it is returning false. That's that's the Let us just see how this is working. So that let's pass the list this list. And let's see thing. But it is either true or false. So It is a bad thing. Why does they're turning the File. Here. Sorry. Let's go to the File. Maybe open this in simply an old bad. Maybe editor. Let's open this up and see what is follow on and see what is happening. Self face one of 20 bugs are bad, they're in stance. So first of all is in stance this, which means false. Then we'll move on and it is finding out where it is finding out fine. Let's, let's let's write this function is let's say rather than this. Let's say this to check it not numeric to let's call that to it is returning false again. Why does returning So two is integer? Yes. One is integer. Yes. OH minus eight might be a problem. minus eight know. Well, well, there is still false. I I don't know what to do. I don't know what to go inside that function and see what is my god, the big trouble big trouble. Yeah, that list is just one argument. That is not arguments in in a different way. I mean, if the bug, the bug is we're passing one variable, different variables. For example, if we just is the all it is all the it is all the list. one by one. Let's see. Yeah, I found the bug. It is not a lot of it is not a lot of variables. argument that is in the form of placed variable. we go inside and add another function check number of arguments. What should we do? Let's list. Let's write here check numeric to it ello or maybe l or whatever x or art just goes through all the list. And does does the So the function that was there in our module So we are not going to use the function that function that will help us here. And we have that function to that. And we just we just now. Oh, there was another error whichever. this fireman is missing the starting index. Right? That's a problem. That's a huge problem. is sorted. Oh, huge, huge, huge. So you see, you can call the functions from modules. If for you, you can write new functions, you I guess that that lengthy video taught you And this actually happens when you are doing different functions, you need to define different on each function as a separate entity. And the code and bug fixing and all that stuff. that just by just focusing on this function. on that function go and see the implementation so too lengthy a swap here. Okay, now you loops, and a lot of stuff. That was all the next video, from the next video, we will see Python where you need not write a lot of loops to achieve a lot of stuff. And for that we are available in Python. So from the very that study or structure we will see less in dictionary in detail we will see tuples in data structures and getting a good grip for move we will move to the packages that are pandas matplotlib. And we will see maybe I for psychic learn as well. So hope to see data structures, so we'll hope to see in the awaited strings. string is basically just type, it's kind of a data type. In Python, of, I mean, making this a whole new data type is that almost all the data all the text that that sequence of corrector, the whole text kind of functions to, to deal with that text is. In Python, for example, you can declare by just double quotes, let's say ABC, are way is fine, d f. So either way is fine, you quotes, either way is fine. One thing is, by a single quote, and think that now I will So don't mix them together. If you're using using double quotes, use double quotes, don't confusing later on. So let's say this S is data science. That's a D is another string course, we are going to learn Python, then way, let's say you will call you can call can just by the way, you can you can add two a new variable. That's how the plus symbol just concatenate concatenate them together. string, and then you just concatenate the new string. Now that's a new variable, you with it. So let's go to Python and see actually, form. So let's say S is string, let's say, right on is good language, that is using single quotes. It's good for data science, let's run these two, and see is str string, str, that's what the type is. Python is a good language. Remember, so far, this kind of Hello or something like that. way, the sprint function, actually, it takes hello, then we can print anything in another say hello to hello to that's a multi multi can have another string maybe Who are you. So we we have used these kind of, we have have used print function. And we were using these are actually strings that we will be function actually accept strings and all these normally you're using it normally you're going writing that text into some file and so on. of the data is available in the text form the data we want to find the anomalies in stay in the text. So it is good to have a that handles all that stuff. So Let's see, can we concatenate the two strings, for example, that's concatenated. B. And that's francqui. is a good language. It's good for data science. space between two because wherever the first from there. What if we can get in a three a space corrector? Then this string? Why do or single quotes, whatever, one corrector strings. So now we are concatenated, three that contains just a space greater than T. is a good language space, it's good for data yeah, so that's basically the introduction concatenate? What if we want, we have a variable b, which is the price of this book, let's let's say this is our price. Now price is we want to make another string we, that contains this book is and then whatever the private can we do that? So let's say s, plus, maybe, So that after that the price appears? Now, no longer a string, it is an integer, and in a straightforward way, like plus, how can price of this book is, whatever the value convert the variable price, the Convert the to string, that means whatever the value, a string of characters one and two. And now of the string, and we will contain the message is free, that is, the price of this book is before. So let's let's type a space, their strength, while so that's how we can convert type, we can convert that to string, and so the same kind of stuff is to write Brent, the power of the variable number of arguments The price of this book is 12, the price of print function automatically adds the space see that here, yeah, you need not to specify added if it is if it is considered to be a Okay, great. So that's the introduction of in in much more detail in the upcoming video, in much more detail. Okay, hope to see you lengthy, or may span I'm in very lengthy and formatting is in a way that you want to even still want the different chunks of the same there is a way to declare multi line strength three double quotes. And then three double you follow Then you write all the string in, one variable actually contains a multi line you call the print function on this multi multi line string that contains this data, spelling our Spelling's around here, I just call that print function, this will the print there. So let's see the and by the way that remember that that is used for comments as lines, you can use this. So this multi line and used as it is somewhere in the code, then So let's practice the multi line string in say we have a variable A that is multi line line one. Then we have this is line two, and then we That's it. Okay, great. That's a multi line happens? So this is line one, this is line Why this? The first this is shifted one corrector, that space if not required. And run this again. be printed if you want. Okay, what if you of stuff, you have, let's say brand. So what the following options are available. And the see a hyphen, a. And that does play from a say hyphen B and they're also also does nothing. in in such a way, what will happen? Let's hyphenate has nothing hyphen B I mean, all crackers that you think they are not there, are painted here, the spaces are painted here, the spaces that are printed there. So sometimes our message in a way that we like. So that's you write this multi line, by the way, if start and end of any good script. That means the strings at the start and end of any good we have seen several times earlier as well. that we define all? Oh yeah. So that's the is written inside that will not be executed. string. In the next video we will see because a collection of all these characters. What For example, this is the first graduate is correct? Is it the fourth record is S, the to access particular characters inside the of directors? What if we want to play with can we access different directors for example, string, how can we do that? So, let's see characters inside a string, I hope to see we are going to actually access different indexing, the term slicing is basically more immutable structures, but we will see, I'm just comparing, because you may listen this indexing but we will see the indexing are used interchangeably, we will see the and in more detail in NumPy arrays. But here, the same things. index. So for example, I I want to access its fourth element here, way, this a is a variable, if I want to access the number, the positioning starts from the So if I want to print out of it, that will the index three, what do we mean that means he what will be printed, what will be printed, for a fi access this thing or space will be when a space is printed, actually, nothing thinking Oh, nothing is printed, nothing, corrector have been accessed. So yeah, a more actually access a substring inside a string example, a substring starting from index three, not include the index eight. So it will include correctly at index four, which is space, let five, which is Oh, correct, read index six, is seven, and then the correct read eight. This is included, this is inside, this is access a substring. So starting from three an example. And you'll come back to this slide say we have a spring as let's say, how are do that. So spring, okay. And what do we really we want to access the element to access the That's a standard notation. In Python. Whenever different elements, that collection might see might be a list. Maybe a tupple dictionary panda's structure, I mean, anything that is has different elements, and we want to index And indexing always starts from zero rather in which the indexing starts from one for one but in Python and in several other languages. benefits or starting with one it has some okay. So let's say we want to access element actually the sixth element in the string starting fifth, sixth, so our will be printed. So let's check the type of this return value. Let's is our what is the type of it subtype of different in a string? What are the types So what is the type of it. So the type is also of string type. In some other languages, another type, but in, in Python, each and than one. correctness is also string, as long let's access for example, the element number So the result is our so element number three, which means the fourth vector, which is space, we finish. if you for example, move to from will be our why or we may move to from for So for example, index zero, we may end at the result is, how are you and then I mean, that's index number 10. And index number 10. can have negative indices in strings as well. from the right side, not from the left side, points to the last corrector. For example, last corrector, and so on. So minus one, that's three, and that will access why, or we may let's say, minus eight, and go till minus eight index, and then move to minus three let's see what was the result are, what is are? Let's check it out. So this is this, that's an X number three. So three is not it has to stop here. Okay. That's minus four eight. Oh, great. So that should be printed, than minus eight, we start from minus 12, Great. So we have negative indices as well. kind of substring is sometimes called slicing, although the term slicing is much more popular is a mutable data structure? What is an immutable you right now, you can change, you can not that might look like a bad news for you. But the strings are not changeable. So for example, to place a corrector. Let's see, that's not a data structure, the string is a variable are unchangeable. Once created, you cannot cannot change them, you cannot alter them, it. I mean, once created, it stays as it is, can copy and paste, but you can get a substring but the contents of s cannot be changed. So all the kinds of data types in Python that They're called immutable. And string is immutable. I mean sense or it is more popular in the mutable, although, you can use time slicing to roughly in reference to fetching the sub list, it will be a sub list or so on. So that's do some more fun with this spring? Yeah, let me show you more fun with this rank, more you go to index 12, but not including 12. rather than one, what we'll do is, it will zero, all the way to index 12, but not including than taking the jump of two. So first greater then take a jump of two and then pick a corrector. starting from zero. So let's see that. So the string. So it starts from h Fine, then and go to a then it skips R and go to E then Oh, and go to a shoe and then the cloud achieved of slicing or indexing the general way is an index and then you have a step size. If size by default is one that we were doing default end is the building and the total the default start is zero. For example, let few for example. Let's start from zero we zero and go to 12 if you do not mention the zero go till 12 Okay great. If we do not mention not mention the end that means go till the last corrector Okay, if we do not mention go till 12 and we do not mention the step, way of reversing the string, I mean very beautiful mention and you do not mention the start, take a step of minus one in this particular are just swept and you get the string reversed that fancy? Yes, it is. Okay, a lot about string by using l m function, you can find to if you have a substring using again a lamp you've seen how to access sub strings and because it is immutable, but we can access them, we can analyze them and so on. In the are supplied for string processing, what we those strings, although we cannot manipulate a string we may get explained, manipulate what kind of functions that are available data type. So let's see that in the next video. see different functions that are available data structure, let's say you have the string at the beginning and these are a lot of spaces as well. So, there is one function called are called by taking a dot A dot something them functions, but those kind of functions called with dot, they are sometimes called object oriented programming actually string even without knowing that it's perfectly okay, perfectly okay. You can, I mean, it's okay. without knowing what an object oriented programming on this a. One difference with method and function is call some function that say, a dot strip. this a object or the a variable is available, an input argument. That's all you need to the rest of the story is perfectly okay. Even eight outstrip, it operates on a which means as input argument or it is available there the script function, what it does is it removes and removes all the spaces that are at the has no spaces at the beginning and no spaces created in a variable b, let's say whatever name of that variable. So let's see. Let's in our friend Jupyter. notebook. So let's spaces abcdef, a lot of spaces and hg gilwell, it, this is a and then we have B, let's say b is actually everything without spaces without it does not hurt the spaces inside. So that's the data. When we when we read the data from beginning at the end, maybe due to formatting function is available. If we want to remove Let's see more functions. Another function it actually converts all the string to lowercase. say, a B, A, let's say we have a string, a some other directors and Q f, let's say that's dot lower. What it does is it converts all that are already in lowercase. It doesn't to do with lower uppercase, it doesn't hurt lowercase and can be converted to lowercase, is available. Yeah. Great. So similarly, we C is equal to a dot upper that the like the to uppercase. Well, let's see more functions. function. What it does is it takes a substring Okay, let's see. For example, let's say we say the a is this thing. Let's say that's replace the semi colons let's say with with semi colons with statics. So what we can do replace the semi colon with with let's say So each semicolon is replaced by a steric. for example, a, a dark replace, if you want semicolon with a string. For example, the person. That means one semicolon will be replaced semicolon will also be replaced by this screen. will be replaced by the screen. And that's for example, if you want, for example, let's particular substring, that contains the two to be replaced by another substring, let's also possible I mean, you, you replace one one more function called split. That what you have a string, for example, let's say have this colon, then you have d f, then you Dan semi colon, then you have y y 3223. That's that string from some CSV file and disappears. values to be separated out that are that that are different values, ABC is a different value, may be an indication or token that the next to separate them, let's say you want to just And here, let's say the splitter is semi colon. and a dot split. And in the split, you can splitting after and before we split that. returns a list of strings, where this is the element of the list, this is the third element the list and so on. Because once you will that are split it out. So if your brand for strengths, ABC and all that, Oh, don't worry double core is the same thing. Now we can maybe the second element by index one. And can work more on that. Okay. Is that it? I available? stripped function lower a birthplace all the spring is about? Maybe there are more string? How can we use them? What are the is the list? We visit documentation? Should some tutorial and find all the string functions to do that, you can do that. But there is that you know, you write a dot and then a there in in string, they will they will appear go to this, you can go to that you can go documentation of a for example, if you if a string object and all that stuff. Fine. So let's say a.we, press A and then we press Nope? Is there anything that starts from B? Yes, capitalize case fold center count. These starts from C. Okay, let's focus on capitalized. Okay, what colon, question mark and see what this is here is a doc string returns capital. I used of the string. Is that the same as upper? Let's just check it out, print a capitalized no, it does not get delays the whole screen, not capitalize the whole string? What What string is the following string, so it does between the capitalized maybe? And the upper? when it encounters? No, no, no capitalized me let me read the doc string, again, returns specifically make the first corrector have means if we have a string that has a mix of It will convert the first character to uppercase Wow, that's awesome function. For example, that say. And then we call capitalize, capitalize, capitalizes the first director and all the there are other functions as well, a dot A what it does not count. What is that thing? that out using help. What is zero count? So in function called matters is an instance occurrences of a substring. Sub in Oh my God, written there, non overlapping apprentice there are there are a whole lot of functions use of the string, there are several ways of the functions that are available, some modules on top of that, to customize your A lot of these are available, and you should want to do something with strings, or with some method is available or not. And one way other ways to go to internet and see I want there is a function available or not the good that is available. And in that case, I will to write your own one because using the built there will be much more faster probably than even if you're too smart in algorithms. So so that's about the spring matters, there In the next video, we will see some more some more working with strings. And then we will to see you in the next video. In the last these are just a few of them, a lot of them of them. In this video we are going to talk example, what if you want to find out whether or not. Let's say you have a string and you is there inside a string or not? Well, you And similarly not in means the reverse of that. And in keyword always will return either the screen, it will return true if it is not this the implementation of that in, in, in we have a string ABC ABC. And we want to check string or not. So the return value is false A is there. For example, here, a B is here, for example, have an ABC somewhere, at least last, in the last video, or maybe in the very you can use plus with strings, can you compare mean, how to compare two strings, whether a that's a string ABC, I want to check whether will be the result? So so so the question used for comparing two strings? Well, the of less than a string as less than the other? let's say d f. Is that true? If it is true, can we define one string is I mean, this string maybe this operator is working based on the then this length is the same as this length. length, for example, by just saying, okay, will be still smaller than the right string. guess the comparison is working based on the the alphabetic order, a B comes first and is there in English dictionaries. That's how orders for all the special characters will a special graduate, for example, maybe this string. Yeah, we've done for false, because that is defined for these characters that first and B, B becomes first and C and so on that, or you can compare the two strings, the third thing is in function that is also is inside a substring is inside or not to to talk about in that, for example, what if say let's say you want to print the following, print the string in double quotes. We are print this, you want this string to appear Well, it looks like same. What's the difficulty? just like here, we are learning. Then write That's it. But there is a problem. The reason we write this double code, actually, the string when we write this single code, and this double is no longer a string. I mean, what it has insert these double quotes inside? Well, there sequence and escape sequences just like it is considered as a corrector. Inside the string double quote, you use a user corrector which and if you use that That means that means be used as it is, rather than, rather than symbol. Now in this particular case, you'll the backslash will be just out, it's justifying nothing to do with defining a string. It is Another more. Another more easy way is to learning and use the double quotes as a corrector. it starts and ends, they defined the string, a escape cracker where we where we want, okay, for example, we have V, our backslash n, that line. So this backslash n actually puts everything escape corrector. Similarly, we have an escape a tab. Whenever we want Sophie, then a tab whatever. So there are a lot of escape characters. other. So it is good to know those. One more say you want to print. Let's say you want see, Mac's slash back slash forward slash Let's say you want to do that. And your goal is this backslash n will be treated as a newline Okay, go to the next line and create the rest not any escape sequence, it is not listed this slash is also treated as a director. this n, that's combination that is already different way. If you want this to be used want this behavior, you just want that all raw sense, then you should just apply and that's a raw string, everything inside just sequence inside. Great. So and there is much was the most important that I that I told actually, you should now explore the smaller we play with strings in another way and stuff so on. If I talk about strings, I can just as well. But here I just give you a snapshot I mean you should be searching on internet what you want according to your requirements, available. Okay. In the next video, we are some other data structures that we were talking them in more detail from the next video. Hope informally or in a very naive sense is basically that contains data one structure contain a methods and several specialized kind of functions that data structure to perform efficiently of tasks, we may have to define or we may The basic data structures that are available These are the basic data structures that are if we want to. But most of the problems almost by these four basic data structures. Although are efficient ways for customized kind of we will deal with the package NumPy that is, but we will see what kind of constraints are in a very loose term is collection, it is inside. And all these data structures list collection of data of heterogeneous types, element let me call an element, another element string type, another element can be off, let's is a whole list itself another element is can be of different types. And that makes structures much more applicable and much more all the problems. So let's see one by one best way to understand four of these is just to the rest. So let's let's compare them and first is list list is ordered ordered here a particular element number one is at position first element second third 25th element, there their position. So that's what we mean by more reasonable term or more usable term is as contrast to string, once the list is created, can change the third element with another change it that what we mean by changeable means the list can contain more than one one number three, you can have the same item and item that so the duplicates are allowed tupple an ordering of elements there is there are you can once topple is created like strings. different elements in the tupple you have you cannot change the items in the tupple the other hand is unordered which means there is no first element there is no third element, a collection without it without actually indexing because you cannot access a particular element you can do it you can insert more elements want to. Again, the set like in mathematics item appears just once we will see the examples structure. Again, it is it is dictionary is Again, chancer bow, you can change them but the pocket and it does not have duplicates, like I said, the power of dictionary is each one value in the beer is called key and another for 12 name is key for band and and so on. loops and stuff in just a very loose way. data structure. And later on we will see in managed, just like a dictionary if you if will be having a very good grip very quickly Science package which is called pandas because like you're handling a dictionary. So it's about. So, so so list is mutable dictionary is mutable set and remove elements. topple is not mutable. is there, all these types, each and every And the values can have different types. That's data structures. So, in the next video, we a good grip on list topple set in dictionary access different methods of those and we will with with these data structures by coding next video. Okay, continue in previous video last video. So let's go to the Jupyter Notebook how a tuple can be defined or declared set these data structures in Python? So then one elements of the list? How can we insert more and and see the comparisons of all these one So let's go to Jupyter Notebook, our friend let's make multiple files. Let's say this another let's make another file. For example, opened, let's close this file and make another file as this part two, let's start a new file stay with that file as well. But just let's a markdown cell. And let's have a heading. I just introduced them introduce those just them. Because writing these description again, And the purpose is not to actually format you the power of Python. So I just omitted but just write a few descriptions in the star it. That's amazing. Let's see, find a list. in the list is, let's say this. You define they are separated by comma, that's a 134, or maybe maybe three again. So that's the defined using parentheses. So let's say 134. three again, that's okay, that's a tupple. parentheses, that means by default that topple written t that has nothing to do that it's typed. When you will write the parentheses define a set Let's call the variable as S, So let's say 134. point nine, I want to tell you that all these a different type. But then, even if we include the duplicates, later on, we will see only the other will, even if we want to include say a dictionary. dictionary is again defined separated by a colon. Let's say the key value value. Here is a string, let's say two, three, that's let's see the value. Now comma. that consists of key and value pair, another string. So so the keys can be of different and so abstract. So the key is, let's say, say 43, then maybe we can have another key the value is, let's say, cc. CCD. That's a So again, now you know how to define less and how to define a dictionary. The difference because one element consists of two values see the types let's print all the types sprint L is. So the table L is just printed. That's let's print the rest as well. So just copy type of topple is D. And that's a D, then to the s. And then we have, let's say, D dictionary. so the type of L is less the type of t is is dictionary. Oh, great. So that's how you you can find topple, you can define set, and let's see how to access different elements the way for example, to access an element element that indexed with one remember the two, because indexing starts from zero. So If you want to access from topple again from In set, for example, you cannot index it because element is no longer there. But you can you is there in the set or not using in keyword. check whether a particular element or if you you just create the dictionary variable name the value. Okay, so let's practice this in So let's say list value at index one. So that's should be printed as three brand topple at same Brent Brent, whether three in s or not, will be true or false. So print will be true the value with the key 23. So let's see what index one is three s, three years in S Yes. And what is the value with the key 23? The describe more about this D. What is the value the index B in the string format. That's 43. sprint s also let's see s because when we three But if you see the elements of s, there even any ordering, I mean, we have defined maybe in a different way, one three. Yeah, there is no index for the first or second about the defining, declaring or accessing will see more about about the data structures on the data structures because that will be packages, too. If we if we know very well we will be very fluent in the data science to see you in the next video. Okay, in the dictionary and we actually access different I'm going to actually introduce more indexing, because the both are very, very easily indexable all kinds of indexing that you have seen in in tupple. So let's go to Jupiter, and see print the list, that's the list, it has these for example, starting from index one, ending a slice for example. So index one value is element is not included. So, if you get that the same kind of indexing that you have seen as well. So for example, if I say list, start give minus one it will reverse the whole list, in all the same all the things that that we same in list as well as in topple, so topple say from the very beginning till the till till index three, which is actually the fourth they will be exactly index as as it as it the sub sub listings, all all the sub topples, as you as you've gone through through the I will explain later on, because list is mutable that one use when you slice it, when you get same memory and if you change the sub list is that is true for list in slicing. And that copying the references and so on. So I will are roughly the same as as they're in string same everywhere in Python, it has this kind the index, how to index planes, you know how you know how to index couples and strings know how to index strength lists, you will powerful data structure. That's very powerful with some defenses that we will see but even the indexing is same in pandas when you file and stuff like so the indexing is more we will we will cover indexing, masking and in NumPy. But this stays the same as, as you've we can we expand the list can we add more list? The answer is yes. Because list is changeable. One way of inserting there is just to call you just insert in other lists like like two can be concatenated, or combined together called append l dot append. That is sometimes that topple because it is immutable. You cannot actually insert any element to a topple you are workarounds for example, convert a tupple to a tupple. There are ways to do that. But it is immutable. You cannot insert any elements any element. However, you can combine two tuples together again by plus operator and set. The you can insert elements using an insert one element. If you want to insert an update function that actually accepts more to be inserted. That's possible dictionary, equals to that you just assign a new value there great, you can delete or remove any l l one that means the this particular element Deleting particular element from the tupple whole variable whole topple that is possible, remove function as dot remove, and then you that as possible, it will be removed and you that is always available. Similarly, you can by just deleting by just calling the D of so you call with the key and call the Delete here for to remove items from the list there available that I mean there is a remove function, Similarly, from removing elements from the are available. But just to compare them together, are other ways of doing the same stuff, as video here. And in the next video, I will together, inserting more elements, deleting things in in Python. So So hope to see you we saw how to insert different elements to in the case of tuples, it is not possible. different elements wherever possible. So let's all these concepts in a running form. So let's list, that's our list. Let's append an element L plus. Let's say we can have another list are that's six, and then you that's and these will be as you can see this similarly we can 6.8 that will also be appended and this will both arrays are fine. This plus is this plus this append function can be used to simply great topples. You cannot change the topple, can do is you can have two tuples for example, and B, and let's say you have four or five, have a third double, that is just the combination case, you have double three, which is this. together, but you cannot actually insert into cannot insert another element, you cannot any element and so on. Similarly, as the set, set set God add function, you can add anything, the new state of assets this, or you can call if you want to insert more elements, for example, 23. Again, and let's say you wanted to insert one, then the duplicates will no longer be Now let's see the state of D, the state of value pair, you can add a key here, for example, key and the value might be the value might if you see D, the D, the contents of the D Can you concatenate two dictionaries together it possible to concatenate two dictionaries another dictionaries dictionary D two. That is why why? And then we have another key letter can get an A D and D two together? Can I? insert these values also there? Okay. I left this. And in the next video will answer this yourself. And one way to try that is just plus is working or not. Or maybe there is Hope to see you. Oh, I have not used the D this question is there, let me use the removing If I want to remove an element, let's say element at index three, which is this string L is everything but without that element. any element from S, I can call the function say want to remove game, and the game will Great. If I want to remove some element from the view of dictionary. I can call the Add say C, whatever the element is with key C, this particular state with this item, this do that. But But d L is not the only way of a lot of methods to do that. But just to just the most similarities and differences wherever a question in this particular video. Can we with a plus operator? If yes, then we are stuff like so that's the question. So hope these data structures. Okay, I asked you a question last time. Can with a plus operator? So what's your answer? cannot concatenate them together, we cannot using a plus operator. Because this plus operator do is we can call an update function, because key value pairs. But at the end of the day, but we can call update functions, and insert as as as follows. Yeah, so the answer is using update method. Right. So next, we focus on for less the copy function is available for So let's see the need of this copy function that's, that's really important. Let's say by the way, the same goes with set and dictionary let's see a list. Now, what you do is you like you can assign the value of l to another two is also has this, now these are two different variable. So you might be thinking l two is new thing, you might be thinking that both the data structures, most of the data structures a collection of a lot of data it has it is when you assign a variable, or data structure copy all the contents, it does not actually in this. It actually this variable also actually and and the consequence of that if you change you change the index to value from this, the L two, let's say you change this L to value So you might be thinking that this happens But what it also does is it does the same reason is L and L two, they both are pointing you approach that structure through L, or approaching the same memory anyway. And that create the data, it actually create a reference for the same memory. And both are pointing you really want the behavior so that l two do with L two, that should not affect L, then dot copy. Yeah. So that's the function, I'll with L two, it will not affect L. So l two, say okay, this is 4.9. So l two changes. Now, change, l stays the same. Now this is different concept go with with the dictionary. If you equals two s, then if you change the contents that, then copy it similarly copy the dictionary, not changeable. The copy function is not available T to T two, you can now not change D two because doesn't make sense in tupple. Wait. One more thing regarding slicing. Let's say to you like so that's L and let's say you say a list from let's say one to five, let's three, and you go to five by not including a copy, it is not a sub list, which is referencing. is a completely new list, a new memory view, you change the contents in L three, for example, three to let's say, three, if you change the change will not reflect an L. So if you do it does not pick a reference. And that's a array, when you end it, we'll see that when also, again refers to the same memory location. indexing in the whole Python, whenever you when we'll see NumPy in detail, in NumPy, not a copy, and if you change in the slice also changed. And there is a reason to do to do that and stuff like so, again, the dot much more applicable there as well. So, so, you do slicing in general in Python in any select a collection for even for mutable objects the things the things these things, this particular but this indexing scheme actually changing, so I am this video here, I mean, you can explore dictionary and what you can do with each of what kind of thing is more suitable for the at hand. But what we can do in what what we video, we will be seeing some using some functions letting you to explore the the tupple set your own. And to see what function or what of data structure. So in the next video, we data structure. Hope to see you in the next a lot of functions in list. Although in, in as well. But many more functions are available things are there in this list. And let's say with me for me abanda we know already clear know count, extend, index insert, pop remove sense by the adjuster name. But let's see they do. One way to do that is go to internet like So another way is just write this apply. function, it may help you how to use that. object method of building list in stance about an object to the end of the list. Which means we may be able to append another list to to The append method just takes 111 object. Maybe may be possible that a list is appended inside one element because list can contain other So let's see more functions. Yeah, so let's what it does? Sometimes I use help, sometimes oh my god, if you call the clear that the function on a list will become empty. Be careful. this function maybe, Bob, what does Bob does item at index defaulted the last, which means the default value. So, if you call a part it will remove the index it will delete the return that are if you give an index, it will after removing it will return you that. So are many more functions for example, you can for example, reverse reverse, like, like, function, the list will be reversed. Yeah, the following way as well, we have a way of see the list is again reversed. So I guess you can explore several functions from a set, as same as intersection intersection and update add by default or update by default, actually Here it is update. Oh, union is there update is here is not a complete list you may be from you. So here are the and and several and call for several functions clear copy be interesting. What is this item? what it you use this? How can you use this function? is not a function? I don't know. Let's see again, are it is not listed anywhere? a function maybe. So these are all the items and so on. Great. So actually, the purpose what it does, it will take a whole lot of The purpose here is to tell you what kind and what are the similarities and differences for list, double seven dictionary and some having very good knowledge of where to pick in the next video, I'll be actually going I will be coding or solving some problem for are one of them or we will be choosing based well and what so we'll be doing that. But I just want to mention that list tupple set any kind of type, which means a list can contain can contain a dictionary, a list of dictionary dictionary, I mean, this is all abstract, the other one thing can contain an instance And those lists can contain more or less and solving, let me give you a flavor of that you a flavor of that in in just just in a be giving you a couple of examples based on And from the next next video, we'll be probably, on that. So next two videos are completely to see you in the next video. Okay, let's Let's see just one example. Let's say we have stuff. So let's say we have set that set, dictionary. Okay? So let's say we have all So let's make another dictionary. For example, dictionary has key value pairs less The key value is possible. Let's say the key is B. topple, that's the value. Let's say the key say the key is D, and the value is the dictionary, you can just do that, that that is just one I should have incorporated this way. Okay, I access, if I access the element with, let's And not only that, I can again access the element, I can access for example, the third particular, this particular first level will just the indexing or for that list. See, for I access D two, and inside the tool, if I let's say I save that dictionary in k, then for example, this or I can just access all having 4x in gay brand, for example, x and we have done that in loops as well. So I want if you want to create a list l let's say l that can contain a whole list that can contain list another element is to pull another element have some other elements let's Lee's game can do that, these data structures are much access element at index two which is dictionary, you check the type of that element that that that element and play the way you want to for example lists we can let's say we want list off all the squares till till starting 10 for example zero square one square to square of doing that is a quick shortcut is to just right okay, x square for x in range. Then till nine, including nine and you will get a list of x squares where x starts from zero one by one and that's how you can make a list shortcuts. Again, you can make a sale For of all the squares for x in range, let's say, 20. And you want to take a step of, let's 20 do not include 20, but take the step of which is this. I mean, there are, there are these. One, one can explore more and more basic thing about these data structures are, a list can contain a dictionary, and that have an element which is another list and to do each and everything in that way. Okay, we will actually solve a problem using these to choose one of those. And that video naby bugs inside. And we will we will play around So do attend the next video because it's really will get a very good grip on the data structures that we are launching for you, okay, hope see a problem just to get comfortable with some problem and solve that problem here using that I'm thinking is, let's say the following. should I type all these things? Okay? Let's you have different student records to learn records the mark marks list in each subject, where of subjects. And all these records all these you want to enter all the data in computer student. And display. That's the problem. example, you have a hardcopy you have you students, each student have a different ID. some student may have taken three subjects, and so on different students may have taken want to first enter each for each student, all the data that is in and then you want the average marks of each student. For example, the marks for all the five subjects are available, and that's, let's say, the average marks. compute for example, the to just collect the a function for that. So let's say define a teacher, let's say, let's say that function, is I say, okay, while true, I made a loop while true, just take the data the form of you first say, okay, ID, student enter student ID. So he enters the the person might have define a dictionary, maybe a dictionary may add and remove different values. So what student ID, and in the string form, and then as the marks list. So marks list as input. by comma separated values. So enter the marks using write the five subject marks by separating see more students is equal to let's say input, enter, yes, or no. for adding more students, so if for example, you otherwise personnel. So that's, for example, and more, we will keep on getting more and increasing the data. But one thing that we ID, student ID is already in D, if that is brand. brand that student ID is already inserted. to do something else, what we want to do is we will make a dictionary, we already have that's our key. And at that key, what we do it using comma because you're expecting and So that will return a list. List of string are string values. But all these lists they that will be that we'll be getting populated example, more students dot lower, for example, user may interest at a lower form or if that No, if this is the case, or if there is no No inter no inter Know, to quit when insertion, say that's your message. So wherever the user the and that's it. Otherwise, you keep on on asking the, the, you keep on asking more a no, then you just return. Otherwise, you make another equation and keep on moving. be available to you. Once you are done with once we have this data collected from the for each student individually average marks function works or not. So let's say we have is equal to get data from user, let's just Okay. Enter student ID, let's say ID is 12. let's say, well, one, let's say 24, comma 65, comma 87, let's say the first two three subjects, then internode width, so I the problem? There is a problem. If more students More student that's, I guess, more students, That's a huge mistake. So I just copy there, Part of programming life, actually. So I guess again. So 12, let's say, and the marks are with let's say, 13. into no to quit. No, I moving. The other student is the student ID student has gained, actually, let's say this seven subject or let's say five subjects. to 677. And let's see a bad subject, let's I want to insert one more, so do anything now the student ID is 12. Again, let's say, And whatever the marks, let's say 45, and something else. But now, the message is there, the key value index, now you cannot repeat, inserted the because this may be my mistake, ID, let's say 23. That's the ID or maybe a are let's say 45, comma, 45. That's it. And And that's it. So now I have received the that student data is student data. That's with key 12. And that's a list. But this list type, we will see how to handle that. That's the marks list. And that's the ID in that data. Let's write another function that helps we want to find out the average marks of each So let's define another function and get average receives this dictionary, let me call it as Okay, so what we want to do with that is the so we will define another dictionary, let's is empty in the beginning, maybe, and then x and d, what we really do is we go to the located at x L is basically D sub x. So that's is located there. So then what we do for i call it for marks, marks in L. In this particular sum of sum is equal to zero right now, there is no marks. So what you do is s plus integer because they are already in string string format, so you populate all the list. contain the sum of all the marks, then what save that average in ABG. Marks decked dictionary, use the word deck, for example, you can but the average marks. And the average marks can the list, whatever the list is. So that's marks. And once you have an N one by one, once we receive all these, we will then begin the average marks. So let's see, let's call So ABG marks for example, equals to get a inside. And if there is no error, then it average marks for each student for x in a God average marks as then you just Brandt everything Oh, if there is an error, non type object why non time object? We have done some for example, when we run this, so let's run Enter to create a cell everage m What is that returned anything. That's a bad programming. actually. The the value that we need. So the great. Okay, great. You have this and now this is and now we can just populate that 38 student 45 core average marks 90 49.2 and great. So that was just a review of split int, and functions in general input function, stuff. So although it was a just a tiny problem, and strings and all that stuff. Okay, that's we are actually diving into the data science we will spend some time on NumPy and then very, very powerful built on top of NumPy and we will also try to give you some snapshots in the next video. Okay, the next few videos is the very very popular package for numerical is much much faster than list. One one restriction if we restrict the list of a lot of data objects. That was so abstract, we restrict a list that all the objects they for example, they have same type then that the NumPy looks like, but NumPy is very, very define a list with all the elements that are in abstract way can handle heterogeneous kind on these items, they will no longer be faster that information or metadata for that element with respect to memory, because if the type about each element, because we need just to the type is same for all elements further that are much more faster than then then a very very fast universal functions available it's a package i mean it's it's a whole directory a lot of modules and so much at the end of terms, it is like a list with all the same all these objects are numeric type, although data types, I mean all the strings are all the power mill the power of NumPy array will be working on numeric type data. So in this focus more on numeric data then other kind NumPy is installed or if you if you have installed there it is in the side packages kind of a as it is but we can rename this NumPy just any other name but if you see the books or much more popular. Okay. Now we can define is just a method of NP kind of function. And the list of several numbers or we can define give a topple whether we give a list an array of this array, this NP array so let let's get our hand Well dripped on, on this NumPy. And we may rename as for future use as NP. say a is an array, let's say NP dot array, say, let's say 12357. Let's say that that's a topple rather than a list, it's our choice. 235 Let's, that's, that's another array for will give us a but if we just see the type an ND array numpy.md array that n dimensional attributes of this a and this B. Same. Similarly, defined this be using the tupple. But the than a list or a topple. So that's how you can create the the array is to check the attributes of a for example, in a so for example, a stores all the data we can we can specify the data type if we example, in teacher that means as in teacher the type as float, for example, so data type options that are available to define the data data type can be defined automatically based means. So if we now define type that is, if again in digit 32, but if you check the type number, yes, that's float 32. Again, there define here there are several options here define the NumPy array that's just getting we will play with these arrays a bit more. in the last video, I introduced NumPy. And list as well as a topple. In this particular of the NumPy array variable or sometimes called properties, but I will discuss for example, d type a dot d type, and that store actually the data type of the elements of the array of NP array they must have same data type is. Okay. Now, there is another property sometimes actually, what are the dimensions of of the with the following example. Let's say for consider that a list for example, 123, that's for example, if np.if this is NP dot array. a one dimensional array, because we only need you need to access any element in this array, only one index, that's okay. So in this case, other hand, for example, if you see here, array, another list. And that's another list say that array one, and that's array two. arrays. That's, that's an array and that's and a two is this array. Now if we need to we need two indices. First of all, we have a one or a two, we need one index for that, means we are going to access with elements a So first of all, we say okay, zero means a to one of those. So zero means the first element, this is the zeroeth element, this let's say we want to access the first element. are talking about this. So very loosely speaking, to access an element inside the array is called that actually defines that that actually describes Consider, for example, this is a 2d array two dimensional array A one, and let that's another two dimensional array, a three, for two dimensional arrays, let's say NP dot array. array is a three dimensional array. And the indices. First index will define which one say you're selecting that. So one index is inside this structure like so, we need two index. For example, because it is a two dimensional which one dimensional array you are, it has so which one dimensional array you want to index five, now you have located the fifth let's say the eighth element. So we need three the dimensions of this array is three. So just to get more comfortable with with the we have an array, let's say a is NP dot array. 123. And then we have another array, one dimensional another array. And that is an array of these array. It is array of arrays. list of lists, what's the problem? Oh, we haven't imported as NP? Okay, we need not to import that every a few after a few hours. And I'm really I to import now for the first time. But once is running, you need not re import anything. and them. So that is to hear because there to access element number three, this element, of the two arrays, which has so the first or one. So I am going to look into the first going to look for the element number two element the elements of multi dimensional arrays are Let's say we have another array just to just say, and we have a list. And that list actually one dimensional arrays. Not only that, actually me just, let's say we have 123. Let's say say we have another 2459. The the sizes of different. Yeah. Is that true? maybe different? array has size three, and the second array And now if we want to access, for example, I want to access this element five, so that in that array, it has index two. So I've accessed for an array. Why? Why is that? Why too many indices, for for that is one y one dimensional, I have to, is another one dimensional array. And I have and another 1d array of concatenate them together, The problem is when you are going to define elements for each dimension, they should stay has three elements, the second array must four elements, and the first must have four will not be defined like a multi dimensional our first array with let's say, minus one. And now we will be able to access for example, to B again, we will see okay, select array select the value indexed by two, which is true if you if you're going to define for just give you an example of three dimensional let's say we have one, two and three. And remember or so let's say that, that we can more list, why not? So let's say we have a that is. That is a two dimensional array. say we have another two dimensional array. array with same kind of consistency, the number are our minus of the, the other ones, let's plus one. And now we have this, if you see dimensional array, that is also a two dimensional is basically a three dimensional array. Now, C, so if you Oh, we have some, Oh, I should rather than spaces. Actually. Yeah. The reason So MATLAB allows this space separated list, as well. But Python requires comma, they're note, MATLAB allows you to have commas as everything to comma. That's great. Okay, that is three, if you for example, want to access First of all, you select the, the one of the is the first 2d array and that's the second access this particular element, this particular to access that, you first have to access one So let's access the second one with the index in that array with list which 1d array you're first 1d array, so the very first 1d array which element you are talking about. So I'm two in this particular array. So now, if you So that is basically how and by the way, you dimensional array will be an array of three you can make, for example, n dimensional arrays, nd array, n dimensional array, not the type add as many dimensions as you want. Great, and more in in the upcoming videos in particular, NumPy we have already discussed D type we we will talk about shape and we will discuss in the next video. Okay, in the last video, ending property of any any NumPy array. And dimensional array in Jupyter. notebook. Let is the shape property. Let's see what what to Jupyter Notebook and see what actually seen this C as in the last video, we define two arrays of 2d. And each 2d array contains three elements. So what do we mean by shape? So shape is 233. And let me tell you what a tuple. That is returned to three and three. are there? Here we have two. So in each two there? Well, three in each one, the array? So basically, this C dot shape, zero, tells that is too. And this shape. For example. arrays are there, these many? And this shape, array, how many elements are there? Well, you 111 screens kind of thing? You can you NP dot array with just one element, let's number of dimensions here? What do you think? the number of dimensions? Strange? It's a For example, b is equal to NP dot array. And are the dimensions of B, it looks like the as their the dimension of A is one, it looks zero. Because that's an array. If you pass you just define just one number that can be but that one number is just as a yo D array. you get one day if you concatenate the last a lot of duties, you get a 3d and so on. Get So yes, In this video, I discuss the shape properties, let me let me discuss some properties, of elements complete total number of elements that is size. There is also I guess m bikes of bytes that the destructor is taking inside mean properties, if you just apply a tab and functions. And you can you can check a lot we will explore later on. Sometimes they are them because they are very, very fast. And of these functions. That is the reason why Anyways, so in the next video, we will go show you more fun stuff with the NumPy. So provides a lot of functions to create arrays, And sometimes just for. I mean, there are for example, what if you want to create an function in NumPy NP dot zeros that tells to generate a lot of generate an array containing to do that and stuff like so, there are some I want to discuss those. One function is NP this is not a two Rs, this is single r NP function, what it does is it creates an array creates an array for example, if you say okay, a 1d array that starts from the the values So that's an array. That's a quick way to 100. Yeah, so let's see, let's see running Notebook just to get a better look and feel we have a equals NP dot arrange. And let's what is inside a, you can see this is an array to 99. Maybe you want to create an array that particular number. Maybe those two numbers actually allows that. Let's say I want to I want to create all the array that does that. 20 and 100. But the last element last index not the least, if you want for example, to want to take a jump of three. That's possible. something that you know already? Remember not for a minute, just for some seconds. Let dot brains function? It looks like something for i in range, for example, start from 20. So it has some resemblance with range function? What's an arbitrator? why I'm telling you as well here, just just just just spend a you might be thinking when we call this range, you might be thinking that it returns a list that doesn't happen. It returns nothing. Actually, call it it returns just an object. When you do. rounds one by one element one by one. and return another element that it never creates for you. That's awesome. Actually, it generates the next number as you move on. So it saves they are called I craters that I played, they to get a list, if you really want to get a the range, let's say in the same way, and list don't just provide me an ID. And that Anyways, that was just a side note. It has So NP dot arrange, it actually returns an it returns an array, complete array the way has resemblance with this built in range function let's discuss this NP dot random dot permutation it has a lot of sub packages inside random one module is permutation. There are a lot Let's see what it does. So for example, let's let's say permutation. And what I do is I it does is, this NP dot arrange will return nine, these are 10 values, and then this permutation dot random that is in the random packet of rearrange all the values in random fashion. same elements, but in a different order in this a, it will be having all the elements away. And that shuffling is completely random. may call some function, you may want to write arrays that are that that do not have a particular to test your code just to test how it works of getting shuffled kind of array. One quick function. The NP dot random package does not of other functions and be random, for example, Rand int, that creates a random integer. That's, this and we have, how can it be used? Okay, we can give a high value, I mean, and it creates ending at high. So that's how it can be used. dot Rand int, create a random number between it will return some random integer between some other is it is returning 30 again, 29. we want to maybe want to generate random integer integer. One thing that you might be noticing return value? Is we for example, what should V is an array? No, it is a number. It's an because it is returning a random integer it that integer randomly from 20 to 300. So it Yeah, so we will be exploring some more functions be moving towards this fascinating function more to come for NumPy so hope to see you we saw a range function that's a very useful and just see see the output of a particular kinds of arrays. Further we saw permutation package. And we saw that this this permutation different kinds of odd if if array is applied shuffles all the, all the elements of that way. Today, we will explore this random package function, but that reshape does basically array, let's say, array, is let's say we have if we call a dot reshape, and we give, let's array out of a, which is B, and that will array, or a matrix with two rows and five with this B, just like it's a two dimensional this B as a two dimensional array and work if for example, we want to, we want to test way to make a matrix is just to call arrange just reshape it into the desired order matrix let's go to Jupyter Notebook and check this reshape function. So let's go to Jupyter. to generate these random numbers. One for other way for example, array, an array can function. So now, if we create this, if we value array will be generated in a and a each between zero and one. So all these numbers number is zero and one random number. And, of this random number is all the distribution the histogram, the histogram or the distribution give you give you one or two plots, using package later on. But let's assume that this package that helps us plotting just import that. And after importing that, you just plot pass a and you can see the histogram is roughly we can make more bands, for example, we can see almost all events they are I mean just data set, then they will all look uniform. this. And let's say B equals NP dot random numbers, or Gaussian random numbers, let's are is the bell shaped curve, for example, say equal to 200. And we can see a bell shaped is is Gaussian distribution looks like so. random is really important package. It has random numbers from following from different or in statistics, sometimes we need to generate for testing purposes, sometimes for adding and stuff like so. So it's good to have a Next we see reshape function. One more thing. a two dimensional array of just random numbers, Rand. And you can just call a, you can just and the C will be a two by three matrix. If of four random values. If you see c dot, and two. And it's a two dimensional array. Further, array c equals NP dot random dot Rand, maybe four dimensional array with this particular will be level b, this. Yeah, so let me let that thing is. There are two arrays that are Okay? Now, each three dimensional array has So each two dimensional array has four one dimensional two elements in it. So that's what the structure see the reshape function. For example, let's we have 100 values. And then we say reshape by 25. So this D will be a four by 25 matrix. will be a four by 25 matrix or a two dimensional so sometimes we want to work on matrices, function to generate a bunch of numbers. And quickly, and then just test the performance only the reship not only returns the, the and you can reshape an array into more than example, arrange 100, let's say dot reshape, dimensional array. Now, this D will be a three Yeah, so now you can access it and do whatever and permit random, there are other functions press z, and you just see the zeros, and then know what that function is how can we use other function there is an important function and that will generate an array of all ones, There is NP dot empty, there is NP dot empty, some matrices very quickly. And you want to So yeah, so there are a lot of functions that there are a lot of functions that can quickly That we can quickly create an array test or to like we're everyone to use. And we can ones zeros, they are there are random dot they are available. For In the next video or slicing inside NumPy array and we will with or slicing from the array In the list is the difference in? What is the difference the list, we will see that in the in the next Okay? Here is my favorite topic in NumPy slicing. the way you access sub arrays is just the sub lists. And you already have seen, how in lists and in strings, the difference here you get, for example, let's say B equals a NumPy, then B is not a copy, it is actually if you change any element in B, the corresponding array. However, if A is a list or any other the slicing this, this kind of slice gives difference, we need to know that rest of the do this kind of indexing that is how you can things are same, except How can play How can let let's see that. Let's see some examples and see how the slicing actually creates a Jupyter Notebook and see how can we play with and B dot arranged, let's say 100. And let's that's a now a, let's say, let's bring some the elements starting from index three, ending B, that's blank v. Let's see what's B. So to do is I'm just changing the contents of the elements inside, no problem. So I'm going in B, let's say, I'm going to change element just placing that element as minus 100 minus the contents of B has been changed. We are of a also has changed. That's a big difference structure or slicing a list, when you slice but that label or that variable is accessing copied. There is one memory view. And these elements using B, or you access those elements if you change the memory using B or A you So that's one difference. Now, after having want this behavior to not happen, one thing example, a, let's say three to 10. And then that copy, you can copy that and now B is different memory view, if you change B now, is there whenever you need copy. One thing number is applies you very fast implementation if if you are aware, your algorithm is not give you much much efficient access to the without actually making the copies inside So this is one plus of NumPy Over the over so far in Python, okay, let's play with indices, let's say what do you think? What is that let's say five, what it will do, it will start it will go to the last index, but it will it picks zero then five then 10, then 15, think what this will do? Let me just let me do. Yeah, what it will do remember, if you and end they just get swept, and this becomes is the same kind of impact, you start from one from the end, and you just based every with with kind of step starting at the end is if you want to reverse the array as a whole the end and pick every element from the end will be reversed. This element is there, remember Let's chain that element. So, so a adds position. minus 1200 is located. So Id x is equal to Yes, he has a no index Oh, there is no index index? I want to find out the index where or something, I want an index function is the index? Where minus 200 is located? There for example, for example, let me see whether in NumPy or not. No, it is no longer there. So in the CS, what that does, I guess that returns an array representing the indices and then it returns for example, the indices it becomes it becomes difficult, there may the index where the minus 200? Is, is located? Huh? Yeah, very difficult. Seems like very difficult. function? Why don't I just play with play equals minus 1200. That gives me a Boolean minus 1200. So, the array the returning array, array, let's be that array is true or false is minus 1200, that index is one that value And then what I do is, I just multiply that with saying that a dot A dot A dot size, so are the indices Okay, then what that's point multiply them together, what I will get is will get, how can I How can I find out actually, out how can I find out the index where Where what is B. Now, the B is B is just an array. That is looking at it. So how can I find out? problem is finding out the index. Okay, that's, aid dot indices? And just give a minus 1200. is an error, there is an error. Oh, I'm lost know how to find out the index where this that's a question for you as well. I'm also lost. So will solve this problem to finding out the lot of elements. And then we will continue great. So hope to see you in the next video out the index of a particular element in a in a NumPy array. And then we will be practicing to see you in the next video. Okay, let's want to, we want to locate that element in element is in the array. So array has this this array has this particular element, and this element inside the array, there are several their index is simply you call the function A is equal to minus 1200. And that will return then you return that kind of thing. So if exactly of the element that is there. So the value, for example, the value should be three you can do is you can right, okay, ie x is wherever it was created, okay, great. Now, Let's do dimensional arrays, let's say we say, let's say we have a five by four matrix, all the values by multiplying them to 10. RAND function, all the values it generates this multiplied by 10, what it does is, it then round function, actually, round downs Now a will be worse the problem round that maybe there is NP naught round, maybe that Yes, and B dot round. So round function of that's five by four, a four, five rows and the second row. First of all, let's say I particular entry is second row and third column, second row means the row row first has index one has index zero, column two has index two, is what this particular entry is. What if example, we want the second row. So that's meaning of this is you the role should be how you access the whole second row. If you row, for example, or a whole second column, column number second, and all the rows, which That if you see, that's the whole second column second column is. Further, once you have a, matrix, let's say you want, you want row number And then of these rows, you want column number four, let's say. And if you do that, you access row number two and row number three, because those rows, it picks these columns, and you more, you can, you can do a lot of processing A, if you just type a dot transpose, that transpose of it. Further, there is a complete For example, if you just import NumPy NumPy this linear algebra library in NumPy, has decomposition, computing determinant of a what not. For example, let's say we have la Rand, let's say, some three by three matrix. of this matrix, and this linear algebra library, this is one scientific library, that may be want to do research, they might be thinking, a lot of functions related to related to these is there. Okay, so that's about indexing. want. One more thing, just just one. One last want to do is let's say we want to sort this column to be sorted individually, what we can pause X's equals zero, access equals zero, and the result will be if you see the result, individually. If we want to sort for example, sort x is equals one, and every row will be dimensional array more than three more than be free. So which with respect to whatever can do that, if A is one dimensionally, then sorts just sorts the one dimensional array to descending order a sword just sought them Great, I mean, there is a lot to discuss, slicing here. In the next video, I'm going the fancy indexing that is much more powerful So hope to see you in the next video with way of indexing a NumPy array. In the last for example, start from here and here and a NumPy array as we have an array and we can example. Let's say a is one dimensional array at index one, pick the element at index four, of array inside can be a list or an array. just pick the elements that you want to pick, you want to pick first element, fifth element array and pass it. And in an index your and that's possible in NumPy array. Further, you mask as well. So Boolean array, for example, a true pick that element wherever there is the elements that are picked. For example, is one dimensional array, let's say, assume Now you pass a Boolean mask inside, where or false values, wherever there is true. So value, pick the don't pick the third value, value, pick the sixth value, pick the seventh is also possible in in NumPy. One thing that which is sometimes called masking, if you index, or index in a Boolean form, you by in slicing, you get a view that's a separate it is by default, a different copy. And this that you do, for example, start from one go that is your indexing style, that is called view having the same memory. However, if you Boolean array called masks, then you get a you if you get a new array, you change the indices. You're not getting that change happen between slicing and masking. Okay, this kind For example, what if you want to exit? What than eight, one way to do that is just write eight, well, a is less than eight, we'll create element is smaller than eight, there will the inside array is a Boolean array, and you condition. So it will return all elements is that? Further, you can you can have these difference there is an AND operator A and way. So I'm going to discuss the difference whole in this video. So let's go to Jupyter this masks. So let's say a is again and B dot arrange, our a. And what we now do is we access the third element and the fifth element and the And that's our B. So that happens, let's say, need to know is if you change the elements minus four, that change does not happen in doesn't happen in a, a does not contain any kinds of indices, the array index By default, let's say you have this a and you want to let's say that are smaller than let's say 40. So that is possible now even contain only the elements while further if you want to than 40 that are smaller than 40. And they And they are bigger than 30. Let's say you 30 and 40. You can just access those elements all what's the problem here? The truth value ambiguous use a.ne or a dot all. Okay, this than 40. That's a Boolean array. So what's What's the problem? We should have used that. these, we were missing these brackets because and stuff like so. So use parenthesis rate. between 30 and 40. Now, one thing, what's and this symbol and the difference is this the sides of this end has what is one object And this particular symbol is used when the and each element of that array can be true and is using arrays, however, this is used that's the difference. Other variants of and these are the same things, but remember the for single objects. Similarly, there are other or that is used this way or or that is used that is used like this way and not for otherwise, left side, I have symbols, they are used for used for single objects that has true or false really, really powerful. Later, we will see with particular kind of conditioning, that with these kinds of indexing. And that's really the difference here between Aaron and I've So just bear with me some more time on NumPy. NumPy. And then we will move towards another NumPy is coming, I hope to see you in the masking, which is sometimes called the fancy discuss one more feature of NumPy, which is I think, for example, you have an array, let's array 235 and nine, and you want to add, in say five. So one way to do that is create add operator and you are done. Great. But say this is array, a NumPy allows you to just automatically broadcasted to match with the happens you need not to do this explicitly. value. For example, if you have one variable, example, this particular column, let's say column in the first column as well as in the three to be copied again and make a bigger allows you if you just write this as a plus to match the size of the other operand, wherever certain rules to to know when broadcasting time. For example, if you have this matrix you want for example, two one and six two, may not happen because in this way, if I want should be if if the structure is broadcasted will be arrayed and the addition cannot happen. addition cannot happen. So, this here you cannot happen, but in several cases when you with a particular thing wherever possible is just a I mean it just a feature of NumPy dimension of the other operand to apply a Next, we see some more important functions if you want to concatenate two different array together horizontally, you can get out you the two arrays together and returns another concatenate two arrays vertically, if they similarly, there, there is another powerful functions, these kinds of functions, they very, very, very powerful, very, very fast Christ mean the implementation the all loop time and the things are really faster when that, it is always recommended to not use of, to achieve these kind of results, whenever because the efficiency of that universal function loop loop or whatever function you will be So, and by the way, there is another function axes. And it will either act as horizontal upon whether the x value is zero or one, whatever. these three functions, just quickly neural say, broadcasting as well. So let's say we array is let's say, np dot random dot Rand, just multiply this with them. Remember the we just round everything. So that it becomes Okay, that's a, let's say, so that's our a, will be added everywhere in a, and that happens for example, a plus, for example, np dot range, reshape it, reshape it, to reshape it to let's then still, what what will happen is just should happen. First, what what will happen will be added to every column A, and that broadcasting. So broadcasting is that powerful. is a, let's say we have the that's another say that new array is two by two. And again, round just to avoid the decimal points. That's D is a two by two array, if I just concatenate which will be two by five. So C equals np.at call these A and B. One thing that you need x stack, horizontal stack or vertical stack, you have to give them in a topple or you may together maybe you have maybe you have 10 You have to give all these as a tuple inside stack if we want. I mean, one on top of the as well, if you want. Third is sort function. NP dot, let's say a is NP dot random dot permutation, Let's say that our a, let's say, this is a, already sorted. Why is it sorted? No, it is say we want to sort it a dot sort. One way you're done. That's the value of a another exactly the same is to use a universal function, thing. Now sort by default sorts in ascending then what you can do is you can sort aid or order, then what you do is you just reverse now he will be sorted. While sorted in descending just just to give you one more flavor, if of strings, for example, ABC, and another another string? Whew, 785. And maybe we have That's a string. That is possible. As long create an empty array. Now, you might be wondering, these are all strings? Well, the answer is alphabetic order, whatever the alphabetic alphabetic order should become first that will they will just join. Yeah. So yeah, so not the numeric value. Okay, great. There and then we will be moving towards panda's for better processing of data, I hope to see we saw horizontal concatenation, vertical broadcasting and stuff like so. Universal it should be speed, speed. Universal functions about NumPy. Whenever I start NumPy, I said, you how fast that is. So let me give you an array with a lot of numbers, and then just to add all the numbers in this array B, let's NumPy. And then let's use universal function If for example, we apply apply a universal speedy that universal function is, because is much faster, how faster let's check that command time ID that will tell us how much And if you run this command, it will it will times. And then we'll report an average value once. After that, we will also we will also we will see whether that is even closer to just check the speed of universal functions much NumPy implementation is faster. So let's random dot Rand. And let's say that array case. Now what we do is we let's say we we a function sum. That's a built in function. a built in function in Python, not a NumPy task using NumPy universal function and P the same as if we if we write, for example, So whether you write b dot sum, or you use argument, both these things are roughly the It will take a time because, okay, the sum a universal function in NumPy. That's a Python is not a vectorized code, nothing. It takes of the elements of this array. And it does loops. However, the universal function takes 2.7 milliseconds, how will how are you going faster you are around? Around 100? times your literally faster NumPy, the universal function okay, the sum function might be too slow. let me define my son, and my son just take G. And what it does is for, let's say s equals 2x X plus equals to x and then just return you think that this is really a great function. for this time it my son. And let's pause the roughly the same as your calling the sum function, is very faster, fairly faster. So, use universal functions, if the same task has been a can possible, avoid loops when you are working that, because the universal function written all the interpreted slowness that is deferred really really faster and shows its power when universal functions. So I can speak more about NumPy. And we end the NumPy here and from a very, very fancy and beautiful kind of package the pandas library the pandas package completely is there in pandas is built inside is built kinds of stuff, slicing and speed. All is So we will see one more package after pandas And we'll do a project at the end using scikit together. But for now I'm ending NumPy here hope to see you in the next video. Okay, welcome very powerful of handling data, manipulating cleaning and data pre processing and whatnot. So most of the features of NumPy is also available Let's let's dive in. I mean, this pandas is package, that you can handle very large amounts the data is located. The missing entries are manipulate all the data you can prepare all pandas package, so let's just start pandas of pandas. One is series and other is data one more index. But the most important one frames. So let's just define, first of all, And you can rename this as PD, that's a, that's rename it any. And then you just say okay, array, you pass the data that you want. And like, just like dictionary, this a is a key two, five, this B is index 4.5, C is index you can, you can supply your explicit indices the default indices are 012, and three, but the way you want. Now, once this data object you will find out the values you can call indices let's see in the Jupyter Notebook of all, import pandas as PD, maybe or something check what we're going to reveal working in working in right now is 0.2 4.25. Read. So say a as PD dot series buzy dot series and let's say these are the values. And then we the indices are a maybe the indices need not let's say the index of fighters. Let's see. series is created. Series basically handles see DataFrame handles multi dimensional arrays, typically two dimensional arrays, but okay, and you will get all the values inside the that you get, let's check what's the type What is that thing? That's a NumPy array. will be a pandas object. Great. So everything role inside pandas. Great. So now, let's check That's also an array of index type, that's in pandas. That's an index type object with this a, just like we are working with dictionary change the values, we can add different, we like these. Just think this data I'll just like the dictionary and these are the values. And this is one series does, and manipulating series The way this, we also can do slicing. Let's say we say we want to access all these one difference slicing using implicit indices, for example but if you access like so, using explicit also included. So that is one more fancy way that's a serious object by the way, we can a dictionary for example. Let's let's go back create a dictionary. For example, of plates, grade A minus Grade B, red b minus, and let's a series object or panda's object, by just another dictionary for example, and we can defining the series object is just to is just ways to just first create the dictionary and and the series object will be created. Okay, will move on and see more features of pandas, upcoming videos. Hope to see you in the next dictionaries, let's say we have a lot of students a minus grades defined to be 3.5. The b grade a number of a numeric value that is 2.5. And do and then we create just a series object just the numeric values as GPS or something at 85 marks in total, a minus graders defined and then we create another series object, PD dot series. So let's go to Jupyter Notebook And build the series object, let's say marks, say, a grade, is has has an eighth grade has let's say we have a b grade with GPA value, we have C grade with GPA value, let's say with GPA value, let's say 2.5. Let's say that's a grades series object, let's say using PD teched. Now this capital a capital B, capital and this for 3.53. In 2.5, they will act like just now called grades dot v dot values, so just values, let's say, beget this grade stock available. Similarly, if we find grades or define another dictionary, for example, marks a while the total marks are 85. For the a are let's say, 75. Let's say for C grade, let's say 65. And for D grade, let's say the that's another dictionary. Now, let's create series, series, let's say marks dictionary. marks, just like so, you will see the marks they are integer 64. Ghana values, now we for example, if we just want to access for marks between, let's say, for example, what we can change that we can just play like a index In a, we use for example, slicing, we let's say we want to go to two what will happen? for example, if you want these are explicit and they are there. For example, if you can indices that you are given that you are given the first value index at zero, the second can do that as well, one catch here for example, problem that your explicit indices they are like so, then the series object may be confused or implicit indices inside we will see how allowed to use explicit indices as well as So, he just so, yeah, so, we were here. So, This marks as a series object, these the series or data with just one dimensional list or later, we will see data frame that actually looks like it can be looked like as an extension we may have, for example, two dimensional something like so. And we will be seeing this for reading data from files and manipulating the next video data frame that running form you in the next video. Okay, in the last video, that data frame is basically if if the data for example, a record as an array, then you record. And each element in that record is way of two dimensional data is very well handled series. So but you can make these data frame example, you have a great object that grades marks object that we created last time, let's what it looks like in in Jupyter. notebook. series object, and we have a grades series the name is rates, okay? The name is like let's make a data frame. Let's say D, or maybe whatever name you want can also be defined using a dictionary. Again, data marks. And grades is the key for data frame like so. And now if you see if you just and feel of I mean this as the index is the marks is 85. The grades are for at index B, so on that that looks like so not only that, to a NumPy array, and you will get the flipped Great. So that's how and you can have for together and more columns will be added here. I mean, it has a lot of columns, which normally one record or one sample of the data that really, really ideal data structure for working want to manipulate the data and stuff like access the D, for example, that's brand D, values inside D, other than No, so what are again, a two dimensional array that is completely this particular element 65, that is row number indices at row number three and column number T dot values, just assuming that dimensional with do and column number one is index with great. So that is there. There are more things d dot columns, columns, it will give us what grades. There and there are other properties. we need to know Rs, for example, this there, like so. Okay. One more thing that you need that sub D, that is this one. That's the D. just we want to add another column here. And marks. And the scale marks are what if we What if we have computed marks out of 90? to do that, and very quick way to do that you just add a new key, let's say, scaled simply all the marks column divided by 90. have just completed all the marks by 90, and from 90? It is rather than 100. It is from from 90? If you want to compute the marks by 90. And maybe 100 is multiplied here. I that's what it is, I guess let's see. So now that is there. And oh, it does something else. anyways, so we see we have just, I mean, we've we just found that we just inserted that column each of these kinds of values. Maybe we have later on, we suggest that okay, we should Again, using the concepts again, just like is deleted from data. And you're again with you can delete columns, and indexing is really let's say, you want to bake for example, or want to pick all the records such that the than let's say, greater than, let's say 70. bulk of the marks are greater than 70. This be copied into g with this condition. And using ands and ORS and combinations and all stuff in NumPy as well. I mean, this is called as well. Okay, so that's how you can index to basically show you one type of problem the missing value problem. Sometimes you read of the row column p values they are just missing. reasons. How can you How can you handle those to handle those kinds of missing values, which values. Also, they they mostly used interchangeably to handle or see how to handle missing data Okay, in the last video, we saw data frame remove columns how to process data, how to conditions and selections in in bond as we video, we are going to see one kind of missing or maybe not anything or sometimes this nun of any function. In Python. This non type Nan or Nan is treated as none or interchangeably. by that, let's say we have two dictionaries, a and value is one, then B and the value is So for example, that is one record with columns first record, the value of a is one, and the insert another record in the same data frame. time, well, if b is available, which is three, a C column is added now. But for the value we will say this value is missing here. But the value of a is missing for for the second sometimes called Nam. So these are missing working with data. And you're reading data somewhere or large files and stuff like so. kind of these kind of I mean, this kind of situation, data frame, again, a dictionary, let's say one and B, let's say four, that's the first is another dictionary, let's say B is minus That's it. That's our data frame a. So now a, you will see Oh, what's the problem? Is in a wrong way? Let's see. Oh, we have to a list of it, you have to create list of dictionaries, missed just this index list of that. Okay, that a and this value is missing and that this is typical, I mean, there are a lot of supplies to hell these missing values is to fixed number for example, there is a fill you supply as zero that means wherever there fill that with zero, or maybe any any value way to do that, and now if you see the value that, another kind of function that is available drop na that that function drop na, what that a missing value. Sometimes if that is visible, missing values, if that is visible, then go are a lot and they are spread over a lot of they will create a lot of I mean data loss how to how to handle these missing values. values using fixed value or you can drop them there are other ways of handling the missing missing values in each column using an average ways to to handle these missing values. But they are you can fill all them with a fixed you are ready to go. Okay great. Next, we what is the what is the confusion between and explicit indices. And that I will discuss you a look and feel what if the explicit indices what if you call this this particular command index or the explicit index, that's a problem. and three they are also explicit indices. to the implicit indices that are default indices, this confusion is there and we will see how LLC function and index lock ilsc function, see you in the next video. Okay, in the previous video, I mentioned supplied the explicit indices that can conflict example, if this is the series object, or for indices, let's just think about the series one three and five, if you for example, access one that means the explicit index for sure, example, one colon three, the default behavior that is to use implicit indices, and by implicit index one at index one this is b, so B will and then you move to do which is C then C that will be printed, but the behavior might explicit indices, which means access one colon the last index is also included. And in that is of a so as should be printed, and index this configure might be there if if this is two functions one is called l OC. And another LLC, that means you are using explicit indices. And whenever you call, I LSE that means you're what whatsoever. So let's, let's practice of this kind of confusions in in here Jupyter let's say a equals PD dot series. And let's These are the values and index as let's say indices let's say this is eight Okay, let's means the explicit index and that is this Now, this will use implicit indices and it and C because one colon three using indices be might be expecting that use this kind of using explicit indices, what should we do and then one colon three that means, use explicit now, it will use the explicit index one and in using implicit indices, then it is good three is to use implicit indices and the implicit objects you can you can you can do the same lock and ilok then the further indexing inside like NumPy. So, whether you use log or ILOG, slicing mechanism is exactly the same like, mean all indexing that stays the same log you are using explicit implicit index. Let's guess D, that's our data frame available to Let's say I want to access the second row that is indexed at look at an index at two, I want to access that. Now this two is acting as this the the second row or the or the row at the completely this edit returns that once you people use ilok. Sometimes lock is also required. that I'm using I'm going to use the implicit that thing as a matrix. And once you have play with the indices, like you play with to for example, I want to reverse, for example, all the all the structure, for example, let's is reversed. I mean all the indexing like pandas. I mean, once you have used ilok inside everything like so. Okay, so that's the log are actually going to going to just practice our data file that is saved as a CSV file. actually add how to actually manipulate read the data, the real data that is there in in to to manipulate the data very efficiently next video. Okay, in this particular video, data set I have chosen just to show you some to work on real data set the data set I've on kaggle. And it's surreal data set that the total number of recovered people in per died people and the total number of number that data is available. Let's see the look to see what kind of data we are talking about. number column that contains just the record date. That's a date, that's a province or updated when the record is updated was the at that date, and how many deaths at that as the date is moving on and on, you will and the number of recovered cases they will they also increase. So let's see this data. manipulation of this data and see the look Let's go to Jupyter Notebook and see. So first it that maybe somewhere I need this NumPy learn SK learn library because I want to, the missing values, it is just more powerful is also a Data Science Library package that or our package that actually gives a better data. Although here I have used this SK learn I could have used this data frame fill any using that one. Okay, after importing all CSV function, and I load that data and then let's spend some time on all these commands what is happening, let's go to Jupyter Notebook we are doing here. So first of all, import For example, pandas that is also already imported, impurity. So let's let's use that or let's SK learn dot impute import simple in pewter, we need to import that now read the data, PD dot read CSV. There is a CSV file read The path is located in my directory, it is And the name of that is COVID, underscore data dot c s v. So let's read that file, the of there is a function, let's say head that appear just the very top that's that's what it is showing just the first five records, just by calling the head function in this want to remove this real number because I I want to remove this particular column. Because ways of doing that. I can call an t l function that. But there is another way of doing that just give the columns that you want to drop the column name? That's s and No. So you want want to drop this particular column with herring is I guess what is there Xs one in place Drew. So Xs one is justments. in place, equals true. That actually is, is going to do reflect the changes in this df we'll do everything and return onto a temporary we are saying, but the DF the data frame will that changing in df variable itself. So now longer be showing us the serial number column can do we may we may want to rename this, to maybe another, let's rename all these columns, columns equals two and then we have that dictionary use this read in function, TF dot rename. if I spell right columns, and then that is I want to change observation date, I want I also want to change province slash state that say simply that and I also want to change So, maybe I want to change this country slash country and I want all that should be happen that, if you run that, on this particular you will get like so. Okay, these many, so they province country, nicer form than earlier. Moreover, we may this date format, the date format is not in So let's convert the date format into into to to PD to date time function. So let's say this df date in that particular format. And seeing the date format in a different way. format that the pandas is expecting. Now, records if you want to see more records, we to just count or let's say let's just describe describe function that describe all most of count of confirmed cases are these the deaths are there these many values are there. The minimum 25. And these are the statistics. dot d A dog info. If you call that function about the null increase and the nominal increase number of data columns are six, the total is always available. The province entries our null increase, so province increase most are there, maybe we want to drop those or stuff like so, but they are not increased some of the province, some of the province that here. For example, this is not available, And that's what the real state of the data and so on. So this can happen. Okay, next, the simple computer just to impute the missing from SK learn. Another way is, as we already say a bit let's say not available with let's it that string and with that, if you fill we will be having all that data, the missing some missing values because in the province see for example, let me go on and left Yeah, can use that or we can use a fancy kind of and so on. Okay, after that, if you now see seeing any null value, all the columns are fill na that is let's change the DF with it. the DF. Okay, df changes. Now, if we now call Yeah. So I am this video here. In the next video, see these kind of stuff in a more detailed getting lamp here lanthier. me I'm stopping I will show you the group by command in the you what that does. So, we will explore all have in the in the upcoming videos when we be using the same data file to work more. and matplotlib and NumPy in combination how a very important role in analyzing a very, this video here. I will start the next video what is happening what is the scope baikman in the last video, we were discussing this didn't use this SK learn in pewter, we just let's discuss this group by command or a Curie say our goal is now for example, if you go df dot head, or all, at the D f dot head, there are so many records, let's just see want to just see how many, how many total regardless of their date. And, for example, confirmed cases, all the deaths, and all the dates and for all the provinces combined together. command for example. That's a df two equals is for what kind of columns you want to you for example, you want to group by country. gopeng What do you want to see what kind of values you want to see because now you're to see because data is gone once I drop, all prevents that are grouped together. So, what I want to see the confirmed cases. So, pick to see deaths and recovered. So, for example, want to see the recovered cases are E and together group all these things together and sum all of them, and maybe we want to reset preset, we set index. So that So, after this will happen is this df two will contain a and the total for example, in this particular all confirmed cases till now, and the deaths for each country, now, each country is describing Australia has total these confirmed cases, cases and so on. So, that is if we want to if we want to group all these with respect first we want to group them by country, so all the dates, and then do the same stuff, group by command will say almost the same with one kind of let's say we want to first by the country, then I want to group them in the form of I want to see the data as well. its trend with respect to all the dates that now, df two. So if you see df two now, you it has just one record in this country, it date has this record for the same country data is also sorted. I mean, now you can see So that may give you a very good look and Another thing What if you want to what if records, all the records, you just want to four, which the the confirmed cases, for example, Let's find out all the records. Let's, let's records for which the confirmed cases are records just those records in this. So if d3. This, I mean, these are just the records larger than 100. Just those. Yeah, so we can the real data analysis, a lot of a lot more, of what we can do with pandas on the real we can do with this pandas library, on real them together, joining them together, seeing pandas really is a very, very fancy and very to work with data. So due to time limitations, there is much more to explain in that, but matplotlib just we will see some some functions how can we plot How can we analyze data using sometimes this visualization of different to the data wherever possible, wherever possible. dimensionality in a way are the visualization the trends in the data, that gives you much or statistical results, but it completely the data there are situations, high dimensional So, in those cases, the statistical results But in more in many cases, visualization give and the design process can become very, very whether you get that information by visualization the next video, I will be just explaining then we will be, then we will be exploring Doing some stuff using the plots and matplotlib. seeing the trends of I mean, we'll be playing as well. So hope to see you in the next video. matplotlib a very powerful package for plotting plots and plots on the globe and whatnot, important module in this matplotlib, or the is biplot. So we can import matplotlib.pi kind of stuff is we can we can write like from matplotlib import by plot as PLT. So a documentation or that one that is fine as just just just make our first plot. Let's, let's say all the points starting from zero One way to do that is to use built in function linearly spaced points starting from zero points. Let's say this is our x and this is sine function is actually will apply element PLT will plot will actually plot x comma y to Jupyter Notebook and actually see this time, oh, we have seen this matplotlib. When While this is not the first time we actually import mat plot lib.pi plot as PLT. That's is available. Let's say x is NP dot Lin. space. let's say 1000 points. That's it. That's your That's your y. And then what you do is you point, and then you press Shift, enter. That's That simple. I mean, that simple. Can you is that simple. So I'm in plotting. This is we can say okay, PLT dot scatter, there is all these endpoints form rather than rather lot of points. That's why you you're not seeing this n x s viewer. Let's see. Let's take x just just just 30 points. Let's see the corresponding of NumPy arrays and just using that. So now oh, that's a scatter. Maybe we want to use, due to end and big every, let's say, attempt to see a plot in a better way, just sample is just like I'm in the points and so on. the line plot, it's a scatterplot, we're going these colors to any color we want. For example, color is equal to let's say, red, and everything can have I mean, we can label it we can x of properties. But but the but the main point quick, using matplotlib. So yeah, this matplotlib a snapshot, just a plot function and a scatter to be said, there are a lot of things to be one one lanthier good use on this COVID-19 the data trends and the confirmed trends and see the trends really using matplotlib. So If you call for if you call this plot multiple then you will be having a lot of curves on for example, let's see PLT dot plot x comma equals to blue. You can write blue, the whole or you can like and let's say NP dot cause x and the color is, let's say green. And that's perfectly the same figure, sort of, and you can just for example, you can plot with a green, green want, for example, Seon color in a dashed or, or maybe you want to completely dotted that are available in matplotlib. This is I have given you a very quick start in and Matlab is that quick, I mean, you can you you just call the plot function, and you're video, we are where we will actually walk the COVID-19 data set. And we'll actually transfer each country individually, and then trend of the overall world till the 16th of So next video will be actually the viewer Together, so hope to see you in the next video. file. And here I have a notebook on that that depths conformations and recovery trends using the packages that I need. I need a plot by somewhere I need NumPy. And I'm using a simple this. Let's run this command. And yes, everything I've shown you earlier. The data is available first 50 Records. Yeah, remember that? Yeah, you just want another view another view of file. And it has observation day province to date and recover to date for each country great. So that's what we have. Now what we and last update using in place that and rename video as well. Let's convert the date into use the psychic learn in pewter, sk learn are a lot of strategies there, let's use a frame, in pure dot fit transform that will a constant strategy impure. So that's there. and group all of all the records using country sum all the records that sum all the values but now let's first country and then all it states and so on. We have seen that in one just for a double check. So that's what the country to all it states. So this country so on. Next, let's see how many countries are there. So what I, what I do is I find country and call a unique function on that. repetition. And I just compute the length countries are there in this data file? There are 171 countries. So now my goal is trend of with respect to the date as the data March? What is the trend of death? patients? what is a trend of confirmed patients as the so let's loop over each country again, again, ID x in the range of this, that's the loop find out the indices where the country is indices where the country is like that. Then with starting from this, and that, I just cases for this one country, I just pick those. then I use another scatter plot, just to get scatter plot to get all the depth cases. And the country name, the x labels the days, days the total number of cases, the legend command eat that is in. So these kinds of labels that figure, then we force them to show that in this will show the trends of confirms to cover So if we run this command, we'll be having those one by one. So yeah, so this is for is for that this is for Afghanistan. As these blue, they are moving up. These are the number the first day. And the green is the number trend for Algeria. That's the trend. I mean, that is for Argentina. That is for America. way, today. The new says that America is really Australia till till the date we have to do the trends for all the countries. You see Although I walked through this code very quickly, And then check how that happens. Yeah. So is also in trouble. So France. Okay. So that that are available in data set, they have And this is for India. And this is for Italy's for each country individually, what if we and the deaths and the recover trend for all I grew up all the data with date. So I pick the second date for all the records for all trend using the scatterplot, again, confirmed and see the trend, where the world is moving. are going on, these are the depth grand, that's trend that is moving on. Although I walked be available to you. I walk over this notebook you the the I mean, that was a file may not but now it makes much more sense. When you and you have insight in the data. And later to make predictions. And the next date what using this plot or using some Machine Learning something like that. Okay, so that's it. I of there are so many other data science packages, learn, we can that is for machine learning packages like TensorFlow for deep learning of packages with a lot of speciality is in few of those the most important of those do to make classification or regressions. For learn. And if the data is huge, and you have good expertise or deep learning, then you these are the Python packages that are available and a lot more, but either way, whether you going to use TensorFlow or pytorch either matplotlib to pre process the data and to libraries to to perform predictions, either in the form of regression. So so so this whole to who want to learn Python, specifically, Python in general, then then then I spend on exploring the data science packages as explore more, we can talk about the packages more, a lot of I mean, input formatting, output library, file handling Internet Access database, I mean, this is a whole universe, I have discussed few things were very carefully selected for available to you as you have gone through understanding and now you can you can move data science and you will be ready to implement I have discussed so far. So I thank you all