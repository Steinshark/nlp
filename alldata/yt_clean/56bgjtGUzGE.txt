In this video, I'll show you how to use the in AWS. I think it's the easiest and fastest way to First, we will create a dedicated user for For the first demo, we will simply use create create a cluster. For the second one, we will use YAML config nodes will have only private IPs and a NAT The following example will demonstrate how We will quickly create VPC with two public zones. Then we will configure eksctl to use them In the final example, I'll show you how to provider. As an example, we will create an IAM policy to allow it to list S3 buckets. Also we will deploy a cluster autoscaller down nodes based on the load in the cluster. You can find all the commands and the source First of all, we need to create a user to If you are just getting started, you may create A better approach would be to create a user its functions. For example, eksctl user should only have Let me show you how to create one. Go to AWS console and select IAM service. In this example, we're going to create a user main use cases of eksctl. These are the ones used to run the integration We will use both managed IAM policies, and well. Let's create IAM policies first. I always prefer using plain json files to Let's switch to JSON and add a few statements Keep in mind that you would need to replace You can find it in the menu on the top right. The first statement will allow all related The second one is to be able to get parameters In this case, we limit resources using the The following statement is for (KMS) AWS Key And the last one is for logs. Optionally, you can grant some tags, but it's They are used to identify, organize, and also Give it a name EksAllAccess. At this point, I encourage you to use the the tutorial. Alright, let's create this Policy and move Let's also use JSON to define the IAM policy. It's going to be a more complicated one and For some use cases, as well as for the main access to eksctl user to create IAM roles This Policy will mainly focus on IAM. Give it a name IamLimitedAccess and click We can attach IAM policies directly to the create an IAM group first. Let's call it simply EKS for now. Next, we need to attach four different IAM Two of them we just created and two managed You can filter by customer-managed type if Select EksAllAccess and IamLimitedAccess. Next, we need to attach AmazonEC2FullAccess And the last one is AWSCloudFormationFullAccess. eksctl uses cloud formation stacks to create Finally, click create a group. Now we are ready to create an IAM user for Switch to the Users section and click Add Let's call it eksctl and give it only programmatic When you are just getting started and want access by placing it in the Admin group. If you have decided that eksctl is the right IAM user with limited permissions. Let's place this user in the EKS group that You can skip tags. When you create a user, don't forget to download profile locally. Let me cat the file with the credentials. Before proceeding to the next step, make sure machine. Depending on the operating system, you can the tool. To run eksctl locally, you can export environment or create a profile which is more convenient, If you just run aws configure, it will create It's fine, but I don't really want to use than creating and managing EKS clusters. You can add a --profile option; this will First, you need to provide Access Key ID from Then AWS Secret Access Key. Also, you can set the default AWS region to For output, I usually use Json, or you can You can test yourself by running aws sts get-caller-identity You should see eksctl user with your account Every time you want to execute any aws or eksctl. In this section, we will create a simple public If you don't have eksctl installed, follow By public, I mean a Kubernetes cluster with You don't need a NAT gateway for that setup. The simplest way is to run create command. It will create VPC as well as an EKS cluster It may be the easiest way but rarely what eksctl will create CloudFormation stacks to In case of an error, you can always inspect You can customize your cluster by providing However, the best approach would be to create In that case, it's much easier to reproduce in the git. When the creation is completed, eksctl will You can immediately access the Kubernetes Run kubectl get svc to get Kubernetes api You can also run kubectl get nodes to get Let's go back to the AWS console to check First, let's go to CloudFormation stacks. You can find one stack is to create an EKS Kubernetes instance group. By default, eksctl now uses managed instance Now let's inspect the EKS itself. If you don't provide a name during cluster for you. The default version, for now, is 1.21, which You can also customize this. Under the compute, you will find the managed by default. Those are the two ec2 instances used as Kubernetes They are created by the autoscaling group. However, you need to deploy an additional EKS to automatically scale the number of nodes. We will do it later in this video. Right now desired capacity is equal to the Let's copy this name; we need it to destroy Destroying a cluster is as simple as changing cluster. Be careful; it won't ask you to confirm. For this example, we will create an EKS cluster You still will be able to expose services ingress. It's just Kubernetes nodes will not be exposed the companies. Also, if you have a webhook and you need to use an external NAT gateway Ip for that. Let's create an eksctl config to define the You can find all the possible options here. These configs are very similar to the ones objects, etc. First, provide the current api version for The next property kind is always ClusterConfig. Under the metadata section, we need to specify The region where we want to create it. Optionally you can specify the version. Availability zones are important for some Here you specify AZ zones where your nodes For example, we can pick us-east-1a and 1b As far as I remember, you need to avoid the Eksctl will create two subnets in each zone; Then provide the config for your instance You can use managed and unmanaged EKS groups. You can read about them here, but I would Give it a name, general. Then if you want private nodes with private You can specify the instance type. I always prefer to use the largest types since components on each node as a deamonset. If you use small types as I used for this resources. The desired capacity will be translated to Let's also create a second instance group. It will use much cheaper spot instances. You can save a lot of money using them, but You can read about them here. They will also have only private IPs. The same instance type t2.small. The difference is here, spot equal to true. Let's also set desired capacity to one. Eksctl allows you to set labels on each node affinity. You can use built-in labels as well to differentiate Most importantly, you need to set taints on Unless your pod explicitly tolerates those there. To create this cluster, provide config to It will take up to 20 minutes to create a To verify the cluster, you can run a similar We should have one node for each instance We have two autoscaling groups for each Kubernetes Similar command to delete the cluster. Often you already have a VPC, and you want You can do it with eksctl; you just need to To be on the same page, let me quickly create subnets. First, let's create a VPC. Give it a name main. I can recommend using online CIDR calculators For this network, let's use 10.0.0.0/16, which Keep default tenancy tags and click create Next, we need to create an internet gateway as well as internet access for the nat gateway. Call it igw for internet gateway and click Don't forget to attach it to your VPC. Next, we need subnets. Specify the main VPC. Then give it a name private-us-east-1a. I like to name my subnets using the type which which is us-east-1a. Select the same availability zone. For the CIDR use /18, it gives you around Also, by using the calculator, you can find can use it to start the second subnet. Similar steps for this subnet. In this case, it will be private-us-east-1b. It is located in the us-east-1b zone. Increment the CIDR for this subnet. It will start from 10.0.64.0. We will use these private subnets to place Next, create two public subnets. The first one is public-us-east-1a placed And the CIDR starts from 10.0.128.0. The last subnet that we will create is public-us-east-1b. At this point, they are all don't have routes We will fix that in a minute. Before we create NAT Gateway, I'd like to It will be located in the same region where Create a tag; enter Name for the key and nat At this point, we can create a NAT gateway. Let's call it nat, and it can be placed in as a default route. For example, we can put it in the public-us-east-1a If you want high available NAT gateway setup. You would create two nat gateways and place Then you would create separate routing tables Under elastic IP, select the one that we just Now we need to create two routing tables. The first one is for private subnets. When it is created, you need to click edit Click add a route, and for CIDR, use all zeroes, For the target, select the nat gateway id. The second one is a public table. Here you need to add the default route to We're almost ready. The final step is to associate subnets with Let's start with the public-us-east-1a subnet. Update the routing table to the public one. Now similar step for the private-us-east-1a, routing table. We have two more to go. Private-us-east-1b. And finally, public-us-east-1b. Alright, it's all done. We have two public and two private subnets. We can switch back to eksctl. Now we can create an eksctl config to use Similar beginning. Api version, kind, and a metadata section To use the existing VPC, we need to add the ID should match your VPC ID. Then subnets. We need to separate them into private and Under private, you need to specify the availability We have two different availability zones; Similar setup for public subnets. First comes the availability zone where you The last public subnet is located in the us-east-1b Similar managed node group. When we specify privateNetworking equal to we defined previously. To create a cluster, run the same command Let's run a quick check. We can access the cluster. Let's inspect one of the nodes in the cluster. We have a single ec2 instance. You can find that it was created in the main That is pretty much all that I wanted to show VPC without a problem. Let's clean up and delete this cluster. Amazon EKS supports IAM Roles for Service to map AWS IAM Roles to Kubernetes Service This provides fine-grained permission management services. These could be apps that use S3, any other Kubernetes components like AWS Load Balancer Let's create an AllowListAllMyBuckets IAM AWS account. We will map this Policy with the Kubernetes The idea is to map the AWS IAM service with Select the JSON tab and paste the Policy. Give it a name AllowListAllMyBuckets. Next, create an eksctl config with open ID Same ClusterConfig kind, with one exception, The same availability zones. The difference is here, iam section. Enable Open ID connect. Then specify the Kubernetes service accounts. The first one will be the foo service account, Then you can specify the IAM policy that you to the service account. We are going to use the one that we create You need to replace account id with yours. Then you can specify the IAM role to create, you. All the roles have to start with eksctl since roles using the following pattern. You can specify if you want eksctl to create for you. I will create them using the yaml file, so The second service account will be used by By default, it will be deployed in the kube-system eksctl give you a list of well-known policies You can either add policies manually as we policies. Then give it a name, eksctl-cluster-autoscaller. Also, let's create a single instance group a maximum number of nodes. Cluster autoscaller will later adjust the For autoscaller to work, you need to provide First to enable autoscaller and the second This cluster-irsa must match your EKS cluster Then autoscaling configuration. Let's create the final example, number three. First thing, always check the connection. Let's create a Kubernetes example with a service This service account should be located in first. The service account. This annotation must match the arn of the You just need to update the account id. Then the pod. I'm going to use an aws-cli open-source image Go back to the terminal and apply the config. Now, ssh to the pod using the exec command Now let's try to list all the S3 buckets in It returned the single bucket that I have. If you misconfigured something, you would The last demo is to verify that EKS can autoscale As I mentioned before, we need to deploy additional It's called cluster autoscaller. First is a service account with an annotation Then a bunch of RBAC roles and bindings. And the Deployment for autoscaller itself. You need to match the version to the EKS version. There are multiple flags that you can use The important part is to make sure that you otherwise, autoscaller won't work. And some volumes with certs. Let's go ahead and deploy the autoscaller. Make sure that the pod is running in the kube-system It's a good idea to check the logs as well. You can use pod labels to select autoscaller. You can keep this on; you will see the logic to reduce or increase the number of nodes. Now, let's split the screen and watch the We have a single node right now. We need to increase the load on Kubernetes Create Deployment with a large number of replicas. It is going to be based on nginx and have It should be enough to force Kubernetes to Let's deploy it now. Use a watch with the kubectl command to get We have a few pods in a pending state cause You can describe one of the pods to check You can see the message pod triggered scale It's a good sign; let's wait a little bit. In a few minutes, you should see a new node to be scheduled. Now it's ready, and pods will transition to Alright, it worked. eksctl allows you to quickly spin up an EKS you may want to use terraform to manage your I have another video explaining how to create