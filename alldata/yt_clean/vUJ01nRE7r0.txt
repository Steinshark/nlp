My name is Edward Feigenbaum. I'm a professor Department. I'm very pleased to have the opportunity to interview Don Knuth of the Computer Science Department. Don and and readers of this oral history we think there are. We're orienting of you readers and viewers. First, the generally intelligent has seen the field of computer science explode in the past half important, even beautiful, and what some of the field's today who would like orientation and motivation toward computer much as Don and I had to do in the 1950s. And third, those of science scholar of a dozen or 100 years from now, the scientist and programming artist, who produced a memorable after the turn of the millennium. Don and I share several things We both went to institutes of technology, I to Carnegie Institute and Don to Case Institute of Technology, now Case Western during that college experience. We both went on to take next job was at Stanford University, in the new Computer Science earliest days of the department. I'd like to ask Don to describe led him into the world of computing? In my case, it was an case, it was an IBM Type 650 that had been delivered to Case Institute one of his major books to the IBM Type 650 computer. Don, what and your early work with this intriguing new artifact? Okay. Thanks, Ed. I guess I want to add that week, I'll be asking Ed the questions that he's asking me today. of us and, also for people who are listening or watching or reading instead of having a historian interviewing us. We're fields. We can give you some slants on the thing from people who sort be covering many years of the story today, so we can't do too much in depth, because the defining thing about computer science at low levels as well as sticking on high level. Since we're going won't sleep tonight because I'll be saying to myself, "Oh, me that question". So I think Ed and I also are going to maybe add where we might want to add a page or two of afterthoughts that to be so careful about answering every question that he asks me now. wrong answer that pops first in my mind, but also maybe a slightly life, as you'll probably find out, is I try to get things too many mistakes. Okay. Now, your question, Ed, was how did computers were first built in the '40s I was ten years old, so I saw my first computer in 1957, which is pretty late in On the other hand, programming was still pretty much a 2,000 programmers in the world at that time. I'm not sure how to that point of view. I was a freshman in college. Your question was: in college. I grew up in Milwaukee, Wisconsin. Those of you who born in 1938. My father was the first person among all his was the first person in all of her ancestors who had gone to a There was no tradition in our family of higher education at all. time. My great- grandfather was a blacksmith. My grandfather pretty smart. They could play cards well, but they didn't have dwell on this too much, because I find that there's lots of discussion life. There's a book called Mathematical People, in which -- how I got started. The one thing that stands out most, probably, contest run by a local TV station, a company called Zeigler's Giant make out of the letters in 'Zeigler's Giant Bar'?" Well, there's by this question, and I had just seen an unabridged dictionary. dictionary, finding every word in that dictionary that Giant Bar". I pretended that I had a stomachache, so I stayed line is that I found 4500 words that could be made, and the and I won Zeigler's Giant Bars for everybody in my everything. This was the first indication that I would obsess about do you call it? -- long attention span to solve. But my main became a music major when I went to college. Our high school was chemistry and physics teacher who inspired me. When I got seems that the thing that really turned it was that Case was a meat. It wasn't going to be easy. At the college where I had been when I visited there, sort of emphasized how easy it was going to intrigued by the idea that Case was going to make me work hard. but still I was ready to work. I worked especially hard as after that. In my freshman year, I started out and I found out chemistry teacher knew a lot of chemistry, know physics or mathematics. My physics teacher know much about mathematics. But my math teacher knew all teacher. Then in my sophomore year in physics, I had to take a do welding, so I decided maybe I can't be a physicist. Welding volts in this stuff that I'm carrying. I have to wear goggles. what I'm doing, and I'm too tall. The table is way down there. I'm shooting all over the place and still connect X to Y. It was terrible. other hand, mathematics! In the sophomore year for mathematicians, call discrete mathematics, where you study logic quantities. I was drawn to that. That was something, somehow, order to support myself, I had to work for the statisticians sorting cards. We had a fascinating machine where you put in and you can look at what comes out. Then I could plot the numbers Later on in my freshman year there arrived a machine that, window. They called it a computer. I think it was actually called name, because Univac was a competing brand. One night a guy showed look at the manual. It was love at first sight. I could sit all night to be exact, the first programs I wrote for the machine were The Bell Interpreter System. It was something like would say, "Add the number in cell 2 to the number in cell instructions like that, a bunch of them. This was a simple way to that it might be the best way to teach people programming, instead right now. Certainly, it's something that you could hasn't had algebra yet, and get the idea of what a machine is. I was brothers didn't want to do his homework assignment where he equation. I looked at some textbooks, and it told me how it in this Bell Interpretive Language. I wrote the program. first time. I don't know if it really gave the right answers, My fraternity brother passed his course, I got into the Then I learned about the machine language inside the 650. in the spring of my freshman year, and debugged it at night. The 60 instructions long in machine language. It was a program 650 was a machine that had decimal arithmetic with ten-digit numbers. of the machine. So you would dial a ten- digit number, and my out cards that would say what are the factors of this number that slow computer. In order to do a division instruction, it took six orders of magnitude slower than today's machines, to do division? division. To see if a number was divisible by 13, I had to divide would try to find everything that divided. If I started out to be prime -- had no dividers at all -- I think it would take 15 only did my program have about 60 or so instructions when I started, it was about 120, 130 instructions. I made more errors One of the things that I had to change, for example, that took I could get all the prime factors onto one card. But a card had So I could only get eight factors on a single card. Well, you going to take four cards. Because it's two times two times lots of extra stuff in my program that would handle these cases. So errors that I was going to be making in the future, and also about of my life, is making errors and trying to recover from them. Did No. No. Don, a couple questions about your early career, that you mentioned the Zeigler's Giant Bar, because Your intuition at combinatorics is one of the things and how did you get to that? Do you see combinatorics of us do? I think that there is something strange about intuition about discrete things than continuous things. In and I could do the problems in quantum mechanics, but I couldn't being able to get an "A" on an exam without ever having questions that the person made up solving the exam. But on the other things that really seemed part of me. There's definitely something teenager that made me understand discrete objects, like zeros out of alphabetical letters, much better than things like Fourier like this. I can do these other things, but it's like a dog dog can walk." But no, he's not walking; he's just a dog trying to walk. the continuous or more geometrical things. But when it comes to marks the prime factors of something, that's a question that appealed polynomial. Don, question about that. Sorry to interject This is what you're paid to do, right? Right. Herb Simon -- Professor Simon, of Carnegie that kind of separated thinkers into what he called you do the combinatorics and discrete math that you do, which so amazes actually visualizing what's going on, or is it just Well, you know, I'm visualizing the symbols. I take a mathematical problem, I translate it into formulas, and how to transform one formula into another. That should be the subtitle Formulas. I'd like to talk about that a who died, Earl Goldschlager [ph?], he was a engineer, eventually went Cleveland area. When I was in second grade he went to Case. He was that it may be good to go to Case. When I was visiting him in algebra. He said, "If you have two numbers, and you know that the sum of these numbers is 20, what are the two numbers?" He said, can say X is one of the numbers and Y is one of the numbers. X plus find those numbers?" he says. "Well, you add these two equations the equation from each other, and you get 2Y = 80. So X must was an "aha!" thing for me when I was in second grade. I liked I enjoyed doing, in seventh grade, was diagramming sentences. diagramming sentences, "The Lost Art of Diagramming where you take a sentence of English and you find its structure. It a verb phrase." Let's take a sentence here, "How did you get to be a phrase followed by a verb phrase; this is an imperative sentence. It It's very interesting, the structure of that sentence. We had a textbook sentences. The kids in our class, we would then try to apply this that we would see in newspapers or in advertisements. We couldn't figure out how to diagram those. We spent hours and hours about structure of language, and trying to make these discrete in seventh grade. My friends and I, this turned us on. When we our English classes because we knew more than the teachers did. I had this kind of interest in symbols and diagramming early into logic as a sophomore, and saw that mathematics involved me there. I see punched cards in this. I mean, holes in cards works is totally discrete. A computer has to stand on its hind I have a feeling that a lot of the brightest students don't go -- they don't need algebra at the level I did. I don't think I was but I learned algebra first. A lot of very bright students today a problem, say, the sum of two numbers is 100 and the difference is They're so smart they don't need algebra. They go on seeing lots knowing how they do it, particularly. Then finally they get to it is with algebra. But by that time, they haven't learned the they were so smart prevented them from learning this important for the way I approach a problem. Then they say, "Oh, biologists, doctors and lawyers. You're recounting your interest in the structure think you said. That's really interesting. Because among wasn't used, but we would now call it "information technology" languages and compilers. Were the seeds of that planted mean, that's how I got to know you first. Yeah, the seeds were planted at Case in the Then, I'm not sure when it was but it probably was in the summer from Carnegie -- where you were a student -- that was written "IT". The IT program, "IT", standing for Internal Yeah, it was Perlis, [Harold] van Zoeren, In this program you would punch on cards a + C." Well, in IT, you had to say, "X1 = X2 + X4." Because you "A" for the plus sign. So you had to say, "X1 Z X2 A X4." No, "S," value. But anyway, we had to encode algebra in terms of a small that many characters you could punch on a card. You punch this the machine. The lights spin around for a few seconds and then -- punch, instructions that set X1 equal to X2 + X4. formula. Well, this blew my mind. I couldn't understand where I had just these punches on the card. I could understand how I couldn't understand how to write a program that would convert It hadn't yet occurred to you that the computer No. No, that occurred to Lady Lovelace, but up on these things, but then I persevere. So I got hold of the source the of those words of memory had to be used to as the instructions. It's probably, I don't is not hard to find. They published it in a report and I've seen it's on the internet long ago. I went through every line of that get- together on a beach on Lake Erie. I would spend the time of the time I was going through this listing, trying to find out the impossible after all. In fact, I thought of better ways to do it than museum, we should also mention that the program had originally before he went to Carnegie, with three other people there. I Alan to Carnegie. But there was Sylvia Orgel and several other people for a different computer at Purdue. Purdue also It's not as well-known as IT. But anyway, I didn't know this at The code, once I saw how it happened, was other people's program was something good to learn early. source materials - and trying to understand what their thought order to write this out. Especially when they're because this is the best way for me to put into my own brain I also remember looking at papers that Fermat had written understand problems. I have to rely on friends to help Sanskrit manuscripts and things now, but I great surprise, that the concept of orthogonal Latin squares, which on, originated in North Africa in the 13th century. Or was it the documents and I By reading it in French translation I was really had this concept, orthogonal Latin known example was 1724. I love to look at the work of pioneers and happening. One of the things worth observing -- it's about history -- is that our current generation, and generations of their own field. They're constantly reinventing things, or thoughtlessly about history going back in time hundreds of years. We're or two-dozen years. Yeah, I know. It's such a common failing. with my teaching career. I was not able to get this across to any of reading source material. I was a complete failure with the most closely. I don't know what I should've I had been researching Pascal. I couldn't find much about Pascal's I found two shelves devoted to it. I was really impressed by that. and everything was in storage if it was more than time, in the 60's. I've got to restrain myself from not telling after IT, I have to mention that I had a job by this time growing grass for statisticians anymore. Case was one of the a really were allowed to touch the computers by themselves, write software for the whole campus. Dartmouth Way who set the policy at Case, and instead of going the way to run their computer center, Case hired its own students everybody was doing. There were about a dozen of us there, to the computing industry in the long range of things. worked, and we got together and made our own greatly improved RUNCIBLE. Every program in those days had to have an acronym Basic Language Extended, or something like this. We found bells and whistles to IT, basically. All on the 2000 word drum. All on the 2000 word drum. Not only that, One of them would compile to assembly language. One would compile would use floating point hardware. And one version would 613 instructions, you would go from the floating version. If you changed another 372 instructions, it would to the machine language version. If we could figure out a in one version, then we had to figure out a way to correspondingly Then we could have another instruction available to the stages of software development that have since become call "creeping featurism", where every to the software. Then you put that in and pretty soon the thing gets... That is the way software always has been. We got our experience about, I don't know, eight of us worked together on different I itself. Other people were working on the subroutines support the library, and things like that. I guess... I wrote a paper about the way RUNCIBLE worked inside, of the ACM during my senior year, because we had seen other articles were not as good as the ones that were in our compiler. So But I had no idea what scientific publishing was all about. I had don't give credit for things, they just tell the news. So I explained how we did it in our compiler. But anything in the article. I found out to my great surprise afterwards these things, when actually it was a complete team effort. Mostly few bugs and done a lot of things, but nothing really very original. publishing and things as part of this story. I also wrote the user manual for this machine. I am an undergraduate. RUNCIBLE, and it is used as a textbook in classes. Here I've class and I wrote the textbook for it already as an undergraduate. on campus, I guess. The for undergraduates, and it had superb teachers. not have very strong standards for graduate to get admitted to the undergraduate program But in graduate school it wasn't so hard to get over. I courses, because there was no competition. This impressed my teachers -- not realizing that this was line of least resistance so as a student. I edited a magazine and things like that, and Now [to] the story, however: What about compilers? Well, I got a compiler for Burroughs, who wanted to sell their drum machine 650s. Burroughs had this computer called the words of memory instead of 2000, and they needed a compiler Somebody heard that I knew something about how to write compilers, had a consulting branch in Cleveland. They approached me early to make a proposal to Burroughs Corporation that we will write for us if we got the contract?" I believe what happened is that $75,000 they would write a ALGOL compiler, and they would pay turned it down. But meanwhile I had learned about the 205 to me. So I made my own proposal to Burroughs. I said I'll write implement all of ALGOL. I think I told them I can't implement Let's leave out procedures -- subroutines. Well, this is a "No, no -- you got to put in procedures." I said, "Okay, I will That's what happened. They paid me $5,500, which was a a college professor was making eight or nine thousand dollars a year between graduating from Case and going to Tech, I worked on this compiler. As I drove and I sat in a motel and wrote code. The coding form on which I History Museum, and you can see exactly the code that I wrote. I had the compiler ready for Burroughs to use. So I knew all the code by the end of the '60s. Then I learned about other people came to me and said, "Don, how about writing software your price. Write compilers for a living, and you will have second year of graduate school. In what department at Cal Tech? I was at Cal Tech in the math department. department anywhere. Right. But you didn't do physics. I didn't do physics. I switched into math welding. I switched into math. There were only seven and that's another story we'll get into soon. I'm in my second Burroughs. After finishing my compiler for Burroughs, I joined Planning Department was largely composed of people in the world up to that time, which was a Burroughs ALGOL compiler forward for software. It was the first software that used list processing way. They took the ideas of Newell and Simon and around all the other things that we were doing. I wanted to get time in the Product Planning Group, because Burroughs was doing opposite of RISC. They tried to make the machine language look like Burroughs as a consultant. So I had a programming hat when I am a mathematician taking my grad studies. A startup company, is the color of money, came to me and said, "Don, name your price. of finding computers for you to debug them on, and assistance for said, "Oh, okay. that era this was not quite at Bill Gate's sort of out there. The guy didn't blink. either. I said, "Well, I'm not going to do it. I just thought this was the decision in my life that I wasn't going to optimize my I could do for... well, I don't know. If you ask me what makes me "I learned something from you". Number two would be But number infinity would be... Well, no. Number infinity minus one not as good as "I read your book", you know. Then there is "I bought value. So that decision came up. I kept up with the literature ACM was where the action was. I also worked with people on trying with it. I published a few papers, like "The Remaining papers that I worked on. I chaired a committee called "Smallgol" work on small computers. I was active in programming languages. Was McCarthy on Smallgol? DK: No. No, I don't No. There was a big European group, but this We had about 20 people as co-authors of the paper. It was ago I can't remember. But all the authors are there. You were still a graduate student. I was a graduate student, yeah. But this was What did your thesis advisors think of all Oh, at Case they thought it was terrible that said, "Don't dirty your hands with that." You mean Cal Tech. No, first at Case. Cal Tech was one of the opinion, that I shouldn't touch computers. I went to Cal Their computing system was incredibly arcane, and at Cal Tech. I mean, I would have to use punched paper tape. They computing system was horrible unless you went to JPL, Jet Propulsion There you would have to submit a job and then come back a or anything. It was just hopeless. At Burroughs I could go into what computer room, and I could run hands-on every night, I had debugged one night at Burroughs that was solving a problem interested in. It took more memory than the Burroughs machine months later I had gotten the output from JPL and I had also high in my office, because it's a one- or two-day turnaround at the end of the run. Then you can say, "Oh, I'll change this It was incredibly inefficient, brain damaged computing at Cal Tech in the languages community and I became editor of the programming the ACM and the Journal of the ACM in, I don't know, '64, student, but I was just out of graduate school in the '60s. that I did by far the most in, in categories. By the time I came to Stanford, numerical analyst, or artificial intelligence, qualifying exams and there was a tripartite division of the Don, just before we leave your thesis advisor: in computing, right? Yes. Tell us a little bit about that and what your was at the time. Yeah, because this is combinatorial, and it's Combinatorics was not a academic subject at Case. Cal Tech graduate course, and there were textbooks that began to be written. Danzig introduced the first class in combinatorics probably on the totem pole in the mathematics world in those days. The high from France, of highly abstract mathematics that was involved with had colleagues at Cal Tech that I would say, "You and I intersect of anything that is more than countable infinity, and you never infinity." I mostly stuck to things that were finite in my own a visiting professor, R. C. Bose from North Carolina, who was a very guy, and he had just solved a problem that became front find orthogonal Latin squares. Now, today there is a craze called watching this tape or listening to this tape that craze will an arrangement of N letters so ever row and every column has all is where you have two Latin squareswith the property that if a symbol from the first and a symbol from the second, the N All combinations of A will occur with A somewhere. with Z somewhere. A famous paper, from 1783, I think, by Leonard to find orthogonal Latin squares that were 10 by 10, the cases that were twice an odd number. This conjecture was believed times, but people found holes in the proof. In 1959 R. was wrong, and they constructed Latin squares that were 10 by cases where actually it was possible to find orthogonal Latin squares. It was a graduate class, and I was taking graduate classes. orthogonal Latin squares. It sounded like an interesting program, with the answer the next morning. He was happy orthogonal Latin squares of the order of 12. That became a that I won't go into it. The main thing is that he was on the cutting place where we had great teaching, but we did not have me to graduate school, and he could also tell me Marshall me a good plug for going to Cal Tech. I had visited California when I applied to graduate school I applied to Stanford, Berkeley got admitted to Cal Tech, I got admitted to all three. I took combinatorial attitude there, which was not really true at Stanford. able to study Latin squares at all. While we're at it, I might got a National Science Foundation Fellowship, Woodrow Wilson Foundation all had the requirement that you could not do anything be a consultant to Burroughs and also have an NSF fellowship. Hall was then my thesis advisor. He was a world class mathematician, work in combinatorics. He was my mentor. But it was a funny thing, I was in the same room with him I could not think straight. I wouldn't he was saying, and then I would go back to my office so that research together in the same room. like farming my programs out to JPL to be collaborate on a few things. The one thing published, however, because it turned out that it just didn't way to solve it didn't pan out. After we did all the in the process, but none of these programs taught me how to deal with tree structures inside a machine, and the years. He also was an extremely good advisor, in better ways to keep track of me to make sure I was not slipping. When I was working much in a mode where they would bug me instead of me bugging write me notes and say, Don, why don't you which was to find a certain kind of what they call block designs. parameter Lambda equals 2. Anybody could look that up and find it now. At the time I did this, I believe there were six found a new way to look at those designs, and so I thought maybe such designs. They would be mostly academic interest, although use them somehow. But mostly, just, do they exist or not? This was That was going to be my thesis topic: to see if I could find But one morning I was looking at another problem entirely, having I got a listing from a guy at Princeton who had just computed that I had been looking at with respect to He had found that there are 32 solutions of Type A, and 32 solutions hmm, that's interesting, because the 32 solutions of Type The 32 of Type B, nobody had ever found any Type B solutions I had just gotten this listing from Princeton, and I one of our professors, and I said, "Mrs. Todd, I think I'm going to look at these two lists of 32 numbers. For every one one on this page. I am going to psyche out the rule that kind." Sure enough, an hour later I had seen how to get from each on the second page. I showed this to Marshall Hall. He said, "Don, Lambda equals 2 business. Write this up and get out of here." thing, because since then only one more design with Lambda equals world. I might still be working on my thesis if I had stuck to I had solved my PhD problem in one hour, so I dressed it up with is 70 some pages long. I discovered that it is now on the internet, what did he write about in those days? But of all the computer science, I would say the only area that I have never applied my thesis in. It just was good training for me to exercise my brain Yeah. In fact for your colleagues, that is you and understanding of you, is that thesis. The thesis, yeah. Well, I was going to say because these designs turn out... Okay, we can construct analysis. But at random, we get even better results. So pointless from the point of view of that application, Don, just a footnote to that story. I intended but it's just so great a point to bring it in. When I've that the really hard part of the thesis is finding the right problem. Yeah. And then the other half is just doing it. not impressed by this one hour. I mean, the hard part went into it. We will get to, of course, the great piece of work that you did always seemed to me that the researching and then writing the a problem generator for you. The way you and I have expressed it in and you would encounter holes in the fabric. Those would more than half the work. Once you find the problems you can go Right. Well, yeah. We will probably comment the blessings and curses of the way I work is that I don't have too much difficulty in the problem generation phase stimulation so that I'm not working on too that are... The hard thing, for me anyway, is not to find a problem, that has some juice to it. Something that will not just true, but also will be something that will have spin offs. That once are going to apply to many other things, or that this will be not just having a question that needs an answer. It's very easy to... his name, although I don't like to. It would be hard to mention name. His name is [Florentin] Smarandache. I've never met I've never seen one of them that I thought any merit in it whatsoever. in various ways. You can cube them and remove the middle is this prime?", something like that. There's all kinds of of things and then asking a question about it. But if one for a thesis", I would have to say "this problem stinks". So thing is not to come up with a problem, but famous problem of the N, plus B to the N equals C to the N, It has no applications. So you found A, B But in the course of working on this problem, people discovered that have solved uncountably many practical applications as that I solved was probably not in that sense, though, extremely whether there existed projective geometries of certain orders that people had ever thought of were symmetrical, and I thought But the technique that I used for it led to some insight and in other theory. I have to worry about not getting bogged down otherwise I can't move on and get anything out the door. Don, we've gotten a little mixed up between professorship at Caltech, but it doesn't matter. Around of a multi-volume work which you're known for, &quot;The Art of Computer about the beginning? Because soon it's going to be the middle of This is, of course, really the story of my finish it. But I may not, because it's turned out to be such of 1961, after my first year of graduate school. My wife finished -- the to Europe for our honeymoon. We had four months Southern California, and then a man from Addison-Wesley you to write a book about how to write compilers.&quot; yes, I've got this book inside of me." I sketched out that on which I wrote -- I sketched out 12 chapters that I thought ought &quot;I think I'm going to write a book.&quot; As I say, we had four months has all been devoted to this book. Well, we still have morning and I still haven't finished the book. So I try to -- I this, as one main unifying theme. The a compiler. They had heard about me from one of their editorial advisors, that I knew something appealed to me for two main reasons. One is had been editor of the weekly paper. In college I was editor campus paper as copy editor. And, as I told you, I wrote the manual writing, number one. Also, Addison-Wesley was the people who textbooks had been published by Addison Wesley. They had done For them to come to me and say, "Would you write a book for student -- this was a thrill. Another very important reason at the need for a book about compilers, because there were a lot -- this was January of 1962 -- were starting out there, but it hadn't been explained. The people who had over the world and they didn't know of each other's work either, very could think of who could write a book about compilers, as far of the of it. There might be four people who could they would write four different books. I could I would think was without slanting it towards something that misleading to the compiler writer for the essentially. I could be the expositor, the tech writer, that could the work of these brilliant people and make it accessible to didn't have much time to spend on it then, I just had this page all I could do while I'm a consultant at Burroughs and doing they said &quot;We know it'll take you a while.&quot; I didn't really begin my third year up on my thesis. In the summer of '62, I guess I wrote another compiler. This was for Univac; I sold my soul to the devil, I guess you say, for three months I believe that the salary for that was $15,000, which I think assistant professors were getting eight or nine thousand Well, when I started in 1960 at [University for the nine- month year. Yeah, so you see it. I got $15,000 for a summer day during that summer I was writing the part of the table. The method that we used is called linear probing. Basically look up, you scramble it, like you square it or something like this, well in those days it would have been between 1 and 1000, if you don't find it, go to the next place and keep on going you find the number you're looking for. It's called linear probing. students at Princeton had tried to figure out how fast This was a new thing for me. It was a case where I was doing problem that would go into my other [job]. My winter job was compilers. There was no mix. These worlds did not intersect one day during the summer while writing the compiler looking probing work. I got lucky, and I solved the problem. I figured of paper with me and I typed it up. ["Notes on 'Open' Addressing', because this became really the genesis of my main research compilers, but to be working on what they call analysis of algorithms, out how good is it quantitatively. I can say, if I got so is linear probing going to take. It dawned on me that this was important, and each one would lead to a fascinating mathematical of rich problems to work on. Here I am then, in the middle I had one day to do the research and mathematics that changed my life gotten off the topic of what your original question was. We were talking about sort of the.. You talked The compiler book morphed into The Art of Computer Programming, Exactly. Anyway, I'm working on a compiler after I finish this summer job, then I began to do book. One of the things I knew I had to have in the book was a compiler book but machines are changing faster than I can write in control of. I invented this machine called MIX, which I wrote a simulator for MIX so that I could write sample on how to write programs in assembly language for this the parts that dealt with sorting problems and searching began to write those parts, which are part of a compiler, of the gathering for those chapters for The Art of Computer Programming. a bit of writing on The Art of Computer Programming. I met George who inspired both of us [Knuth and Feigenbaum] to come to Stanford California for a talk, and he said, &quot;Come up to Stanford. no, I can't do that. I just got married, and I've got to finish this the book next year, and then I can come up [and] start thinking my book done before my son is born." Well, John is now 40-some Part of my lack of expertise is projects are going to take. I way underestimated how much needed to be written about in this and I went merrily along writing pages of things that it didn't take long before I had started to discover a few things literature. I did have an axe to grind. The message that I was at all. It was going to be based on my own particular slant I should write the book became impossible to sustain. But the solved the problem gave me a new unifying theme for the book. analyzing algorithms, and have some quantitative ideas about how but that they worked well: this method worked 3 times better than method. Also, at this time I was learning mathematical techniques found they were out there, but they just hadn't been emphasized kind. So my book would also present a different kind of mathematics that was very relevant to analysis of algorithm. I Wesley, and said &quot;How about changing the title of the book from Analysis of Algorithms'.&quot; They said that will never sell; their focus stuck to the original title, although I'm also glad to see that Analysis of Algorithms", 20 years down the line. But was very important because I'm thinking of the aesthetical: the that has artistic aspects in all senses of the word. and the other "art" means fine art. All these are long stories, I've got The Art of Computer Programming started out, and I'm draft of all 12 chapters by, I think it was like 1965. I've of notes, including a very good example of you mentioned about seeing holes in the fabric. book is parsing: going from somebody's algebraic formula and Just the way I had done in seventh grade finding the structure mathematical sentences. Chapter ten is all about parsing we called it at the time. I covered what people had published I got to the end of the chapter and I said, well, you can combine sudden you get a unifying thing which goes all the way to the limit. there. They would say "Oh, if a grammar satisfies this condition, satisfies this condition, I can do it efficiently." But now, all of find the most general condition that can be done efficiently without That you could make a decision on the fly, reading from left to was just a natural outgrowth of seeing the different pieces of and writing it into a chapter for the first time. But I felt feel that I had surrounded the concept. I knew that I had it, but I couldn't really intuit it all in my head. I knew it to explain it well. So I didn't put in The Art of Computer Programming. Textbooks don't have to cover everything when you get to the literature. My idea at that time [is] I'm writing this book very soon, so any little things I discover and put in the book in the journal because I figure it'll be in my book pretty so fast, my book is bound to be obsolete. It takes a year for the illustrations, and then they have to print it and bind it and the state-of-the-art if my book isn't going to be obsolete when it myself that I had, these little ideas I had been coming up with. But I said &quot;Well here's something I don't really understand figure out what it is, and then they can tell me what I should in 1965, at the end of finishing my draft of the chapter, which now, textbooks of computer science start with LR(k) and take idea of... Don, for historical reasons, tell the audience can go look it up. It was published in the journal called Information to Information and Computation. In those days, and Control. It was the journal that had had the best papers on paper, and difficult. It's also reprinted in my book with a few corrections to the original. In the original, I drew the draws trees with the root at the top now, so the reprint has trying to give the flavor of the way things were in 1965. My this work on LR (k) at Christmastime in '65. Then I had, I in '66 I had all 3000 pages of the manuscript ready. I typed chapter -- the pages were all hand-written -- and it looked to me like don't know how many words there were on a page. I had chapter and they said &quot;Don, what have you written? This book is them a letter earlier as I'm working on sorting. I said to the guy him; by this time, he had been promoted. No, I'm not sure was about '64 saying, &quot;You know, as I'm working on this book on compilers, treatment than a compiler writer needs to know. Do you &quot;Sure, Don, go right ahead. Whatever you think is good to write a few years later. By this time, I guess the guy's promoted, and to do? Did you realize that this book is going to be more this. No, I didn't. I had read a lot of books, and I thought I understood and I was figuring five typed pages would go into one eyes, if I had five typewritten pages -- you know, the letters realized that the guys at the publishing house knew something was one and a half pages of text makes a book [page].&quot; I didn't book, which was an Addison Wesley book, and it typed it out. took one and a half pages. So I had three times longer. No wonder done! I'm sitting here with much, much more than I thought I standing still, and I knew that more still has to be written as I happened to catch a glance at some notes that my editor had written to himself with his bosses, and one of the comments on there was &quot;Terrific houses all have their horror stories about a professor who or something like this, and it never sells, and it just is a they've signed. So they have to figure out how to rescue something book. We thought at first we would package it into out chapter one to a dozen readers in a focus group, and they got they saw in that chapter, and so at least I had some support decided to package it. They figured out that of the 12 chapters there could stick the other five in some way that would make a fairly finally announced in 1966 or something: that it would come out I typed chapter two, and so on. I kept working on it. All the time I'm typing up my notes and polishing the hand-written notes draft. That sets the scene for the early days of The Art of What year are we at now? What happened is, I'm at Caltech. I'm a math and once in a while combinatorics at Caltech. Also one or sorting, I think I might have taught one quarter. But most of to The Art of Computer Programming. My daughter is born of volume one to the publisher, I think, during '66. I'm working beginning of '67. I think this is approximately the way things my son was born in '65, and what happened is that I got... I'm out to be almost 700 pages, which means 1,000 type-written pages. wasn't quite so blissful, because I'm working on this a lot. late late show on television. I have also some earplugs for much. Here I am, typing The Art of Computer Programming when change diapers and so on. I think that what we need to do is talk about... born. Yeah. That leads sort of directly into this magical Let's continue on with 1967 in a moment. Okay. Don, once you told me that 1967 was your most also said you had only a very short time to do your research so well for you. Let's talk about that. Well, it's certainly a pivotal year in my things were building up to a crisis, because I was just I mentioned I was editor of ACM Communications, and ACM Journal, the editorial duties very seriously. A lot of people were referee reports in many cases, as well as discussing with referees consultant to Burroughs on innovative machines. I was consumed with and I had children, and being a father, and husband. &quot;Well, what am I going to accomplish today?&quot; Then I would stay up do this. When I was in high school and I was editor of the paper, the paper came out. I would just go without sleep on those occasions. where I didn't realize I was punishing my body. We didn't I had the TV on. That was enough to kill the boredom while I had in 1967, is when things came to a head. Also, it was time for offers. I think I was offered full professorships at North Carolina I had to make a decision as to what I should do. I was promoted early. The question is, where should I spend the rest I be a computer scientist? By this time I had learned that work as a computer scientist. I had analysis of algorithms to Stanford. I gave a talk about my left-to-right parsing. I discovered dormitories, Stern Hall, the night I gave Forsythe very much, I liked the people that I met here very much. but also there were other places too that I wanted to check about what to do long-term for my permanent home. I don't like be that I was going to make one move in my lifetime to a place forever. I wanted to check all these things out, so I was confronted to be an ACM lecturer, ACM National Lecture Program, for meant that I give a list of three talks. Each ACM chapter or university so that I have a schedule. I go from city to city every then. Yep. Stanford and Berkeley were on this list, as was three weeks in February where I was giving talks, mostly. When I'm at Caltech, I've got to be either preparing it done. I'm in the middle of typing chapter four at this I'm about, I don't know, one third of the way into volume two. If I get a new idea, if I'm saying &quot;Here's a problem that ought on the airplane. As you know, when you're a lecturer every hotel, and you get on the plane. Somebody meets you at noon and you They ask you the same questions; &quot;Where are you going to be in the afternoon, there's a party in the evening, and then you go off to the next city. After three weeks of this, I got really There was a snowstorm in Atlanta, so I skipped my talk in Atlanta you the flavor of this. But on this trip in February, also, one of my stops was in Cornell, where Peter Wegner was a visiting to talk about the main topic in programming languages in those programming language. What's a good way to formalize the meaning writes a string of symbols, we wanted to say exactly what that interesting results about, and make sure that we've translated in the air at the time. I had been thinking of how I'm presenting well, you know, there were two basic ways to do this. telling you what to do. You start out and you say, "Oh, this mean?" Then a program tells the things inside the program bottom up, where you just start with one symbol, this is a number you have a plus sign, and one plus two, and you build up from the we have a bottom-up version of semantics, and a top-down version why don't you use both top-down and bottom-up? Have the synthesized attributes that come down from the environment.&quot; I said into circular reasoning. You can't define something in terms after ten minutes I realized I was shouting to him, because You could do it both ways, and define the things in a way that that certain aspects of the meaning could come from the top, and other made a beautiful combination. Don, we were speaking about semantics of programming I'm shouting at Peter Wegner because it combine the top-down and bottom-up approaches simultaneously when on a weekend as we're hiking at Cornell in a beautiful park because this was kind of an "aha" moment that doesn't happen me now no one's allowed in that park in February because it's too risky It was when all of a sudden it occurred to me that this might research. I have to go on and give more lectures. Well, I find myself to the graduate students. I gave one of my regular lectures, ask questions to the visitor. There was a student there named be a very distinguished professor at Berkeley and editor Systems, and she asked me a question. "Don, how do you think programming languages?" In the back of my mind through that Peter and I had talked about the week before. So I said, "Let's to define its semantics". On the blackboard, in response try things, and some things wouldn't work. But for the next 15 that I had never written down before, but it was sort of in simple algebraic language and convert it into a very simple spot to be an abstract but very simple computer. Then we would try so that I could write a few lines in this algebraic language, and the semantics would be, which would be the machine language program. in it, but this is the way I had to do research at that time. students to think about the research problem that was just beginning but on the other hand, being a teacher, that's when only talking to yourself, you don't organize your thoughts not a bad way to do research. I didn't get a chance to think I'm typing up The Art of Computer Programming when I'm at home, and my classes the rest of the time at Caltech. Then in April I happened Frenchman, Louis Bolliet, asked me something about how one might define in Grenoble in France. That was my second chance to think him there. I was stealing time from the other things. That I wasn't only thinking of what to do with my future life, and editing class at Caltech for sophomores. It's an all year class, sort While I was looking at a problem, we had a visitor at Caltech named Evans. He and I were discussing how to work from axioms, and to thing in abstract mathematics. Somebody sets down an axiom, parentheses "ab" times "c" is equal to "a" times parentheses at other axioms that were sort of random. One of the things I asked my students sophomores how to do mini research problems. So I gave them They were supposed to develop "grope theory" -- they were the mathematical theory well developed is a "group", which I had been is the associative law. Another axiom of groups is that an element Another axiom is that the identity times anything, identity axioms. We learned in the class how to derive consequences of these axioms So I said, okay, let's make a "grope." The axiom for quantity "yx" was equal to "y". I give them this axiom, and I say to the class, that have five elements? Can you prove any theorems about up a theory. theorems could you come up with. We tried ourselves in the shoes of an inventor of a Well, Trevor Evans was there and he showed me how to define what set of all... It can be infinite, but you take all strings of letters, one formula can be proved equal to the other formula just times "yx" equals "y"? He showed me a very nice way to solve that problems in what's called universal algebra, the study of axiom solution to this problem -- this problem arose in connection at Trevor Evans' solution to this problem and I realized that work with axioms in general, without thinking that a machine could the axioms of group theory, and after a small amount of 10 consequences of those axioms that would be enough to decide machine was doing it. We didn't need a mathematician there to formula and this formula." With the technique I learned from Trevor Evans, put on it, I could set the machine going on axioms and it would things, which things to plug in, would be potentially fruitful. of group theory axioms, it would finally get to the end and proved. I've got enough. I've got a complete set of reductions. If applies, you've got it." It relates to AI techniques of expert I'm teaching this basic math class. The students in this class were quarter, everybody worked on this. One of the best students in paper by implementing the algorithm that I had sketched that time. So we could do experiments during the spring of kinds of axioms and seeing which ones the machine would solve keep generating more and more reductions that seemed to go without could introduce new axioms that would bring the whole thing back on that kind of thing. I don't have time to sit down at knew it had lots of possibilities. Here I had attribute grammars systems coming up in March, and I'm supposed to be grinding out The text of volume one had gone to Addison-Wesley the previous corrections and told me, "Don, this isn't good writing. You've Addison-Wesley house style. The page proofs started coming. I started time to get page proofs for volume one. Volume one was published in to be available in the spring also. So it's layer, upon layer, upon layer. Right. There's a conference in April in of the things that I'd been working on at Burroughs. We Language, which was an improvement of the state-of-the-art in simulation languages. There was an international conference the Simula language, which wasn't very well known. to that, visiting Paris and Grenoble on my way because Maurice Nivat and on theory of context- free grammars, and no one in France would appreciate his work, so he came out and we spent some time together about context- free grammar research. I visited him in Paris to Norway for this conference on simulation languages where I Simula, and so on. My parents and Jill's parents are taking this time in April. I'm scheduled in June to lecture at a summer school. I'm giving lectures about how to parse, what's called that developed after these lectures. This was a topic that I did that I understood well enough that I didn't have to publish in these lectures in June in Copenhagen. That was a one-week series five days, to be given there. The summer school met for two second week of that summer school. All right. What happened then and I was in the hospital. My body gave out. I was just doing I learned about myself. I had a wonderful doctor who showed me his know that ulcers are related to this bacteria. As far as they Stress. Yeah. People would get operations so that acid, and things like that. Anyway, he showed me his textbook, and what other people call the "Type A" personality. the things that were there. I was an automaton, I think, basically. I had all machine. You know, I saw a goal and I put myself to it, and I worked no to people when they said, "Don, can you do this for me?" get to understand, that I had this problem; that I shouldn't he's so wonderful because doctors usually talk down to patients But here he let me look at this textbook so I could know that me feel good. I had access to anything I wanted to know about framed in black, saying, "I'm not going to be able to get I'm sorry. I'm not supposed to work for the next three weeks." I was writing in a part of volume two when the ulcer happened, working out the answer to a problem about greatest common volume two. It was an exercise where the answer had a lot of cases to explain the answer. It was a problem that needed to be I was working at it. All of a sudden, bingo. The reason you can two under "brute force," it refers you to a page, an answer force, and so you look at that page, you can see exactly what exercise solved half of the exercise before I could work on it again It wasn't too bad, but the blood supply... I took iron pills to give my lectures in June. However, the first week was supposed second week was supposed to be lectures by me. But Klaus had just gone and had come down with dysentery in India and was extremely was supposed to go on in the first week instead. But I was stealing lectures. I said, oh, I have a week. I'll go to Copenhagen, listen hadn't prepared. So I'm talking about stuff that has never been written students. I get to Copenhagen with one day to prepare for this there's wonderful parks all over the city. I sat down the first day, and I thought of enough things to say in my first lectures, and I sat down under that tree and I worked out the became my paper called "Top-Down Syntax Analysis." The second part of June I'm going to a conference in Oxford, one of the first I'm presenting my paper on the new method that I had discovered, the word problems in universal algebra. After I finished my the paper that I was giving at Oxford the following week. There get more stimulated about combinatorial research, which I can't as a consultant as well. I resigned from ten editorial boards at this I gave up all of the editorships that I was on in order again on volume two where I left off at the time of the ulcer, keep a regular schedule. In the fall I went to a conference in Santa That was my first chance to be away from Caltech, away to type The Art of Computer Programming. That's where I had the theory of attribute grammars, this idea of top-down and bottom-up. go to any of the talks. I just sat on the beach and worked turned out, I wasn't that interested in most of the talks, although at the meals and we talked about things off-line. But the formal with mathematical talks. I found myself, in most lectures on I sat in the back row and I said, "So what? So what?" Computer me. When I finally made my career decision as to where to go, I had They offered me full professor of mathematics. I could go to Harvard meant computer science. That was as close as you could get would have been to build up a computer science department there. backwater at that point in time for computer science, and Caltech so good at physics and chemistry and biology, they were chemists and physicists and biologists. They didn't think Stanford, where we had the best group of computer scientists computer science had a great future, and also the best students in was already built up. I could come to Stanford and be one of of argue for computer science and try to do barnstorming. Berkeley much as probably the greatest all around institution for covering covered well, but it didn't have a professor of Sanskrit, that sort of thing. But I was worried about Berkeley because Ronald school and wouldn't be subject to the whims of politicians so much had this great other thing where the faculty can live on campus, the rest of my life I would be able to bike to work; I wouldn't a wonderful person, and all the group at Stanford were great, and a no-brainer, why I finally came to Stanford. My offer from Stanford the end. The other three had already come in earlier, but final decision. In February of '68 I finally got the offer one had been published, and George said, "Oh yes, everybody's Everyone was all smiles because they had gone No, because the committees were saying, "This born in '38 and this was January of '68. But when they looked credibility here." That helped me. I got through '67 and learned always felt after that, hearing many other stories of people that turned out to be important in their research thing, that was where they had a comfortable living conditions and good - the set up a nice office space and good lighting and so forth. starving, they've got kids screaming, there's a war going a lot of their most... almost every breakthrough idea. I've always wondered, you were going to get the most productivity out of your scientists, them, but deprive them of things? It's not sustainable. Still, much science as I could, as well as try to fulfill all my other Don, to go back to the Stanford move. A couple I remember sitting in George Forsythe's office, just of this young guy from Caltech who had this wonderful outline was [that] Don Knuth wanted us to also hire Bob was a wonderful idea. Bob Floyd was magnificent. But it hadn't then we did it. Can you go into that story?DK: Yeah, because Bob was period. As I said, I'd been reading the literature about programming a book about it in '62, I knew there were these people who to sort out the chaff from my strong opinion was that five good papers programming languages had ever been written, Bob the first time in summer of '62 when I was working on this the summer I went to the ACM conference in Syracuse, New York, and away. He was showing me his strange idea that you could prove a never occurred to me. I said I was a programmer in one room, and prove things. Programmers write code and they hope But Bob's saying, no, you don't have to twiddle; you can take proof that it works. He was way ahead of me. There were very few people worlds together at that time. EF: [John] McCarthy was one John and Bob were probably... I don't know if there was anybody tells me his thoughts about this when I meet him in this conference later when I was in Massachusetts at the crisis meeting with and spent a couple of days in Topsfield where he lived. We shared exciting correspondence over the next time where letters go back and about coming up with a better idea about something that's now called of sorting networks between us in the correspondence. Leibnitz writing to Bernoulli in the old days of scientists trying time working on these letters. Every time I would send this is the last result," he would come back with a brand new idea and step in our development of this theory. We weren't talking talking also about a variety of algorithms. We found that we had me a couple of times in California, and I visited him. So "Hey Bob, wouldn't it be nice if we could both end up at the the same letter where I was describing to him my idea about left-to-right immediately to Bob a 12-page letter with ideas of left-to-right He comes back and says, "Oh, bravo, and did you think about Then at the beginning of '67 I said, "You know, Bob, why don't place together? What is your take on the different places in the world?" Computer Associates and spent, I think, two years at Carnegie. and introducing new things into the curriculum there. He wrote at the time, the way he thought their development of computer science Harvard was an advanced backwater, that comes out of that at things. At the end of the letter he says -- my current number one but I wasn't totally sure -- and at the end he ended up he could go there, chances are he would go there, too. I presented to make it a package deal. This meant they had to give couldn't get two new billets for us, and so it was a lot of work Except that you had to lose two other good people, but I think Bob Maybe that was your first great service to our department was Well, I don't know. I did have to work a surprise they had appointed him as an associate professor but because he didn't have a Ph.D. He had been a child prodigy, at something like age 17, and then dropped out to become a full credentials, although he had all the best papers in the say it's time to promote him to full professor. The thing that clinched gotten -- this was 1969 -- he was the only person that had been of the International Congress In '71. '71, yeah. That helped. That was IFIPS. Yeah, IFIPS: Information Processing. Don, maybe we could just say a little more Right. As it turned out, when we got together when we were writing letters. I noticed this was true in my students better when I was on sabbatical than when we were work face- to-face all the time, but rather sometimes offline instead Hall -- that I couldn't think in his presence. I have scientists that when I'm in their presence, I think only of their wired in certain ways that mean that we should write our joint papers of joint work in the early '70s, but also the department... I'm not sure exactly when that was; probably right after my sabbatical. I think 1972. Yeah. I went on leave of absence for a year chair of the department. He took that job extremely seriously, couldn't do any research very much at all during those three know how many years, five years. I started being chair in '76, so like four Okay, so it was four years. That included new building. When he came back, then he had two years of sabbatical. was a break in our joint collaboration. Afterwards, he never same research topics that I was in. We would work on things occasionally, We wrote a paper that we were quite pleased with at kind of thing that we imagined originally, that would always be a very bad coworker. You can't count on me to do anything, because think of something else. So how can anybody rely on me as being able came up with a lot of ideas, like his method for half-tone, for the printers of the world now. That was done completely independently. years after he had come up with these inventions. But I'm are being published in eight volumes. The seventh volume is selected dedicated to Bob Floyd, because a lot of the joint papers, that volume. He was one of the few people in my life that really I consider one Don, I'm going to call that the end of your into some questions about what I call your second Stanford of delineated this as a very different time. I saw you shifting You became, in a solitary way, the world's greatest programmer. and METAFONT. All of a sudden, you disappeared into just just pouring out, plus your engineering. We were in the new building office to where this new printing machine was installed. You'd symbols and pulling your hair out of your head, because were just what the National Academy of Engineering would call your life. Okay, well, it ties in with several things. when I was up at McCarthy's lab... Well, I heard all about it. ...starting this. One of the first papers [had] to do with avoiding go-to statements. There was a revolutionary in the '70s, called structured programming. It was a different my compilers in the '60s. Bob and I, in a lot of our "Let's get on the bandwagon for this. Let's understand structured our first papers was to do what we thought was a better approach some people had been taking. Some people had misunderstood that had a structured program. That's like saying zero population don't change the structure. People were figuring out a way as before, but without using the word "go-to" in them. We said are. Bob and I were working on this. This is going on, and we're teaching but we had never really written more than textbook code ourselves telling people how to do it, having never done it not any real world constraints. I probably was itching... Thank programmer. I was always calling myself that in my head. I love programming, as well as anybody. But the fact is, the new way of programming put much effort into. The emphasis in my comment was on the solitary. No team. That's right. As I said, it's hard for I had to march to my... I had The Art of Computer Programming, team that I wasn't the head of, I guess. I did first have to I was chair of the committee at Stanford for our university reports. phases of the department through these years. We had a big reports with us. We had to have a massive bookkeeping system just in charge of it could know who had paid for their reports, type of work had to be done. It seemed like just a had a grad student who volunteered to do this as his master's project; all of the administrative chores of the Stanford tech paper and I looked at it superficially and I gave him an A on it, A week later, the secretary called me up and said, "Don, we're Can you take a look at it for us?" The program was running up often. I went up there and took a look at the program. I got to page is interesting. Let me make a copy of this page. I'm going to time I saw where you change one symbol on the page and you can misunderstood a sorting algorithm. I thought this was great. a searching algorithm there for binary search. I said, "Oh, he make a copy of this page so I can show my class next time I teach about I got to page eight or nine, and I realized that the way he had written a program that would only work on the test case that thesis, that was based on a database of size three or something like all the structures would break down. It was the most weird thing. would assume that the whole database was being maintained by generate an index, the way the thing did. Anyway, it was completely I thought I was going to spend the weekend and give it to on it. There was no way. I had to spend a month writing a program that -- to cover up for my terrible error of giving this guy an A made it look like his program was working. But it only worked on I said, "Okay, I'll use structured programming. I'll do it right. I'll get a learning experience out of it." I got a good appreciation I used to think was trivial, [but] there was a lot to it. would do Stanford reports, and I could install that and get been up at the AI lab and I met the people up there. I got to know Leland Smith told me about a problem that he had. He was a piece of music and it maybe has 50 bars of music. I have to decide are in each bar of the music, and I know how much can fit on out right. Is there any algorithms that could work for this?" sequence of numbers, how many notes there are, and try to find a decent way. I looked at the problem and said, "Hey Leland, this we in computer science call the dynamic programming algorithm (method). be used to solve this problem." Then I'm teaching Stanford's up in class. I would show the students, "Look how we had this programming." One of the students, I don't remember who it was, could also use that to text, to printing books. You could say, instead got letters and words into lines, and make paragraphs "Hey, that's cool. You're right." Then comes, in the mail, volume two. I had changed a lot of pages in volume two of The Art of the new edition. During the '70s, printing technology changed in the '60s, but they switched over to using film in the '70s. with a different technology. The new fonts looked terrible! the large letters, for example, and the spacing was very bad. '70s and it turns out that if it wasn't simple -- well, almost I couldn't stand to see my books so ugly. I spent all this time working that looks hopeless. I'm tearing out my hair. I went we know these people in Poland. They can imitate the fonts that you not legal, but we can probably sneak it through without..." "They'll try to do the best they can, and do better". Then they with the new version done with these Polish fonts which are supposed bad. At the very same time, February of '77, I'm on Stanford's deciding what the reading list is going to be for next year's new book on artificial intelligence, and the proofs of it were just International, Incorporated] in Southern California; at [Ed] typesetting using lasers. All digital, all dots of ink. Instead using algorithms, bits. I looked at these galley proofs of Winston's gorgeous. They looked absolutely as good as anything this time I was working at the AI lab, where we had the Xerox Graphics per inch. It looked interesting, but it didn't look beautiful I think this was 1,000 dots per inch at III, you couldn't Wisconsin and in Wisconsin we never eat margarine. Margarine unless you didn't color it. I'm raised on butter. I'm thinking: okay, digital typography would have to be like margarine. Our eyes don't see any difference when you've got enough down with Les Earnest to Southern California to III, and finding out machine and do it? Meanwhile, I planned to have my sabbatical my sabbatical year in Chile. Don, can I interrupt you just a second? Yeah. I don't know if Fredkin was still involved enough credit for those really revolutionary ideas. That's right. Not just those ideas, but the high speed graphics Oh yeah. That's when I met Rich Sherpel recognition problems. They had been doing it actually Winston's book. This was the second generation. First they had been resolutions on microfilm. And so many other things [were] Right at the beginning, Fredkin revolutionized you. You were on your Chile. Ed's life is ten times as interesting as about Ed, it adds just another... He's an incredible person. I think Ed may be a subject for one of these Yeah, we've got to do it. Anyway, I cancelled saying I'm sorry; instead of working on volume four during I've got to solve this problem of getting typesetting those dots on the page, and I've got to write this program. That's I'm going to let you go on with this, but here, just related to myself, actually. How much of this wanting to get back to being a programmer? Life was going on in back to being a programmer and learning what the problems It's a very interesting hypothesis, because I approached the CS reports problem the year before was an my teeth into something other than a toy problem. It wasn't real It's true that I probably had this craving. But I had a stronger craving that it was only going to take me a year to do it. Maybe volume four wasn't quite ready. Maybe... Oh, this is true. ...it was still cooking. No, no, absolutely. You're absolutely right. at the Journal of the ACM. Look at the SIAM Journal on Computing. and there's math journals, combinatorial journals, Communications more than half of those articles are things that belong in volume and left that I knew deserved to be done right in volume four. Combinatorial algorithms was such a small topic in 1962 that Johan Dahl asked me, when I was in Norway, "How did you ever algorithms in 1962?" I said, "Well, the only reason fun." I really enjoy writing, like this program for Bose that I did overnight. have this chapter just for fun. But there was almost will talk about combinatorial algorithms nowadays [and] they way. In a pejorative sense, instead of the way I look at it. They kill you." "Combinatorial" means "It's exploding. The way I look at it is, combinatorial means this is where you've skillful, because one good idea can save you six orders of magnitude faster. People are coming up with these ideas all the time. For of research. Not the problems exploding, but the ideas to cover. It's true that I also in the back of my mind I'm scared So maybe I'm waiting for it to simmer down. Somebody did say to maybe I would start to look at binding or something, because I've certainly seen enough graduate student procrastinators Anyway, you headed into this major engineering As far as I knew, though, it was going to was going to enjoy having a year of writing this kind of a program. my secretary, Phyllis; my super-secretary, Phyllis. I was going to typing. I could write my books and she could make them; dotting that she did on my math papers when she always typed my math