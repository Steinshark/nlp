Recently, on X, I came across a couple of posts or discussions, you could say, where people argued whether you should stop using services like Vercel or Netlify, so services which simplify the process of hosting web applications, websites, and if you instead should switch to using a VPS, a virtual private server. And I want to take a closer look at that and give you my opinion on that discussion and that question, but before I do that, let me clarify what exactly a VPS, a virtual private server is, because of course, we need to know that in order to judge whether it's better or a great alternative to Vercel, Netlify, and other managed hosting providers. So what is a VPS? A VPS is, as the name suggests, a server in the end, so a computer which is configured to host your applications, your web applications, but theoretically, it could be any kind of application, it could also be some utility script that executes every hour or so, but for now, let's simply stick to the web application use case, to the website use case. So it is a server that allows you to host your website, but it's technically not a computer you own, it's not a computer in your room, instead, it's still some kind of managed service because it is a computer, a server, that's owned and operated and configured and provided to you in the end by some cloud provider, by AWS, for example, their EC2 would be their VPS product, or by other providers like Azure or Hetzner, which you might not have heard about before, but which has gained some traction over the last months, they actually have been around for more than just a couple of months, but as of late, it seems to me as if they've gained more popularity, at least I see them being mentioned more often, but it is providers like those, AWS, Azure, Hetzner, and plenty of others like Linode and so on, that do offer such virtual private service, which you as a customer can rent, so that you can then connect to them and put your application onto them. Now, what's important to understand is that a virtual private server is technically not an entire computer, an entire machine owned and operated by that provider that you rent, but instead a portion, a part of that machine, you could say. Of course, though, a fully isolated part, so you and many other customers share a single computer and each of you got a part of that computer, of course, as I mentioned, isolated, so that your application and your data on that machine can't be accessed by other applications running on that same machine, and in addition, it's also made sure through software solutions in the end, that each of you gets exactly the same amount of CPU and network bandwidth, so that it's almost like a dedicated computer, like a computer you own, but technically it's a part of a computer. That's a VPS, a virtual private server. In the end, you could say it's a computer in the cloud or a part, an isolated part of a computer in the cloud. If you opt to go for such a VPS, that means that first of all, you have a couple of choices to make. You, for example, have to choose the configuration, how powerful your VPS should be. Most cloud providers offer different options so that you can choose how many virtual CPU cores you want to have access to, how much network bandwidth and so on. That is a choice you have to make. Then you might need to choose the operating system or the system image that should be installed onto your VPS by the cloud provider, so to say. On EC2, you have multiple options there, for example, and you can even configure your own image, which you could then use for your virtual private servers that you want to launch in the future. And once you've got that, you also might need to install extra software on that server, which of course also means that you need to connect to it, typically via SSH. And then once you are connected to that server, you might want to install Node.js, for example, or a specific version of Node.js if you plan to host a Node.js application and any other software you need. You also need to make sure that you get your website code, your executable code, your website in the end onto that server. And you could use protocols like FTP for that. You can also transfer it via SSH. You could also install Git on that virtual private server and then pull your application from some GitHub repository, and that's a popular solution, and so on. So you see, you've got a couple of steps you need to go through, and the steps I outlined here might not even be all. You also might need to open up ports and set up which traffic should be accepted. You might need to set up SSL and support HTTPS connections. You might need to add a load balancer in front of your virtual private servers, if you have more than one. If you run an application that needs to serve traffic that can't be handled by a single VPS, then you need your application on multiple VPS, and you need a load balancer that balances and distributes the incoming traffic across all those servers. So you might need more than just a single VPS with your code on it, depending on the complexity and the amount of traffic of your website. But in the end, that is, of course, something you can do, and providers like AWS offer you solutions for all those problems. They offer you EC2 for getting such a VPS, for spinning it up, and for hosting your application. They offer you load balancing services. They offer you CDN services, or a CDN service, and so on. So that's all something you can do, but as you can tell, depending on the complexity of your website, that can become a lot of work, and you can also mess up things there. You have a lot of responsibility if you do decide to go for that VPS solution, because even though the server, the hardware, is managed for you, a lot of the other things aren't, and you need to take care of them, therefore. And services like Netlify or Vercel have a different approach. They typically build up on cloud providers like AWS, so they are kind of wrappers around AWS or other providers, but they take away a lot of the complexity, because they use all these services under the hood to give you an easier time spinning up your website and web application. They, for example, might take away the burden of choosing an operating system and a configuration. They often make it easier to get your application onto those servers or onto the services they are using under the hood, because they often make it as simple as connecting a GitHub repository and they do the rest. And that's the idea behind Netlify, Vercel, and other services. They are managed services where they take away a lot of the complexity you have to deal with otherwise. Now as a downside, they can become pretty expensive. Often you can get started for free, but pretty early on you can rack up a significant bill and in certain situations, if your application gets a lot of traffic suddenly or if the traffic patterns change, you might end up with even higher bills, with unexpectedly high bills. And that is one of the reasons why we're seeing this discussion about whether you might want to switch away from Vercel and Netlify. But of course, you do pay more because you get that management, because you get that reduced complexity. If you want to get all the features you get from Vercel and Netlify without them, so by just using AWS or Hetzner or other providers, you have to do a lot of work on your own. That is something you should be aware of. If you want to get logging and load distribution, automatic scaling, security, and lots of other things, you have to dig into those VPS providers and you have to understand which services they offer and how you can set up all these things when rolling your own virtual private server. Now, of course, what's important though, is that depending on the kind of application you're building, you might not need all those extra features for which you're paying when using Vercel and Netlify. You might not need load distribution because you have a website that can easily be served by a single VPS. You might not need 100% uptime, you might be fine with it going down during an update or temporarily because of a problem, because you don't have a mission-critical website. And of course, let's be honest, most of us don't have mission-critical websites. Most of us have simple blogs, or many of us have simple blogs or simple websites that aren't that complex to host. And even more complex websites like an online shop, even those might not get millions of visits every day. And even there, it might be fine if it's down for 10 minutes per month. It might not be great, but it might be okay. And I think that's, therefore, the actual question you have to answer. Do you have a website that's so complex that you need all these services? Well, in that case, you might either be willing to pay more for Vercel or Netlify, or you might be willing to dig into AWS and so on. Or if you have a simpler website, you might be fine with going with just a VPS without all the complexity on top of that. On the other hand, even if you have a simple, non-complex website, you might still prefer something like Vercel or Netlify because even though you pay a bit more there, you have basically no complexity when using those services. So even though it might not be super hard to spin up your own VPS, you might not care whether you pay, let's say, $80 per month or $100 per month on Netlify or Vercel versus, let's say, $15 or $10 per month if you roll it on your own. Sure, it's a big difference, but depending on your business, it might not matter too much and saving that time to set it up on your own, that might be worth it to you. And these are therefore the kind of questions you have to answer, in my opinion, to decide whether it's a managed service like Netlify or Vercel you want to go for, or whether it's maybe worth the effort of setting up your own VPS. You definitely should be aware of the fact that as your application gets more complex, hosting it on a VPS will also typically get more complex. So then that comparison of $10 versus $100 or $200 on Vercel and Netlify might not be correct anymore. But of course, many of us, as mentioned, don't have websites that are so complex. Yeah, but that's my take on that question. Of course, I'm interested in hearing your opinion. What did I miss? What do you think about it? Definitely let me know.