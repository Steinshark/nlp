Now here is the problem; this right here is on. We got an infrared distance sensor, an Arduino have guessed, the closer we get to the distance Sounds simple enough; but the problem is that 14 times and that can get expensive. Now using a cheaper distance sensor is not justified for what it can do. But we do not need such a big Arduino board it is way too overpowered with all of its So I searched through all corners of the internet found one in the form of the HT66F002 that a noticeable price difference. That of course sounds amazing; but the next there exists thousand of tutorials and libraries, guides available. So the question is whether I can make this is exactly what we will be finding out in Let's get started! This video is sponsored by JLCPCB, whose PCB now. Their online platform is user friendly, easy your PCBs in just a week by using their fastest If that sounds like your cup of tea then you PCBs starting at $2 or even try out their And last but not least let me tell you a secret, soon. So stay tuned. Now let's start off with finding out what in my project. The simplest thing would be using the pins their pins high or low as an output to for their pins are getting pulled high or low Then we need to create a PWM signal with variable on the oscilloscope. This is definitely mandatory to dim the brightness And while we are at it, maybe it would be to dim the brightness of an LED accordingly And last but not least a sleep mode would course we definitely need to be able to use communicate with our distance sensor. So yeah these are the main features I need cheap microcontroller here can do them all, And yes; it seems like pretty much all functions I will address later. And of course when comparing these specs to at before; then it is definitely not a power ever looked at. So to get started with it, I firstly soldered get myself another piece of hardware for it, According to its manual you only need 4 of GND for power and OCDSCK and OCDSDA for the Connecting those to the microcontroller was clearly states what pin connects where. And just like that it was time for programming, and the HOPE-3000 software. Now the IDE software is used to basically Arduino IDE. And the HOPE software is then used to upload And with that out of the way let's create HT66F002 and let's get started with coding Now in Arduino language this is as simple high and low and waiting a bit in between. And luckily for me with the HT IDE it is not just a bit different. For example with pac1 = 0 we set the pa1 pin pac1 = 1 it would be an input. And by then pulling this pin high and low, Well, sadly after compiling this code and worked wonderfully though even at the first Now I probably spent around half a day figuring like decreasing the output current, adding Eventually though I realized that the watchdog reset when its timer overflows. So after disabling it, my blink code finally And in case you are wondering what this code to alter the watchdog timer register which registers as well. So if you want to learn about that then definitely But anyway, next it was time for a push button with the Arduino and its digital Read function And once again with the HT IDE, it was also here is the papu one which enables a pull So after building this circuit up and uploading the first mandatory feature was ready to practically Time to move on to the PWM one which if we easy to pull off, by using the analog write that constantly changes here to control the the PWM signal. When it comes to HT programming though this because here we have to set up all the mandatory Eventually though I ended up with a functional here with a 10 bit variable. And after uploading this code you can see even features a higher frequency in direct Of course you could achieve a higher frequency timer registers and if you want to do that But anyway, PWM works and it was time for feel like a broken record here by saying that function. With the cheap microcontroller though it took register and then use bit math to store the I can then pass over to the PWM function. But as you can see that was worth it in the And I think generally it is simpler to program interface meaning you can check at every point makes troubleshooting so much easier. With my cheap microcontroller, I can not do But either way; ADC works meaning low power since this halt command puts the microcontroller as a Wake Up input, you can bring the microcontroller Here you can see the final example which after I got the microcontroller current demand down turn it all back on and repeat this process, And that brings us to the last I2C feature But luckily there are dozens of Holtek Microcontrollers with I2C and only costs around 30 Cents per So after soldering it on a breakout board by uploading my PWM sketch, it was time to But sadly after around one hour I realized all other Holtek 8-bit microcontrollers I slave mode; but for my project I need it as This basically shattered my goal of using truth by told I only realized that after spending So was this video pointless in the end? I think not because now I know that the Holtek relatively easy to program for and yes the free and does it job just fine. Combine that with the fact that they make like some for smoke detection, BLDC motors some pretty compelling advantages here. But on the other hand though the programmer for a hobbyist and like I said before there are all in all my main complains here. But if you want to use them for yourself then where I linked all good guides I found as and a bit more. With that being said it is time to find another think I already know what I will try next. Until then I hope you enjoyed this show and to keep it going. Don't forget to like, share, subscribe and Stay creative and I will see you next time.