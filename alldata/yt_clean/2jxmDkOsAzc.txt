&gt;&gt; Join us this week where we have Dan about HashiCorp HCP Packer tooling. [MUSIC]. &gt;&gt; Hello everyone and In this episode, we're some really cool stuff with With us today, I have a very special guest With us &gt;&gt; Hi April. Thanks for I'm a technical product marketing cover our infrastructure product &gt;&gt; Awesome. You guys but we're going to focus Tell us, what is Packer? I've used in the past with so many different I also know that, I don't want to give away what but I think it just went &gt;&gt; Sure. Packer is actually one of the older tools in It actually predates Terraform by about a year. It's been It was first released in 2013, and it is an open source tool Whether that's VMs, whether it's really do about automating because building base images It's tedious, it's checklists, it's repetitive and, so automating that away is &gt;&gt; Awesome. I've used it a lot when We want to put things into make something and take out that human those checklists that often come with building out &gt;&gt; Exactly. Just really takes missing item, and obviously, We want to build and that's got to start with For starting off behind the then we're just not going &gt;&gt; Absolutely not, deploy something to Tells a little bit of a Packer, and you're going to show using Packer and some other &gt;&gt; Absolutely. Like I mentioned, Packer is an open source tool, but we also have HCP Packer. HCP is the HashiCorp Cloud platform, and that's the piece that It was earlier in 2022 here. What that is is a We're building all these images but how we keep track of them, make sure we're using make them easily discoverable and that's what we'll take &gt;&gt; Awesome. &gt;&gt; I can jump over I've got a pretty standard In fact, I'm actually going to go times that it's building while I'm going to start that at what the rest of this looks like. Packer build, it uses the same HashiCorp as you might be familiar A lot of this should look familiar if you're already We have some of the We need our Azure plug-in here, so Packer knows how Then, we define our source, and this is where we the original image and how to Here we're going to a Ubuntu image from Azure, and our destination image, we're going to create as well as publish it into a shared image view galleries The special sauce here where Packer then will This first section here is how about this build into Is it going to collect all the some labels that we can Along with the to find this image in Azure, that's all going to be the HCP Packer registry. That's what this block Then we move on to our which is really where the power of Packer and customizing that We can run shell firewall rules, we can run other provisioners like And that's where we really &gt;&gt; Awesome. We can get the base I like how we can I know we're going to but you've gone ahead and put in a bill time timestamps that full traceability end to end we're building so we know what we're and when and &gt;&gt; Absolutely. The versioning is a big piece of what the HCP Packer and we'll see how we can even developers through how we This is a base image. I also have a more specific image. Because we have our baseline image, that's where we bake in compliance requirements that needs to be an run the OS updates, that thing. But we also are going to In this case, I might need an image for some data In this case, I'm going to The difference here is that baseline Azure Obuntu image, I'm going to start with that and I'm going to do that by querying my HCP Packer registry I'm going to look for that that I created in that This is going to just my HCP Packer registry and use it as the source image for Another great new feature the ability for the to track those relationships, so it is going to be aware was built from that base image make sure things are up-to-date. &gt;&gt; Well, that's awesome because we weren't using HCP admittedly, and we had to track the images in different versioning and This is great to say. This definitely would be good to use previously when I was working &gt;&gt; It's really great. What we're switching over This is the HCP Packer registry. Again, this is in the It is a fully managed SaaS service, and this is where all my images is going Here on this list are I can have different OSs here. Obviously Packer supports so we could be building too and customizing those up. Then it's also going to these and what we call We can also see here those a real clear indicator here hey, we might have some I rebuilt my base image and maybe didn't rebuild one If we dig into one of those, again, we get a lot This feature here we call ancestry, which is that parent-child We can see here this base Now actually since we started, they're now both up to date because just kicked off the build for and it actually Now it has gone from so now we know we have this image based off the latest We get all detail here about it. There's labels and metadata and also some really handy here to tell us how to use this image in Terraform or Packer &gt;&gt; Love this because I think when we're deploying the stuff, they love code snippets. Just why reinvent the wheel when so this is awesome and You can easily just your Terraform code &gt;&gt; Absolutely. This is other new things Really great addition. &gt;&gt; Now I like that a &gt;&gt; We can also take a look Here's all the versions As we can come in here, we can also see we have this concept This is getting to that experience these images to really make which version they should be using. We can create channels and assign staging new versions of the image We might have latest whereas staging two behind and productions on a stable version until we're Another thing we can do from here, which is a big deal for security We can make sure, let's say found or maybe we just we're only going to maintain or only going to keep we can actually go in here sure it doesn't get used by &gt;&gt; Then the last thing This is where we Let's say we want to promote we can simply change the assigned time one of those data sources or on a downstream Terraform build it's going to get Version 6. &gt;&gt; Okay. &gt;&gt; Here's all that metadata both in our image gallery, as well as the underlying &gt;&gt; Awesome. If we pull an iteration or a channel and revert it do we then need to redeploy the next approved image if there's been a security &gt;&gt; Yeah. That's where your Terraform We have some integrations our Terraform Cloud running continuous validation which will once a day check that data source again basically and hey, there's a different you may need to redeploy. &gt;&gt; Awesome. &gt;&gt; So that we can &gt;&gt; Cool. We can keep everything up to date, you know what's going on, and if there is a security breach, which happens, we can redeploy and we're good to go. &gt;&gt; Absolutely. &gt;&gt; Awesome. &gt;&gt; So far it's actually Back in our code, we Obviously we saw it's now This is that extra step here that data into the Now, if we want to consume that, I've got a pretty simple little which is just going to spin that image that we just again, querying in skew the publisher out of Azure, we simply provide this data source. In this case I've variablized but this is basically we were able to generate This is going to give us our that bucket given the channel we Then down here in our Linux that data source lookup, the Cloud image ID is going to and that'll be our source We can go ahead and deploy that and use the yellow Over in Terraform clouds, we see now I've got a workspace It is now kicked off that plan As that runs, we'll see that it's Here, it just read that HCP that source ID and it's based on that original source. Here we can see in the resolved that image from HCP Packer. &gt;&gt; Awesome. &gt;&gt; Just to also take a quick All of these managed images and image versions in my are all maintained here, and these were all built by Packer. We can add tags. Some of these have ownership We can get all that metadata both in the Azure portal and in &gt;&gt; Now, that's great because end using the build time with Really smart. I like how especially when we've People always ask, how Do we use pull I think it depends on which but using build timestamps and date stamps are hands down That's really good. That's easy to find, easier to trace, and you know exactly what &gt;&gt; Exactly, and easy to sort too, I love sorting out things. &gt;&gt; Yes, if you use randomized names, it can be really tough especially using short codes. If you're deploying in or GitHub or something, but it is just so actually trying to do, Whereas this, you can I know I did this on this time &gt;&gt; Absolutely. &gt;&gt; Cool. Awesome. Dan, we've created base image, we've built all that, created a [inaudible], updated it, we've deployed it to Azure into &gt;&gt; We have all of that in That HCP Packer registry becomes that single source of truth I don't know if you noticed here, but we can also track, not only our Azure builds, but here I've got a Docker image, which I've published But I can also track so we can get the single what are the right versions to be using in the right environments, and also get that when we need it because &gt;&gt; We will, absolutely. a lot of our customers They're not just in Azure as they're going to be in I assume for AWS and UCP, we can also see those well for multi-Cloud scenarios. &gt;&gt; Yeah, that's right. In fact, inside one of these buckets, we could even have all of those It's a bunch of 20, no matter so you can actually have Then in the data source, you would switch that to be whichever one you need or Whether you're deploying on-prem we be managing VMware Packer's data, a wide for the different builders &gt;&gt; Cool. Well, Dan, thank you so, so much. For everyone out there watching. We're going to get some source It'll be in the show notes so you can reference it there, do all the cool stuff Dan did today, build yourself some images, get that traceability end to end. Dan, thank you so much for coming on to the us about the new HCP Packer Thanks for coming on and I hope &gt;&gt; Yeah, thanks so &gt;&gt; Thanks, Dan. [MUSIC]