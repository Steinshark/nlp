&gt;&gt; I am Bob Tabor with and I welcome you to this course the C-sharp Programming Language and Programming topics in general. Designed specifically for absolute Now, if you're already an experienced from another Software development then frankly, this series of lessons will move much You might be better served to find another resource to use One with you the experienced Microsoft Virtual Academy has many great courses designed for so I recommend that you However, if you are completely new to programming and you're new to the C-sharp programming building applications on then this perhaps is the Not only will you to learn the syntax of C-sharp, but I'm going to take through everything I'll explain what we're I want to explain the thought process behind it. I'm going to try to anticipate have anticipate the might run into as you're typing the code window or as you're working through some of the exercises I've literally taught maybe even millions of people That's no exaggeration. This includes children as old as eight years old from virtually They've all learned from and I know you can learn too. In fact, this is the sixth dating all the way back to 2005. And over the years, I've incorporated students feedback and suggestions I've incorporated those in an the very best effort that I can put forward to help you get Now I'll only make one real and that's that you already have some version in addition already installed on and you're ready to write your Now, if you don't already then please by all means, visit Visual Studio.com, where you'll learn about the many free and of Visual Studio that are available. What the differences are. Now, personally, I used Visual Studio one of the free versions of Visual Studio that are and I want to emphasize any additions and version of Now, there might be tiny between what you see on my screen and what you see on your screen as you work However, I'm not going any specific features so hopefully that won't prevent you from following There will be other courses on Microsoft Virtual Academy that will demonstrate the power all the features that Visual explain the differences between editions and versions But I won't be focusing I'm going to focus specifically on the basics of the C-sharp And what I will demonstrate which version or edition of Visual and that's great news, because as long as C-sharp exists, these lessons should still be valid and useful to So to get the most out of this course or any course you really should become an active learner and that First of all, you should closely and do what I call getting Actually writing the code you're writing it along with me. All right, there's no better actually write code yourself. It's like suggesting that the guitar without ever You'd think, Well, that's Typing in the code insights that merely so pause the video, re-watch portions of the I'm going to make the code and you're welcome to it, and you can use that to you write versus the code that But you really should be typing in your own local copy of Visual Also, don't rush If something doesn't make Rewind the video. that don't make complete Sometimes a second or third viewing, focusing more specifically around the screen and on the Being an active learner taking control of the so if I say something or do something that doesn't by all means find a second or a Maybe it's an article out or other videos on Channel nine but make sure you search out those resources that If you're interested in even of a C-sharp training course that covers a lot more complete with dozens of coding challenges and over 30 then please visit my own website. Devu.com Developer University You'll also find many other training designed specifically a professional C- sharp Furthermore, over this course and as I begin I might add some study resources and additional free content related to the topics in the course that you're That's another reason to be now like I said earlier, if I'm really excited for you. Learning to write one of my life's passions. It's extremely gratifying your imagination and to life and watch other people actually then use your applications. You're embarking on a really It's personally and professionally I know you can do this again. I've seen so many people start and they might even be writing code for a real applications that App Stores like the Windows Store. If you've ever gotten when trying to learn how to program, I promise you that if you put the effort and you work along we're going to build the you need to be well equipped to move on to more advanced tutorials learn how to build your Windows Applications, Windows Store Applications, Video Games and even run on iOS and Android Now, assuming again that addition to a Visual Studio already installed and then we're going to begin writing I hope you're excited This is so much fun. Let's go ahead and get started. We'll see you there. Thank you. &gt;&gt; Let's take a look at how using the custom option we'll use the Community 2015 in order to get it. Simply visit visualstudio.com and click on the ''Download Once we've clicked on the download, it'll download to our computer, and it's a Web installer, so we click on the &quot;Run&quot; the installation routine for Once we have the option it's time to start looking at customizing the Installation For the most part, the to create web and desktop But if you want to create different styles of more languages then the ''Custom Option'' is what you I always recommend selecting the Installation of to ensure that you're getting the need to create the applications By selecting ''Custom'' and we are now brought to the screen and we can select The first option is and if we click the we can see that we have Visual C++, Visual Fsharp and the Python additional programming will get Installed if Remember, by default, Visual Studio Community Install C-sharp in Also notice under Visual C++, we have options for the Microsoft Foundation windows XP support for C++. For my purposes, I'd my programming languages because I create projects using the different I'm going to select programming languages to install Also, under windows we can choose various things such as the SQL Server Data Tools, PowerShell Tools or Visual Studio, Silverlight Development, etc. Here's a very important component, if you want to develop we need to ensure that the emulators and the SDK. Now you can choose the &quot;Default&quot; and then come back and Install the and that will include the tools, the SDK and the Emulators for you. But it's so much easier to install these during the Installation Please note that it will increase the Install size of the application, so the toolset will be much larger. Again, depending on what you may want to select ''Universal Kit'' PowerShell Tool rather if you want to be using PowerShell tools within If you need backward and Windows Phone 8.0 And 8.1, you can select this option. Also, there are some common tools or Cross Platform Mobile These are important if applications using Xamarin is a cross platform to create applications for iOS devices and for android devices by using the All of these tools are available for the cross platform mobile It includes all of the Again remember, it will increase the size of the Install You might also notice that because I selected the cross platform we now have a little box inside the Windows 8.1 and Windows phone tools. If we expand that, we'll see that it has included tools and Windows SDK, and the reason it does that, is because there's a potential Windows phone 8.0 or The tools and SDKs will At the same time, the common tools checkbox includes a indicating that we have also and that is the Git for windows. We can install Git, which is your source control, GitHub extension for Visual Studio, so that you can integrate with and then an extensibility tools update three for You'll notice that by selecting set up can require up to 48 gigabytes across all of the drives that Again, review each of the items that you have all the necessary for your development tools of and then select the ''Next'' button. Once you do, you basically see equipment or selected features all of the different items and by clicking the license terms of all If you're not sure what those are, each one of the items that has license terms allows you to Once you're satisfied with it, click the ''Install'' button installing all of the components This is a quick overview, of how to perform a custom &gt;&gt; Hi, I'm Bob Tabor with For more of my training please visit me at devu.com. In this lesson, I want to build a I want you to follow along. It's a Hello World Application, meaning that we're merely Hello World to a Console Window, and the point of this exercise is just to show you I'm not going to attempt to even explain why we're doing The focus will be on, what I'm going to do next In other words, I want you to focus on the basic workflow that'll be the same for all the applications and pretty much every Application Things like how to Where do you type in How do you test your application to make sure that it's and what do you do whenever you How do you save your project? Things of that nature. For now, just try to follow along. Don't worry if something doesn't make a lot of sense at this point, that's really what the rest In the next few lessons. After this one, we're this tiny little and I'm going to explain at did and then what does the code mean and why it's Just a quick reminder, like I the introduction of this course, I'm going to assume that you additional Visual Studio even if your Visual Studio than mine does on camera here. Don't be overly The basics are the same, no matter what, I promise. Let's go and get started here. To begin, we're going to There are a number of but I'm going to keep it simple ''Project'' and selecting will open up the new project dialog. Now, chances are, the number of items in the center part different than the items that in addition, a Visual Studio However, you should be able to select ''Templates'' and and one of the options should I want you to select that, and then we're going to rename Now notice I use a little where I use a capital H in Hello, and a capital W in world, and I don't use a space Now that's just the naming with to help me identify Something I recommend Shouldn't have to make any I'm going to go ahead and and Visual Studio will the starting point of a Console and so now you should in this text area, a file opened called program here that is already generated We're going to ignore most of that, except we're going to find this One of the first things do when you're learning is tell the difference curly braces, square brackets, angle brackets and I don't But here we want the curly braces look like little These are important, and I two that opening and closing curly brace and make This is where we're It's approximately Line 13 and 14, at least in my copy Then I'm going to type type in Console and you may notice now this little window pops You can safely ignore that for now. Eventually, this becomes But for now, it might be distracting ignore it and type in everything by hand to the best of your ability. Console, and then I want to use I'm going to call it the dot. Console dot, and then capital Next, I'm going to use an so that's not a curly brace. These are just the characters you'd use for a smiley Then inside of there and use the arrow keys on my keyboard I'm going to go inside of the and I'm going to use so it should look like that. Make sure you don't use single That's not what we want. We want double quotation and inside of there, the words Hello and World. Make sure that you have an open the words Hello World, then another double quote a closing parenthesis, and then at the very I'm going to use a semicolon It's not a colon and It looks like that. Then I'm going to the keyboard to go to the next line, I'm going to type opening and closing parentheses. Now you may have noticed the opening parentheses will automatically type You don't let that throw, to type through that, but make sure that I've typed into my code window Make sure that the Make sure that you're for the little mark that Make sure you're using parentheses and not some other type of bracket, or brace, and then make sure that both lines of code The next thing that I want and there are a number do this in Visual Studio. Again, I keep it simple Then the next thing see my application actually running. To do that, I can either find this little green triangle that has the word Start next to that by default in my little I can go to Debug and Either way should work. I'm going to go ahead and you'll notice that Visual Studio changes its Now, off to the side of my screen, the console window popped Hello World with a I'm just going to hit the Enter the console window the Visual Studio resets However, maybe your Maybe you saw an error message, so what I want to do is some common errors that C-Sharp might run into and how a good opportunity to learn C-Sharp as we make mistakes. I'm going to pause the and then we'll talk about it, pause it, and so on. When you attempted to you may have seen a little dialogue pop up from &quot;There were build errors. Would you like to continue and Always select no for that. What you'll see next Now, in some cases, the error messages will and they'll make a lot of sense. Sometimes they won't. Like the verbiage might be something we're just Invalid token and class structure Typically what you can just do is double click on these your mouse cursor on the Notice that Visual another visual way to tell that Gives you these little Sometimes you see a They're a little bit this is an area of the code that something you need to fix. Now, in this particular case, the problem is that we between the innermost curly braces and so regards to defining a code block Different C-Sharp commands belong in different kinds of code blocks, and I'm going to spend this course talking about code blocks and what belongs But to remedy this issue, what you need to do and just drag and or you can use the Shift the arrow keys to highlight then move up in between curly brace and paste Control and then it should run That teaches us the first It matters where we type our code. Or when you try to run the the same build error dialogue, except you see the message, Hopefully, this is an If you double click on that it should take you to of code where you forgot That's the second thing about Is that just like a properly formed to end with a period or a question a properly formed instruction in C-Sharp has to end with a semicolon, or maybe the error that you saw something expected, the name Hello doesn't exist in The name World doesn't exist If you were to double click these, you'll get to the vicinity of the there's red squiggly lines and World in between Now, remember, we needed to use double quotation marks around Hello World and so that we want to literally or present in some way, we need to surround them with want to use this string To do that, we use double-quotes. Or perhaps you see the &quot;The name console does not You look at the word and you say, well, looks spelled correctly. Remember that I told you you had to type exactly what I was typing meaning that a lower case mean that you're typing two C-Sharp and that is tricky because many of us are not used to that degree of precision But when communicating you have to be precise. In this case, all we the capitalization of the word Perhaps you see something contain a definition for either and again, you're thinking it's spelled correctly. Well, what could the problem be? Here again, capitalization r read line is different and l read line is Again, things have to be the correct capitalization correctly by the C-sharp compiler. We'll talk about compilation Now, if you're not good at spelling and you're capitalization and you're just you would type a letter or an e-mail message or fortunately Visual There are tools that only write your code more quickly, but also more accurately. If you utilize those tools, the chances that you these really simple syntax will almost be We'll talk about some of those All right, but assuming that you got all of this you're really well on your you've already crossed over As you undoubtedly writing C-sharp code is Again fortunately, the Visual Studio IDE will help you out a lot when it comes to that. It will give you clues and the words that they use to explain the issue might not Yet with experience, it will be. But generally, it'll point you into the right direction and with the red squiggly you can typically figure Now throughout this course if simply can't figure out what Compare character by character, take your time until you develop a vision for the problems where your eye will jump Compare what you wrote I'll supply the source code to you. Open it up in a second copy of Visual Studio and then just What did I do different That will usually help you figure things out if you can't In the following the lessons, we're going to focus on two things. First of all, we're why we did what we did on behind the scenes that turned our code into all be it a small application. What happens whenever we What happens whenever we What happens whenever we choose Then secondly, we're the syntax of the C-sharp and we'll learn more syntax rules and more keywords as we go along. If precision is so very then you're going to need to have some explanation as to what symbols actually mean guide you as you're It's really easy once you get a Being completely honest, many people learn how to It's a fairly easy you can do this. Just you got to put a a little bit of effort We'll begin that process Will see you there, thanks. Hi, I'm Bob Tabor with For more of my training please visit me at devu.com. Now in this lesson, we want dissecting that little application that we wrote in the Now previously, I wanted you What we did and how we did it. But now what I want to do is It's really crucial at some really important ideas in your mind because they're the foundation for What I want to do is start on I'll start by talking about When you learn how to write really any programming language, learning the syntax of C-sharp the nouns and the verbs the programming language is The other half of the battle pre-built functionality to the code that you write. Now in our case, Microsoft has created something which sounds spooky and mysterious, but it's really not that bad. It's actually pretty large, but we're only going to focus on two specific portions The first part that I something called the class library, which is simply just the Microsoft wrote to take care as software developers, we don't have to worry about them. There's library code to help with many common things that many things like working with math, or working with strings and text, and working with dates, manipulating dates and times, maybe displaying things or transmitting information A lot of that foundational for us to write and is utilized That's really the first part. It's taking advantage the class library of The second part of the.NET It's also known as the you'll see it called Really, it's just this that wraps around your application. Your application lives inside of it. It runs inside of that protective takes care of a lot of the low the software developer, on what your application not worry so much about how it's actually accomplishing You don't have to worry about interacting with it, and interacting with memory, and interacting with the Many of those things are You don't have to worry about them. Furthermore, the seal provides a layer of protection the malicious evil you can't do something really bad to somebody's computer without them at least giving you permission So without their knowledge you're not going to their entire hard For right now, it's library that I really want to focus whether you realize it or not, whenever we were writing For example in line 13 or you see Console.WriteLine and close parentheses, and so on. We were using code in the framework class to display text into All we got to do is say hey, use this text, stick it in a window. We don't really care we just care that it did it. The next line of code, It was also really important. We're telling the input from the end user before Again, here we're Framework class library that You recall that I use the and then the application It exited and we were back So in both of those lines of code, we were utilizing methods that Microsoft to handle that retrieving data from the end user. What were to happen if we were to Here to comment out of line of code, I use two forward it's over the question mark. Commenting our code want those instructions Now, I could have just deleted but I might want it later. Maybe I don't want to I just don't want to I also might use code some notes to remind about the application in the future. We'll talk about code But if we were to run the It ran and it's already done. What happened? Well, you may have seen a flicker on screen for a fraction of a second. The reason was because, hey, it executed this one line of code and it said looks and it exits out of the application. By adding the read line, we're now stopping execution, waiting for the end user to do Hopefully that makes sense. All right, so next let's talk about the position of the I made sure to emphasize that you have to write the code and the correct place was in between the opening and closing curly curly braces as defined by the level of indentation that If you don't add the code there, we saw what the The application, It'll give you a runtime error. The correct place for that code in between that opening and closing curly brace that you see on screen. Now as you can see, there are several and so it's important that I need to oversimplify things here. We will come back and fill in But essentially, you closing set of curly braces and Code blocks typically have In this particular case, we have a first code block and This particular code block and this particular is the very first whenever your I don't want you to worry about these other words static and void and even the string we'll talk about those later on. But this entire code block here, as well as the line above it, they define something A method is simply a block Now, later on, you're that a method is so But I want to use that as a working definition as The method has a name, you can call a name and We'll talk about methods again a This main method lives inside and that set of curly The name is program, it's a class called program. You can think of a class as simply a container for all of the You can keep the methods that are related to each other Now what do I mean by Well, that's really for decide as you get deeper you're going to come to understand the thought process behind But that's a little Just trust me on that. Now I said that a class was merely It is so much more than that. Again, I'm way over simplifying this as we're But the main takeaway for right curly brace containers and you have some blocks of code that reside To emphasize that again, here we have another and this set of curly In fact, it's a namespace which happens to be the name of Again, key things a namespace is just another At some point it becomes but let's keep it simple for now. Let's take a look at these lines of code and illustrate these ideas about classes that contain methods. Here what we're doing whenever we're actually making a call into the dotNet Framework class library. Remember, it's that library of We're saying in that entire there's a chapter inside of that In this case, we're saying, that book is the console I want you to look at the that has the definition Hopefully, that but we're looking inside of and we're going to call a particular By using its name, we can execute all the code that was written Same with the method that we're Notice that there use between the name of the and we use that. It's called a member access a member of the now that we know what the book is, we can find out what chapter Hopefully, that Now, notice also that the WriteLine method and that they both have Now, in the case of we're actually sticking something in between the opening and whereas in the ReadLine But essentially, those not only do we want to reference that particular class method name, but the parentheses mean I want execute it, do it now, so that's the purpose Now we can say, do it now and pass in information. Do it now with this stuff, We're passing in an argument to we want you to do it right to screen and here's what It's an input parameter to Now don't worry, we're the notion of methods in the future, as well as passing values as we passed in the literal string HelloWorld into our method here. Just know that whenever you see parentheses after a you should be thinking called right now as we step Next up, let's talk We've already explained but just to emphasize it. Notice that almost everything, even these statements at the with the exception or whenever a class, or a method. We said at the time that the the period or exclamation mark or question mark at the end It completes a thought in C-Sharp. Now, some programming for example, they don't They only allow one complete However, with C-Sharp, you could do this, what I'm about to do watch. Now I have both of those lines If we run the application will The way that you separate or indicate that you have two is through the use of a semicolon. Furthermore, we could put lines of code on separate lines like this. Now, it wouldn't make sense in this case because the it actually makes it But sometimes when you have you'll see me split that line and still the application Now, in other programming languages, you wouldn't have that behavior. Because really whitespace in line feeds and things they don't matter to C-Sharp. The only thing that indicate a complete thought is a Let me go ahead and The other thing that I want to noticed is the level of indentation that you get Now that's completely optional, and Visual Studio nudges But essentially, even if you were the tab key several Console.WriteLine, Notice that Visual Studio Why do you suppose it did that? Well, many people believe that indentation helps the readability can see what code container where code resides inside of the other curly braces Along those same lines for readability many different colors text inside of this You have these royal blue colors, and these are my default colors. Yours might look a little bit I think you have some You have aqua color here. This is a dark red. You have some light All of those are used to help you I guess you can say inside We'll talk more about about the syntax of C-Sharp Now that we've talked we wrote and its position and formatting and whitespace what I want to do is stop right now for this video and in the next one, I want to talk about The file that we how that relates to projects What happened when we What happened when we We'll do that in the We'll see you there. Thanks. Hi, I'm Bob Tabor with For more my training please visit me at EW.com. Next, we're going to talk organized into projects Then where you can actually find these projects and solutions Whenever we created a the program does see a file was opened for us automatically in That's one of the things for us whenever we choose File, New Project and we see the new project dialog and we They provide a great starting point for the type of application It includes files with important settings and might need whenever we're building As you can see, we're working the main area and there's Again, this is an intended to be but it's important to the code files that are contained inside of those tabs. If you take a look over here is the solution It has a tree like that are contained Now again, as I said at this isn't intended to provide a There are other resources on Microsoft Virtual Academy that to using Visual Studio in the various Windows and but the solution the most important part of Visual where you'll usually see the text editor and Simply put, the solution explorer is our main navigational device to the other files and settings You can see here that there Now, if I were to close the program, that see us tab in the main area, I can always get back to by double clicking it inside You can see it's open once again. The files and important settings are organized into a concept so you can see here this word &quot;Hello You can see there's a little letting us know that this is a Projects get compiled into which we'll talk about later. Furthermore, one or more projects and you can see in the we have one solution here at the very top solution also named HelloWorld that Now, in many cases, as you're getting started, you're only going to have one But as you come to build more it's highly likely that manage multiple projects Now again, the reason might but as you continue to learn more complex applications for this becomes a crucial But just for now, accept the fact that there's and one solution can contain the projects will contain then all of the code files like that will be used to create Trust me, these concepts important after we Now, the big question at where are all these projects and solutions and files actually I mean, can we see them? We can see them in the Where are they actually Well, when we created this we merely provided the name of Then I said, go ahead and By default, Visual Studio will put your projects into If you take a look here and we it will put your projects into whatever version of Visual so you can say I have side by We're using 2015 for this series, but it could be a future You'll look in that for your version of Visual Studio. As we drill in, there will be a projects drill and you can when we created a new project, it put it here in our whatever version slash As I add more projects, this obviously will be filled up with folder names It's important to note that you don't have to create it and put it right here. You To keep things organized, you're typically going to Now, furthermore, you can actually open up a project that saved anywhere For example, in this course, I'll supply the projects. After I record the video, I'll zip them up and download them and then open them up on your own hard drive and then walk through them and to Just to demonstrate how you do this, I have this project zipped up What I'm going to do is this and select Extract all, and then in the extract I'm just going to put C;/Example, and then Now you can see that on my local hard drive I Inside of that folder there is another folder with a I'll talk about that But I can either double click the the solution inside a Or I could go to &quot;File&quot;, &quot;Open&quot;, &quot;Project/Solution&quot;, and then navigate to that directory using the open Unfortunately, it's a little bit too large for the recording area, but then I would just simply select open from this dialogue and Let's go ahead and close that, and let's shut down this I want to get back to where ago in our Documents, Visual Studio, in my case Visual Here are a list of all the Just want to walk our This first folder here will There's this.sln file, which is a solution file that contains that are under this We could actually open this up and it's simply just There's nothing all You certainly don't want but it's going to have the locations for that are associated any global settings and some of these things won't really be deeper into our understanding of compilation and But inside of the solution folder, is a second folder which is actually going to contain Here we have a HelloWorld.csproj, which is the C-sharp project file. Let's open that up as It'll contain references all the files that are any of the settings and Again, information in here that you certainly you don't want to accidentally But I just wanted to that there's really There's just these contain information As you make settings those will be saved inside Then finally, there's The &quot;Word&quot; bin typically which denotes that this is where a binary version of your The process of compilation which is human readable, and it's going to that is machine readable, or understood by a If we were to take a look we would see that there This folders created for us whenever we started debugging it creates a temporary version of our application for which we'll talk about later. If we drill into that is actually an executable file and several other helper files We'll talk about these later. If I were to double click it actually executes Compiling your code into a working But I don't want to talk about compilation just too much a debug version versus your dotnet assembly I think you're going to for those ideas, after we get past some What I want to do is stop our conversation about We'll come back to that But you're doing great. Let's continue on. We'll start learning more of these tangential I'll see in the next lesson. Thanks. Hey. I'm Bob Tabor For more my videos for beginners, please visit me at Devu.com. Now in this lesson, I talking about C-sharp the syntax. We're going to talk about how to choose the right data type, for your new variable and then also how to initialize To begin, let's take If you've ever taken hopefully you've seen where you're asked to and hopefully without you're able to see that x equals 7. Using that same thought process, take a look at this little x equals 7, y equals x plus 3. Then we're going to do a the value of y. Hopefully using your existing knowledge of algebra and you then it's going to output the value of 10 to a Exactly. So my point first of all, is human readable. It's got a few things little formed like the semicolon However, for the most part, I'm willing to bet that as we go you'll be able to understand what the code is doing Even before I explain it to you. It's really not that hard. Then secondly, it's probably very similar to the past like working with math and algebra and If we're looking at the x and the y in this context, are referred to as variables. A variable is simply I guess you could call it in put things in buckets and you We can put values into a given and we can retrieve the We can even replace what's in the That is what you use a variable for. This particular situation these buckets are just However, we could just the right size for almost whether it be individual or strings of character, strings of alphanumeric even entire sentences and We can also create buckets that are just the right buckets that are just the really, really massive numbers, or even create buckets that for numbers that have a lot of Now, in this case, what we would expect to see the bucket that's labeled x and would hold numeric values. Because we want to add We know that. But how do we express The instructions that were ultimately after they will ultimately be executed by the dotnet runtime that we learned In part its responsibilities are for our variables in memory to Here we have two data items, are x and y, and we have to tell the allocate some space in memory to hold numeric data, like the type of data that we want to work with here But how do we do that? Well, that's the To get started, what we want Here again, I'm going to go to file, new project. We will go to the new project select the Console Here we're going to this project variables and Visual Studio goes to work, uses that template and creates and as you can see on back in our familiar program.cs. Obviously we want to work in between the opening and the closing curly brace just like we learned about in our Before we get started, there's one big takeaway is that a variable in memory that you can put data of but we have to tell the compiler, we have to tell the.Net runtime what size of buckets We have to declare our variables, we have to create those some label that we can refer to Now, before we get started all the same rules apply in this You have to type the code Take the time, develop the skill of identifying different in or the various special that we use while Develop that skill to identify write on screen and what you're writing in your copy If you see a little you already know that there's That gives you the clue focus either on that that vicinity and use your detective skills to figure Now let's go ahead and we're two variables and define them in such a way that they're We'll start with int x and Here to borrow the explanation we are asking the.Net our computer's memory enough to hold numeric values. Now, we're asking it to create these two buckets and eventually into them and read values out just declaring their here's what we need to work with. Then after we've declared that, after we create them in this manner, then we can begin to work retrieve values from them. But most importantly here I'm assign integer values An integer is really that refers to a whole number No values after the decimal point and as far as C-sharp is concerned, the values have to be between 147 million and a positive That's the size of the bucket If you need to work with in data type is not the there are other data types to choose from and we'll learn about some If we need to work where you have dollars and then the integer is not the Let's continue in our basically just to continue what we did in Notepad a few moments ago. X equals seven, y equals x plus 3, and then we want to do a console.write Then remember we want to do a console that read see it on screen without it just flashing Let's run the application we get the value that Hopefully you got the value 10 in your copy of Visual Studio If not, again, make sure you double After we declared the then in lines 16 and 17 I'm doing assignment using the equals sign. Now, in this case we don't we call it the assignment operator. We'll learn about operators in This particular operator, the equal sign means take whatever and assign that into whatever We're going to say give me the value of seven and assign a bucket named x. The same thing would we're assigning a value into the bucket named y but we have to We have to actually retrieve Where's that bucket again? Oh, there's the bucket, dumped the value in the bucket out, you're holding the value seven. Add that to three and then we Now, here we're retrieving give me the bucket with out into the console.write then we'll print that essentially assignment and This is a very simple case. What I want to do now is If I were to begin commenting out the code like we learned I could use the two forward slashes. I'm going to show you in just a moment but notice when I do that, something I commented out the declaration When I do that, notice these little red squiggly lines underneath x's and if I it says the name x doesn't We might say, well, It's in our code comment, but remember we're telling the the C-sharp the .Net runtime to The compiler is looking I have no idea what you're talking about X. I've never I don't know what you and so it raises the I can't continue on you have to give me Obviously we can fix it by Now, what I want to several lines of code doing two forward slashes in front of every line I'm going to comment the same time using a star character your keyboard to begin Then right here before actually let's go ahead After that I'm going to Now we're going to type another This will be a little bit more Pause the video if you I'm going to try and type Before I forget, let's Now let's begin here at the top. You can see that this is a some different commands or different uses of commands We're just going to game and we're going to ask, what is your name, and we Now notice in the first case, I'm using a right line, which will print what and then use a line feed However, I'm using yet a third the console class, which we'll talk about classes But this method is This will just write out the whatever's in between and it won't go to the next line. It'll just wait there on that line. Then what we're going a new variable using a a string data type. We're not interested in individual so a-z, 1-0, and the special characters. We're interested in a string of them or a collection So not just the the individual character O, and the individual character B, we're interested in them as a string That's what we're declaring a sufficiently large enough to however long that it is. Then what I'm doing is calling our Console.ReadLine method that But there's a twist on this. Up to this point, the ReadLine method in order the application to wait the &quot;Enter&quot; key in their However, now we're using which is to retrieve In this case, we're asking the The user types it in and then whatever they using the Assignment operator to the variable we created Hopefully, that makes sense. Now we're going to of type string called my last name. We're going to do the same and then we're going to allow the user to type in their last name, and then whatever they type in their keyboard will be saved or assigned to the variable Now that we've done assignment to I'm merely going to concatenate Let me point something out. There are several things we Notice here we were doing actual math where we were This is the arithmetic We're basically adding We're kind of adding but that connotation is different. We're not adding Hello and Bob and Tabor with From a mathematical perspective, we're concatenating strings of characters together to make It's the same operator, but it's used in two Kind of does the same thing, but we need to understand that there's a fundamental operators interact with You'll see why this is important as we continue on through this course. But at the very end here Hello, Bob, notice that I have in here a additional double quote with a space in between to give some space in between the and then obviously, We'll get that one more line of to do another read line so we Let's run the some things we want What is your name? Type type your last name, Tabor, Enter. Hello, Bob Tabor. Awesome, so very simple application, but hopefully, now we're pushing learning a little bit more about additional data types our variables and learning about assignment that it works and then also learning differently with Now, before we get too far, in the previous example, we used merely X and Y, which we might expect to see in some mathematical used to seeing those characters But whenever we start writing we need to give our are meaningful inside of the I could have just called this x and then done something like this x and then done and you'd look at I have no idea what It's because we used a very vague description of the Instead, you don't keystrokes, make it human-readable. Write your code in such a way that somebody can read through exactly what the variables are doing and what the logic of the Then also notice as I these things back here I used a little feature of Visual now that I have changed the let me rename it everywhere Did you notice I did that? I hit the &quot;Control&quot; and the Let's do that one more time. I'm going to change this back to x. Notice that I get a here off to the left-hand side, which is Quick actions, and then I hit &quot;Control&quot; Now it gives me the option x and it even off to shows me all of these changes. This is called a refactoring. I'm changing the code just ever so slightly by renaming things In this case, I'm doing but we'll come back to that. Do I want to rename every my first name to x? Yes, so let's rename Let's rename it one more time. So myFirstName, Control, period, and now I want to rename everything from You might look at that phrase, myFirstName, and then again, I used it down here, myLastName, and you're thinking yourself, that's a crazy naming convention. Well, it's a naming convention where you start with the first that you're munching together to describe a variable or Use a lowercase for the first word and then the second and subsequent Ideally, it makes it human readable. I can read it fairly At this point, I think to do something like this. I'm going to rename this to Remember what we said that C# is a case So if you were to use the then you're going to get a says my first name does not Do you remember seeing that just the declaration for x up here The same thing is true here. Myfirstname, all lowercase is defined called my F Capitalization matters. Make sure that you remember that. In this case, let's just go ahead and change everything and we should be good to go again. Great. Now you might be this degree of precision How am I going to remember exactly what I named There are a couple of Keeping your code and methods small, and we'll talk about that later, that's one way to do it. But then the other thing is which is that little code window It's actually pretty important. As I start typing my, notice that it pops up the correct capitalization, correct spelling for any defined up to this point that Now, at this point, what I can do is simply my keyboard and it will type So I don't have to I don't have to worry You may have noticed I was typing and then using and then you couldn't really but I wasn't typing This is what allows software developers to Once you get used to one of the tools that Visual Studio gives you in the text editor to make your typing more accurate type much faster than We'll come back to The other thing that I here or talk about is that we cannot define the same variable I'm going to go and view want another bucket in the computer's myFirstName, and the compiler We've already got a bucket. We're going to confuse give two buckets the same name. it says a local variable is already defined in this Now we could do this, but I highly recommend you again, myfirstname all lowercase is different than my first But this would cause a so never do that. Be descriptive with don't repeat variable names, always stick to a naming convention, and never break that rule. If you follow those little rules, I think you'll find some of these initial issues you won't have to worry about them. What I want to do now is take a Then not only are we in line but then in line number 31, we're actually giving it a value. What if we were to rewrite I'll go ahead and and I'm going to make this smaller. In fact, here's one we'll do, string myLastName equals and then I will say above &quot;Type your last name.&quot; You can see that I took 29 and 31 and I What I'm doing here is not but then I'm initializing we retrieve when we call Read Line. This is called initialization, and initialization is to give your variables a This puts your variable into which will be an important idea as we learn to write But also experienced developers and they're always looking reduce the number of have to type and reduce the amount Usually you want to declare them and not declare them like some people used put them all at the very top of a given method or You should get into the declaring your variables as you need them in the body of your code, and then secondly, if you can, give them an initialized value immediately after you declare them, like we've done here Tell you what, let's I think we've covered a lot Let's do a quick recap over a dozen things We talked about what a variable is. We talked about how to how to choose the correct data type. We talked about the int data We talked about variables and then retrieving We talked about the We looked at the arithmetic operator and also the string which is both just the plus sign. We looked at Console.Write We looked at the other life method that we can actually retrieve the values We talked about camel casing and naming conventions We looked at IntelliSense. We talked about how how to refactor our code using Remember the little could make changes to by hitting &quot;Control&quot; and and then using our arrow keys to all uses of our variable name We probably talked about a but that's going to we'll start again in the next Thanks. Hi, I'm Bob Tabor For more my training please visit me at devu.com. In this lesson, things a little bit more interesting. Based on user input, we're going to write either one block of code When I use the term logic, I mean that we're going execute some code based on some condition that could be the user's input maybe the state of the maybe some of the data that we have but somehow we're going to make out and execute this code Let's begin the way that we normally do by creating and I'm going to go to Make sure to choose a and we'll call this project What I want to do is we're and we're going to do it right I'm going to go ahead You can pause. Try Hopefully, most of Let's go ahead and and here we're going to play Bob's big giveaway and What's behind door I'm going to choose what's and I said, hey, you won a new car. Awesome. Let's play again, I'd like to win something else. Now we can type in well, nothing really happens at all. I'm going to hit &quot;Enter&quot; again on a keyboard and the We can try the same thing for three, but I suspect the same thing and I can just type again nothing really happens here. But let's start at about this if statement which is really the purpose of The if statement is called the we will decide whether to execute any of the code inside of this inner code block based on this evaluation that we're going In this case, what we're doing is evaluating whatever the user typed in and we're gathering that from the Console.ReadLine like we The user typed something We got that now and the We want to perform an evaluation typed in is equal to this Here's where hopefully, I want you can see that I'm using two We already learned previously that a single equal sign is actually We're assigning the value of and in this case in the the variable user value using But whenever you use to equal you're going to do an Whatever's inside of this we're going to perform Is user value in fact equal to the number one or rather or is it not equal to the It can only be true or false. Based on that, if whatever the if it turns out to be true, then and only then will we in the code block immediately If that's not true, if this turns out to then we'll just ignore whatever is inside of this code the execution of our application That's how it works. But I tell you what, this is a very interesting example have we have no prize Then what happens if somebody six or SDF or whatever We need to account for all of those Let me continue typing and you can again pause the video But we'll start by using right below our code block for Let's stop right and you can see that in order to I can use the else if statements. In fact, I have two of them here. If this first then we'll continue on and do a second and a third and how many other evaluations However, if this is true, then will no longer run. Any of these additional on to line number 33, If this is not true, then we're going to evaluate If this is true and we execute the code inside of the code then we'll just go ahead else if statement and continue If we were to run the application, let's go ahead and just quickly Hey, we want a boat which obviously would but then we still haven't we type in four or anything else, like the word or just random Nothing really happens What we really need is what I To do that, we'll just below that at the very end of and so here what we'll do is just that string we didn't understand, and then Now, we're catching every no matter what the user types in. Let's go ahead and Again, I'll just type in Hit &quot;Enter&quot; and says, sorry, we didn't understand, That's how and if It also has these optional if and the else statements for either additional evaluations or what I call the catch all just in case none of the Now, there's a couple and we're going to continue on decision operator that we can But before we do that, here's an opportunity Let's look for areas where we've essentially got the same code repeated over and and I can see a couple of of The first would be where we have You see, we've repeated 25, 30 and 35. Wouldn't be great to smaller and only use that once at the very end Like, put it right there if else, decision statements. Let's go ahead and just remove But when we do that, notice that I'm getting a red squiggly line The name message doesn't We're going to talk about scope and declaring variables inside of but just to lead up Essentially, when we defined a it's not available In other words, if we define a inside of the curly braces, it's only available inside of those curly braces not available What we'll have to do is define our if statements so that it's accessible to all of as well as our Console.Writeline(message) It's a very simple fix. String message equals and then we'll just set it to an Now, you'll see a different But we've seen this before. You can't define the even if it's in an inner scope. What we'll do is just say, instead of defining the we'll just set our existing string variable called message Great. Now, our we've eliminated a lot of code, and admittedly, I created I wrote more code than I needed to, but I wanted to Again, if we were to It works correctly. But there's one other Code blocks as we're if else, if and else statements. If there's not more than one then we don't even need In other words, since of code here underneath I can just remove it and make it Same is true here, and Now, in this case, maybe just to illustrate need the opening if I were to do this message you lose like so, and I'll even add a little space Let's go ahead and test that and I'll type anything in there sorry, we didn't Notice that we were able to I did it on two separate lines But if I were to attempt to remove the opening and closing we're going to get a when we run our applications. For example, if I hit &quot;3&quot;, notice that you want a Why did that happen? You want a new cut, but you lose. Well, there is no such thing it's because what it's really seeing is this like that. If we want these two to be evaluated together inside the same code block, we have to include them Otherwise, this being outside of that code block will execute if or else if conditions are true. Let's go ahead and put that back In fact, if we were to I can even make this Let's comment that out, and I'm which is just this. Now, instead of going message equals message plus you lose, give me whatever's in concatenate on the word you lose, and then assign that into That's what I did here. I just do it all in one step right whatever's in the the end of that This is the assignment and concatenation operator Just a little shortcut there. Now let's do this. Let's talk about another It's actually an operator called This works well if you have you don't have multiple items I'm going to copy some code from I'll just copy all of those, and we're going to paste them Then what I'm going to do is this. Will do this a little There we go. Now I've written a I'm going to show you how to Here, the key to this is this little evaluation that Remember that we're anything in between the parentheses. Whenever we see the that means we're Is the user value that they typed in and submitted through line number 40, is that equal If this equates to true, then what we want to do is, everything after the question mark, we're going to take that value and assign it to our new If the user types in one, will find the literal string boat and will assign it to However, if this equates to false, so they type in something different, then anything after taken and assigned to and we'll use that below. Let's go ahead and run the We can choose the door and if they choose door number However, if we run the application a second time and we then you'll only win Again, this is only useful in a if, else condition, not when you have multiple Now, let's address here because I can shorten Notice, in order to get it I only use Console.Write, then I typed out the literal string, and then I have a second then printing out the actual Then finally, to add I'm having to do yet another Console.Write statement I can shorten all that Watch how I do this. In fact, let's go ahead. I'll comment out these lines Then I'm going to use a replacement Console.Write line in order to We'll use the WriteLine instead, and we'll fill you one a what I call a replacement Then after I give it that a comma and then give it the actual Whatever's inside of this, I want it replaced in here. Eliminate the curly braces with the zero and put the message Let's run the application again I'm gong to type number 1 Now, what if we wanted to Let me comment that out. What if I wanted to replace two values inside of that Let's do something like this. You entered and then we'll go 0. Therefore, you won a. In this case, after the comma, I'm going to enter the user make sure you can see that. Hopefully, you can see that I need to do one little thing here, is change that to a 1. This says, take the first item. In software development, typically you don't you start with the We're going to see this The first item in the list The second item in the list will The very first item, this will be matched and in that comment a limited after the literal string that little template that Then here we're going to do a second replacement and replace that with whatever is when we run the application. We type in number 1. It said you entered 1; therefore, you won a boat. Awesome. That's enough Hopefully, you've important things in this lesson. First of all, we talked about as well as the else-if and the else, and how to do a comparison and evaluation between two values to If we're using an if statement then the code that is it will get executed if If it's not, it'll a second subsequent do a catch-all in We talked about using curly braces for a code block We talked about keeping your We talked about declaring variables inside of and outer scope as defined by our We talked about the being able to all in one line and if it's true, assign one value versus a different We talked about format codes inside of literal strings for replace those replacement codes we then also pass in our Console.Writeline statement like you see here at the very Again, we covered a lot of ground. Hopefully, this all rewatch the video, just watch those portions that Make sure you're typing that you can come to some of these We'll pick it up in the Thanks. Hi, I'm Bob Tabor For more of my training please visit me at devu.com. In this lesson, I want to spend some smaller syntax elements you need to master to understand how a properly form line of In one of the previous lessons, almost like the first lesson, I said something to the effect question mark or exclamation a sentence in English you also use a semicolon code and C# to denote To extend that analogy a little bit, I may have briefly referred to C# syntax as having nouns and verbs. So I want to elaborate on these things and clarify what I'm going to talk about and I guess you could say, parsing the parts of speech in C#. Let's start off at the beginning. Statements are what you call Typically, one line of code. A statement is made up of expressions are made up of one so we've seen a number of statements and expressions and whether you realized it or not. As we're taking a look at some of the previous work I've got the variables project For example, you can see that essentially each line Each of them are made up of Here, for example, is an example expression. This happens to be a variable declaration statement which in this case is a keyword and then an operand, in this case, a variable name. We also use another operator, the semicolon for the Another example would an assignment where we're Here is an operand. It is the name of a class, and we're using the Remember, these are operators. This is the method Then we're using another operator to assign the value of this the name of the variable We were to look through the code, we could continue to parse out and understand what makes up operands, operators, expressions, and Now, operands are similar to nouns. They are things like objects and classes and variables These are the subject, I guess you could say, of They're pretty easy typically you give them names, you define the values Now operators are similar to verbs. They are things like the addition operator or the These are things that act on the operands in order Typically, you're going to although you could create A little bit of an advanced topic, but there are actually quite a few built-in operators and you're going to need That's how you come to Fortunately, as you start out, you probably only need to know What I want to do in this lesson is to focus on a few that I probably 90 percent of the time obviously add to that I'm going to actually present I created a very You can open this up, download it from wherever you're this video or wherever you I called this project and the application itself does absolutely nothing All it really does is the various operators that you'll come across At the very outset here have a variable declaration. I did something a little time where I've declared several variables all So x, y, a, and b are all defined as integers. Just wanted to show you something By separating them with commas, it's an easy way to declare several all on one line of code. I typically don't recommend this, but you might see this around in Next up, assignment operator. We've already seen the equal Note here in line number 22 are actually many different We're only looking at but there are also some But here we have addition, subtraction, multiplication, As I demonstrate here, you can use parentheses to actually change the In this particular situation, the parenthesis is not a It's actually how use it in an algebraic You would use it in order to So perform this expression first, then this expression, and then take the result of together in that third expression and then assign them Then there are operators We've already talked about where we're using two equal sign that these two items Here, again, we're yet a different capacity of our expression that will X equals Y is either true or false. We can use greater than we can We can use greater than or All of these, again, should produce a true There are also two can be used to expand or and they can be combined as I say here in the comments, so I could ensure that both and A is greater than B is true by There's also an or operator to say either X has to A has to be greater than B in order for this outermost So here is the logical or two pipe Then I guess we've that in-line conditional we have some item Then if it's true, then we'll take the first then we'll take the second value. In this case, we're boat into this message Then also wanted to talk about member access and We're going to talk about quite a bit later on in but we've already said a class and classes are containers, for lack of a more robust The way that you access a member is by using the dot or the period that is the member Furthermore, we talked about the Here we are, invoking a by using the opening and In this particular case, we're passing in an input parameter. Again, we want to hold input parameters and But as you can see, here's a number of and these are just what I would You need to memorize these the most basic of C# commands and understand exactly what it is that It's not an exhaustive list by but you will probably 95 percent of the time. Then you can expand other operators and In each of these cases an expression is made up of which are things like variables and objects like the console class Things like the addition operator, or shrink incantation operator, or equality assignment You use expressions then to form complete thoughts, statements in C#. Which are how the actions or the instructions of expressed to the compiler and which executes your application. Why am I telling you-all of this? Why go through this passing out the different parts of speech if you've ever had Well, it will help this is not a valid statement in C#. You can't just type x it a end of line character The C# compiler will what are you trying Have you lost your mind? What do you want me Fortunately, in situations Visual Studio can catch these syntactical mistakes even before you attempt to If we were to hover the visual guidance here, the red squiggly line, you can see that the fundamental problem code is that only assignment, call, increment decrement, and new object expressions What's the problem here? Well, this is not a We're not assigning, decrementing, or creating What? We're not formulating a I could create an English You would say the Who has the red ball? You can understand that just because you use creating a complete thought or expression inside of Same thing is true with C#. That's all I'm trying to say here. For beginners, understand just like there's a proper Understanding this is solving your own problems C# instructions that the C# accept and ultimately that will be run by Here, let's recap what we First of all, statements are They consist of expressions like a sentence in Expressions are composed of in other words, The operands are things like nouns, they're the subject or what Then there are the operators, which are more like the verbs. These will act on the nouns We said that operands are like variables and These are things that we They give the meaning to our for the most part, built into the language and we To start off, you might I've given you here in the form But I think you might walk your way through and Now that you understand to format a line of code, you might say, okay, what do I need to do here? You might be able to reason your way through the operands I'm going to need a variable Once I have created that now I'm going to need to How am I going to get I'm going to need to and this literal value, and I'm going to need to add Hopefully you get the idea there. I hope that this was I think it's useful for beginners to understand that there and they're not so unlike what Maybe they look a than your typical English sentence, but they still have they have to perform an When you see errors, sometimes it's because you Then sometimes is, you may not be using the a sense in order to express Let's pick it up in the next lesson, will see you there. Thanks. Hi, I'm Bob Tabor with For more of my training please visit me at devu.com. In this lesson, we're going to a specific iteration statement Sometimes you're going to through a sequence of things to find something that to find a successful match. Actually, you're going to do this data manipulation You'll have to trust me that this is a very important tool in your As you can see, I've already taken the liberty of creating our project. I called it forlteration, pause the video, go through the steps that you create a new console window I'm going to begin to add some code here on Now, the syntax that we're going possibly the most cryptic of I'm going to be completely honest, sometimes I get things myself, but don't worry. After we struggle through I'm going to share the to get it perfect the Having warned you about the I'm still betting that you read it even before we actually even before I take the each little bit of the Let me write it out here Very simple, at least very Actually, you need one Console.ReadLine. There we go. Now, ready for action. What do you think Got a theory in mind? Well, let's go ahead and see if your theory is true. You can see that we have a list of numbers from 0-9 and then we can We're using C-sharp to execute right here until a certain at which point we will stop code and continue on This for statement says that we should begin by We're going to call it i. We could call it and we're going to initialize Now, as long as i is less than 10, we're going to continue below it in our code block, defined by our curly braces. Each time that we iterate through, we'll increment the This little bit right that you probably wouldn't completely understand You remember how we use the to automatically take the value of message and add something to the end of it and then assign Remember that a couple We're essentially doing that here. This is the the increment operator, so we're going to increment Again, we're going to declare a variable and initialize the value. Then as long as this we'll execute the code below. Once we finish executing, then we will increment then do that evaluation If it's still true, then we'll execute this code again. We'll increment i. If this is still true, we'll increment it again and Yes, this is cryptic syntax, but if you can just separate remembering that there semicolons that separate them, that can help. You know you're going with some counter of some sort. You're going to need a to need an incremental at the end. Again, I'll show you a way to remember this so you But before we do that, let me comment out this line of code and give you a This would be fun. Here we go. You can see that I our code block for the another if statement with its Here, we're checking and once we find something where i is equal to 7, then what? We'll perform this code. Well, this part's obvious, but this break statement You use the break to bust out of or break out We're going to make it to and then we're going to hit the continue on to line number 23. Let's see it in action. It's not going to look but I got an idea. It found seven and it pretty Why don't we watch this To do that, we'll use the debugging which we have not even talked and yet is probably one of the Visual Studio as a text editor and a To make this work, what I'm going to do is actually set a breakpoint here on Now, how did I do that? I just went to this left that gray column and it created a little red dot and off You see that that whole line There are, truth be told, a number of different ways Probably the easiest way to do But there's also keyboard shortcuts and there's menu options as well. For example, with my blinking I'll go to the debug window and I'll select ''Toggle Breakpoint'. ' If we look over to you can also see that the F9 key Great. Now, let's go ahead and run the application Immediately the application pops up before anything can be printed notice that we have our code and we're paused Now, at this point, I can do a lot of cool things. First of all, I can see what my local variables I can also change the I can monitor those values. I can change which line of code will get executed next Now, this is not a I could easily spend an hour showing you a lot of However, what I do want to do is call your attention to this Currently, right now we're and with the application execution the next line of code that line right there that's I can look at these this locals window, for example, and you can see that the any variables that are currently Obviously, args is something that Let's ignore that one. focus on is the value of i. Current value is zero. How do I know that? here in the value column. I can also see what the data I were to hover my mouse see I'd be able to If I were to go and I'd be able to monitor it as well In fact, I can drag it around here. Now watch what happens. Let me readjust some things here. I'm going to step through Now, there's a couple step through the code. I'm going to recommend that we only talk about step over for right now. When we learn about methods we for right now this middle the step over or the F10 key on I'm going to click it jumped from line number Why was that? Well, the reason was because so we didn't execute the code inside the if statement and we jumped to Now let's continue just You're going to see that Now when we do that, The value of I change and that change is indicated Whenever you see the color changed in the previous The value of that variable of the value now to We can also see this in right here as well. How it is now turned Now that we've incremented, we're going to do the next check Here we're going to step one Here we're going to which opens up our code another assessment is I currently No. So we'll jump out of that and we can just continue until we reach where Now, truth be told, I don't have to keep hitting I can just use this continue just keep bringing me right This basically says, continue running until you hit Here at this point now I see and that's what I'm checking for. Things should get I'm going to go back line by line through my code. Here's where I hit the console look now on screen it actually did write that to the console window. Now I'm going to step to the next it jumped out from the to line number 23 outside the console that read line we can Our application is still running the keyboard and then we've Now, you may have step through a number hit the continue button until we found just What we can do is make this break point into a To do that, I'm going to hover I guess you could call it in the left most column and I'm Here this will open up a little break point settings it pushed all the other code down. Notice that it goes from Line 16 I'm going to add a condition. Whenever a conditional then we'll break at that point. In our case, when I is then we'll break on You can see that when I hit it's saved, and now You can see that the just a red stop sign to having a Now when we run the application and that I is seven in our we even stopped into Now we can continue through our code and continue on. We got our result, and Again, I could spend an other cool little features your applications but understanding how to run your application how to step through line by at least resume temporarily or continue by using Those are the key In using the Visual Studio debugger. Now let's go ahead and it'll From now on what I want to do is just eliminate it I can To completely turn it off, I can just click and it'll go away. Or I can temporarily this little icon that was next to the gear Now, you can see there's the left most column and an outline around the line of but no longer are we actually Let's do this. Underneath before but above the I want to do what I promised to at the very outset which foolproof way that you right for a for iteration statement, and truth be told for else by using a little It's not that much of a secret but you probably didn't To do this it's real easy. If you can remember I need just type in the word for. You'll see that it pops If you look after the IntelliSense pops up a little code snippet for 'for' loop. Note: Tab twice to insert Let's do it. Tab, Notice that it went ahead all up although there are going to have to change like, for example, the length. I don't have to use the value I for my iteration as my counter, whatever I could call something like my and then I hit the tab it changed everywhere that was using the I variable label to my value. Very cool. Hitting tab also took us to the next spot in our code that which was the length. Or in other words, how many times I'm going to say we'll do it Now, here again, we can use a number of different equality or inequality use the less than we could use the equal or we could use the greater than whatever makes But I want to keep simple Once I'm done making changes I can There were some highlighted gold color that indicate that these are replacement Now my mouse cursor is right curly braces and at continue to create my application, write line, and then my we can run our application and we Just to recap. It was a short Not only did we talk about for iteration statements and why you might want them and we'll but we also talked about the and how to step through a code, how to monitor the how to use the break to break out of a We looked at code snippets a code snippet in order We'll use some of these throughout the rest of the Let's continue on the next lesson. We'll see you there. Thanks. Hi, I'm Bob Tabor with For more my training please visit me at devu.com. In this lesson, we're going and I'm going to start why you need arrays Often you're going several related variable values. But how do you work and treat them all as if Well, let me show you You can see an example First of all, I've taken a project called so make sure you catch up with me. Create a new console and you can just follow along. You don't need to type this part in. It's wrong anyway. You can see what I've done here. I need to keep track and I need these numbers to so without any better I might just create Number 2, Number 3, Number 4, and give Now I want to find which I love to be able to loop through them like we learned to find which of the but I can't really do that. I'm forced to create As you can see here below, in order to ultimately find which variable has the This is not the right way multiple values that are somehow related and you want There's a better way and that, as you might assume, would be with arrays, so we comment all of this out. Previously I talked about a bucket in the computer's memory But let's expand our thinking about this for just a moment Think of an array as like a bucket, or maybe even better, a tackle box. Ever seen one of those? If you go fishing, there's a lot of little compartments inside of it, and each one of those little Usually a little worm or What if we were to use What if we were to those little tray areas inside of the tackle box and store Then whenever we needed a we just need to take it the particular compartment looking for, in order That's the idea of an array, at least if you want to Another way to think of an array, it's a sequence of data, a collection of data, although I'm hesitant to because they have very Think of it in a very general sense. You have a collection keep together, how do you do it? Well, one of the ways you can Let's do this and I'm going to go ahead and I want you to follow along and notice that I'm using I'm not using curly braces First of all, let's take a look at the declaration of our It is an array of integers. In other words, there are going collected under this same You can see that not only am I creating the declaration I'm also using an equal new in five. Some of this, like the we're going to talk about what that really means a little bit later. But for now, just accept it as how Then notice next to that, I have int and then inside I have the Number 5. So that's how many elements that I want a new array of five integers inside of them. Next what I do is I begin to access put a value inside of that Here's the 1st element of the array, the 2nd element of the array. Remember we're zero based? Here's the 4th element of the array and the 5th Five elements inside of the array, just like we defined Now what if we wanted to access the value inside of one of Well, I would do It's a Console.WriteLine, obviously. Now what if I wanted to the value that's in the Well, then I would use the correct index of the Here's the numbers, and which means I'm going So I'm going index into that array In this case, the 2nd element I can print that off the screen Like so and we can quickly You can see that we are printing which in fact is the 2nd Now the other thing that determine how many items are in the array by looking at the length property Console.WriteLine, and I'll Let's see what that will output. In fact, let me go out and run the application. You can see that we're able how many items are in the array by using the length There's five elements Great. Now what would happen to insert data into another item, a 6th element of the array? What do you suppose would happen We'll run the application an exception and In other words, we are outside of the boundary of the space that We're trying to access compartments in the computer's memory inside In order to remedy this, we can either redefine our array at the time of six items or we can go ahead the number of items in our array. That's a little bit I don't want to talk about how but it is possible to do it Let's move on from there, and let's talk about maybe a simpler approach and that is to not only but then also initialize its So let me comment out everything Now, instead of giving we're going to let the compiler Because we're just going to the elements that should be Now in this case, I can create it or just put all and I can trust that the created in memory will be able Let me comment that out. We've been working but what if we were How would we go about doing that? Well, same idea here. In this case, we want to give Like so, and so let me move You can see that we are able We don't have to declare upfront how many elements we'll let the compiler It will create four items. Now there's a number of can loop through to access each Let me show you two ways, and one of them is going to be what you're already familiar I'm going to go for tap ''Tab'', and so we'll start with and now let's do this Right? Then inside of this Console.WriteLine What do you suppose we'll We'll use the value I. So what we're going zero and continue iterating through until we reach the length we'll stop and jump But until then, we'll do and you can see that this out all four items inside of our Great. Now there's a lot I hear, but there's an Let me comment this out real quick. I'm going to show you a second In this case, we'll just do this. We'll do foreach and I'll go I'll just go tap ''Tab''. For each string name up the term Name as is actually what we So now I'm going to hit ''Enter'' on my keyboard twice and I'll just do Console.WriteLine name and What this will do is it'll allow every single name in our array it will copy the current element into this temporary variable Then we can use that to In this case, we're just the screen so much easier, that is, but we can use either through our sequence of data. All right, now, let me show it will be pretty powerful stuff and we can create arrays What if we wanted to take a How would we go about the name Bob Tabor and How would I change that? Well, what we can do is take a string and convert it into an Once we have an array of individual go ahead and reverse the order of those items so that the In the first becomes I'm going to I'm going to and it's going to contain quotes that I have a ''You can get what you you help enough other Now that's a very long line of code. What I would probably do is I would try to chop this up We said this before that you can do something like All I'm doing is going to this concatenation operator to marry the first string and so that's all really Now that I have this, what I want to do is create I'm going to use the Char Keyword, which is the data type Char, meaning I want one character, but I'm going to create an array and then I take this going to call a helper method Every data type has some helper methods that are built into it by the dot NET Framework. What this will simply do is take a long string and we'll split it up into individual characters and put those into an Now that we have our statement here in an array of individual characters, I I'll call Array.Reverse and I'm going to pass in Then finally, what I a foreach tab tab for each char, and I'll just call this a Console.Write, not WriteLine, but just write, and the zigChar, hopefully all this makes sense. Let's do a Console.ReadLine. This is just to show you some of the flexibility of Let's run the application to write that whole That's pretty much it. There's a lot more that you can do with arrays, however, and as we you're going to find that your use several arrays will diminish over time and you'll start using Think of it as an array on steroids, or maybe like Super Array. It's going to be There's a bunch of different and we'll learn about those near the very end of the But at anyway, that's how Remember that you have by giving it at the time Then you can access individual into the array to access or to set the values in We can loop through elements four or a foreach and we can even use some Array.Reverse to swap all or there's also ways to Let's continue on the next See you there. Hi, I'm Bob Tabor For more my training please visit me at devu.com. In this lesson, I want to how to then call simple methods. Now, creating methods are going different things as we write Methods are going to help us They're going to eliminate to copy something we did earlier and paste it later in our code base. They're going to allow us then to take a certain feature our application and then call it by its name Then if we were to ever an issue with our method, with that code that's a method we have to do one place instead of we copied and pasted our code. Remember what we said at the a method is merely a block of and it has a name, and since it has a name, we can call it by invoke that code defined Methods are actually one of the most important building blocks that we're going to and it will allow us to build more interesting and This is definitely something that we need to To begin, you'll notice created a project Please take a moment, create a new console window What I'm going to do is build I can possibly imagine a simple ''Hello world'' application again, but this time using a method. We're going to define our helper method inside because remember, methods inside of the Related methods go together we'll expand on that later. But it should be outside of the definition of the static void main. I'm going to go right to the end of the closing curly braces and I'm going to hit ''Enter'' my keyboard that should put my mouse cursor after static but before the end of our class so somewhere in this area We have to define things just like we learned let's create our first That's all it takes. Now I'll explain the we talk about accessibility We'll talk about the word static However, just to let you know, it has more to do with building than typically what you using in a different But we'll talk about it later. The void is something We'll talk about that in I'm going to create a block of code and then I'm In this case, the name Additionally, I'm going to parentheses and we'll look at what those are used for However, then in the body, I'm simply going to just write my HelloWorld function to do. Now, in this case, simple but hopefully Now how do I call that method? How do I execute it from Well, remember it has a by its name in order to invoke it. But remember, there's one that we need to provide here. Not only do we need to the method that we want to use the method invocation operators which are the opening and closing Now we've called our method and we expect output in the console window. Now I'm going to go ahead code just so we can see our result like we always do and we will get the unexciting But the most important create the simplest Now that you see how easy it is to create a method and how let's go ahead and shut Instead, what I want you to do should be able to find currently watching this video, wherever you originally there should be source You should be able to in before folder for Lesson 10, copy that HelperMethods your project's directory or and then you can open I've already got this opened up created a simple name Again, this is simple but at can use to demonstrate how It's going to ask us where we were born and the little algorithm I the previous lesson where we how to convert it into how to reverse the order of each of the characters in the array and then display it back out to That's what we have Oak Park Tabor Bob Now, in order to accomplish from lines 13 to lines 56 Admittedly, I made this longer than it the amount of duplicate code that I've introduced Here is where I am and the last name and essentially the same collecting is a little bit different but it's only two lines of code Here we are actually taking the first name or the last name do the reverse operation three times and Then what we're going to do a string called result which will then output in a console But notice here, we're essentially here and then again here so Now, duplicate code in and of there's really no way eliminate duplicate code but duplicate code is usually the result of copying You've invented the wheel earlier in your codebase and your &quot;Well, I'll just copy and here and here and here in my code.&quot; Now, invariably what happens it but to make a few subtle frequently, at least you will forget and you'll make a mistake and forget to introduced a bug and it can steal your soul like even But what if it's minutes your time trying to have a weird problem Copy and paste is dangerous, you should always treat But in addition to that, if you have the same code then whenever there's a change that's requested in how we're going to have to change But what if we were to take some of this functionality like and this, and we were and put it into its own method and First of all, it would reduce If we needed to fix a we can do it in one if we were to give that method a it would describe what we're Right now, we're just of code and it's a little bit more difficult to ascertain quickly what this application But if we were to maybe give our it might read more like instead of a bunch of So that's the goal. we might want to break this up into methods is to simplify We already talked about making there's a lot of lines of code here that we have to pass what's going on and if we can then we can improve the We want to reduce bloat every We should strive to make our and perform well and maintainable so that if we can do it in one help us accomplish Let's do this. Let's we've already learned I'm going to go somewhere between main but before the end I'm going to define a ReverseString like so, and what I'll do is copy some of the work that we've lines 24 and 25 and I'll paste those here in our new method the code that we used to screen and I'll paste those here as well in our Now to get started here just to make sure that this I'm going to hard code the message. I'm going to create Hello world and then I will throughout and firstNameArray to messageArray and we'll to rename like we Then finally, what I up all of the individual reverse order using this foreach Console.Write each item like at least for now, the same thing. Now that I have this working, I want to comment out this point so that I can isolate, and then we'll start back in as we get them working. I'm going to call the using the name of the method invocation operator and then obviously the end of line character and I'm going and not a very exciting the logic of our reverse What I'd really like to do is Currently, right now, How many times do I need a print But if I were to remove this line an input parameter so that the caller can pass in the now I improve the usability To create an input parameter, I need to give it a data type What I'll do is say, I'm going to allow a string and internally I'm going I'm creating essentially an outside passage of code to pass values into the body of my method. I can utilize that value and then hopefully achieve some more Now, having done that, I've changed I used to have just a method called ReverseString but it accepted now I have to accept one input parameter and this red squiggly line beneath the reverse string and if I were it's going to say there's no to the required form and you're like, &quot;What Essentially, we did not call because we have to give it or probably the better thing to do here would be to give that we collect way up here Let me uncomment that out and Now I'm collecting the the city but everything else I'll Eventually, we'll remove them and I'm going to call this reverse Each time I'm going to change Now when I run the application, well, let's do this as well. Let me copy that so that I Let's go ahead and remove that and Make sure you have possibly if you need to. Let's run the application and it should work had before with fewer lines of code. It mostly works but you notice there's a subtle There's no space in between This is a good example of where my code and it will fix the wherever I'm using and To fix this problem, cancel &quot;Right&quot; and then that should allow between each call to reverse string. Now when I run the application Bob Tabor, Oak Park. It should work correctly Now this is definitely one way to go about writing this application. As I look at this method Typically, whenever I attempt to describe that method is responsible for In this case, I would describe as it reverses a string and But herein lies the problem, I really only want each my system and when and print it to screen, I feel like that's two Typically, what I out into two separate well, that's a little true in the simple case. But following that rule of begin to think about what goes into a method? How many methods should I write? Should I create one massive Typically the answer is more smaller methods with In this case, what we're the functionality of the What I'll do is take out all of this where I'm actually doing and what I want reverse an input string and then giving the result to the caller. In other words, right now which means I want you to but please don't report back to me. I don't care what you have to say, I don't need to know you just go, you work, you be quiet and However, we might want instead of being quiet I want you to report back to me what the results were of what you did. In this case, I might want to say return back to me I'm going to give you a string return to me is a string Notice when I added or I get a red squiggly line returned anything I need to use the I could do a for each and gather up each individual item into pretty much previously right However, there is an easy way to do this with just one line of code, just like there is a helper method called Reverse on the array class. There's also a string class, and the string class One of them is the Concat method, and it will allow us individual characters and it will concatenate them all together In this case, let's just give so and that should work just fine. Now notice that I'm able I'm not really accepting Why is that? I thought if we were report back to me that I would In other words, I would expect where I'm capturing whatever has been returned from the That's optional. I can listen for it and retrieve it and or I can ignore it. In this case, what I to do is actually save it, so I would call this reversed first name like so last name equals and then We'll shorten this up in a moment. But hopefully you'll see Then what I can do is Right line or just here, let's just do right. Reversed first name plus space. This seems laborious I've got a better idea the string We looked at the concat method, but it also has a format and the format will work a lot In fact, they're almost identical. The only difference is will print its results string dot format will a new string as a result of But the reason I'm using use the replacement codes like so. Here I go 0, 1, 2 and I can pass in reversed last name, and reverse city like so. Since that is off to the I can't easily see it. Typically, what I'll the input parameters to the method I'll move in the separate lines Notice that they're But this is all essentially even though it's But it improves readability because off to the right-hand side of the Get in the habit of readability and keep If they do go off to don't be afraid to different lines to Now let's see what we have. This should work. Let's run the application. It works great. But what if I want to put I could simply do that like so. I think I can just use What I could do is go display results and I could just take this But now what I need to do is How do I go about doing that? Well, know how to How do we add multiple What we'll do is reversed first name like so then to add subsequent I'll just use a comma the second one like so and Again, since it's off to the I might put my mouse cursor right those input parameters for our display result method You may not agree you don't have to. That's a stylistic choice. At this point, I should be able Let's call display result passing I just happened to use but I could have called either the input parameter or the temporary variables Reverse string, last name I'm beginning to think to myself, why am I even going Why do I even need these eliminate those altogether Paste it here. I mean, I should be able to do that this and I should Then I'll put the Mitch on the line and here I can eliminate these my application. See if it works. Still works great, feels go into this display result. That should reduce Now suppose that I don't want to pass in each of these What if I want to display the What could I do in that case? Well, I can provide a method by creating what are called overloaded In this case, what I'll out and copy and paste the exact Notice on the second Let me hover my mouse can see it, type program. That's the class program called display result with you can create additional versions of the same method but they have to have a A method signature is the the input parameters in In this case, I already have a method called display I could change these names to just any old and I still get an error. It's the same problem because the changed the signature of the method means that I'm still However, I could change only a single message or a single string to be Now I have two completely of the method as far as Now, in this case, I wouldn't need any of this. I probably just do this. Like so, and then I could call it by doing this. Basically what I was but we'll go ahead and do it anyway. This time we're passing Notice the use of the concatenation some empty spaces defined by two double quotes with just We should have two lines that display essentially Let's make sure we do this right. Well, in a WriteLine between them just to make Bob Tabor and we get two Now you might wonder Why in the world would you ever with the exact same name that but allow the user to pass Let me give you a good example do that is with the Here we go with Console.WriteLine as you type the opening parentheses for the Method Invocation operator, that there's a little message there's one of 19 and then and as I use the arrow keys on Notice that the number goes These are all the that the WriteLine it'll accept an input which is true false. It'll accept a single character It'll accept a decimal value, which is usually used which is used for longer mathematical which is a massive number in terms of the number of It allows you to pass other types of integer style values. It allows you to pass in a 19 different versions make it convenient for the to utilize that method in the application to Now when we go to display result, we'll see the same thing in and notice that I have two versions. I'm looking at version one of two, and notice the emphasis that the first version accepts one input parameter of type and then the second version accepts three input reverse String, reverse There you go. That is why you would create overloaded Now, in this case, notice that we could eliminate this in order to essentially I'll just delete that, and, for the sake of simplicity, I'll go ahead and Now we've reduced down dramatically for our application and improved the flexibility of our application by adding multiple ways to actually At Developer University, I that no method should have more if it has more than six then it's probably attempting You should be able again to express then if you find yourself then it's probably an opportunity to split those up into Of course, rules are and as a rule of thumb, six lines of code per method will keep your It'll keep everything scoped, nice and very tightly, and it'll improve the quality That's all I wanted but we're going to be using If there's anything about a whole lot of sense please make sure that again or seek out You're doing great. See you in the next Hi, I'm Bob Tabor with for more training please visit me at w.com. In this lesson, we're going to look at another iteration statement, the while iteration statement. Let's just recap the we've learned about We've learned about the iteration statement and through a block of code a number of preset times based on a counter. Then we also learned about the for each iteration statement iterate through a block of code Now, in both of these cases, ahead of time how many iterations or how many times to iterate code but what if you didn't know up front how many times Maybe you need to keep iterating In that case, you'll want to use Also, we'll take a look at the which allows us to always iterate at least one time before breaking We'll look at both of and I'm trying to think of use The most obvious one some little menu system for our You've seen him before, especially if you've worked with At any rate, what we want to do is begin with a new project you can It's called WhileIteration. Again, another console window application. Please pause the video. When you're ready, let's go ahead a method that will options to our users We'll do something like this. We have some more work to do here, but what we want to so let's just start by displaying and let's run the application. Here we can choose an option. No matter what we our display will disappear. But suppose that we wanted to actually kick off another so say, for example, let's go private static and then we'll go private like this and it will Now let's go ahead and PrintNumbers and then GuessingGame. Now let's run the the first option and we're able But when I hit &quot;Enter&quot; we are completely removed What if I wanted to return How could I go about that? Well, I could use a determine whether to show the menu again or to completely exit To make this work, what I'm with a new data type called bool, we referred to it It's basically true or false. We want to create a new displayMenu and we'll set its Now what we'll do is I'll just type in while, tap tab. What I'll say is while the and then we will call display menu. Now a couple of things here. What we'll need to do is actually then retrieve back for main menu, a Boolean, whether the user What we'll set is displayMenu equals MainMenu and then have Of course, we've completely broken the application at this Here we are going to the main menu until main menu If somebody chooses then we might choose to in which case we'll return false. Now, if they choose like 4 or 5 or 6 or then you might just want We will return true again. Furthermore, we might well here after we go through Now let's go ahead and run the application and see First of all, if we it'll display a message, and after we hit the &quot;Enter&quot; it will display the menu number 2 and it'll and then I can hit hit the &quot;Exit&quot; and we actually What the while statement allowed check for a condition and then we can break out Otherwise, we're going the code inside of our code block. Now what we can do here is actually We don't need to say, while displayMenu equals true, remember that just the if statement or the else if, we want to evaluate an expression then we want to either execute that In this case, if displayMenu is we don't need to actually It already evaluates We don't have to do an equality It's either true or false, and so we can just write it like Now, what we want to do is maybe fill in the gap on some of these Let's play the print In order to do that, let's go ahead and type a number, and then int That's going to but what we really I'm going to go integer.Parse whatever string has been returned Now we should have the Here what will do is create Int counter equals 1 and the counter is less Then we will do a Console.Write We'll go Console.Write and we'll do a little delimiter and then Now there's a tiny bug We will come back to that But let's go ahead and run go ahead let's type in a and it will print out We're able to change on the fly that will iterate Now it just so happens that this Let me exit out of this. What we really wanted I'm going to go ahead If I typed in the number 5, this would actually As long as we're less than six, go ahead and continue to But once this statement once the counter if it's equal to 6, it will break out and code here in line number That should work. Now, the other thing that ran the application is that we keep seeing additional data being I might want to clear out everything Here we'll start at the and that should clear I'll just copy and paste that When we run the application again, this time I'm going to and notice that it and when the print numbers game, I'm going to type the number, let's go 4, it types out 1, 2, 3, 4. I hit &quot;Enter&quot; it clears that off Awesome. The next thing I want Again, here I'm going off everything that's What I want to do is choose a random number and the end-user who's playing the game to try and guess the How do I create a random We actually use this the Dunnett from the class We'll create a new instance we'll talk about what that means, create an instance of a class, in an upcoming lesson. Let me do this. We'll go random, my random equals new random. Again, that should make no That's just fine. I'll actually did in an upcoming class I want to get a random so I'm going to call and here one of the overloaded give it a minimum value The minimum value will be 1, but the maximum value, I want it to be 10. I'm going to say, don't In other words, 11 is out of bounds. Now that I have a random number, I'm going to also keep track of how many guesses the player Then I want to also keep track of whether or not the user Incorrect, and we're going to say it is true Now watch this, I'm going to I want the block of create execute at least one time. That's why I'm going to opposed to the while. The while we'll evaluate and we may never actually run the but this time I want it We'll say, do this, but then at the very end, we'll check for the statement while. If the while condition is true, then we can break out of it. While we continue to While we continue to be incorrect, then we're going to keep guessing. Let's start this guess the number between one and 10. We want to retrieve that number. The string result equals Now that we have it, we can do an evaluation. If the result is equal so if whatever the user typed in is equal to the random then we want to break out of the wild statements so In other words, let's go ahead and say that incorrect equal to false. At this point, we guessed correctly and we'll and here we would want to Hey, you did it correct. However if they did then what we would Console.WriteLine and then wrong. We probably want which will happen because then we'll come and we'll Looks like a missing end I can see that as I hover my mouse cursor over that forgot a semicolon there. Otherwise, this should work. Now there's one of the I want to keep track of Each time the user adds a guess, we've already initialized that value there, that variable guesses. I'm going to increase guesses I type in the word That means I want to add one to Then here I want to type It took you guesses, then like so. Let's run the application. Let's choose to guess a We'll start off at three. You can see it says it's wrong, so I could continue to guess Let's go 4, 5, 6, 7, 8. The number was eight. It took me six guesses Now when I hit &quot;Enter&quot;, it returns me back to my main menu and here I'll Let's go ahead and change Let's just do Print Numbers We've used the wild statement The wild statement here is used display the menu until We are using it to merely but we get to determine or let the user to opposed to the four or the four each where it's Then finally, we're able to continue to ask a series of questions until at which point then we can The do variation allows us to run as opposed to immediately the block if the condition is true. That's why we would use the It's pretty useful in certain We'll learn about strings in the Thanks. Hi, I'm Bob Tabor For more of my training please visit me at devu.com. Now, many of the types of a C-sharp developer will whether you're formatting the end user or whether you're A good example would be whenever That's a term that developers data from a file or a database, and it's in some raw form and You need to remove You need to add certain positions in order ingestion to be used by some other software system or to be saved in a whatever the case might be. Manipulating data is a key skill, whether for display or for the sake of massaging data into Furthermore, whenever you're you're working with a data type that can hold a lot of information. To extend the bucket analogy, you're working with When you're working you have the responsibility them in an efficient way. Because when you're working with data that takes up a lot of memory, it requires a lot of you are putting a strain Now admittedly, it would take a lot of string manipulation especially a modern computer. However, software developers, we and so it's important to the dotNet Framework Class us work with and manipulate That's really the To show you how to perform some simple string inserting special characters formatting strings, especially numbers and dates Manipulating strings, searching for items and removing them or replacing them Then also working with strings As you can see, I've already a new console window project Please take a moment, pause the I've already added three lines demonstrate some key What I wind up doing is just typing you some manipulation and then But at any rate, let's go ahead the special nature of which is that character there. I always used to get my That's forward slash, A backslash character can be used to escape or insert escape This will allow us to do things insert line feeds and things For a good example of this, what if I wanted to type something I wanted to insert a series of double quotes around the word so-called so that it displays as the author of this, expect it to be displayed on screen. Now unfortunately, you can see that the Visual Studio on behalf of the C-sharp compiler It thinks that you have The word my and life and in between something that it can the word so or the term Then the word called. These are not variables It doesn't recognize C-sharp does not like this. In order to insert a special character like I don't want this to I want to use this inside I'll use the backslash character which escapes out the it available for use inside Now when we run the application, we can get double quotes inside Now similarly, let's put I tell you what, I'm just my clipboard so I can keep using it. Now, what if I needed What if I need a new split this up under two separate What I can do is insert Think of a line feed. Slash n will create a line feed. Let's go to run the application. You can see that it's smart though we didn't separate with spaces around the word a and that escape character for the line feed and represent it Now, you might say well, but what if I need to actually For example, in an instruction to you'll notice that we underneath the expecting us to use the backslashes and escape But we've given it to indicate which escape In this case, we have two options. In fact, in all of these We can use another to escape out of it to Now you can see that you should go to your C colon backslash drive. I'll just do this again. Go to your C drive. What we can do is add a at symbol and that tells C-Sharp use our backslash characters not as escape sequences Let's move on from there. We've string dot format and we showed how we could where we are going to insert the words 1st and The template contains a The number inside corresponds to which in to the string that Let's run the get what you might expect What I didn't tell you at the reuse the replacement Like so or you can use them in Let's go back and change up the be the first item displayed and the first will be the Furthermore, the replacement For example, if we want to do that we wanted to display I want to display In my case, since my computer's this will be represented if your country and culture English U.K. or some other language would probably see something choose to do this. You'll see your native country and But to create and format you use the colon and then C immediately after the In this case, I'm using the first item in the list but the colon C says I want you When we run it at least dollars and cents with There's all these little For example, what if I a really long number to an I want it to look like how I have it here where you 12 billion or 123 million or what? To remove the confusion is use the colon and This will add in decimal the appropriate formatting for a large number Furthermore, continuing that same string.Format and we wanted to What if I wanted to Be sure to get those Just to show there's this is called as a percentage like so and then we If this replacement code lets and you can see that the percentage Finally, the last one I'm going to show you but I'll show find more information is how For example, in the United States, phone numbers have a very specific Let's go string.Format I want that displayed like use zero and then I'm going to use count symbols to represent In this case, actually, I'm going to use parentheses around the first three usually how an area code in a phone number in the United a space then three more then four more numbers. That's just how phone numbers are presented in the U.S. Let's You can see that it in fact formats that number the Let me throw one little What if I were to supply I added another one two yet I don't have that accounted Where will it be presented? Well, as you can see it pushes out the area code to five digits The moral of the story there will go from right to left whenever you're using custom a custom format for a numeric value. Again, the numbers out and once you get it will put as many on that very first formatting out to the left. Be aware of that. The next thing that we want to do is strings in a more meaningful way. Up to this point, we've been want to actually change some things Let me start by providing a little something that we can I'm going to type in a lyric Notice that I added or I left the very beginning of the two spaces at the very Let's go. My string equals my string. I think the most important realize about when you're is that they do have built in functionality that were For example, every string has the substring helper method hey, I want to start and then grab all of the I can say start at position six and grab me back everything When I run the application you can see it starts which is at the sixth everything to the very Here is position one, two, three, four, five, and six. It truncates off the first six and I pulling everything else giving me a subset of the strings But I can also say go ahead and give me the next 14 Don't give me everything to the give me the next 14 isolate a couple of characters in this case just I can also do something like my string.Toupper and that will do what you might think it will. It'll make everything upper case. Great. What if I wanted to replace one character My string.Replace and say find every blank space and replace When we run the application, you see that we get double It makes it more obvious that we had some spaces at the We can also use mystring.Remove and we can remove a number of Instead of selecting out the substring of We can actually remove those You can see, summer we took it has been removed Also, what if we want to actually remove those trailing We could use the trim method. Let's do my string equals, first of all, string.Format. Here I'm going to grab the length of the string to demonstrate this. The before length and Let's go mystring.Length dot will call the off all of the extra spaces Or I could choose to trim off only the ending spaces or the beginning spaces the trim method to then determine what the length You recall that we used the working with the array to find out how many items were in the array. We can also use the length property on a string to That's ultimately what Tell me how long the any changes to it and then after how long is the string itself? Run the application again. You can see that the before was 46, the after was 43. We trimmed off three spaces. Great. The last thing I want to do is talk about working with strings in For example, let me just type in We'll just do this. Actually here. The Hopefully you remember what where we're saying, give me whatever the concatenate everything on Here we're concatenating on just double dashes and in we loop through 100 times and we'll merely then just display my Let's go ahead and We'll start here with a blank slate. Let's run the application. The output isn't all it's just a printout of numbers But what's going on is the more interesting What happens when you're working that it's called a meaning that you can't just What happens behind this little dance that the is performing to make it look with the original variable My But what it does is it creates a second bucket and it In this case, it copies My String plus any of the new and it creates this new then it removes the old bucket the name My String. Then we say, let's do it again. In fact, let's do it a hundred that dance 100 times in order to produce the final result that we're printing then in our console window. You can see that's a very inefficient way and memory management that might put a drain on the system if Instead, what we can use Whenever we're going to where we're going to do a or a lot of string manipulation, we can use something Again, just like I said with a random class from this may not make a whole hopefully once I talk about what classes are and how to this nomenclature My String equals new String Builder. What is that all doing? We'll But just let's create a and then we're going similar to what we did before where we will iterate But this time, instead of just we're going to use an append method, which is a more additional information to rather than going through of forcing the runtime to create all these temporary My String apend i and the But what's going on under the hood is that we're working with Use the String Builder along the String Builder to work with strings in a We talked about quite a bit time how to work with the escaping and inserting escape special characters into how to use string.format. In fact, let me show here for standard If you just search you'll be able to find this article many other usages for the format that we looked at We looked at several of the to replace or define subsections or completely remove or actually create two upper or two lower Then finally, how to work with Now we're going to give dates and times because working with dates whenever you're and there's a lot of similar We'll see in the next lesson. Thank you. Hi, I'm Bob Tabor with For more of my training please visit me at DevU.com. In the previous lesson, we looked at how to format strings whether it be for display or for In this lesson, we'll do the We'll start off by talking about We'll look at how to add and We'll look at how to that represents this moment in Then finally, we'll look at the duration of time between To begin, I've created a new Pause the video, please What we'll do here is actually just create a new DateTime time and we call this my to initialize its value The easiest way to do that is to represent this very moment as We'll go DateTime.Now and The easiest thing that we can do taking my value and calling Now you'll see we have a lot of to something strings and these in an effort to format our But this default ToString method our locale and will times as they are typically presented in our country Here in the United States, we usually represent the month I know most other countries year and then we have the time of afternoon that I'm Notice that it also has AM, PM as opposed to military In order to change the way we're given a bunch of other and so we can do myValue.ToShortDateString just display the month, date, year. Isolate These short time string. Here we just want to display , 3:35 in the afternoon. Great. We can also choose a more You can see it's as I record this and we can for time as well, so You can see not only do we but also seconds in Great. Oftentimes what we'll want which means we either minutes, I guess, to seconds, minutes, hours, days, months, years, whatever But we can do it through a series of helper methods, the add methods. Here I'm just going to myValue and we'll start off with You can see that we seconds, hours, days and everything up from there. Let's just do something We'll add three days it ToLongDateString on it like that. Now you may have noticed where I've used the period, remember, that's the and chained together In this case, we have a value If I were to call the AddDays method notices that that the return value of Now, since I have another date time in my hand that represents then I can call that date which now returns as you That's the notion of chaining As long as you continue that return some value you can continue to call methods Let's go ahead and see now, three days from now it will be, in fact, Friday, March 18th. Let's do something and let's go myValue.AddHours. We add three hours ToLongTimeString and that would be 6:38 PM. Then what if I wanted Are there any subtract No. However, what you can do is simply use a negative so instead of adding We'll just go ahead and run that. You can see three days ago Great. In addition, we can just grab off Here again, let's go myValue, and let's just pull off This will return an integer. Now, Console.writeLine we so we'll just go ahead and The third month, obviously, that's going to be March. Now, we've looked at how to but what if I wanted to create a DateTime in the past I could do something like this, so DateTime and I'm going Here again is that new keyword. I've hinted at a number of times, we will get to it, don't worry, but I'm going to use and I'm going to parse the month December, and then the day the 7th, that was the day I was born. Now what I can do is something like we've been Console.writeLine and just just to prove that it's of date just like the other working with, so 12/7/1969. Now there's one final way so let's create another version of birthday equals DateTime.Parse, remember we've used in parse. We were able to take a string Here we're going to take a string and turn it We'll just type in myBirthday and that should give us represents December 7, 1969. Now what I'm going to how many hours that I've been alive or how Days is probably more In order to represent we're going to use a new Here I'm going to and we're going to call this myAge and the subtract method will take the current date and subtract In this case, we'll use myBirthday. Now that I have an object that I can say represent that span of time in terms of days or years To do that, I'll go and then I'll use this myAge.. Here I can say, give me the total number alive and print those to screen. You can see I've been alive, what? Well, 16,900 days. I'm getting old. I say that every time I record this video and I feel Anyway. Here we were able to We're able to manipulate dates by adding and subtracting and they were able to determine the difference between two We also talked about different whether it be now or some by either just using one of the versions of the DateTime we'll talk about that later, or by using DateTime.Parse Let's stop right there and we'll Doing great. See you there. Thanks. Hi, I'm Bob Tabor For more of my training please visit me at devu.com. You might recall at the I said that a class is a and I used the console class We had the Console.writeLine, Console.readLine, Console.Write, we've even used Console.Clear. All of these methods do with working with I said it makes sense the same class, the console class. Now, truth be told, I intentionally about classes and their because first of all, I wanted confidence in yourself that this isn't hard. You can get your hands around it I wanted to do that before we because while there's nothing they do lend themselves to a conversation about a style of programming a little bit difficult Now, the code that in your methods have all been and you've been calling defined inside of classes. Classes have been all around you, you've been working with them from the first line of You're really already an old pro at this whether you I'm merely going to fill in don't yet know about in this lesson in a couple of subsequent lessons so that it rounds out you can fully harness the power of the.NET Framework Class Maybe someday, whenever some big application for some large company that you'll begin to think object-oriented software developer. But at this early point in I really just want one thing and one thing well, that is to find what you're looking for in the.NET and be able to have the the methods and the properties in those classes that have The truth of the matter is that such a massive topic couldn't do it justice In fact, I have a whole course Again, I really just want to I want you to know enough about classes and objects and things like that so that of the.NET Framework Class Library inside of your Now, the way that we're going to learn about classes and all that good stuff is by creating simple custom classes Let's start by talking a simple application for a car lot. Suppose that I own a car lot and I want to build helps me keep track of all I might need to create a number of variables to hold because I'm going to use determine its value based on its make and its model I might start off by of variables called car1Make, car1Model, car1Year, and so on, in order to keep Now, what if I need a second Well, then I guess I could called car2Make, What if I need a third one? Well, I think you see things are going to get out Then what if I decide one day that the value of the car is not model, and the year, keep track of the color In that case, now I string, car2Color and so on. You can see that this simply is not the right approach to keep track of information that should be collected together I need a way to keep about a car together in I want to keep track of the make, the model, the year, the color, and maybe a bunch of other but I don't want to a bunch of loose information, I need it all related together. What I'm going to do is start off by defining a class that contains four properties that describe To begin, what I'm going to do, you can see I have a project that SimpleClasses, go ahead and pause the video and catch What I want to do is work actually outside of the first class that's already been defined I want to work inside of the but I don't want to define a new class inside of I want to work outside and so I'm going to define I'm going to give and I can type it all out like this and I'll explain just a moment or I can tab and then I can use the replacement areas by so I want to make a string, tab, tab model, enter, enter, prop, tab, tab, int, year, enter, enter, prop, tab, tab, string tab, tab, color, enter, enter. I've just defined a class name This car class allows me to define a data type that describes Every car has a make, a model, a year, and a color, and a bunch of other information interested in for my but my aim here is to use this definition of what create additional instances of the car class that represent In other words, I want to create a bucket in the just the right size about any given car on my car lot. It should contain not only but then also the value of its make and its model all in one big bucket up in the computer's memory There's two parts to this. There's defining the class itself I can create instances Here the class is the definition, but when I create a new then I'll be working with an object and sometimes But the class is the blueprint, the object is an instantiation or something that's been created as a result of having the The way that we create the car class is to do this. I'll just call this my This point, I've defined it would by declaring whether it be string or integer. This is just a little a little more complex. It's the car class. Then I give it a name that I Now, that's part of The next thing that I want to a new instance of put this up in the memory, in the bucket, so to speak. Here we go, new car. Again, there's two we'll talk about this more as First of all, I want to declare a new car in memory and then I want to create an instance of car and so there's two distinct steps there. In the real world, you can use the same blueprint to create In the neighborhoods that you might describe them they all look the same. You could use the same pattern to or you could use the same recipe casserole and get the Each time you want to it will be at a different address. Each time you follow the pattern, you'll create a new instance of the clothing that can be sold Each time you follow that recipe, you create a new instance offer it during either the The same is true with classes, each time that you create a you have a new object that from the other instances of that same class in the They each live by themselves. A class is like a cookie cutter. Now keep in mind, you can't You eat the cookies that you The cookie cutter gives each and so when you instantiate you're basically using your class new instances and you have 1, 2, 3, 4 new instances of cookies that you can then Focus on the new keyword, it is what you would It actually builds the new It uses the blueprint, it uses the pattern, it uses the cookie cutter in of that blueprint or that pattern or that recipe or that cookie cutter and it brings the class to and it makes it usable You can create many instances of a given class or you can all based on the same class, but each object will be If by no other distinction then by is merely the address What I want to do is not this car because I have I want to use to distinguish this car on my color But then also, I may want to then access or get those and it's working just like In this case, instead of just I would go mycar.make and I would Now, admittedly, in I am merely hard If this was a real application, I would ask an end user to input this information or something along those lines. There we have it. We the car class and I've set and now I want to get print them out in a console window. We'll just do this in the We access, or we get the values just before by using the dot the name of the property. Let's go make, myCar.Model, myCar.Year, Now you might be why did you do it that way and Remember car in that instance, car describes the But what we want to work with is that's why we're calling It's the variable name in the computer memory that Let's go ahead and on the separate lines and then finally will go Console.Readline, so and this should not be an exciting application at all because we're merely just But at least I can show creating setting the properties, and then getting the properties That's what this get There are actually longer versions let's just do this This is a longer, more complete version but I don't want to talk are reasons why you But for the most part, for our simple needs, we'll just use this of defining a property Now did you notice that we got so whenever I typed out myCar. and I used the member that I'm able to see all the Make, the Model, the Year and the Color. All represented as a in IntelliSense so that whether to set their Furthermore, I'm able to set values the way that normal variables by using I'm able to work with the variables and write them just like I would There's nothing all outside of the fact that to a specific instance of a class. We created a new data type, the Car data type, and since the data type, we can use it just like we would so if I wanted to create a little and I'll use the decimal data work with dollars or money currency, and I'm going to create a method and I'm going to allow this to What I'll do is just in this case, I'm going to have to carValue to In fact, I'll go ahead However, if this was a I might look up the car to get a more accurate value. But for today, we're the value to be 100 and Here I can go determine I can pass in myCar, and I should return back the value, so let's go decimal value and then let's go Console.Writeline and will use what we to print out the value and let's run the application. You can see that it's worth $100. Now notice what I did here. I used the C in car in a c in car. The C corresponds to the name of the class because I named and the C-sharp compiler is C car and c car are and this is a common the same name for an object If there wasn't something like it being in some special state, but I can reuse the word car, I chose not to do that here just to make it obvious But there's nothing wrong Defining this input then giving that input But just with it lowercase character they're two very different things. Moving on, I want to talk about We've already said that classes We've created this inside of my static void main. But it might make create that method here inside the car class already has access to information like the the color and that's the use in making a Here, let's go ahead a public decimal Now, we're not going to allow because we already have all the Let's create a little If the year is greater than 1990, then we will set the the car's value, which we need Decimal carValue, set the carValue equal to $10,000 so we'll set it to 10,000. Otherwise, we'll say the car's This is a very, very But we just want to that inside of an you're going to be able We're able to access the current car's year in and so in this case, what I'll do is let's comment and here will go Console.Writeline, Like so. Because this is going I'm still going to Now let's go ahead and Since it's in 1986, is before 1990, it's In this lesson, we used We've all seen cars, driven cars, own cars. A car is easy to conceptualize and represent in a class because there's a tangible Now my assumption again, is that your main exposure to using classes define by Microsoft and most of the time, those classes don't represent They're very conceptual in nature. You might have a a connection to the internet. You might have a class of information that They don't really have real so you need to be aware of that. In most cases, the.Net Framework class library classes don't have real world equivalents, but the ideas are exactly the same. As you choose a software developer, you might want to invest learning how to create your and those classes can they can represent real things in your company or in the real The process that you down a problem in the world is object-oriented Again, that's not a to cover in this series of lessons, but you can learn more where I spend a lot of time To recap, a class in.Net and it's similar to any other data type like It just allows you to define methods so you can define a custom class with and then you create or rather you create an therefore working with an You can then access that methods using the.Operator, the member accessor operator. There's quite a bit more Don't worry if you don't why you even need them, how to really fully utilize them. Just make sure you understand through in this lesson creating an instance of a class, setting its properties, getting its properties, passing an instance of a or even defining the method and allowing it to access its own members like If you really don't understand then you're doing just fine. You're exactly where you we'll cover lots of other topics related this We'll see you there. Thank you. Hi, I'm Bob Tabor with for more of my training please visit me at DEVU.COM. In this lesson we'll continue to We'll begin by talking objects so objects come to life. They live for a period of time, and then they die. They're removed from memory, and we'll talk about the.NET its role in the creation, the maintenance and then ultimately, the removal of objects from memory. Next, we'll talk about constructors, which are simply methods as developers at the moment when a new instance of a Finally, we'll talk properties that study keywords been lingering around and we've been using static properties and static even from our very first examples. So we'll finally tackle Let's begin by creating You can see I've pause the video and catch up I've created a new project Furthermore, you'll the car definition from If you like, you can type that in help remind you to use the the code snippet in Visual Studio to create these short and auto We've talked about and then ultimately you we create a new instance That new instance we'll call myCar, and we've talked about this but I felt like this deserved because there is actually a lot and it would be this as we begin to work Whenever we issue a command to create a new instance of a class like we have the.NET Framework runtime has in the computer's memory that's large enough to hold a new Now that much we know. The computer's memory similar to street addresses the address that I live at. Now, admittedly, a is looked dramatically like 123 East Main Street, because the computer's addresses are typically represented but they're known It's easy then, for the its memory by using its address. The.Net Frameworks an empty available address where where there's no data that's and that address has store an instance of our class. The.NET Framework runtime will and it will copy any of its stored in that object instance Then it takes note of It notes the address of the memory where it put that and then it serves that and we store that address in the actual name or the In this case, myCar, that variable is actually in other words, an address in the computer's memory where we can Now, whenever we need to access the new instance we merely can use It's in this case myCar, so myCar is simply It's simply a reference in this case, a car class Whenever you need to work with you just use the myCar Identifier takes care of everything It gives you the illusion that you're actually working but in reality, you're a reference to an address Now there's an analogy that helps me to sort all this out in my mind, and we're going to continue to if that object is stored if it's what we have equated an area that holds on to our values, then what's returned back to that's what myCar is, it's our handle to the bucket. We've used that bucket analogy in a number of different times But we essentially in that bucket just and we're holding on our reference to that memory What happens if we were Well, at that point we'll no longer be able to get We've lost the bucket somewhere The bucket will no longer Now, can we ever get Well, no. What happens is that the.NET constantly monitoring the and it's looking for objects that no longer have any Once we let go of a handle, the reference count, I guess you could call it will the .NET Framework runtime will say, I see that nobody's They've let all of their handles to you expire or to go out of scope. That must mean that and it removes it and That process of monitoring memory, looking for objects any references to them is It's one of the core features and it's one of the to work with C-sharp at first as a developer than maybe In an unmanaged language like may have to manage and sometimes you actually are leaving things in memory and you're you're not removing them yourself so your application might Or you might have a corrupted you're using an area of memory and you forget so you copy something else Now you go back to retrieve the value that you originally put That leads to corrupted You don't really get that issue the .NET Framework runtime takes care of all the memory Let's do a little if we said that we can have what happens if we attempt to create a second handle Let me do this real quick. Let me go to myCar and the properties like the Then we'll set the Model equal to that Cutlass Supreme and then Finally, we'll set Now, keep that in mind, we've created a new object that we're referencing using Instance of the car and we're holding on to it But what if we were to create So my other car, what have we really done right now? We simply have created a handle, but we've not attached of cars in our computers memory. At this point, what I could do Now, what have we really done there? Well, we've merely taken one and we've created a second let me copy your both referencing the same bucket Now, to prove that Console.Writeline and we Just give me a second here and myOtherCar's Model, myOtherCar's Year and Let me separate these two different Then a Console.Redline Now let's run the application. You can see that even or set the properties copied the reference to the car into a new variable I can still get to the values that are in memory because they're Now I can even do where I actually change something, myOtherCar.Model equal to the 98. That was the large style Let's then go back to and this just to prove that and I'll say, &quot;Hey.&quot; Let's do that. We're going to use our reference called change the model from the value Then we're going to say, Hey, show me what's in the myCar object. So now we're going to and you can see now we're printing It's the same thing my other car because they're I just want to emphatically As you can see, we have now two references to the We essentially attach the second we can use either one to retrieve the data in the If you don't like that analogy, maybe it helps to think of I have a balloon and I have two What happens when I I'm still holding on to the balloon, but what happens when I The balloon now will fly away, and we'll never see it ever again. As references go out of whenever the current leaves the current code block or those object null intentionally by then the number of the number of handles to the bucket, the number of strings they go to zero. So here again, when the. NET Framework runtime looks that have a reference count of zero it will remove those We talked about the two instances in which the connections to One is that the reference so whenever we create a it will continue to as we're inside of this main method. But once we exit out that variable goes out of scope. it's no longer available for The same would be true if we and defined a variable. As soon as we go out of we have finished executing all then any of the variables that were declared inside of that In this case, we would lose then any references to created in the context That's one instance references to objects But the second is if actively take a role in cutting the strings or removing the handles from The way that we do that is by The value null is not zero, and it's not an empty string, it just means indeterminate. In this case, what and we'll set myOtherCar and when we do this now we'll remove one of the so we're back to just one To prove this, let me go ahead and copy this little section of code, and go here and put it below this, and when I do that, notice what happens The exception is that there's a null reference exception and the reason why it was a null reference exception is because we have now The handle does not point and yet we're still attempting to access values from so we get an exception Now what will happen the second reference like Well, at that point now we have removed all the even if we were to either myOtherCar or myCar, either way, the references and so now the object some indeterminate time in the future by the.NET In some situations, this indeterminate period of especially when the object in memory is holding on to some maybe something like a reference to a network connection or a or holding on to a handle Again, we don't know exactly runtime will actually execute and that might pose a problem In these cases, you a more deterministic approach to requesting that.Net removes if necessary will anything that needs that object to completely get rid In these cases, you deterministic finalization. That's a little bit so we're not going to talk about Just keep in mind that null or whenever we go out of scope, we will be removing all the But the .NET Framework runtime it's ready and willing to remove those objects In most cases, that's not a problem. Occasionally, you're a situation where it is a problem, know that there is a remedy for it called deterministic That should suffice really what's going on whenever we create new instances of objects, how objects are and then at what point Let's move on and talk I said at the very outset that a constructor is merely us as developers to execute code at the moment that a new There's something really on here in this line of Did you notice that whenever and we give it the name of the class that we want to create also calling it using the Why do you suppose that is? Whether you realize it or not, you're calling a method whenever you create a and that method is referred It allows you, the developer, the option, you don't have to do this. It's an option to write some code at that very moment whenever a new Constructors can be used but typically they're that new object into a valid state, meaning that you can the values of the properties and so it's immediately usable. Now, let me give you a Let's say that you want to create a constructor that a property of the car at the point whenever you That property is available immediately in the whenever we begin to work with Whenever you actually want you would go and create In this case, what I'm the make property to Nissan. By default, whenever we we're going to set one the make property to Nissan. Now let me say this as well, you might see the keyword this used that this keyword is optional, it refers to this and it's just to help clarify where this variable name or When I see that this keyword, I automatically think, Oh, that's part of the declaration It's saying that you want to access a member of this class But as you can see, it's It might not be in yours, which lets me know that I could actually remove this You might see that though just understand what that is. Now if we were to go ahead, and create a new instance of the I'll actually comment Like so, and then I'll comment out the code that we We can leave the rest Notice that the very first item that is displayed is the make of the car, and it's set to Nissan. I didn't set any other properties. That's why we didn't get any other but hopefully you can at least see how we go about Now, admittedly, it sense right now why but I'm showing you the not the rationale, necessarily, but the rationale is simple. What we would typically put any new instance of an You could load values into the from a configuration file or from database or some again, to get that object into a valid state so usable at the point of Let's go ahead and talk about You'll see this frequently with objects in the.NET Just like you can create your classes by changing in other words, the type of the input you can do the same thing You can create an What I'm going to do is create an overloaded constructor Now at this point, the method signatures are the same, so I'm going to get But to modify that, I will merely add at least one but I'll go ahead and Then here in the body I would Make equals make. This Make is in reference This 'm' in make is the name and it's a good convention to use the same name for readability You don't have to do it this way, but just keep in mind two different items as far It's not confused. You but you will be able to Now you might ask, what's Well, in many cases, whenever you create a typically you don't want to You would want to create a new instance of a class, so my third car equals new car. At this point, you can Notice here that underneath I have one or two ways that I can either give it no input four strings as input parameters to initialize that new instance of car and put it into a Here I might go Ford, escape, 2005, white like so. Now I have not only created a new instance of the car class its values by calling its to populate all of its values What would happen if remove these two completely? What if we were to comment You can see that we're still using for our new instance of car that would suggest that but we don't have a Why is this working? Why isn't it giving us an error? Well, the reason is because a created for you whenever It will be a constructor without any input parameters but it's essentially the equivalent except with nothing inside of it. That's created No matter what, you're going it just won't do anything for you. The implicit default constructor no method body, but it allows you to make calls and create new instances of It's actually just Again, it compile time, of course, by defining it yourself, you're taking control of the Let's talk about the You've seen static around I said, let's ignore that for now. We created our own methods, and I said, we have to I'll explain later. Well, now is the time. I want to ask a question, that whenever we were working we never had to the console class in order That combined with the fact that whenever we wanted we could get to this moment in time by using the but we never had to create Furthermore, whenever we with arrays and we wanted do you remember we and then we passed How is it that we were able to creating an instance Well, in each of these cases or specifically those their methods with which means that you do not a class in order to In some cases, they may have meaning that all of its properties You can create your own static Again, the objective here just help you utilize the.NET So just know that some of the classes and methods Library are static or require you to create an instance of the class before you call Static methods will without first requiring you to Just so you can see how this works, we can create a static method In this case, we'll go and here we'll do Console.WriteLine Now we can go here near the very and notice I didn't have to I'm using the actual itself when we run the application. Before we go too far here, let's comment out pretty much Let me go down here. Just make this so that we don't run into any potential issues here. Let's run the application we were able to successfully Now, what would happen reference one of the Let's just print out Notice that I immediately get a red squiggly line It says that an object reference is required for the non-static field, method, or property called Car.Make. It's important to keep in mind that there's a fundamental working with classes that have static members versus Instance members are the working up to this a series of properties that describe a single instance of a They might be methods a single instance of a car like whereas a static member, like a static method in this case, they don't really operate They're more like utilities. You can call them at any time. They don't depend on the state of a given instance of the class they can be used at any not really tied to one specific car. They're true of all cars and Static members versus just keep those two You might want to ask the question, why would you ever create a static Well, that's a bit more complicated. That might require of things like design patterns to common problems for heuristics which are more the best ways to go I just want you to know that there's a fundamental difference a class and instance members of a class and it's easy If it's a static member, it'll have the static keyword and in which case any instance members like instance properties or even that act on instance properties. They require an instance Just know that there are a given class and that you're going to encounter working with the.NET Why you would use one or the other, well, that's really I would say this that typically, I would recommend that you don't mix and match them in the same class. Clearly, not everybody you'll find that many times, but it's not really understand why you would just know that that that's why you don't always a class before you use in this case, a given method. Let's recap what we talked We began talking about the how we create a new what that's doing in terms of creating an area in returning back to us an address, a reference to that what happens during the lifetime what happens whenever we remove all of the Talked about the role runtime and how it's keeping references to objects so that it can perform garbage collection on to them in memory as means and making the memory available to other applications or even We talked about constructors can use them to put a new instance of an object the point when that Then we talked about We looked at some usages of static members inside of the.NET We looked at creating our own We talked about the difference instance members and how You can't mix the We didn't really talk choose to use one over the other. However, that's again a Hopefully, all of these If not, don't continue on and hoping that you'll just catch up to them at some Make sure you thoroughly understand If you are continuing, great, we'll see you We'll see you there. Thanks. Hi, I'm Bob Tabor with Developer University. For more of my training please visit me at devu.com. Now we haven't spent a lot of time It's actually extremely important. We recently learned that it also We want to spend a little bit understand the scope whether they be variables holding to complex types in Not only do I want to but then I want to use that as a launching pad to explain private that we've our course up to this point but Before we talk about that, let's talk about variable scope. Let me start by saying variable inside of a block of code, that variable is only alive for the life of that code block and any of the interior code blocks or code blocks inside Meaning that when the code the variable that was defined inside of that code accessible and its values are disposed off by the.NET We'll start by looking impacted by common code blocks that we've been working and then we'll use that You can see that I've UnderstandingScope and you can pause the video and I want to create this on testing how variable scope works. I'll start with a pretty Again, the concepts also apply to object references not just variables that hold Let's start by creating a simple for iteration statement through 10 times and we'll do a Console.WriteLine and then here, we'll do We can see our results and As we would expect, we can see values from Now, what if I wanted to access after the closing curly We'll notice that I'll get a and if I hover my mouse cursor over, it says that i does not exist Why? Because i is now outside we defined i inside of the for loop, it's available inside the in the code block below it but Let's comment that up. Second, we'll continue by going and creating a string of j What we'll do inside is just go j equals i.ToString. Now let's go outside of our loop where we'd be able to Let's go outside of the four, and well, we'd we be able screen the value of j. We were not getting any errors, so let's run the application. You can see that the inserted into j was the value nine. Since we defined j of this of the for statement we can access it inside of that code block and outside Next up, let's look at where we'll actually create what's called a field or a private field. We'll go private static A private field is like a property, except it's private in nature, but it is available to all We should be able to see Let's do i.ToString. We should be able to see it here as well outside of the Let's go ahead and You can see that second Console.WriteLine will but the real question to create a helper method? Static void, and we'll just call Console.WriteLine, is the value of k from and we'll do that. Now here, we'll call the HelperMethod Will we be able to access set inside of our for loop Let's run the application, and you can see that get the value of k Why? Because k was defined at, I guess, you could It is a sibling to static void therefore, it's accessible as well as any of their Hopefully, this is Let's go inside of the for loop now, and here what we'll do is So if i is equal to 9, so on the very last run of this, then let's declare and we'll set that to i.ToString. Then outside of that, we'll go Console.WriteLine the value of l. As you might anticipate, we will see that l does not Why? Because we the string variable l inside of Outside of those curly braces, it's no longer accessible, so we have to comment that out. Hopefully, this solidify in your that we can use in determining whether something's in If you had any confusion about this, hopefully, that cleared Now let's move on to the larger We've been creating classes, specifically the car and whenever we were I would typically use Occasionally, I would private like I did here Private and public are both They're used to implement a tentative object-oriented which is actually pretty important. In a nutshell, you should think Whenever you think of a black box, maybe you can think of one of Maybe your parents or I remember as a kid, us having one, there You had to get up, walk across the room and actually the TV in order to tune to You had another dial where You had an antenna in the back, so you would connect this and you had another one where Everything else about the Now, as a kid, I was my dad would pop off the and he'd go and try to fix It always seemed like absolutely nothing about All I knew were the the button for on/off, the dials to turn the channel, the dial to turn the volume up and down the antenna, whatever that did, and the little plug that would but frankly, in order to that's all you really You did not have to know anything All you really needed to in and change channels, and then adjust its volume, and that is exactly how your All the important behind-the-scenes encapsulated behind interfaces like public methods and Now classes might, in fact, have private fields like we or they might have private behind the scenes to enable all the magic that goes but the consumer of the class the inner workings of the class to operate the class. All they need to know exposed through the public In a nutshell, private can be called by any other I used the term private HelperMethod a number Essentially, when I use the I'm talking about a private method that's add some to those public methods anybody who needs to work with A public method is what's called by somebody some other code outside and private methods are by members inside of the class. Let me do this. I'm going recreate our Car class, and here I have a public The public method is and the private method is These are not very I want to keep this as Now, from the outside it's just roll this whole Now, whenever I want to go here I might want to work so I'll go, Car, myCar equals new Car, and then I'll do myCar. and notice that I can only see Now I might happen to know there are other methods also but I can't see them from outside. Their visibility is hidden to me because they're marked as private. All I really need to know is how If I understand that all the implementation details but it'll work as I Here you can see that it's merely prints out the words Hello world. Now, whose responsibility inside the class it is to That's none of my concern. All I need to know is how to call In a sense, the consumer absolutely no idea that the All it really knows is that there's one public method and it could but it doesn't know any of the Now, I use the term in a the consumer of the car. The consumer is going to and a software developer is going &quot;Oh, I see how it's doing its work. It's actually making a call out to this other private There is a sense in which but it's private from the which is this main method. It can only see the not the private helperMethod. That's all we really mean here. Now admittedly, this It's a simple example value is to illustrate the that we typically want to our classes behind well-known In this case, a friendly The purpose of this lesson is to scope because we said especially variables that fall out of scope, their objects will be Furthermore, it's important to understand that there that you have access to and parts of classes that you Now, if you ever decide your own custom classes someday, even a library of the business domain of your company or of your it could be a game, you should strive to expose public methods and give a obvious way to call the public but keep all the other helperMethod, all the other internals privately tucked away and not You don't want a developer to all of your methods and use your class in a way in You want to give them a way to use your class properly that you've designed and that you've made available through This also will help to remove any ambiguity in the and it should be much All of these things were under developer's build the.NET In the.NET Framework Class Library, methods and properties are Now, they might also be using private fields and private but you would never know. They may use other types of There's actually a couple available However, these are primarily either in a rich inheritance classes and you're building a rich inheritance or whenever you're working with a very large library that's That's when some of these other accessibility They're topics that of this absolute beginner series, but topics that I do cover If you want to know more about object oriented programming and encapsulation by all We are well past halfway You're doing great. We've already covered the most now we're just adding on details, so you should be encouraged by that, that you're still plugging away We'll see in the next lesson. Thank you. Hi, I'm Bob Tabor For more my training please visit me at devu.com. Previously in this course, I said that the .NET is merely a collection of classes, each containing methods filled with functionality that we can but we didn't have to write. Microsoft has spent man hours building and and we can benefit from his classes and methods Now, the Framework Class Thousands of classes, each and so the developers of the decided to split this library Just imagine if you had to into memory every time you First of all, it would Then secondly, it the maturity of your They split up the code These code files are In fact, even the they're ultimately compiling As you can see, I have a new project called AssembliesAndNamespaces I've added two lines of code. If you want to pause the video and In lines 13 and 14, I'm merely printing Hello and then pausing the However, even in this application, a executable.NET assembly is being generated the very run the application Now, if you want to take go to your project's directory you'll see that there's We avoided this very but now I want to talk The bin directory will contain both ultimately a release version. The debug version will contain additional files required connect to the execution of This allows us to step through the execution line by line in Now, we can additionally, then after we created our application we can say I want to create the application and go to Build and it will create a version any of those debugging symbols without that connection If you look at the file system, you might be a little also has a lot of those but they're basically ignored. But that is what's going Notice that in each of these cases, we're building an executable we could even just the application from Now that is different from the type of.NET assembly create a library of code that can be shared In that case, you'd be into a.DLL file extension. We can create a code library. I'll show you how to do But at any rate, the.NET Framework has to any computer where you want your Basically, every copy of Windows runtime and the class libraries installed in a location called the global assembly cache. Every.NET application can of assemblies in that one Now, you might say that your application and set you may not realize that a file new project the Console Window project template, you were actually to those files in the .NET That's one of the routine for a project template. If you take a look at the your project in the over here on the right hand side, you'll see that, there are some references already System.Core, System.Data, System.Net and so on. We'll talk about what these but that's indicative of the into files of the .NET Framework Class Library that the creator of the Console Window be or might find We'll come back to Now sometimes you'll need an assembly from the .NET has not been referenced and I'll demonstrate how to do that Or perhaps you need an assembly created by a third Again, I'll demonstrate not only how to create your but then also how to to third party assemblies as well. Again, there are classes defined in the full.Network In a few cases, the same class name was used, or at least there was the When that happened, the creators needed tell one class from a so they introduced the name spaces are like last Think about your name or my name. For example, somebody might say, &quot;Bob loves coffee&quot; You might There's like a billion But if somebody were to say, &quot;Robert Theron Tabor likes coffee.&quot; Well, that narrows it down. I'm pretty sure that I'm the has that combination of I could either use the full name, Robert Theron Tabor to or once we understand the context maybe we're talking about Then you might say, he's the only Bob in this room, so they must be talking about Bob. The same idea works with your code. We could use the full name of the classes that we need For example, the full name of the console class is actually Or the System.Console class. That's the full name we're calling the However, you'll notice that I didn't have to use the Well, because we used the very outset of this 'I want you to look inside of find a class reference recognize and so the it finds the Word &quot;Hmm, I wonder where It begins to look listed in the code file I found a class name called Console inside of a So it thinks, &quot;All right, well that must be the Console Occasionally, you might have and you've added using these inside of your code file. When that happens, you merely the full name of the class instead of relying You'll notice here that by default, the program that CS file has a number of different In my text editor they're which indicates to being utilized at this moment. We could remove unused using statements from our code and our This is a convenience for us, that was set up for us by whoever created the project template for To further illustrate this idea, let's talk about how we can go about using the.NET Framework meaningful things and how the source code or the classes we need to do something For example, maybe I want to How could I go about doing that? Well I might open up bing.com, and I'm going to type so I'm going to limit just those that are This is going to help me find the documentation by Microsoft as opposed to third party articles or So site called Microsoft.com write to a text file One of the top results are from msdn.Microsoft.com and msdn stands for the Microsoft Developer Network. This is your primary a software developer on In this case, here's a describe the code write in order to Here's a long code example. In fact, it gives us three could use one of these examples in our application in order We might decide to go ahead It comes close to what here and I copy and paste it into my application and I the extra information here it and I may need to I believe I created a folder Notice that it's going to use a class name file and a In this particular case, notice that we already are given the full name name space of this What we could do is actually remove add a using statement Notice that, the compiler will our application and got a little message there because lets go back to the bug We don't get any feedback up our Lesson 17 folder, we would be able to find Great, so now we can use that little snippet of code but notice it all msdn finding a code use and then we can modify here that we want to then we so that we start stitching That's one way that we inside of the.NET Framework Class library that we need Let's try one more quick back to bing.com and to cycle in on Microsoft.com. Then I want to do as a string and I might This is a different style web page. There is one web page on msdn for every class and every method in In this case, we're looking this download string method at the remarks and some the syntax and some of the what we ultimately get to that we can copy and that we can That's what happens this time, it does not recognize the Well, we may not have the assembly or we may have the but we do not have a using statement that would To remedy this, I'm going to hit and it says that it found this automatically add a using statement for the System.Net class by merely hitting the Or I can just go ahead and say, let's go ahead and use the I'll choose the first option using the Arrow keys and the Notice what happens, it adds a then notice that the It is obviously in there's no red squiggly line, so it looks like it found the correct class that Now we merely need to give msdn.Microsoft.com like so and then we will just write Then we might even rework our application in attempt to save that into our Let's see what we get here. Hopefully, this will work, we'll run the application. It took a moment, but HTML into our console window. We can see the closing body Now, if we were to go find our Lesson17 folder, and open up our text file, we see here is the scraped off of msdn.Microsoft.com. That pretty much wraps up what We are able to utilize methods in the.NET we can find what we need by doing simple searches in bing.com using Psyco and Microsoft.com to find the classes in the methods Once we find those work with and we find maybe we can copy those into our program, and we may need to at that point, fix the references to those classes. Now, in this first case, remember that it gave of our file class System.IO.File. But in the second case, we had to provide System.Net in order for the compiler to find the class that we were wanting to Ultimately we did that with the keyboard to add a using statement We talked about the provide disambiguate We talked about the using creating a shortcut we're not talking about every class in the.NET Framework Class Library. We're only talking about the classes that happen to If you find Mr. C# compiler, if you find a class that look in those namespaces We're going to continue on We'll see you there, thank you. Hi I'm Bob Tabor with for more of my training please visit me at DevU.com. Now, previously I of the console window added references to those assemblies in the.NET Framework Class Library, that we as developers might find useful for the However, if we need an assembly containing some portion of that has not already been then we can simply add This is one of three ways to add a reference to an assembly. The first being an assembly from Now there's a number of The easiest way, I think, is to go to the Solution Explorer, and then right click on &quot;References&quot; Here you can see there tabs along the left hand side that the various types of assemblies We want to choose the the assemblies that are part of Now, and you can see check marks next to a number of the system.this, system.that, These contain a number of different classes each and these are just If we needed something here then we could to just select a checkmark next to the one that we want to add to our project System.Net You can see that is System.Net into our project Now we can reference any of the methods in that That's one way if we need to access some part of the.NET Now, in addition to that, there are libraries that Microsoft and there are libraries that are created other companies that are very specific purposes These are often common features that many applications need that's However, they're available through which is a repository that's maintained by a foundation but ultimately its own entity. There are a number work with NuGet in Visual Studio, I'm going to choose the I find that to be the easiest for those who are just getting because I'm a more visual person. There's also a textual, almost command line style allow you to do similar things Let's go to the tools &quot;NuGet Package Manager&quot; and then &quot;Manage NuGet Packages This will open up a tab, undoubtedly no matter what it will look different on your under active development and it has changed frequently. Now, if there were a package that we wanted we could simply search for it. Typically, we can learn about these things through blog Say for example, I wanted to access a database from my console and I wanted to use the Entity It's available as a this Manage NuGet Packages I can select it as one of the options you can see it's one of the most frequently downloaded. Furthermore, I would then choose which project in my solution and I can choose the There's some other options as well, I'll leave you to to I'm going to go ahead and the terms for using In this particular case, it installed just a number of references to assemblies and copied them down locally to my computer. Now, depending on it could not only but also sample source code files. It could actually run macros It could include things and even graphical assets that This is the second way adding assemblies and But the third way that I want to to add a reference to a class Now we haven't created a class so this is a perfect that and then add a reference What I'll do is start off Let me go ahead and let you In the New Project dialogue, I want to make sure to choose C#. Then I want to choose Class Library, notice that I chose have a little Nu.Get it's just looks like several Now, this will undoubtedly but just make sure that it's Here we're going to call this and I'm going to go ahead and say, I don't really care to save Inside of this, you can see all I have is a Class1.cs. There's no static void main, and so what I'll call and we'll have one public method, so public string ScrapeWebpage and we'll create a version of this where you Then we'll create a Where you provide the In this first case, down some of the code that we've worked with previously where we were actually using download a page and then I'm just going to generalize this. Remember what I did &quot;Control Period&quot; on the add a reference to System.Net or add a using The next thing I'm going to this hardcoded string with whatever gets passed in by the end user. Finally, I'm also going resolve this reference It's in the System.IO namespace, so I'm going to add a However, in this specific case, I'm not going to write this to a file and this In fact, what I'll just been actually downloaded Now, the second version, we'll do something almost identical. Here, let me replace and we'll get rid of and write this to the file path that was passed in Now, truth be told, this might be a good situation where take these lines of code and create a private helper Maybe that's a good idea, Private string GetWebpage and we'll pass in the URL here. Now both of these can just call, GetWebpage like so. Here we'll go string equals GetWebpage. I was able to use a encapsulate the functionality of actually getting the and then in this case, I was able to extend the ScrapeWebpage method to include writing that to Now that I've created this, and let me go ahead and right clicking on it and I'm going to choose to I could name it anything I want, it won't matter, because the name of the But at this point ahead and build the solution. It looks like it built. In fact, let me go ahead and Great. Now let's open up a I'm going to call this MyClient. This will be a console and we'll click &quot;Okay.&quot; What I want to do, is to first of all, add a reference to that deal that I'm going to go in right click on references and select Here I have some choices. Ideally, I would be able to look and find it in will come back to that and do But I may have to go and the file system to find this, and unfortunately, this is However, hopefully we can I'm going to navigate to the release directory and and then I'm going to and then click &quot;Okay&quot;. Now that I've done that, what I should be able to do but it doesn't see I'm going to hit &quot; Control&quot; and notice that it will find The Using MyCodeLibrary namespace. Scrape myScrape equals new Scrape. Now I should be able to go myScrape. and there we go, ScrapeWebpage give it a url. Let's go. That should return a string. String return or actually Let's move this over a little bit. Then I should be able to Console or write. Now we should be able It takes a moment, but it pops up. What we're able to do there? Well, we created a Whenever we want to we can utilize this and Now did you find how inconvenient search around whatever we wanted I had to go, and browse through But I do want you about what happened Let's go to my projects. Let's find that client and let's Notice that it copied MyCodeLibrary.dll into for the client application. That's one of the things the third party assemblies But wouldn't it be easier if we were to start this over from scratch, and we were to create a single and the code library Let's do that now. I'm going to actually open up Here, let's create a new solution. What I'm going to do is actually and choose other project types, and choose Visual Studio Solutions, and find a solution. This might be in a different place, so you may have to but you ultimately want to choose blank solutions that should We're going to call The solution's name but we're going to do is add The first project that and there's a number of but it goes off to the right I could add new project, file add New Project and then we're going to We'll call this the ScrapeLibrary. Then I'm going to choose to to our solution called app This will be the ScrapeClient. In our ScrapeLibrary, what I do just for is actually go to the work that and I'm going to copy Let's come back here, and I want to paste Yes, I'm going to have to resolve these class names by adding using statements That should work. Looks like I so let's go public class Scrape. Then let's make sure to put Now we get it working, and I'll rename this as well to just scrape. I could have left it, call the class one to but I'm going to go ahead clicked on the project Now what I want to do in the client to utilize is I need to add a reference to it. So here again, I'm going to right This time we go to projects, and notice if solution is selected, the Scrape Library I'll choose that and click &quot;Okay.&quot; Now we can utilize ScapeLibrary Let's go ahead and just and it's not going to find it. The Here Control period, and I need to add a using statement, since I renamed it. Now it's called ScrapeLibrary. I'm going to add the using statement to the code file. In fact, I don't have I can just copy and paste it from We can rerun the application. It says a project with an output type of class library Why do you suppose that happened? Well, because there are actually and you can't execute So what we need to the client project and select It's going to close that, the application. It'll work. Furthermore, if we were to make any changes to how the let's say what could we do here? That's interesting. Let's do this. We'll make a change in one spot equals THAT'S ALL FOLKS for the very end of that I'll return content this time. Let's make sure we We've made pretty big Now when I run the application, it will recompile the DLL. It will add it to our it adds, &quot;THAT'S ALL FOLKS&quot;. The only thing I could think Hopefully now you can see that there are several different If it's part of the .NET then obviously there's If it's a free or open source, package that's available from NuGet, we can use the NuGet package our own third party class library and then add a reference Or if we were to create the client and the library inside then we can reference it in But just under the and we get the added benefit not having to go through two copies It'll update the next time we hit, run it or recompile That's pretty much We'll continue on the next Thanks. Hi, I'm Bob Tabor with Developer University for more my training please visit me at devu.com. Previously, we looked at arrays a sequence or group of related data together inside of so we would create an array and so each item in the array We would also provide the number the array by defining that number between a Now that we have that we could add items into each element of the array or the elements of the the array using a zero based index to index in and address one Now, once we have the data we could do some interesting things. We could iterate through the array and investigate or we could even pass the array Pass it in, for example, as an input parameter to a method. But you recall that time, I also said that at some point I even gave collections a nickname, calling them arrays on steroids. I think you're going to collections are great whenever especially those we've been working with up to this point in this For example, the car class Now, as far as the .NET Framework it will often use both depending on the need. But I think you will probably wind up preferring to your applications because of and aggregation features that are available to collections a language called LINQ L-I-N-Q, which stands for the It was a very innovative feature whenever it was first a number of years ago in C-sharp Other languages have since But we're going to dive into that topic of LINQ and what you can do with it But first of all, let's We're going to talk specifically lists and dictionaries. Now, truth be told, there's probably a dozen of collections that you could They each have a superpower. They each have a very where they're intended to be used. I find myself using lists and So we're going to focus But after this lesson, by all means, feel free to go off and learn all of the additional collections and what they can do that's a little bit different than Suppose that I have my car lot and I want to write an application that So I need some way to collect all the car class together into a Now again, I might but I think I'm probably going because of the added going to gain using collections. We're going to talk about a bunch of different types of collections, but I want to start off with a conversation about an that's no longer why there's a newer style and it'll help you maybe understand As you can see, I've got a project called Working With Collections Please take a moment and create I'm also going to paste I've defined simplified version of the car class that Then also, I'm going to as you can see there at the bottom. Very simple classes. The next thing that I'm going some code to actually create of these classes and then You may want to pause the video in the code that I have copied The very first thing that I'm going a collection and I'm going to work with something called an array list. Let me just say this they are dynamically sized, which is one of the great benefits. You don't have to I need to add one more item and Remember with arrays, I said it was possible but it's a little bit of Not so with an array list. That's one of the big benefits. You can just keep adding items It will also support cool You can easily remove items Let's go ahead and create a new When I do notice that have a reference or a using so what I'll have to do is hit and you can see that it is in a collections. I'll go ahead to my project and so called myArrayList equals Now that I have my array list, I can begin to add items for example, the first car, and then I can add a Now, one of the problems with the old style collections like no easy way to actually limit the type of data that would be For example, I want to but I might accidentally add a book into the array and There's no complaints. The old style collections so much that you can put At first glance, that But what if I wanted to actually the cars makes and models? Let me start by at the very bottom here type Console.ReadLine so we can get through that formality and then I'm going to What am I going to work with here? Let's just say I'm going to work for each car car in my array list. Then I might do a Console.Writeline, and let's just go car.Make like so, and print that to screen. You must run the application, and we will get an the third item in our array list. Notice that it is printed but when we get to the book, it says that there's an In other words, we could not convert a book which was the third item so when we get to this spot as we're iterating through each we're going to hit a problem here. The fundamental problem our collection to store so we cannot work with a strongly type fashion. Now, what I can do, one of the neat features here, is that I can actually remove that item prior to going and we should just be able to execute the application That is at least one of But unfortunately, the downsides Let's go ahead and take a look The first, I said, was that we were going and more correctly, we're going to look at something Often, you'll see it referred That of T in the term generic might require a When done, that was first released, the first set of collections allow you to put anything like we saw here just a moment ago. Now, it might make but typically, it doesn't, and it leads to potential Now, at some point, then, C# introduced the and specifically for our purposes, they released a series A collection is essentially generic but it requires specific by giving it the data type that should be allowed We have a generic list but a specific list to car so that we can't even add Let's attempt to do This time we're going to go List, and notice that I'm and in-between the angle brackets, I'm going to say what In this case, I want to List of car called myList equals At this point, we can go ahead We can add car list to myList But what happens when we attempt Well, at the point when we attempt we get an exception. We hover over and it says it That makes a little bit more sense. It is specific to a car data type, so we cannot add a But from this point on, we can work with it now so each car car in myList, and we can use the and we would get what create a list of our car models. That's one of the big benefits is that it allows us to work with the specific data type and only allow those types This is probably the most popular of all of the But I'm going to show you called the dictionary. A dictionary is similar to, think of Webster's dictionary, where you have a word alphabetical order and find the Then once you find the word, you can look to its right and There is a key, which is the word and then there is the There are two components to there's the key and Typically, when you see a it's going to be listed like In this case, what we'll do is This allows us to find one Now the key should be every entry in the dictionary. In the case of people, there might be some identifier. It could be a customer it could be a Social Security number if you're in the United States, but something that one entity inside Then the value can In the case of, again, a customer, you might have the but the customer object itself is the value that we actually Now, in our case, this because our car class and we know that we can have multiple cars that have the They may have different colors, they might have been but you can have multiple cars in the car lot that have the exact same make and model. Neither of these are good but there is something called a Let's do a prop string That will differentiate every car in the world that's been created. What I'll do is come back up car1.VIN and I'm just going to I think they are typically something like that; But this should uniquely especially every car in our car lot. Now what I can do is create by starting off and saying and they were going to give The VIN will be of type string, and then the actual value We're going to call equals new Dictionary of String Car; notice the InteliSense help me out by essentially giving and I can just hit the semicolon at the end of the line for it Now that I have this, what I can do is go and we'll do car1.VIN and The car1.VIN, again, is our key into the Likewise, we'll go At this point, here, if I were to attempt so Console.Writeline, and I need to find a I can allow a user to type in the VIN number and I can look it up in the dictionary quite easily. Then there's a number of I think probably one of Let's go back and not use the dot. Here, I'm actually going so we'll call this B2. Then now we can reference the Dictionary of Type car for example, and print that We were able to find Hopefully that makes sense. Let's continue on, if you recall when we originally let me comment all this out. We were looking at a raise, I said there's some interesting initialize an array with We're creating an array of strings called names I give it a collection of names Now I have an array that has four elements in it and it's already been initialized You can do the same to initialize objects at to do that will use an object In fact, let's go ahead and just approve this all works is have up here as well and get we'll come down here and go car1 equals your car and I use that same syntax the curly what I can do is actually define Let's just dream large here and go make in the model would be a 750 and we'll make it an ally a vehicle information of C3 like so. Now I've done the actually three I create a new variable a new instance of car and access to that address in the variable name and then I go ahead and populate the car object at the moment that I create that new instance by using Some people don't like this. It looks like it might be doing but I think you'll find that if examples like I do frequently that the shortened syntax actually saves it's just fine it's ahead and while we're working here, let's go ahead and create a Toyota. We'll set the model equal to a 4Runner and we'll get Like so and now we can work with the cars just like we this might not be so is the object initializer syntax. We can take this one it comes to working we can use collection I want to point out one other a constructor to make this before that we're able to go ahead and set these attributes just like we use the syntax there. Well, let's now talk initializer which can but it's essentially the taking it to the next level here. In this particular case, let's go ahead and called my list equals Now, at this point, notice that I put this I typically might keep this on the same line just here and now inside of this I can create a series In fact, what I can is use an object so here we're going to make set down the model equal to Cutlass Supreme and then the so comma and then we'll to add to this list its object initializer setting its model equal to an it's VIN will equal F6, Now what I've done, all in one line of code a collection and I've added two objects and in I went ahead and already initialized There's a lot going on there Great. At any rate, just wanted to recap the things that we talked about in this lesson. First of all, we talked about the difference between promised that there will be a more obvious set of features which we'll learn about We talked about the versus the new generic collections. We said generic collections allow us to make sure that we're only adding specific types to our collections so we specific by passing in the allowed to be referenced Then we looked at object shorthand syntax for initializing the properties of a new instance of an object and then finally within a collection are we creating a new collection, but then initializing it with new In both of those cases then we We can do it all on Now, honestly, unless a lot of example code like I do, you may not see this as often some hardcoded objects for But I wanted you to be aware because we're going the next lesson and we'll Hi, I'm Bob Tabor with for more my training please visit me at DEVU.com. In this lesson, we're the language integrated query some years ago to provide a way to filter thoughts and perform collections of our data two different styles of Links will resemble the structured Prairie Language If you're already this will at least feel familiar. Then there's also a method syntax which might feel more familiar However, there is one thingy that we got to figure out I think I have a good way hopefully you'll trying to do there but is you find the code for be a before and after copy the code in the before folder in your project's open it up and you'll be In the understanding on project, you can see that I merely created a car class and then a collection initialized cars filled with attributes search and sold on and that'll give us What I want to do to a comparison between links query syntax then links method You'll see the obvious about the ways in which but let's begin with a all BMW in this list of It's as easy as this, and we'll talk about just a moment but BMW equals from car any cars looks where car.Make is equal Now, let's come down here and Let's go console that right line and let's provide the vehicle information actually, let's do this. It's good for each tab Console.WriteLine and then we'll go car.Model and car.VIN. Let's go ahead and add some of our replacement characters in there. Now, let's go ahead and see that we get three cars so of all the cars, I think there's five or those VINS A1C3 and E5 are BMWs. If you take a look at the Very quick, concise way of finding only those cars What if we wanted to add Say, for example, we where the cars year equals 2010. We could do that and rerun see that it just finds one of the It is this last one, the 555i. That is the language the query syntax of Link. Let's go ahead and comment the method syntax and BMW equals myCars.where. This will give us all the BMWs, so let's go and run that. It gives us the same Now, what if we wanted to the year is equal to You can see we found just This might take a little For the moment, let's just ignore this last part, we'll talk about that in a moment. But what you see here, in fact, the whole thing in closing parentheses is and you can think of Essentially, what will happen is, you say given p, so given an instance only return back to me those instances of car where See how easy that is? You could think of this as and then this is When it's true, then and add it into this little so now that we have a subset of all of the available Furthermore, I just added the and make sure also Well, that filters out two of them. Again, a Lambda expressions so for any given item in the collection it has If it does then we can add it to this little subset collection The var keyword it has a very different connotation in C# than it does in other Here I would ask that about var from maybe JavaScript or Visual Basic or it does not mean the same thing. In this case, the var going to let the compiler figure out what the correct data type is. I'm not even sure what gets returned from this little If you were to hover your you can see that it's going to What's that? Not entirely I don't care what it is, I know that it is a To prove this point just a moment a little the var keyword can really come know what it is that's being Again, the var keyword We're just going to let the the type is at the point Let's move on, and let's take a I may want to find an so I might go orderedCars order by car.Year That's how I would take order them in descending Let's just change this from bmw, let's put this to and this might help if itself so I'll add in Let's go ahead and You can see it starts at 2010 works its way back to 2008. Awesome. That same it in using the methods syntax it would look something like this. var orderedCars equals myCars.OrderByDescending. Given each item in the those or actually order We should see the same Starts at 2010 and works Again, in my opinion, this is more concise. The only conceptual hurdle is just make sure you understand In this particular case, it's not a filter, we're just saying, given we want to order by this the year and then add that ordered item to our new Now, there's a lot of interesting and I'm only going to work with the methods syntax The first we might do for example, if we want to so let's go ahead and grab the first item where the make is equal to a BMW like so. This will give us the first car; the first BMW car in Let's go ahead and console. In fact, let's change the so Console.WriteLine. All that right. firstBMW. just a VIN number should be We can find that the first or we can do the first BMW, and we can actually start by ordering by descending You can see I'm chaining we've talked about This will return a and then this will return a Then we'll print that single in this case E5. The list is first sorted and then we grab the first one that That's how we can use first. We're going to comment that out. We can also do something like this, Console.WriteLine., and myCars.TrueForAll and say the year is greater than 2012. We need one more right there. Is it true that all the cars in my car lot that every one of That would be false. Well, then how about are they That's still false because that was created in 2008. If we were to change this to 2007. Are they all at least True, so that's true for all. Very helpful in order to of them and see is this true We can also even do something of doing this for each statement at least two if not four lines of code we can create myCars.ForEach and then inside let's just do a I can do p.VIN and p.StickerPrice. Let's go ahead and do that. In fact, we'll just do that Hopefully, that all makes sense. Now let's run that Here we are, we're able and format their values, so you see how much more compact this looks than what We do it all in one line of code. Again, we're passing in our collection just call use that particular item's of our formatted string. Here's another interesting Maybe in each case we want In fact, here let's do this Let's keep that one and In this case, I want to each of the data inside of there, so I might take the sticker actually let's go minus equal to. This will take the sticker $3,000 from the sticker price You can see now what was if we See, unfortunately not going but you can see that what was $55,000 is now 52,000 what was 35 is Again, a lot of functionality Let's continue on with this thought and go and do something Do we have a car in the model is equal to the Here let's do a Console.WriteLine and let's see if they Yes, we have at least one the model is equal to 740LI. Now here's another good Here, let's just do and let's go, myCars.Sum, and here we'll say, sum up all the sticker prices. Let's see what the total value You can see that it's there should probably be a using a format code but We're able to sum up a single field across all objects in There's so many other but I don't want to overwhelm you, but I want us just to go in one This VAR keyword we've looked at, and I said that we use it because we want the compiler to figure Sometimes it's easy for us to figure out what the data Sometimes it's not so easy. To illustrate this, let's do what I want to do is call on myCars, I'm going to call the get type. In fact, all data types in.Net have this GetType method declared because it's declared on the grandparent of all objects called System.Object. It defines this method which will tell us what the type of a given object is and In this first case, what is myCars? Well, myCars is a generic list of the car data types so is the name-space and specifically, though, it's the car type. We're basically saying a list of car. That's what's being printed out whenever we're looking and that's pretty easy to see But once we perform an operation let's just see ordered cars and copy that again and and then I'm going to orderedCars.GetType the data type is for ordered cars. Let's go ahead and compare the two. Now, in this case, you can see that we're no longer dealing even though under the hood a list of cars the way that it's represented in.Net is that it's an ordered list of the LINQ.Car, Again, that makes sense. That's an ordered version of cars. How about just a regular Let's do that. Let's the data type of that is and Let us see what that is. Let us go and run the Here is this third one. The second one was an then the one where we just enumerable plus the So things are starting to It might be difficult for this ourselves if it were The var keyword is be able to create these and not have to worry about what the data type of it We know that it is a type of list. It is an innumerable list, whether it is ordered or not, and we can follow each our way through it or Now the last thing that is I am going to take and I am going to pop it If this stuff doesn't make sense, I wanted to go in one just to explain again the In this case, let's change Let's call this my new cars. Here, I am not going to return cars. I am actually going to do I am going to only certain properties of a car, and I am going to project What's the name of Where am I defining that data type? I'm not going to It is an anonymous type. What's the name? I have We can define types at runtime and only choose those properties that we need Why may not be obvious just yet, but I want you to this idea, what we can do here. In this case, let's pull out just car.Model. That is all we want. We are going to leave all the We are going to only put them into a new anonymous type. Where is the type defined? Nowhere, we just made it up and we are going to save each of those anonymous types into a new Let's go. Console.WriteLine, and then take a look and let's run the application This time you can see an innumerable plus where select list iterator, whatever that means, but then notice that the data type involves something that has two attributes, two string attributes, which I say all that to say this, that whenever you're there is a lot going on it all very easy and accessible, but it all depends on defining let the compiler figure we are not so worried about it, because the data type might be so crazy that we can't even Hopefully that makes sense. Just to recap the things we talked about the the query syntax and We looked at a number of the various LINQ extension We saw how we could break apart to better understand we are saying each item run this little mini and return back a given item Then we looked at how to tell what the types were and what the value and then we looked We covered a lot of ground, I didn't explain everything But the key here is just to and try to understand what it means. Look for examples online, make yourself a little cheat sheet, and you should be able to utilize these methods inside That wraps up LINQ. This will be the hardest to think about today, That is it, we'll see Thanks. I am Bob Tabor For more of my training please visit me at DevYou.com. In this lesson, we will introduce the if, else if else statement, and the conditional They work best when there is only But if you start needing to evaluate many different you might find that is a little bit more concise and That would probably be one of the only reasons and I will show you a second We will come back to the But first, I want to talk about a special data type called Typically, we want to limit the possible values Now, admittedly, we're already can go into a variable by virtue of the fact that we've given However, even within that, I may want to limit the number of possible values to just a handful. Typically in software development, you want to limit and ensure its validity An enumeration is a data type all possible values to only those that are valid and have For example, we might want to keep track of series of to-do items. Maybe that is the type of and each to-do item is represented by an instance of a to- do class. We may want to keep track of the current status of a given We may want to constrain the possible statuses that the task has not or it is in progress, or it is on hold, it is been completed, or perhaps it is been deleted. There might be some other statuses, but you can see how limit the number of options that are available for a status field or We could do this in a We could just concoct where one always and two represents in progress. I refer to those as magic numbers. They may have some meaning not readily obvious if you're As the developer, up at some external reference, maybe some code maybe they are not Maybe things have changed those code comments I may need to reference or different code to ensure that what what number two means in The same thing can be I could just use a literal string so I could use a literal string, not started or in progress. But the problem with literal strings is that somebody can misstype them, or there could be a space, and not started one time, and then somebody uses not started If you are looking for all started yet you may have those that have not yet because they are not or whatever the case might be. The great thing about an gives us a textual equivalent to a numeric value so that it will remove any ambiguity As developers, we know exactly and yet behind the scenes, it is still working with the number. Enumerations are used Framework Class library For example, you can a project, EnumsAndSwitch, and here again, if you look in there should be a before and after. You want to copy the project from the before folder and copy it so that you can catch up to me You can always pause the video it can quite a bit of typing though. You can see that in this project, I have already created with a description the estimated number take to complete the to-do item. Then notice that I have Where does this come from? You can see directly below, I have created an and I have not started in progress, on hold, completed, and deleted. Did you notice as I hover that each of these values Not started equals zero, in progress equals one, on hold equals two and so on. If we were to store these values somehow in a database those are the values that However, they will this more textual format so that when we are actually as you can see here in the static a new list of to-do's initializer or syntax, here, I am setting the status equal progress or deleted or Visually, it's much work with those options Now, the.NET Framework Class Library will use enumerations extensively. In fact, even in the Console window, if we were to set the notice that IntelliSense up to the console color enumeration. See, it says enum over there. Let's see. I don't Let's go up a little bit here. All right there. Now, you can see the It's a console color in enumeration. When I hit the member access it will show me all the the foreground color so I might choose dark red. Again, enumerations they are descriptive and they limit the number of possible for the properties of our classes. The next thing I want to talk and these two are going to marry But a simple switch statement is going to look In fact, I'm just going and that will create In this case, we can use an individual to do or let's say estimated hours. If the estimated hours case four, then we might perform some operation until we Or we could go case five, so we could perform something and then we would hit the break There's also a default case, that would be the the else statement and the But the most important is the construct of You have the keyword switch, then you have a variable then a series of cases where we would try to match it up and then we use the We write our code below it and then we use a break out and continue on our Now we might choose to, for example, do something like this. This makes a little bit more In this case, we might We might do something versus case studies.deleted and we might perform some operation Now the beauty of the the enumerations are that they Watch what I do. I'm Tab and then I'm going to do, which is each the items in the and then I hit the &quot;Enter&quot; The second time I hit &quot;Enter&quot;, see the macro that will each of the individual I can write code associated Isn't that crazy? Now, I can do here anything that my business logic would Let's use the foreground up for each of the It can be as simple as this. Let's just copy this, and we'll put it here for Then here at the very end, we will actually then line of the actual item itself, the todo.description and here If it's not started we'll if it's in progress, If it's on hold, maybe we'll use the dark red. Let's use the red here Completed, let's mark those as we'll mark that with yellow. Now let's go ahead and save You can see we have a very colorful coded by their current In this lesson, we talked and why we would use constrain the possible values for We saw how it was used in one little instance of it here, where they've created Just be aware of as you're trying to work with a given always look at, for example, in this case, what data type it is. This is a data type console IntelliSense will point you As you hit the equal sign it that enumeration so the period then you can That's a really good the structure of the where we're evaluating something in between the opening and We looked at the body, the opening, and closing curly braces, the entire body of Then inside the creation each case equating to the item that's being evaluated then any of the code that we a break line which will pop us out Then finally, we saw that there which we can use to that we haven't accounted for in That wraps up this lesson. Doing great work, getting You feel pretty confident C-Sharp. You've got the majority Just a few more topics and then we'll wrap this up. We'll see in the next Hi. I'm Bob Tabor with For more of my training please visit me at devu.com. In this lesson, we're handling exceptions that occur We'll discuss what can go wrong, why things go wrong, and how to build resilient crashing through the use of When the compiler catches an unresolved reference to a class or some malformed it'll refuse to compile your C-Sharp code into a.NET These type of errors are and that's not what we're However, there are other during runtime or in other words, they happen when the compile.NET Assembly is actually in Honestly, there are countless encounter an exception while depending on the kinds trying to do in your application. Many times these the direct control of For example, if your application because a folder or a file is missing on disk it could trigger a Or maybe the files corrupt, or maybe the network access to or it attempted perhaps and it couldn't find something A table, a column, whatever the case might be, because the structure has changed of the database out from All of these things and many more could cause the absolute and the user will see a nasty and the frustration, In some cases, the foreseen that that could have If they didn't see that they couldn't have accounted for it. Maybe the developer for example, allows the users to but the user misspells Now, maybe they did that Perhaps they maliciously use numerical characters instead But as a software developer, your job is to make sure that you account for all of A friend of mine was 80 percent of all code exists to solve 20 percent of all the potential problems that Generally, software developers regarding the reliability of Whether that be input any connection to a network, to the file system, anything that the control be should be Again, if you rely on a you should treat it If you rely on the user to type definitely treat that It's absolutely evil. This is the software developers Always code defensively, which means you are problems all around Now, the way that the C-Sharp or one of the ways in which the use of a try catch block, and I'll demonstrate Up to this point, we've been reading or actually writing files to disk. This time I want to We use the same file class I noticed that I already have a using stand for system This time I want to use the read all text instead of Here, let's just go ahead Notice that I've already got a project created called Please, pause the video and catch up with me if you String content equals Then let's just for hard code a location. I'll put this at less than 22 slash example.txt and then we'll do Then finally, console.readline So far, so good. Now, here I just want to demonstrate You can see that I a Lesson 22 folder with Let's go and run the application and show that there is It's just a quote from Mark Twain. Now that we've got it let's break the it a fake name just by removing and now you can see that This is a file not found I'll tell you what, let's do this. Let's stop the application. That's what the developer will see while they're debugging if they were to run across this issue while they're But what if we were to build a by changing the and then selecting &quot;Build Solution&quot;? Now we're going to go out to our projects directory act like an end-user use this application so outside of the just to see what the ran into this exception at runtime. The name of this is handling Let's go into the bin directory, into the release folder, and then I'm going to double Whoops. Notice that I get this ugly little message here and it's trying to help happened and I get all of this text here with all this spewing out all this an end-user probably would have absolutely no idea Although we can read top that the problem is that it couldn't find the file Lesson 22 Now, a very observant user at this and figure it out if But most users are going and I don't blame them. We ideally would like the end-user never sees anything like that whenever they Again, Windows will then notify you if there is There's just a mess going on there, and we want to protect our from ever seeing this. What we can do is actually wrap We'll do this. There's a couple of different I'm just going to take the What I might do is just go the debug configuration Now, you may have noticed ran briefly and then went away, and the reason it did we hid an exception here, the catch statement kicked in, there's nothing defined and we continued on. What if we were to move We would at least see run for a little bit and So still not an ideal situation, but at least we're not Let's go one more step with this and let's actually catch the Here we're going to catch an exception that we're Now, exception is the most general type of What we're going to look very specific versions But this is the most least we can see what the problem is and we there was a problem, something like that, and even we could provide a so the message from the exception. Let's go and run the application. At least this time we're giving There was a problem, could not find the file Lesson22/example.txt. Again, it would require an technical end-user to this issue on their own I wonder if that file different here on As they traverse through they're, &quot;I see what the problem is. There's no e on the end of example.&quot; That's asking a lot but that at least is a step at least we're giving them some Now, really what I would for all the possibilities and If I were to hover my read all text where the you'll see that we've the return value and the input But notice below that there's a list of possible Also, if we were to go to Let me just copy this We're basically going Bing here for That should help us find has a full description You'll see that there's We're using this 1st Then if we were to scroll down and pass some of the there's a list of exceptions, and it would provide us some scenarios why that particular Like a security exception, the caller doesn't have The path is an invalid format. Interesting. File not found, the file in the path was not found. There's also a directory not found. Interesting. Maybe the path was too long or maybe we There's a lot of things go wrong whenever As developers, we really need to, to the extent that we can, account for all those at least the ones that make sense. For example, I could to begin catching some of For example, let's take a look here. Let's, first of all, make sure that the directory exists, and then if it does exist, then we'll check to make Then if the file in the directory exists but we're then maybe we let it drop off to this most generalized I'm going to start from and then work my way to In this case, I think the probably the most specific of the ones that we're Then we'll catch the directory Then if that doesn't work, we'll just print out Here I might do something like Console.WriteLine and Then give it a specific. Make sure the name of the should be example.txt Then we can do something similar here Make sure the directory:\Lesson 22 exists. It's something like that. Remember, we're getting the red squiggly, why? Well, because we either need to add another backslash here remember that from earlier? Let's go ahead and I'm going to set a breakpoint this line of code so that Let's go ahead and step over. Looks like it found the and so we will see, Make sure the name of the Then let's go out and let's I think we're still going to get I know we did get the directory In this case, we'll see make sure the directory Then for any other exception, maybe there's a permissions maybe the file is corrupt somehow we would get this last catchall, where we catch just and print it to the user. When you read the key to the most specific the most general or There's also one other and that's a finally statement. This is where we would write which might mean setting closing database connections, but this code is going We're just going to closing application now that like so that we can see that It's just that one last chance our mess before we stop the You can see that now represented here by closing the application now. Great. Now, you might look at this and you I'm going to use this try catch around everything Every single line of I'm going to wrap it I'll just take every blindly just copy and That's definitely a strategy It's a little bit Some developers have done that, but they're often ostracized by their end users for providing If we were to leave all of these off and just wrap everything and we would just be saying, hey, there was a problem here, figure it out for yourself. That's not really advocating We're not protecting the user. Furthermore, we might some type of debugging information Sometimes you'll see that no human couldn't be except the guy who originally The reason developers sometimes they take that exact hey, we're going to I'm just going to wrap and it will pop the it'll flip back to me. I'll fix the problem and But, again, this catch all is but it's really frustrating to the end user so you You should strive to of attention into protecting your user from having these issues and protect them from having next by simply helping Tell them specifically If you the developer or at least you can point the then that's awesome. But if you can't, well, then at least try to identify the exact nature the user for the type of input that you would need as You don't want to leave that they did something wrong. You want them to feel empowered your application is considered them whenever That's what makes your It's what users expect, a reliable experience To recap this lesson, we talked about a number of to exceptions that can happen essentially any time are not completely in control and you're accessing things outside outside of your domain. You need to wrap those in a about the types of exceptions listening for specific know a particular and it's easy to find out. All you got to do is hover or you go to mstn and you find that method and you look all the potential exceptions Then be reasonable about it, but then write the code those exceptions and We looked at the try, the catch, we looked at catching then using certain properties like the message property to print out to the user We could also use this even send it to a like application insights from Microsoft Azure to report back to the developers Then you can use the up any connections you have You can set objects equal to null your references and be that before you shut Hopefully that was helpful. This is a great lesson in giving the users the expect whenever things We'll have one or two more We'll see you in the Hi, I'm Bob Tabor with For more of my training please visit me at devu.com. In this final tutorial video, in this course, we're going to Event-driven programming the heart of Microsoft's whether it be for web or Windows. Really, for that matter, just about every other API in the It is so essential that we have to spend a little bit of time about it because it's that next step that will help real applications with real user Events allow you, the developer, to respond by handling those key moments in the lifecycle of the allowing you to write code to Up to this point, in our simple console window applications there's really only been one and that is the application startup. On application startup, the static void Main is executed, so it's handling that event, I guess you could say, and this is where we write and that's why it actually executes whenever we run the application. Now in a modern user interface, whether it be for users can interact with the various elements that They can hover their mouse like buttons or and they can see maybe a change maybe they see a pop up that explains the perhaps they can click on an item to enact some business functionality they can press keys on the they can type inside or they can drag and drop items and each of those will As a software developer, you can decide to write those interactions those various user interface and you can also that really don't make sense that you don't implement A given component, let's in its development by Microsoft, they included or defined an event, let's say it's the click Now the developer, you and I, we say, &quot;Hey, I'm going to write a code that performs this business writing here in C# the buttons click event is raised, that I want this code that So the developer attaches that method to the event, and I'll show you how we do As the application is running, the user is interacting Eventually, they click that button. The .NET Framework if you were listening for the It just happened, and it will notify every one as developers, have attached to that we've registered to that event. Now I'm going to show in a simple Windows application near the end of this video in a but first, I want to start with the absolute basics and keep so we're going to work purely in We're going to work a timer object, and it has one event We can say after a we want you, timer object, to execute or to raise and then we're going to attach our event handler code to that event so that it gets executed every time Maybe it'll be easier to see There are a number of inside at the.NET We want to make sure I want to work with and I don't want to use that so I'm just going to add that to my using statements up and I'm going to say &quot;Timer One of the overloaded versions this timer class allows us to pass in the interval So every, let's say, 2000 milliseconds we want the So 2000 milliseconds would which is an eternity as far Next up, what we're going my Timer we know that it will and so we want to create a method that will the Elapsed event is raised Here, you can see that we get this little message &quot;Press TAB to insert,&quot; and it automatically creates the method stub called and it creates in a a very specific method signature, and it also gives us &quot;Hey, don't forget me,&quot; so throw new Let's go ahead and remove but notice what We are attaching or MyTimer_Elapsed to so this references this Inside here, we can write the each and every time is triggered inside This is where I might write and the Elapsed event will send One of the interesting actually the signal time, and that will give me the exact, down to the millisecond, when that particular Here we go. Actually, let's do it this way so that We'll call this Elapsed, and then hour, minute, second.fff. That should give us Now what we'll do is start ticking by calling and then we're going to and we're going to say, &quot;Continue running until somebody hits the Enter key on the keyboard.&quot; Hopefully that makes sense, Now we see every two seconds, we get this message. You can see at 32, 34 38 seconds plus some We get that MyTimer_Elapsed Now let's do this. Let's say that we want more than one event handler to execute whenever I can do this all day long. I can say, &quot;Hey, well, let's go ahead and This time it will be Notice the 1. I'm going to get rid of Inside of this new method, I can do essentially the same thing, and I'll just use that In fact, just to make this obvious, I'm going to use that just a lesson or two ago, where we set the ForegroundColor That would be for the second one, and then we'll do Console.ForegroundColor We can see clearly the two different executing whenever the Elapsed Let's run the application, and now we see the pair We could continue adding additional That's what this little It's saying, &quot;How many current items are subscribing or have been I want you to attach Now we can do the opposite as well. In fact, let's go and we'll say &quot;Press enter There's probably a but hopefully you get the idea. Then after this ReadLine, we'll add another ReadLine for and in between what we'll detach this second event so we'll just do the reverse. myTimer.Elapsed minus So now we have removed it, and it should no longer execute whenever the Elapsed Let's run the application. You can see, here we go, and now I'm going to hit the and we should only see the white, the first version of our event Hopefully, that all makes sense. This is the most simple scenario having to actually create and by real application, I mean, one with a graphical user interface. But now that we've let's go ahead and build an WPF stands for Windows It's one of the APIs inside of the.NET Framework class library that you use to build In other words, applications that are executed on the Windows desktop, not web pages that are and their markup is a true application that's running I'm going to File New Project, and here I want to make sure It should be one of installed in the new project dialog. What I'm going to call this is, &quot;WPFEvents&quot; like so, This is not going how to create Windows presentation, application, interfaces, or how to work with it, but the basics are generally the same. Here we have a basic application, we can actually run the application, it will do nothing at all. We just get a white form on screen. But I want to go to my toolbox and I'll even pin it down briefly. Then inside of here, where I'll go is to this rolled-up area called Now. What you see on screen might be a little bit different Just make sure you're working and that you see some of your form here in the main area. You can ignore everything below. That's the actual markup that will generate what you see visually here. We're only going to work but know that there's some markup that's going But again, that's a I'm going to drag and drop a button onto the design surface like so. I'm going to go over here on the right-hand side. This will allow me to of that object, that visual object. For example, I can &quot;Click me&quot; like so. I'm also going to add I'm going to drag and drop it I'm going to remove the but I am going to change the Now, what I want to do is print whenever somebody clicks I'm going to choose the selecting it here in and then I'm going to look for over here in the Properties window This will show me a list of all of the events that this single control, this button can raise. Now, a lot of these are going to and we can ignore the But the most important one here Now, I can write C# code that of this click event being raised by the .NET Framework the user clicked on I'm just going to double click and when I double click it created this button This is going to be my Let me use the auto-hide so I can see this. Here what I'm going to do is type in myLabel.content equals I'm going to save my work, and then I'm going to start I'm going to click the &quot;Click me&quot; &quot;Hello world&quot; inside Now, what you didn't whenever we double-clicked inside of Visual Studio in this little it created a event handler for us, and it wired up or that event to this button. You might wonder, well, where is like button.click plus equals, where's that code at? Well, that's a little bit difficult to describe at this markup code here at the bottom and we scroll that is essentially what This code will get converted into and it will create that little looking at in the However, I can create a By doing this, let's go to the grab another label and just and I'm going to select the Properties qindow and I'll change this to be and then I want to change that label to be blank as well. Now what I want to do then is and here I'm going to go button equals and I could click &quot;TAB to insert&quot; but I'm going to name But in my other click like so and then I hit Enter on the keyboard or actually I'm going to hit that. Now I'm going to, you can see that I get I'm going to put my mouse Control period and the method button underscore and you'll see something that a method stub with the not Here I'm going to say equals &quot;Hello again&quot;, like so. Now if I did this correctly, whenever my user clicks the button, it will not only fire but then also this event handler. This event handler, we the technique that we learned Let's just run it, and works, and it does. The same principles The difference is the vast number every single visual whenever you're working with the Windows Presentation The main takeaway of this lesson and especially whenever we're working with Windows we're going to write our code in methods that respond to specific the .NET Framework runtime in by the various objects our web apps, and so on. We can either rely on Visual a very quick and elegant way like where we let it essentially Or we can take control of that of registering an event and then write the code respond to that event being raised. Again, extremely important. Hopefully, that's the for you is to move on to other APIs, whether it be something like worked with a little bit right here or the Universal Windows Platform to build Windows Store applications. You'll need to know these That pretty much wraps up this We'll have a couple of closing and then that's it. We'll see you there. Thanks. Congratulations. You did it. You made it all the way to the end. That's a huge accomplishment, don't sell yourself short. When I look at the given I typically see the first in the course have an and then it begins to tail off over time until you get to the very end, you see a rather small percentage of those who started actually Then it used to concern me thinking, maybe I could be a little keep people's interest at Microsoft Virtual Academy happens across the board I think what's really going on is intentions to follow through But then life happens, maybe changes in priority present themselves they interrupt or But the good news you were able to make it all now you're well on your or at least learning Then from here, learning picking a user interface technology, whether for web windows or mobile, maybe learning more about databases, maybe using C-sharp to access We'll talk about some of those you move on from here a little But soon you're going to be building your own applications, for your employer, maybe But whatever the case I really encourage you to Don't stop here, keep pushing forward, keep taking baby steps As you know, daily progress, no matter how seemingly is how you make real it's how you add skills to your this great first step in the right direction and I'm proud great job, and I'll continue to encourage you But I want to wrap up this series a few suggestions about answers whenever they as inevitably you can continue learning more about the various APIs that are available to We're also going to talk the wrong way to ask for Then I'll make a few suggestions investigate from here on out as you continue your But before I get started in earnest, let me say that some of the especially some of the that I hinted at or that I said, you can let this go in one I just wanted to show Some of these things could require weeks or months or even years of thought work before your mind is really able to accept I know I've personally spent thinking about some trying to wrap my head around it. The mind needs quiet You need to put yourself succeed by giving your the time to ask the the time to allow those neurons Honestly, there are about 10 years ago that I'm still trying to really figure out what this means overall, in what contexts it Many times I might need to read different books and and to hear what different about a given topic before with me and I really how it pertains to me, what do I need to do with it? Things like that. Each about a given topic just a little bit differently, and sometimes that can finally Don't forget to keep keep learning because there's But ultimately, I hope you realize that you really don't need to know everything right away to get started and to be You don't have to be an expert first before you can begin In fact, some concepts sense after you have Once you've made some mistakes, or you can see where a given idea and Oh I see where that applies, I could use that here that finally makes sense to me Adjectory in a program is a good example and I titled this lesson, where do you go from here? My intent was to answer First of all, where whenever you have a having a hard time resolving the problem and There's a good chance at some as you're building applications, you're going to run or something that just It happens to everybody. But I would encourage I think in fact, what makes programming such how to solve problems that with your ability to be the problem and then your ability to research and perform research on a given problem until you The good news is that there other developers Microsoft that can help nudge you These people write blog posts, they answer questions they write books, they record screencast video You can tap into that community But let me give you utilize that community in Let's suppose that You're experiencing some it's not behaving the maybe you're getting some popping up every time you try Where do you start to debug this to pick apart the problem and First of all, I research using key phrases directly from and I can't emphasize how If there's an error number or a specific phrase to and I can &quot;surround those&quot; as that always helps me get I might spend 10-15 various blogs and forum posts or on MSDN as search results pop up for these sources in order to If I'm mindful about I almost always find a solution. I think the reason why a lot of beginners fail the problems is because they use the exact error and they don't know how and they're not willing to put through pages and pages of content to find a I can't emphasize enough inside the error message that will get you closer to finding a resolution to the issue There are always usually people with other similar issues then explain what they did to actually solve so research is vital. I think actually one vital skill as a modern software developer is Searching on the issues that you run into Now, it might seem easier to go directly to the forums post a question to the forums in hopes that somebody else can But I assure you that longer to ask the question and get an answer than it would if refining your searches, and so on until you find a Frankly, I almost never have to ask a question in the forums because a simple search will a clue to what I did wrong In fact, I get embarrassed Maybe that's a bad attitude to have, but I don't want to with when they could be answering so I go overboard and try to Now, virtually any issue I'm almost positive that some point run into that and they've already posted the You just need to get If you get good at doing research, doing searches on the Internet to help find solutions then it'll get you back on posting into a forum and Now, let's suppose that you're at your wit's end and and there's nothing out there that really seems to apply Nothing you've tried actually maybe at that point, you need to ask for Here's what you really need to You need to ask your question in such a way that you're going to get a resolution and how you ask You need to be an In other words, you need to get all the information back on your feet again to isolate the issue and This means that you need to, first of all, clearly There's a checklist that I have in my mind of the Some of these will be may have not considered before so let me just go First of all, you your question in the right place. Find the right category in the for your post so that the right people are Posting a C-sharp question in a visual basic form is not going in fact you'll probably Secondly, you also need to choose a simple clear title for your post so that it attracts the help so that it saves If I see a forum please help, I usually just skip it. If it says link to objects queries well, okay, that's oddly specific. That might be something I look like the person into concisely stating I'll read the question and Third, a short synopsis of the including the exact error message, including the exact and what you're Describe what you but what if it happened Fourth, if you can at all and ideally you would and use some screen software and draw circles to those parts of the screenshot that Fifth, if possible, include a code example. Make sure to change any passwords things of that but without a code snippet, many problems are unsolvable. I can't tell you how writing e-mails and they'll say, I'm having a problem with this I'm like, show me some code, I need to see what you and then maybe I can help you Always include, if you can, a code snippet of the code that Then be choosy about which There's nothing more at somebody who posts and expecting me to when a lot of it doesn't even I mean, you had to spend narrowing it down to a few things. You need to help me the person who's identify those lines of code that Number 6, if a given forum has special HTML tags or use to format the code or some other aspect of your question to help it then you definitely should use it. Number 7, tell me, what have you done so far to Did it change anything at all? Did it change anything? Did it help? Did this lead you to Again, empathize with me, the person who's reading your This will result in Otherwise, people will start with the obvious issues and There's that old joke, Hey, I'm having a problem with my well, do you have it plugged in? Everybody says, Oh, but there's a reason It's because the most obvious answer is the one that most of Don't be that guy make sure you already list out try to do and you've eliminated Number 8, tell me which which version Visual Studio which programming which updates, service applied anything that help me help you diagnose the issue that matters more Number 9, suppose that there's you figured it out. Awesome. Very cool. Maybe somebody made some down to investigate finally figured it out that's great. Take a moment, go back wherever and describe exactly what you did to resolve the issue step by step. Use that as a means of better and articulating that will help you better understand the issue It makes you part of the information that's out there so that others in the future can look at your post and that you are feeding it back into the community just like you're Chances are that honestly, that person that you help I can't tell you how many times that I found a and then months later, I hit up against the same I know I've solved this once a solution and I'll find the Oh, that was me, that was me It would be nice just to search for your solution online if or at least be courteous and your future self to post the answers to the Finally, absolutely people don't owe you an answer If they're going to help you, they're going to do it out of They're going to be doing as a means of maybe, furthering their own understanding, helping themselves grow but then also to help you grow as Say please and thank you other developers as you I do sell training content, but I give a lot of I do ask questions in the forums, but I answer a bunch too, make sure that you become and that you are feeding you help, and you support, just like you've been You might be wondering, to find this level of support, where you can ask Typically, I'd recommend msdn.Microsoft.com here, So, msdn.Microsoft.com/forums and it might redirect you based on But typically you can choose from so you definitely want to find the specific technology or language or do a quick search for right here inside of It is monitored by as well as people called Microsoft Most Valuable MVPs are usually who've demonstrated their and they've been identified by Microsoft as people help and so they qualify for not the least of which is Then there's also another you can take a look at Stack Exchange, programmers.stockexchange.com, one other place where you could go but also by the same company depending on the type of Now, in my experience, Stack Exchange is a It's a little less Maybe that's changed by and I only say that it's a little will you be critiqued for but very often if people and then they find an existing question that's they'll shot your question down. Just follow the rules, do an extensive search before don't take offense to Again, I'd recommend hard before actually because I'm convinced that you could run into has You just need to spend the time to find the answer that I said that I would of where to go from here and I've answered the question of where to go whenever But now I want to answer go to learn more about where do I go to learn more At this point, you've got a C-sharp basic knowledge of language.Net and a little bit about Visual Studio a lot of opportunities to practice what you know and to No matter what type of application there are a few fundamental ideas that you need to be fundamentally acquainted with before you move on. First of all, I would learn about relational you learn how to access a database using the part of the.Net API for accessing Both SQL Server and the visual tools that you can use and drop and configure selections and so spending some time not only learning about the tools and but then also these a visual studio can You'll want to quickly grow past and rely less on the visual But still, it's a great tool to help you get to that point where Next, you're going to need to that you want to master, and this is really honestly than just simple UI. So you have no lack of options, whether you want to build web mobile applications or whatever the case might be. So let's say, for example, you There's a couple of The older API is called and there's a lot of on the Web Forms Platform API. But then there's also a newer API, that's called asp.net core MVC, and there are some huge but we don't have enough I had content on both of those There's Windows Forms, which Then there's Windows which is a newer API building applications internally and then there's the Universal which you use to build more typically for sale on There's also the Xamarin platform, which Microsoft recently I'm recording this for building true cross-platform apps for iOS and Android and Then there's a third party depending on the type of And so you might want to check Now, if you're not really should go next and what I really would recommend that if you don't already know each HTML5, CSS3 and JavaScript, that's And I've created several Channel 9 that are aimed They're also available here on Microsoft Virtual Academy again Then beyond that, I about the basic tenets of particularly how to into layers of responsibility So splitting your code into layers you build applications that can And like I said change comes from a number It could be changing business rules. It could be changing requirements, changes in the technology It also comes from bug reports that come in and you need to make But in each case, you can mitigate the negative impact of making encapsulating the well-established APIs between each of the layers of responsibility. And I spend a lot of about application So if that's something you definitely want But from there, you want basic software design patterns And there are a few keywords that you're going to want to learn about, and each of these can an entire video series. And I've already alluded to the topic of object That's a huge topic that you If you can just get around object oriented changes the way that you create then that's a huge step But beyond that, you're the principles of principles that guide you to write your code in a There are some more like the drive principle. I don't know that I've but it's essentially I said be leery of When you do find yourself wanting to copy and paste code in multiple places in your application, you should be stopping how can I create this in such So don't repeat yourself, put code, extract it out. That will be reused into and then reuse it from there. There's also another principle Which is you ain't going to need it. Which means, yeah, you could and architect your that in the future you could expand, but you're probably not You ain't going to Then there's another principle or idea called dependency injection, which is super important. It's a design pattern that loosely coupled objects that then can be swapped in and you'll want to learn It's really crucial the new style applications using which relies heavily on There's also a set of S-O-L-I-D. Each of those stand They help you realize the promise of object inside of your applications. So again, a lot of conceptual in nature and less All right. You're also about the process of so the workflow surrounding software development and So specifically, you're about the tools and the whenever you work inside of a team members using a source like Visual Studio Online's and their own internal You're definitely about building unit tests, which are tiny little continually are testing your Some people have even gone as far to say that you should be unit tests first and then you write the actual production code that satisfies those unit tests. Now, whenever there's a you can see what the impact of begin to see these little that is a process called and some people swear by it. Other people swear at it. So you're also going about agile project management, agile software defining requirements playing a game called planning poker to determine what features can we include in a given iteration using agile boards to manage assigned tasks between the various software You're going to want to of iterative development. How to use that term iteration. So you want to learn about one of the goals of iterations You'll want to learn about developing the way through all the layers of So I've given you probably what, several dozen different use as a launching Honestly, if you were to look at it'll take several years to even in a general way. But fortunately again, all to get started to So, yeah, there's so much But it's what makes and makes it exciting something new to learn and I've had friends at Microsoft, actually confide in me that it's a challenge for them to Nobody just knows all It's a challenge for everyone, everybody to keep up with. Nobody just knows it all. It just keeps evolving. You just have to really I realized some time ago creating video content or my full time job is really learning. And then if I create that's really a byproduct of all the value that I have to And so without that is the Whether it's building somebody or creating they're only interested in Then how I apply that knowledge is a byproduct of actually So you have to really And I know since you're here on Microsoft Virtual Academy that you've already done There's a whole bunch of great resources out that are not the least of which are Channel 9 and Microsoft Virtual Academy. Obviously, there's MSDN, as we looked at However, before I close this out, let me make one final plug If you haven't already is there on screen. I've designed the courses there a beginner to help them get up and running as pointing out what I feel like in order to master key ideas that will lead them to get jobs in the software providing homework But more importantly, coding challenges that force develop the muscles of you to pick apart a problem All right. So please check out All right. So as I close here, I hope you found this course to be valuable and this If there's anything that I can ever do to help you, You can find me out on Twitter. I sometimes go out there. Hit me up on Facebook or, But finally, as we close out, I sincerely wish you the C-sharp in software development is such an exciting field and I'm really excited for you. So good luck. Thank you