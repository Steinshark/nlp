Hello everyone and thank you for joining this with Serverpod. My name is Viktor and I'm the I'm going to talk about Serverpod and using my experiences, hoping to inspire you to take Let's dive in! Before we dig into the details of backend servers are generally set up. First is stored in some sort of a database. If you're often a relational database. In Serverpod, we use database for app servers. Imagine your computer the relational database is like. A table in the Each column in the table represents a data type, date. A row represents an entry or an object. So but the real power of the database is in how you us to have one table for customers and one for link each order to a specific customer. This is can have many orders. Another large difference search for data in the database. You do this you do often. So, it's very fast to search. for structured query language. Different databases the same. The objects you store in the database types of a database record or a row it maps to, system is called an object relation mapping or writing your SQL queries. In Serverpod, our ORM you can get great editor support including to be able to access the data in the database. the world and have our users read and write to it but it comes at the expense of many limitations if you update your models, all apps that access an API server between the database and the app or underlying database without losing compatibility It also allows you to process the data before also an expensive operation and by using an API making it blazing fast and cutting down on costs an app running on a computer with access to the clients and return data. In some cases the server to make it possible to push data to the client. instance, if you have a chat app, you will want to The most common way to communicate between the JSON objects, which is often referred to as a REST be in place. First, we need a way to encode and We take an object in the server's or client's Next, we need to be able to call different methods that group methods together logically. The method like we would type a URL in the browser's address having a single server may not be enough as there In this case, we may want to create a cluster of The load balancer will distribute the requests API will still be available if one of the server backend architecture can look like. At the front passes them on to the API server. The servers then format it and send it back to the client. us so we don't need to dig into all the technical under the hood is still a good idea, and it will we will look at what you can do with Serverpod. up, and spoiler alert, despite all the features Serverpod is an open-source scalable app server gained a lot of traction among Flutter developers We now have over 5,000 Serverpod developers. The faster to get things done, debug your code, and your protocol and client side code by analyzing as making a local method call. And, of course, backend in Dart, and even share code between complete competent backend for Flutter. Apart from to many common tasks that are otherwise cumbersome provides you with worldclass logging capabilities. server logs, instead you pinpoint exceptions user interface, with just a single click. You get in. Any data models can be cached locally on your cache across a cluster of servers. Serverpod also your database. With Serverpod's object relation types and null safety. The database layer even and relations. In addition to these features, expect from a modern backend framework. Firstly, uploads. You can connect it directly to Google within your database, which is great for local Serverpod takes care of all the tricky parts. You with support for services like Google, Apple, and email-based signin. If you use Google, you can get contacts. A standout feature of Serverpod is its pass models and push messages from your server, Whether you're building games, chat applications, data exchange, Serverpod has you covered. a cluster of servers, ensuring scalability and With its future calls feature, this replaces the to call a method at any specified future time, server restart, ensuring that your scheduled tasks and you want to send them a reminder a week the health of your application is crucial and purpose. You can monitor not just the database, services your application relies on. Lastly, thanks to the provided terraform scripts for facilitate a quick and seamless deployment development and less on the complexities of server called Serverpod Insights. It allows you to access problem with servers being slow is that there may Traditionally, this can be very hard to track this, but it often involves downloading large log digging through your code to find where the slow and can take hours. But with Insights, you can calls or queries. With a single click, it takes where you made that query. You can even change the enabling detailed logs for specific methods. it's really easy to get started! When you start know. But all the other stuff is there, ready let's start looking at installing Serverpod. Dart installed, but you will also need Docker. but it makes things so much easier to we use Docker to host a Postgres database installed. All we need to do now is to install pub global activate serverpod_cli. To double test drive the installation by typing serverpod configured, the help for the Serverpod command ready to explore the wonderful world of Serverpod to create a new project and get our Serverpod your terminal and run serverpod create mypod. You this is just an example. The create command will project. If you go go into your new project three different Dart packages. mypod_client the server. This code is generated, so you will In the mypod_flutter package, you'll find your package and contains a Hello World app to get you package. This contains your server code. This is Serverpod automatically analyzes the code in your API. When you add a method to the server, it will it from your Flutter app, it will be just like To start the server, change the directory to running Postgres by running docker run dart bin main.dart -- apply migrations. This tables to the database. Serverpod comes with a logging, and health checks. Serverpod is now is working when you see a confirmation on your listening ports, and the mode it is running launch the demo app. Start the default demo app mypod_flutter, and run flutter run -d chrome. You of course, but know that if you're running on Mac in your Xcode project. That's very cool. You now at the structure of your server. You'll need to in the config directory. You will find the contains different configurations for running like development, staging, and production. By mode when you run it locally on your computer. password file. It contains the secrets required In the endpoints directory, you place your server and Serverpod with will automatically generate models directory, you place your model definition simple yaml, and Serverpod will generate the Dart database, and everything else. The generated and the server. And that's it, those are all your server going. Whenever you change your code you'll need to regenerate the classes managed generate in your server directory. You can to continuously generate files whenever you edit endpoints. Endpoints are the connection points to add methods to your endpoint and the corresponding Serverpod builds a well-formed REST API for you, For the endpoints to be generated, you will need and they need to extend the Endpoint class. must return a typed future and the first Session object holds information about the call caching, and other of Serverpod's features. example. It's good practice to include the but the code generator will remove it and you The endpoint contains a single method called that its first parameter is the Session object. that should be included as part of our API, and in in the endpoint we must run serverpod generate to we can call the server methods from our Flutter example, we access the hello method of and then wait for the result. The result will at how we can create data models and serialize then generates Dart classes from them. Place your serverpod generate to make the models accessible example of a YAML file defining a model. Serverpod types, including booleans, integers, doubles, add lists and maps. If you add a list or a map, it Null safety is also supported. Once your models or return types in your endpoint methods. You can This works for maps and lists too. The cool part to write and easy to read, but there will be loads to care much about. This is how your model shows It has a constructor with all the fields specified and nullable ones are optional. You can access the but you have access to a copyWith method. What's can be mapped to the database using Serverpods easy to store and retrieve objects. Just add a to the database. The value of the table key is we must add the table to our database. Thanks Serverpod. Whenever you make changes to model need to create and apply a database migration. the database schema while still preserving the to your model files that require the database to Serverpod will compare the last definition of files and generate SQL code that will change the the migrations by passing the apply-migrations we are also using Serverpod's maintenance role. the migrations have been applied. This can be continuous deployments. After the migrations are a database table to your model, Serverpod will add field gives access to several methods for working insert an object into the database, you use the every table has an id column, a unique object an object will return a copy with the id field been inserted into the database, you can retrieve generated class. For instance, you can find a method and pass it the id of the row. You can also the findFirstRow method, the where parameter is a named company in this example, contains a table columns. Here, we find the first row where company&quot;. We use a builder method to construct the to be type safe, you can use your editor's names of your table. Working with the database it so much easier. To learn more I recommend it covers things like working with relations and I just wanted to share a few more tips and tricks are some really neat things you can do. First, keyword for &quot;exception&quot;. By doing this, Serverpod This means that you can store the exception in pass it over the API. You you do this by throwing serialized and sent to the client, unpackaged for handling errors you want to notify the client which you have created a model will be passed the server will not reveal any of that information so you have a chance to correct them in your code. enums. Switch out the class key for enum, and that you also set a serializedKey to byName, which You can include your enums as part of other models like you can document Dart methods with dart doc, of using the triple slashes as you do in Dart, The comments that you add here will be included get access to the documentation in your editor good practice to document your code for other is what I had for you today. Getting started with and I hope I inspired you to start playing around You'll find more tutorials and documentation so it's quick to get any of your questions