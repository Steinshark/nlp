Welcome to building web apps with the myrn stack. We are going to be learning the myrn stack by Beau Carnes. And I am a teacher and developer with an introduction to the myrn stack, then we'll be talk about how to get started with MongoDB Atlas, myrn stack app, then we'll be getting into our of the exercise tracker app and showing you how to react, and then start creating the front end of we'll connect the front end to the back it consists of the following technologies. We have myrn stands for. So node j. s is the JavaScript JavaScript code outside of a browser, such as on a for node j s, it allows us to easily create a based open source database. So in our app, we'll the front end is react, which is a JavaScript And then finally, at the bottom there, we will solution to model application data. Basically, let's review some database concepts, we're going of people are used to our tabular or relational tables, rows, and stuff like that. So MongoDB has just want to kind of make everyone aware of those instead of rows, we have documents, we can do join foreign keys, we utilize references. And just talk about MongoDB as a non relational database. I use the term tabular to describe the legacy suited for handling data with a wide variety all of these concepts in the app today. But I just So let's look at the document model. This is like. It looks a lot like JSON, we can see a and MongoDB stores data on disk in the besian provides a wide variety of support for data types, allows for nesting documents inside each other. about the document model. So it allows us to apply stored together in an application. We also have which is another powerful feature of the documents are JSON structured objects, which is is an objects that has various attributes like a allows modern development practices to use the having to break the data apart, to put into tables Atlas, which is a really fast and easy way. would just run up MongoDB locally on their local makes things a lot easier, even if you're just getting started with MongoDB Atlas is to sign in. Getting Started screen. And once you've logged to store the data, we need a cluster. So this logged in. And to start building the cluster, that's the button right here. And then after you the big green button in the middle here allows you click that, it will bring you to this screen can see that in MongoDB Atlas, there's a bunch of And then you can choose the region, we're going to great for our app. And just when you're I recommend starting with the free tier. And then to another tier later. So you just got to click so the free tier is just the mo sandbox, it which is typically plenty to get started with. is always going to show you how much things click Create cluster, and then the provisioning to take seven to 10 minutes to provision. And it's just gonna take some time to set things couple of security things configured. And finally you'll you'll be on this screen where you can doing this all in a slideshow right now. But in a website. So you can see where all this is on the we need to set up IP whitelist addresses since it's just going to be hosted on locally, we IP address. And then you can create any username get our connection information. There are a few connect to MongoDB Atlas, through the MongoDB the application connection string, which is what which is a GUI tool for interacting with data the Connect your application, you'll be taken to information on getting a connection string, languages. But we'll just need the connection here. But this is just a slideshow, so I can't do and copying the connection string to us in our But let's just quickly review the collections in exercise exercises and users. And every exercise you'll realize that we could have probably just example, to see how it would work. We're going to really will get into the code. So I have Visual going to do is verify node is installed. So I'll you Don't, you're gonna have to make sure you figure out how to do that. So next we'll create app. And if we use the MP x command, then we can So other MPs create react app. And then I'm just And then this is going to create a directory with all the dependencies installed. So while this here to just talk a little bit about a MongoDB generated by the MongoDB driver, and is guaranteed different parts of the object ID represent ID if we'd like. But it must be unique for each I'm just gonna let MongoDB handle it. So let's see that our myrn exercise tracker is all set let me just make this a little bigger here, and go on to the directory there. And normally, the React development server, we I would type in the back end. And then we're going to come back to the back end and connecting it to MongoDB, Atlas write the React later. So inside this folder, we So a lot of people would create the back end in just to simplify things, since this since this is folder right in our in our react front end folder. now we'll create a package dot JSON file inside to answer yes to all the questions asks. Okay, install Express Corps, mongoose, and dot E we already discussed Express, which is a light JS cores stands for cross origin resource sharing. origin policy and access resources from remote middleware that can enable cores with different we can easily access some something outside of discussed mongoose, which makes interacting last one is known as.mv, which loads, it loads process dot EMB. This makes development simpler. our development machine, they can be stored in we'll install one final package globally. So mon. So node mon makes development easier. applications by automatically restarting the node directory or detective. So let's see looks like I should do a sudo. Whenever you're going to g node mom. So whenever we update our server file, what node mountain mon does. So now it's time to I'm going to create a new file called server just going to paste in some code here. And then we're going to require all the things we're going parser, I originally thought we're gonna need body new version of Express. And this since we're, it's to express there. So we're gonna, we're just gonna So we can have our environment variables in the our Express server. And then you can see the middleware. So this is the cores middleware. And our server is going to be a sending and receiving starts the server, it starts listening on save this, and I can start the server. So node mon the server running, you can see it's a server is point where we can connect our database, we can the top of this server file, after this require const. mongoose, equals require mongoose. So to our MongoDB database. So now, the next section, we set up our middleware, we're going to do this. This is something we have to get from the MongoDB So here, mongoose dot Connect, and we pass in that's how we start our connection. So you can see this new use new user parser. True, that's added the tool it uses to parse MongoDB connection they put the new connection string parser behind a index true, it's to deal with a Mongo D with you don't really have to remember all that just of the updates to MongoDB. So for the connection environment variable. So in the server folder, going to see an error down here, because we don't to go into my back end folder. And I'm going need to get the URL or the connection string from MongoDB Atlas. And I already have the the cluster connect your app to your application. And I'm can go back over to my file here. And we just have it's called Atlas underscore u r i, and then just going to paste in the URL connection here. you'll see that there's this password here. So don't tell anybody what my password is. But it's exact same password as my username. No, that's not that's what I'm doing here. So now we should if we should see MongoDB right in the console successfully. So we get that right here. So is open, it's going to log that that MongoDB So we're now connected to the database. But now the database and read things from the database. So will have two entities, well exercises and users. a new directory called let's see what I do wrong I'm going to create two new files. So exercise another file called user dot model dot j s. Okay, some code, and then I'll explain what it is here. require mongoose, then we get a new mongoose dot the same. And we have our user schema, that's the is username, then we have some validations to it's required, we know it has to be unique. if someone types in some spaces, it will or min length of three. So it has to be at least include timestamps, which will automatically and when it was modified. And then we just have that's just the name that we're going to use, we're going to export here, so a lot of this is So I'm going to save that. And then we're going to model is going to look almost exactly the same. bit. So everything's the same except this time, it takes up less space. Because the validations don't have as many validations. So you can see we this is all the information we're going to store required, but we have some different data types. date datatype. So now we have got, we've got those routes. So the server can be used to perform which is create, read, update and delete. create another folder named routes. And inside exercises dot j s and a file called users. That we'll tell the server to use the files we right before this app dot listen. We're going the file And then use the files. So here we're just importing them into here. And then we're whenever someone goes to our root URL, and they everything in the exercises router. And if someone the users router. Now, once I show you this on the so you'll be seeing that soon. So let's build there's gonna be an error here. Because we haven't go to exercises that j s. Actually, we'll start code, and then I'll explain it here. So we need we're creating. And here, we are going to require created that we just recently created. And here that handles incoming HTTP GET requests on the which is localhost. I think localhost 5000. users. And then if it's just a slash at the end, then this is going to happen. So it says that it's going to get a list of all the users returns a promise. So the results are returned so after it finds, then we're going to get all the to return something in JSON format. And what we're database. And then if there's an air dot catch, with just the error message here. So the second, requests, you can see it has slash add on the end. the new username as part of the request body. So going to be assigned to this username variable. of a user using the username. And finally, the method right here. And we return So then after the database, then we'll return user added in JSON, or and this is what you have to do for all just manage module that exports equals router. So we're And I'll go into the exercises file, and I'm going two endpoints. So it's going to be basically the model that we created. So if it's now it's if it's the get request, then we're going to run this we find all the exercises from the database, we'll or else there's an error. So this part is a same as before. If we have exercises slash add, having a username in the body, we're going the duration and the date. little sign up to these the duration to a number. And we're converting the a new exercise using all of these variables that after it's saved that then it's a promise, we're add some more API endpoints soon. But first, let's insomnia to test the API. Another popular tool for the same thing. So once you get into insomnia, request using JSON. So I'll do a POST request. And here. So we have this post request. And we'll go slash users slash add. Now, we should still have JSON. And we are going to send a username, we're this JSON object here, username, boat. And if I and it says user added. So now we can send a get let me just add another user. So I'll just do now we can do a get request to get the list it will just be user slash without the ad at the need this here. And I'll just click Send. And information here. So you can see MongoDB also had the created at and updated at date here. Quincy. So we can also see the users we just me go over to that. So here is the MongoDB Atlas Refresh here, we should see, yep, we see our you would have to click collections. And then it's in this documents, we have Bo, and Quincy. So we've successfully created our back end that can let's add a few exercises. So let me go back over be slash exercises. And then it's gonna be slash I'll go back over to our code editor. And when do a POST request, it's going to be expecting a it's going to be expecting variables in our JSON names. And that's going to take all those things, back over to insomnia. And in JSON. We need need a description. And we'll set that to run. And which you'll see once we create our our front end. just going to copy this date from over here. to actually enter a date because you'll be just says for entering it directly into the database, we should see Oh, can I get because I forgot to have anything for a get request to that URL. But well, let's add one more exercise, which is this time it was for 30 minutes. And I will change we just added another exercise. So we can do a get dot get, and then click Send. Now we did, we sent It's okay to send it, it's just extra, didn't do have our two exercises we added. So username, Bo Same down here we have a bike ride. And if we go click Refresh. Going through the exercises. And So again, right from here, you can actually do this was 60 minutes that I can update. And so we you can do all sorts of changes right from this it kind of makes things simpler. So now that exercise routes. So let me go back into the code all we're going to have is the get an ad. Now in have an update and a delete. For now we'll just for the exercises, we will have everything, we'll have delete, update. And that's what we're going to paste them the other route. And then I'll have a slash colon ID. So this colon ID is like a that's created automatically by MongoDB. So if you from the database, and then you do a get request. about that exercise. So we have exercise that find this is getting the ID directly from the URL here. the exercise, we're going to return it as JSON, So then the next thing is going to starts off looks exactly the same. But instead of get it's it's a delete request, instead of a get request, it's going to get it right from the URL here. says that then after it's deleted, it's going to update. So if the route is exercises slash update then we're going to update it. So first, we have it. So exercise that find by ID, and we pass in get the exercises that then and then we what we're to take the exercise that username, so this is the going to set the username to equal rec, that body route needs to receive a, a JSON object that's a description, a duration and a date. Just but this time, we're taking all the information that already exists. And then we're going to save we're going to return exercise, updated. So now test these other ones. So I'll go right back over So first, we need to get an ID, I'm just going to slash exercises slash ID. And this is going to be a single exercise. So before it returned, all the where it's localhost 5000, slash exercises, slash that corresponds to that ID. The next thing we're it. So slash exercises slash update. And then we have the ID here. I wonder if I can hear now we'll ID. And this is going to be a post. This is the has to receive a username, description, duration run from what it was before, it's going to be walk then we'll keep the date the same. So I'm going to the way the program works is that you always have date, you cannot just send the field that you want or there'll be an error. Now that's some something just receive one of the items instead of all of it has to accept every single field. So if I into a get request and take out the update. You walk in a duration of 120. But actually, we don't it. Instead of sending it to get request, I will deleted. So now I'm just going to go to the URL, just slash exercises slash and then a get request. whereas before we had two, one of them's now that we've tested this, we're actually done with some crud routes. So now it's time to start code. Let's talk a little bit about react. Now, If you want a full in depth tutorial, you can Camp YouTube channel. React is a declarative, building user interfaces. It lets you compose pieces of code called components. Now, our project good introduction to react. We use components to this is an example of a type of react component efficiently update and rerender our components. it says react component. That's what this extends props, short for properties, and it returns a method. So you can see we have a render method render method returns a description of what you and displays the result, it returns a react what to render this syntax here, it kind of looks called JSX, which makes the structures easier HTML when it goes through pre processing. And j you can put any JavaScript expressions within where it says this dot props that name, this variable. And you can see the example usage. So to you'll use something like we have at the bottom. and then we pass in the props name equals bow. So that props that name, it's going to put bow, so on another common difference between JSX and HTML is most part, you can write JSX, just like you would earlier, we did create react app that created of this back end code, because we're not going the front end. So right now, I'm going to go over source directory, and then we're going to go into, the index dot HTML. So this is the HTML page that of explain this, you can see how react works with comments. So delete that. So it's easier to see right here is where our react is going. Our react you'll see in our JavaScript, we are going to load we really need to change here is the title. So tracker and save that. And then if we go into our here. So this is our basic JavaScript file that React DOM, the index that CSS, we are not writing app. This is where we're actually going to create point where we're going to within the app dot j to create our front end react app. And you can see app, React Dom dot render, it's going to render on next. And it's going to put it here, document were just looking at in the HTML file, the route So we're not going to use service workers. So we that, when you use create react app, it sometimes So let's go into the app dot j s. That's this file or main react app that we're gonna put all of our let's get this started so we can see what this terminal window window. So in this new terminal directory, the x XOR, size tracker directory, going to do NPM start. Okay, so this is going right on localhost 3000. And here is our react to save and save to reload. So It's going to hot we make some changes. So what I'm going to do here what we're going to do, we we're not going to use And let's just return something basic. Instead of And we're just going to return it just want to say call it container. So if I save this, and I go so anything that we change here and update here, see this is being returned this JSX, which gets and appears on our page. So now let's add the styling easier. So I'm going to open up a new Okay, well, that's installing. I will go up here. bootstrap, slash dist, slash CSS slash bootstrap imported now. And now let's set up react router, router DOM. Okay, React router is going to make it components. You'll see how it works as we go along at the top right after we import react, this time, we're importing browser router as router and route router element. So now that we're importing we have to put everything that we want to be used I'm going to do here is to router and then at the now instead of our hello world, we're going building the actual app here. So I'm just going see that we have a router element for each route These are all components that we're still going list, component, exercise, create exercise, we still have to create here. And you'll see that application. The path attribute is set to the URL at the end, it will load this component. If you an ID, this is the Mongo DB object ID over the the user, the create user component, depending on it helps us map specific URL paths to different going to have to create those five components. And let's import the files we're just about to create bootstrap. So right after this, I will import all that we're importing these are the names of the they're located components up navbar component, these files we're just about to create. You can that's what we'll create now. So inside the same directory, I'm going to create a new folder. And this components folder, I'm going to create a new I'm just going to paste in this code here. And components are going to start with the start the component from react. And then, since we're using going to allow us to link to different routes. default class navbar, that's the name of the have to render something. So we're going to code right here is basically just the navbar from our purposes, you'll see that instead of class, we tag, we use this link from react router. But it's there. And we show which we're going to link to to. And then we have special classes, just the just check out the bootstrap documentation if do with that. So at this point, we're going to to create exercises list dot component, dot that component dot j s, then we'll have create user dot component, dot j, s. And those are all of create stubs for these components, just so we exercises list component, just put in this, this you can have importing react and component, extends component. And then we're just going to I'm just going to copy this code and go into the exercises list, we're going to do edit exercises. component, or just you, you are on the Edit let me make sure this is saved. And here, instead copy this, it'll be easier to start with this I'm just gonna select Edit and do Command D just type in two places at once. And I'll save that. And then our create user component. paste that in here. Instead of create exercises, want to create users component. The last thing I be able to test this out. So let me go over to happened. This is the wrong type of quotation there. cannot resolve create user component. Here Let's see come ponen Oh, yeah, I just spelled this good to test every once in a while while you're working. Let's see. It's looking for an exercise. take that off. And now we're going to work and list component. When we click the different things click here you are on the Create exercise the create user component. And now I'm back on App just to use the styling better from bootstrap we'll set the class name to equal container. And And then I'll just indent this a little bit. I think that looks a little better. So we have little more centered. Okay, let's start creating stubs of the components. And now we're going to create exercise that component. So this will allow to add first add a constructor. So right here, you got to do constructor props. And in Java, and when defining the constructor of a subclass. So that have a constructor should start with a of the component by assigning an object to this need a property, we are going to create properties of the MongoDB document. So we'll have username supposed to an equal sign. That's supposed to be a duration, we'll start this as zero because it's which is going to be a new date. And then these also going to have something right just for this going to use that in a minute here. So state is you're never going to do something like let name, you're always going to create everything will automatically update your page with the new array here is because on our page, there's gonna users that are already in the database, you can now we need to add methods, which can be used to constructor, I'm going to add a method here and explain that he just in a moment here, but when the state. So to set if we want to set the here's this dot State DOT username, equals and then put use the set state property or the step set state can set just the item we're going to change user this is going to be called in we're gonna have a someone enters the username. So whenever someone and it's going to set this date EDA target dot is the value of the textbox. So it's going to was in that text box. Now, if we just set we're it's not going to put all the rest of our state to it just updates this element within the state, within the state. So we do the same thing for all I'm gonna change things. So on change username, this can be description. On change, this is going then we have date. And then we have date here. we're going to use a library to make a calendar calendar. So we're going to pass in the date here. passed then, after those methods, we will add one you'll see the form at the end of all this, I'm first. So on submit, when someone clicks the first want to eat up prevent default. So this from taking place. So instead of doing what it we're about to define here. So I have a const of just create a variables normally, in react well, variables if they're only going to be used within we're just going to set everything so the username and description is going to be this dot State DOT be this dot State DOT duration. And then date is all we're going to do with this exercise is do eventually, this is going to be the part where we're just going to finish up a little bit of our our front end to the back end. So after this, the do window dot location equals slash. So we're just which is going to be the list of exercises. So the list of exercises. So now we just have to make methods. So if we see the word where it says this do a console dot log this within this method, we make sure that when it says this inside a method, we want this to refer to the class this whole going to paste in some code here. And it says this username that bind that this. So we're binding will be referring to the right thing. We're just people to enter exercises. But first, we must add I was mentioning earlier, they're going to select down list. Eventually, the user list will come though, we'll hard code a single user. So coming component did mount. Now this is a react methods in react, that react will automatically will automatically be called right before anything component is about to load to the page, right code. So what we're going to do here is do this of our users array. So users is going to equal now we will load this directly from the database. also want to set the username to test user, the user in the drop down selected. So we want the beginning. The final thing we need to do not, the So I'm just about to paste the form code in here, over it here. I'm going to paste that in. And so our heading create new exercise log on submit, Submit. So you can see we have these curly braces, And so we can say that we're gonna call this.on have our username, which is just this is a drop the value to this that state that username, and this that on change username. Now this is where box, we have different options. And we're getting can see we have the curly braces, which means we that State DOT users, which is an array of all database, that map, that map allows us to return this function. Now, this could also be an arrow now, it's just a regular function. So it's going it's going to return this is going to return an And in this option, we have a key, which is the text that will appear, which is also the user. a standard input box. But we set the value. And This is changed. We have duration, which is in value the on change method. Now the day is going a date picker component, which we still have to pop up a calendar where you can select an actual and what happens when you change that selection. we are actually going to install a package with is already a package that exists. So down in the And while that's installing, we are going to right at the top, I'm going to put in two lines. picker from react date picker, and then aligned at this point, we can actually test this. So I'm browser. And I'm going to create click Create log. I'm going to open up my browser for on a but it may be something different. And by I said console. So I'm gonna open my JavaScript console. open up my JavaScript console. And you'll see select test user, I'll put run, I'll put 10, for picker I was talking about. So we can select a you'll see two things happened. First, it, logged description, run duration, 10. And then we have it logged it, we got taken back to our exercise it makes it responsive to different sizes here. create, but eventually it will show all the now that we've created that component, and we've user component. So let me go over to the create constructor. So actually, this constructor is by just copying this constructor from the it in the create user component. But this time, and then add an on Submit button, our state And then just like our other thing, we're going have an on submit method, which is gonna be pretty like before. So again, it's just going to be a then once this is submitted, we're instead of we're just going to have the username. And I'm instead of not changing the location back to the this page. So they can enter multiple users at a state and we have to set the username to blank, we should have we should set back the blank just like I said before, we are eventually going we're just going to set the state just like that. don't know exactly what's wrong. types, this set So I don't know why it's giving us this error, first, we're going to have to add our code for our what we're going to render here is just a very Create new user, there's a submit button. And of username and on change is on change username. browser. And oh, I see what I did wrong there. So be parentheses and then brackets. And then I can so now we should be able to save it. Okay, so the console here. Now we're going to test create it will show up in the console. And then this works. So now we can submit users and it shows on connecting the front end to the back end. So are separate. So we're going to be connecting the requests to the server endpoints on the back end. request to our back end. So in our terminal, we'll complete the implementation of the create So at the very top of the create user component, just have to go down to the submit button. So in will still log the user. But now we are going do axios dot post. And then we'll we have to put localhost 5000, slash users slash ad. And then we'll do a dot then. So this is going to be a do something. And what we're going to do is take rest dot data. So you can see this actual step request to this back end endpoint. And it's going request body. And that's what we do here, we just go into our back end. So you can actually see going to have to open that file again. The server users that j s. So this is the route we're doing. to user slash add. And it's going to expect in and then we create a new user, and then we save just save it, and we can test things out, I will user added. And right now if I add a user that's right in the log. Now something to do to refactor But right now, we're not going to do anything the log, because it won't accept any duplicate the dashboard, and I click refresh, we should see and it's been added to our database. So we got And let's start completing the implementation the Create exercise component at the very top, from axios. And then we are going to do an axios going to look very similar to the create user one. right after we log the exercise, we will post be slash exercise. Instead of user, it's going to the console, which would be exercise added. So you again. When it gets this route the post, and then the body, we create the new exercise, and then we show up in the console with the console dot log this out. Because we still need to update our we have a drop down menu where you can select have currently been added to the database cut this code out here. And right now, we are going to be axios dot get, we're going to send a 5000 slash users. And after we do the request we'll pass it into this arrow function. And now response that data dot length is more than zero, user in the database. And if so, then we can, I'm out before. But we're going to not use this sample dot map. So map, so data is going to be an array, us to return something for every element in the And while passing the each user in the array, kind of explain that where it's user dot username, the array of users is going to be each of these this is the second item in the array, this want the username field. So if we go back over different fields, that's why we're just going we don't care about the object ID or the created this is going to be response that data. And the first element in the array dot username. Okay, in the database, this what we just did. So now we go back to the exercise tracker. So I will do a now it's showing a drop down menu of every name our array. So I will choose marry. And for the duration 65 minutes, and then the date. Just click good thing we're testing it out, because I just be exercises with a plural here. So let's try Mary bike ride 65 and choose a date. And good, and check out MongoDB Atlas. And then we'll see we And this is one we already had. But if we go to duration 65 and the date that we entered. Great, complete the exercise list component. So let's this is still a stub. This is going to show every this will be the homepage of our app. So at the we're already importing react, but I am also going going to import axios. So now we're going to start empty exercises array. So we'll do constructor you always Start with super props. And then before to the method, but this time, we'll do it the create a method called delete exercise. Because you're going to be able to click a button to And then I just have to initialize the state. So there's only going to be one item, I'm going to And that's just going to be an empty array of get that list of exercises from the database. So method. Just like before, when we got the list the list of exercises from the database. So we'll colon slash slash local host 5000 slash exercises, take the response. And we will do this dot set going to be response response that data. So before got just the username field. And because we didn't we do want all the fields for the exercises. So ID, that username, that description, duration, of this stuff. And we're going to put it into going to just catch any errors that there's that we'll just console that log the error if there's where I could have also caught an error that I code will run before the page is rendered and add we got the axios dot get endpoint that's going go to the exercises here, so here, let's go to here. So when we go to the exercises, slash, and which is going to return all the exercises we'll get here, and we will set the state. So this delete exercises. So let's create the method for code. And now I will explain it. I'll do it right going to take an ID. So this is the object ID that automatically assigns to the thing that we're we're saying a delete request to this URL slash this is an exact route that we created in the back then. And we're just going to a log that it's been right from the back end. So after we delete the the exercise from what's being displayed to the going to be a row for each exercise. And we want table. So we can do that. This is where react going to set the state and we're going to set the it will automatically react will automatically how this is going to work. This that's Data now we're going to filter it, that means we're exercises here. And this is what we're going to we're going to return it. If l dot underscore exercise in this exercises array does not equal the exercises array. So this is just a way to just may be wondering, where does this underscore Id made an underscore ID. Well, if we go back to ID is automatically created. So the ID in the automatically when we create the object. So after statement of the render function. So this is where that's going to display on the page. So just paste our heading. And this is going to be a table. And we have all our username, description, duration, gets into interesting the body, it's going to call method, which we need to implement. And that's above this, I'm going to paste in the method here, list and exercise list, it's going to return this, map is going to return something for every element exercise, it's going to return a component. So just about to create. So for every element and the And that component is basically going to be a props, there's two props are actually three props here. So we're gonna pass in the current exercise. variable. So here's the variable name, here's we're passing in the Delete exercise method which is the just current ai exercise.id. So exercise component, and then I'll talk a little above the other component. So now, this one have this exercises list component dot j, s, we have the exercises list component, and we There are two types of components in this file. functional react component. And here, this is the word class here. So the key thing that makes class component is the lack of state and lifecycle component didn't mount lifecycle method. So if all you should use a functional component instead of of the components in our app, we have a separate we've just put it in the same file in the exercise this component is doing. It's accepting the it like exercise, so the exercise and the key here a table Row. So we have prompts that exercise that action, description, duration, that date. And because the date is a full date time string that the first part of it, which is just the date part. react router DOM. So it's going to, it's going to load another component on the page. So we're that exercise the ID. So this is a component that for edit the exercise component. And then we're delete link, and so on click, once you delete once delete exercise. So we've just passed in the exercise method is right here. But we've passed delete that exercise here. And so it's going to or let go here, where it's going to send a call to to the database, you can see the squiggly lines Technically, the best practice here would be to case, we're just going to do like this. If you as a button, you can create a button instead of to anything, the best practice would be to make take the time to do that right now. So now we've going to create the Edit exercise component. the Create exercise component. In fact, I'm going just pasting it in here. Now, another thing you combine both of these into a single component, on what it's going how it's going to display. But components. So this is going to be called edit this stuff is going to stay the same. Something did mount. So here we are in, we're going to get the same here, except we're not going to set the from the exercise we are editing. So we're going here. So I just pasted this in, we have axios that we are passing in the ID. Now this word says we're getting the ID directly from the URL here. ID from the back end. And as a response, it's do this that set state. So we're going to set the was with the response that data that username then here, we're going to convert it into a date, And now there's just a few other things we need and then exercises slash add, it's now going to be in the ID, which is going to be this dot props. going to the second thing we're going to pass the same. And then we just have a few things to It's going to be edit exercise, log or edit with Exercise walk. And we just finished that. So like exercise is very similar. So now we can test app. Just going to close the console for now. here. Let's just add one more exercise. So we can run quintiles and we go for a run for only one because he has to take his daughter to school. exercises foamiran Quincy bike ride bike ride, Edit thing should work. So actually, Quincy is we'll go to Edit. And then now it's going to be it's now going to show 100 minutes here. And if we should see yet quinti run and duration 100. to try the lead. So if I click Delete, it let's go see if it got deleted from our database database. We just have the two items now. So now whole thing. And hopefully you've learned a lot and how to use MongoDB Atlas. The code is all thanks for watching. My name is Beau Carnes