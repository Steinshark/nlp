So this is a case for making your own game engine, um which is a loaded topic. All right, I'll get started. My name is Re Graham. I've been making games for a long time. I wanna start before anything else with a pole by Show of hands. How many of you are working on a project of which you are using an off the shelf engine such as unity? Unreal Goode, something like that. Yeah. Like everyone. OK. How many of you are using your own tech by show of hands? Oh my God. A shocking number of people. It's funny. I we, we do, I do rehearsals for all this stuff, right? And every time I did a rehearsal, I was prepared to have some line that was like, oh yes, only three of you or something like that. I'm shocked at how many of you are doing it. That's awesome. Um So I feel like I've started early. Is that a bad thing? No. OK. We're just gonna go rogue. Here we go. So, um I'm partially surprised that this talk was chosen at all because usually when I have this conversation, this is the, this is the reaction that I get. And those of you basically on this side of the room who are working on your own thing, working on your own tech. I wonder if you get a similar reaction to this because II I certainly do. Um I know it's insane. Here's the thing and I'll just get this out of the way right away. Uh I am not saying you should build like a fancy, super powerful, you know, unreal or unity competitor. That is, that is not what I'm saying at all. Uh I think that's probably the wrong choice. I'm just, you know, a little baby, a little baby engine. That's what I'm talking about, right? Um You may not actually need all of unity. The other disclaimer that I have is that mostly this talk is for programmers. Um If you're a designer, you can get something out of this. If you're an artist, you can get something out of this. But mostly I'm talking to the programmers in the room. The, the reality of creating your own engine does require a bit of technical knowledge to be able to go. So that's, that's the other disclaimer that I'll make. So uh I am reds, you may not know who I am since I've never spoken at the Indie Summit again. Usually I'm across the street in the A I summit. I've been working in games for a very long time. I've been programming for a very long time. And I've been teaching for a bit less of time, but still quite a long time. I've worked at a bunch of companies. I've made a bunch of games. The smallest team I've worked on was 2.5 people. The largest team I've worked on was 250 people. So I've gone from AAA and Indie and back and forth and, uh, I do a lot. Um, so some of the stories that I'm going to tell, in fact, all the stories I'm gonna tell come from real games. I probably can't name names because they're not always uh positive stories, but I'll tell them anyway. So let's get started. What is an actual game engine? When I say game engine, it's like such a loaded term. There are people who think things like SDL are game engines. There are people who think that unity is, is barely a game engine or Ogre 3d. So let's let's define what this actually is. It's basically a bunch of code and, or other tools. That's pretty much what it is, right? It's just a bunch of code that is somehow all lumped together. But I think we have different gradients of this. So we have this like code to engine axis and all the way on the left, we have simple libraries, just stuff like, you know, math libraries, Z live tiny XML like things like that, right? They're literally just a pile of functions, a pile of classes that you can just call and they solve a particular problem. Hopefully quite well. Moving down our list, we have something like frameworks. Frameworks are uh it's the exact same thing except the code, all sort of works together. Uh you know, things like SDLSFML and I would even say things like Pie Game or the, the sadly dead X and A. Um these are all things. Yeah. Thank you X and A fan boys. Um The one that's in the room, these are, these are all uh these are all frameworks, these are all things that we build upon. Um But they solve very specific problems as well. They just work together, then we start getting into what we would consider real engines, like generic engines like unity and real guo all the ones that we all know and love and then we start getting into really specific stuff, stuff that's like RPG maker, you know, Ren pi those types of things that are like if you're gonna make this very specific kind of game and this engine is specifically designed to make that kind of game great, right? Use pi game if you want to make a um interactive sort of novel. So we have this like wide gradient of things and I think most of us live if I were to just take the average of the games that are, that are used probably about here somewhere, right? We're probably right about here and I feel like we could move it a little bit over here. That's kind of my pitch. So what does this buy you? What does a game engine actually buy you? And that's really the thing to think about. So why, why should you use a game engine? Why should you consider not using a game engine? The thing to ask yourself is what is it about you? Right. Games are just problems. The problems have to be solved. I have to render triangles onto a screen. I have to play sounds, I have to handle like somebody pressing something on a on an input device. These are all problems that have to be solved. And if your engine doesn't actually solve those problems completely, it might as well not solve them most of the time. So I'll give you a couple of very real examples. Um And the first one, I'll use unity. I'll kind of shit on all the engines, but I'll start with unity. Um So game objects, game objects are fine, right? Mono behavior is fine. It's a basic game object component system. That's fine. I worked on a project where uh we had a, you know, many projects have a few objects. This project had a lot of objects and now the heavy weight of mono behavior starts weighing down the project. So we couldn't use the game object system. It was just too much. So we built our own game object system and rewired uh from unity to get game object system, right? So we had to, there's literally one game object spawned in the scene and that was our hook into the update. So we had to like do extra work to get our own object system in there. That particular game is a poster child for this talk because literally all that the game used was rendering audio input. The fact that it's C# that's about it. I mean, so it's like we could have done this another way. Um That is a different horror story though of maybe don't ship your prototypes. The next example uh where I'll crap on another engine is unreal. So this is an interview that I had. So I went on a technical interview and they wanted me for some lead A I position and uh IC for ND A reasons, I can't talk about this specific game, but I will say that they had a strong networking component to it. They needed to do a lot of fancy networking stuff. And I'm like, how are you going to do that in Unreal? Unreal supports networking. But what you want to do seems a little out of scope. And they're like, yeah, we're literally ripping out and rewriting all of networking, which is hard, not just because networking is hard, but because ripping it out of unreal is hard. So if it doesn't solve your problem 100% it might as well not solve your problem. Most of the time sometimes you can extend but not always. So let's look at the other side, how much does it actually cost you? Well, the obvious answer is financial, not for all engines but for many engines. Right? There's a financial cost and you can do the math. Um, which is a simple math. You take your licensing fees, you subtract, what time you think it's going to save you? And if that cost is greater than the benefit, well, great. The answer is clear, right? Maybe you, uh if that cost is over the benefit, then then financially it doesn't make sense to do this, make your own thing. Um, but this doesn't apply to everything, right? Goodo and Red Pine and other things like Goodo is sort of this up and comer, which I'm excited about personally, even though I'm giving a talk about not using game engines because it's open source anyway, there's a second reason which is, I think a little more insidious, right? The, the financial reason we can, we can throw off, but there's a, there's another reason which is constraints, you have design constraints, right? Maybe it's only good at making a particular kind of game. And even if you're using unity, how many of you have looked at the Steam Store and said, oh yeah, that's the unity shader, right? Like we've all seen that, how many of you looked at Unreal Games or whatever? And it's like, oh, there's that weird lighting thing that Unreal does. So it's, you're making it style of game. They're good at making things I'm not gonna use if I'm really good at Unreal, I'm probably not gonna make a two D game. Like Unreal is not as good at making two D games. You fight the engine in certain cases, you fight it. If you want to try and have it shipped on a device like this, you can do it. Of course you can, but it's not as good as other engines that are used to doing it and maybe not even as good as doing your own thing. There are such technical constraints. How many objects can you have in the world? You're constrained by that, by whatever the engine has, you're constrained by whatever platforms the engine supports. Does it support the platforms that you actually want to ship on? I don't know, probably nowadays but does it really? Right. So, but that's not even the worst for me the worst. And when I started working on my own project, the one of the biggest reasons I chose not to use an engine and use my own code is when you tie your star to another engine to a third party body of, of code, you are now tying the success of your company to not only the success of that company, but the whims of that company unity made an interesting decision not too long ago they did, right? And here's the crazy thing. The only reason, sorry. Camera guy. The only reason that, that didn't work. Why did that not work? Because they don't have a monopoly. They don't have the monopoly that they think they do. There's unreal, there's good, there's other things. I live in the Bay area. Does anybody here live in the Bay area? Oh, ok. Like basically the same people making their own deck. Um, here's the thing, uh, for, for electricity to pay for this electricity. I pay PG and E Pacific Gas and electric if I'm unhappy with them, my one choice is this, I could not have electricity and gas. That's my choice. That's all I have. They have a monopoly on it. So any game engine that you tie your success to, they can change the deal. Unreal just changed their deal. Now, it's not for us, it's for film and all that stuff. But of course they did, these are for profit companies. They uh they're not about your success, they're about their success, which is fair, right? I mean, it has to be. But yeah, you know, you tie your star to theirs. That, that's a, that's a cost and possibly one of the biggest ones. Ok. Rolling your own engine. I know I'm a little crazy about this, but again, I'm gonna say this again. Right? Do you, you're not making something super generic, right? You wanna make exactly what you want? I'm actually saying, basically make the game. Don't worry about the engine. You can pull in libraries and things to solve specific things. Like you're probably not, I mean, unless, unless you're in the wrong room, you're probably not trying to remake of massive AAA, you know, the next dragon age or maybe you are. That'd be awesome. All right. So what goes into a game engine? Well, kind of a lot. Let's uh let's rattle through some of these, right. We have platform interactions, rendering sound input physics. If your game uses physics, world representations, I mean scenes levels, that kind of stuff, game objects, U I resources, an editor, the heartbeat of the game. And that's the last bullet point for those of you taking pictures. Um It's a lot, we have a lot of stuff but we can build this kind of stuff. We really can um how can we make all of these types of things? Well, we can start with frameworks, libraries, that kind of stuff. And I'll give an example, let's say that you're making a project. Um And we need to build all of these things. I would start with a very basic and a very simple uh framework. So something like SDLSFML is also fine if you're more of a C++ person, but SDL is just a bucket of functions that you can use, it is free, it is open source. So you can make changes if you really want to, there's OS rendering sound input probably a bunch of other things and you don't have to use any of them. It's well known. It's used in, uh, actual commercial products, right. It's used in real games, used in real things that have shipped. Uh, so it's solid is what I'm trying to say. There. Many of them use it just for operating system stuff just to be like, I don't want to deal with writing Mac code and deal with writing, you know, Android code or any of that stuff. Like it's really good at that kind of stuff. So um and if you don't want to care about rendering, you don't have to, you can ignore rendering entirely, like you don't have to do anything when it comes to the rendering side or you can and it's fine. OK? Um There's SFML, there's other things. Um I'll mention this as well. I actually removed the slide on this, but I feel like it's important enough to mention it. Um If you're going 3D, there's also uh something called Ogre 3d. So that is, that's a weird one because that walks the line between like is it a framework or is it an engine? And I don't know it's somewhere in between, but it's again open source, you can do what you want with it. Physics, if your game uses physics, there's things like box two D. Um That's a good one. For a tiled, you can use level editing for level editing, you can use tiled. Um And right, that's one of the big complaints about rolling your own tech is there's no level editor. There's, you know, you don't have this like synergy of creating um a, a, you know, an inspector with an editor and all that stuff and tiled solves these problems til D is uh an awesome little tool. You can drag the game objects, tiles, whatever you want around again. It's a two D thing. So it's for two D stuff, but it works quite well and they have custom nodes and things like that. It exports to an XML format that's well understood and well documented. You need somebody to read XML. So you've got tiny XML. So that's good. Um But this is all A C++, everything I've said here is C++ and that's a barrier as well. C++ is an interesting language with an interesting history. Um I learned, I mean, when I started programming God, almost 30 years ago, um I started, I learned C++ and so I have like a Stockholm Syndrome love of C++, but I also recognize that it's not a language that one wants to learn or use uh because it's not an easy language and it keeps growing. So maybe you wanna use something else. There was a uh there's a talk, right? That was about integrating C# into, into your thing, which I just saw yesterday as I was looking through what talks I wanted to go to. Um So that's a, that's a thing. I like the Lua. So soul for Lua works as well. I have an, I wrote my own integration which is open source. You can find on my github if you want. There's so many libraries out there, there's so many things out there that you can pull in together to, to do to, to build this, to forge this thing that we're trying to forge. Right? OK. You can have Hello World up, assuming technical knowledge, you can have a Hello World up in an afternoon. You really can, right? You can, you can get a Hello World with some basic, just here's a basic tick, a little window showing up. You can get that in a couple of hours. You can have a framework in a weekend. You can just get a, a basic framework of, you know, while true do my game loop, that kind of stuff. You can get that going in a weekend. And I think within a week you could probably have an entire test level. And I know because I, I did all this. I'm like, can I though? And I did and I had a in a little, it wasn't like an amazing thing. I'm not gonna win awards for it, but I had a basic test level with a little object running around with a silly little object system in a week. Now, this is for something really, really, really simple. Right. Again, we're not remaking unity. This is for something really simple. So some of the advantages the advantages that we have for doing this. Right. Well, it is generally cost effective in the long term. My suspicion is that nobody in this room is like making a game and they're like, ok, cool. That was done. I'm gonna go be a farmer for a while or something, right? Like we're probably in this, especially for as, as crazy as, as indie sort of are to have to do this, right? Um Cost effective in the long term because you're investing in your own company, in your own tech, in your own world, right? You build the thing that you want and nothing else. So that's extremely important. That's extremely powerful. Remember in that pre that slide minutes ago that I had with the big gradient, you could build that thing all the way on the right, you can say, OK, the type of game I'm making is this rogue like style game. So I'm going to build, I mean, use this framework and then I'm going to build on top of that. Exactly the systems that I need that may enable me to make rogue likes fairly easily. And again, I'm not talking about like let's start by spending, you know, two years building an engine, right? Teach a person to make an engine and they'll never make a game in their life. Um What you do instead it's true, right? You guys who build your own tech. That's where all the laughs came from, by the way. Um Which is true. So, what I'm saying is you make your game and you extract stuff out as necessary. It's probably gonna be easier to build those types of games that you want to build. But we have a lot of disadvantages that we have to, that we have to turn through. Yes, there's a large upfront cost. Of course, there is, you're building your own tech. There is a, a much, much bigger upfront cost. There's no automatic knowledge. And this one's interesting because I didn't quite get it until I in my own little indie studio. I started having to like, hire people and bring people on board. And I'm like, oh right. They don't, they don't know how my game object system works because it's a weird game object ec SS hybrid. Ah, I must now write documentation, the bane of all programming existence. Um The thing that made it work is I did have, I mean, the code is well commented because I'm not a monster and uh the, we had relatively decent documentation for things. But I, I'm like, oh shit, I'm gonna have to spend a week build a bunch of documentation on boarding because this programmer has no, like they'll just walk in and be like, OK, I guess it compiles now. What? Um So that was, that was something right? There's no, not that automatic knowledge of bringing somebody in. You also often require C++ knowledge, even if you don't actually require somebody to write C++ um it probably requires the, the low level knowledge of understanding, you know how like unity is put in a lot of time, for example, to, to hopefully make sure that unity never or rarely crashes, which of mixed success. But still if C# explodes, they throw an exception and catch it in the uh and catch it up and you just get a spam of a bunch of exceptions, which is better than what happens if that happens in unreal because now you have a pointer dre an all pointer D reference or something and the entire editor explodes and then you're like what happened and you have 50,000 messages that go by because everything crashes. Um So, you know, there is some level of low level knowledge that is required here. It is generally less robust in terms of tooling. Now, this wasn't this, this wasn't as much. So I thought this was gonna be the big issue. That's, it's the last bullet point on this slide because it was actually not as big of an issue as I thought. So for the project I was working on which was a point and click adventure game. It had um it, it had tiled as its sort of main editor. And so, OK, in unity, let's say I want to make a level, what am I gonna do? I'm gonna take some assets from over here and I'm gonna drop them over here and I'm gonna attach things to them. So, what is it like in my project? Well, they grabbed some things from over here and they tossed into tiled, they ran an export script and then they ran the game. So the only thing was there was one little tiny extra step and they couldn't just press play in the U I. They had to just go to a different window and double click and executable. So that was really it. For content creators, there was not much of an issue. Um They got used to it quite quickly. So there is still less robust tooling. Unity has a crap ton of tools. I know it has a crap ton of tools that you would have to build if you're doing the thing or find third party versions of. But for a small really simple game, I don't think you need the complexity of a full engine. You might not need the complexity of it, right. Do all that analysis that I just talked about, but I'm just one person standing up here pitching for this. Right? Why would you listen to me? Here's a list of games that use their own tech. And I would be shocked if there is even a single person in this room who hasn't heard of at least five of these, probably most of them. Right? I just found this list quite easily. Just digging through these are all games that use their own tech, all of them. So it's definitely doable and many of these games I think are great examples of why it's good to use your own tech. Um What am I here? I'm at T ok. I'm at 20 minutes. That's about right. That's about where I expected to be because I have one final point and I'm going to in fact, step away from this and address you all so that we're all uh engaging with each other because all of this culminates to my one final point. I worked in AAA for a long time. How many of you have worked in AAA? OK, a lot of you. So, and I'm not gonna, I'm not trying to shit on AAA for this because there's a lot of creativity in AAA. But sometimes I don't know if you guys can back me up on this. It feels like that the greatest innovation in AAA is, here's the name of a franchise with a number next to it that we've incremented. That's it, right. That's what it feels like that sometimes and again, like it's OK. Yes, there's a lot of innovation, a lot of creativity, but I, I worked on the Sims Four and I can tell you that there are times where we got a design that came from the Sims three that came from the Sims Two that came from the Sims One the relationship system is fundamentally this, which I wrote on the Sims four is fundamentally the same as it was on the Sims three as it was on the Sims two as it was on the Sims one with some changes and some additions. So we build the thing that we know is gonna work and then we, we kind of innovate in this little space over here and we have to, because the Sims four had 250 people who needed to continue to have jobs and pay their mortgage in Indie. That's optional. Sadly. Right. It is though, it's optional. It is, it's, it's sadly a little optional. Um And we all know it. So I left AAA because I, I kind of got sick of working on other people's ideas mostly. And when I go to G DC in a place like this and I walk out to the Expo Hall and I'll wander some of the, you know, big company areas and what is Microsoft doing and what is Epic doing and all this stuff. But where I go is I go to the Indie Boost and I have been for years now because that's where the interesting innovation is. That's where the design innovation is. That's where the creativity that I was missing in AAA is, that's why I'm here. And so it might be absolutely mad for me to come up here and say all this stuff and it probably is what we're missing is technical innovation. We have two engines. Yes, there's Goode yes, there's other things. We basically have unity and unreal. When I talk to my AAA people, when I talk to all my friends who are still there, everyone's moving to unreal. They're all moving unreal, which is fine. That's probably a reasonable thing for them to do. But what we're missing is technical innovation because Epic is doing the technical innovation, unity is doing their technical innovation. But they also have to be all things to everybody so they can't go too far off the beaten path. So, while there are some really interesting indie games that are out there now that do some interesting technical innovations, that is what we are missing largely when you build your own tech, you can, oh, we're gonna do this really crazy thing over here and that's what we're missing. And yes, that's utterly insane. That's utterly mad for me to stand up here and say to a bunch of people who have put their livelihood in these engines maybe don't use engines and yes, maybe I am mad, but we're all Indies. We're all mad here. Thank you. That's my talk. Ah. Mhm. You know what's crazy about doing? And I've been doing talks at G DC for many, many years since 2009, pretty much every year. And when I do run throughs of talks, they're like, what, like this run through of this talk was exactly. Uh It was like 30 seconds under every time and this time I'm five minutes under which is like, OK, that's how this works. So we have questions though. Yes, yes. Is this thing on? Hello? Thank you for the awesome talk. By the way, I love passion. Um Earlier you mentioned that ro rolling your own engine is gonna have a high upfront costs, but it might pay you back over the long run. Uh Where do you see cost savings over using something established like unity or unreal? The cost savings happens in the simplicity of what you're trying to do. So if you are trying to architect your own like epic solution, then there is inherent cost in terms of supporting that solution. That's why that's why a lot of company, I mean, look at CD project red, that's why they're going to unreal and to be fair even though I just shed on all of that probably that's the right choice for them, right? They probably should go to unreal because their engine was in a very sad spot. One of the big reasons why Cyberpunk 2077 went the way it went besides corporate greed in general was because the designers were working on a moving target. The engine was continuously being built as the designers were trying to make the content for it. So it didn't really go well for them. So if you're trying to do something like that, then the cost savings happen much more in the long term as opposed to in a shorter term. But what I'm advocating is you build your own tech right internally, just built upon frameworks. And so you built your own game object system and that kind of stuff and you're extracting stuff out as you're making games. So that's where the cost savings tends to happen. It's also mostly open source. You're not paying a unity licensing fee, but that's where it comes from. Does that answer your question? It does. Thank you very, very much. Yeah, you're welcome. Hi. Hi. Um So I, I really enjoy your talk. I thought it was really interesting because we end up using in our company unity for, but we kind of write all of our own systems on top of what unity is and the reason that we, we have to do that is almost entirely because they export or they do all the exporting to Android and I OS on our behalf. Uh Do you have any recommendations for ways to get around that kind of thing? Um Because like this is absolutely the biggest shackle towards using an engine is the fact that it exports to X -- code which I think like works in an alien language or, or something. code is um exo is special. Yeah, I mean, it's, it's its own thing. Um Oh man, how much, how much do I want to? Ok. So um I, I don't know how, I don't know why Mac ever gets software made because it's such a like step one is Pay Apple a bunch of money. And I'm like, that's like, if I wanna make a release build on PC, it's a drop down. I set, I go OK, I'm gonna set this to release, compile and I'm, you know, I have some data builds but I'm basically done in Mac. It's like a whole, like you sacrifice like a chicken of some kind. It doesn't have to be a chicken but some kind of bird and like it's, it's a whole thing. So, um no, I don't have a good answer for you and I'll be perf and I'm just gonna be perfectly honest with you. If I was making like a game that had to ship across multiple mobile devices, I would probably use something like unity. Exactly for that reason. Which really sucks. But it's a terrible, it's a terrible thing because at that point now you are gonna have to dedicate somebody to handle all of those platforms though. SDL does handle some of that for you. I don't do mobile games. So I don't, I'm not like the person to speak with authority about how well SDL works. I don't know if anybody else here is um show of hands. Anyone here using uh their own tech for building. You are great. Do you guys wanna connect? Because I don't, I don't have a good answer. Oh, you guys work together? OK. Well, then you're fucked. I don't know. Thank you. Yeah, sorry, I'm not uh I'm not up on, on like mobile stuff, so I don't have a great answer for you on that one. -- Can Even though you're writing your own tech, it's not an established engine. Yeah, that is a uh that is a problem. Um which is a good question to answer. So how do you convince publishers? There are some publishers that I have seen where if you are not using an engine, it's a hard no for them because they feel like it's a risk. So what I have done in the past to be fair also full disclosure. I'm self publishing because of uh issues I've had with publishers in the past. But um what I've done with publishers in terms of talking about my own tech is one, I'm a software engineer with a bunch of experience and when they see and it's, it's weird to like pull this rank, but they're like, like I've worked at E A, right? Like, and I can pull that because even though I worked in gameplay and A I and not systems, all they're looking for that like, oh OK. They have the technical expertise to pull this off. And the second thing is uh creating some kind of basic demo that shows them like here's my solids like super solid demo and I've had good luck with that in the past. That is a barrier though, actually enough that I probably should have put in the disadvantage of slot because that is a real thing. Thank you. Yeah. Hey, love the talk. Thank you. If you had to pick what would be the most interesting lesson you learned from uh the most recent game, most recent iteration of your engine, whether it's technical or -- maybe design, what features you included, it didn't include anything like Oh The most interesting thing I learned in general. Yeah, just from the most recent iteration of your your engine. Jeez. Um Good question. Um I don't uh there's so much that I don't know what to choose, how to deal with. I would say one of the things that I've learned the very hard way is simplicity is probably what you want. Good code doesn't mean it's like architected in this way with using all these design patterns, all these things pointing to each other. Good code is easy to refactor because probably what you're going to be doing most of your time is changing code. So good code is easy to refactor and so focus, don't focus on the perfect focus on the on what works right now. And the good as long as I can pull back and re factor it, performance optimization is another piece of that, right? Focus on things that are like um focus on, on that low level, like the really low hanging fruit and just like those kinds of software engineering principles. The other thing is remember that when you're working on a project, um, the that bug is, is your fault, like it's, you're the guy, you can't be like, well, it's in this other system. So clearly, you know, Josie is gonna take care of it. Josie is not gonna take care of it. You're Josie, right? So um it's learning like the debugging tools and I think that was one of the big things is really spending time on tools and I'll give you, that's actually the takeaway that I would give you spending time on some of the tools. I'll give you one really solid example. Um So I have a Lua integration and I have a way for me to type in any Luis thing that I want at any point and it'll just execute this code and I use that to do things like dumping, you know, entity states and things like that. And I'm like, this is ridiculous. So I integrated C# into like basically.net as a thing into it to create a little.net window that allows me to just here's my entity and all the components and all the data and just dump it in. And I'm like, I was like so against it because I'm like, this is gonna take me forever to do and it took me like two days or something and I'm like, oh God. And do you know what time it saved me? It paid for itself in like less than a month. So, investing in tools and things like that and feeling those pain points and learning how to feel those pain points because you're the guy who's going to solve it. It's not the tools team, it's not anyone else. That's probably the biggest lesson. Thank you. You're welcome.