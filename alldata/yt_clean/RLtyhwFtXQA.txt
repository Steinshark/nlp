Hey, what's up guys, it's Pedro here from we're gonna learn how to install Node j s, as well So to get started, we're going to actually have type node j s download, you should get a web page the description in case you can't find it. So go once you download that, run it, install it enjoy I'm going to be using Visual Studio code. And it's an editor. Now, you can use whatever editor code is because it has an integrated command I'm just going to head over to my desktop. going to say no JS tutorial. And now I'm just you should have a welcome screen like this, go to folder that we just created. So I'm just going Ctrl N control and is going to create a new file, this file. And I'm just going to say app dot j s. JavaScript file. And we are just going to run it. node j s correctly. So if I hit console dot log and I'm actually going to exit out of this, but if I go to terminal, here is our command prompt. can bring this up whenever you want to run code this. I'm going to hit Ctrl B, I am going to go Now by default, Visual Studio code has it on that mine says cmd. So if I hit Ctrl, Shift P and I have three terminals installed on my computer, have command prompt. And I also have get, go ahead this is going to bring up a new terminal. So if this should say cmd. So I'm just going to remove have one open. And now all I'm going to do is type of the file that we just created was called app world from node j s. Now let's say that you're you have your own editor of choice, what you can go to command prompt. And then you can see that command prompt, but we're in a different location. copy the path that this folder is located. So I'm command prompt. I'm just going to type C the CDs change folder. So right now I am in a folder this folder. So now I'm just gonna click this. Go now if I hit Enter, you can see that our path has that we get a Hello World from node. So either way its integrated terminal, you're more than welcome doesn't have its own integrated terminal, you're In this tutorial, we're going to be talking about a JavaScript file. It's a way to separate let's say that I have an app.js file. And in requests and database calls. Instead of putting each of those concerns into their own files. So I'm going to say Ctrl N. So we're going to create we're going to save it as the tutorial, dot j s. this new file or this new module called tutorial our tutorial module something. So I'm going to some, and it's going to have two parameters, and number one plus number two. Next, what I want to to the outside world. Because right now, if I hit so I'm just going to delete this. So if I was to actually run this, you can see that we get saying, why is some not defined, I just defined it outside world to use. So I need to let know know is available to be used. So in order to do that, it in some like so. Now that this is available to sum function is located. So what I can do here Kant's. tutorial. And now I'm just going to use it a path. Now the path is dot forward slash. forward slash means that it's within the same app dot j s. So if I was to hit Ctrl, B, you as the tutorial dot j s, and that they're in the Control V, again, get rid of that. And then I tutorial dot j s. Now you do not need to pass in name of the file, Node. js automatically assumes print out tutorial, two, let's see what's inside gonna call some a little bit later, I just want to was to save this, and let's scroll down, I'm going the terminal. And now I'm just going to run node a function called sum from our tutorial module. So say tutorial and pass in one plus one. And let's console dot log it. Let's save it, execute it output of too and that we are indeed importing that we know how to do that, how will we import we head back to our tutorial module, let's say I even a class, how do I export more than one thing? the sake of example, let's add more stuff. So I 3.14. And let's create a class. And I'm gonna say I'm just gonna say object created. Okay, so now all three of these to be exposed to the outside them and then use it. So how do I do that? Well, module dot exports object. So for example, I could now experts, that sum is going to have the sum of 3.14. So I just set it equal to pi. And some some math object is going to be equal to some math app, and let's just remove this for now, I want to from our tutorial module. So if I save this, and getting an object back tutorial is now an object. it tells you that it's a function, pi, the value it's our class. And now if I want to execute this, example, we have tutorial. And let's say we want and I'm passing the two numbers, I could say I'm just going to copy this. Let's paste this package, say tutorial, pi. And within here, the dot some math object. And that's going to create if I was to save this, and run it, you can see gives us to pi has the value of 3.14. And you object created. One more thing to show you before for example, saying module dot exports, that sum what we can do is, instead of exporting each of of them. And instead, what we can do is export So I could say sum is going to be some pie. object is going to be some math object. And should get the same exact result. So let's execute And this tutorial, we're going to be talking emitter class within the events module. Now all bring Event Driven Programming to node j s. So require the events module. Now the events module going to say Kant's. Event emitter. Now this is from the events module, I was just gonna we're going to have to create a new instance of event emitter, I say, new event emitter. into Event Driven Programming. Now that I have a listener to it. So I'm just going to say event this method takes on two arguments. One is the So I'm just going to call it tutorial for this the function that you want to execute. When does this function. And I'm going to say is console dot this and run it, so I'm just gonna hit Ctrl S to that nothing happens within our terminal. Now, why listener call tutorial. But I haven't emitted is only going to be executed when a tutorial event just going to say event emitter. And now I'm just And that's it. So now, if I was to hit Ctrl, you can see that our tutorial event gets triggered happens when we actually want this function to so I could say num, one, num, two. And just for we're going to print out the sum of number one and with the emit method? Well, I'll just pass it in if I save this now, and now go to node app, you just pass in the argument. Now, this is all fine which takes advantage of using events? Well, I So for example, let's say that I want to create a just extend from the event emitter class. And let's call our super function. So I'm just going use that this property within our class. And now is going to be assigned value name. And now let's let's give this person class a getter. So I'm just just return this dot underscore name. So now that create a new instance of it. So I'm just going to equals new person. And let's pass in Pedro. And extends the event emitter class, which means that class. So now I can add a listener to the page I'm just going to call it name. And we're going print out my name is so and so. So I'm just gonna going to say Pedro dot name. So now that we've to have to call the emit method. So we're gonna Pedro dot emit, and we're gonna pass in name. And you can see that we get the desired output extend using the event emitters class. And for our one person object, so I'm just going to create a a girl, I'm just going to call her Christina. I'm in Christina. Now let's add a listener to the that on name. And you could use a loop for this. that doesn't make sense for this example, but you just going to copy this. paste this in here, I'm so why did I go there to bother are showing and attach listeners to it? Well, what I want to the event gets executed synchronously. So for and now if I was to save this, and now execute it, So because Pedro emitted first, Pedro gets so they get executed in the order that they In this tutorial, we're going to be talking about module allows us to do is prompt the user as well to have to require the module. So I'm just going line, and this is going to bring in our relying instance of the read line interface by using the read line dot create interface. And within here is this object two properties. And this is basically going to give it is input. And then we're going process not process is a global object. So you us by node. And here we're going to say STD. And And then here, we obviously need an output. So give it process that STD out. And that's going to executed, is going to return our read line or the so we can use it. So I'm just gonna say const RL user what two numbers added together are equal to. two random numbers between one and 10. So I'm just random. And we're going to times this by 10. And going to give us a random number between one and need the answer. So I'm just gonna say less Answer now that we have this, we're ready to ask the order to do that, I'm going to use our read line called question. So I'm going to say RL question. the second argument is going to be a function. And question we would like to ask the user. So I'm num two? Question mark. And I'm just going to this on one line. And we're going to include our user input as a parameter. So I'm just gonna say out user input onto the console, just so you guys I was to save this, head over to my console type I'm going to say banana. And there you go, it note that if you take a look at our console, going to hit Ctrl. C to break out of it. And what interface when we're done using it. So in order First thing, I want a new line, right after this slash n. So when I prompt the user, the users like so there's gonna be underneath. Alright, so actually test the user input to see if he actually I'm just going to say, if user input. And it's ever accept anything from a user, just to get rid to say if the user's input is equal to answer. I want to close the application. So I could say, this, and now execute the program, so I'm just What is 10 plus four, and I'm going to answer with and therefore our application closed. Now, what I event. Now, the read line interface is actually can do is actually scroll down here. And I'll add And basically, I'm going to say, hey, I want you close. And we're going to give it a callback. we close the reline interface. So now I'm just I just want to let the user know that Hey, you got So now if I was to save this, and now execute gonna write nine. You can see that correct, gets printed out onto the console. Because when we And since we're listening for a close event, this I better add a semicolon on there. And let's see user inputs correctly, what happens if the user let's create an else statement within our say else. And what I want to do basically is re That set prop. And set prompt is basically going ask the user, basically what you want to know. So please try again. And let's add a new line here. to call it. So the first method is to set the discussing our prompt. So now, I'm just gonna hit this node app. And he's gonna say what is one plus say incorrect response, please try again. Now, user inputs. So let's actually write the code for listener to our read line interface. So I'm going that is rl.on. Mine. And then we're going to pass have the user's input. And now we're going to So obviously, what we want to do is check if the are going to close the application. And now what And then I'm going to reset the prompt. So I'm let's actually make this more informative. So I'm going to print out what they wrote. user input, slash. And before that, I'm just going to say, try we set the Prop, we actually have to call it. So we just take a look at what we have so far, this a line event listener. Now when the user enters we're going to test to see if what he gave us is that but patient. And if we close the application it's going to say, correct. So now let's see what to execute the else statement? And it's going is wrong. And that is going to prompt the user keep executing until the user enters the correct action. So I'm just going to clear the terminal. say, oops, Ctrl S to save. And now I'm just going plus four, I'm going to say banana. Incorrect banana again, your answer banana is not correct. Now, if I go back up, and let's actually see going to type in five. And you can see we get the And this tutorial, we're going to be talking about module allows us to do is work with the file us to create files, read files, delete files, We're going to have to require the file module is equal to require Fs. So now that we have the let's actually use it. Now. If I hit Ctrl, B, within my Node JS tutorial folder. So let's create a file. And we're going to say Fs dot to be the name of the file. So I'm just going what you want to write to the file. So I'm just argument is going to be a callback, and this in case anything goes wrong. So I'm just gonna writing this. So I could say, if error, we're we can say, file successfully created. So I'm now if I was to save this, and let's run this node created. And now if I hit Ctrl, V. good not to be you can see that we have a newly created file we see the data that we wrote to the file. Now let's open up and read it. So if I was to say Ctrl and within this else statement, let's put all Fs dot read file. And within here, the first going to be the name of the file that you want to the second argument is going to be the encoding I want to show you guys what happens when you argument is going to take a callback function. it has error, and it has the file that you want to show you guys what the file looks like. and the right file method, I'm going to check if I just want to print the file itself. So now if see that the file was successfully created. And we get this buffer stream. And then we get this stream stores data and binary. Okay. So what we want it to be displayed as. So up here, we're in you TF a. So that's the encoding that I want. can see that file was successfully created. And file. Alright, so now that we know how to create methods. So what I want to do is start with a out. I'm just going to highlight everything Ctrl out for me. Now what I want to do is let's say that I really didn't mean to call example dot for instance, well, I could use the Rename method. dot rename, and rename is going to take in three example, dot txt. And that's going to be the name argument is going to be what we want to rename the txt. And the third argument is going to be their error. And we're going to do the same thing, as we're just going to say, if error, we're just no error, and everything went fine, we're gonna gonna say successfully rename the file. So now, you'll see successfully renamed the file. probably because it hasn't updated yet. So if I you can see that within our package explorer, dot txt. And if I open this as the same exact I want to go over. So I'm just going to hit Ctrl. let's say that when I was creating the file that file, so what do you want to do, I want to append a pen file is going to take in three arguments, just going to say example, two dot txt, the second to append to the file. So I'm just going to say is going to be the callback function. And this and, and we're gonna say if error printed out to we successfully appended data to the file. So I've move this over so you can see. And now if I save successfully appended data to the file. So let's that our file has been changed. So before we had to the end of the file. And the last method that I delete a file. So for example, we did all this I just want it gone. So let's just comment this I go over. So we're just gonna say Fs dot unlink. should get this by now. It's going to be example, is going to be a callback function and have the printed out to the console, if there's nowhere the file successfully. So now if I was to save deleted the file status up here deleted from hit Ctrl B to bring up the package explorer, And this tutorial is going to be part two of previous tutorial, we went over using the file want to go over how to work with folders. So to file system module. So I'm just going to say Alright, and now what I want to do is I'm going make directory. And our directory is is a folder. one is going to be the folder name that you want. then we're going to pass in the callback with console dot log error, oh, we successfully created successfully created. So now if I was to I'm just going to hit Ctrl. b. So you don't see is my Node JS tutorial folder, and app.js file. So we get the output a folder successfully created Now let's say that I actually want to delete this this is actually going to give us an error, but is basically going to complain that this folder are m, and r M stands for remove, and then dir and give the folder name, so we call it tutorial. which gets an error. So now if I say if error, successfully deleted the folder successfully and now execute it, you see that we get an error tutorials folder already exists. And we're trying I'm just going to hit Ctrl V. Again, delete that confirm that Ctrl V again, let's execute this. folder. So if I go up here, hit control B, you'll we create a folder called tutorial. And then if the folder called tutorial. And you can see by Now this is too fast. And that's why you wouldn't open. So now that we know how to create and delete and then create a file within that folder. So I'm make directory. So we're going to make a folder going to execute this else block. So let's remove our new file. So to do that, I'm just going to to take in three arguments. It's going to take and to give it the full path. So I'm going to say dot want you to start relative to App dot j s. And tutorial. So I'm just going to hit Ctrl B just to to be a folder called tutorials. I'm going to go to you to create the file called example, dot txt. argument is going to be what the data that you for this example. And then the third argument is error. And then within here, I'm going to write if Oh, we're gonna write successfully created, file, So I'm just gonna hit Ctrl. S, down here, node created file down here. So now if I hit control B, B, you can see that we have our newly created example dot txt. So if we go in here, you can see I want to show you is, how would I delete a folder if I just go back here, hit Ctrl B, that can't do this. Well, I am actually just going to comment use the Remove directory function is that is that because if I use the Remove directory function, is empty. So just to show illustrate this, directory function. And if there's an error print I'm just going to hit Ctrl S to save. And I'm node app. And you can see that we get an error a directory that has a file within it. So in order just going to say Fs dot unlink. And the first dot forward slash, and then we have to go into example dot txt. Next argument is going to I'm just going to say if error, print that out. if there's no error, that means that I I can now successfully remove the file. So I'm within the else block here. Add some semi colons. you can see that we have deleted folder. And you hit control B, you can see that the folders been we deleted the file that was within the folder. to delete the folder itself. Last example that I files within a folder, and you want to delete all and we're just going to create it within our folder, and we're gonna call it example. And I'm dot txt. And the second file is going to be b dot my two files. So how would I go about doing this? what read directory does is it gives you back the let's actually call it so I'm just gonna comment going to type Fs dot read directory. Now the name of the directory. And in this case, we call to be a callback function. first parameter is is going to have files now files is going to we can test if there's an error, all we're gonna we're gonna print out files, I'm just gonna print So if I save this, run this and the console, within an array, a dot txt, and B dot txt. So now everything. So now I'm just going to say for let deleting each file individually. So I could say the file name. So it's going to be dot forward of the file. After that is going to take in an was a problem deleting that file, it's going to we're just going to say, successfully deleted file. So now if I was to save this, and now file once twice. And if I hit Ctrl, B, you can In this tutorial, we're going to be talking about screens allow us to do is basically be able to way that they accomplish this is by reading and writing the data all at once. So to get started, the file system module. So I'm just going to say our file system module included, we're going to called Fs dot create reach screen. And now I need you can see that I have an example dot txt file going to be reading in. So if I head back to App give it the path of dot forward slash, example to return to us a readable stream. So I'm just say cons reach stream is equal to Fs dot read for an event. Now the return object inherits could listen for events to occur. And one event I'm just going to say read stream.on data. And And now we're going to get a chunk of data and this event data is going to be invoked. So this time we get a piece of data. So now I'm just going going to see why I call it a chunk and not the go to node And you can see that we read this data we have a buffer here, and a buffer here. So a lot easier to what the sources, and we're just now let's rerun this application. And there you are the benefits are reading this in a chunk, as when I get this chunk, I could immediately start for the whole file to load in order to manipulate this chunk of data that I got already, I want sending that data to a new file, while I'm reading new file. And for that, we're gonna have to create And I'm going to say const. Right stream is equal going to be the name of the file that I want to two dot txt. And now within here, what I can do I can start writing chunks to the new file. console dot log, chunk, I can say, right stream file as I'm reading it. And so I could say chunk application node app. So now if I hit Ctrl, B, you you can see that we wrote onto a new file. So write chunk by chunk, and our example two chunks, writing before the file is fully loaded. And This tutorial, I'm going to show you guys why you very large text file. So to get started, I'm just going to hit Ctrl. B, we have our large file dot right click Properties, you can see that the size at what would happen if we were to use the read if I was to execute this and type node app, you size is greater than the possible buffer. Now, buffer, but it uses a full buffer. Now what that in order to load this file, because this file has the buffer. And it's saying, Hey, your buffer just going to comment this out. And now what we're going to comment this out. And then we're going to on both readable streams and using the read file happens when I execute the code now. So if I was that are readable stream has absolutely no problem to cancel this, because I don't want it to finish, this be accomplished with streams but not using buffer awesome, but it doesn't use a full buffer. allows us to do is basically what's happening is you're not reading the entire file at once. So getting a chunk of the file, I'm not attempting the buffer size could be a lot smaller, as opposed which needs to be big enough to load the entire smaller buffer size, which is memory efficient. And this tutorial, we're going to be going do is basically take a source stream, which is destination, which is just a writable stream. streams and writable streams. And basically what there, we create a write stream. And then we And every time we got a data event emitted, we and then rewrote out that chunk to where we more simpler way. And the much more simpler way do is say restream dot pipe. Now pipe is going to it into our right stream. So now if I was to bring Ctrl V, you can see we have our example Tex. And pipe method is basically a shorthand version for So all we need to remember is, in order to use stream. And we also need a destination stream. this is the file that we want to read in, then this is going to take the destination where do we stream. So now I want to talk about pipe chaining. that, I'm going to bring in another module. And is a module that is for basically compression, z lib. Now what we're going to do is create a basically is what it does is it takes the input. it receives that data, it manipulates that data gonna do is compress the data. So I'm just going say cons. Gs is equal to z lib dot create jesup our transform screen. And now within here, a set data that reach stream is giving us and I could is take the chunks of data that is reading at a it basically. So you're going to get a compressed we're going to pipe it out to our destination, run this, let's save it. Now I'm just going to hit you can see that we accidentally did not change we're creating create write stream should not be compression type. So I'm just going to save this going to hit Ctrl B. And you can see that we get it's going to say that Visual Studio Code cannot reveal an explorer. And you can see that zip going to double click it. And you can see that tax. So now let's give just one more example just a transform stream. So we saw what happens when go and reverse, we're going to take our source, and then we're going to write it. So from here, go back to App dot j s Ctrl V. And instead is create unzip. So I'm just going to go here and variable to unzip. And now this is going to be our paste that here. And now what happened, well, the compressed version of it. So let's go over type. The compressed file is called example I'm going to paste this in here. Now this input, which is going to basically uncompress the destination. So what do we want our destination to you want. So I'm just gonna say uncompressed dot type node app, execute it, we hit Ctrl B. And file. So if I click this, you can see our example In this tutorial, we're going to go over the HTTP is basically create a web server with node j s. the HTTP module. So I'm just gonna say const. we can call method called create server. And this just going to say const server is equal to http take a callback and this callback is going to give So let's just do that. Now, the request object is if I am on Google Chrome, and I type in from Google. Now Google server is going to a response back. So the most simplistic example text back to the client. So I could say rez, and right, and I'm just going to pass in a string. So s. Now within here, I haven't actually sent the order to send the response, I'm going to say our HTTP dot create server method. Now there's one and running. And that's the total node j s. What is going to say server dot listen. And we're gonna and now go down, Here type of node app, you can going to go to Chrome. And within here, I'm going which we assigned was 3000. So that's where you can see that we get a response back s. So now from here, what we can do is actually actually take a look at a property of the request So instead of just saying, hello world, from node s, if it is the root domain, so I'm just gonna then I'm gonna say res dot write Hello, world have to send the response back to the client. I was to save this, and we're going to is going then we're going to start the server back we're going to go back to Chrome, hit Enter. And were to add an else statement here. So let's say rez dot write using some other domain, and that's actually Ctrl. C this to stop the server. so I'm just gonna say Ctrl. S to save node app. I'm going to say local hosts, banana. And let's back is using some other domain. Now this response put it in the else block. So if I type that, I'm back and just have the forward slash, you can see And this tutorial, we're going to be going over and file system module. So to get started, I'm explorer. And you can see that we have a static files is a JSON file, an image, a PNG file, and an a request to the server and have the server send Ctrl B to get rid of that. And the first thing on this gonna say const, HTTP equal require HTTP. system modules, I'm just gonna say require Fs. the server. So I'm just gonna say HTTP dot create and we're gonna have a request object and a that server object. So I'm just going to say that Now, let's say that I want to read in a HTML file, do is create a readable stream. So I'm just going to Fs. dot create, reach dream. And then within going to say dot forward slash, because it's going inside the static folder. And then the name of the Now what I want to do is actually write a header for is the let the client know what kind of data that right head. And then within here, we're I'm going to pass in 200. Now 200 means that then the second argument is going to be what the type. And then we're gonna pass in text slash header, I'm just going to take you guys to Google codes. Now you can see that HTTP 200 means that whatever the user requested from the server, that a bunch of HTTP status code. So let's look at So you're going on a website, and you accidentally error. So that would be a 404 error. Now, let's go this, I'm just going to go down here. And within where I want to send it. So I'm just going want to send this file, I want to send it to the response object is also a writable stream. So I'm going to save this. Let's go back to Chrome. I'm localhost 3000. And I should probably be noted I'm just gonna type node app. Now let's go back to our HTML file has been successfully sent. So let's this was pretty much straightforward. So all we file. So I'm just going to hit Ctrl V, again, file that we're reading in. So instead of index content type is obviously not a text slash HTML slash JSON. And now, if I was to save this, hit just going to clear out the terminal node app. Now file gets loaded and sent to the client. Now let's I'm just going to hit Ctrl B, because I forgot png. So I'm just gonna change this to P and G. And gonna remove this. And we're just going to go here this, now, we got to restart the server Ctrl C to hit refresh, you can see that my image has been of how you would serve a static file using the In this tutorial, we're going to be going over Now what the package dot JSON file is responsible project, metadata being the name of the project, what we're going to use is called the node package I'm going to type in net, which means initialize, jargon. So what do we want to name, the package, folder that you're currently in. So up here, you default will be no GS slash tutorial. So I could number 1.0 dot zero, that's okay. Description. project about? And we're just gonna say tutorial, the entry point is pretty important. And it lets node application. So for example, if I was making the server know that that was our entry point that for now. Enter, and Git repository is pretty hit enter keywords, we're gonna leave that blank name. license is C as defined by me, then it's yeah, that's fine. So you might think that you can see that we have our package dot JSON open it up, you can see that package dot JSON is setting. So the name, the version description of and license. And basically, in the next tutorial, going out and installing external packages This tutorial, we're going to be going over to Now our package is is basically reusable code that folder with one or more modules within it. So to Chrome real quick. And there's actually a website we can actually look and discover new packages I'm just going to pick out a package, and we're going to scroll down. And you could use the search So you can see packages that a lot of people are lower das. And then here, we're given a bunch of package, I just have to type in this command NPM the package. So in this case, the packages name is and I type NPM, install lodash. You can see that automatically. And now if I head back to my created in the previous tutorial, you'll notice property is called dependencies. And then it as well as the package version that we installed. that we have a extra folder and this extra folder you can see that our lodash installation is is all fine and dandy, but how would I now so I'm just going to hit Ctrl B. And we're going going to go to App dot j s and basically what gonna say cool. underscore is equal to require it to prove that this is working. So I'm just basically going to take an array. So I'm just argument is going to take an A value, what do you going to say banana. And the third argument is do is start at index one. And the last argument is elements within our array, the last index would variable. So I'm just going to say let example is this onto the console. So I'm just going to hit that we require lodash into our application. And is actually working. So we get a new array, and And let's say that for whatever instance that you of a module, so if I hit control B, and we're just hit Ctrl V again, what I can do is I can say which is going to be lodash. And you can see And if I hit Ctrl V, you can see that our node And that's because we have no dependencies In this tutorial, we're going to be talking about is, is basically just a standard that a lot of know what kind of changes have occurred, and the you can see that I have my package dot JSON called lodash. Now within here, you see the the carrot sign. And we'll talk about the carrot I want you to focus on these three numbers. The version of this package, the second number is third number is going to represent the patch all have different meanings. So for example, right If I wake up tomorrow, and lodash is updated, and 12. That means that that was a patch update. Now some bug fixes. Now likewise, same thing happens, and instead of four point 17 dot 11 is four point update. Now when a minor update does is it adds the old functionality, but you could still use it. if I was to go to sleep tomorrow and wake up new get version 5.0 dot zero. So what does that mean? out to lodash. And what a major update indicates version 5.0 dot zero is not compatible with the So now let's talk about this carrot character. And When we type NPM, install lodash. Now what this following rules, if you will. So this means that I do not want you to make any major version four as the major. But if there is a download those new packages. Now, there's another right next to the number one on your keypad. occur. That means you only want patch updates. that means I only want you to change the last this total symbol will say, hey, do not update say that you don't want the tilde or the carrot carrot sign to update the minor or the patch. And what you can do is remove the carrot or the only version of lodash that you will ever have In this tutorial, we're going to set up our first a web framework for node j s. So in the previous in order to serve static files. With Express, that and much more with much less code. So to get here is Express jSs official website. So you you could reference the API. And basically, this see that they give install instructions here. Now, didn't know that they had an official website, that Express is a publicly available package for just typed Express within the search bar here. code. And the first thing that we need to do is gonna say NPM and net, and I'm going to pass in yes, you basically skip all these configuration net. So now that we have our package, JSON, we can to type npm install, express, you can see that let's actually require Express JS into our is equal to require Express. Now, when I require back is a function. So I'm just gonna call that function is going to return an object and this we can use within our application. So let's store we will call that variable app. So I'm just going what I can do is call a method called get. Now the So we're just going to say forward slash. And then function. And it's going to be request and res dot send. Hello, world. So this is going to be user visits the route forward slash, what we're and that with a semi colon And then the last step listen to. So I'm just gonna say app dot listen. now if I was to save this type no app. And that's I'm just going to open a new tab. And I'm just go. This is our first Express JS application. world. And in the upcoming tutorials, we're going In this tutorial, we're going to work more with talking about Curie string and route parameters. application from the previous tutorial. And we route, or you could refer to it as the homepage. to run this node app, go to Chrome. Go to local the port, and you see our basic route. So this it a another route. So I'm just gonna go here, I'm it another route. And I'm just gonna say example. And now we're just going to say rez, that send just going to hit Ctrl. C to kick us out, we're with our newly saved file, head over to Chrome, working. And if I go here and type example, you it's hitting the example route now, as opposed this is all fine and dandy. Now I want to talk want to start off with route parameters. And we're say app dot get. And I'm gonna say example. And I'm just gonna say name. And that's going to be ah, and then the same exact thing. So I'm just And then this time, what I want to do is access params. And what we want to do is actually print And the idea is that I want to get the value of send. And we're just gonna say hitting, actually, just gonna save this, hit Ctrl C, I'm just going going to hit refresh. So our examples working, just going to pass in name. So Pedro and an age, And you can see example with rope params has been Studio code, you can see that when we hit this request dot params, we get an object. And this and the values of Pedro and 99. So let's give a generic answer. I'm just gonna print send the I'm just going to say ah, and don't forget that that params. And all request dot params is, is an to access the name value. And I could say request So now if I save this, and we're going to reset head over to Chrome, hit refresh. And you can 99. And that we get the same output because we're from the user using route parameters. But there's back. And that's called Curie string parameters. and actually, let me just type this up, I'm going use the request object because the request object just gonna say, request that Curie. And here in I'm going to save this file, restart the server, hit refresh. Go back to Visual Studio code. And empty object is going to be our request, Curie. reason it's an empty object is because we haven't do that, there's going to go up here, we're going the name of the property that you want. So going to give it a name of tutorial, and then you want to assign it. So I'm just going to say can see that's pretty much the same thing that's you can see that our request, Curie object is and we have params tutorial as a value. So now the tutorial. So how would I pass multiple query all we have to do is remember to start off with and then the value. So if you want to pass in a the Add sign or the app or stamp, whatever you sort. And then I'm just going to say equal. And I hit Enter, head over to Visual Studio code. And string, you can see that we get an object that sort. So now you might be asking yourself, when string parameter, you should use route parameters let's say name was an absolute must, I cannot have would use a route parameter. And let's say that I I would use a query string parameter. we could be sorting the data by age, but I would need the name and the age to begin And if the user wants to sort the data, then In this tutorial, we're going to be talking what do I mean by a static file, I mean, your videos, stuff like that. So to get started, and is basically a utility module that deals easier. And we're finished here, if I go whenever you see app use, it means that I'm using alias for our static folder. So for example, if a static folder here. And what I want to do is people outside of my server to know that this inside of it. We have an index dot HTML, we have just for an example. So now if I close that Ctrl be the alias for my static folder. The second So I'm going to use a convenient method that static. And then I'm going to say path dot join. dur name is a string. And this is going to give by pressing Control B, is going to give us where to the static folder, because this is where all my we'll pass in as a second argument, the name this call in there says there's some error, instead of just saying hello world, let's actually say res dot send a file. And we're going to use I'm going to say path dot join, we're going to in. We're going to go inside the static folder. HTML file is called index dot HTML. So now, if Let's go over to Chrome. Now we're going to go you can see our static HTML file has been served. real quick. I can actually see it. And you can Now remember, we don't actually have a folder but to the client side is called public. And this working, because you can see that our h1 tag is see public j s and our example dot j s. And if onto the console testing client side. So that's using Express. Now you can use this to use images In this tutorial, we're going to be talking about an HTTP POST request is typically used when right here. I have an email address field and that would be an example of a POST request. Now, post to this route. And that's because we haven't at Visual Studio code, you can see our form that I going to code. So I just put forward slash, the we see that we have our email field, and our So now I'm just going to head over to App j, method. So if we take a look at our application of This is the route and I want doing is serving the we're going to use a module that's going to parse the body parser module. And that module is called actually going to have to install this module. server, I'm going to say NPM, install body parser. going to do is require it into our application. equal to require body parser. And now from here, time we use middleware, we're going to call app then I'm gonna say body parser dot URL encoded. option called extended. And we're gonna set that this is doing is allowing us to parse URL encoded it to the request body, the extended option is complicated objects. All we want is an email and have that set up, let's actually code or app that now I'm just going to go down here. And instead of the first argument is going to be the route. route is the forward slash. The second argument is and rez object. And now from here, remember what and then attaches it to the body of the request console dot log request dot body. And this is of email and password. And now from here, usually, use whatever the user inputted, and you do some work, here. And once that database work is done, say res dot send successfully, post that data. go down here, I'm going to type in Node app, And now if I hit refresh, just to reload it, hit submit. So now what happened here was I filled I got a response back from the server saying back to Visual Studio code, you can see that our the request dot body, and you can see that our take a look down here on to the console, you'll email and its value, and you also have property how you would make an HTTP POST request In this tutorial, we're going to be talking about body parser module. So in the previous tutorial, in order to handle URL encoded data. So what tutorial, and convert it to post JSON data. So to Studio code. And right here, I have my what I'm going to do is add an attribute to and I'm going to call it form. And the reason for I want to post data using jQuery Ajax. So that's So now that I have my ID, scroll down, and I the tutorial a little bit quicker. And we're just script. So I'm just gonna say script. Now from And the first thing that we want to do is get sign form. And we're going to attach a submit going to take a callback function, which has an is prevent the default Submit. So we're just going call prevent default. And from here, we're going And what we're going to do is post JSON data dollar sign, Ajax. And this is going to take a that we can use is called URL, and this is going server. So I'm just going to say forward slash, going to be what kind of HTTP requests that we server. So I'm just gonna say post. third argument type is obviously going to be JSON. So I'm just that we're going to use is called data. And this to pass in. So how do we get the form data? Well, going to serialize it using the serialize array. data, so our email field and our password field be a JavaScript array object. But remember, we're the content type that we want. So we're just going data as an argument. So this is going to take it into JSON for us. Next, we're going to say we have successful response back from the server. going to print onto the console successfully. the response that we actually got from the server. Everything looks good to me. So I'm just going to back to app.js. So this is our server. And application how to handle URL encoded data Now parser. And this has a method called JSON. Now it's going to attach it to our request dot body. we scroll back down, you can see our original post is, instead of saying just plain text, we're gonna going to say, res dot JSON. And we're going to it's been successfully posted. So now obviously, object and converts it into JSON for us. So now to terminal new terminal, and I'm going to say when I type localhost. And now to test this click Submit. And now if I hit F 12, you can see a look at this. And we're getting an error. Let's that's because we did not include the dollar sign. to Chrome. Now we're going to hit refresh. And and see that we successfully host that JSON to the back to us. If I go back to Visual Studio code, you can see that we have our serialized form array. And the reason why you're not getting back that it's JSON and automatically converts it to In this tutorial, we're going to be talking about going to do is validate the data coming in from input server side is because you can never trust to get started, let's actually head over to Visual server. And I'm going to type NPM, install joy. from here, what we're going to do is actually to go up here, I'm going to type const, Joy is in our application, let's actually go down to basically serves the form to our user. And we have from our user. So from here, what we want to do our request body. And in order to do that, what a schema, a schema is basically a blueprint, So we have an email field, and we have a password email that the user gives me as a valid email, and do here is I can come down here, and we can create I'm going to say joy dot object. Now this is going is call a method called keys. Now keys is going to would work. You will have your key value pairs, here, what we want to do is set the rules that the a field called email. And within here, I'm gonna saying is, the email field must be a string value, I'm going to call a method called email. This is valid email. And I'm going to call one more method sends me a no email, in other words, the user error because this field is required. So let's property we have is password. So from here, I'm of type string. And let's change it up for the password to be at least five characters. So I'm I'm going to call the max method. And I'm going to minimum of five characters long, and a maximum the last method I'm going to call is required. that we have our blueprint, let's actually called validate. So I'm just going to say joy dot the first argument is the object that you want to parser to parse the form data and attach it to the our first argument. The second argument is going called schema. And our third argument is going to parameters. First one is going to be error, second find out our result. So if I say if error, this is with the data, so error is not know then this we know something went wrong. So I'm just gonna there is no error, what we can do is we could just post that data. Now just for the sake of this you can see what the result is. Now, the result is in. So it's just going to be the request body. And out the error object. So now that I have these code from the last tutorial. I'm actually going to head over to Chrome. And from here, I'm just going real quick. Let's type in an email. And let's you can see successfully posted data. So if I go email is right here. And it probably hit Submit you can see that our result that's getting printed user posted. And you would do all your database go back to Chrome. And this time, we're going to data. Let's see what happens when we post invalid And for the password. Remember, we have to give just going to give it two characters long and And you can see the response we get an error has in Visual Studio code. You can see this big long up. And you can see the error that we're getting. because password must be at least five is working. And this is pretty much the ins This is going to be part two of my joy we're going to be covering how we can validate an array. So to get started, I pretty much going to simulate a user's requests. So for this nested object. And it has a property of personal and state. And we have preferences, which is going array contains here. So the first values that and then we're going to move on to objects. So I'm going to look at our user input, and I'm going I'm going to develop a schema for personal for preferences. So to get started, we're going just going to copy this, I'm going to come down and then I'm just gonna add schema. Next, I'm gonna say joy dot object. Keys, we're gonna hit up copy street address, would just develop a paste that street address is going to be joy dot we're going to do the same thing with the other paste, and street address and city, we're going to we're going to take the state. And it's going to going to add that it has to be of length of two. And we're going to use the dot length method abbreviations. So now that we have our personal for preferences. So I'm going to copy this, we're preferences, schema. And this time, instead of joy dot array. And this is going to give us an method called items. Now what items is going to want. In this case, what we want is an array of Joy dot string. So this is going to make sure off strings. Last but not least, let's actually say Kant's schema. And I'm gonna say joy dot time, we're going to say personal info. And that's here. So we have our personal info schema. So I'm if I go back to my array, we call it preferences. let's actually call this so I'm going to go the first argument is going to be the same as last second argument is the schema. So we're going which consists of the two different schemas going to be the callback function. So I'll just we're just going to print out what the error is. just going to be the user input. So I'm just gonna save this, we're gonna type in Node app. And you premise is, if you're given a complicated schemas. And then you could combine them like want an array of objects as opposed to an array we're going to change preferences to reference object here. So this is a very simplistic example, has the value of a string. So example, one, two, through an array of objects. Let's go down here. because we're not looking for strings anymore. we just build our schema, like we did before. it's called example. And we're gonna dot required. So this was a very simplistic you would do the same thing like we've been doing. execute this code, see if it's working node app. get any errors. So that's basically how you can can develop schemas for arrays, and even create In this tutorial, we're going to be talking about And that's going to allow us to write more dynamic a static HTML file, you can see that we have dummy and we have search results of dummy data, now a template that we can use for serving dynamic Visual Studio code, we can set the view of our we would go here, and we could say, app we're going to specify the view engine, a second want to use. So we're just going to say e we're going to have to hit Ctrl B. And we're going is going to store our E j s templates. So I'm just and we're gonna call this views. Now Express is are located in the views folder, because that's create my views folder, if I right click new file, index dot e j s. So now that I have my index.js I'm going to copy all this. And I'm just going to I'm just going to save this. I'm going to go to we've rendered on to the user. So I'm just going And instead of sending a static file, this is res dot render And then followed by the name of do not need the specified a dot e j s on the side. are using ej s as the template. So now if I was head over to Chrome, we're going to hit refresh. So what happened here? Well, when we render this going to look at this E js file for e. js code, client an HTML file. So now let's actually send I'm just going to give us a route parameter, going to pass in an object. And this is going our index.js template. So now I'm just going then I'll give it a property of user query. And user query. So now if I save this, I'm just going Now we're going to go to our E js file. We're we're going to specify less than or sent sign onto the HTML file. Next, what we're going to do did we do that? Well, we gave it the property we end it with percent sign, and then that. So now say, Okay, I want to render the Index page. And data dot user query. So now if I was to save this no to app. Let's go to Chrome. Hit refresh. And And that's because we added a route parameter. for example. Then it says, Hey, you search for and we were on Amazon or eBay, you would do you would get Hey, you searched for books, you that means I could use this ej s template for actually add some dummy data. So if I go back to is instead of having hard coded stuff here, we're gonna display a bunch of books. So I'm just in more dummy data. So we have data user query, going to give it a Enter key to make it fit on and this is going to be the search results. just going to say, book one, book, two, and Book e js file. Instead of saying dummy data, what we object that we're passing in. We're gonna say we can access index zero. And this is going since we this is an E JS template, we're going And now if I was to save this, let's go SQL Server can see that now we're dynamically populating the code. And what I want to do is, instead of just zero data that search results index one, what we let's get rid of all this. And I started percent sign, we're going to get our array. So for each, we get our result. And remember, we're and the reason why we don't have an equal sign the HTML file. So for example, if I want to output no equal sign. Next, within here, what we're we want to output. So now what we're going because we actually want this to output to result. And let's close our Li tag. So now we it with percent sign, we're not going to use the to the user. So now, if I was to save this, we can refresh. And you can see that our search results and there was a million books, this code will work and there was only three types of iPhones, this do an example involving conditionals. statement. If the user is logged in, we want you then we're not going to display anything extra. let's write an if statement underneath our gonna say this. If data logged in, and this is but and this here, and now the meat of our if want to do. So now I'm just going to say h2. You and then let's close our h2 tag. Now we have our if statement. And all we're going to do is And remember, we're not using the equal sign we're not using the equal sign up here because now if I was to save our index.js file, let's go properties that we added to our index.js file. we're just going to set true and the username is that ETS just to see if we matched up properly. username here. Make sure everything matches up. Chrome, hit refresh. And you can see that since you are logged in as so. And so if we set that basically the ins and outs of how you can In this tutorial, we're going to be talking about custom middleware. So middleware is basically the and the server itself. Now, in the previous that middleware was within the body parser module. on line five, we say app dot use, and then as function is a middleware function, that when the user's request and process it. In this case, the the user have sent any JSON data, processes that then it calls a function called next, to let the request, you can send a nother request. So to I'm going to say app use. And then we're that's going to get executed whenever the user we're going to pass in the first parameter is And then the final parameter is going to be the the request object and the response object. So invoked whenever you create a custom middleware. is to let Express know that, hey, I'm finished next method, what's going to end up happening it has no idea whether or not you're finished I'm just going to say next, and we're just going interesting. let's actually go up here. And and the request dot method. So now, if I was to I'm just gonna hit Ctrl. C, node app, we're going when I hit refresh, what I did was make a get look at Visual Studio code to see what happened. So we made a request, it gives us the URL, it get request when we hit refresh. And then we said processing this. And then it got to this point the user. So that's why you see that we got this. forward slash, because we got to get route there, you can see Can I get whatever this route is, in that. We're only interested in the middleware that our middleware is running fine. So this middleware function is going to get executed. And the type of request was also printed out onto as we have it right now, whenever we use App dot is going to get processed by this middleware. execute when a certain route gets requested. So gonna say example. This is gonna be our route. it could be any type of request, that could be matter, this middleware is going to execute. But not going to execute. So let's save this. And I'm again. And now I'm just gonna hit refresh. Go back middleware is not executing. But if I go up here, you can see that our middleware is executing just middleware functions can do is modify the request our body parser example, it parses the user's it to the request dot body. So to give a trivial and I can add a property called banana. And I sake of simplicity, since we already have this this. And within our get route, we're just gonna let's end that with a semicolon. Let's double just going to save this. And we're going to go to Chrome. And we're going to hit our root. And you can see what's going on here, we made a processing the same thing that body parser did, case, we just added banana, gave it a value of from our get route, you can see that we get the and outs of how you can create your own custom In this tutorial, we're going to be talking about allows us to do is separate our routes into manageable, as opposed to just sticking our routes I'm just going to hit Ctrl B to bring up our store our routes. So I'm just going to right click we're going to create a new file called people. people routes. So I'm just going to hit Ctrl B we're obviously going to need to include the Express is equal to require Express. Next, we're method that's going to return to us a instance of a variable. So I'm just going to say Kant's route have our router instance, what we can do is setup I could say route back get. And we're just going the callback. So the request object response. And being hit. Now let's just create a another row. gonna call this example. And let's say example, we have this route here. But how do we expose this in order to do that, we're going to have to use type module dot exports. And then we're just going going to save this, we're going to head back to to have to actually require the people route. So variable called people. And we're just going to forward slash, I'm going to go inside the routes file. But we're not done yet. Remember, on line we need to tell our Express application that go down here. I'm going to say app dot use. And going to say for slash people, and then we're argument. So it's going to pass on people. So node app, let's go to Chrome. And I type localhost base URL. Remember, we gave it people. So this is this forward slash would be accessed if I just just gonna add that people. And now you can see forward slash, and do example, you can see our if you want to add middleware to these routes, so we're going to go to our people route. And within function, our middleware function that we want my rez, and next. And now I'm just gonna say, I use route that use, all requests is going always call next, if you ever creating your own let's hit Ctrl C, node app. When I go to our middleware is being used here. Now, this people out. If we had another route here. Let's this middleware is obviously not going to only specified to work with our people route. you can use the Express router to actually