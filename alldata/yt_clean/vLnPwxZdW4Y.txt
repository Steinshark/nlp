Hey, welcome to draft Academy. My name is you guys everything you need to know to get popular programming languages around. And language, it's actually a language that is In fact, c++ is essentially just like the So if you're already familiar with the C programming picking up c++. But even if you're not c++ And in this course, I'm going to teach you gonna start off just with the basics, we're we'll install c++, we'll get you guys set how to write your first program, then we're we'll start looking at things like variables. a couple of different programs and some little into the thick of it, we're going to learn things like loops, and if statements and classes going to cover all of the core concepts, not programming in general. So the knowledge you to carry over to potentially other programming able to bring you guys tutorials on c++, it's in. And it's a good first language to learn stick around for this course, you can kind And hopefully you guys can learn something I'm going to show you guys how to get everything to start working with c++, and started writing actually have to do a little bit of setup, our computer. The first thing we're going just going to use this text editor in order is going to work. Generally you don't want Google Docs, you're gonna want to use just like Notepad, I'm going to show you guys a for integrated development environment. And just a an environment that's really awesome going to need in addition to a text editor, specifically a c++ compiler. And this is a that we write, and it will translate it or is going to be able to understand. So as long c++ compiler, then we're ready to start programming to get all that set up. First thing we're I'm over here on this website called codeblocks. is what's called an ID. So it's an integrated just a special environment, special text editor is going to be exactly what we need. I'm just see there's a few options one says download we're going to click download the binary release. you can see there's a link over here for Windows links for Linux and Mac, let's click on this there's a bunch of these different options. this one over here that says codeblocks 1601 this is it's going to include not only the to include that c++ compiler that I was talking in this one download for code blocks. So this So let's go ahead and download this, I'm just link for SourceForge. And this should start codeblocks has finished downloading, let's to head over to my downloads folder. And we it says codeblocks 1601 m i n GW setup. Let's installer window. So let's click through this the default options. And they should start once code blocks has finished downloading, to start writing in c++. And you can see over next tutorial we're going to talk about how get started writing c++. In this tutorial, set up. To start working with and start writing we're actually going to need two different is a text editor where we can write our c++ any text editor that you want. So a lot of or maybe a different text editor. In our case, ID, which stands for integrated development codeblocks. That is specially designed for guys how to download that, we're also going be a c++ compiler. And basically, this is we write, and it translates it into a language we want to run our programs, we want to, you we can use this compiler to translate the first thing I want to do is show you guys that if you're on Mac, you might already have search bar. And we're just going to type in And this should open up the terminal. This we can use to interact with the computer using to see if we already have the c++ compiler hyphen, V. And just click enter. If you have be using installed and all this stuff should everything. If this doesn't come up. In other have it, all you need to do to get this is and this is going to go off and install everything Enter. And I already have these installed. can see I already have them installed. But then this will basically just prompt you to running, then you can just check to make sure hyphen, V. And make sure that you have it. and we've run this Xcode, select Install command. So like I said, we're going to be using a really, you can use any text editor that you browser, and I'm over here on this website we can download this program code blocks, there's a couple options, you want to click release. So I'm going to click this. And you'll click on Mac OSX. And this will bring us down contains the codeblocks application. Over I'm just gonna click this. And this should file for us. When codeblocks is done downloading, folder, and we'll see what we got. So we just click it. And you'll see over here we get do is take this and drag it over to your Applications application we want to use, then you have c++. So in the next tutorial, we're going going to set up our first c++ file, and then set up and ready to go. In this tutorial, c++ project up and running in code blocks. And this is sort of like the welcome screen over here, there's a couple options. One says we're going to do. So before we're gonna start how to get a c++ project up and running and Create new project. And this should open up there's all these different options. And these applications that we can create. We're going come over here and click console application. to click Next. And over here, you'll see we we want to click c plus plus. So I'm going this project a title. So I'm just going to storing it inside of my desktop if you want can put it wherever you want. Let's click a bunch of options. You can just leave these Once we click finish, then our c++ projects our little Tree Viewer, you'll see that we of the sources folder, we have this file main stands for c++. So I'm just going to right And you'll see over here we have a bunch of file. So this is essentially just like the mean, this is what we call like a Hello World printing out hello world onto the screen. this stuff up here is, really, let's just actually going to print something out for actually going to come up here in my editor, option, when I click this, a window should like, Hello World, you'll see down here, this hello world. So let's just go over some basic to run a program in c++, we're going to build program. Building the program basically means and we're converting it down into a language thing we always have to do is build the file, basically means we're telling our computer wrote in our program. And there's a bunch blocks, you can click this little cog wheel then you can click this play button over here, of times, if you just wrote some new code, click this build and run option. And for the going to be whenever I say we're running the and we'll build it and run it at the same c++ file. In next tutorial, we're going to going to look at writing some of our own instructions, kind of dive a little bit deeper into you now, we have everything set up. So we have c++ file called main dot cpp, and we're ready going to talk to you guys about the basics to talk generally about what programs are to write a little program, which is going is going to be pretty fun. Down here, I just created my c++ project, in the last tutorial, was kind of given to us. And this is, you So I'm going to walk you guys through essentially a couple different things, and then we'll these two lines of code. This is like hashtag named scape STD. Essentially, what this does for our c++ file. As a beginner, like, you this stuff is or what it's doing. We're going the course. But for now, just know that you our programs. Down here we have this line, close parentheses. This is actually what's too much about what a function is, I'm just of familiar with hearing them. But essentially, to put the code inside of our c++ programs. function because any lines of code that we of code that we put in between these open to get executed when we run our program. So return zero. And again, don't worry too much to have this in this main function. Over here, this says c out. And then it says hello world, of code in our program. So again, any lines brackets for this main function is going to I was to come up here and run my program, run option right here, you'll see when the you'll see this little window that opened And the console is basically just a little we run our c++ code, this console window is c++ that we want to print things out onto referring to the console, I'm just referring and start talking about programming. So again, is going to get executed. And here, we just do is I can copy this and down below here, like my name, Mike. And now when I run this both of these things. So here on the first over here on the second line, it prints out how we could print something out to the console. stands for console out. And then over here, end L and this stands for end line. And basically, we're going to print out text. So you'll notice on the next line, we printed out Mike. So going to show you guys how we can write a out onto the screen. So I'm actually going I'm just going to copy this guy here a couple I'm going to print out a triangle onto the slash, and then we'll do a space and a forward And you'll see we're kind of drawing this to use vertical bars, and we're going to go going like this. And down here, why don't the last vertical bar, you'll see over here, And each of these instructions is telling line onto the console. So now when I run my out this little triangle. This is a very basic four simple instructions, we were able to So let's talk about this. Essentially, what's c++ is going and it's looking inside of our do is it's going to look for this main function block of code. And that's basically just what block of code called main and inside of these to execute all of the instructions inside a program, all we're doing is we're just telling giving the computer a bunch of instructions for example, in real life, like you were using a program, a recipe has a list of instructions. then you end up with like something delicious. is just a collection of instructions that the computer simple instructions like this. out a shape. But as we go through this course, and we learn how to use them together in unison tell the computer to do a bunch of complex you guys about is the order that these instructions the recipe, and you would start with the first instruction, the computer is going to execute to start with this instruction. And basically telling c++ that we want to print this line to do this. And then once it's done with that, it's going to print this out to the screen that. So actually, let me show you guys if put it up here. Now you'll see when we run a funky looking shape. So instead of this going to print it out on the top. And that's So again, all a program is it's just a set That's it, it's very simple, the more complex and the more ways that we're able to combine more complex Our programs are going to be. to be teaching you guys all sorts of more different ways to do different things and applications. And you'll end up learning a going to talk to you guys about using variables programs in c++, we're going to be dealing And a lot of times when we're dealing with of hard to keep track of. and a variable is different pieces of information or different it a lot easier for us to manage and maintain guys an example. And we'll show you guys basically them in c++. So down here, I have a very basic down here, I'm basically just printing out was a man named George, he was 70 years old, being 70. So this is basically like my little And this is a valid program in c++, it basically of our information. So you know, this is a But let's say that I'm looking at my story. the character's name, right. So maybe I don't it to a different name. So what I could do it in each line of code. So I could come here Let's say we want to change the character's john. I'll keep looking through the story it to john. And there we go. We've changed it. Let's say maybe now I'm thinking to myself, bit younger, instead of 70. Why don't we make go in and manually change the value of 70 say he was 70, which changes to 35. And we'll change that to 35 as well. So now we've officially name, and we've changed the character's age. those changes, I had to manually go through where the characters name showed up or the instead of having a story that was only four of lines. And we mentioned the character's age hundreds of times, well, all of a sudden, manage those pieces of information. So it's name and the character's age. Right, if I and we mentioned the character's name 100 update that name would be a very tedious task, just do it manually. This is where something our programs, we're going to have different that we want to keep track of, and we want we can take those pieces of information, and variables. And variable. Like I said, it's of data. And we'll make it a lot easier for our programs. So I'm gonna show you guys how the characters name and the character's age. like this. So over here, I'm going to create in c++, we actually have to tell c++ a couple is what type of information we want to store I'm going to talk to you guys all about the c++. But for now, I'm just gonna show you data that we can store inside of a variable it's a string of characters. So it's like saying There once was a man named john, this program, a lot of times we're going to be a string variable. In other words, I'm going value. So I'm just going to say string. And c++. The next thing we have to do is give So what we want to do is give this a descriptive inside of the variable. So I'm just going And what I can do now is I can give this a to and now we can type in the character's Alright, so once we've created this character this string value is now stored inside of we're going to do is create another variable to storing data in the form of a string, we number. So what I can do is I can store it an integer is basically just a whole number. this character age. Now I want to show you what we did is we said string character name, But what I could also do is put a semicolon we're writing lines of code in c++, every want to put in this semi colon. I'm not sure the semicolon basically tells c that we're one line of code from another. So you need But with a variable, what I could do is I same thing for string. And then I could go value. So I could say like, character age in a number. So we said that john was going we use numbers, we don't have to surround out the number. So now we have two variables, can create them. And what we can do is we And you'll see how this makes it a lot easier want to do is we want to replace every instance age with the variable. So instead of just this variable. And the way that we need to variable. So over here, I'm printing out this plain text, right. But let's say instead of I want to instead print out the value that what I can do is I can just get rid of john. And what this is basically going to tell c++ going to type out here, so I'm just going telling c++ that we want to take this value, of this line of text. So when I go ahead and still printing out there once was a man named john, all I did was include this variable we want to put the variable right in there. of one of these print statements. So over just going to say less than less than character character name. In other words, it's going name variable. at this position, we can do the characters age, I'm going to get rid of than, and now, character age. And so the value to get placed right in there. And we have age. So over here, I'm going to get rid of So you'll see over here, we want to insert right in between all of this text. So I want make two quotation marks. And essentially going to be its own string of text. And this I can make to less than signs, I can type going to make two more or less than signs. all of these together. So it's gonna say, inside of the character age variable, then every instance of the characters age, and those variables. Let's run our program and have the same exact story as we did before, old john 35. So without having to manually values. And now what's cool about variables or update the character's age, all I have if I wanted to change the character's name 50 years old, I only have to modify the values automatically update down in our story. So using the name Tom. And it's saying that he's way that we can use these variables. Another do is modify the value. So let's say that the character's name. So halfway through, all I have to do is say, character name. And So I could give this the value of Mike. And at the end of this line of code. And now you'll name is going to change. So it says There using the name, Mike. So not only was I able values, but I can actually modify those variables pretty awesome. Now, this is just sort of are containers, they allow us to maintain in our programs a lot better. And they also a value once so I can assign a value once it in different places down here. I can also my programs. So in this tutorial, we talked as integers, which are whole numbers. In the all of the different types of information we can create in our programs. In this tutorial, data types in c++. a data type basically just that we can use and work with inside of our of information, we can store like text, different values, all sorts of stuff. And I'm gonna those are and how we can use them. So the just going to be to create a bunch of different data that we can work with in c++, we can just going to create a couple of different how this is going to work. So the first data a character. And a character basically allows way we can create a character variable is this a name. So let's just call it like grade we're going to use these single quotation that I would want inside of here. So you know, of, you could store in here, and then we're basically like the character data type. And there's going to be a lot of situations where one. And what we can actually do is use something just a string of characters. So it's, instead a bunch of different characters. So this would we would see in a program. So I could just phrase. And when I create a string, I can say, like, draft Academy or something. And of just one character, a bunch of different where you might want to use either like a think strings are probably a little bit more plain text, we can also store and work with types of numbers are two basic types of numbers. numbers. Some people will also call those like a counting number. So think like 12345, numbers, there's no decimal points, right? 0.5, or 1.267, or 10. Point 11. You know, after it. When we work with these different between them. So the first type a number we say int, and this could be like an age or we can just type out the number so I could any quotation marks. I don't need anything out the number. In addition to positive numbers. we're using an integer, you can't have a decimal these are just going to be solid whole numbers. two basic options. So there's two data types first is called float. And this basically The second one is called double. Now you'll data types, the main difference is just how can store more decimal points than a float. as far as like how many decimal points you use a double. And I would say for the most doubles, floats will be used more in specific learning this language, really just worry GPA. And I can set this equal to like 4.5, decimal number that I wanted. Keep in mind, have to be like a different number decimal. no problem. So ants are going to be what we're part doubles are going to be what we're going text and numbers. And just with those two and strings and an instant doubles. You can in your programs. But c++ is awesome. So they're which is called a Boolean. And a Boolean is A Boolean is actually what we would call a programs, there's actually going to be a lot to represent true or false data. And a Boolean Right. So I could say B o L stands for Boolean, right, so this variable is male is going to And this will basically tell us whether or say true, because I am a male, right. So you'll different things like, we could say something And that allows us to represent a certain over here. And that's going to be the opposite. these true false values. And we can use Boolean are the basic data types. Now there's a couple But I think 99% of the time, as a beginner, don't concern yourself with anything that are just decimal numbers, and which are whole chars, which are just single characters. That's we go forward in the course, we're going to information. Now, I want to point out one a little print statement here. And you know, to, I could print out any one of these variables, And this is going to go ahead and print that just printing out a, but we don't have to So if I wanted, I could just type in a string a variable. And this is what we would call of a variable, I could also you know, type like 4.5. Or I could type out an integer. don't have to put these things inside of variables, up like that. And this is what we would call to want to store information in variables when you do that, you have to declare the of data you want to work with. In this tutorial, and outs of working with strings in c++. And common types of data that you're going to strings are basically just plain text. So or work with in our program is going to be see I have this little program set up basically I can create a string is just by using an So I can basically type out whatever I want. You'll see now I'm printing out draft Academy see that we Drop Academy and Hello. First to do with this see our line of code over right here. And basically when we put end print a new line after we print whatever is I just said, See our draft Academy. Now, what on the same line as draft Academy, because line. If I wanted to, though, I could actually by saying a backslash n. So backslash n basically So this inside of a string represents the program, you'll see that Hello gets printed that backslash n inside of our string in order is doing. And if I wanted, I could put this put them on a new line. So in addition to here, I could also store a string inside of variable, I can just say string, we'll give and I could set it equal to whatever I want. then I can do exactly what I did down here. now it'll be printing out draft Academy onto to just printing out strings, and kind of of variables, we can also use what's called that we're going to get into more later in But for now, just know that a function is we can call, which will perform a specific of things. And there's a lot of functions called string functions. So these functions give us information about the strings. So first string function that I want to show have to do to use this is I can just come print out the result of using these functions. to say phrase dot length. And I can make an when we're calling a function and see, we're to type the name of the function. So this make an open and close parentheses like that. see we're getting 15. So this is basically of this phrase, strings, how many characters to, I could actually access individual characters to access just this G. So I wanted to print can make an open and closed square brackets put zero and zero is going to refer to this I run my program, you'll see we're just printing this R, for example, I could say two, and I run my program, we're printing out our as on yet, whenever we're indexing a string, index positions to each one of these characters position zero, I is an index position one, etc. So whenever c++ is indexing a string, start counting basically 01234. Even though it's technically at index position zero. So we're referring to like a specific character, is going to start at zero. Another thing I a specific character in a string. So I could character inside of this string. So we could a new value. So I can assign this the value these single quotes, so I could say like, FFP, it's going to say, Be IRA FFV because in this string. So now when we print this of draft Academy, so that can be kind of handy of a string. We could also find out information we can find out the length of the string But not a specific string or a specific character dot find. And I can make an open and close open and close parentheses, I'm going to give of information. So I'm going to give it some And these are called parameter. So anytime we call it passing parameters. Or you also arguments, or passing parameters, basically, function. So this fine function, I need to thing I can do is give it a string or a character it to find Academy. So basically, I want to of this phrase string up here. The next argument, to be an integer. And it's going to be the I wanted to just check to see if it was in to check to see if Academy occurred after just say zero. So now, this is actually going at what index position inside of this string program, you'll see over here, it's giving starts at index position 012345678. So Academy why it gave that back to us. So I could do or something. And now this will tell me where starts at index position four. So that can way to find the figure out of different things, you're working with. There's one more string is called substring. So it's just phrase.su. parameter. So we're going to give this two information we're going to give this is a take, you know just part of this string, so the characters after this a or I can specify zero from index position one all the way to like just a subsection of this string. So a starting index, so I could say like eight. a new string at index position eight, then going to tell substring, how many characters is basically going to start at index position a, and it's going to grab three characters. a. So now when I print this out, you'll see what we do. So this is the starting index, things we could do is we could actually take So I could say like, string, phrase sub, just and I could say phrase sub is equal to, and substring. And now if we print it out phrase storing the value of the substring in another that's really the basics of working with strings. that I left out, you know, I could spend an things we could do with strings. But I think you all the basic things that you can do, about grabbing individual characters, we talked that should be a good introduction into working to talk to you guys about working with numbers and C, one of the most common types of data to be numbers. So these can be things like I'm gonna give you guys a full overview of the basics, we'll look at how we can use different mathematical operations with our numbers. Now, down here, I'm just going to talk to two types of numbers and see that we deal whole numbers are basically referred to as to as two things either floats or doubles. know about that as a beginner is that doubles So the double you can store you know, potentially there's more differences. But if you want it up. But the basics of using numbers as for example, print out the number 14, you it in and we can print it out, we can work we could use negative numbers, if I wanted, are very simple, you just kind of type out math. So for example, I could say like five five and seven, this is actually going to print out the result of five plus seven. So use addition, we can also use subtraction, this forward slash, and we can use multiplication, was to multiply these two numbers, now you'll four basic math, you know operations. So that's thing I want to show you guys, which is called will basically give us the remainder of dividing I made this percent sign, and actually this we would read this 10 mod three, what this by three, and then it's going to give us the give us the remainder, so 10 divided by three So now we just we should just get one. And that modules operator can come in handy, you C. So C is going to adhere to like the normal Please Excuse My Dear Aunt Sally, basically to come before addition and subtraction. So times 10, this is going to do five times 10 we get 54. But if I wanted to do the addition, this. So now it's going to do five plus four, you can see we do so if you need to separate just following basic math order of operations that. So in addition to doing all that stuff, numbers inside of variables. So I can make number. And we'll just make this five. I could de nom for decimal number. And this would these numbers inside of variables. If I wanted, like we did down here, I want to show you is incrementing, a number that's stored in I could say plus plus. And what this is going So now when we print out w num instead of we're adding one to it. So you can see we in handy a lot. There's a lot of situations also do like minus minus, and that will subtract equals, and we could say like 80. And so what w nom and it's going to add 80 to it. So now do plus equals multiplication equals minus and all of that will it's just basically shorthand So now that we kind of looked at all the different and integers work together. So here's a little I added 5.5 plus nine, so I'm adding a decimal right, so let's see what happens over here, number back. So anytime we're doing math between and an integer, a whole number, we're always always going to give us the decimal back. math with two integers, so for example, let by three, and these are both integers. Keep number back. So we're going to get like three But here's the thing. This isn't actually with a remainder of one. But because we did get an integer value back. If I was to make made both of them a decimal, a decimal number. full answer. So it's going to be three with see if we do math between just two integers, if that's not like fully the correct answer. to want to do that in other circumstances that's kind of how integers and decimal numbers to do is show you guys how we can use different math, there's all sorts of different, like, root, you can take a number to a power, we these things called functions, which can do just a collection of code that we can call going to talk more about functions later. math functions that we can use. In order to to do something called importing them. And basically going we're telling c++ that we So up here, you can see we're using this include iostream, I'm going to add another line here, just going to copy this guy up here. And we sign. And in here, I just want to type in to do is it's going to tell our c++ program kind of all you need to know at this point, in order to follow along with what I'm going a bunch of different math functions, essentially say like POW. And what this will do is it'll two numbers, like I could pass a two, and is it'll take two raised to the power of five, when I run my program, you'll see we're getting And you can kind of do that with any number. third power, so three cubed, and now we should can be pretty useful. There's another one So we can say like square root 36. And now 36 back, which is going to be six. So that functions, we you can put a decimal numbers numbers and also decimal numbers. There's going to round a number. So if I put like number. So you see, we just get four and this change this to 4.6, now we should get five which will similarly like round decimal numbers, automatically just round the number up. So the number up to the next highest whole number. the opposite, which is floor. So if I just it's supposed to round up, but now it's going or that floor function. So those can be pretty you guys, which is called f max. And f Max in like a three and a 10. And this will tell back to us the bigger of the two numbers. it's giving us a 10 back because 10 was the in C, you're going to have two numbers, you can be really useful to tell us. And you could So this will tell us what the smallest number get three over here. So those are some basic just go online and search c++ math functions, that you can use. There's things to do like stuff you can do, you can use like exponentials useful. But that's kind of the basics of how are extremely useful. And that's kind of been you can do with them. In this tutorial, I'm a user in c++. A lot of times in our programs, types of information. But one of the most be information that the user inputs. So a allow the user to input information. And then in order to do different things. So in this of how that's done, we'll talk about how to know, you'll kind of learn everything you getting information from the user, the first somewhere. So whenever I'm asking the user give me that information, and I don't put so we usually what we want to do is create a little program that will allow the user a integer just called age. And I'm not going a semicolon there, we're essentially declaring want to use this integer, but we're not giving this variable a value. The next thing I want in something right. So if I don't give them I want, then they're not going to know what C out. And I'll just print out a little prompt, basically just prompting them to enter in the variable, and once we've prompted them do is we can actually get the information is actually the opposite of the way that we c out, I'm just gonna say C n, and I'm gonna C out, we use these lesson signs, when we that's really important. So over here, I'm that I want to store what they enter inside I want to store whatever they input into this going to enter in an integer number, and I'm of this integer that we created. Now, what So we'll print out a little message to them, say like age, or we can say like, years. Old. to enter in their name, we're taking whatever this age variable, we can do that using the out You are the age years old. So let's go we did. So I'm going to build and run. And we can just put like 30. And now when I click we entered in 30, it's going to store it inside the prompt. So when I click enter, you'll awesome. So we can do that and we can get if I made this a double, it would be the same I can enter in like 4.5. So maybe someone's entering in 4.5. So it's gonna work the same for characters. So if I made this a sharp, to get a character from them as well. So now in like a G, for example, whatever, obviously, So it's able to take in that character, and that's how we can get characters in numbers. actually going to do something different. not going to use this C in command. So I'm So instead of entering in the age, why don't here, I'm going to make a string, and I'm C and I'm going to use another command, which allow us to get an entire line of text. So one character, we're going to get like the we need to pass this a couple of different And c n is basically just that little like stuff into that command prompt, that's basically in the name of the variable where we want I'm just going to store inside of name. So So I could say hello. And it's going to be from the user. So we're basically get the here I can say like john smith, and now when So that's how we can get strings of text. to get like an integer and store it inside a char and store it inside of a char variable, get like a string of text, then I can use to be useful. So that's kind of an overview you can get as many values as you want. And this whole line, paste it a bunch of times different pieces of information and use them. how to build a basic calculator in c++. Essentially, user can enter in two numbers. And then we'll the answer. So this is going to be kind of more about getting input from users. So down we do anything is create two variables, where to add together. So I'm going to create an one. And I'm not going to give this a value give this variable a value, I'm going to create actually, let me show you guys something cool, like this. And they're the same data type, So I could say num, one, comma, num, two. useful. So for example, I could do like as going to have two numbers, though. So now the next thing we want to do is prompt the to say C out. And the first thing we'll do say enter first number. And now we want to So I'm going to say cn, and over here, I'm to store the number that they enter inside just copy this. And we're going to do the say enter second number. And now instead of this point in our program, we should have both of those numbers from the user, the last answer. So we can actually just say, C out. two together. So we should be printing out So let's go ahead and run this program. And and run. And actually Whoops, I put the wrong probably a really common mistake with C and to less than signs. So that's something that me up. So when we're using C and we're using C out we're using these two less than sign. kind of highlight a common mistake for beginners programmed in c++ a lot before. Alright, so first number, so enter in a five, enter second enter, it should add both these numbers together. cool. Another thing we could do is instead doubles. And that's as easy as just changing run the program, we can work with double. enter in like a 9.8. And now we'll be able of cool. And really, that's a basic calculator. up here, we're using C out. And with C out then we're using cn with the greater than the use the input from the user. And it's doing that twice. And because we store these to add them together and print out the answer. Actually, later in the course, I'm going to calculator that will be able to add, subtract, to decide in order to build something like stuff. So stick around, and we'll learn how In this tutorial, I'm gonna show you guys So a Mad Libs is basically a little game where be like nouns, verbs, adjectives, and then into a story. And generally since you entered funny. So let me show you guys over here in you know, essentially there's this story and words that the person entered into the story. in our c++ program. Down here, I have my little it says Roses are red, violets are blue. I a classic poem. But I think this could be So let's say instead of saying Roses are red, instead of saying violets are blue, we'll of saying, I love you, let's say I love celebrity, So basically, we're going to ask the user store them in variables, and then we can print started, this should be kind of cool. The variables for all these things. So I'm just for the color for the plural noun and for told c++ that we're going to use all these And we're actually going to let the user give The first thing we want to do when we want say C out and we're gonna print out a prompt, So we're gonna have them enter in a color, they input, so I'm just going to say, Get N. And that's basically just standing for input text into the console, so it's gonna then we're gonna store it inside of this color that they enter. And I'm actually just going for all the other values. So we're gonna say inside of the plural noun variable. And then for the celebrity. So we'll store that in declaring the very most, we're printing out from the user using this get line function. of the program. So instead of saying roses, color that they entered into the story, same to say, plural noun, and you can see how that then I love celebrity, we're going to actually so now our program should be set up, everything's variables, and we're printing them out, down and we should be able to play our madlibs Enter a plural noun, let's do microwaves. Hanks. So now when I click enter, all of the So it says roses are magenta, microwaves are worked, and we are ready to go. So that's it's it's as easy as getting different inputs the story. But this is a very simple madlibs. could ask the user for like 20 different words And it's going to work out the same way. So game. In this tutorial, I want to talk to of times when we're writing programs in c++, of data. And one way that we can keep track called a variable. But the one thing about one value inside of a variable. So if I create store one character in there. If I create integer in there. A lot of times though, in of data. And that's where arrays can come a variable. But unlike a variable arrays can hold like a list of you know, 1000s, or millions could put, you know, pieces of information inside of the same array. So I'm going to how we can work with them. You create an array, the first thing we have to do is tell c++ of the array. So I'm just gonna make an array just like a variable, we're going to give right, and this would be an array of lucky from a variable. When we're creating an array, brackets after the name. So after lucky nums, bracket. And that basically tells c++, okay, to be able to store multiple pieces of information to say equals, and one, the easiest way to default information right off the bat. And and inside of here, I can just start typing So let's say I want to store like a list of right, so I'm storing all of these numbers a variable where we can only store one number, we will refer to these as elements in the the list. And then we would delineate the the second element, 815 16, excetera. So these array. Now down here, I'm going to show you So I'm just gonna say C out. And let's say elements, let's say I wanted to access like because what good is the array, if we can't I can just say, Lucky nums. And I can make of this open and close square bracket, I can that I want to access. So if I want to access to put an index in here, that's going to be see we're printing out four, we're printing wanted to get access to this 15, it's going two inside of this array. So now whenever caught on by now when we index these arrays, say that four is an index position. 08 is three excetera. So we would always say that an index position zero. And if you're familiar the same exact thing. So that's how we can we can also modify an element in the array. say I wanted to change the first element, this a different value. So I could set this I print out lucky numbers, zero, I'm actually whoops, I'm actually going to be printing one of the indexes inside of that array. Another give them a size. So normally, if I just create and an empty square brackets, the array is that I declare over here. But a lot of times not know what all the elements should be. I could say, like 20. And essentially what want to be able to store 20 elements inside don't have 20 elements, yet I only have elements add more elements into here. So I could say And I could give this a value. So I could now down here, if we printed out lucky numbers can see, another thing you can do is just can get rid of all of these. And I can just I can give all these different values. So And now I can you know essentially just assign I said, a lot of times you might not know you declare it and so you can just basically in there and then you can just you know, fill the basics of arrays and arrays are very simple. pieces of information. In this tutorial, I in c++. A function is basically just a little task. So a lot of times in c++, when you're designed to do a certain thing. So you might supposed to do something. And a function is code, and then you can reuse it throughout you guys how we can create a function in this see I have this little block of code here, parentheses. And then there's these open and function. This is a little block of code. task. And the purpose of this main function we run our program. So any code that we put executed when our program runs, I'm gonna So up here above this main function, I'm going this function will be performing is it's going a function in c++, we need to give c++ a couple information we need to give is called a return a lot of times the functions will go off, they'll return a value back to the caller. returns and return types in the next video. kind of just follow along. And I'm just going put void here, it basically means that this So this is kind of like the most basic type need to give this function a name. Remember, a task. So generally, when we're naming a according to the task that is performing or So I'm just going to call mine Say hi, because Now I'm going to make an open and closed parentheses. and closed curly bracket. Any code that I is going to be considered inside of the function. C out, and we'll just print out like Hello, this is a very simple function, I just have lines as I want. This is a simple function. 100 lines, if I wanted to, you can put as want. Now, let's run our program. And we'll and run my program. And you'll see over here, isn't actually getting printed out when we we want to execute the code that's inside want to execute a function, we have to do this code inside of here to be executed, I code inside this main function gets executed is going to get executed. So inside of here, type out say hi. And I can type an open close this out, this tells c++ that I want to execute hi function. So when c++ sees this, it's going to execute all the code inside of there, and go ahead and run our program. And we'll see we're printing out Hello, user. And real quick, flow of the so if I said like C out over here, over here, and I said bottom. When I run my top, hello, user and then bottom. And actually, put new lines in there. But the point is that execute this line of code, it's going to see And it's actually going to leave this main Say hi function, it'll execute all of the of code to execute inside of the say, Hi function and execute this line. So that's basically is a very basic function, but we can make With these functions, you can actually give Say hi function, I can give this a piece of that piece of information to, you know, performance these are called parameters. And if I want be given a piece of information, I can just it should take. So, in our case, instead of hello to someone specific. So up here, I could going to accept one parameter a name. And we can just say hello name. Now, whenever it's specifying that it needs to take a parameter, it a value. So in here, I can just pass it Hello, Mike, because the value Mike is going Alright, let's go ahead and run our program. Mike. So that's kind of cool. And you can and you can also take multiple parameters. like age, so now the caller is going to have we can say hello name, will say like you are. So we'll say like age. So now we're passing function. And down here, when I call the function, So now I could just say, like, Mike, and let's function, it's going to be able to take in them to perform the task differently. And call this as many times as I want. In other up here. So I can come down here, I can copy we'll say like, Tom is going to be 45. And now, I'm actually going to run this code three I'm just going to put a and line so that gets the program. And you'll see it says hello, functions are great, because we can reuse So basically, like I wrote this function one I want inside of my program. So anytime you that's a good candidate for a function. Alright, you'll notice that I'm creating this function if I was to take this and move it down here, function. Now when I run my program, we're a little red block here. This is the problem, function, it doesn't actually know about it. executed. So c++ is trying to execute the that is because we created it down here. So called a function stub. So up here, we're signature, and we're going to tell c++ about a variable, like if I created an int, and this a value right away, I could then come or something. This is basically what we're just declare the function and then somewhere over here, I'm just gonna say, void, say hi. int age. So now, when I create this little I'm basically declaring the function and I is going to be able to call it because it's when I run my program, now, we're able to how we can do that with functions. And really, In fact, a good program will have lots and I'm going to show you guys how we can actually the return keyword. In this tutorial, I want So when I'm talking about returns, I'm talking can write functions which are basically like that performs a specific task. And with those pass them information. So I can give them information that they can use to perform their information functions can actually give us not only can I give it parameters, but that Now I'm going to show you guys how we can in c++. So why don't we create a function that's going to cube a number. So when I cube power. So if I was to say like, two cubed, power, or it's just going to be two times number does. So why don't we create a c++ when we create a function in c++, the first called a return type. And a return type basically type, this function is going to return. Now along with the course, we just put void here. wasn't going to return any information. In to return some information. So you can put put like int, double, you put character, you can go here. In our case, we're going to cube And I'm going to say double. And now we need call it cube. And we're going to take one we take a double, and we'll just call it num. to do is cube the number and then return the to create a double, I'm going to call it result. value of num, so I'm just gonna set it equal me cubing num. So now result has inside of okay, down here, I want to return the value just say return result. And now this is going stored inside result back to the caller. Now call this function so I could say cube and Right? Now, actually, what's going to happen it's actually going to get a value back. So answer is equal to cube 5.0. And now the value is going to get stored inside of this answer C out, and I'm just gonna print out answer. see is, we're going to be printing out the here, we get 125. So five times five is 2525, number. And you can see here, this is getting that gets returned from this function inside cut out the middleman and I could just print boy down here. And now it's going to do the And actually up here, if we wanted, instead of this result variable, I could instead just cut out the middleman. And we'll just return So there's also one more thing I want to talk this returned keyword right here. This is whenever we type out this return keyword, executing the code inside of this function. I just printed out like hello. When I run printing out Hello, even though we're executing all that code, it's never printing out Hello. keyword, it's going to break us out of the never going to get executed because it's never is is going to break out and we'll head back what this is doing. And that's sort of the you didn't want to return a double, you could you can even return something like an array. And then that value will get stored over here. guys about if statements in c++, an if statement our code, which will allow our program to situation occurs, we can do one thing. And thing, essentially, we're able to check different true, we can do certain things. And when those So I'm going to show you guys exactly how I'm just going to create a couple of different is create a variable, it's going to be a boolean a true or a false value, so I'm going to create give this a value initially of true. So we're storing whether or not someone is male, and to show you guys how we can use an if statement. to respond to different situations. So what write an if statement that will respond to the situation where the user is not a male. I'm going to make an open and close parentheses, curly bracket. Now, inside of this open and So I can actually check a condition. And if and close parentheses is true, then we're If it's false, then we're going to move on. true or a false value. And that's basically So I'm gonna come down here, I'll say if and what this is saying is if the value stored if the value in here is true, then we're going curly brackets. So I could say, like C out, a male. And now when I run my program, you And you'll see over here, it says you are male was true. So the value that was inside parentheses, which was true, and we executed see that this code isn't going to get executed, out. So because the value inside of this parentheses, not going to execute this code. But let's wanted to handle that situation, I can use type out else just like that. And we're gonna inside of this open and close curly bracket, when this is false. So I'm going to show you right, so I'm responding to this situation. I run my program, it's going to be able to are not male. Essentially, what's happening respond to this variable. So if this variable not true, it can also handle that. And so specified a condition in our case, it was of this is male variable. So that's kind of I want to show you guys how we can make these But let's say I added in another Boolean, I'm going to set this equal to true and actually, So now in addition to izmail, I also have to see if the person was both male. And if is I can use something called the AND operator what's happening now is c++ is saying If the we're going to print this out. So I'll just line of code down here, and any of the code is only going to get executed when is male this and operator is allowing me to check have to be true, in order for this line to true and is tall is also true. So now, when you are a tall male. Here's the thing, though, his tall to false, this whole condition is going to go down here to this else block. not male, or not tall, but we'll just leave Alright, so now it says you are not male, should be different. But the point is that values up here was false. And that's how we operator called the OR operator. And that conditions has to be true, in order for the tall is set to false, and his male is set it's still gonna say you are a tall male, and run this program. Now, you'll see it says that was inside this initial if block. And both of these to false now, because we're you are not male. So you'll see down here how we can use and and how we can use or with in both of them have to be true for the whole one of the conditions has to be true for the be true as well. And it'll be true. But if be false. All right, let's make this even another thing we can do, I'm going to bring and is tall. But let's say that we wanted weren't tall. So if they were like a short So I can use another keyword. In c++, it's and close parentheses and open and close curly down to a new line. So else if is basically then we're going to come down here, and we're condition appears false, instead of just going we're going to check another separate condition. male, and they're not tall, so they're not so I'm saying elsif is male, and is tall. not tall. And here, I want to introduce you negation operator, it's basically an exclamation point before a condition like is tall, it's So if is tall is true, and we put this negation to false, and vice versa. So essentially, is not tall. That's basically what this is out, you are a short male, right? Because is true, that means they're male, and they're one more that we can check. So I'm going to more possible scenario with these two variables not male. So I can say not, is male, and is could be like a tall female or something. and say C out, and I'll just say you are tall, printing that out onto the screen. So now covered. So over here in this if else block down here in this else block, we would want are not male and not tall. So that's just right, so we're able to respond to every possible So let's try this out, I'm going to set both to run my program. So they're both equal to to that situation, who see it says you are to that, let's set his male equal to false. our program, once again, is going to be able tall, but not male. So the program is smart depending on the value of these variables. to true and is tall to false. And again, it's you are a short male. And then finally, we'll answer which is going to be you're not male, figure this out just by using all this stuff. time, we have this if statement, and it's Now, these are both conditions, right? So essentially, it's a true or false value, right? of these are true, then we'll execute the we'll come down here and we'll check this that. And so we get down here, and we figured tall. So that's the basics of if statements. of if statements, I talk to you guys about there's one more thing I want to talk to you called comparisons. And down here, we're using conditions right, so I'm using these, and right. But we can also use something called check to see if different values relate to to see if like a number is greater than another comparisons as our conditions. And that's next tutorial. And I'll talk to you guys more I'm going to talk to you guys some more about to be looking at using comparisons inside be kind of cool. In this tutorial, I want a function, and it's going to basically tell will take as parameters, two numbers, and is the largest. And this is a great example So over here, I have my main function. And And let's just say it's going to return an max. And we'll make an open and close parentheses of this function, we're going to take two and we'll get another integer. So essentially, as input. And the goal will be to figure out return that back to the caller. First thing result. And I'm not going to give this value this function, we're going to return results. whichever of these is bigger inside of this interesting. Now, we need to figure out which do that. So I'm just going to say F, open curly bracket. Now, inside of this parentheses, we need to put a true or false value, right? down here. If the value is false, then we'll the last tutorial, when we were learning about and a Boolean is a true or false value. So in there, and it's true, or its false. And But in a lot of cases, we're not going to us. So it's not going to be as easy as just only information that we have are these two or a false value using just those two numbers? So if I want to figure out which of these right so over here inside of this if condition than num two, if num one is greater than num num one. And the reason I'm doing that is if this comparison is true, the num one is num, one greater than num two, it's actually false value. Right? num. One is either greater is going to be a boolean value, right? Once out if it's true or not, it's going to be check to see if num one is greater than num num one. And we can just say else, and we'll reason we're saying this down here is because bigger than num two, then we know that num certain circumstances, the numbers might be So down here, we're going to return the result. I'm just gonna come down here. And why don't say get max. And we'll throw like a two and a five. And now when we run this program, I'm gonna run the program. And Yep, over here, So this is basically how we can use comparisons Technically, this comparison is going to get to get resolved down to a true or false, like And that's kind of interesting. So that's greater than we could also use less than, use greater than or equal to, we can use equal we use the equal sign down here, we're using result the value stored inside num one. When operator. So I'm comparing the value of num that's either going to be true or false, right? or they're not. And then the last one we can what you think it does. This whole thing is num, two. So those are sort of the basics. So this get max function takes two integers. int, num, three. Now all the sudden, instead figure out which is bigger among the three statement a lot more complicated. So why don't how we can do this. So inside of this comparison, than num two, just like we did last time. is bigger than num three. If no one's bigger then we know it's the biggest. So let's start instead of just saying greater than I'm gonna is that chance where they're all the same So we can say if num one is greater than or this and operator and this is going to allow num one is greater than or equal to num three. to num two and is greater than or equal to biggest. So I'm going to set result equal another condition. So I'm gonna say else if two is greater than or equal to num one. And And if this is the case, in other words, we're of here is false. So this condition is false. But if this condition is true down here, then say result is equal to num two. Now all we we can just say result is equal to num three. num one's not the biggest. If this condition biggest. So if num one's not the biggest and must be the biggest. So we're going to default else block that we need. And you see I'm using am I using this and operator, I'm also using these guys are called. So let's go ahead and of saying two parameters, we need to pass and we should get 10 back, which we do, if So for example, I could test out, we'll make we'll see if it works. And it does. And we'll if it works. And it does cool. And then also them were the same. So let's try this were And we're on the program. And yeah, so it's is our max function. And hopefully this gives comparisons. Now we can compare all different we can compare integers, we can also compare characters. So you can compare all those guys this tutorial, I'm going to show you guys c++. Now, if you've been following along with of the course, we created a very simple calculator. take in two numbers as input, and added them this tutorial, now we've learned a little to build a more complex calculator. So this in two numbers, but it's also going to allow to perform. So they can specify that they divide them, multiply them, whatever. So it's So down here, inside of my main function, And the first thing I'm going to do is create variables. And why don't we just create these if you wanted. We'll just call them num one the two numbers that we want to perform the going to want to create a character. And I'm going to throw the two numbers here. And we're either going to be plus or minus division, created those two variables, we want to start user. The first thing that we want to do is C out. And I'll basically just print out enter in the first number. And then down here, we're these, these two greater than signs. And we one, just like that. Okay, cool. So now that copy this code, and then down here, we can going to ask them for the operator. So I'll the operator inside of that Opie variable to enter in the second number, and we'll store doing is I'm prompting the user for all of to get that first number, we're going to get second number. So they'd give me like five like that. Alright, so now that we have all that we need to do, which is we need to figure here, we have the operator. So ideally, they sign, whatever, but we don't know what exactly what what they were going to enter in. So perfect scenario for an if statement. So I'm you guys how we can check this. So I'm just in here. So basically, what we want to do So the first thing I'm gonna do is just check sign. Right? So if the operator is equal to to print out the result of adding the two here, and I'm going to create an integer called equal to num, one plus num, two. And we know is true, then we're going to execute this I basically just want to check to see if it's to a minus sign, and if it is equal to a minus there. But we can subtract the two numbers. so we can do the same thing for multiplication copy this else if, and I'll paste it down forward slash, that means division. And then multiplication. So use this Asterix, and then So now we're basically covering all of the we got that covered minus sign, division sign all of those standard scenarios, but there's an invalid operator. So instead of entering like, you know, random character, in which here. And this LS block is going to get executed So if none of the conditions are true, then So I'm just going to go ahead and print that print out invalid operator. Alright, so basically, a value stored inside of result. So down here, just say C out, and we'll print out result. I'm going to go ahead and run the program. we insert a five? Enter operator, let's enter do 30. So now when I click enter, hopefully be able to figure out which operation I was it correctly. So you see down here, we printed So why don't we try a couple other ones. Let's we get 10. Yes, it looks like that's working. check to see if we enter an invalid operator. the operator, let's make it like a capital And you'll see down here it prints out invalid other little printout here. And actually, we didn't give result in initial value. Alright, you guys can see how we can combine getting if statements to basically figure out what And this tutorial, I'm going to talk to you Now a switch statement is basically a special one particular value against a bunch of other when we're trying to compare different things. statements are. And we'll do an example which So in my program, In this tutorial, I actually going to be able to convert a number into passed in a zero to this function, I'd want the user passed in a one, I'd want to be able to be able to convert an integer number to gonna show you guys how we can do this inside my function, and we're basically just going to call it get day of a week, just like that. And this is going to take one parameter, which call it day num. So this is going to be the through six, basically. Alright, so inside out how we can do this. So depending on the on the day num, that they give us, we want the first thing I'll do is I'm going to create and I'm just going to call it day name. So the name of the day that they requested. And we're going to return it. So I'm just going we're going to end up returning. So our goal this day name variable with the correct day mean, one way that we can build this function like, if day num is equal to zero, and if name is equal to Sunday, right? That works. day of the week. So I can say like, else if is equal to something else. So day num is same exact thing. So we Ad name is equal to single day of the week. Here's the problem, times, right? Potentially eight times, if I'm going to have to create eight of these this out. And that is extremely inefficient. for us to use something called a switch statement. we're doing over here with these if else statements, I want you guys to notice is in every single every single one of these, if conditions, num is equal to a different value. So in here, we're saying Dana equal to one and the next equal to three, all of those conditions are else. And when you have a situation like that, So I'm going to show you guys how we can use So I'm just going to write out switch and close curly brackets. So so far, it looks opening, close parentheses, I'm going to put the value in here that we want to compare it's going to be daenam. Right, I'm comparing is the value that I want to compare to all statement, I can write cases. And basically value in here. So I can say zero and a colon. what I want to happen. So I could say day what this is doing is it's saying in the case, set day name equal to Sunday. And then right I'll explain what break does in a second. for every single number. So I could say like, to one, I'm going to set day name equal to say break. And then I can keep doing this is doing down here, this break statement is statement. So if I don't put this break statement through all these cases. So even if daenam Sunday, it's still going to keep going and I say break right here. And generally, it's be able to check for more than one condition, num is equal to zero, we're going to do all to make one of these for each day of the week. we'll meet back here, and I'll kind of show and made one of these little case blocks for here we have zero through six. And they're So in case three, day name is Wednesday, etc, Now there's one more thing that we have to there's always the chance that the user enters words, if the user doesn't enter zero through In other words, I want to be able to handle isn't in here. And inside of a switch statement, default. So we can just say default, a colon, get executed, if none of the cases up here any of these numbers up here, then this code So down here, I could just say, day name is we have our switch statement set up. And you like an if statement. So this is a lot clearer LSF like 1000 times, we don't need all those it's just really clear, it's really easy to see if our get day the week function is working. going to print out the value. So I'll say day of week and we need to pass this an integer. we should get printed out here Monday. Or so Sunday would be the first day of the week. So I'm going to put one here instead of zero. All right, let's try one more, we'll try six. see if it works. Cool. So Saturday worked which is where we pass in an invalid number. be able to see that this isn't going to work. So this is a pretty cool function. And it's case statements. In order to make this a lot easily done this with an if statement, nothing lot easier to use something like a switch in the language. In this tutorial, I'm going c++. Now a while loop is basically just a through a block of code, while a certain condition into something called loops. And loops are in our programs, specifically in c++, where code and do things a bunch of times. So I'm type of loop, which is a while loop. And we'll Alright, so down here, the first thing I'm is I'm actually just going to create an integer. going to set it equal to one. So this isn't loops. We're just going to use this in our to create a while loop, I can basically just and an open and closed, curly bracket, and main outline for a while loop. Now here's of these parentheses, I'm going to specify about if statements in c++, this is essentially a condition just like we would an if statement. going to loop over and continually execute brackets, as you'll see in a second, we're curly brackets. And as long as the condition through that code. And every single time we this condition. So let me just show you guys going on. So up here in these parentheses, what I want to do is I'm going to say while is now my condition, while index is less than code inside of this loop. So I'm going to So down here, what I want to do is I basically just going to say, C out index. And then I'm line. And then down here, I'm going to increment plus. So you remember index plus, plus just what I'm doing is I'm specifying my condition, I want to execute all of this code. So I'm sort of see already what this is going to we're going to take a look at what's happening. we basically got 12345. Here's what's happening index, I set it equal to one and I basically equal to five, I want to keep looping over the first time we went through, we checked is less than or equal to five. Since that one on the first iteration of the loop, we and then we incremented index, so index was back up here and we check this condition again. equal to five. In this case, index is equal or equal to five. So we're going to execute printed out two, and then we incremented to checked the condition again, every single condition. So before we execute the loop, check it again and execute the code again. was equal to six. So we came up here to check equal to five. So Then we just came down, was happy. So that's essentially what we did. a condition, as long as that condition is much just keep looping through all the code where using loops is gonna come in handy. to build a little game where we can use a to talk to you guys about a couple more things to watch out for when you're using these loops loop is a situation where this condition up like the condition that you specify up here will just continually loop through. So for of code right here, where we're incrementing one. And so this condition up here is never you'll see over here that we're just continually flashing, really what's happening is we're that while loop, and it's never going to stop never going to stop, right because that condition want to make sure that any conditions that point are going to become false. Now, there to want a while loop. But I would say for be necessary. And they can actually be dangerous, you're like creating variables or allocating program or even crashing your computer if tip about infinite loops. There's one more And it's a different type of while loops, But before I show you that, I just want to int index equal to six, when I run my program, going to execute. And that's because before this condition first. So before I'm allowed up here in these parentheses. So I check to since index is starting out at six. We're So if I ran my program, you guys will see do anything. But there's another type of loop, to show you guys how we can make one, I'm it down here. And I need to include a semi to be I'm just gonna say do and this is what's essentially just a normal while loop, but condition, and then executing the code, we're going to check the condition. So it's just even though index is equal to six, I'm still then we're going to check the condition and me show you guys what happens when I run this. out that six. That's because with the do while you check the condition. And there's a bunch while loops or do while loops. And to be honest do while loop you can do with a normal while But in a lot of circumstances, they are useful. B I mean, that's a basic overview of loops. we can talk about in a future tutorial called with these wild loops, you can kind of see going to show you how to build a little guessing because we're actually going to be able to up to this point in the course. So we'll use use variables, we use all sorts of stuff in how this is going to go is the user is going I'm gonna have a secret number stored here to try and guess what that number is. So the as you'll see in a second, it's actually pretty here's the one caveat is if the user doesn't to keep asking them keep prompting them to you guys how we can do this. So the first So I'm just going to make an integer and I'm going to set this equal to I don't know, let's number. And then the next thing I want to call guests, and we're not going to give guests secret number, and we have our guests. And to guess what the secret number is until they to be done continually, that's usually a good I'm going to go ahead and say, while when gonna make an open and close curly bracket. ask the user to enter in the number until is specify a condition. In other words, I not equal to the guests. So as long as the other words, as long as the user hasn't guessed loop. Now, every time through the loop, I So I'm just going to say C out. And we'll going to enter the number that they want to to get that answer, we want to store it in greater than signs. And I'm just gonna put see is that we want to take whatever the user every time we go through this loop, the user to check their guests against the secret num. just break out of the loop. So down here, means they got the guest right, so I can just message. Alright, so this is essentially all going to go ahead and run this program, and enter guests, so I'm just going to enter in a three, that wasn't the secret number, so And no matter how many times I guess, it's it right. Now let's try to get the guests when I enter a seven in now, all the sudden is going to be false. So the secret num is we'll break out of the while loop. And it's how we can build our little guessing game. using a while loop, right. But there's actually do while loop. So your homework for this tutorial a do while loop instead of just a normal while actually a pretty fun game, and it works out But the game is a little bit unfair. It's unlimited guesses. So they can guess as many seem fair. So what we could do is we can impose hey, the user is only able to guess like three So I'm going to go ahead and show you guys that, we're going to need to add in a couple to add in is going to be called guest count. to keep track of how many times the user has time the user guesses the secret number, we actually going to set this equal to zero initially, then down here, every time the user guesses, I'm just gonna say, guest count, plus plus. of how many times the user has tried to guess make another variable over here. And I basically limit is going to specify how many times the why don't we set this equal to 30. So we'll can't get the word and three guesses, then then one more thing, we want to create another and this is going to be called out of guesses. So out of guesses will tell us whether or of guesses is false. That means the user has of guesses. If it's true, it means they don't of guesses. Alright, so now that we have these can modify this a while loop. So down here, you'll see that we're letting the user guessed user doesn't have any guesses left, then we Right? In other words, if they've reached another guess. So what I can do here is I I'm going to say is if guest count is less less than the guest limit, then I'm going condition is true up here, that means that They haven't reached the guests limit. So increment the guest count, etc. Otherwise, the guest limit, that means that they ran is I want to toggle this Boolean. So basically, So I'm telling my program that they ran out equal to true now, we're basically done inside go through, we're checking to see if they let them guess. Otherwise, we tell our program thing that we have to do to this while loop in this while loop condition, we can use this me to put two conditions inside of there. to guests, and we can check another condition. see if they're out of guesses. So I want to to check to see if they're not out of guesses. they haven't guessed the secret word. And those becomes false, so if they run out of then we're going to break out of the loop. Alright, so one more thing down here below just printing out you win. But this isn't out of guesses, then they're going to break shouldn't tell them that they won, we should to do is make another if statement. And I'm if out of guesses is equal to true, then I And otherwise, if it's not equal to true in means that they want so that means they guess and run this program. And we'll see how we a guest. So why don't we try to lose the game. So this is our last guest. If we don't get you lose, right? So we lost the game. Alright, of being able to guess infinite times, we can win the game now. So we're gonna guess guests, I'm gonna say seven. And when I enter win the game, as well. So this is sort of structures together. So you'll see down here, not only did I use all these variables, but all that stuff. And really, this is what real it's not just going to be like little simple just like this. Not that this is messy code. different programming structures in combination. you guys, which is the way that I wrote this we could have written this like a dozen different And you know, I can think of like at least done this. And this is another lesson in programming five or six different ways to do the same while loop, I could have used different things something else. And so that's one of the cool in and trying different ways to do the same this guessing game. Hopefully, you guys learned structures like ifs and Wiles, and variables tutorial, I want to talk to you guys about type of loop, which actually allows us to the loop. So in a for loop, we can use something indexing variable will allow us to keep track And you can also use the indexing variable to show you guys how for loops work, we're what situations you're going to want to use this basic program set up and essentially this a integer called index and I just set than or equal to five, I'm just printing out it. So I'm gonna go ahead and run this program, So you'll see, we're basically just printing And if you've been following along with this familiar with what while loops do at this things. So this while loop is special, because index tells us what iteration of the loop see over here, like the first time we go through has the value one, the second time we go through has the value of three, etc. Right? So this iteration of the loop we're currently on. of the loop, the value inside of this index it's incrementing, by one, but the point is, variable, and it's essentially just keeping the loop. Now, in c++, and in just about every very powerful looping structure. In other track of you know how many times we've gone that's going to change every time we go through is such a useful situation, that there's actually So there's a special type of loop whose sole very similar to this, where we have this indexing we go through the loop. And in a lot of circumstances, of the loop we're currently on. And that's guys how we can build a for loop. And essentially we have up here, it's just going to be a lot So it's great if we're live, we can just say open and close curly bracket. So so far, it one difference with the for loop is instead So in this while loop, we just have our looping like a loop guard. Down here in this for loop three different things that we want to include. of this for loop parentheses is a variable here, you'll notice that I'm creating this it a value of one. So I'm declaring the variable I'm initializing the variable. inside of this So I could actually just copy this line, and And instead of calling it index, why don't index, we'll set it equal to one, then you'll put this semi colon, we can actually put another wild looping structure is our loop guard, telling us when we should loop so if this keep looping. So that's the next thing that So we're putting this variable declaration also going to put the looping condition. So stop and when it should go. Alright, so then here. So you'll notice I have a semicolon have another semicolon here, after we specify do is put in a line of code that's going to Up here in this while loop, you'll notice index plus plus, this line of code is going loop iteration. So the last thing that we're loop is increment the index variable, right. put over here, we're going to put a line of every iteration of this loop. And in our case, i so I'm just going to say i plus plus, we're any line of code here that I want, I mean, you know, basically whatever I want, but in just like we did up here with index. So now open and close curly brackets, we can just of the loop. So that's going to be this line guy in right here. And now we have a completed down here is actually equivalent to this loop of code, whereas this only takes two lines scenario where we want to have a variable changing every time we go through the loop the current loop iteration, such a common a for loop for that. And the for loop, the like I did up there. So I'm initializing this the looping guard the looping conditions, a line of code that's going to get executed going to be this i plus plus. And you'll notice And you'll notice also that I don't need a rid of this while loop. And I'm going to go we run the for loop. And actually, I need being index, I'm just gonna leave it as i int is equal to one, we're going to keep looping And then at the end, we're just going to increment time through the loop, we are printing out, you'll see we get the same exact output as just 12345. So what's cool about these four of a value every time we go through. And in of how many times we've gone through the loop, for loops to actually iterate through the an array of integers, so we'll just call it an initial value. So why don't we just say it just has a bunch of numbers in it. And to access a specific element inside of this put the index in here. So if I said num zero, if I said nums, four, it's going to give us to this three, what I can actually do is I to actually loop through and print out all start at zero, so I'm going to start this do is I'm basically going to say i is less array. So inside of this array, we have 12345 than five, we want to keep looping and then here, instead of printing out, I could actually to do is on the first iteration of the loop, second iteration of the loop, it's going to of the loop, it's going to print out nums, way up to number four, which as we saw is be the last element in the array. So we can all the elements in the nums array. So let's here, we're printing out all the elements. very common situation, we can use for loops array. And it can be really useful. So play useful. And one more time, I just want to we're doing over here is we're creating a so I'm saying int is equal to zero. And then condition, I'm saying we're gonna keep looping is a line of code that will get run after we go through this loop, we'll come up here, the condition. Again, that is the basics of would say this is almost even more widely So you definitely want to practice and play I'm gonna show you guys how to build an exponent a function that will take a number to a specific could pass in two numbers, like if I passed me back three race to the fourth power. So and we'll actually get a chance to use four build this function, that's going to be pretty exponent function. So we're going to have int. And why don't we just call this power power, and make an open and close parentheses power function is going to take two arguments. going to take a power number. And we're basically of the power number. So I'm just going to here in our power function, we need to figure to take bass num to power num. And we can do that. So the first thing I want to do is to call it result. And I'm just going to set basically just going to return results. So is to get rid the result variable equal to number, right, that's kind of our goal. Throughout of simplicity, and the purposes just for this to handle positive number exponents. So we're is going to be positive. And now let's just to drive home the point a little bit better, I'm going to go ahead and write out this for to specify three things, the first thing I gonna say int i is equal to zero, I'll start specify a looping a condition or a loop guard. less than the power num. Essentially, what loop power num times. So as many times as this loop. So if power num is three, I want I want to loop through five times. That's here, we can just specify something that we So I'm just gonna say i plus plus. And basically every time we go through the loop. Alright, to think about what we can do. So where are through here, power num times, right? So what result times the base num, every time we go is result is equal to result times base num. is because let's just kind of break this down, result is going to be equal to one. So the multiplying base num by one, so we just get loop result is equal to based on right, in num. So the second time we go through, we're on based on squared, right, the third time of base num squared. So for molting multiplying us base num cubed. So that's kind of why this through this for loop power num times. And result times the base num. And you can see us to only loop through the loop a specified easy for us to only loop through, you know, is the basic function. And this looks pretty this is only going to be able to handle positive nums. Okay, so let's go ahead and call this. we print out the result. So I'm going to see So why don't we pass in two, and three, so So now let's run this function. And you'll Two times two is four, four times two is eight. squared. So now we should get 16. And you like our little function is working. And basically of demonstrate to you another way that we for loop in order to essentially specify how And four leaves are really useful for that representing how many times we've gone through loop I can tell us that we've gone through is useful. And so you can see, it's actually takes up like two lines of code. So that's function. And actually, this is kind of useful, like this might get put together. In this two separate subjects in c++, the first subject two dimensional arrays. And a two dimensional where every single element inside the array situation. And I want to talk to you guys loops. And a nested for loop is a situation for loop. So this is gonna be kind of cool. subjects together two dimensional arrays, of a cool program. So I'm gonna show you guys I want to show you is a two dimensional array. of numbers. And I'm just going to call it a regular array, we're just going to make we're making a two dimensional array, I want after this. Now remember, a two dimensional where every element inside of the array is how we can go ahead and set something like value. So I'm just gonna initialize this. of array elements inside of here. So the first element in the array. Now normally, if I was out elements like this, right? You know, I a comma, and then we have our array. But with element is actually another array. So if I two dimensional array, I can basically go of mini array inside of here. And I'm actually so now the first element in this number grid one and two. So number grid, first element of its own. So I'm going to copy this, and going to put a comma here, because remember, elements. And then down here, I'm just going four. So we have 1234. And why don't we do so essentially, what's happening here is we curly brackets represent the number grid array. three elements. So this is the first element, third element, all of which are arrays. And inside of them. So whenever we're creating specify the numbers over here. So inside of we want to tell c++, how many total elements we have three, because again, there's 123 how many elements are inside of each array etc. So there's going to be two elements in especially when you're dealing with two dimensional otherwise you can get really confused, you the basic layout, like I know that this array and then it has two columns. So these would a matrix. Alright, so that is a two dimensional access some of these elements. So if I want just gonna go ahead and print some of these and what I can do is I can make two open and just like this. And inside of these open and want to specify the row. In other words, I grid that I want to access. So this would be the element at position one, and this would we want to access this element right here. element zero. And then over here, I want to array, so it's going to be an index position overall element, and one is corresponding so now when we print this out, we should get two. Let's try one more, why don't we try to be an element 012. So we're going to put zero, so we're just going to put a zero and Alright, so that kind of shows you a little array. And actually, this same concept can could have a three or four or five dimensional to apply. Obviously, the more dimensions you can get pretty complex with arrays, just by thing I wanted to show you guys. And now I a nested for loop. And nested for loop is of another for loop. And actually nested for can use them to print out all of the elements we could iterate through all the elements I'm going to show you guys how that's going basic for loop. So I'm just gonna say for, Again, our goal here is to be able to loop And, you know, as I sort of create this for this is all gonna make sense. But what I want less than three. And I'm using three here, all of these individual elements. So all of and over here, I'm just gonna say i plus plus. over all of these elements. So this first element, but remember, each of these elements for each of these arrays, I want to iterate arrays. So I can create another for loop to to call this J. And a lot of times when we're ij, that's kind of a convention, I'm gonna looping as long as j is less than two. And each of these arrays, right? So this loop all of these elements, and this one down here these elements. So I'm gonna say j less than So now we have our basic structure setup. loop is going to fully iterate. So it's going I'm just going to see out. And I'm basically elements. So I'm going to print out number basically how this is going to work. And then out a new line. So I'm just going to say C line. So let's go ahead and run this. And as far as what it's doing. So when I run this, out all of these elements. So we're printing and iterate over every single element inside what's happening is, every time we go through fully iterating through the J loop. So this individual element. So it's responsible for j loop is responsible for iterating over each which are arrays. So the J loop is going to we go through this loop is going to be equal So we're going to print this out, then we're still going to be equal to zero, but j is print this element out. And then AI is going zero, we'll print this out and then it's going that's essentially what's happening here. loops, I mean, any sort of nested loop can through like I said, complex structures like By using comments in c++, or comments are actually going to get executed or rendered you're going to want to, you know, basically So whenever we're writing programs, like whenever instructions are meant for the computer. So out, or I can tell the computer to loop over a lot of times, we're going to want to write for yourself or for someone else. And we can And I'm gonna show you guys what comments know, a little line of code or a block of we can use it to write little messages for in c++, there's actually a couple of ways two forward slashes. So when I make two forward all of this text is actually colored different is a comment. So any text that I put after a comment. And it's not actually going to a bunch of nonsense up here, I can still run to execute. So you'll see I can run the program. out comments are fun. So this is a really a lot of people will use this to write notes developers. You can also use this to like this line of code over here, I can say like, you probably wouldn't need to describe this or you know, complex loop or something like also put these comments like after a line it down here. And you'll see that everything is going to be considered a comment. But I can use this to like describe what the line one downside to this type of comment, though, So if I come down here to the new line, all So this is no longer a comment. If you want you can use something called an opening and and an Asterix, then everything that comes is going to be considered a comments, you But I can close this off by saying an Asterix that's in between these two tags is going types of comments are very common. And you to be correct. And it's going to work out. types of comments and how you can use them. commenting out lines of code. So a lot of maybe you want to try to run your program be running into a problem and you think a one option would be to just remove the line line of code was potentially like messing program would act without that line of code. and then run the program. And now we're running problem with that, though, is I have to physically though, I could just put a comment in front get ignored by c++. So it's essentially the have to physically remove it from the file, it, we still know that it's there. It's just useful way that comments can come in handy. you definitely want to take advantage of them In this tutorial, I want to talk to you guys just a type of information that we can work with this course up to this point, we've been So we were working with things like integers, with like doubles, which are decimal numbers are like plain text. And this is where I want we can deal with which are called pointers. So we're going to have get into what that talk about all that stuff. And I'll give you here in my program, I have a few different called age and I gave it you know, a value Now all of these are variables in my program, essentially just containers where I'm storing I'm writing this program, I'm storing the I'm storing 2.7 inside of this GPA variable. the hood a little bit and talk about what's you have something called your memory. And might have heard people talk about ram stands just the active memory that your computer's your computer runs a program, it's using Ram. memory, let's just say our program, for example. run this program, my computer would actually is going to use its memory in order to store going to be storing all of these values inside age, and I give it a value, what's actually value 19. And it's going to store it inside create this double GPA, my computer is going it physically inside of the memory in my computer. of these different pieces of data that are memory of my computer, so when I write the that 19 is stored inside the age variable. stored in side of the computer's memory, so one of the cool things about the memory of containers, right, each one of these variables, like inside of one of those containers, right? but you can basically think of it as like in memory, this value 2.7 is stored inside containers inside the memory of my computer So it has an address, which uniquely identifies inside the physical memory of my computer, This value 2.7 is stored in the memory of memory address. And so when my program wants using that memory address. When I want to using like age or GPA. But when my computer it using the physical memory address. So that's show you guys how we can go ahead and access print it out, I get to say C out. And if I address where each of these variables are the memory address where this value 19 is where this value 2.7 is stored. All I have can type in the name of a variable. So I could is going to do is when I put this ampersand I want to print out the memory address where I want to print out the memory address where my program, you'll notice over here that I'm six, a FPS zero. This is a hexadecimal number, will be very difficult for a human being to it just fine. So if you were to go to this you would find the value 19. I mean, that's that's basically like where that value 19 wanted to access or change it or modify it, that's essentially what we're talking about. So we have like a special word that we use a pointer. So generally, if I'm working in I'm going to talk about pointers. So I would here, we can say that I'm printing out a pointer. It's just a memory address. So any memory using inside of our programs is going to be can access the pointer of these variables memory addresses where these variables are a little demonstration I want to show you wrote out before the tutorial. And it's essentially for all of these variables. So I'm going to here, I'm essentially just printing out all these variables. So we have age, and it's at this memory address and name at this memory if we were to go to them in our like physical we would see those values. And again, we would this is a pointer pointer is just a memory just giving it another name. So that's kind we can access like the memory addresses of take this a step further. So I want to show can actually create a variable where I can creating an integer variable, and inside of I'm creating a double variable, and I'm storing variable, I'm storing a string. And actually, memory addresses or the pointers inside of So I'm going to show you guys how we can do be just a container where we can store a pointer, a memory address. Generally, when we're working not just going to work with random addresses, any, like meaningful memory addresses off using memory addresses, we're going to be variables in our programs. So therefore, when words, when I create a container, what I'm to create it based off of one of these variables. that will store the pointer. For this age we create a pointer variable, you always want to be the Asterix, and then you want to type to call this P age. And a lot of times when use this lowercase P. And then you'll type address you're storing. So I could say int age. So remember when we use this ampersand, that gives us the pointer. In other words, value is stored. So I'm essentially storing here called p age, I could do the same thing double Asterix, and I'm just gonna say p GPA. GPA. So now this pgpa pointer variable is that storing inside of it a memory address, of this GPA variable. I can do the same thing p name. And actually don't forget to put the name. And now this pointer variable p name storing the memory address have this name these different pointer values using these here, I could say C out. And I could just to go ahead and print out the value that's is going to be a pointer, which should be there, that's exactly what we get. So that's a lot of times people get a little intimidated are really simple. A pointer is just another So you know, you can work with things like work with doubles, which are decimal numbers, a bunch of characters, you could also work you know, that's all it is. It's just a different variable, it's just a container where we can Now I want to point out to you guys, whenever that I use the data type of the variable that is storing the memory address of an integer. variable is storing the address of a double. here. This is storing the memory does have basically just what you have to do when we're me to another point I want to show you guys dereferencing, a pointer. And dereferencing. to grab the value that's inside of the memory address. So if I have a pointer, that is a or a physical location, in my computer's RAM, it's just an address, right? Like you have what this is, it's an address. But instead And when we dereference a pointer, we're basically pointer, we now want to go to that physical and use it in our program. And the way that you'll notice, like when I print out p h, I run this program, and I print it out, we this pointer, we would actually end up getting So if I put an Asterix here, this is what's say Asterix p age, and now we'll be dereferencing, that memory address, when I run this program, is the value at the memory address that the So I'm here in my program, and you'll see this Asterix, we get the memory address, when the pointer. So we just get 19. And that's makes sense. I'm gonna show you guys one more And if I just said, for example, like ampersand it's storing the value of 2.7. This is a pointer, address. So over here, when I run this, we dereference this, and hopefully this kind just put an Asterix here, and this is going this Asterix is dereferencing, this pointer, which is 2.7. So you can see we get this value. together. Not that you'd want to but I could memory address again. So that's kind of how you know, working with pointers, doing stuff This is also a very useful concept in another the programming language that c++ is based which but they're also important in c++. And you need to have at least a baseline understanding hopefully that gives you a little bit of an pointers are just types of information. It's in our programs, we can print them out, we variables, we can also dereference them, as that helps. And hopefully now you can kind I'm gonna teach you guys about classes and useful. And this is a very important topic overview of what these are. And we'll kind objects. So down here in my little program basically, what I'm doing here is I'm just I'm storing my name, inside of this name variable, storing pi, the first three digits of Pi in my favorite letter G inside of this character able to store a bunch of different types of about c++ data types, you'll know that by different types of data. So we can store like whole numbers, decimal numbers, we can store types of information. But here's the problem this is that there's a lot of types of information. a lot of real world entities that can't just or a character. Like there's a lot of things or a number or a character like, like a phone a phone In my program using like a string like a computer, or a keyboard, or an animal real world entities, that it can't necessarily types that we have, or we only have like, use. And those data types really aren't enough the real world. So imagine I was creating work with books, like maybe I was creating program, we needed to represent book like, store books and use books inside of my program. no, like, I can't just come over here and like, there's no book data type for me to know, forget, forget about books for a second like a person or a location, or a musical in the real world that I'd want to represent problem is we only have a limited data types, we can represent. And this is where classes we can actually create a class. And a class create a class, I'm basically creating a new are useful, because we can kind of create program. So like I said, before, you know, like a book data type, right. But what I can what a book data type is. And then I can actually of my program. So I'm going to show you guys that will allow us to store and work with So we're essentially going to be creating I am just going to come up here. And I can And I'm going to create a class and a class for a new data type in our program. So when new data type, I'm creating a new type of in our programs, it's pretty cool. So over class, and then I'm going to give this a name. are going to name them with capital letter. So we're going to create a book class. So or a template for the book data type. Okay, basically specifying what a book is, inside here is I want to actually define the book attributes. So we can basically say that a five different attributes that will describe data types like strings, integers, doubles, attributes. So essentially, this book class which are going to be things like numbers public, and I'm going to make a colon here. I'm actually going to end up this. So it's below where I said public, I want to specify out what a book is going to be and what it's the different attributes of a book? Well, going to be the title. And we can represent title. And I'm just declaring these variables, another walnuts thing? Probably the author, be the book's author. And let's try to think be maybe let's do pages. So like this would sure you can think of a lot more we could company, you know, you could think of, you attributes we could store for a book. But what I'm doing here, as I'm mapping out a for the book, data type. And a book in our and can have a number of pages associated type. Really, it's a it's a class. So this just specifying what a book is. We're telling I'm going to come down here and I'm actually is just a blueprint. This is a template, it's book, if I want to actually, like have a physical I need to create it down here. And we're actually So here's a little terminology lesson, a class it's the template of a data type. So this blueprint of a book inside of our program, or it's an actual instance of that class. to create an object down here, we'll call an actual book that's going to have an actual of pages associated to it. And we can create, but just know that a class is the template, actual instance of that specification. So author, and page. So let's go ahead and do I'm basically just telling c++, what type I want to store. And then I'm going to give book one. So now we have this book inside what we want to do is start giving it some title. And we can actually give this a title. title. So why don't we just say the title be a Harry Potter book. And I can do the same say book, one dot author, and I can just give going to give this a number of pages. So I going to be an integer. So let's say it has to represent, and I'm able to work with a up here is a class. It's a template for what a physical book in our program that has actual book, with the JK Rowling author and 500 pages. actually print out this information. So I book one dot title. And so now I'm able to book, one object. So I'm basically able to this program, now, you'll see we're printing Potter, I can do the same thing for like pages. in book one, which is going to be 500. So model a real world entity like a book inside have a book data type, right, I had nothing Now all of a sudden, I have one. So I can And we can make as many of these as we wanted. let's make another book. So let's say in addition make another one. And I'm just going to call of these. So now all of these are sets of attributes. Instead of it being a Harry Potter book, and the author is going to be token. So now I have two books in my program, I have all of these attributes associated to it, to it. But both of these books are using this same book class, this is just a specification to create individual instances of that specification. book objects. So I could also print out stuff Two dot author, and this is going to print just like before, when we have like integers, Now, in addition to those data types, we also can use a book, I can store it, I can, you that. And, you know, down here, basically, giving it value. So I can say like, book one said book to title down here, I could change or something. And now, Book Two title is going variables would work. And you can see now cool. And honestly, this is just a, an introduction to learn about, there's a lot more to talk you want to do is just play around with modeling book. So I created a book data type, but you create a like a keyboard data type, you can just taking a real world entity, breaking author, and pages, and then you can represent going to teach you guys how to use constructors is a basically a special function that is object of a class. So let me show you guys, actually up here, I have this class, it's the course, we created this class in the last just sort of a blueprint or a specification So you know, a book has a title, has an author we actually created some book objects. And So we have book one, and book one has a title. pages, and all that stuff. So I'm going to play. So a constructor, like I said, it's get called whenever we create one of these to go ahead and create a constructor. And is just by essentially creating a function And I'm gonna make an open and close parentheses what we have here is a constructor. So this to get called whenever we create a book object. going to print something out. And I'll just to print a new line. So down here, I'm creating creating Book Two, whenever I create a new function up here is going to get called. So here, it says, creating object twice. So it made this line of code. And then down here, when we created this second object. So we function got called twice. Hopefully that this book function is that it can accept parameters. this is going to accept a parameter like name. whatever the user passed it. And so now down pass values in so I could pass in like Harry we could pass in like, Lord of the Rings. when I run my program, it's going to actually of printing out like, creating object, it's the constructor. Pretty cool, right? And constructors we create objects. So let me point something to get rid of this stuff up here. So only these objects, right. And when I wanted to so when I created book one, and Book Two, going to be, what the author was going to it kind of took up a lot of time, right, it out book one dot title, book, one dot author. that I create. Well, that gets really, really two objects, I wanted to create like 100 or lines of code, I mean, just to create one We can actually use these constructors in So like when I create this book, one instead author and the pages. Instead, I could just the constructor could initialize the values do that up here. In our constructor, I'm going to take three values. So this book constructor we're just going to call this a title, it's call it a author. And it's going to take an And I'm putting this a here, you don't have of easy for us to see what's going on, a is will be like the title, that's an argument. can actually assign the values of title, author So down here, we're assigning the values of But instead of having to do it down here, So I could say that the title is going to title of the object, the title that we want to be equal to the title that gets passed So I could say, author is going to be equal to A pages. And again, you don't have to name whatever you want. I'm just kind of doing going on. So down here, what I can do now it a title and author and a number of pages. you'll see we're getting an error, we're basically these values. So what I can do is I can actually I can take the number of pages, so 500, and I can just get rid of all this code, because same thing for the Lord of the Rings book. pages. And so now we can get rid of all this of code to create two objects. So now we just my program, we should be able to essentially So let's go ahead and print out this stuff. just going to see out while we see our book, So we should get Harry Potter, which we do. except we're able to do it a lot easier and So this was a very, very powerful tool for we can still modify these. So I could still the title. So I can change the title to whatever doing with this constructor here is we're just making it easier for us to initialize sort of the basics of using constructors. do, you can actually create multiple constructors. essentially just allow us to take in a title say that for some books, we wouldn't want make another constructor over here. And this parameters. And I can just give these values say like title is equal to no title. Author like pages is equal to zero. So this is basically information if we don't pass anything it and here and I can create another book. So I can And I now I don't have to pass in this information. print out like Book Three dot title, and it's this needs to be capital whoops. So now you will create multiple constructors, you're they can create your objects. But I'd say where you pass in all of the attributes, and that's the basics of constructors. Hopefully so you're definitely going to want to use I'm going to talk to you guys about object refer to these sometimes as like instance it's a function that we can put inside of objects of that class can use that function about themselves, or modify information about a sort of introduction into how to do this. up a class. And this class is called student. like what a student is going to be in our is going to have a name, a student is going to have a GPA. So that information is sort And then down here, I created a constructor, these objects owner to pass in some initial of major and then also the GPA. So I'm essentially would any other constructor. So this is our method, you'll see that I actually have a student one, his name is Jim, he's a business another student student two, her name is Pam. So these are now two students that I'm working of my programs. That's awesome. So let me object functions. Let's say that we wanted these students was on the honor roll. Right. students attend, there's an honor roll, right, the honor roll as you need to have a GPA of or greater, that means that you're on the have an easy way to figure out whether or Well, what I could do is I could actually which each of the objects can use to tell what I'm going to do is I'm going to go down just create a function like I normally would, going to give this a Boolean return type. and this function is basically going to return if the student has honors right? No return If they don't, it's going to return false. in any information, we don't need any parameters, bracket. Now down here inside of this function, So I can just use an if statement, I'm just say if GPA is greater than 3.5. Or actually, we're gonna come down here, and we can just that means that they have a GPA of 3.5 or the case, we can just return false. So that's to do. It's very simple if they have a GPA false. Now, what's cool about this function this function, and depending on their specific So for example, let's go ahead and call this C out I just want to print out the answer. So now if I want to figure out whether or I can say student one dot has honors. And not Jim has honors. So you'll see over here, Whenever you print out Boolean values, if as a zero. If it's a true, it's going to get seeing a zero here means that student one thing for Pam. So we can do the same thing to dot has honors. And now this should be is going to have honors. What's cool about to be using different information depending gym object calls it, the GPA is Jim's GPA. GPA. So we can define a general function over that calls it, it's going to be giving or to be different, depending on if Jim's calling of why these are cool so you can make awesome will make these to get information about the or not they have honors, or modify values. at functions which are going to be modifying kind of gives you an idea of what you can cases, you're going to want to have different going to do stuff. Now I do want to just point let's say that I have this program written. students. And maybe I have a program that something. Well, let's say that one day, the Hey, Mike, we're going to change the qualification a 3.5, and greater is going to have honors, and greater is going to have honors, in order In other words, in order for me to update here and change this to 2.0. And now all of And these has honors are still going to work. to be lowered. So I can say student one has because we changed the qualification. So now are powerful, you can kind of adjust different things about the overall class and about every So hopefully that is clear. Hopefully, you different objects functions. In this tutorial, and setters in c++ classes. Now, getters and they allow you to control the access to the inside of your c++ classes. So I'm going to order to do that, we're going to use a little created, it's called movie. And this is basically inside of our program. So I have a few different it's going to have a director, it's also going attributes of a movie, right, we can basically it's going to be, that's what it's going to So I'm just passing in the title, the director, we're assigning those values to the values stuff. And if you've been following along kind of make sense. You know what I'm doing class, movie data type. And down here, I actually it's called Avengers and the title is The rating is pG 13. So um, I'm creating an actual out the rating. So why don't we run our program, So over here, I have pG 13. So it's printing looks good. Now, here's the thing, a lot of like a class up here, like this movie, we're can be stored for a particular movie. And I have this rating as pG 13. Right. And generally of ratings that you can have, so it'd be like rated. So just for our purposes, let's say give to move PG, PG, PG, 13, Rn, nr, right? of. But let's just say that those are the for a movie, those are the ratings that are Well, over here, I'm inserting pG 13. But else. There's nothing stopping me from just nothing that's stopping me from just typing the program and being able to store it inside set the rating equal to dog, even though that's that we can have. And there's a lot of circumstances for example, you know, valid ratings that words, like when you're writing this program, want a movie object to be created. That's want this to be able to happen down here. rating in as dogs. So I'm gonna show you guys how we could make it so that the user can a valid rating. And to do that, we can use the first thing that I'm going to do, after here into my class. So up here in my movie you'll see up here, I have this keyword public. put all this stuff underneath public, what And basically, when something's public, it can access it. So essentially, any code outside of the movie, the director of the rating and print out Avengers dot rating, because rating because it's underneath this little public we can use in c++, which is called private. public, I can just say private, and any attributes, I put underneath this private keyword, is if I was to take this string rating, and I what this means is now only code inside of attribute, only code that's inside the movie down here now and try to print out Avengers that anymore. And you're going to see that this highlights in red basically telling us because it's private, so I no longer have Now one thing I will point out is I have access because the rating variable, the rating attribute so it's able to access it. But this main function the main function can't, because it's not the difference between public and private. order to control what ratings are able to guys how we can do this, the first thing I I'm going to create a public function, and this is going to be void. And I'm just going take as a parameter, it's going to take one So this is going to take a rating as a parameter I'm basically going to say rating is equal a value to the rating, I'm going to make it So over here, instead of saying rating is to say, set rating, and I'm going to pass rating, it's going to go through this set to modify the rating down here, so if I wanted dog, I'm not going to be able to do this again, it over here. But if I want to modify the function, because it's public. So over here, of saying Avengers dot rating, I could say this as a parameter, dog. Alright, so now here in the constructor, or down here in the set rating function. And that's going to be do now is we can set up some rules. So I can function for what ratings are going to be Essentially, what I'll do is I'll create an passed in is one of the valid ratings like it. Otherwise, we'll be able to essentially like, Hey, this is an invalid rating. So down And I'm just gonna say if. And I'm basically one of the valid rating so we can check to is equal to P And I can keep doing this for this over here. And I'm just gonna say, or equal to R. And then there's one more, which So basically, what I'm doing is I'm creating all of these conditions. So it's checking to PG, or if it's equal to pG 13, or R or those, right, if it's equal to one of those set it normally. So I could say like rating entered in a valid rating, so it's going to enter in a valid rating, that means that we're that they entered, so I can say else. And set rating equal to an R. So we'll say that they tried to set an invalid rating, for the go ahead and set it to nr because they didn't to be not rated. So here's the thing. Now to go through this set rating function. So say Avengers, set rating and dog. And then gonna say nr, because they entered in an invalid But here's the other problem is when I can't Access Avengers dot rating, because it's private, another function up here, and this one is a string. And I'm just going to call it get it's just going to return rating, so it'll to print this out, I could say Avengers dot So let's go ahead and see what happens. So dog. That's an invalid rating. So now when just print out nr. And actually looks like equals in there. Let me see if I did that able to run this now. Yeah, so down here, I tried to set the rating u equal to dog, to get it, it's just giving me an R. And that's over here, when I just first created this, that is one of the official ratings that we have that it'll have a rating of pG 13. But that's not a valid rating, right. So when say that it's not rated because we didn't can essentially do whatever you wanted there. is that there's going to be certain times you know how the user can interact with the our case, we wanted to be able to restrict inside of a movie. So I was able to set the could access it directly. They couldn't just or the ratings equal to that. Instead, if through the set rating function. And they here. And that is an awesome way to control individual attributes in a specific object. guys about inheritance in c++. inheritance And then we can define other classes. And or they can inherit all the functionality, So the easiest way for me to explain this So over here in my program, I created a class this class is like modeling like a chef in functions that the chef class can perform. salad and the chef can make a special dish. out like what it's doing. So this one says Chef makes barbecue ribs. Very simple class. an instance of this Chef class, and called make chicken. So let's run the program. And program, you'll see, it prints out the chef class. And let's say that I'm running my program. in addition to representing just a normal Italian chef. So what I'm going to do is I'm another class. So I'm just going to say class. going to create an Italian chef class. So our purposes, when we're creating this Italian able to do everything that the normal chef can also make salad and can also make a special chef will be able to do a bunch of other stuff, to build this Italian chef. Because the Italian that the normal chef could do, like make chicken, actually inherit all of these functions. From I'll show you guys how to do that, it's actually here. And I'm just going to make a colon. this is referring to the class that I want this is this Italian chef is going to have in this chef class. So it's basically going show you if I was to come down here and create chef, we'll just call it Italian chef. I could even though I didn't specify anything up here, even though I didn't specify a make chicken function up here, I'm still able to call make this program, now, you'll see it says the function on the normal chef and the Italian Italian chef down here is inheriting all of of demonstrate this even further, if I came yummy chicken. Now when I run my program, also going to be able to make yummy chicken. from the chef class. And what's cool about all that in functionality, but we could extend to be able to do everything the chef does. Italian chef could also like make pasta. And like the chef makes pasta. So in addition normal chef can make, this Italian chef can say make pasta. But it's important to note if I tried to call pop make pasta on the normal So you'll see over here, it's not going to it looks like I had an error up here. So this get an error down by the other chef. Yeah, basically saying this, this chef can't make now that you'll see the Italian chef is gonna chicken. And actually one more thing I forgot, to do that. So I'm gonna say public. And then function is going to be public. So now we see it says the chef makes yummy chicken and are able to do different things. And that's do with inheritance is I can actually override the normal chef has this make special dish ribs as a special dish. But let's say that special dish. Well, I can do something called this function from up here. And I can paste now this is going to override the function ribs we could have him make like chicken parm. chicken parm while the normal chef will make I said make special dish on the normal chef Italian chef. Now these are going to be two overrode that original function. So chef makes So that's kind of how overriding can be useful. want to change, like what it's doing, or modify do that. Now, just a quick terminology. So And then we would call this Italian chef class from the chef class, which is the superclass is you're essentially creating a class and another class inside of it. And then you can add on to it, or you can override the functions If you enjoyed the video, please leave a like