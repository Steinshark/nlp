Hi, I'm back and I got a question for you. What do I and React 19 have in common? Well, we both took an unplanned pretty long break. So yeah, I'm sorry about my break, did not plan it to be that long. I was running out of topics but mostly also out of time. But now I'm back. But what about React 19? I mean, we got a release candidate back in April and the plan back then from all the communications you got from the React team and so on was to release React 19 stable soon after that release candidate. In fact, I worked pretty hard then, April and May, to update my book React Key Concepts for all those new features. I started working on that second edition together with my publisher Pact. We really pulled off an immense sprint to produce a great second edition which has all the great things from the first edition and all these new features and now it's sitting there waiting to be released, waiting for React 19 to become stable. Because there's one feature, one change brought upon us by React 19 which is responsible for that release delay and which would also have an impact on this second edition, which is why we're holding it back so that we got everything right in that second edition. And that one feature, that one breaking change is not one of the main features that were introduced with React 19. It's not related to the React compiler, though technically that's not a part of React 19, but it's not part of that. It's not part of the new hooks or anything like that. No, it is a feature related to suspense or it's a change related to suspense. And Dominik, the maintainer, the main maintainer of the 10-stack React query package, actually wrote a great blog post about that where he explains in detail what happened and what this change is about. In a nutshell, the problem is that if you have multiple components that fetch data, that send an HTTP request, let's say, or that use React query to fetch data and send a request, whatever, if you have multiple components that do that and you use these components as siblings so that these requests should be sent simultaneously in parallel, previously, prior to React 19, you could wrap all these sibling components with suspense and suspend and show a fallback until they're done so that you would fetch data in parallel and then show and render them once everything's done. And that was a great way of using suspense. Now, the problem is that in 2023 already, the React team landed a change back then for the canary version of React, which were to become React 19 in the future, that would change this behavior so that sibling components wrapped by one suspense block would no longer fetch in parallel, but instead as a waterfall. So the second sibling would only start fetching once the first sibling, the first component was done. And that's, of course, less efficient. Now, the React team had their reasons for changing this. The problem just is that back then it didn't really occur as a problem because it wasn't that canary release, which is mostly used by Next.js and by other frameworks maybe. So it didn't really pop up as a problem back then. Now, with React 19 release candidate, it now did because now more libraries and more people started using this feature and started stumbling across this problem. Now, the problem is, however, that since this initial change was introduced in early 2023, the React team actually added lots of features and behaviors and simply code on top of that changed behavior. So reverting the behavior was not straightforward and simple, which is why initially the React team actually pushed back when criticism about this change came up related to the React 19 release. But then once there was basically enough pushback, they basically gave in, you could say, which is a good thing. So this should not be something that's taken as a negative point. Instead, it's good that they gave in and kind of reconsidered the change. And that's now why we have this React 19 delay, because it's this one change, which is the foundation of many other changes. And now this one change must be reverted without breaking all the other changes, which is a super tricky task, of course. Now, you can dig into various pull requests and issues on GitHub in the React repository to kind of see where things are going. And you'll see that there is some activity there, but it's hard to tell from the outside when exactly React 19 stable will be released. It looks like the React team is getting closer. If you watch some of these discussions, there have been some pull requests being merged related to this issue. There has been a bit more activity a couple of weeks ago. So maybe we're getting close to a stable release of React 19, but it's hard to tell from the outside. It's hard to tell how many other changes are related to this one breaking change, how much code must be changed. And of course, how many applications must be tested, how many use cases must be tested to ensure that reverting this one change and the related code doesn't break a bunch of other applications, libraries and frameworks and use cases. So it's complex. It's complicated. It's a annoying situation, most of all for the React team, because they have to kind of find a solution for this problem. But that is why we're still waiting for that stable version, even though the release candidate came out half a year ago. But hopefully soon we'll have that stable version, we'll have that old behavior again, where siblings do fetch data in parallel and are shown together when wrapped by suspense. But ultimately, we'll simply have to wait to find out where things will go and when that final version will come out. But I'm also hoping that it will be the case soon because I really also want to release that amazing second edition of my book I wrote. By the way, you can preorder it if you want to, and you will get it as soon as, well, hopefully React 19 stable is out.