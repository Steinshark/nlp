If you open up a game's files, you'll some kind of custom archive format. Jet Set published by EA Sports BIG, has its .big But why? Why do games from this era so instead of just dropping individual files or using one standard archive format? I've for BLiNX 2's archive format, the IPK, as well as and I think I have a decent idea now. I'll go over they might solve them, and finally, as an example, So, let's get started. Let's put ourselves in the shoes of a developer that need to be read into memory: for a sounds, and so on. Reading this data is pretty discrete sections (like levels), loading screens where you can get it all out loading times can pile up, and the next thing you So you want to reduce load times in your game. and performance is the one thing you we're going to have to understand a little game is loading in our assets in order Let's start with physically Our game is on a disc; we'll assume a and there's a laser-based sensor that can that's underneath it. The sensor can move and it can also adjust its focus to switch between the sensor has to move to the right and wait for the right part of the DVD to spin all of the things I just described are SLOW. you want to load, it can easiy take tens So, how can we speed this up? We need to start which Microsoft provided the Xbox Game Disk is to put all the data on the outermost part the laser the fastest. We can give priority the most time. Much more difficult, but everything to reduce how much seeking is needed: how often it has to refocus to a different layer, data to spin underneath it. If we know ahead of data all belongs to a single level, for instance they're even all in a sequence in the same order then the sensor is immediately over the beginning In a game with thousands of files, though, that you'll probaby have some assets and you can't have one file adjacent in different parts of the game, so That's all we'll look at for up one layer of abstraction, to the filesystem. When you give the Xbox a filepath on the DVD, located on the disk? It has to read this from the their locations somewhere on the DVD. To get the to that list, and then it has to find the entry you have in a directory, the bigger the list take to find your file. Consequently, you want Does that mean you should have lots of small unfortunately, because subdirectories also so you don't want lots of those in a directory, really deeply so that each one only has a into a new issue. When the Xbox has to read it know where that listing is on the DVD? It has which it finds by reading that directory's parent, of the filesystem. So if you want to read a you have to read the root directory's listing, to read that one, then the second, and directory that points you to the actual file. read a single file! Deeply nested directories So if you can't put lots of files in one what can you do? You'll just have to this will also mean fewer files to juggle when Also, this might sound kind of trite, but similar DVD is reducing the size of each file to read. when it comes to read times, but once you start is smaller. Smaller files also have the added meaning more room is left for other files on those So far, much of what I've mentioned but is applicable any disc-based system from unique asset, though: a hard drive. This but also for games themselves to use. When a game officially called the utility partition. While frequently use it for caching that most people Not only can you copy files off the DVD onto the the Xbox also has three of these utility boots up, if it's one of the last three games its utility partition from last time, meaning So, then, how do we tackle all Keep frequently-used files near the outside of grouped together on the DVD, minimize the number To help us, we have a utility partition store data for faster retrieval. Let's BLiNX 2 does what a lot of games do: it of files to be combined into one. and related assets can be grouped together in the it's not too hard to decide how to lay out the we'll have to run some code to extract the we also might as well compress most files in read from the DVD. Decompression will add up saving time overall in any case. If you you can even write the extracted files to the Stacking this strategy up against the why so many games use it. As a bonus, though, because it has a counterintuitive way of one that not many games had See, it's still difficult to decide how to is that some files are used in multiple them close to all the other groups of assets unless you just put those files in multiple and your read times would suffer as you push data Well, something funny happened with the Xbox. An Compared to many games at the time, this was of consoles didn't even have to switch to fit comfortably in a couple of gigabytes. With compression, they had a whole lot of room to work some pretty egregious things, like storing all unused ones!), storing nearly all the text in for every locale, in every release!), and... format duplicates a bunch of files to group duplicates files, we need to buckle down BLiNX 2's archive format, the It starts with a header: that is, a fixed-length number of files in the archive, and size of the the beginning of a file to identify a file's type is a particular number - every file in the archive number. For archives that aren't nested inside which is the size of a sector on the DVD, so the of a sector to minimize the number of sectors to though, this value is set to zero and since the data is already &quot;out of phase&quot; with the After the fixed-length header is the file table, in the archive. These are a path up to 63 bytes in if the file is compressed and 0 otherwise, the offset the file starts at in the IPK, and these paths are all absolute, since the Xbox can't use relative paths as a result. This is the longer your filepaths get with deeper those filepaths in! 63 bytes might not be enough. to check if a file has already been extracted a big enough buffer to read the file into, and read the appropriate number of bytes from For top-level IPK archives, that is the fixed-length header and file table where the &quot;h&quot; presumably stands for &quot;header.&quot; The real magic is in nesting IPK files. Look other IPK archives, like these ones containing some sound effects are used in multiple places, that se_enemykf.bin in particular is the in multiple levels, for which reason we IPKs. This means that instead of chasing disk to load sound data for a given level, effect IPK to get all the data at once. It's I did mention that files in an IPK archive can most of my time figuring all this stuff out, but Okumura's public domain LZSS compression code, quite easy to implement LZSS yourself, but the exact same compressed files byte-for-byte. scheme, my guess is a mix of convenience of and LZSS being pretty fast to decompress, which how Okumura's binary tree implementation On the other hand, if you'd like to see a C code from '89 is terse, to say the least), you and repacker, compression included. I'm not the am the only one to guarantee bytewise-identical which I think I can take some pride in. The want to take a look or try it out - precompiled As for what you could do with this thing, but if there was anything else in an IPK archive In the end, there really isn't that much to IPK is why they're designed the way they are, at Reverse engineering isn't just about staring learning as much as you can about how something your findings. To be honest, I really like and I hope that how games used to be made can be Thanks for watching, and until next time.