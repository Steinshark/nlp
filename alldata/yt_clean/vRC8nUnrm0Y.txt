Hi everyone. My name is Patrick Akil how software engineering is evolving, Joining me today is Borislav Nikolov. Previously principal engineer over at REKKI. He's solved many complex, And I love picking his brain. What makes a software engineer Especially how this role is evolving. So enjoy! Beyond Coding. I've been in teams where people, certain Like for example, delivering value to customers and other ones, And then all of a sudden, more technical problems that we have And there's like this disconnect they want functional requirements for users that drive value. And then the people that love solving technical problems But not every technical problems It really depends And I feel like not everyone has the scale So then there's this Yeah. Yeah. And that's a hard one. Yeah. I, I think, one thing you can always do is just go and see what people do, go to conferences and just get out there Another one is to just work If you, another way to fake it, just try to, make, a good program on, just a Commodore 64 or 64 or, like just Z80 or like some something and, super slow disk Okay. Constraints. Basically. Yeah. If you say I only have or like, try to do something, So this has to be done. Lines. That's why it was sometimes, or just look at each word, each how can I write this in the I don't think there's like But for you as a individual, what is the what are we going to be like If you just read this like ten lines and then you can just kind of thing. And it's the because in enterprise. Everything is connected to Nobody knows, let's say, let's say, designers and you can't delete anything Yeah. And so how do you just keep piling piling one pile, right. But you can just even in that situation, a pile of like, disappointment. You still can find, like, islands. That you're still can express yourself. I see what you mean is. So just don't don't be like, Oh, shit. And I have to do it. You can still, like, try And nobody is going to value it because But, but it's going to bring value to So I think that's people should do that more. I think I like that a lot. Like it's experimenting with things that brings you joy. Yeah, right. It's nothing bad is going to happen. Maybe somebody on the code Exactly. It's okay. Yeah it's okay. Yeah. I mean it's hard because I've seen people they write. Right. And it's specifically when you figure out and that it works when it comes to a code Yeah, that's I think they have to realize It never is. It's not it's not personal. Look, I'm very unfortunate that a lot of the code, I just wish it wasn't. I think clearly, yeah, I think I had a good call. But the, I'm the happiest when I delete my code. Okay. And. So happy. Oh, if somebody else comes in, it's I'm like, that's amazing that I can learn Yeah. And, always when you write something, I mean, the desire to table is the most important thing for, Okay. If you can make go the literal easily like, a few tentacles, it's possible. It's easier for the company to grow. And, so that's why, like, I'm really happy Because then you don't have to go for it. But once code is written, it's done. You know, if you've looked at a code Yeah. And if you don't find that, like, then you just haven't grown. So you should be like really happy so that you buy you with somebody else Interesting. I've never heard this approach of writing code But I do like like I've the most experience I have is And there and also with the whereas I think I would be able to delete Go is particularly I think go is I mean there's a language is quite Would say I love it. I, I mainly, well, which is you don't think you just code gets written back if there's no cognitive load Yeah. When you write like, I don't know, at least it's like, There is a thing called the thought. People say, design at the keyboard. Okay. So which means that as you're typing And that's what happens You don't actually think about. You can just write it out. Yeah. Well, in a lot of other, languages, program, you can't, it's impossible for Okay. You have to make it on paper and just see with components At least be similar as well. So anything that's designed as a keyboard, So that's the point of goal. You can just write the thing Because if it's simple to write, So I think it's okay. Just not very expressive. But it's a really productive language. You think it's good for like, longevity that I use. If it is simple to write, it's It can be maintained for a longer time. I don't, I don't know. You know, the whole bunch of general people, So if you look at the code, you can write Yeah. You can write go in kind of like a C way. But you can't go, oh, like, it's quite a centrist So for the longevity. And what helps a lot with because of the way, you can pass it and the way exceptions do not bubble is Yeah. So actually, I think that's a tool can reason through the the tree and be able to find for example etc.. Yes, that is much, much harder let's say use like Lombok its invisible code team and then you don't actually know what's happening That's just not the case in go. So I think that's actually what helps with It's just the well, particular It's also just writing goes a great and delete because they don't, transform. They are Oh, that's that's that's good. But they, they're shallow They can approximate shallow circuits But so therefore something is like bubble up all the way down from the stack, at the moment. Right. That's what it know. So we can go. That's not the case. So they can. It's just very linear, Yeah. Yeah. It's Of course you can. People try the assumption you see that I just want to do an exception on a catch. I catch it all And but that doesn't pass because it's not So I can go if you people I mean they are of course but then you have more but not oh. Let me just add Let me know without a point. Yeah, exactly. Which is not the case Yeah. So that's what I think. That's what makes it maintainable, because you don't have extra layers Yeah. And what's using the thing that is bridge. So therefore it's really easy If you I think it's really easy to Yeah. Because just you just read it. You don't have to guess. What is actually going to happen Yeah. So just to reiterate, which is Exactly. When it comes to like languages, For me the most comfortable one is go. And it's just my first, let's say, I've since done learn. I've done a bit of C-sharp, but go I feel most effective in executing, I would say, of But I'm curious to hear what you think engineer developer? well, first of all, I think the roundness is How do computers work? What is others? What is actually a lot of it And how does it actually work? Electrically? What is the matter? I think, for example, because besides the ones that we've discovered or the manmade languages, like abstractions Okay. So even though we built all these, like, how cache lines work and what does it mean SRM and, it's not just a made up. It's not just like, we try to hide it, is, I think, of course, if you're like, how does IP over IP work and why do we Yeah. Like violence and IP over IP and sets. And how does, project management, to understand, now, data science. I won't even code this and just understand Let's I think this this is what actually because there is no like the code itself And, not, understanding not being empathetic with your customer. Not being, like, It just does everything you just want. There is no, I don't split developers in, back end and front end makes no sense. Okay. For me. Okay, you can either you either write the program or not, The. Why does that split? Not make sense? Like, are you fan of the full stack roles I just think, the code is code. Okay. You can. It is the complexity. I think phones is much more complicated Depends on the bike. And, of course, if you do like I think people misunderstand write a bit on this come, to the end to have guarantees on that and then on the front end So the, the way you think It doesn't really matter if you can get On this. Yeah. But the, the, the concept of, like order of things, systems and, even even, and the guarantees and what can fail Do you think these abstraction layers. And I'm specifically thinking of what we've done now on the front end, Yeah, I think so. Frameworks. And then we have cloud providers on specifically those frameworks. And you have so many flavors honestly when react when to hooks. Like that was we have to go back now. Yeah, I think so. I like I like it from a usage perspective. But then it's, I mean, like few days ago this like use effect. It's like, Oh yeah. And I was like, I know, you know, as I did when I met with reality, how did you end? I was like, how did you end up here? And then just a typical, the, the size of everything, the, I think it's incredibly complicated. And and the disadvantages is to excel Like, we still cannot totally do front end validation. I think. I think the whole tangent is just wrong. Okay. I mean, I don't know how many times I mean, there's like just a form this is this, if this is wrong, that is wrong considerations. And it's a now. But what if the user, the user, exists. So now you have to like okay, And then you do this different like a thousand ways to, because it's actually what you want to do from the database. Yeah. And it into the, the face of the user. Exactly. And. We are still doing it like we are doing it in 96. Okay. It's really nothing changed. And nothing changed. Really? I think so, yeah. I think there, there are literally no changes. And we just like going in circles. So does it have to change? Because the fact that it hasn't changed But then again, if that's kind of fulfills then maybe it doesn't need to change. Let me give you an example. You know, that like, I want the best ideas 60 years, maybe is the Unix pipe. Okay. So the Unix pipe is, no program knows and no programmer knows Okay. When you write something, duck or the okay, you don't know. We don't know what is going to do, how And in everything else we wrote in the front they a whole team has to know how a user and there is no such thing as, that a usable code Okay. You you have to like, if you want to do the same thing, it's not a thing that the user can use Yeah. No, I mean, it works in the same ecosystem, your team basically has to decide but they are JavaScript program this code is going to be used. And that's why I think, oh, if you cannot like stuck of okay, that's the best Okay. But I think that's, that's I feel interesting, for example, now we are with a new, new like not only voice, but, imagine to to graphical program started to let's just abandon the websites. And so just give two programs like, Photoshop and flag. Okay. So we have Photoshop Well, basically and right there is How do you do that? If we had something like, graphical Unix We impose structure. Absolutely everywhere. And that's actually what the Unix We just don't let don't impose the program on the user or on the other. So now I think with language models and after using those, we can do communication between logos, between. So that's why I think the whole forums and events and like blah blah blah, But I think that's as good is going to be. So, you know, which is very isolated like the example of slack I don't think there is much need because So there's no reason to coalesce. No. But for you as a user. Me? Yeah. Yeah. But that's what we mean. So now in those two organizations, and they have to create And then I have to say, How are we going to communicate. Yeah. And you as the user, what this was the possibilities, Well, where you actually have infinite possibilities It could be a game that you wanted to interact Yeah. Now, no, that's not either. You have to, like, just take the screen But we should come up with, like, interfaces so that the programs Yeah. Right now I, I didn't even think of that it works in isolation. It doesn't cross the boundaries to other either physical things But it's also because I like everything is driven at the end by money, right? There's no reason for adding that to user experience, for things If there's no financial incentive Yeah, that's true. Well, but the thing is, even even, like Yeah. Just think about how hard it is to interact with things in around it. You're like, you have to get like plug ins And the other thing And and that's like, that's shame. I think that's like, if you, if you use some, you know, Acme, Acme. I just, it's a very old, it's like a mouse in this yellow rope, Yeah. But it's you basically have your text editor You can just execute with the mouse. Basically, you can select a bunch of text great book, something But the idea is from the editor. You interface And that Unix pipes. Actually, Yeah. But, if you use visual code or something, even between visual between the text, the code and the, the terminal below it, it's not trivial And that's why I think it's the same if you have like, if you want to imagine but in same time you want to actually see if the, if the same hotel website doesn't both of those things on the same page, and that you see what I mean? That's like, you just that is good is going It's not going to solve this particular Yeah. Interesting. Like for me, because I grew up with technology had a stage where My first production experience I've never done software on bare metal. I've been responsible but when I was moving to software engineering, that's when I started with front end, I started with react And these are But then later on HTML templates and vanilla JavaScript. And I'm like, man, It works like a charm. We had a lot of AB testing Like, I don't know which abstraction because I do feel like some stuff But it's also because I don't know Arm. Like, I ideally, I that can run my program rendering engine, plus all these other things. If. So I react. Was much better than what we had Which, like, if many people Yeah, it was just much, much harder I think, it had, like, backbone and, I forgot the other stuff And so in that sense, to have this abstraction of, well, going back to PHP code and, code and data in the same place, Yeah. They're actually right. A big problem was that because it was so you have like a thousand ways to do state the community conflict for a lot. And then that led to, okay, try to find the common way But please, I think but. It started like first of all the, the, the idea was well in the Dom is So it's slow. So we have to and the only, Yeah. If you look and that was the case before And. Also a lot of the, you can do a lot with the browsers on just possibilities. Yeah. You don't need a lot of the thing So if you do the abstraction Can I write faster code or better code? I think you can do better with the browser, Can you have a lot of people working on Okay. The the mirage of, like, let's reuse You have people start parameterizing it Yeah, absolutely. Have you seen it work? And like, actually there's a button. Yeah. To a certain degree. I've never seen it. No. Well no. No. What is then. What is any work I o first of all It's really because somebody comes and they're like okay Press the button. Yeah. Parameterize. And then they keep like this in some context I want to be like this And because they can't change the patterns And so they keep it keeps piling. And then it becomes this like monster. But is it Because the design system. Right. That's when I would push back and be like, You don't need a million variance Yeah. But, AB testing does not allow you to do that It brings more money. Okay. So you cannot push back on it. You have to be you have to have which has to be able to say no to money. And then like, even with a few variants So then we use that one. Or do we want to continue continuously No, because you don't know if it works Well. We have it in context. Like let me just look at I have this x on the, in exhibitors logo. Yeah. And then in Right. That doesn't mean in, in all context Really. Okay. Yeah. Let me go so that that becomes like it's difficult thing to actually say no Right. Because you don't know actually. But if, if that's the experimentation it, let's say either in, in a phrase not clash with each other? But they do. Well, that's why I have like So some team has the logo to be, Somebody else has it, And then of course between is always like white on white And, you do. So you have statistics Okay. Yeah. But even when like on a button level, also the components around it, I yeah, absolutely. No no, no I don't it's fine. People do it. This, it's not wasted, obviously, but I think people's time Making better pixel. Yeah. If there. I mean, if that's the level of degree, I agree that your list of variables is going to make that super specific. And it's not easy to plug It's not that's but the thing is you have the simple like well sometimes I want the top in the head, the, in the categories And then it doesn't fit So it just keeps the, the list. But especially I think it's really hard And the other ones you don't use because so it's like the only visibility matters for things Like weird things that you only use once. It doesn't matter. But I always have this discussion and especially back It's like, And, of the mantra of, if we have another copy, Well, that's the rule of K. You have to have k like you have to Yeah. For me it's like usually three. Yeah. So and that's okay Let's do it. Let's let's see what happens I think I think that's the right approach. Yeah. This This like pertaining to see the future You don't even know what you're writing. You don't even know You don't even know what it is, is the whole team, they have to like clash they just like not like it and then you talk to users and then well that's not actually Yeah. So you don't actually know Something that you do. It just makes no sense I agree for me. Then what makes someone really good in a team is this flexibility But I do agree that the more you love like what you're doing, At least that's So then what they want to create, they do want elegance, for example, And they do want reusability, even though it might not matter And that's a hard conversation I mean, it is hard because it's like it's just, Yeah. So it's like, telling a vegan person that meat is good. Exactly. Yeah, it's the same with, but it's the same if you challenge You get into a territory of. It's really hard. So, a lot of people, by the way, tiebreaker is like, let's just Right. That's what I try. It's one of my things out of my pocket. Yeah. There's also a way out. I don't, I think it's. I mean. I've been in this situation a lot of times, and sometimes you have to. It depends on your personality. Right? You have like, let's just see. It's That's what they want to do. Yeah. And you have to if you can't They like to agree to disagree. You do this getting commit. Think. But in the end, you're And it's much better for somebody Then for them to do something Yeah. Sometimes you also have to say we just. Then you just have a time Actually, in two hours, other than, like, oh, yeah, solution. Or we can all say like, look, let's write it like this. And then we will absolutely put time And then you defer. Yeah. There is no that is. There is no good solution to that There isn't nobody. And none of us knows it. Even if this actually is going to be used. So you can actually agree on if this is Next time we use it, But in the same time you also have to push back on unnecessary abstraction. Exactly. So you can't it it's so natural to obstruct. But the reality is like with, with, electricity of the if like, you can't, you just can't, everything leaks. Everything you think leaks a lot. And in people, But the truth is that even, I mean, even things like, let me see what you What IP okay, the internet protocol itself leaks in TCP, particularly the way it, It leaks so much into the way Okay, you might be like, But they are, in the even it leaks through the libraries because they're things like, So you know, you think it's open There are things like, So that's why, like, heartbeats what's about, so, duplex and etc.. So can you, you send the thing even you try to run away from it, Yeah. It's just like, what about when you have like multiple networks. Can you connect two to multiple parts So you have to. You have to push back you have to be like, You can pretend there's like a disability. You can pretend that So when it comes to then let's say these conversations are helping But do you take into account this, that you have kind of a similar mindset of and what do we have, like Yeah. Or where do we align. So I think, the most important thing for me to have like a shared sense of what We can ensure that there are people ethical, that siloed. They just like they do they want to go to a company because it's Yeah. So I just really try to stay away Purely because what you want in the problem you have, and technology It doesn't matter at all. Yeah. So. The abstraction thing as well, it's a similar problem understand when to do it and when not it. So, I definitely think when people are too far away. It's like the vegan meat thing. Yeah. Sometimes it's not going to be solved, super convinced of something. So that's also important to just on the interview is to understand, can they change your mind Yeah. And so if they go in the conversation like it's immovable, so you're just either It's just not like that. Yeah. So if you have a person have a person that is interested in the But if you. Because they can be, it's okay you're not always right. Yeah. Yeah. Yeah. So it's even better helps you right. To teaches you and, ideally, this, this language. So that that kind of stuck with me so I told you, I'm I also love problem solving. So then the the match, interesting problems most productive with because I have a hard time starting things, let's say, learning a new language or getting to a level That for me is like, doesn't feel nice. It doesn't feel like I want to do that. Even though it might be beneficial Yeah, I see what you mean. First of all, now it's very different and it's just like learning a new Yeah, it's Like it might accelerate my learning, I don't know what I don't know. Yeah, yeah, First of all, depends on languages. Like, for example, if you learn a new, Haskell, I think it's great to do just for, like, you know, link some languages have, like, just eat cow grass and go grass seed, if you learn all the languages that they're like, and they're about I doesn't I don't think like it helps you, you know, but I think it's very, It's much harder. Right? Like learning Japanese, you know, but I think it's it's It's like the same thing. So you shouldn't Because it just, it would, About anything. So that. It's not the same as. Oh, I have to learn. Okay. No. Java. I'm going to shut up now. Okay. Well, well, there is, you might be very prolific in Java. You know, nothing about C-sharp is fine. You can go. You'll be just as productive in almost It's going to take like a month, I like, overestimate how, No. For all of. It's okay. Yeah. Well, the idiosyncratic things that they do, Exactly. That is kind of weird. And that also, it's not actually Because a company has certain culture, like, for example, a book, booking was a parachute shop Yeah. And, You can write whatever you want. Like in whatever way you want. So when somebody comes they're just going to like joke. When I said the person comes It's like this is a problem. It is. Yeah. But he's also part of the company culture What's the thing? He's the way to do it. Yeah. So it has nothing to do with Perl. It's. Yeah, it's how the company uses it. And so it's the same when you So we can go in a certain way or That's what So that's why they made like the condescending. But but but yeah. So that's a it's very, very effective. Actually, Okay. When I joined them, I was like, No we can't. No. It's to well, having weird in functional language Yeah. As an issue is Everything's code, everything's good. And then we're like, Just like I said, like, It was like two months or one month And all of a sudden, because it's like because it was almost like a gate. Only certain people contract. Elixir. Well, literally nobody was letting go And they said they were just going to go. And in a week everyone was just writing Yeah that's fine. Yeah. That's the point of it's great. And then we just rewrote everything. No, all the developer became Fullstack And it was just done. So they also became comfortable enough to. Yeah, do the backend. Yeah, yeah. And then the other way it was just like to React Native and to, and to go, okay. So yeah, I think that that's, it's And this, I don't think you can do that No, I don't think it's possible to, Exactly. Yeah. Do you think Fullstack nowadays, like, Then I can see it, but with other languages and because of how open and flexible And you have to get used it becomes harder and harder, And then you also have layers simpler Some stuff that runs on the cloud, then it becomes a harder and full stack is now also evolving, So it's it's becoming a lot, a lot, right? Yeah. I think. Like, look, especially with let's, let's I it's true that to what does it mean to be full stack means you have to know There's just so many things in the I think most of them are for loops Yeah. But. It's becoming impossible on top of all these things that are just, constantly changing is difficult. I still think that, most like. You have to start, like, You have to be like, what is actually. Because now, now let's say with, you go to a new company and then they use And the real thing is like, do you actually know, V8 or not? Yeah. Do you know JavaScript? Do you know what is fast and what is slow? Do you know the event And then after that, using language between all these things and you can even like basically once Yeah. For this particular stuff, because just the average of all or everything is seen like, So I think you should, I think you should really stop looking at just frameworks technologies, okay. And, and really, for me particularly Oh, really? Yeah. Just playing with it and making things and, Just making things like products or. What do you mean? Just make neural network Whatever it does, just try, just play with it. Because I think. So if you think of AI is just like, But I think of it more as, So it's like to learn That's what the transform of this is, Self programable differentiable computer. So how you have to learn a new kind of languages Yeah. I'm not, I'm talking about. You know, the compiler that can compile compile weights, for the transformer So this is what I mean to actually program is just a new kind of thing. And if you want. Yeah, it's a new, completely new language, a new first new paradigm. So if you want to be a full stack is to learn how to make these machines You might just like a new kind of computer do, just didn't exist. It's and the old stuff now you can use language to transform it because all the, So and you can use language models between all those things. Yeah. But the, the basically now is AI interesting. So the rest I think is like the is like completely ironic instead. So I think the modern at least the, is the full stack up is, is you have to be very, very constructive which, I know, or just the modes of them, Interesting. How are they gonna. So I'm always wondering, I think it was late last year, and now A lot of things have happened Right? I talked to people and they're like, well, It was really bad at programing, I'm like, when, And they tell me many, many months ago, Because these things evolve I've also told but I always kind of idolize people and do something with it. And for me, I think this technology Because people say always all I feel like this is going to stick more five and other things and that were more of the hype, I feel like this one will stick. There is hype around it No, no, no. And people are also getting And use this perspective. But I do see value in some aspects. I just don't know where it will stick. I feel like Yet there's dangerous and because of like knowledge gaps. Yeah, but I really wonder where because that's where I want to be as well. I feel that, yeah. Yeah, I think. Now, where I am, I'm Yeah. So I am not even thinking about it I mean, when you're on the steep it seems like there's just no tomorrow, So you you have like we are in this stage, And it's like everything's just crazy. And anxiety and etc.. So just looking at it from purely, like childish point of view, and trying to understand it because I just Yeah. There's like, I don't know who said this example, So when in the 1900s, their, candles, not candles, with, oil. Yeah. And then when they started cooking oil, and that it's, replaced the whaling just disappear. But people basically just burning it, that's until we actually, The only thing we did with oil was burn So I think now we're just burning tokens, We still have not made engine with this technology. So that's why I wouldn't say I don't like these things. So we it's really hard to say Yeah. And I think the best way what the best So in the sense of, in the, metaphor Just play with it So you can maybe find the internal combustion engine so that whatever happens after it, Yeah, the internal combustion And it's like an arms race. I mean, reasoning is, one way to say like, But I just don't know because it could be like It could be like, Yeah, it could be which is synthesizing data from Or like robotics etc.. So we don't know, but I don't think we'll know Oh, okay. Now, I think, well, I'm worried is that it's going to get, like, and you're just talking the all these investments in it. We have to pay for it. Oh, yeah. And when the feed becomes like heroin level, you know, You can't stop. That is when I think it's a big problem. So we have to be really cautious Yeah. And that's kind of like orthogonal to because people people will not try to find Let's let's use that for something good Yeah. Yeah. The possibilities of it are like immense. Right. But this young says the the stronger So let's see when I mean there's already but people have it as a romantic partners because it is, Yeah. That's like the way we use it now. It's Yeah. So you have to really position yourself in, to separate the technology It's almost all the uses stuff I mean, you know, and you have to time understanding and playing with it I think you, much more likely to go to the internal combustion Of course, you can make it to have the perfect recommendation that is going Yeah. How much you should do? Should you delay the Snapchat notification that you just left the phone? They'll pick it up again, I think. Yeah, that's more the harmful side. I feel like we are investing both as well as from just a knowledge But the more and more like the planet is also suffering But burning oil is the same as burning oil Yeah. So running these things And that is going to be harmful I hope it also shifts around But as long as there's no incentives there might not be, I mean, all the other big tech companies Oh yeah. So that like immediately and then you saw the activity came out Yeah. And they actually officially done And then the Google I forget his name. He also like everybody's just like, Yeah. That's yeah. It's a race now. Yeah. That there is like a definitely like a group of Silicon Valley people the machine. Got that? There is no way, the. It's like a religious thing. It's not even it's a spiritual thing. And they're just going that way, It's going to save us from on ourselves. It's going to save energy. It's It's going to solve death and they're just going Yeah. There is no, that's their combustion Yeah. Yeah. Because they also think if you don't, the other thing also doesn't work I don't know anything about the I mean we were not on target. No, no no we have to do a lot basically. Yeah. It needs to be fully regulated. You cannot do business That's the only way it would work. But even with the trajectory in, it was So they're like, it's not going to work Let's go all in on this. Like just big risk. Yeah, but big reward. Yes, yes. So that's setting the bit, about the subject to talk about it. Besides, I hope it works out to be, I mean, the same kind of like I feel like another subject matter expert, like AI, the tool that we're building now is completely in the sustainability Like, seeing what companies and how are they meeting them, basically So that's why I'm And it goes hand in hand where compute went through the roof, like that's And yeah, there's only hope. There's only, but I do want to be kind of because I feel like I don't think it it comes often I think that's the first time Maybe since industrial Revolution. Yeah. I think even even even the language level, you know, like the best Now, the first technology we have The reason why language is an important well, reality is projected So the only way two people can because I have And even in symbols, such a important technology And I think this is now like, Technology. Yeah. That especially if it starts self accelerating, Some, but it's, at least in the last hundred years, computing wise, it's just the, the first paradigm change Yeah, exactly. I've really enjoyed This was a lot of fun. I'm going to listen to this you mentioned, because I feel like there's Before you round off, I just, so anybody that is like, starting right now, Just, just just I and just try to find joy in, like, Yeah. I, I know there is joy in that, I don't do it often enough. Yeah. Yeah. So it's just day to day I have a meeting at one I have an interview with like six But if it's ten lines of code You know that's awesome. Thank you so much for listening. If you liked the episode, leave a like. Let us know in the comments and we'll see you in the next one. This is hard coding.