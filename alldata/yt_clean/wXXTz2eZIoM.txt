I'm going to show you the fastest possible way to get not just up and running, but We're going to use the official Supabase template, which comes with a hosted Postgres And the entire stack is, well, free. So let's get into it. Using npx let's run the create-next-app package and specify the example with - supabase And once that's finished, we can change into our notes directory and then open it up in VS So we can see this template has come with a whole bunch of auth stuff already configured So to get this up and running, we can run npm run dev, and then we can open up localhost 3000 in our browser. And you can see, I wasn't lying. This is in fact the fastest way to build apps with Supabase and Next.js. Now, if we scroll down a little bit, we can see the next steps to connect this Next.js So let's head over to database.new and create our Supabase project. My organization for this project is going to be dijonmusters. My name is going to be Notes. And I'm going to click here to generate a secure password. Now make sure you copy this into a password manager, because this is the only time you For my region, I'm going to select Sydney, as this is closest to my geographical location, your application. So I'm going to create my new project. And then if we go back to our Next.js project, we can see we also need to declare these So we need to rename .emv.example to be .emv.local. So we can do that over in VS Code. If we have a look at our project and in the root most directory, there is this Let's rename this one .emv.local. And then we need our supabase URL and our supabase Anon key, which we can get from the While our project is still spinning up, it's on this landing page. So we have our Anon key here and let's. paste that back over in VS code. And then if we scroll down a little bit, we have our project's URL. So let's copy that from here, paste it here, give this one a save, and then we can close We don't need to think about it again. So back over in the Supabase dashboard, we can see our project is now up and running. So if we weren't on that landing screen, if you come down to project settings, and then and also our project's URL. So now back over in our Next.js application, you can see our next steps have automatically So let's head over to the sign up page and I'm going to sign up my jon@supabase.com user because the jon@supabase.com user is not. authorized. And this is because when you're using the default Supabase SMTP server, we have some Once you push this out to production, you can configure your own custom SMTP settings and But for now, we just need to head over to the Supabase dashboard and scroll up in the click this little Supabase icon, navigate to your organization on the left, go over to your application. So in this case, that's that jon@supabase.com user. So this adds this user to my Supabase organization, which means we can use them as a test So now that we've invited this user, let's head over to their email account where they've So we'll say, join this organization. And so once CoolerJohn has accepted our invitation, they will now be able to authenticate So anyone in your Supabase organization, you can send emails to and use during testing. If you want to send an email to someone outside of your Supabase organization, then you custom SMTP settings, which again, we'll look at in another video. But for now, if we go over to our Next.js application and sign up our jon@supabase.com message. Thanks for signing up. Please check email for a verification link. And so that looks something like this, where we need to confirm. our email address, and now you'll see we've automatically been redirected to this So this is all the information about our Supabase user and our next steps have dynamically So let's copy this block of SQL. which creates a table called notes and inserts some example notes and head back over to And if we go to all projects, we can search through our ludicrous number of projects for And it was the one from our dijonmusters organization. We can then head over to the SQL editor to be able to paste in some raw SQL and then click And we see success no rows returned, which means everything's all good. which we can confirm by going over to the table editor. And we can see we now have this table for notes, which has our three example notes. So let's get this supabase data displaying in our Next.js application. So back over in VS code, let's create a new file in the app directory called notes slash And this one is going to export out a page that displays all of our notes, but We don't like writing things for ourselves if someone else is gonna write it. So if we go back to our Next.js application and then scroll down on our next step section, Supabase. So let's copy this one and go back over to VS code, paste it in. And now ESLint is yelling at us because it's saying there is no .from property on a And this is because we need to update our code example. because now when we call the createClient function as of Next.js 15, this returns a So we just need to await our call to createClient and our red squiggly disappears. So now we can give this one a save and go back over to the browser. And rather than this protected page, we want to navigate to our new notes page and we can very pretty JSON blob in NxJS application. So since we have authentication and authorization already baked into our application, Because currently, if we were to sign out and manually head over to that slash notes page, Now that might not be a problem. But in this case, we're going to protect this data. So only authenticated users are able to see these notes. So back over in VS code, we can have a look at the protected page and see this is doing a But then we're making a call to superbase.auth.getUser. And if we don't have a user, then we're redirecting to the sign-in page. If we do have a user, then we just continue on and render the protected page. So basically we just want to copy. this chunk of code and paste it over in our notes page. So after we create our supabase client, we make a call to get our supabase user. And then if we don't have a supabase user, then we want to redirect to the sign in page. And this red squiggly is just telling us that we need to import that redirect function Now, if we save this page and go back over to the browser, we'll see we've automatically And if we try to manually go to that slash notes page, it automatically redirects us again back to this sign in page. So the only way that we can actually see our notes is by signing in as one of our users And this works fantastically if we have a brand new Next.js project that's entirely green So how would we migrate an existing Next.js application across to use all of this awesome Well, I would start by using this template as a really good example of how to do this properly. And really, if you were to copy across this utils slash supabase folder, this will give helper functions for creating a supabase instance in a client component or middleware or a You'll also need this middleware.ts file, which automatically updates our supabase session And the last one you'll need is under auth and then this callback route, which is where And so it exchanges an auth code for the user's session. and then redirects them to the page we want them to see after they sign in. So this slash protected page, for example. But those three bits basically give you all of the configuration and helper functions that And then you can just use the rest of these pages and this actions file as inspiration for To take this to the next level, check out this video right here. We build an entire SaaS product from scratch and have it taking very real subscription But until next time, keep building cool stuff.