ASP dotnet core from Microsoft is one of developer Bergin Patel will teach you how to use and welcome to dotnet mastery. My name is Bergin. foundations of dotnet core application, we will Visual Studio 2022 dotnet core has been a buzzword been gaining more and more attention because of So first, let's take a look at what are all the Foundation is a basic element of any thing that we will learn as we explored the then it's critical to understand what is new in So I will highlight the new features in dotnet we will be using Entity Framework string and perform all the Once we have Entity Framework core configured, we Crud stands for create, read, update and delete. also understand how client side and server side nice alerts using temp data and toaster J S. Now error solving when it comes to any programming, and how will you approach those errors and resolve Azure. And we will see everything live including So you can see there is quite a few things that we with all of that from the next video. In this we will be building. We will start with an empty to add a nice styling. Next we will be building category in the navigation bar, it will open up First thing that you notice here is we have a it takes us to category create. And if you press the Create button, we have default have some server side validation. Like if we enter create button, we have a server side validation, Then we have a backdoor List button here to go We can edit any of the existing category. And nice toaster alerts that you can see. Lastly, And on that also, we will have our alerts. So we will implement toaster alerts and take a look the application, we will be deploying that to of the application as we deploy things to Azure on this from the next video. Let's take a look We will be using dotnet sex for our the latest version after add sex. For The version that I will be using is Visual Studio as compared to 2019. So you can always install For our database, we will be using SQL Server. and then you should install SSMS which has older version of SSMS that's completely okay. on your local machine, we will be using that So once you've installed all three of these This video, I want to walk you through the journey change that the dotnet language has encountered. which was a revolution at that time, web forms has all of them. Because of that, the dotnet team came Now, even though I love MVC, and I have built like it was created on top of the components for and ultimately, Windows operating system. But with keep up with the changing technology. Finally, in and it was the first version dotnet core is built completely rewritten, and it is a cross platform Also dotnet core was built with cloud in Then in August of 2018, Microsoft released active with releasing new versions, there because we had to update quite a few class since then, dotnet core team has been releasing was released in November of 2020. After that, that of 2021. We will be using the Preview version, but six is released. So this is a small overview of That being said, why should when you start NET comes with many advantages. First one is If you compare that to the traditional a few benchmarks, and it is very fast, when you dotnet core is also cross platform, the classic the dotnet core is rewritten, it has removed that in support for dependency injection, which saves a get used with using dependency injection, you With any programming language, it is critical are released, they should be easily upgradable. When a new version is released, updating to that Because of that you can always keep up with the When the dotnet code was being written, And because of that it is completely compatible when it comes to performance dotnet code the new versions in dotnet code that have been The code actually gets more optimized that results compiler will eventually optimize the entire code. core framework dotnet course actual performance is implementation. Because of that, it is clear code technology. So with that brief overview, In this video, before we take a look at the other which is dependency injection. ASP dotnet core Container Dependency injection is an integral core injects objects of dependency classes through Before I show you what advantages dependency there is no dependency injection. In a typical now. And we have some common functionality that we say we want to send emails, and we want to access Now, let's imagine that on these three pages, will do is we will create the object for database open that connection, we will have to do the close the connection in all the places to do the that we have in all the three pages. So you can that, what happens in future, if you change the or email, based on the current configuration, you pages, which is a big mess, because right now, or 300 pages. And the issue here is that on each managing them as well as disposing them. And have to do that in all the pages. So that being and get an optimal architecture. The answer First, let me show how this scenario would look will have email and database functionality. These But now we will have something special, which can see, we have got our dependency injection interface and its implementation. So inside our email interface and the IDB interface. When any will just ask the dependency injection container and directly give page an object to use. So inside And then dependency injection does audits magic That way, we do not have to deal with creating the our pages or pages will look very clean with just will be done by dependency injection container. email class, you do not have to make any changes the implementation inside the email class. And next time when we build the project, it will only have to change in one place. Now. That is one injection. Now in order to use dependency But with dotnet core, we have a built in own advantages. So I hope that you have a short First thing that we have to do I will be using Visual Studio 2022. Here we have hand side. We will catch start there. We want to that and it will display all of the templates. You or you can just search here for model, views you see there are two templates that are available with C sharp language, we do not want the or ESP dotnet core web app. And we have model And we have few more options that we have to can give our solution a meaningful name. So let's And in that you can have multiple projects business layer that can be web layer, and so on. and then the project name. Let's call this bulky and the solution name separated. Let me change the and we will hit Next button. Final thing that we will be using dotnet six, so we will select that time. When you clip the authentication drop Microsoft Identity platform and Windows. understand the basic folder structures of when So we will select None inside the authentication, did not want to enable Docker right now, because With this configuration, let's create our project. project and it will load all of the files and it will load the complete view of Visual Studio. we will be coding everything. And on the right if we want to commit and some properties. Now by do not panic, you can open it back up by going which is Solution Explorer. With that in Now that our project has been created, let's by default. The first thing that we should to access the project file, you will right we have our project with the website we have the added project file. When you open that The first section here defines what is we are using dotnet six, so you can see that right is the item group item group will contain all the We selected the runtime compilation, and that's we will be installing more packages when we and so on. So in that case, when we add new get inside the CS proj file or the project file. Now But it is always good to know that we have all the file. If in case you need to access that. So or the project file. Now that we have seen the you is we have dependencies here and we can see project file will be installed right here. We will next folder that we have is the properties folder. In here we have the different profiles using can see inside the profiles, we have a bulky book If we use the IIS Express profile, we know the defined. If we use the bulky book web, in that HTTP, the bankbook web is the default time, what and that will trigger the application. So if you you will first see a command prompt. And You can see inside the logs it is displaying all run our application. If you hover on this down which is ies Express. And that is the If you run with IAS Express, it will use the port and show that as well. Great, you can see it right here. So the default behavior is using the that and using IIS later on. So that was a After that the next folder that you see here you will see all the static files of your project. or any libraries, everything will go inside the any C sharp files. This folder is only meant So we will be using the static folder extensively GS or some images, or any other libraries. The application. So always remember, if you ever go inside the www root folder. Then we have I will get back to them in a couple of videos. This is the file in which we will be adding of our application. Like you might have some you have stripe payment keys, any of the we will be storing them inside app settings you will notice that we have App Settings dot JSON files and it will automatically bundle you create for another environment, then you can have App Settings dot production dot And then based on the environment variable, settings file. Because connection string for a compare that to staging, preview or production. we will be using just app settings dot JSON the local host. Also in production, there are add them to Azure Storage world and much more. To get started, you need to remember, must be inside settings dot JSON, and not files. We will come back to this file in the later Now the last file that we want to take a look at Next we have program.cs this is the file that will we open program.cs You can see we have a variable builder is passed with the built in arguments. pass custom arguments If you want with that, it the Web Application Builder object. Now in the injection with dotnet core. When we want to container, we will be doing that right here. So email or anything else, we will have to do that on that builder object. So right here, we are is builder dot services dot add controllers with because we are using MVC application for our the service will be different. Now in the future and we add that to dependency injection, we will DB context. If you are working with any version, preview versions of dotnet, six, then this file And the services that we add to Container were from line nine onwards was inside a configure adding services to our container, then we need to be configured from the highlighted section of your the pipeline specifies how application should receives a request from the browser, that request switch to the presentation here. We have different The pipeline specifies how application should your application receives a request from the In the pipeline, you can add items that you want. And MVC is a type of middleware itself. So if we have to add that middleware. Other authorization, middleware, and so on. What exactly of the middleware, it gets modified by them, and If that is the last middleware in the pipeline, Let's take a look at the few middlewares that we code here. And you can see in the pipeline, first environment. If it is, then we are adding the user friendly exceptions, so that you can debug then we are just redirecting them to an error And then we have a middleware to use our static We also have a routing middleware, and we authentication to our project, we will have to add then we have using a map controller route that for MVC. Based on this routing, it will corresponding controllers and action, then pipeline is extremely important. The way that is exactly how the request will be passed. authorization and so on. So in this scenario, if we have a middleware, which is app dot use work. Because authentication middleware should you only authorize the user that is authenticated. and authorization. So if you place the pipeline Inside the endpoints. Here, you can see we have ID. This controller route will make more sense Let me show you more details on how routing show you that, but I want to walk you through some MVC application, we have controllers, and we let me walk you through the main components views and controller. Let me switch back to Now, if you remember, we had three folders for MVC stands for. The first thing in MVC is model, C Sharp is used to describe a model. The model logic that user works with. Let's say inside your category or all the product details than that represent all the data in your application, it can or it can be a model, which will be a combination either represent the data that is being or any business related data model that will if you have 10 tables in your database, we will There is also more complexity, but we will go into all the tables in your database will be a the properties of that class file will be the that you can think of right now. Then we interface. You can be tired of HTML and CSS that Whatever you see on the website with your eyes, is But now you need to think of what happens if in button. What happens is that view will interact view does not interact directly with the models. controller acts as an interface between model incoming request. So controller acts as an all the business logic and it manipulates that to render the final output. This is just a brief So let's say if a user clicks on a button that request and controller will have lots of controller will redirect the request to one of the will fetch all the data that it needs to display it will pass all of that to the controller and sent back and the user will finally be able to see as heart of your application. That is where and it is the one which will be interacting now you see that the request first comes to the general idea if we go back you can see inside the define a controller and an action method. So is provided It should go to the home controller, But that is a 10,000 Fate overview. Let's take a Before we see routing in action, let's see we have a general pattern of routing. The first the URL. When we run on the local computer, Whatever it is, after that port number will be a page to be loaded. In the first example, then we have an index and some number. When we or domain, whatever is the first thing that then the next forward slash after that will be if you have something that will be the ID. If we go back to the application, you can see controller name, then forward slash, we have an that corresponds with the request that we have controller and action are not optional. But if that if there is no controller and action, you default route. Because of that, we have our home which I will show you. Before we dive into those here, I have given some sample URL, I want you action and Id based on this URL, I can remember we have in our application is let's go back the that will be index action. So based the controller name is category, the action is one, we have controller name as category, we do action. And finally, ID is no. Next what we have. action as added and ID as three. The last one, and we have ID as three. So with that if you get name, what is the action name, and if there is routing, let's actually run our application, Now we want to understand routing in MVC. This first started learning MVC. So I want to make Before we see the complete routing in three folders that we have. We have a folder and we have a folder for views. By default, we models will be all the data related So let's say if you are dealing with products you will have a product model and we will be using can just think of models as tables that you want you will have a product model. That is not always The main thing that we want to work on Controller is the heart of the application. At the screen when user is looking at the page. Now controller, all of the views or UI pages that are inside the same folder name as the controller folder by default, that is also a convention with with the keyword of controller. That is how the If we expand our home controller, you will see name of home controller, and it implements And right here we are registering the logger using right now, I will explain dependency injection in you can see we have two action methods. Inside If we go back to the URL here, you can notice If the URL was forward slash home, forward slash for a privacy action method. And it will load the action method is I action result, because I action it can return a view, it can redirect to some more than I said that if the URL is home forward have defined here. Now you might be thinking that will be inside the views folder. The way it finds is inside the views folder, it will look for the So we have that folder. Inside there, we will have it is index action method. So that will be mapped we have some HTML and Bootstrap classes. So displaying some text. So let's run our application in the command prompt window. And once that In the URL right now, nothing is present. What actions in the URL, we define that inside the default that to home controller and index is from the home controller index action method you can add a debugging point by clicking anywhere this controller, this will be yellow. So if we go hits our breakpoint here. So that means if nothing controller index action method. Let me also add a So we will hit continue here and the request goes have returned view that will find out the view the page. If you right click on the view here, you it will automatically redirect you to the index folder inside there, there will be an index view. So if we go back to the application, while this is see on the bottom right the URL that it will go to controller name, controller name will be home and home controller. It will go to the privacy action inside home we have privacy and it should display that. It hits our debugging point. That is great. So that is perfect. With this you can see based on the URL, you have to define it goes to the controller points out that action that you have defined inside the views folder. just understand the basics that I have taught you routing will make much more sense. And you are not alone. When I was learning MVC, about trying to understand this since I where we just have code behind files. So as we And you will love the way it works. So Now that we have seen the basic controllers and I want to walk you through the basic views that folder inside views that corresponds But on top of that, we have something called a And partial views are similar to user components So it's basically a view that you can call within Along with that, we have a special partial underscored layout is the default master page you can see we have some styling on the top here, where we render the body, since this is the other views, it will use this underscored layout when we are displaying this content, it was also have a footer here. And we have some common We have the main HTML and body tag. And we have We will be updating this in future videos. globally. This is the place where we will be and this is a partial view where we are just in some views, let's say in index view, we want to view on that page. So that way, we do not have this partial view, and that will be included. used to display the errors. If you encounter in views as we proceed with the course. So do not all the partial views. And underscore layout While the application is running, if I switch we have the header here, we have the footer here, party at that place, whatever we had inside the I hope that makes sense. Then we have something view start. Let me open the view import first. So inside your application, let's say you pages. If you add that USING statement here, controllers and classes in your project. That way We will see that in action as But one important thing that you see here is tag by the dotnet core team that looks like HTML by the Microsoft team from other languages. After I will show you one example quickly here our application we'll click on privacy to see it home is controller and action name is privacy. navigation, it is provided using a special Tag can see we have an anchor tag. And then we have Tag helpers will start with a prefix of ASP attack helper, which says ASP controller, and And in that controller, what action name should about the ASP areas for now. We will be by the dotnet team in future by tag helpers define them globally. Inside the view imports is the view start. This file will define what In set privacy, you see we have not defined what using underscored layout, because that is what If you want to explicitly define which is different, you can do that directly preference over what is defined in view start for the application. Now I know the section was critical when it comes to understanding In this video, let's take a look at tag helpers. Microsoft looked at the success around libraries an Angular directive like experience in the new dotnet core that they decided to create tag similarities between Angular directives and tag are for server side rendering, while the Angular If you have worked with older versions of dotnet They are still around a tag helpers are being user friendly. Tag helpers are very focused around as compared to HTML helpers. We will be working But to just give you a brief overview, you can see tag helpers simplifies all of them, because we can a Tag Helper ESP four, and we will find that to a Then in the last example, here I am displaying tag begin form. And now within the same form tag, we So you can see things are getting much more being said, if you're coming to dotnet, brand this is even better. You do not and what is different. We will be working But I just wanted to give you a brief snippet When we are using the same tags, we just use That being said, we will explore all of this When you will be working with you will see the return type of action using an MVC application or a razor page we have eye action result in MVC We are razor PAGE PAGE handler, we are returning back to I action result is a generic type that implements be explicit about the return type in both of these If the return type is view, you can write View to page, you can write page result. So now what let's understand some theory. So action result is that have associated helpers. The eye action action results return type are possible in helpers and action wizard. So first, let's A razor page can return content file not found pages. For all of them, we have returned types not found result, page result, partial result, and we can return back views, partial views, we can if you are returning any one of these, then you based on the helper method. But what if Right here in MVC, you can see we are returning if Based on that if that condition is else you want to return to view this time you use View Result here, return view is working, Similarly, if you use redirect to action result, will give you better if you are working on If you use page result, and return page will you use redirect to page result, then return page the solution is to use I action result in both does not care which of its implementation is being So that is a brief overview on how action from action method in MVC application or Now that the project has been created, there here. We will go into all of this files and folder inside the views folder, we have home. And inside home page of our application. So if I open this and a paragraph, which is inside a div tag. Let's It loads up the default page of the website a homepage and a privacy page. You can right here. And that HTML is exactly same as what go into much technical details. But let's say If you save that, you go back to the application. changes right here. If you notice in Visual Studio This is a great capability that has been added and reload for you. You can go here and make What that will do is whenever you make some you can see the change is This is very helpful when you are designing But if you notice the first time, you had and after that the hot reload automatically works. Now, if you were working with an application, to right click on the project, and you will have nougat package. You will search for a package Microsoft that ASP NET Core dot MVC dot razor so you can hit the Install button to add that to I still want to add that then you will we only have ADD controllers with view. When you dot add razor pages. And on there you will have But because of hot reload and the magic So in the future videos, when we will be adding compilation, because when the video was originally testing. So that's why I have added the razor skip that and you will just add the builder dot overview that I wanted to give you with the heart video, let's first examine all the files and When we work with any project, the main piece And we need a database to store our data. So we and store all the data for our website. With condors Entity Framework core as well. If not, we'll be using to create database and we will be So with dotnet core, you do not need stored code. Entity Framework is a spot editor that will That makes sense, it does not mean that you cannot procedures if you want. But typically with MVC manipulate the data layer. We will go into those we first need to create our model model will not always the case. But whatever tables you have model for the code first migration. So inside the me create one more model here, we will right We want to create a table for category. So we will it creates a public class file and it places it That is just the location so it knows that it is the category class right here. Now inside properties that we found. For our table. We So to start we can write prop and it is a code times it will automatically create a property and I will call that as ID. Next property that we that will be a string. So we will create that Now display order will be an integer so Let me purpose, we want to create a date time property, created. So we will call this created date time. set a default value to that. So in order to do assign the date time dot now like this. That way, to the created date time when we create an object model. And then we want to push this model to our But when we create a database table, we might want to see that id is a primary key. And since it's an So we do not have to populate that when we create We could also add a validation that name be now if we had to write a SQL statement, an identity in our SQL script. But how for that dotnet team has come up with alternatives where you want to configure some more details, Let me walk you through them in the next video. that we have in a SQL script. Like we want to make be the primary key of this table. In order to do known as key. If you enter that, you notice it will display an error, that key attribute to add a USING statement. So you need to make sure control.it will display that you can add USING that will add the USING statement which Once this key annotation has been applied, when you create a script to create this table, And it should also be an identity column. It We just need to write one attribute and everything The next thing that we wanted to do is we want So here we have another attribute, which it creates the script, it will make sure Now we have talked about these two, but there are With this in place, the initial equation of in our database. Now, let's take have added the data and rotations 10 We have a database inside SQL Server. So let me open up that installed on your machine because that is Once the SQL Server Management Studio opens up, of the users it could be local TP backward slash I have both of the server name configured. So connect button. As long as it is able to connect your connection string. If you use something else, your end you need to check if dot works. You should also work. Let's hit cancel here. And if database here but I want to create a new database connection string inside our project. In order you will be doing that inside the app settings dot inside the class file. That is a bad approach. you should have all the secrets. That way, if you it will be available inside the app settings dot settings for different environment. Like if you you can create all of those app settings. And when you deploy the application. That way based on settings, or different database and so on, we will that should work with the local development. So connection string in here. As you can see, it is What you have inside logging is known as we have another block of log level. And that create a block, or we can directly configure the that connection string is very common, and almost That is why they have created a default block for you can use something else. But you can also use you see it is automatically suggesting me that use something else. But I want you guys to use the the reason behind that in the upcoming videos. So So that key name, you can use whatever you want, I name that you want for the key right here. And within the double quotes on the right side. So I am using.so That is what I will write like if we go back to SQL Server. And if you I want you guys to copy this, go back to the the local server with a card. So that is what I If you have to separate anything in a connection property that we have is the database name. Let's the trusted connection flag to be true. Make sure that we want to configure in the connection but we will keep things pretty simple. We have a particular server that we are able to connect in That way when we connect here, we If you have a user ID and password, then you can I will be using the default crusted connection. available with the name of connection string. and value has the connection string. Now how can the database and create our category table inside we need to tell our application that we use this connection string to establish the be using Entity Framework core and we will Using that DB context we will be able to make It is best to create a new folder for all create a new folder with the name of data we will create a class here. And I will call that you want here, but I'm using DB context so that Now we need to inherit this class file from the In our project, we have not added Entity Framework we know that this will inherit from the will see the red squiggly lines on there, if it will display that you can install a that will automatically find an install the latest right click on the project. And you can select we have new get package manager, and we can Here, you will have to go to the Browse tab to Now right now I'm using dotnet So I have checked the include pre release for is Entity Framework core. Let's press Enter. Framework core. We are using the previous seven. Once that is installed, if we go and now if we press Control dot here, it will tell since we have already installed the package. context. Once we do that, then there is one line constructor of this class file. You can think to establish the connection with Entity Framework. you can type C, D or R and press tab twice. You So once you press tab twice, it should have to write some parameters here. Because when to the base class, which is dB context. So here, on the class that we are on right now, which is And I will call this options. So here we we will receive some options. And those which is dB context. This is a general setup that Now once you configure our DB context, we still our category table inside the database. inside the database, you will have to create the file that we are currently working on. Now we will say public DB set here, and we need category. And once you write that, you can see the anything with the name of category in the same it that category is inside the Models folder. So Let's add that and the next parameter here is the inside database the table that will be created So that looks good. And we will add the getter to create the category table. What this will do of categories and it will have four columns when it creates stack table it will make sure that field as well. So, you can see it is doing all the Now, when you are working with Entity Framework and one is database first what we are doing is of our model and based on that model, we will first approach database first approach will be based off that database, you will be scaffolding And that is what I have been using in all of my from a DBA management point of view, I am more of So if Entity framework code will manage database So with that we have added our But we are missing one small configuration or to use the connection string that we wrote that it has to use Application DB context to with SQL Server. So let's see how we can we just need to tell our application that it application DB context. And then it has to use a defined inside the app settings dot JSON. We will where we configure the services that our to add the services to the container make sure So right here, we want to add a new service. So on add is dB context. So you can see we have dot the class file that we are using for DB context control.we will just have to add the Now, when we configure this DB context, if right here, we are passing the options and we inside options, we have to configure use of SQL options goes to this is just the syntax, we will use SQL Server, but it will not be available like you the package name that you have to add. So for packages. And we will have to install a package which is Microsoft dot Entity Framework core consistent version. If one version of the package preview five, or even dotnet five, and things So always make sure that you Let me install the SQL Server and we will close you will see the USING statement using Microsoft on the SQL Server we have to write the connection That is inside app settings, we used a special Since we put our connection string inside this we can directly use the key value Let me copy this name. We will go here on builder dot configuration, we have an connection string. Inside this method we have to Once you use that, it will automatically find the Now this cat connection string is a only look for this default connection inside If you named this connection strings one, then it because this method will only look inside So that is why I said to name it exactly the we have different ways of getting that. But I So with this, our DB context will be So all the configuration is done that was needed where we have to create database, and then the in the next video. Now that the the next step that we have is to actually When you are using Entity framework code. to run using Entity Framework to push the changes we have done all the setup that is needed. In NuGet package manager, and this time, you will thing that you have to do is you have to add track of all the DB changes that are needed. And migration to the database to actually create Let's see what that is. The command to add a have to give our migration a meaningful name. Do The name that I want to give to our migration is and we see an error message. The error is because get package. You see the term add migration is and try to find out what is the package that is directly. But I want you guys to Google what If you just copy that error and paste it here, you you will see the package name. It is so simple. dot tools. That is the package that is required you face any error, it is best to just Google much easily and much quicker. So let's go to paste the package name, and we will install Perfect that is done, we can close this, I can I will run the same command one more time. And if you notice on the right hand side here, a And there are two files that got added. Our up on the screen as well. Inside migrations, we up method is what needs to happen inside the we need to rollback the changes. So do Let's see what's happening inside the app a method with the name of CREATE TABLE and it is That is the exact name that we defined right of category and then that will have columns. The of the type integer and nullable is false. Since making that an identity column and increment The next thing is the name column. And you did not add the required property, that nullable is also a nullable false, but we did not add that it is an integer property and not a string. an integer. Last, we have the created date time If you see on the constraints, it is also adding migrations is exactly what we wanted. But can Now, what Entity framework code does is an optimized version of the SQL query. And it you do not have to do anything with that what migration and you push that to the database. So you can just run the command update database. We have an error here, let me go to app settings. this will be equal to right here, and they we will go back to the package manager. And you not supported, because it should be equal Perfect the migrations were completed. But what server, it will check is there a database with the So it will create that database first. And then and execute them on our database. So if we go see the new database with the name of bulky and Let's examine the columns It should have four columns. And that looks if you do the Select Top 1000 entity framework applied. So next time when you run the update it will only apply the migrations that Entity framework code is pretty smart with all do. So with that, using Entity Framework core, we table based on the model inside our main project. Now before we work on anything Right now it is running on port 5001. Let me opened every time, we can just run that using run on the port 5001 It will get the new port that error that I'll have to open Visual Studio under With it open the project again. We have the IIS And perfect. So we have home and privacy but both Now in category we will be creating editing than working on the home controller, let's So inside the controllers folder, we will few options here. We will go with the empty from scratch. I will call that as category make sure that you append controller at the end. must come before the controller. So once you For effect we get an empty control With an also had the index action method. And our category the index action method in home controller Our category action method does not have a view First, you can create a folder with the inside the views. And then you can add index directly from the controller, you can just we will be selecting the razor view here. Let's there are a few configuration that you have to we will give that the same name as the action any templates when you create this view? If you delete details, edit and list. I do not want to back to that later on. If you change that, then But we don't want to focus on that right template. Next is a partial view. Partial view So it will be rendered inside some other view. So not be used. Because you do not need any master will be calling that inside some other view. We keep it simple. Next, we will use the layout page, So if you keep it blank, it will by default use which is underscored layout, we want it to be And we will hit the Add button. It will scaffold if you had any errors while building the project. it will ask you to resolve the errors. And only will be able to scaffold the views. So perfect. index category. With that, let's continue. In the if there are any in the table format, inside actually retrieve all the category list from our we open up the layout page right here, where we Rather than privacy. Let me display the category how can we navigate to this particular view that we have index action method. So here to navigate, And the action method is index. We are not Or you can also remove them if you want. If you and make sure we are able to navigate to our there, perfect, we see the index categories. That to navigate there successfully. Now we need to So let me switch back to database. And just for me add something here. So I have just created I have created one dummy record inside the table. the category controller. Now I have said before And the main file that we have is the application object. Because inside that file, we have an object of this application DB context? That is the beauty of dependency injection, we everything will be done for us, because we we want to use this service. So because to create its object, we can think that the application that please send me the object of inside the controller, you want the application create a private read only field, And we'll call that underscore dB. We will need to tell our application that we need an where the connection to database is already made. that, you will have to use constructor see to inside the container, you can access that inside context. So inside the constructor, we can So this DB will have all the implementation of retrieve the data. So we will populate our local underscore db is equal to dB. And then we can use syntax of that is very simple, we will create we will first access the underscore dB. And on that we want to work on right now is categories. that. So it will go to database, it will retrieve to a list, and it will assign that inside the you do not have to write a select statement There is no SQL coding required. You just have to will retrieve all the records. You convert that how do we test that this is working, we will you see the red dots. If you click here, we are IIS Express here, your application will hit So if we click on category, it will hit a now. And if you hover on the category If you expand it more, you can see it is the So it goes to the database, it fetches the We have a list that is already populated here, And we can run a for each loop on that Let's do that in the next video. Let me remove the Know that we have all the categories we can copy that and we will pass that to our I am a fan of using the strongly typed we'll have to press ctrl.to Add the USING here and not a list, if you want, you can also But if this was a list, then you would have used Now that we are passing an we need to capture that inside our view as well. But if you do not have that open, you can go to need to capture the model that we Passing from the sign, and you will write model in all lowercase. in order to fetch what is being passed from rate model sign. So what exactly is being it is an IEnumerable off category, we can copy our view knows that whatever we receive here is I enumerable, we can iterate through that. you can use both HTML as well as some C sharp use the table attribute. Give that some classes And we'll say table striped, we can Inside the table, we have tea head and tea body. headers. So we will have a TR tag in there and have to display. The first one will be category You can also display the date time and ID if you That is the header. Now inside the body, we will need a for each loop to iterate through I said before, we can use the shortcode directly So if you press activate, you will see we have we will create a wire here we can call that So on top we use the lowercase model. But here So you can see how it is different. That way it this model in a for each loop. Now for each of the will add TR here in that we want the TD tag. First is inside this C sharp variable object. So we will I can give it a width of 50% here. And we can have display order. So we will say obj dot display great. Let me save this and run the application. category that we have inside the database. This is Next, what I want is Edit and Delete buttons here. Before that I will be using boots watch themes. loves a pretty application. Because of that I for Bootstrap. If I scroll down, I want We can hit the download button. And let's that file and it is using Bootstrap five. That's And let me stop the application site WW root where But here let me just create We'll call that boot swatch team. And let copied and we will be using this in our Another change I would do is inside site dot me remove that and the anchor tag. We will be In order to add this to our project, we And we should have our CSS at the very top. This We want to use our boots watch theme dot css. Now if we go to bootstrap.com. Let's click on getting let me copy the je s bundle that we have here. project inside the underscored layout that with the one that we copied. As of this recording, dotnet, six, this might change in future. But that of Bootstrap. With that change, let's run the Right, you can see a dark theme has been Let me switch back to the boot swatch. And let on Preview. Here we have a nav bar, let's use Let's go back to our application. And I will paste Now since we are making changes inside the view, I enabled the razor runtime compilation. So and if we go back to our application and we are making changes directly inside the view. The reason behind that is we added the package are razor pages, if you examine the program class we will have to make one small change here on pages. And on that we have ADD razor runtime I believe in future, they will also add this with with razor pages. So this is one extra to get that runtime compilation. With that And great, we see the new navigation menu right me comment that, we'll just add the whole and layout. And I can just copy the whole. Let Scroll down by we have the other category instead of features. Perfect, I will I can just leave that in comments. So that use that. And I can remove the nav bar altogether. we did not have to rebuild the application. The And we don't want the text dark And perfect looks much better. If you click on should display all the categories. Great. I inside footer. We have border top, we can remove Let's go back and refresh. And this looks much five in our project and we are using the boots Inside our index view, what we can do is we can we go back to what index, let me add a little bit div give it a class Have container and padding in there, we will add a div, give it a class attached here, save that and go back. That will this row into two parts. By default bootstrap if we just want to divide it into parts, then So here, we will add a div, give it a class in one div. And we will add another So that will divide the screen into parts. The h2, give it a class of text primary. And Let me save this, go back and refresh. And at the very end. So we'll close that div at the right here, we want to add a link inside then will create inside the category controller So right here, we will say that which is the category controller. And it should We do not have that yet. But we will create that bootstrap classes btn btn primary. And here we go back and refresh. So we have our button. In bootstrap five, we have text and we will save Then let me just leave couple of lines here, I can Now I also want to use some icons here they have given their own sets of icons. So why we have the icons tab. Getting started with all awesome, but you had to register and do lots of the install button and you have the CDN you copy the CDN. With that the icons are readily available here, let's search for plus, if you scroll down, have the link here with a copy. And we just paste Let's save that. And you will see the icons are that we have added icons. But if you click the that is because it is going inside category category, there is no action method with the name That may copy the index action method. we will have to change the name here to create someone hits the create button, we will give them and create a category. So when the view is model. You can keep that blank and then you What do I mean by that? Let me create a view We will keep that empty and looks good. Let me index, I said that this is the model that will be is not always the case. In our create, we have not want to work on the category model. And we want So for that, also, you will have a model for So the model that you write inside view is controller. But if you are passing a model from the model in the view. But if you are not passing then you can find your view with a model based Here we are collecting the name and display helpers to find everything for us. Now, you might I will walk you through that. But before that, of post, because we will be posting our In that I will create a div, give it a class of four. In there, I will add a div, give it a will add a heading here, which will have a class display the heading which is create category. Let I want to see the view while we are building we hit the Create Category button, it will take Here, I want to display a label and a text box. give it a class of margin bottom three you can just do label and give it a name like is we want to bind everything on this page the dotnet core team has provided tag helpers, hyphen, four. When we add that in a label, we So you can see it is already displaying created we will select name here, and we do not have to refresh, the output will be seen. Because what it inside our category model. So we have it as as well. Let's go back to the CREATE VIEW. And now we will just say ASP for Tag Helper, this input is when this form is posted, it will post an object we can give it a bootstrap class of form control. Let me save that and refresh. Whoops And create you can see a text box right here. This looks good. Let me also add a text box So I will just copy this, paste it here as before go back and refresh and create this looks good. order without a space. And that is because inside fix that in just a second. But I wanted to show submit the form and I will add a link to go back So we'll go to create here and we will We will also give it some bootstrap classes of btn pixels. I will call this button as Create. I want to go back to the Index action method the categories. So it is more like a back button that is the category controller. And what is the give it some bootstrap classes btn btn secondary, of 150 pixels. Within here, we will display If we click on Back to list you can see that is hit the create button and create our category. No, I want to create the category when we populate hit the create button, we will have to create a And in that post action method, we will already because we used tag helpers. So inside the and paste that one more time. Let me stop the receiving a category object, let me call that Obj. method is post, we have to write the attribute has approved and then we also have to validate to help and prevent the cross site request forgery that you have inside the application, it will will be validated at the step. That key must I have explained the cross site request forgery details inside free content on dotnet mastery. forgery, you can find that video on YouTube and this course. So they will just validate This is not required. But I will highly recommend Now once we have the category object that is we want to create that record inside the database. And on there we have the categories. we did not have to write anything else. But we have the add method there. And you can have that inside the OBJ. That is what the user Now once you add it to the database, it is not pushed to the database. When you run the command goes to the database and saves all the changes. here. That will take us back to the same category to the index so that we can see the new category want to redirect to an action, we want to redirect inside the same controller. If you had to go you can define the controller name right we can just mention index and that will work. Let's go to our category. And let's create a new And create you can see it has been created. If And if we do select top 1000 Now we see expected. We are able to create a new category If you hit the create button, you will run project. And you can see the exception is we did not have any validations. But inside column. So when the Entity framework code tries to have to be much smarter to handle the validations. Now when we try to create a category without error message because it cannot add an object But that is not a good approach. Because we are happen is we should handle our validations as well as inside client side, which is inside Let's first do that at the server side. So when model is valid or not. And what defines a valid name should be a required property. So let's go In order to check that with dotnet core, we have model is valid or not. If that is valid, we want valid, we just return back to the view with the I'll add a debugging point on if the model Let's try to create a category with no fields examine the is valid flag is false. So But now which property in our model state is not now we just have two properties, it could be So in that case, you hover on model state, you have two errors. If you hover on the values here, valid. You can see display order is not valid, as And this time let me populate display order model state will still be not valid. But is only one because we already fixed one of you can see display order is valid, but name is That's it server side validations are working. displaying an error message right here, Doing that is super simple. We will remove the Just like we have ASP for Tag Helper, we So inside name, we can add a span tag. And we you have to define the model. So we want to check errors, we want to display them in red color. So we will copy this span and we will paste that make sure to save this and we will go back and this time if you try to hit the create button, you The first one that we have is name is a required because it's an integer. So with that we can So with that we have our server side validations model state is valid or not. If it is not valid, It returns back the obj and it automatically we did not have to write JavaScript or any with the help of tag helpers. Let's continue in What if you want to display a summary at the top dotnet core has a solution for that. You will need with validation for. And inside tip, you can this will be all in this case, it will display all Once we make this change, let's go back and the error messages at top as well. When you select If you want to limit that you can change using Validation Summary, I personally like what if we want to add some custom validation? to make sure that we do not add any category How can we add that to the validation. So we can check here if obj dot name is equal equal that to a string. If this is the same, we want So for that on the model state itself, we a key and value pair, you can give any key name If you want you can also use string dot empty. that you do not use the same key two times. order cannot exactly match the name. Now since we will actually have to restart our application view, we did not have to restart. Let's go to our same name and display order. This time, you can displayed in the summary. Now if we did not have But what if you want to display the it is pretty simple, we will stop the application Because inside the category object, if you we are adding a new error inside the name Let's go to our category and try to create a new Great. Now you see it displays input cases. error message. But all of the validations that Every time you hit the create button, So that means we are hitting server every time. We go back and hit the server What if we want to make all of this validations Now if you want to do the basic model display order on the client side, it is pretty we have a validation scripts partial that is using So if we want to do client side validations in our view. So that brings the big question. How but we are using the one that is already good to name partial views with underscore. So we will follow that convention. Now in order You can directly say partial and then you have to exact name if you have a special mistake there, go away. But inside the partial view, if you open inside a script section of our view. So here And in there, we will have to add our partial Once you add this, let's run the application our category. And let's try to create a new you see, we get the validations. But we are not are done on client side, because of the script add a debugging point here and hit the Create it will reach our debugging point if then the client side validations are valid. The validation that we added. And if you continue, we can see how easy it was to add client side that we have added the client side validations I the default message that is being displayed. being displayed. On top of that you can see right available. And it is the same with the validation. model, you can see that's the property name. And want to display something that is not the same which is inside component model. And here we can let's add a space there. And it will correct that Let's go to our category, create category. And labels, we have a space, and perfect. Looks good. there are quite a few data annotations that you we also have a range attribute. I won't go into you can see the display attribute that which is the range attribute that specifies a and we'll stop the application. Inside our And here we have minimum and maximum value. So now if the display order is not in the the error messages that we see on the screen with if we want some other error message, we have a custom error message that will have our custom one and 100 only with two exclamation. Let's Let's hit Create we have our required one, let directly displays our custom validation. With that And we saw how to add custom error messages, Now inside our CREATE VIEW, I will because we don't want that right now. Let me go back and remove the debugging point. we want to work on editing and deleting functionality working as expected, For added we will go to category controller and We will copy that And paste it one more time. So let me change the action method names here. the page is loaded, it will display the existing Here, we will retrieve an integer, which will the category details and display them. So we can In those cases, we will return back not found, case, we will retrieve the category from database using our underscore DB dot categories. Now this So on that we have few more ways of finding one returns only one element every time, it will throw id is a primary key, so there is no chance that we have single, the difference between single exception if no elements are found for that ID, there are no elements. So default will not throw to single or default, we also have first and or default. And first, our default is that single more than one elements. First 34 will not throw of the list. So if more than one elements are singular default will throw an exception. Last but Find basically tries to find that based on the primary key. So we can use Find here and pass that ID and assign that to our variable. Let me with find you just had to pass the ID with first where we will have a generic object, let's should be equal to the ID that we have, if retrieve that and give me the first one out of For single or default, the syntax will be same, call this variable single. So these are three on the ID. I will comment two of them out, but I Entity Framework core. Now once we retrieve the If that is now that means again, we will we will return that category to the view. So which will have the category loaded. And we just same as the CREATE VIEW. But the only thing So we can copy the view that we have for that one more time. I can rename this to edit to our model will be the category model, but rather Now when we added a category, we want the button text we will change that from create We do not have which action method it should it will by default submit to the same action get is from edit, it will post back to But if you want to be explicit about the action, And you can write edit like that. So if you want the backdoor list will stay the same. So with let's go to the index view of category where we navigate to the Edit action method. That will be inside the TD, we will have one with the links. of ID, 75 and btn group, we can also give that a And we will use tag helpers inside this anchor and if we open up the bootstrap icon, let's try to let me copy that and paste that here. Let's run in just a second. While the application loads, us to category controller and edit action method. it has to go to the category controller, That is great. But if we go take a look at our So we have to pass that ID with our link. We can route. And then what is the name of the variable here, this will have to bind with our object. how dynamic we can get with the razor pages. With we should see the edit button. Yep, that is can see the URL where the ID is changing. If you and it automatically populates the name and as expected. To make this button look pretty, and some margin. Let's go back and refresh. And method is working as expected. In the next Now we are able to load the category that we want it will go to category controller, we you can have the same validation that we had we do not want to call the add, we want to set. This is a built in method with EF core where update all of the properties. And you do not look at the obj right here and it will find its it will check all the other properties where of those. So you can see it is handling all the to update any of the category based on the ID. changes and we are redirecting back to the Index options that are available with RTP sent we have multiple objects at the same time. We have update, and we will have to restart the application Let's go to our category. And let's And great you can see update is working guys to implement yourself is to add a button or a do that, it should take you to a details page like and the fields will be disabled, then that will on the post, it will delete the category and take what we did with edit category. But rather than to delete the category. Also, I want to show you you hit update here, you can see it does not the same. So all the validations are working we will not need any validations because you So good luck with the assignment. And I'll Last functionality we want to work on is the will copy edit as as, and we will paste I will change this to delete. And we will use the When we are deleting a category, we want to that on the view. So this functionality stays the post action method, you can either push the So we will have integer ID. And based on that ID need any model state validations. So I will remove to retrieve the category. So I'll say variable obj based on the ID we will find that if there is we have removed. And we will remove the object, That looks perfect. But we see an error with the and the parameters for to action method. So Let's work on adding the Delete view it displaying them. So let me copy edit, paste it Let me close all the other views so that we don't and the button let me make it danger. Since we the fields will be disabled. So let me copy that we have renamed the POST method to delete post. Let's run our application and give this a try. Let Let's go to our category. And we inside the index view. I will copy this and rather than square we will have to look for The get action will be delete. So we will use delete. That may give it a different color. And it will take you to the Delete category. Let's It will hit our breakpoint and you examine it was not now when we were editing button inside Delete. Let me hit continue here. And it But the reason behind that is inside Delete. All of them was enabled, it is primary key. That's So in this case, what we will do is we will have That's the only field we care about. And we will the form is posted. We will retrieve that ID Let's hit the delete button. This time the now, if you are editing, you make some change, you Studio 2022, they are just giving that right just rerun the application. So let's go to Perfect that category was deleted. But that delete one last thing. Right now inside delete, we have be Delete? In this case, it won't work because name here is delete post for post. So if you we have action name attribute right here. And we know that if a request comes in for delete action that is this particular action method. So let So let's go to category and So with that all the functionality What to display some alerts when someone deletes index view? How will we do that? For that we temp data has been provided with one single data stays there for only one request. that will be gone. So that is perfect for qualification. Let's take a look at how we'll create or edit or delete anything, we will So once the Create is successful here, before it is directly available as you can see, so inside there. So let me call this temp data that category created successfully. On create updated successfully. In delete, I will say storing some string inside temp data with the key we want to extract that inside the index view. success is not no. The main important thing is the key name, this will not work. So if this does And the value inside that. Let's save this With that change, let me try Great, you can see we have category created if you refresh, this will go away. So it only after that it goes away. If we try to edit any we see category updated successfully. When if you refresh that goes away. So this is great the actions that are performed. Now this temp and not just one page. So why not when we are that do that at a global level. So we do that partial views will be a perfect candidate. and we can call that partial view everywhere we but it is possible that this code will increase for notification. So let's move this code inside Now that we have added a code to display we want to make sure that this code is applicable we add more pages, we don't want to copy So the best thing is inside the shared That is the folder that I like to place all of right click Add View, we will go with the we will select Create as a partial view, we did That will create an empty partial view. I forgot once it is created. It's just a view, we What we want to do is the temp data check here. And it will do its check. Since we have a a temporary data for error. So we can display Now inside index, we can just say partial here. notification. Pretty clean, right? Let's say in you just have to add this partial Let's run our application and see if That's quiet to create a new category. that goes away. So with that our partial views text as an alert. Why don't we use something So with toaster difficult that GitHub page, we If you go to demo here and hit show toast, this In order to use that, we will copy the minify In the underscore layout of the CSS So we'll say link, Arielle is equal to stylesheet. So we will copy this and paste it right at the underscored notification level. So And we need to include that right here. Let's paste that. Also, when we are using a that is inside an IB we have the jQuery di st both of them in both the places. Next we we should have a usage right here. We have toaster exactly like this. So if we go back here, if JavaScript code. So we'll add a script tag. We JavaScript. And I've used toaster dot success and Make sure here you are using the single quotes. the C sharp variable. Let's copy this clip tag So with that we have added toaster Jas in our is running, these are just the JavaScript and let's try to edit some thing in the category. and everything is working as expected. Now that across all the pages. In that case, it does not even though it's just one line, it just doesn't pages, you can add that in underscored layout. So just before render body where we have all the our partial view. And that will make sure that it So make sure that you include only things because this will be loaded every time your refresh and try to delete a category, our Now that our application is up and running, and thing with the controller, we added the controller But with dotnet core, we have some help if you we will implement the same logic work with MVC We will hit add here. And this will create an MVC model. So we will select our model category. On a data context that will be used to access the I will leave the default name. But rather than since I want to delete that later on. Let's scaffold everything for us, it will create a the views for create, edit, delete details it has all the action methods as well as the post it has added five views. Let's run In order to navigate there, we will it takes us to the view here it displays our category, we With this, it also asks us to let's do that you can see it is not as efficient time will be the default one. So it asks the edit that back, view the details. And So all the crud functionalities with the views are you'll have to spend time on customizing this want to go into this directly is I wanted you to from scratch. But once you know this, you can most of the code will be the same. But that is that may remove the temp controller that we added is complete. Let's see how we can deploy this to And the final task is to deploy an application an account on portal.azure.com. I already have an you will get $200 of Free credit that you can is we need to create a SQL Server and a database databases. And let's hit the Add button. Usually but SQL Server I'd like to create here. That you will select the subscription that you have. I will call this resource group as taught at enter a database name, we will contact dotnet So let's create a server, the server name will And then we need an admin login. We cannot use admin SQL for password, you can use something Now next option is to be one to use elastic location that's not available. So let me select Then you need to select the compute flash and I will use the lowest option which is Let's apply. I do not want to pay more for the the redundancy backup, that is perfectly fine going to hit Create here. And it will take a while And perfect our database has been created. If SQL database. Now one thing that you will have from your local SQL Server, you will have to client IP that will enable your client IP and Let's hit the Save button to add your client IP Server. And we need to connect to that server. And we have connection string. Go back and paste it. And we will use SQL and password. Let's press Connect. Great, So with that in place, let's continue from the Now we are able to connect to our database from want to deploy our website to ensure for and hit publish. We will do all the setup directly And we will use the database that we created. we will be using Azure App Service for Windows. with the same account that you have used You will select the subscription name here, and So we will create a new app service here. I will call this bulky book web. And will be bulky book web dot Azure Websites dotnet. you do not have one, you can just create one. It a folder structure in which you can organize By default, there is as one hosting plan, I want new here. And we will select the free plan OK here and hit the Create button. This will take your app service. Once the app service is created, and then in the new database that is created. We Perfect the system. Let's hit finish here. Server database. You can either configured this it will display the database, which has a and we will have to go to our SQL database, we will copy this, and we will paste that we just need to make sure that password User ID looks good. We will say that we want to this. And inside the Entity Framework migrations, we will paste the connection string here as well. looks good. And the last option is since we are API service. So for that, we will have to change contained environment with dotnet six. With that, try to run the migration in the logs, we will for that. And you can see here it is failing pretty soon. And perfect. We see that here. It you can see it cannot access this IP address that paste that there notepad, let me copy this IP we will set the server And we will save that perfect. Now that should This time, it should be able to push all Once everything is done, it will load the website Great, it automatically opened up and perfect. there won't be any category. But And our alerts are also working. So perfect. With to Azure. That being said, this is only for getting charged for that. So let me remove all the The reason I want to delete is I only wanted to Azure. So with that, let's go to our resources, with that we have seen the CRUD operations that So first of all, congratulations on completing the quite a few things in this course. But right now, And there is a lot more to explore and learn course has come to an end, I have advanced courses learned here all the way to exploring new concept. In the full course of dotnet core MVC, we will to an anterior architecture, because that is a that is adopted with most complex project, then we our main project, we will be using a repository database. So we will see dependency injection and Then we will further split our which is a folder like structure, but everything but we will see ViewBag and view data with data Next we will use with a loads rich text editor with any application authentication and And dotnet team has given us the razor Class That makes all of the authentication super simple, because the basic functionality and table So we will see how to scaffold that identity we will see how roles play an important role. the role of the user that is logged in. In a real show you how to accept payments using Stripe and Session is one of the key feature that was very dotnet core also session is not gone. We just need our project. And we will see that in action. Most I will show you two approaches, one using the SMTP Then with the modern applications, Twitter, and so on. So I will show you to integrate social logins Lastly, there are some advanced concepts like view And once the data is seated in the database, our So you can see there are quite a few topics But with that you will get a solid foundation to this free course, please subscribe and like this every month. So good luck with your