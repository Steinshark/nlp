Gonna go and hit hit the start record button And I'm going to welcome everyone I am super excited about this project I was thinking that this was going to be Making a game for people to sort of learn from But basically that there were gonna be like Because I assumed that it would take a long But actually, the response from people has been I was so psyched about it And it's been so great to see Even on the test stream that we did Everyone was awesome, the community was awesome, And, it was just fantastic. And so I'm really looking forward to this. Before we get started started I just wanted to say a couple things And I'll probably try to, you know, At the beginning of every stream Who's coming back Who hasn't necessarily seen The livestream before. Basically this is a series where we With explanations of everything I'm doing. Now, in order to actually finish an entire game At some reasonable point in the future I cannot explain everything So I have to constantly reference back And, I have to trust that you're gonna be able And, if you don't understand them Ask questions, you can use the email link You can basically go there any time you want And there is a, sorry, handmadehero.org, And there is an Email a Question button, You can ask on the twitch chat There'll be a time for a Questions and Answers. Or you can just ask on internet forums, There's been a whole community of people So. I won't be able to drill down into everything, I'll have to reference back to stuff that So please, keep that in mind. It's ok if you get a little lost If we blow past something that We covered earlier on a different stream And you're like: What was that? All of the videos will be archived. You can go back and watch them again. You can go, sort of, look and see if people And we'll try to have a lot of resources You can also, if you preorder the game You'll get all the source code to it. Every night you can download the source code, Play around with it So hopefully there'll be plenty of resources With that said I am going to get started. And please keep in mind as we do this That basically everything that I'm Is one way To code a game from scratch. It is not the only way And I don't want you to think That you have to do absolutely everything I'm just showing you the way that So that you can see one complete You know, where there's nothing left out. But you should develop your own techniques And you should feel free to experiment And... and try different things Alright. Let's get going. So the first thing I wanna do Is I got to actually build Something. I have to get a project started. And as anyone who's ever actually done a game Or really probably any computer project knows Getting a project started is It's really unfortunate, but it is. And basically what happens is You're going to have to create something That allows you to build That you typed in into the source You're gonna have to do something that And in the intro stream we So if you're unfamilitar with it You're gonna have to go watch that to To sort of get you up to speed, What a compiler is, what a linker is, A compiler is something that takes And it turns it into partially, And a linker is something that gathers And puts it into an executable Which is something that we can And what we did in the test stream Where I was sort of teaching people What we did in the test stream was Which you can download for free, actually. This is Visual Studio 2013 Community Edition. And that's what we'll be using for compiling And running our code You can actually go get it Because Microsoft has now made it free Which you are if you're one You can download it here It doesn't cost any money. You can use it for free. So this tool right here Is what we're gonna be using to debug and compile. And what we did in the test stream Is we actually used this to make our project. But I never do that in real game development And most real game developers don't either Although, some certainly do, so if you want to You can certainly try to do that. The way that I do things Is I actually don't edit in here And I don't build from in here. I only run and debug from in here. I basically use this tool as my debugger And I access its compilation functions From the command line. Now we didn't cover the command line So I'm gonna talk a little bit about that here. Basically what happens is, on your machine, If you're on Linux Because you don't, you don't use But, if you're on Windows, It's possible you may never have It's possible these days, So if you go into your All Programs And you're looking under Accessories There is a thing here called Command Prompt. And when you click on it And all this text window is, Basically have a dialog with your computer You can type a command in, And it spits something back out to you. Now this is super tiny 'cause the I have my own over here that I set the fonts to. But I just wanted to show you the one that And basically we're gonna be using this To sort of show you how to execute some commands And I'll show you why you wanna execute But, if you're like me You wanna customize that a little bit. If you right-click on a Command Prompt shortcut And, I assume you all know how to do shortcuts, You can, you know, Control-click and drag You can make a shortcut for it, If you right-click on a shortcut You can go in here and you can customize Like the fonts, where it is on the screen. I won't belabor this because But you can basically customize it, I think during the pre, sort of the, People were saying the fonts were a So I'm gonna go ahead and actually just We made them brighter in Visual Studio and So I'm just gonna brighten those up Once you've got have that customized, Precisely the, you know, precisely the stuff And then the window will be where you want it, And like I said I made the fonts a little bigger So. First things first. What I like to do, and this is unusual. I don't know many people who do this. I've heard people tell me that it is If you used to use an Amiga, the computer If you used to use an Amiga computer, And, I don't know if that's true, I did use an Amiga for a long time, Probably my favorite computer of all time. What I like to do Is I like to use a command called subst And I'll actually go ahead and delete The subst that I actually already set up in How it actually works, or at least I'll try to. Let's see if I can get that to work. Yeah. So basically what I like to do is On Windows, you know, I've got, you know, I've got drives I've got the C drive, I've got the D drive, And you can quickly always refer to those By just hitting, you know, c: d: What I like to do is I like to take The, the place on my drive that I'm gonna And I like to subst a fake drive letter, So this command, subst, you can It doesn't do anything if But if you type subst with a, like /? Right? That's the universal symbol for, Let me go back to the big font version. If you type subst /? Basically all it is, is a command And then a drive letter that you want to make. Basically a fake drive, And then give a path on the actual hard drive Where you want that drive to essentially, exist. So I made a directory on the J drive, And I made it, called, work, And so I'm gonna subst w: to be work. And now, instead of having to always go to j: Now that's, that's basically, cd is probably A new command for people who don't Basically this is how you move around directories. So if you remember, up here You know, when you're working If you look at this thing, this is a path If you want to move around on You can use the cd command to do that. So you know, if you start out I want to go into the handmade directory, And it always prints out where it is here. Again that's not really, you should be able That's stuff you can look up, just how to So I'm not gonna teach you a ton of stuff. cd .. goes back and so on. You should just go learn those if you're totally Anyway, I like to subst a drive to it just It's less typing for me And it's so that if I ever need to It makes them so they're not quite so hardcoded. I can refer to w: something I move the drive or, you know, I move where it It's no big deal 'cause I can just subst So it's totally good. No big deal. Alright. So anyway, I made a directory here, And what I did, and I'll actually show For those of you just who are sort of warming up To the idea of having command line. You can see that I've actually, if Um, in the j:&lt;b&gt;\&lt;/b&gt;work&lt;b&gt;\&lt;/b&gt;handmade You can see that the directory listing in here And dir is what gets me that, right? Again, I'm really not gonna spend Becuase hopefully this is stuff you can And so I don't want to spend a lot of time But I'll just mention the things I do And basically I made a misc directory here And the reason I made a misc directory here Was because I decided to put my .emacs 'Cause I'm gonna be using And I figured that anyone who for some reason Along with me, instead of editing it in They will be able to do that. So anytime you actually go and, if you It'll have that .emacs file in there in case The same setup that I'm using. But other than that you will notice That is because we are gonna be doing So there's nothing in there. And absolutely everything that it takes Will be written in this directory So it will be full of good code Now. The first thing we're going to do And we are going to make a simple single That we can use to actually get our build going. And like I said, In fact tonight will probably be the It's too bad to start off the series This is where projects actually start, So, I am going to go ahead in here And, inside Emacs, you know, I'm not gonna explain all of these things I don't even necessarily encourage people to use So I think you should all use the text editor But hey If you really wanna follow me, So I'm gonna make a directory in here I'm gonna make a directory called code And inside that directory called code I am going to make a handmade... Actually I'm gonna call it Now I have Emacs programmed to insert And what this header actually is, A little bit anachronistic these days, Basically, you know, inside a comment What it basically does is it says, hey I am going to Actually put little markers in That some external tool could come along later And fill in the filename, And the revision it was checked So all of those are actually It's just a comment, it has nothing But it basically just puts in some boilerplate Automatically for me any time I create And this allows it to play nicely with That do this kind of stuff. So if you happen to check the source code into A revision control system that you prefer And it has keyword replacement, And all the files will get marked Now. I'm gonna take one quick second 'Cause I think we didn't do this I am going to see if I can Brighten the comments a little bit. Because I know that people were saying they And I think it will only take a So, list-colors-display, let's take a look. Those of you who were with me at the beginning Figuring out exactly what the So I feel like one of those grays looks good Maybe a gray50, let's say gray50 sounds good to me. We'll try that and we'll see, gray50. And we will see if that If that makes it a little bit easier to see, ok. There we go, so What I'm going to do in this file I am just going to insert the entry Now, those of you who actually We covered this a little bit, but basically What you wanna do whenever you're Is you're going to need to use So, it is basically the documentation So if I search for WinMain Which is the entry point for Windows You will see that the first hit is And that is the documentation for Windows. Now you may ask me, how do you How do you know what to type Well the answer is, WinMain you Because you could go look on some So that's not that interesting What is interesting is, for the rest of How do you know what to search for? Yeah there's MSDN and maybe Trust me, it's huge and it's very The answer is: That's one of the I don't think there is any way you The whole point of this series is That you should search for, to show you How to make stuff, and I'll go through it quickly So like I said I can't sit here and explain But, this whole series is supposed to be How did I know I was supposed to search It's like, you weren't. It's just a lot of bad trial and error That exposes you to these things, And so this series is supposed to actually But, just because I'm gonna show It doesn't mean you shouldn't learn You really need to learn how to use this And to understand what they say Because it's how you're going to be able Because like I said, I can't go On what every last thing is, You know, a good explanation of each part You know, do more exploring on your own Absolutely everything that I do If I don't have, you know, if I Haven't sort of being able to Here's why there's an HINSTANCE and You kind of, you know, So. This is the entry point And technically, it's actually the entry point That links with our program But we'll see that in just one second. For now we have to concentrate So what I'm gonna do, is I'm gonna And I paste that into our program. Now what we wanna do, and these I don't know why the leave them in These _In_s are little markups, that They're not actually C code really. They are basically just something That lets you know that the parameters As opposed... or into the function As opposed to _Out_ parameters So. I am going to include windows.h for now. Which is the header file on Windows That has all of the definitions, well It's not actually all, many of That are functions that we will In order to get our job done. To actually get us up and running And again, if you don't know what I highly recommend you go watch The test stream. I'm kind of assuming And if they can't read C code, And watch that intro stream because These things, so that you won't be So. And it's all, I should also say... If you go to handmadehero.org It's on this Archive button This Archive button right here has That sort of stuff, so If you're totally new to programming You definitely want to start there. But And can read C reasonably ok, Basically what we're doing in here And that's just a bunch of definitions That Windows wants us to use to And this is going to be an entry point A handle to our executable This hPrevInstance is not something we It's sort of legacy at this point. Our command line, the command line When we ran the program, and nCmdShow Which I'll say what it again is because I said what it is on the intro stream When you actually look at an executable, so For example if I go out here to To one of these guys and I hit Properties You see this little Run dialog box? It's like Run: and it's got this dropdown, Well, whatever that gets set to When Windows calls into us and It's gonna be here, it's that int nCmdShow. Like it was so important they decided So yeah, there you go, anyway So I'm not gonna do anything here So I'm just gonna leave this as a stub We're not gonna do any code, Is we need to get this building Now here's how I like to do builds. And this is going to shock and horrify Absolutely everyone out there, But you know what? It's how I build stuff. It's how I build all my stuff these days. And I'm showing you how I program games, That's where it's at. Here's how I do it. In the directory, the root For the project, basically wherever I make what is called a build.bat file And what a bat file is, and the About the command line, which is this thing Where you can type in commands that do stuff And I can get printouts back. A bat file is basically just a script. It's a script of things that the That's it. And so what I typically do nowadays Is I don't actually bother using What other programmers do Is they typically have something So basically, like for example GNU Make Would be an example of an original one. They use things called Ninja, for example. Build system. I don't know how to actually search for that 'Cause there are real ninjas in the world. There you go. A small build system with a focus on speed. They use that. They use something called CMake. A lot of these things. People love their build tools, They just like to have build tools And build tools that launch scripts And build tools for analyzing And build tools for optimizing the build They love it. I don't love it 'Cause usually what I find is I spend Just trying to get stuff to build. So I just said screw it, It's a batch file. That's all there is. And the batch file, compiles the code. Compiles all the code, every time. And the reason that's gonna shock and horrify Oh. My. God. The whole point of a makefile Is that you only compile the code And that's what a lot of those utilities do, So that they only do the minimal amount And when projects get very large, But I have found that actually If you just code sanely I now compile very large programs Certainly, larger... Considerably larger than what we Full, professional-quality game Much larger, by just using a batch file And it's only a couple of seconds. So I think the time has come for people But, you know, again, like I said, just me. So what we're gonna do here is we're That is nothing other than Basically, echo off is a command that says Don't print the things in this Don't show me every line That you're about to run when you run it. And this little @ symbol here Is basically a thing that says Because, basically what will happen is You know, let's say I save that here. So I got that build.bat So I go into by code directory You can see it there, it's right here. And basically I run that build.bat file And you can see it prints out So the line that I was trying to Putting lines out to the It's actually itself echoing. So the @ is basically a thing that Because you have to, it hasn't That you do it, yeah. Windows batch files ladies and gentleman, And so then the next thing that I need to do Is I need to compile this program. And the way you compile programs is you use Basically, the Microsoft compiler is called cl. And if you type it in What you'll get, even after you've Is you'll get this note here It's like 'cl' is not recognized As an internal or external command, And the reason that you get that is because There's a thing called the Path. In fact if you hit set, you can see it It's this gigantic thing that's Yeah, kinda crazy. Basically there's this thing And what it is, is anytime These are all the actual variables They're things called environment You don't really need to know any But Path is somewhat important. What Path is, is this thing that When I type for a command, look In order, and the first time you So. What happens is when I type cl it can't This happens even after you've installed How do I get it to go? Well, it turns out that Visual Studio And we're gonna work around this But at first I don't wanna quite I just wanna show you how to And what you have to do, Where Visual Studio actually is, ok? So basically, I don't know if It's called vcvars32, anyone Or I think it's vcvarsall, actually, might be it. Basically what we're doing is we're going That Visual Studio installs, that To do the compiles from the command line. So. Where that is, is you have to first find Visual Studio itself, right? So we're gonna type c: to go over We're going to cd to what's called And this is not... this is a trick. But we're gonna go over to the Which is where you would think it is, And here you can see Microsoft Visual Studio 12 Which is the thing we installed. Now, Microsoft likes to do this They like to call their program But then you list it on the drive So, you just get to magically What version number your thing As opposed to the like branding thing And they constantly do this, like it's never When you go to actually look for it. It's maddening. It's Microsoft. Anyway If I go into there There it is. If I go into there, I can do a What is in here, and I can look And I can start to get nervous Because there is... where is, I know what should be in here, I said there was a cl and as you Well the reason it's not there So, what happened long long When Windows was still only running on Is, there was, you know, a split And there was a, a sort of a push by Intel Which was gonna be a 64-bit processor, it And, meanwhile AMD staid with x86 And... because they didn't have the And they started developing their Which of course is the CPU Well, the Itanium project that Intel I mean, it exists, and it's something But nobody wanted to go to a And switch to this whole new thing so, What ended up happening is AMD's Which was just x86 upgraded to And it still could run x86 code just fine. That's the thing that won. And when, you know, everything in And you had things like Windows 7 64-bit When you install those, right? Those are things that are using the And, you know, we'll talk What the differences between 32 Later on the stream when it But basically what happened at that time Was Microsoft decided Probably for reasons of trying Maybe just because they weren't, They decided to make two So there's Program Files, And basically programs that are compiled To run under the 32-bit Go into the x86 one And things that are designed to Go into the main Program Files one. And Visual Studio still hasn't To run on 64-bit computers. Now, it's been I don't even Since we've all been Running, I mean, developers especially But, like, they couldn't figure it out, So heaven knows why that's going on, So what you actually have todo And in there, you will see the Microsoft Visual Studio 12, There, yeah, there we go. And in there Now we can actually find the So when we hit dir inside the You will se all of this stuff, That stands for Visual C. And we are using C so that We can go in there and when vcvarsall.bat And vcvarsall.bat is the thing So you'll notice, cl still vcvarsall.bat, if you run that It will configure all the stuff, And now it works. But. There is a catch ladies and gentleman. vcvarsall Only compiles for running a particular Either the 64-bit one Or the 32-bit one. So if we want to run the 64-bit one We actually have to call vcvars x64. 'Cause you can notice, when I ran it, So that's the 32-bit compiler, I think you can compile for... You may not be able to, I don't even know. I haven't tried to compile 32-bit I don't know. We're gonna start off compiling 64-bit code Because that is the most prevalent Most prevalent PC CPU operating system And it's a more powerful chipset, chip type 'Cause it has more instructions So we are going to go ahead and run that. And if you put the x64 after it Then when you run cl, you can see Everything is the same, except So what you have to remember And I know it's a little annoying Is you have to remember to run this Right? But, we can do a little bit better. If we want to we can do a little better, anyway. What I like to do, 'cause I showed What I like to do is I like to go See the Startup folder up here? If I right-click on... Well, actually I guess you wouldn't have one yet, That basically brings up a folder that When the machine starts up. Wo what I like to do is I like to And I just edit it with Notepad, I don't even bother opening Emacs or anything. But I like putting a file in there called And so while you're in there And run vcvarsall right from there, right? Now there's a catch, of course, The catch is, that if you're in a batch file And you wanna call another batch file In order to be compatible with the most number You have to use the command call. Do not ask me why. I really do not know. I think it's some historical reason Some state in order for the other After you finished it, and blah blah blah. But assuming that you want this to And then actually come back and Put into Startup... If you didn't put any more lines you'd be fine, But assuming you actually wanted You can put that in there. Now, the only thing I'm not sure about Because I don't always do it this way Is whether that's sticky for the whole system. I don't know if it is, it might not be. And so the other thing that you can do... I'm just showing that as one option, Time trying this on the stream. The other thing that you can do, Since this definitely does work subst do always works so I The other thing you can do and the Because... You know? I don't have a because. I'm not even gonna say because And, you know, don't make up a This is just the way I do it. So maybe that means it doesn't This is the way I've always done it, So, in here, I've got my misc directory Where I put stuff that, you know, you don't have I'm gonna go ahead and I'm gonna And I'm just gonna call that shell.bat Right? I'm gonna call that shell.bat And in there I'm gonna put The actual thing that I'm gonna call, right? And so that way, anything that I want to happen Any sort of configuration for That I want to have happen, If that makes sense, right? And there's some things that we might wanna do Actually, I can show you some That me might wanna do in there, We can also make the Path point So if we wanna put like little tools We can actually make it so that So for example, if I wanted to... Let's say... So let's say I wanna make the Path So I can do Which just means insert the old Path in here Right? I can do that, set the Path equal Oh well, you know what? Why not? I'm gonna make it so that it looks in Our handmade directory And underneath misc. Right? So anything in the handmade\misc You know what? Let's make it... should we make it bin? Nah, why complicate things? So I'm gonna make it look in the And so that way, anytime we run It can look in there and it can actually Right? And so that will be pretty cool. So. Now, what happens if we actually go in here If we actually run this guy, right? Let's see what happens when we do cl Yeah, 'cl' is not recognized as an intenal So I was right to suspect that 'Cause if we put it in the startup It's only gonna be scoped to that Like, if you noticed, right? I go in here to Startup, I run this thing It kind of flashes, it does the command and goes. subst is sticky, it works for the whole machine. You can see even Explorer gets that But vcvarsall Just sets local environment And so it has to be local to that shell. So basically what we wanna do is When we actually start the shell We want to do those changes, right? So we want to make sure that we Right? Run our shell.bat Um, oh, that's good. Already got a typo. We haven't even started programming yet. Anything that's got spaces in it Since spaces are considered delimiting You gotta enclose them in double quotes. I forget that all the time And I suspect you will too. Anyway, I run that, and that'll run our vcvars And now we will get our cl back, We can go one step further And, well, you know what? I may even remember this I'm not gonna promise it to you, I may... Actually remember the command line switch To actually execute something On startup, on its own. So we don't even have to go in Hmmmmm... Is it /k? Do we think it's /k? Does anyone wanna place bets? Some poeple on the stream know. We're gonna look it up in a second We're gonna type /k and then we're handmade\misc\shell.bat Like that, and we're gonna see what happens. Bam. Did you see that? Did you see that? That is a useless set of neurons right there, Remembering stuff like that. When you get to be 38 years old now And have dealt with this stuff Ok so now we are at a position Where we can double-click on that icon And we can actually run a compiler. Congratulations. That is some Surely it's not very far to a complete Surely. Ok. So anyway, if we can do a cl then That is mostly all we need. So if we go in here And, oh, and I guess I did that I didn't actually show anything that we I set the Path to there So basically obviously we can run shell again. And that would work because it Now, remember, shell wasn't there but it If I hit click set again, you can see That I got right here, it now So it's looking through each of these, right? And it's gotta find the stuff that I put there. So, now that I've got that set I can put something else in there, So why don't I, instead of Let's, let's stop doing that, let's, What we can actually do instead Is we can run Emacs directly from our shell. So basically the only thing we'll Ok. So, and you know what? So we're gonna have a little party here. Ok. So if I want to I can basically make another batch file So inside handmade\misc I will make notepad... And I will go ahead and say that My Emacs launcher. Why did... Oh, you know what? I should give it a name so I don't notepad emacs.bat And I do want to create a new file. I'm gonna @echo off And I'm gonna go over here to the And I'm gonna copy in what was in there. So, what's interesting about this And I'll show you this part aswell And it's good for you to know When you do this runemacs command to run Emacs And this has to be wherever you installed it, So wherever you unzipped it, you're And you're gonna have to call that. I unzipped it just into Program Files (x86) Why not? You can put it into -q -l w:&lt;b&gt;\&lt;/b&gt;handmade\misc\.emacs Load this as the config file, You know, I don't even know what -q is -l loads this file right here I believe, which is the one that I And so that way it will come up So I'm gonna go ahead and save that. And close it. And now, no matter where we are, in theory If we wish to summon our editor You can type emacs, and bum, there it is. Close it. Comes back. Everyone is happy. And, we're starting to get a little closer The other thing that is good to know, devenv is the name of the actual And if I type that in and hit return It will load it, just like I'd clicked We are at the point Where all we need... Plew, plew. Is just our command prompt, So get rid of those icons, So. That is the drudgework of setting up A machine to actually develop on. If you want to have some of the You can go grab GNU Emacs yourself. You can search for it here, And it willl come up. You can click through to the I think, there's an Obtaining, You click on nearby GNU mirror And after clicking on that there's a windows/ And get the correct one, I am using... Because a lot of stuff has broken in I am using version 23.4.1 And so you can go in and you can Which is this bin, 23.4-bin-i386.zip That's what I'm using. Ok. So. We have about 20 minutes left to go Which is plenty of time Drudgework done. Here we go. So I'm gonna actually go in here I'm gonna hit emacs And I'm gonna open up my build.bat I can now take this win32_handmade And I'm gonna say I want to build this code But I don't want to build it I don't want to build it And the reason that I don't want to do that Is be... well, you know what? Why tell you when I can show you? So, cl is the compiler If I wanna compile something cl win32_handmade.cpp It will then do the compilation Here is the win32_handmade.exe Here is the win32_handmade.obj Now. I will be getting a little So, you don't have to worry Becuase we'll talk about compiler Later on down the road when we talk But. When you do cl, if I put /Zi That will actually cause it to generate Which allows us to debug the When I do that you will notice that There is just a lot of crap in here. There is this pdb file, which is There's another pdb file which is These are both part of the debug info, Don't quote me on that. They change it every version, I don't But I don't think you can, The obj file is the intermediate file This was the thing that it linked with. I think this is some kind of So, it's gonna start spewing And I don't want my directory That is not ok, that is not ok. I am getting rid of those pdbs And you noticed I did Which basically says delete everything I'm gonna delete *.ilk And I am back to what I actually So, I'm even gonna delete that, because We're gonna try and make that So what I wanna do is I Force all this stuff to go somewhere So what I'm gonna is I'm gonna use pushd and popd means So I'm going to build this Back a few, in build, I think. I'm gonna go back two of these, this So I'm gonna back two directories So, out of code, out of handmade. And I am going to go into a build directory. Now of course that may not exist, so I'm Then, I am going to cl This file. I'm going to cl handmade/code/win32_handmade.cpp Like that. And then I'm gonna popd back out. So that will bring me back to Before I ran this build.bat Now that's not strictly necessary But basically pushd and popd are In a block So that when you're done with it, you So that you don't have to remember it. Right? If I was to just use a cd here, And that's not going to be very useful. Here's my build.bat Not off to a good start, How about that? I'm using the wrong... You can tell Linux of course uses slashes for directories, And you can't, you can't mix Although you should've been able todo that. You know what I think? You should've been able to do that, shouldn't you? Oh, you know, you can do it in the cl, No, maybe not. Alright, what's going on here? handmade\code\win32... Do? win32_handmade.cpp What is the complaint? Syntax for the command is incorrect. Ohh, wow, well, I'm very glad Because I believe, that means... That we did not actually enable Windows, ladies and gentleman, So, I believe... This may actually be, let's see, pushd Let's see, pushd You're gonna have to get used to this, by the way, Especially in things that I've done... So that actually works just fine. The pushd works fine the way that it The mkdir So what is it actually complaining about? Is this just becuase we don't have That would be starnge. At least I feel like that would be strange. But it could actually be true, I always have them enabled on my machine. No, it worked fine. So there you go, that just works. Cannot open source file: 'handmade\code\win32_handmade.cpp': So I'm gonna actually just go ahead and see... So that I can see what actual directory It ends up in when it tries to do the build. So it ends up in w:\build Ok, everything is fine, That's totally fine. So what I did is I told it to go And then I told it that this was the path Because of course these paths are I'm using relative paths So that you can build it in your machine So instead of typing w:&lt;b&gt;\&lt;/b&gt;handmade right? If I'd typed that, it probably And you can see that it does. But since I tried to use a relative path, So I have to go back out one to get it, yeah. Fantastic. This is the kind of stuff So that actually builds, as you can see, It didn't dump anything in our directory. And so now if I dir that build directory, There it is, right? It's just sitting there, All is well and good. Now you may ask, where does all the Well, the answer is there isn't going That is, what you see right here, Right up 'til the day we ship it, If you think I'm kidding, And we are going to be totally fine, So that is really all you need to build And this will change a little Is we are going to start putting things 'Cause the compiler has a lot of options And we are going to do stuff That we wanted to produce certain types We're going to control a And so, saying it's exactly this But this is the entirety of the code Basically we'll just be adding things To this line, we'll probably set Like a set of debug flags and a set of We're trying to use at any time. So the only thing I'm gonna do, is again, And I'm gonna add some compiler flags, Debug info, that debug info that we I'm going to build that. And then back in that build directory, There it is. So. What we can do now, is we can We actually have a working Win32 program now. Built by the command line using Which is all good, all good. If I now want to actually go and step That devenv thing that brings up With the actual path to the executable So there we go. Up comes our project. Now if you click in Solution Explorer, You know, we never created a project, right? Well basically if you tell devenv From the command line like this If will just make a dummy solution for it And you can go in and set the debug Just as if, it was some project So, what I do wanna do is, I do want to say Becuase one of the things that's true Is that you basically have a directory That the program was launched in, And basically everything that you do When you try to load files If you use a relative path, like And just to be clear about what Again, something you should probably look up But, a relative path is basically saying I'm at some place, and you can see Right here, w:&lt;b&gt;\&lt;/b&gt;handmade\code But if I want to reference something I can use an absolute path by Like dir w:\build says You know, tells me exactly where But I can also use a relative path Which is go back one, go back two, That's relative. But the question is And so basically just like the shell We have a current working directory And that current working directory Because if we want our game to run Without any external knowledge of where it is We kind of want it to load things And wherever the user happens to run it. So to set ourselves up for success I am basically going to say, well Let's make a directory under handmade Right? Called, hmmm, I usually call it data. To be honest with you, I'm open to other suggestions. So I'm gonna make a directory called data And I'm gonna say that we're gonna put Basically what we will be So the packaged art assets or I'm gonna put those underneath So in order to tell this That when we debug the program We want you to run it I'm gonna put that, ups, So that it knows the working directory, That that's where I want it. So I'm gonna go in here, See Working Directory? I'm gonna type in the working directory, Hopefully this... We will almost never be editing So hopefully you don't even really There's a thing called Working Directory We're just gonna put in that handmade\data So now when we run our code It will run it as if it was So we can kind of, always be running Sort of in a closer configuration To end users who buy the game So that we won't have surprises Ok. Furthermore, this Arguments field here Is where we'll put things For like, you know, parameters and stuff, Alright. So once we've set that, And F11 will... oops I gotta close this Properties window. Well, no, it closed it for me, We're gonna hit F11 which means And stop on the first line of main Which is exactly what it did. And you can see the little thing This is actually our code. This is the thing that we built, So, we can go like this, it ends. Our first Windows program But, you may ask what is this That's a very good question. We covered it in the intro stream In this stream aswell So. Now that we have our build going We can start to look at actual When I said this was the entry point You know, what is an entry point? For those of you who are well familiar Who watched the intro stream. You know that this is a function. It's something that gets called, And it returns to whoever who called it And that is what it does But the question is who called us Well, the answer is That in this particular way of compiling It's not actually Windows the The person who actually calls into us Now the C Runtime Library is something As mandated by the C specification And if you go online In fact you can look for You will find, probably, That talks about what is in it. So let's see if I can get something Yes, here we go, CRT, If I go into something like And open that up, you can see that it's That tells me about the sorts of things Right? It's like some, you know, Functions that are in the C Runtime Library setlocale, _wsetlocale, who knows, But point being, this is stuff It is not in the operating system. It's just part of the standard library When they ship a C compiler, because code That's all well and good, But, the truth of the matter is It's actually very very difficult nowadays Without the compiler essentially sticking So I'm not really gonna call 'Cause I wanna show you how to make But, we will still have to link Because if we don't link The compiler is going to be very unhappy. It counts on the C Runtime Library Like stack grows Like C++ initializer list All sorts of things are actually Into that C Runtime Library You have to implement all that For the fact that the compiler I don't think that's particularly useful And nobody I know actually ships Without linking to the So we are not actually going But, what that does mean is You should be aware, when you get called, If I hit F11 here I can bring up something And waht the call stack is, oh... Awesome, is this not set? So basically you can see it came up In I guess what you might want to call The call stack is a thing that shows you Basically by showing all of the functions That have been called, that called eachother Right? It's the entire stack of functions So, it decided to only show me Right? It didn't show me any functions that But, it looks like there's a button here You can see it right here If you hit Show External Code All of the sudden you can see ntdll.dll and kernel32.dll We're gonna talk more about what dlls are So don't get too hung up But point being that's code that's If we jump out there we're just That's basically stuff that's in the operating 'Cause Microsoft does not release But, after Windows calls into The first thing that's called is not us, It is actually... Some code we didn't write. It is crt0.c And you can see that You'll actually get a tooltip that Out in the Visual Studio directory So this is the code that they shipped And they shipped the source code So even though it's compiled code We can actually view the source, To provide that So as you can see there's a whole host And this The place where things start up Right? So if we really really truly Where the code starts When Windows get-loads our executables, This is actually where the code starts. These things They're in code we did not write And they are doing a bunch of things Which unfortunately we're not It's good to know that it's there It then will actually dispatch to us And so you can see That's where we go, right? So it's all good. That is what is actually happening. Alright. So one more thing I wanna do Just to get things to a place So that we can actually do something If I hit, let's see... I want to be able to basically make it My code from inside Emacs. But I don't have it set up What I wanna do is I wanna make it And I can... I can basically, I think I can actually just do it right here, No, I guess it doesn't. You know what? 'Cause I don't actually wanna kind of We probably have, maybe 5 I will show you how to get that But, for right now I guess Is we could at least just have So that we know that it's actually So what I'm gonna do, is I'm gonna Why not? Actually I guess I could just But I think I wanna call MessageBoxEx 'Cause, you know, it's a little more fun. MessageBoxEx is just something It's the easiest thing for us to call That our code is actually working. So if we look at it here We can look at MessageBox Because they both do basically the So we'll just call MessageBox, MessageBox basically takes a bunch of things That we'll be covering more in detail But the HWND is basically a And we haven't open a window yet It then takes a string, ANSI string That's basically what you want to... What you want to display This is Handmade Hero. And it has a caption Which is the thing that appears I believe of it, so let's make that Right? And then it has like a little, I wanna say That basically says what kind What you want it to be, well we don't So we're gonna to pass MB_OK And we don't really have a... I guess anything in particular Warn about anything so we are going So, for those of you who were with me In the intro stream This is a bitwise operator, If you're uncomfortable with that Because it will tell you about that operator But in that stream people were asking, do you And I said something like: I bet we'll do some in the first stream, And ladies and gentleman, You can see right here That it actually happens Is because the way that people often Like when you just wanna set some flags Like ok, I'm calling this function Do this, do that, don't do this, don't do that. Some little booleans like toggles. A lot of times what they'll do is Which is basically saying that each bit In a particular sized thing Each bit means a specific thing And what you'll do is you'll or To set the things that you want set. So in this case we want MB_OK To say that it's a dialog box And in this case we want MB_ICONINFORMATION Information symbol next to it. And we're gonna or those two together To basically say that that is what Now if I go ahead and do our build... Oops, if I actually go to the right It will rebuild our thing, And, we get to the other part So... When we actually call something And this is a little bit confusing, I, I... This is one of those things that you But it does do it for you and But. When you compile a program, And you can see our command to Did not actually include anything Right? It's handmade.cpp And when I built it you saw me run it So you're like: oh ok, that makes sense. I build the cpp file, right? It builds that executable, If you're unfamiliar with it you can It builds our executable and That's all that had to happen, What actually happens is Windows needs to basically bind to us And we did talk about this in But Windows basically needs to find the And it needs to be able to go in there, And patch those locations To point to its own code that's running And in order to do that it uses What happens is when you link When you actually build And it links together the obj files What it has to do is it has to Here are the functions that Windows Here are the functions you're going And I'm going to put little markers in This library tells me how to put Where they should go So that they can actually be found And off you go. And in the intro stream I drew a little Where Windows loads it, it looks at that It goes through, patches your executable And that sort of stuff, I highly recommend watching the episode Anyway, the problem is, we didn't So technicaly we should not actually At all. And I don't actually know if it's true because I'm not actually sure if they do, you know what? Since I know how to test it. Let's actually just call... I'll call GetModuleHandle, Yeah, so they do. So basically what happens is One import library The import library that they sneak in So basically you're allowed to call things You can call those. We'll see a bunch of them when we actually We'll see a bunch of calls. But when you call into the kernel You're actually fine because they If you call into something else For example the UI system Which exists in something called It doesn't include it. So basically what I have to do Is I have to go in here And I have to specify, Totally doing this by memory, Is it /LINKER or /LINK? /LINKER... let's, What is the option for the linker? In fact do I even need to specify No I don't, nevermind. So, anyway... If I go in there and give it the That I actually need to call the function And where that function is actually Then all of the sudden my code compiles, If I don't do that If I don't specify the import libraries Right? And I compile it Then I'll get what's called an Again, covered in the stream They happen in other languages aswell But basically what it says is I can't find the actual, Actual call that I need to make That you're saying that windows.h defined I can't actually find where that And it makes sense that it can't find it And neither did windows.h, all it did So what the library does is it The information it needs To actually sort of insert The placeholder that says: Patch this up to call into Windows code 'Cause this doesn't exist in our executable, Now, the question is, I mean, I knew 'cause it was memory, Well the anser is: I said, you gotta get What you wanna do is you wanna Of MSDN's documentation on the And down there you will find... Explanations of that particular function. Now you will see... What the minimum client is And if you care about server then you We only ship to basic client OSs. We're not gonna ship to people The minimum supported client If that function is callable by you On your target platform. So if I'm targeting I can't call this function. I have to call some other function, let's say. Now I actually think this function So I think this might be a little agressive When it says Windows 2000 Professional, Certainly antyhing after that Windows XP will probably be Right? So we can, we're, It tells you what header it's in Basically it says: Well it's in Winuser It tells you what dll it's in, so that's To actually support you. And we'll talk about what dlls are later For things like the gamepad support. And it tells you what library So all I did, right? Essentially was, I'm short-circuiting But all you actually have to do Is go find the documentation for the function Go down to the bottom And right there it will tell you What the lib is that you need, We covered this on the other stream A lot of functions, if they take strings They have an ANSI and a wide The wide character version is And the ANSI version is if you have Just regular ASCII that you're Now you may wonder, And I called this MessageBox function Like, what's going on there? Well the answer is because Everything that takes a string The function that you actually call. You actually call a macro So inside windows.h Which is how you do macros in C, It is actually a #define that To MessageBoxA or MessageBoxW Depending on whether or not you're compiling By default, if you just call cl The compiler is set to compile So it's gonna compile in ANSI mode Which means that we're gonna call Because this is an ANSI string. But if we were trying to pass We wouldn't have to switch the Which is, basically Putting in a #define or anything We don't have to do anything like that. We could just go ahead and The macro is just something Windows did So we can actually just actually And call the actual function And that'll work just fine Again, we need that user32.lib To make sure that it can find it But other than that So now, if we go to our program Take out the breakpoint You can see that our app Something on the screen. Now that is completely I would much rather see some But. Like I said, there is a lot of drudgework And we had to do that all tonight. So in order to keep this stream To only an hour I will... Even though I would love to go spend Some graphics on the screen I am not going to do that, We will do that tomorrow. And honestly, I guess I would say Because we got everything out of the way That we need to get out of the way So from here, tomorrow At 8:00 pm, pacific time, again We will, probably be able to, I think Open a Window and draw some stuff to it. We may not get to user input yet But I think we'll be able to draw, And the day after that, Basic user input So. With that I'd like to thank everyone The very first episode of Handmade Hero. It has been delightful, Which is what happens at the Even though it was drudgework today I still enjoyed going through it That you will come back tomorrow Frankly, a lot more exciting. But We will still be dealing with So we're still not quite It will be more exciting because at least The real excitement will probably pick up In a week or so when we're off With all fun game code And rendering code which It's why I like to do it, instead of If you would like to Or if you already You can preorder the game here It will give you an email So for those of you who got And what I will do is tonight I will I will upload that And so you can go back to that email Which you should bookmark because you can You can go there, you can download that code So that you can see everything that we did. I know I went fast through everything today And we're gonna be going fast That's just what we're gonna have to do To actually get through In a reasonable amount of time. But While we're going fast It's easy if you can go back to the Think about each individual thing, Make sure that you're comforable with it, Go read that MSDN, get comfortable there, Call some other stuff, Play with the build, play with the compiler, Because really, the way that you're What I do here on the stream is Showing you how to make the game But what's really gonna solidify it And you doing these things yourself. So you should go back now and try All of that stuff. Try it yourself, play around with it yourself. Make the mistakes, make the same mistakes And really get comfortable with that stuff. And if you do that every day, just spend And learning about them, that's really 'Cause if you just watch me I mean if you're just entertained There's no problem with that. But if you really wanna learn Definitely go through. Do it yourself. Ask questions, go on the interntet, Really soak that stuff in Because that's what's really gonna When you actually go and do it yourself And sort of struggle through it Oh, what did he do there? Oh, right he did this, That process is what's gonna really drill it And you're gonna have it down cold. So that's really the thing to do So, that's it for this stream. There will now be about 30 minutes of Q&amp;A. And I will stop the recording now so that And so people can sort of jump between So, I will see you back here