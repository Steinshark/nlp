Florian from neuro nine has a popular software teach you how to use the VIM code editor. What is Code Camp. In today's video, I want to guide you step by step. And I want to start out with some what vim actually is, and also showing you a plugins installed and all that. And I want to do VIM is this boring feature list text editor that have any alternatives on a server, for example, and a lot of people don't even know how to exit this why you should use Vim, why learning vim can to move on to the installation to finding the vim on Windows. For example, if you don't have that. And then we're going to get into some basic bindings commands to more advanced key bindings, macros and registers. And in the end, we're going to talk about how to build an actual sort of approximating VS code, or even better using Alright, so let us get started with the or explain to you why using vim can be interesting I'm just going to show you my setup and what I can that's interesting or not. But before we get into is showing you what keys I pressed. So right now can see that I'm typing ABC up here. But you can also see that if I press backspace, for example, it is also locked. So whatever I press, whatever this is important because a lot of times when certain effects, but you don't really see what I'm kind of keys I'm pressing in order to do certain probably most of you know VIM is or no vim looks and this is essentially just a VI command. So VI clients dot c. And when I opened this, this is text editor here, you don't even know how to leave you don't know how to type with it, maybe you it. This is not what I'm using on a daily basis. what I'm using is new vim with a couple indented can look like that. So in vim clients see is just a motivation. Whatever I show you, you you maybe some key bindings, I'm going to show you I'm just showing you what you can do here. So you can see a different airline on the bottom up a file tree on the left here, I can navigate I can open up the tag bar, which is essentially jump to certain functions. And since this is C, I not sure if that works or how that works. So this actually doesn't look like a terminal different style. And the difference here is, one editor to to download, and it always looks is my custom editor, I decided that I want to this file tree here, I decided that I want to be bash, I decided that I want to be able to do that. these plugins and I can decide how I want to And I do all of that. So that's the editor itself. can use so called vim bindings, which we're going example, let's say I want to delete everything here and this curly bracket. How I would do it in delete this. What I can do here in VIM is I can what I can do is I can just say delete inner, and here, delete inner curly brackets, and then it the key bindings yet. We're going to learn about let's say I'm here I don't I want to delete get in Next, I want to delete them, I can just I can do all sorts of things, I can just without using the mouse in any complicated I'm here, I want to change everything inside So a couple of small things that you might not really relevant, because who cares if by by just selecting it with a mouse, but the my experience that I have enjoyed a huge speed up 300% faster, because you don't have to when using the keyboard, you can do things so okay, but typing certain characters to change. For kind of confusing. And it isn't in the beginning you train using vim minutes, you use it on a daily to it, and then all of a sudden, things get quite here. I'm working right now, I don't even think not in the insert mode, ci parentheses, and there to change the line here. CC, I changed the whole using Vim, first of all allows you to create your but you can also use Vim, not only in Vim. Vim tools. So you can use Vim bindings via plugins or use Vim bindings in VS code. You can use them in our studio in all sorts of applications. You have to stick to the terminal. If you don't like IntelliJ, whatever you want to use, and you can train them, they're going to speed up your coding speed. So this is my motivation for now. And Now when it comes to the installation, it all working on. If you're working on Linux or Mac, at least you have the eye. The differences recent version, a more improved version, and And if you see here, vim vi improved, you have you can try to type Vim, and maybe then it says if it only has VI and it doesn't show you that Linux and Mac is you want to use your package distributions, for example, sudo, apt install, Pac, man, s, Vim, and so on, and so forth, you have it in your terminal. Now on Windows, go to the PowerShell. For example, you can PowerShell. So then you have an actual terminal just download the graphical user interface to the Windows subsystem for Linux. So actually virtual box, but with a Windows subsystem So you just go to the store, you download it, that I'm not going to make one here because the Windows subsystem for Linux, and then you And then Vim. So this is how you install it. going to start with the basics. Alright, so let want to do is we want to open a file. And for that and then a file name, for example, clients dot c, VIM is going to open the file for editing, we dismiss changes, and so on. If we type some what's going to happen is that we're going to but something like test dot txt, this is going blank file, and once I write the changes to the let us start now with client dot c, and the first is how do I get out of it? So I'm going to do is you need to type colon, Q, and then a lot of things before actually being able to how to leave Vim, so they open up a new file they don't know what to do, and all press colon Q, and then you're going to leave because if I press colon, Q, enter, you can at exclamation mark to overwrite. So essentially, Q and then exclamation mark. And this is because you're saying quit, but also dismiss any you cannot just quit them, it's not going to changes. Just forget about those. There you go. exclamation mark Q, but Q exclamation mark. exclamation mark, and then something this is I don't know what can I do ls, for example, from the terminal. And if I type exclamation mark to execute a command that is not known because just type Q and then exclamation mark, if you want dismiss the changes? Let's say I want to open First of all, how do I write something because we don't write ds, and also C, we don't write C's. don't write C's. So why is that? And how can we this, you need to understand that vim works with are in the normal mode, or when when we enter Vim, every key has its functionality. For example, the command, like quit, for example, or write or doing colon and then whatever I want to execute, and So the colon, the colon is actually what I press because if you're in a different mode, keys have if you type colon in something, you execute a like D, for example, is for deleting or A is for to talk about those. But the first thing you if you press the letter i or the character I, what here down on the right I pressed I am now in the left. Insert mode means that whatever I press now So I can write stuff here. I can also press I colon, I don't get into command mode, insert to leave the insert mode again into the normal we leave the insert mode, and we get into I have a command. And if I type I enter the and so on. And now we have some text, let's say insert mode, I need to get out of it by pressing right. So if I want to write changes into like that. And you can see that these However, I can also do right and quit. So for And I want to say quit and it says no, right exclamation mark again, I can also do wq so changes into the file, it also quits so I can go that all the changes are still in the file. So is how you get into the insert mode and this normal mode. Now, each character as I already said functionality. So the insert mode basically means but there are multiple keys that entered the eight also insert enters the insert mode or oh oh how they entered the insert mode for And I'm focusing on a five here my cursor is above I if I type a now the eight is placed between cursor before the actual focused number, if I'm I focus on a six. So if I type an A now, you And if I type, oh, I open a new line below that example, I'm up here, and I press O, this creates have to be at the end of the line. So it's not you just go to the end of the line, whatever. It's not the case here, what's the case, here's I press O, it opens a new line, So we have i for inserting before the cursor a an O for opening a new line or for creating a new can also be used with the shift key in order to capital O. And the functionality here is a little to five, and I type shift I or a press Shift I, at the beginning of this light, so the A I have multiple words here with spaces and all press capital I, what you see is I jumped to the opposite happens with capital a capital A goes to and enters D insert mode. And capital O doesn't that. So if I'm here at this line, and I press the insert mode. So those are the very basic into the insert mode. And from the insert mode. this is how you can do that. Now before we talk a little bit about settings here because editor. And it's not going to be without plugins, what can make it more attractive. So first of if you want to have some line numbers in them, whitespace number. Set number basically activates that we have line numbers on the left. Now, one over time, is that line numbers are actually not key bindings, a very basic example we're going is that each action can be repeated x times. So arrow key down, I move one line down. But if I lines down, I can do the same thing with up. So I can do it with left and right. So let's say characters to the right. By the way, one thing this is something where I'm not actually doing the as a hardcore vim user. This is the part where just because I don't type with 10 fingers yet. But k and l key instead of the arrow H goes left and L goes right. So essentially, those are four keys in a line. And essentially, the arrow keys is that you don't have VIM is all about optimizing your typing speed possible, you want to use 10 fingers up optimally, And you want to leave this space as Selim least you don't want to go to the arrow keys, you want to have to use J, K, L and H in order to move I'm not doing that usually. So you can do that also with the J and K. So if I go if I type up. So you can combine numbers with key Now why am I telling you that because this certain settings that you can use in order in this setting is called relative number. And I'm pretty sure that most of you who don't use like the setting, but it is quite useful in this instead of getting the absolute line numbers, you So for the current line, you see that you have the But for the other lines, you get the line number here or this line here, it's I jump to that line. And this can be quite useful can be combined with with pasting, with copying, as we go on here. But this is just something that But you can use the Set relative number setting without the set relative number setting. And by default, for example, I cannot use the mouse the mouse to active so set mouse equals a. And Other things would be for example, setting the tab so on or choosing a color scheme. So color schemes and then tap to see the different color schemes enter, and you can change the color scheme. what happens when I close this year, what's right And all the settings are gone. So you can type So if I type set number, and I leave and I open And of course, if you have like 20 settings, you open them. So you want to have a settings file a that you have the VIM rc file, which is located not going to see D there. I'm going to I'm going which is the user directory and then slash dot So vim recognizes that path User Directory slash or VIM is going to open it. If it's not there, you going to open up the VIM rc file, in this case, to enter the insert mode. And I'm just going to relative number, set, tap stop equal to in dents. Um, I think most of them, except for then set mouse equal to a and color scheme, slate, And then I can open up now again, the VIM see that I have the settings loaded, I have the I have the color scheme. And I have also the shift But this is how you do it. You can create this vim want to change and change something. For example, I want to use something else. I can delete the was Delic? Was that a color scheme? I'm not Delock, it was a color scheme. Okay. Whatever, you I like to use slate from the default themes. Later are the very basics, opening files, closing files, leaving the insert mode back into the normal moving around. And those are the very, very basics we're going to look at a lot of vim key bindings lot of information to digest for a beginner. because you're not going to remember everything at to remember everything at once. What I recommend you start training them, you go to Google and you you look for a cheat sheet that has a couple of I think this one is quite good here. from Phoenix you can see here moving, inserting, editing, You have the basic commands two basic key have to remember them here from the video, this you can learn the things, but you don't have So we're going to start out with the key not in Vim, we're going to use the eye test dot here. First of all, let me show you some basic something, we're going to use o to open a new world, for example, I use Escape to go back to what I have to do is I cannot do Ctrl Z because the process. So it puts it into the background. So just pressing the key you in normal mode uninduced happened 23 seconds ago, we have two fewer lines want to repeat the action, so if I want to redo reduce, and you undo, so Ctrl R redo. Now let's then inserting again here is going to into normal again. Now I can press u u, u u And what I can also do is remember we can combine go three, undo back or three reduce. You can see for five undo. And of course, if there are no this change. And I can do Ctrl R already newest Now what's also interesting is, this is now not mode we introduced here because this can be quite and we also know that we have a normal mode. O. And we can leave that with escape. But there's visual mode is for selecting. Now let's say for this second word here, even though it's V for visual mode, you can see down here it says And now I can do certain things with that word, I I can do a couple of things with that word. So what I do is I press d, d is the deletion key. So again now with you. And I can also of course, if in this case twice, to to leave the visual And I can also select just a couple Now if I want to copy, so I can also take for yanking this is what it's called in why it says or doesn't say anything, but for example, I can press P, and it enters or it and I can do that a couple of times, I can press 1010 P, there you go. And I can undo all that every key can be combined with a number and let's select this here with visual mode, live for And then again, I can also select all of this Now, these commands here or DS key bindings can D is for deleting and P is for pasting. And I I can select something and I or I can just press D D to delete the whole line. dd dd. And of course again, if I go up here, for There you go. same can be done with copying in multiple times, but I can copy full line. So not by going, why why and why why yanks to p. And then I can say also five p and it because I yank the whole line. So also the line use paste in the uppercase way. So I can also this if I copy, let's say this line here, and I now say it goes above that. And of course also, if these newline characters, I can press P to paste cursor and I can paste I can press capital P to go So that is that now sometimes would want to do change a line. So the difference between deleting the same thing. But the difference is that we I just want to delete this line, I press DD and but also change it, so I want to change what line so you can see the lines not vanished. I'm So CC enters the insert mode, and doesn't delete And C can also be used in the visual mode. And I can press C. And you can see I'm still in this and I type D, I leave the visual mode, So those are the differences. And we can also For example, if I'm here now and I press uppercase line if you want to delete the full line again, namely the last part from this cursor up until the capital C changes the rest of the line. That is copies the full line. Yeah, uppercase Y doesn't uppercase Y is essentially the same as why when it comes or last, last but not least for the character, which is r. So let's say I'm here with I can just press R and R means replace. And if I of Hello. Now what's what's what's the purpose of and I don't have to delete and then enter a new do is you go into the insert mode, or you don't the insert mode, you delete one character and the key to enter it in Vim, I can just press R and Now all these things like deleting, changing, we have some keys, or some key functions that is what we're going to introduce next. Let's say sentence period. What I can do now is of course I here. But what I can also do is I can jump words in in vim I can jump words forwards and backwards. next word, I can press W again to jump to the next jumps to the next word. Essentially word meaning far as I know word means either a space or some have something like Hello, I am a simple sentence I think no in this case it doesn't consider now I'm using by the way the are to change if I use hyphens as hyphens as you can see, However, if I go into use uppercase w, this Uppercase W says this is one word. And those are if you use uppercase w you jump, or a word is by spaces. So if there's no space, it's considered also stuff like hyphens to be separators for So if I'm here, and I want to go back a word, I consider this a full word, I can type uppercase word. So the same thing that W does forwards, is useful because we can use it together with the where with vim gets very, very interesting. and what exactly I delete can be specified. individual mode, this is what I'm deleting. If I I can also do is I can say d w delete a word, DW delete two words. Or in this in this case, it was D to w, for delete two words. Essentially, this there, everything up until this point is deleted. at this point here, I can say delete to be to go However, you will notice that if I'm in the middle word, but just the remaining part of the word. type delete in a word, so de IW, delete in a word. somewhere here, and I want to say, Okay, I the rest is okay, I just type ci w change in you may, you may see now that this is not really But this is actually quite useful. I use it on an when I use VS code, when I use Neo vim doesn't because they really speed up your code, So remember, you can specify the movements using w yet yet is he, he jumps to the end of a word. So also, we have the same thing for the line. So as a movement, not as inserting, so remember, into the insert mode. But if I just want to jump I press 00 goes to the beginning of a line, and Again, all this you don't have to remember it can look it up in a cheat sheet again. But what's for example, on type D zero, everything or everything until the beginning, is And same thing goes if I'm here, for example, and until the end of the line. And I can do the same E, which is actually the same thing as saying DW And with with a capital E, we can do the same they have spaces around them. We're actually not So again, a lot of information to digest your so w you can jump around with B and you can combine You can combine all of these jumps with deletion things. So for example, let's say I want to copy what I do is I say why I w Yank enter word. P and I now have the word copied here. Again, you are coding right now you don't want to you want to change this okay, just CIW There you all this here and let's press delete the delete while I'm in the middle of the word, I don't have to jump to the word, I can just type really interesting is when we go into parentheses you might have some Python function print, And since the message is stupid, you want to inside of these parentheses. Now, what you usually then you use the, the shift key and the arrow the mouse to select all of this year, and with VIM is you can just go somewhere in quotation marks, change inner quotation right? Change, enter quotation marks. So if delete inner quotation marks without entering quotations, and then you can paste it somewhere. can do the same thing with, with parentheses for example, if I want to, if I want to change I just type C, I change inner parentheses, and or bracket, it doesn't really matter. So multiple parameters, ABC, 123, whatever, and then opening bracket. So this can be very, else do we have here? Now we can combine all of this already. But everything that I show you five words. And I can also five times delete five And you can also copy five lines. So you copied five lines, and so on. All this can a couple of different things. And for this, Here, we can see how this is useful. I showed it to change the function signature here. I'm not, But let's say I want to change the parameters there's another operator that we haven't talked if I'm at this, if I'm focusing on this curly Okay, where is the closing one, first of all, it's But also I can jump to it by using the percentage And of course, if I have a huge functions, like opening bracket. And if I type percent, I go I jumped up again. So this is very, very useful when I type D percent? It deletes everything, Yeah, so another jump that we can do is we can bracket that is closing, but to a certain Okay, I'm here. And I want to delete everything or actually, before we start deleting, let's jump star, T star gets me to the position before the in the same line by in same line, by the way, so star, if I say f star, this is find it jumps to important? Because let's say I want to delete this Let's say we have a couple of more things. I have everything up until the opening bracket, what I and then it deletes everything up until this problem because then it's going to also delete and then we don't have the bracket anymore. So finding or jumping one position before that so before the next current occurrence in the same that. That's the difference here. Now I think Our capital T goes backwards. So capital T and or lowercase t and start jumps to the next star after the previous star, you can say. So you can F star, it jumps to the star that comes before the be combined with with deleting with yanking, I can up until the opening curly bracket that goes so I see here, I just noticed that you see here, Ctrl, I'm using a German layout. This was just a curly T and then curly bracket, and I paid and I press So this is how we can use that. And one last thing how to jump to the beginning of a file to the end somewhere here right now 291. If I want to jump to GG, like good game. And if I want to jump to the shift G and it goes to the end. And if I want to for example, 123 and uppercase G, then I jump colon 406, enter and a jumps a bad line. So I now are the basics of vim sort of fundamental And now we're going to move to some more actually practicing Vim, so actually using I would recommend focusing on fundamentals stuff. But for this video, you can keep watching focus on the fundamentals first. So for the quite diverse set of things. So we're going to we're going to talk about searching, and I want to start here with the indentation. let's say I'm in this line here, line, line or I want to indent it to the right. Now before the program here on the bottom right doesn't this is not too confusing. Essentially, what I'm currently at to the right, I use two times the but the opening bracket doesn't translate So look here, not here to the bottom right. this indents to the right, as you can see, and all the time, it indents to the left. And these just add the line, if you have selected the line, mode to select this here, I think I just have and I can select it again and I press once I also want to mention that there are multiple just the normal visual mode, just pressing also use the visual line mode into visual block self self explanatory, we press Shift V, and we we select Full lines like that. And then we can and all that. But essentially, that that is is something that I have to admit don't use too It's essentially the same thing as align mode, in this case, I think okay, this doesn't work Alright, so the problem was with so I open up another terminal here and I'm in a file in normal mode, and you press ctrl select column whites like that and then you can is not what you do in a visual mode and this This is what you do in the visual block mode all these lines here. As you can see, now we can yeah, in this case, we changed them. So we right? So back in the previous editor, we can not and right, we can also automatically indent. or Java that have brackets around their code. It again, you don't know. Okay, what's the proper in this case, let's say we have a badly formatted which is still correct code, right? But it's, How can I do this year, like that. like that. Now, if I want to auto indent a line, sign. So not less than not greater than this is indented correctly, there you go. And let for an area. So let me just repeat the mess to select a section. And then once I have press the equal sign, and you can see everything file. So I can combine now a couple of things And let's remember the line here, where all indent to full file, what I do is I type G G to equals, and then capital G to move to the end of now this was what was it 406 G, they go, So this worked. This is auto indentation. Now let jumping. But instead of just jumping to the next search term and searching in VIM is done using you will see that something pops up down in the for example, hello. And if I press Enter, in this we don't have Hello. But maybe if I type URL, if I want to jump to the next URL that it finds, do this a couple of times, I can jump through there you go. And I can also go back. So if capital and to go back up, and then just escape, URL stays saved here. Now in some color schemes, again and you enter some nonsense. There are some how everyone does it. If you want to search previous occurrence, you use the question mark, so basically moves up now and the capital n moves What we can also do is we can select a token. How here so that we reset it. So if I press Scan, we type hashtag. Actually, this is still individual find the next occurrence of that token. So hashtag translate properly. It says that I'm pressing this hashtag basically means moving up. And So star goes to the next occurrence of the token. it goes to the next length, length length that hashtag what I'm actually typing here is So that is that what do we have else now we which is marking locations and jumping to I frequently re visit a function for some reason, this line 130 This chord cursor here I come here a waypoint. So I can set a waypoint by typing M A, which would mark this as being the Mark A. here, and I want to jump to a certain way point, and then a and then jumps there. And I can extract full status to the string copy here, now I go somewhere else, and I can type And this can be used to mark important sections in scroll all the time or remember line numbers, you I have a certain piece of code, jump to waypoint you can navigate through large code files using can do is we can center the current selection. So necessarily, just because I move my mouse here, current line, so I want to move it up into the and then it's centered is and this can be quite a new found. Let's just remove all this here. And really have anything to scroll down to, what I even though there are no lines below that. So let that I want to show you here for the intermediate just substituting and repeating a command, so And for that, let's take some string that you can see character occurs quite often. Let's string. How do we do that in vim with a command, it into full file, not just in the selection, not And then we type S for substitute slash for character with symbol for example, a synonym and and you can see all the occurrences here have Now let's say I want to do something similar. select this area here. And let's say Do we Let's just take symbol again and do it and rename we type again, colon, and this time, we don't do it in the full file, we just want to do it in slash Jeep, there you go. Here, it changed. Here, And the last thing that I want to show you here command is actually quite simple. Let's say I in order to delete another line is to press this executes the command that I just executed. not a macro. This is just the last command. So commands. So also, for example, if I say, change let's do it here. Delete until the quotation, maybe we have some similar. Let's say here, for thing. So this is just repeating the command. So comes to vim bindings, and vim commands is macros topic because essentially, whenever we delete whenever we Yank something, you could say this is of registers in vim by typing the command colon the individual registers you can see the name of specific register. Now one thing I'm not sure if I D is also copied. So if I say if I if I go to a one, and I say DD, I delete that line, but I can So deleting in vim means copying at the same time. and if you want to have multiple clipboards, if I delete something, if I copy something, I things. Now I can also let's let's go ahead again registered to paste from. So for example, seven returned to false status length. This is a not just press P in order to paste but before that quotation mark seven and paste from that, I can line and see quotation marks seven y y to yank hostname Link function. So this is how that works. And there's some special registers. For example, essentially means that or essentially represents system, provided the name is integrated with your it is stored in a register, which is So you can use that to copy into the clipboard This is something you can do. And also something something, you already have it ready for pasting. line here, sort of static in I just typed y y to but I also want to delete that line and still your if I just pay if I just press P, I just If I want to paste the last thing I have to use the zero registers. So I and it pastes. The last thing that I actually is important. Now, when it comes to Macros, macros store them in registers manually. So a macro is actions, you could say, for example, what could be and a macro would be delete the lead three and add 100, for example, whatever this is, a want to record that macro, what I do is I press A means record the macro, as you can see down here do. So every action I take now is going to be part capital A to jump at the end of the line Now I want to quit the macro cue, quit and I think we should also see that in the that register a has d3, w a 100 as a macro And they're now stored in the macro eight. If I I need to use the Add symbol. So the male symbol, it isn't in my case. But essentially, this is what in two. So essentially just this at what you do in order to execute the macro is for example, this line here and you type at A and 100 At the end of the line, again at a at a and the point now. Yeah, we can No, actually not this is just repeating the at a this executes the macro and of course what that does something else and then you can define can you can combine them you can you can have a you have one macro using five other macros that complicated things here. And this can be quite And those are I would say the basic intermediate vim itself. Now finally, last but not least, primitive Vim and turn it into an actual advanced an IDE with a lot of plugins. And before you do out with Vim, if you're learning it for the first for the first couple of weeks. So you just learn the basic vim functions and settings and commands plugins because those themselves have different settings, and so on. So focus on the basics in install some plugins you can you can customize to do first here, or just recommended to do first is just better faster, and it supports more to have a better experience, and you still want to Neo Vim, and for that we type sudo apt install And in my case, if I now type Neo Vim, it opens in a second it opens dashboard, it opens a couple look probably like the basic vim just it's going install plugins, what you need to do is you need and you need to type vim plug or you can just go slash vim dash pluck. And then you can read the have nuvem installed is you copy this year on Unix Windows subsystem for Linux, you're copying that, have vim plugin installed, basically. And one config is not a vim rc file. So it's not using the Neo vim config is located in the User Directory was it new Vim? Or was it in Vim? I think it was file called or usually you don't have a file, you in it, dump him. This is my file. This is you don't have the end of directory and you also you create both of them, you create the directory, actually want is going to be used. Now you can you don't need to understand anything that's structure is quite simple. So first of all, what about, you know, tap, stop, smart, tap, auto, and number relative number all that. Then down here, need to understand the they are plugin specific. and has some certain parameters or settings that here all details that don't matter to you right is this section here, once you have been plug pluck, hashtag begin, and then call plug hashtag not on the right place here. So ignore that. the plugins by typing pluck, and then the link we need to do in order to install or to actually in order to actually install them, we need colon plug install, and then it's going to open up case, it says already installed already installed these plugins are just get up repositories. Vim the thing you see on the left here. This is nerd to do is you need to go to the repository, which there you go. And then so you have this section plug in and the link, and then essentially you go the plugin, then maybe you have to rerun and do with the individual plugins, so which color I cannot make a tutorial on that because each set up. Vim commentary has different things to set for example, with vim commentary, I can just I can type DC to comment. them out. And this is So this is not a default vim key binding. This is commentary, the airline's would you see down here, plugins here. Those are my plugins. And I also for those of you who are interested on my I have my conflict files for those of you who want so you go to conflict fonts and go to it Vim. Keep is actually an outdated version. So maybe pick But you're going to have to go through some Node, maybe you have to install a language server you can just go online type, top 10 vim plugins And the good thing is that this is not one IDE and then install some plugins. This is your thing, my settings, I have a unique setup that no one but you can have your setup the way you want it. up Neo vim to be actually something approximating editor is fine. But oftentimes, you're going you're going to use our studio, you're going Overleaf and so on. And most tools out there, of people like it support vim bindings, either in pi term here, for Python development, you can and you can download the idea of in plugin, once you have that in PI charm, you can use Vim 1000 plugins here because this is pi charm. This that. But you can use the VIM bindings, so I'm change inner parentheses, there you go. Undo with in order to change and all that. So all these work also in PI charm, also in Overleaf, also in for the intelligent products or for the JetBrains You also have an actual vim rc file, which is and then you go to idea vim RC. And they surround in commentary surrounding commentary plug install here. So you cannot use Vim plug in So commentaries, basically, what I told you, you comments them out. Or you just go to a single This works also in Python by setting. Setting the word. So for example, if I picked this one here, quotation marks like that. This basically but this is what I do on a regular basis. some small scripts or something. But if I use whatever I do, unless maybe Microsoft Office, I always use use Vim bindings everywhere. And this Even if you don't like the terminal. Even I recommend starting to use Vim bindings in your it for this vim course. I hope you enjoyed it and hitting the like button and leave a comment in the forget to subscribe to Free Code Camp and maybe neural nine. I make a lot of videos on data So if you're interested, take a look. And