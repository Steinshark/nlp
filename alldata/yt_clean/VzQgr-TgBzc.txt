Intro SQLite and Postgres as you asked me to do. We'll as well as updates and deletes. In this first explain later, CPU usage for both the clients In the second test, I use a SQL join that combines or select performance of the database. This is SQLite vs PostgreSQL Comparison Postgres is a traditional database engine with a run a Postgres database on its own server, It is a long-running server process that manages on disk. For example, in Postgres, each table a table or index exceeds 1 GB, it is split into server with 4 or 8 CPU cores, the database engine In some cases, it can even handle certain Usually, clients are deployed on separate servers over the network. Network operations are slow and a connection pool is used. This allows connections limitations, traditional databases can improve multiple worker processes or threads. which isn't really a database engine but a write data to the local file system. There is no you import the library into your code and your file system. In this setup, your application SQLite database is always and this is where its limitations come writing or inserting data to an SQLite database instances or threads in your application can read supports an unlimited number of simultaneous It is possible to convert SQLite but you would need to create with a remote instance that uses Keep in mind, SQLite doesn't directly compete client-server architecture. However, SQLite in the world. It is particularly common in SQLite also has other use cases. It works to medium traffic websites, which covers we can make a meaningful comparison Test Design impossible to directly compare SQLite with I decided to compare them in the way they would I create a single EC2 instance for SQLite, which is essentially my Go application i3en.large instance with a local SSD disk. Now, for Postgres, I also create an EC2 I deployed the client on a using an m7a.large instance. You might already is to show the real difference and illustrate SQLite interacts directly with the local file send requests over the network. This setup you want me to deploy both Postgres let me know, and I can release another and I believe some websites, like WordPress, instance. Anyway, feel free to suggest For SQLite, I use the Write-Ahead Log, which rollback journal in most scenarios. I also Now for the first test, I simulate and two of them--product and customer--already So, for the first test, we first create a to the cart and update the value of the cart. update the total value again. After that, we the order and reduce the stock quantity for that and reduce its stock quantity as well. Finally, Some of these operations would typically be to measure the latency of each For the second test, I use a tables to select items that the customer I generate a new order ID. To run this test, I use Go and a generic each database. Since it's not possible to scale thread or a single application goroutine to I use a connection pool with a single connection. one by one. There is no concurrency or parallelism Postgres can handle concurrent queries while Postgres would win every time. Alright, let's go ahead and run the first test. network, so it's not entirely fair. But that's to show you the difference and give an idea to using a local file system. of requests each database receives per second. send requests, I include an artificial delay time. This results in more queries per second. First is insert latency, and you can SQLite and Postgres. Next, we have the update operations. This is because it involves finding a there's the delete query. All these over the network, while SQLite handles the I also measured the CPU usage of Postgres, itself using the SQLite library), and the Postgres and does nothing else. It's interesting to see client and the database, as both run on the At around 110 queries per second, Postgres shows latency for all three types of queries. Despite At around 200 queries per second, it's clear it takes significantly less time to process them. SQLite can handle. Eventually, the delay is are sent as soon as the previous one completes. open each graph for the entire test duration. it's no surprise that SQLite can handle more send them over the network. The requests as the data volume grows, making updates slower, Next, we have insert latency. It remains the middle. If you have any insights into Then, there's update latency. As the longer it takes to find and update an item. big data frameworks like the open-source Finally, we have delete latency. Similar to except for some spikes in the middle. Since the application runs a single thread on executed on one CPU at a time, resulting also notice that the Postgres client sends and receives queries over the network. uses the disk much more intensively, while SQLite If you run your infrastructure in AWS, keep in which is important if you use EBS or any I use specialized i3en instances where the cost of Again, it's difficult to compare these databases I'd love to hear any feedback or suggestions more about demonstrating the cost associated the databases. Essentially, I'm comparing 2nd Test run the second test, where you will probably see with just a single query and only a few requests latency at this stage, but as we increase the Here, you can also see a huge difference in the biggest difference will be noticeable When we remove any delay, we send as can handle. Since querying the local file system SQLite can process many more queries. server for SQLite if you need to perform or application instances can simultaneously without any limit. You can also share using a network file system, although unreliable. However, reading from the Alright, let me show each graph First, we have the queries per second graph. we have CPU usage, which remains around Let me know your thoughts on this test and have other benchmarks you can check out and I'll see you in the next video.