Welcome to our data analysis with Python tutorial. This is a joint initiative between Free Code explore the capabilities of Python on the we'll learn how to read data from multiple how to clean and transform it by applying visualizations will show you all the important Seabourn and many others. This tutorial is that want to learn how to manage data with coming from Excel tableau, etc. You learn analysis. So let's get started. Welcome to our data analysis with Python tutorial an online Data Science Academy. This tutorial Free Code Camp, and it's totally free. It exercises. Let me tell you a little bit more Science Academy. We specialize in data science, learning. We have a complete course catalog If you're interested in learning data science this joint effort between Free Code Camp and first month by using the following discount of this tutorial. In the description of this section, so you can jump between them. This one is data analysis. We'll also talk about tools like Python SQL and pandas are important. example of data analysis using Python. So the tools in detail. It's just a quick demonstration about. The following sections will be the are two more sections that I want to especially three Jupiter tutorial. This is not mandatory, to use Jupyter notebooks. Also the last section recap of Python. If you're coming from other If that's the case, again, you can use the to it. All right now let's define what is summarizes perfectly the process of inspecting, with the goal of discovering useful information, making. Let's analyze this definition piece data analysis is usually tedious. It starts transforming it for further analysis. This We're going to be using pandas to read, clean adapting real life scenarios to information if any pattern or model arise. For this we're features panelists and visualizations for the data and created models out of it, we'll patterns or anomalies that might arise. The to transform data into information. Our data made in Walmart in the last year, the information on Tuesdays. This is the final objective data findings, create a readable reports and dashboards we've gathered. Multiple actors will use your etc. They might need to see a different view different reports or level of detail what We've broken these down into two main categories, you can buy and start using right out of the luchar are probably the most popular ones have what we call programming languages or by an individual vendor, but they are a combination Python R and Giulia are the most popular ones and disadvantages of them. The main advantage they are generally easy to learn. There is support and driving the creation of the product. of the tool is limited, you can cross the and the universe of PI Data Tools gives you from a closed API using secret key authentication consume data directly from AWS kinases, you powerful tool you can learn. Another important language. What happens if Tableau for example, from it and feel like your career is taught process data, using a programming language a programming language is that it's not as learn the basics of coding first, and it takes analysis? Python is the best programming language and unreadable. It includes 1000s of libraries to IoT. Python is free and open source. That people seeing the internals of the language major institutions rely on Python every day, go away. Finally, Python has a great open documentation, so exhaustive, and there are conferences in your area, it's very likely in your city. We couldn't be talking about a great programming language. We prefer Python general in the libraries and tools it includes. And if you're in a highly technical discipline, the data analysis process. The process starts from? Usually it's in your own database, but different format, or a web API. Once you've it. If the source of the data is your own If you're using more extreme sources like tedious. With your data clean, you'll now better analysis, transforming fields merging etc. The objective of this process to get of analysis involves extracting patterns from trends or anomalies. statistical analysis it's time to do something with data analysis. be ready to implement machine learning models. probably need to build reports communicate Let's finish by saying that in real life, jumping back and forth between the step and line. What is the difference between data between data analysis and data science are data scientists usually have more programming skills in machine learning on ETL processes. communication skills creating better reports way, these Weiler chart you're seeing right want to check out the source code. Let's explore tools and libraries that we will be using. be using are pandas for data analysis, and But the ecosystem is large and there are many do Python data analysts think if you're coming tools like Excel and Tableau you're probably your data. All these tools are point on Click. But it's less useful when the amount of records reference too much data, and the processing work with Python, we don't have a constant with. We know it's there. We know how it looks of it, but we're not constantly looking at of records incredibly fast. This also means from one computer to the other, and for example, why would you like to add Python to your data of freedom and power theories, another important that no Python and SQL are better paid than tools. So that's it. Let's get started in world example of data analysis with Python, be able to do after this tutorial. We're gonna start this tutorial by working processing with Python, we're not going to will explain what each one of the tools does, and the details of them. In general, this reference of our day to day processes, data Python. So the first data set that we're going can find it right here, under the data directory, have just transformed it into a spreadsheet. visual perspective. But remember, as we said not constantly looking at the data, right, we are more driven by the understanding of we understand how what the data looks like, conducting our analysis. So the first thing this CSV into Python, and you can see how the CSV read into byte, then we're going to data frame that we have created looks like data structure, we use independent tool. And the pan this part of this tutorial. The data but it has a few more enforced things like type. And we will not be able to change it analysis, the shape of our data frame tells So you can imagine that with these amount a visual representation of it's like, it's 100,000 rows. But the way we work is by immediately find some sort of reference in the shape and with. And for that we're going to do first we're working with. In this case, we have day, month year on that are just complimentary uninjured, which makes sense right? age group, youth, customer gender, we have an idea again, columns we have, but we also know how large we will be cleaning it probably, but we don't right just with our very limited eyes, we of our data in this way. And we're going one of the statistical properties of this data numeric fields, I can have an idea of the statistical properties of those. So these data set is 35 years old. I also know Or is the sales data is 87 years old, I know can start building right if my understanding in this case, the median of my age is very all is telling me something, and the same columns that we are using. For example, we have a negative profit here, correct, is maybe there's a mistake, again, our data, we're going to be driving the process looking at all the rows that we have. It's So we're gonna start with unit cost, let's, to do a describe only if you need coast, which the previous in this line, what we did was in this case, we're just focusing in the unit median, all fields, we know already pretty them, we're going to use these tools to visualize this that it's using on top, right? It's using with matplotlib. But we're doing it directly is all explained in pandas lessons. So this but we have just created, we have the whiskers third quartile, the median. And then we see So we see that our product study is around same thing if we do a density plot, right. to draw two more charts, right, in which we're the median, right in the distribution charts. the costs of our products. Moving forward, the age of a customer. And at any moment, here to give a quick reference, we know that actual years old they were but also they have four age groups, seniors, youth, young adults were creative, right to better understand Value counts, we can quickly get a pie chart of it. As you can see, right here, we're doing right here are the largest group in our for about a correlation analysis? What is a correlation have high correlation for example, between quantity, that's kind of expected, but that's is matrix right of correlation showing in unit cost or where is profit right here. Profit with unit with cost with profit. Now with high correlation, I'm sorry, the diagonal, So high correlation is blue. And we see that positive correlation with unit cost and unit red. So we again can have a quick idea. Let's correlation with order quantity, which is into that, of course, the profit has a high And again, it's just a quick correlation analysis. the customer age and the revenue right to Right? And the same thing for revenue and can quickly draw a diagonal here, right. So between these variables. So a form a few more profit per age group, right, so we can see of the customer's age, and a few more box of year customer age, unit costs, etc, for that we can quickly do when we're working shape or data or derive it from other columns, we can create these revenue per age column, going to do something like revenue, per age, right? Equals revenue, divided, I don't remember for, for you to have a reference. And we're There we go, Oh, well is processing, and I it is, I let's compare that just to the way It was instant, you know, extremely fast. the same results as expected. same results the in a density plot and in a histogram, parade is going to be relevant. In any case, what we can do. Let's annual analyze, well, calculated cost is the total, the total orders the cost, right, extremely simple formula, here, how many rows had a different value doing right here is like, we're quickly checking point doesn't align with the actual cost we that were made by the I don't know the original new column is different from cost, we want So again, quick, quick, regression plot. In some linear dependency between calculate cost costs part cost plus profit. So we're going with the revenue and the calculated revenue we're going to do a quick histogram of the the prices that we are using, we need to increase it's very simple with Python, we're just going now all the prices have changed. What else we're going to be able to do quick state of Kentucky right. So these are all get only the average of the sales by these all these filtering options, and extremely say, give me all the sales from these age and we're gonna get the average revenue from to modify the data, we can make just a few going to say, all the sales from country right 1.1. I don't know why, which is doing it arbitrarily. So far, so good. Again, we've done a couple we will actually go through that in the NumPy just for you to have a quick reference of given lectures. So if you want to pause right to be very helpful. We're going to move forward be using a database this Akila database and a CSV file, as we did before, we're going data from a SQL database is as simple as it were doing with our previous example. And to do now the process is the same. So what if you don't know about SQL, you can check we're pulling the data from the database. not, there are connectors for pretty much Postgres, MySQL, SQL Server, etc. In this MySQL. So once you construct the query, and the process is the same, we have just converted we can use with our Python skills. The first description of our data of our data frame. the structure of it. So we want to know how a little bit more about our rows, we want columns, and how many rows how many records of each one of these columns. And we also of our data. So we do a quick describe, and to focus in individual columns, right, we focus in film rental rate, right, pretty much gonna see the kind of distribution we have, a categorical field in this case, but basically, are prices, zero 99 299 499. So that's these seen in real life plot box plot gives you check very quickly a categorical analysis, between cities, so we have two cities. And here, creating new columns and reshaping the simple. In this case, we're going to analyze films are going to be more profitable for how much we charge, divided by the cost, how this case, we can see the distribution of beginning. And then we have more profitable And we can quickly analyze the mean and the that. Finally, selection and indexing, if you want data, right, you want to zoom in, you want filtering, in this case, we can filter by if you want to do it per state, if you want It's very simple to filter to filter and zooming, your data. So you can perform a more detailed the films are rented by the customer last same person. But again, it's very simple to quickly see which ones are the price, the cost, right. So basically, what we're doing have the highest replacement cost. And also an idea, all the films that are in the category that data. So this is the process we usually somehow create columns, there is an important this part of the tutorial, we're going to the process of cleaning, then reshaping creating This is the process, right? We're following more to odd as you might imagine, from creating creating linear regressions, etc. For now, process. We follow. Now starting now we're one of the individual tools we're going to notebooks. We're going to talk about NumPy. to talk about mapa, lib, seaborne, etc. Starting see is, what is this whole thing that I've to now too, if you want, if you if you don't an idea of how it works. And then we're going pandas, etc. Remember, there are exercises So you can always go back again, and work of the tools we are using. Before we jump into the actual data analysis pandas, all the tools, we're going to use I want to show you the environment that we the tool that we use 99% of the time on its terms here, I'm going to be referring to it to see in this, in this part of the of our a whole ecosystem of tools. And it's a very open source, again, ecosystem of multiple first, what is a Jupyter Notebook. What you're in a second, I can actually show it to you also going to talk about Jupiter lab. Okay, Notebook. So, I think this could be familiar question is, what's the difference between difference is that Jupiter lab is just a nicer not just the plain notebook. This is a notebook, addition of tree view, it's an addition of and multiple other things. You can open some Jupiter lab Jupyter Notebook, they are similar a Jupyter Notebook. And that's what we're project. So anybody can install it, anybody set up in your local computer. In this case, it's a project that provides Jupiter environment install things locally, you don't need to right you That means you don't need to buck it's all worked in the cloud. So said that, very quick list of everything, we're going list of two, it's just a thread of with multiple, So after the video after the course, if you go back to this to it, it's a quick reference do we use a Jupyter Notebook? Because it's our or to to explore our data and to do our commands, and it will immediately respond tool, when we're working with data analysis, other tools like for example, Excel, tableau, at the data, there is no visual reference, So in Excel, you're constantly looking at are 100,000 cells and you can stroll and see right? It's like nobody can work with 100,000 will always forget something. So the way we having a reference of how our data looks like not constantly looking at it. We're like this the commander of the matrix that commands telling people telling people that basically data, and having a picture in our mind of looking at it, we're just having a reference, our data looks like. So that's why this tool if you're just training your Python skills, what you're gonna see is it's just a regular some code, that's two one times, actually is four. Right. So this is a Python is a fully is that again, it's going to respond to us and I immediately get a response, I can do immediately get a response, I can do Hello, a Python interpreter, a fully feature Python a terminal, which you can write this is the I can do Python, right. And I can do two, this is not convenient to work with our data, we can also mix with documents, that's going So what what's the way we work with Jupyter important concepts that we are going to follow cells, okay, everything is a cell. And as even if even if it doesn't look like being thing right here, right is pretty much following selecting that particular cell. Everything some code I can do, again, one plus five, that's, that's how it works. So I'm creating cell again. So it's everything happens with the cells, how to remove them how to execute is that it can either be Python code, or any this case is a Python data analysis course. before one plus three, this is Python code, which is a formatting format, right? To create text, that will be So in this case, this is what the source code line that starts with this part, it's going be the largest, the biggest title you can to reviews the size in this case, level three this is a quote this is bold, this is it Alex, I could copy the cell and open the source issue, issue is created or it's rendered as text formatting tool, right or protocol, we us we have some some rules to use in our in our text, and right or return a formatted document after divider, which is a picture and we know it's marks. And that's that what you're saying Python code, or it can be markdown. markdown any tutorial online free, it's it's fairly very important because when you're formatting your reports, you want them to look pretty, going to see later So you can export these So this whole thing can be a PDF or an or data analysis, you can hand over to whoever is pretty neat. So moving forward, again, it's going to be code right here. So these can say, this LS code, or actually, let's code, it doesn't doesn't matter, or just, is interpret as markdown. So now, I'm switched Sure. It can also be raw, but to be honest, have this this general cell type, this cell it markdown, you can switch it with these things that I have to tell you right away, gonna take some time to get used to it. But very fast in your data analysis with Python you're seeing right here, every cell has been will be moved, right, they will be moving you will always know which one executed before you run will be assigned an execution number. executed code. If I execute code again, for is the eighth time that I've executed code. reading this thing, top down, you will not It was moved, the cell was moved, the structure executed after this other cell, right? xact. is always preserved. So that's an important change the structure, and do things with the because I know how to use keyboard commands So for example, how can I add a new cell I cell, if I need a cell before these one, what's in order to create the cell, in this case, just type A, and there is a new cell creative. that the key two times the D key. And again, for example, right here, whereas hit at some Here, you can type, you can press A to create cell, what we call below. So let me put something put here the letter B and it's going to create So the selection here is here in the blue, again, it's going to create a cell below the going to create a cell above that previously of the creation. Something else and it's very hit the letter, a leader, literally it just no command, just a, it creates a new cell, right? So right here, if I type A, it's adding that happen before. And you're going to notice a mode in a second, you're going to see that what now when I when I press on the letter adding content to the sell itself. If I go to give you a better explanation in a second. appended to the text within it. So this is important. The Jupyter Notebook is a mode editors are, for example, vim or VI, vi, those behavior of your work will change depending So for example, in this case, I am in addition be appended to the cell, A, B, C, D, etc. gonna call command mode, I switch out of that key that I hit, it's gonna do something different create a new cell above, B is going to create this cell, right. So that's, that's the important parts in order to understand how to work with working with, and there are only two modes, And we recognize command mode, because this mode, there is a regular prompt, as you're is actually subjects of addition. So that's to switch from modes, in this case, I'm in I can click outside, I'm gonna get out of inside and going back again, to the Edit Mode, then say, we don't like to use our mouse, that's very slow. We like to use our keyboard, are you going to switch from, from editing be with the Escape key to go from editing to switch out of editing, but when mode. And to the cell, basically, you want to get into key, that's going to get you into edit mode, writing, again, we said in Jupyter notebooks, to interact with our data, we need a real type of editor. That's what the Jupyter Notebook edit and, and command mode. And then the cells important, it's a fundamental part of the can be either code, or it's going to be markdown, you more features. And I'm going to show you, And of course, how the what the keyboard shortcuts And and and work with Jupyter Notebooks in First of all, for for from the most important very simple to navigate, just use your arrow going to move around in your notebook. If from markdown to code, etc, you can switch key is to switch to either markdown or Python. hit the M key, that's going to make it markdown. that's going to make it Python code. So M Keep an eye on the selector you're going to to markdown. What else how can you execute code once you execute it, there are two types of executions the selection the currently selected an active and that's going to be my by keeping press to run decode on the cell there the prompt the same. So I'm running this thing a couple currently highlighted cell stays the same, I keep the shift key pressed. And I hit return immediately switch the prompt or the currently useful when you have multiple cells, you want keep hitting shift, return, return, return top to bottom. Alright, so Ctrl return or same is just what's going to happen with the to create cells with the A key, we create To delete a cell, you're going to hit the very quickly, dd is going to delete these and you want to undo the previously issued to be Ctrl Z, you know the mnemonic, it's you only need to press the Z key, you know, whatever you did in your previous command. undo the all the commands were saying they or in this command palette. So for example, these play button right here you see it, the ones and you can search them if you don't it is that you actually have the shortcuts don't remember how execute and stay stay in for run. And you can see what's the name, right there, right. So you can, at least for notebooks, you will usually need to go back the quick shortcuts. And with time and practice, forward, what else, we have a few other commands, paste the cell somewhere else, just cut and you can also use the scissors here, x to cut or actually these buttons sorry, or you can wherever you're currently standing it. So from here, and I'm going to paste it below of cutting it, you can press the C key just actually say where you want to paste it. In And it looks something interesting here, the there is like this unique identifier for your and where something was executed. Moving forward, to import some tools, you can see some characteristics we use it so often compared to, for example, One very important thing is visualizations, data on expressing it through images, or animated The main library we use in Python is model in Jupyter notebooks, which means that you And they will just show up directly in your Crazy. So can you imagine showing these these that's very hard, of course. So again, that's Moving forward, what we're going to do is data from a public API. So there is these crypto information, Bitcoin, ether, etc. And them. It's gonna give you market data Tesla. in this case it's BTC Bitcoin to euro, sexual There we go. So this is the current price actually going to do markets do we have crack the same query we're going to use which is this looks ugly. But this is actually what for all different candles, we call them, we high price and low price. So we're going to to the internet to these API, the crypto the about bacon to do some analysis, I say they for ether for author different types of crypto is get history, get historic price, it's a of the most important tools, we're going to which is also very famous library for Python. to get Bitcoin on ether prize for an entire February sorry, February 25, up to today, video, and we're gonna get a quick reference this case, we have four information per hour. change in the in the, in the request you're eyes. In this case, we're keeping it per hour. in this particular market, which is bitstamp. are right, when I'm in the morning, open, also the volume that was operated within this the price. So we see that in these time, which it's actually a few days, like an entire week, 9000. So it was a pretty significant drop. all the records, and how it moved. So this data analysis with programming tool like Python data. So what I'm showing you right here are Let's do that. We actually have 169. Records, if we do 169 hours divided by 24 hours, we of data 169 Records, and then we have a little gonna get to that in a second. But basically, honest, something you could be saying in a here. We're not just looking at our data, it we know what shape it has. We know how deviation, what's the mean of that? Right? right? What's the the average, the mean, the our data. It's sitting behind, you know, in that's because with a very simple example, dealing with millions of records, so it's is crawling in an Excel spreadsheet through possible. It's just unusable. So that's again, and R and other tools. We don't constantly of it. And we just have these quick references the last five records, show me this chunk these are the visualizations we're creating simple to get the plot done right there. We're few other pretty neat things. The first one is called bokeem. And the difference is that So I'm moving it right here, it has JavaScript. to what we had here. This is a static chart, as a PNG, there is nothing you can do with dynamically generated interactive charts. I can move it around, I can just do whatever to whatever it was. And it's a dynamically working with data, dynamically in your analysis, a planning tool because you can zoom in, right, at these things. If we're working on a mean, high volume, we see a low volume, the mean in there. It's very interesting. If you need HTML file, then static images are going to between them. To be honest, model lib is a live a lot more because it's we actually have it very easy to access and use it. What else Excel, Excel files with all the file formats the the availability of Jupiter lab. So Jupiter v files can open with some extensions, XLS editor and tree view for Jason. So the Jupiter Notebooks will give you a good idea of Jupiter saved I'm not going to execute these you can we have just done and export this crypto file on here and you can basically download it, There we go. So let me reduce the size of this thing. There to spread two sheets, in this case, Bitcoin in our previous notebook, right. So that's combination of Python and the combination very well together. So we're gonna keep moving talking about more data analysis, in general, to do a quick review of Python. Maybe when felt you felt a little bit lost what I was of Python and all that. And of course, we're with pandas with some other tools, I want chapter. And it's not, it's very important with sorry, with Jupyter notebooks, because And it's a very, very valuable skill that with Jupyter notebooks, you know, like creating things around, etc. For you to generate reports So keep an eye on it. Keep practicing, it's Keep practicing it, keep open the command how can it caught a cell? Well, there is here you upfront, keep an eye on it, keep working familiar with Jupyter notebooks, you're going these nice list of compiled commands and reference And we're going to keep moving forward now Now it's time to talk about NumPy, one of ecosystem for data processing. In general, started. And if you trace back NumPy, it, maybe it's it's an extremely popular library And I'm going to explain why in just a second. the Python ecosystem for data processing. a numeric competing library, it's just to And that's it. So NumPy has a very limited a very simple library, when you look at it, consistent, by the way, why is NumPy so important? pure Python processing numbers is very slow. to other programming languages. But when you when you are processing large amounts of data, know, that tiny bite at the end of your pipeline, CPU, then Python is not the right tool for language. NumPy is actually solving that NumPy that sits on top of Python, and gives you with just writing Python code, as you're saying high performance, numeric computations and, etc. That's it. That's it for pi NumPy. It's but it's extremely powerful. Why did I say important. Well, because in reality, we don't see yourself using NumPy. So often, but you for example, pandas, and matplotlib. And they relying on relying on NumPy for their numeric So the for, at least for this part of the pieces. The first one is going to be a very works, why we need to use NumPy. And what sizes for numbers, we're going to talk about and data types also. And why you need a very can, you can skip this part, you're going the precise moment in time. So you can just is when we actually start using NumPy. And computations, etc. So for now, we're going start first with the low level explanation it's not going to be crucial, you can easily for some of our students, it's it's important especially if you didn't have a computer science raise your right your level of understanding more efficient. But don't worry if you if fine. You can skip this part and come back don't need the ease to use NumPy seriously, but you don't absolutely lead so you can just actually go into into a deep understanding and explanation of how computers are bytes bits etc. In order to understand again to the basics. What are numbers, how you might know already a computer can only numbers or just decimal numbers to be more zeros. A computer is just always storing and Your memory is the central place around the the central place where your computer is storing So you have, for example, a hard drive, which process data directly from your hard drive. your ram into your random access memory again, what eight gigabytes 1632 doesn't matter. that at some point is going to translate to So if you follow, if you follow these we have bits available in a regular computer with Because again, the objective of these of these least is to explain how you can squeeze out right? How can you make it more efficient? use less memory for the same data? And also So in terms of physical storage, or actually How can we optimize to use the least amount objective of optimizing it, we need to understand decimal numeric system are represented in you the first nine numbers, 01234, etc. and Let's say you want to store the age of user 32 in here, because your computer again doesn't To do that, you will need to find the correct All right, sorry, two, which is not this one, go. But again, you need to know the correct To store that data, how can you know that? right? There's a whole part of math dedicated going to just drive the intuition of it so you're interested, you can dig deeper later. be stored in a binary format, which of course do is just we keep increasing zeros and ones the number zero, the number one, that's fine. now to increase the number, the position right to go from two to one zero, we'd go to the to go to number four, we need to increase symbols, zero and one. So as you're seeing one position. Up to this level, we need two And these levels going to need four positions. is increasing. And it has a an explanation behind it that we're going many decimal numbers you can store with n we have n bits. And let's say n is equals positions, right three bits, how many total we can store 000 we can store zero, we can zero, right? So in this size, we can store 111 is equals to seven was, once we've filled limit, right? The largest number, the largest That's the number seven. So these means that from zero, here, zero up to one, one. In total, you have eight decimal numbers 012345678, The equation if you want behind this is as follows. to know how many decimal numbers you can store n, in this case, is total a bit. So if we three bits, we can store up to eight decimal the power of n is going to give you how many the opposite process using logarithm and get to store a given decimal number. I'm, I'm it. But again, the math behind it is extremely to delete this whole thing. Moving forward. with your data, when you're doing your data what type of data, you're working with their a connotation behind, right? So let's say and you have the total net worth of the person. age is a value that will range between what to, I don't know, 120, we can say I don't know, the oldest human being but zero to 120, it net worth for this person, the range is it's like $0 up to, I don't know $60 billion, I of those. So we go from zero to 62 billions if this is a highly devaluated currency? Would two even though they're just plain numbers, these are pulling numbers, they have an integers, will need different requirements in terms nh goes from zero to 120, we don't need so right? We can do the math, actually, how many And what do we say 120. Right? Well, if you power two to the power of seven is 128. So bits, you're going to store from zero, up number, all ones, seven ones in binary is store 128 numbers 00 matters, up to 127. So age, here age, we only we can use the size bits per user, or costumer or person, whatever. have to go up to a couple billions? Well, complicated, we're going to need, for example, probably, but with 32 bits, right, you can So again, I don't know about the currency But here, we need 32 bits in order to store that. And now you can you need, in order to process this data? How 1000 Records, that's not significant. You to store the age, and you're not going to more what happens? What happens if you have 7 billion records here 7 billion records, columns is going to be important? Because you have a ton more columns, right? What happens from financial transactions, right, you want and optimize every single bit, you can't. number of have a bit per the columns you're again, when there's 10, that the the number with emits, right? eight bits is one byte. memory we're going to use for our obligations. talking about data in these NumPy lessons? is a library that will lead you has a very you select the number of bits you want to you for forget about NumPy, you want to process five, for example, working with Python, you how many bytes? How many bits? Do you think Well, in reality, even though we think it eight, let's say to be simple, too simplistic. around 20 bytes. Okay, so we are wasting a And why is that? Well, because Python is a The reasoning behind it is that Python is and, and, and code on top of it. But again, syrup, all the numbers in objects, which have Python, you're going to recognize that are memory. And a regular, very simple number memory than what it should be consumed. And can create numbers that are for example, you can say I want to create a number that has going to create a one byte integer, and you're you can create a number that it's actually to do NP int, and we can hear us a talkie, or eight or 32 or 64, right. So we can actually that we need. And this is extremely important of that, NumPy is our array processing library processing erase the data structures we have have in Python, for example, the list dictionary, So if you have a list of numbers in Python, know, l equals 3224, right, you have three not guaranteed that the least they'll the to four in contiguous positions is gonna, memory. On top of that, you can't rely on processing matrix matrices, sorry, because objects. So there is no access to these high that changes because when you create an array of three numbers, and they are all into eight, are not bytes I am, I'm using these drawing in that case, in NumPy, when you create these to create those three elements in contiguous are only going to take that amount of memory on top of that, we can rely on a bunch of your CPU for matrix matrix calculation, this And it's something that has exploded in the sets, and the same thing for GPUs, you might and all that we need, we need fast array processing, all that's a topic for for different story. of week, sorry, we can use all these important our CPU, which makes our computations a lot to know all these to work with NumPy. That's get extremely, extremely conscious about all just going to use NumPy as it is, and you're picks in 38 cents or in 32. In 64, that's But then, with when you get into bottlenecks, of with more amount of data, then you might of the integers that you're using. And this because it's simpler. But it's all applies is that it's it has built in very fast and for matrices and arrays and all that. And of numbers, right are not the regular objects list. If you want to get into more details, about binary arithmetic, and how numbers are stored in memory, etc, especially for floats So with that said, we're going to see now so much about the low level details. And that's our low level explanation of binary arithmetic, you skipped it, that's perfectly fine, you was that if you're in this tutorial, you're to process large volumes of data. And that's without further ado, let's just get started as I told you, a NumPy is a very simple library To sing, it has a few objects, numbers, floats, it's very simple, but it's extremely powerful. arrays, which look a lot like Python lists, The first one is, of course, performance. discussing the binary representation of an going to see the difference between them. And you will see right that the creation is we need to add this NP dot array, and then This is something we will usually be reading individual elements of a NumPy array is this you can say give me the first element, give like, again, in a Python list. Slicing works something, a one up to three rights, just the index, negative indexing, and steps, they list. So if you know how to use a Python list, is one new thing right here so differently multi indexing. Let's say you have a, an array elements out of it, you need the element of position, you can just type B of zero, B, also works for a list. Or you can use again, to select the elements in zero to n minus right, so you pass an int, another list containing to select. And in this case, the important it's not just individual elements, you're if you're processing, it's gonna be a lot this is related to what we were speaking before. assigning memory, the NumPy library needs storing, you can't just or you know, anything, not be able to provide performance and optimizations for example, when we create these arrays only is because of the platform, it's a 64 bit us, we're going to see other sizes in a second, or floats, it assign a different type, which six, at least in this platform that is 64 64. You can always change that you can say are all integers, I want you to create them using a float type, or as we saw be actually type integer x. So smaller integers, performance. Alright. So moving forward, we for example, strings on the regular objects. no point of storing these things in NumPy a regular individual objects as we're seeing it's perfectly valid and it has its own time. Unicode representation memory etc. But again, So the idea of NumPy arrays is we can create what we had created before. This is a one you can create matrices, which in this case three columns. And NumPy has a ton of attributes arrays. So the first thing we're going to rows by three columns, how many dimensions we have two dimensions. And what's the total size is six, the total number of elements let's create a three dimensional object, a a cube. In this case, for B, we have that of dimensions is three, and the size is a to be careful when you're creating these multi dimensions don't much, like in this case, that only has one less than bits in it, then just tape you they'll use sorry, that the only two only has two elements, these one this case, we've done we've done it wrong, creating these these objects by hand. So how it for a one dimensional array. So we were me the first element, give me the second element a matrix, what we're going to do is going The difference is that now we have to account a at one, is it the column add one, or is the row. So this is going to be right here. right? So this is 012. In terms of index, how can you get the first element, the first you're going to first select the first row, the first element. And that's what you get is by using the multi dimensional selection from this matrix, I want to select and here going to pass dimension one dimension to dimension are selectors for each one of those dimensions for a row level one, the element, the position we want the first element in it. And it's of this index and keeping in mind and remaining right, so you'd say I want to select every in this case, you say from zero up to two upper limit the same as as Python. And then you can also pass other other dimensions, fine. But then I want to select from column up to two. So these two and these two, and as intuitive as it gets. Remember this syntax mind. Moving forward for modification, you this entire row, right? So if the dimensions it's added to the second row, or you can just We're just going to say for row number two, going to take care of expanding it into this that you have So so far that selection, it's has a huge advantage of containing a ton of arrays and matrices, your multi dimensional all the summers basic methods we have. So built in the sum, the mean average, right, also works for matrices. So in this case, or we can do it per axis. So this is very these two, there we go, we can get the some column or the third column, we can get it So it's either this dimension, this dimension x equals one, right? So per row per column. keep increasing the number of this answers. Broadcasting vectorized operations, this is about. And it's going to be extremely related things that you have to keep in mind with talk about vectorized operations and broadcasting, beginning, but then you're going to understand pieces of NumPy. We've seen how NumPy works arrays and all those advantages. But you might library just to complete the summer domain. and broadcasting part, this is going to make important. So to get started, we're going just very simple array vectorize vectorized both arrays and arrays and arrays and scalars, fast, they're optimized to be extremely fast. going to sum the entire array plus 10. And of what happens without with Python. But what it means is that let me show you within the array will be applied the same of vectorizing an operation you have the number one of the elements in here are actually in here. And here to result in these new array, right, we say a plus 10. That's it. But then to each one of the individual elements within Well, a times 10, for example, which also operations to each one of the elements in result of that operation. And these resulting as we're going to see, NumPy is an immutable you performing an array will not modify it, the status of a, you're going to see that we are creating a new array and returning if you want. And this they all these operations interface of plus equals minus equals times rights. In this case, we're making a broadcasting in this array. And now this operation was returned a new operation. If you remember of vectorized operations are list comprehensions, each one of the elements in your collection. a it's pretty similar to what we're doing is all optimized and extreme. It's extremely operations are reduced broadcasting doesn't can only be between arrays and arrays. So showing you right here. And we can do something if there is a correspondence, right, so zero Let me, let me do it in this way. 110 210 that we get right here. So these for these be online and to have the same shape. But when that does work, then the operation it's a vectorized operations with seen so so important? Well, because of the following, very, very important thing. If you don't completely check the exercises we have for this lesson, gonna, we're gonna see that in pan, this, arrays, a play apply, and we're going to use similar to vectorize? operations? Well, all are just arithmetic operations, mathematical etc. If you look at the operators that you not only mathematical operators, like plus operators. And the question now is going to when you apply Boolean operators to it. So to select different numbers. For example, we do zero and minus one. That's, that's the Python one, right, so we can say a zero, and first, the first way of selecting these elements, selection. And there is a third way and this here. So in this case, we're gonna say I want And you're gonna pass either true or false or not, right, so if you have four elements, I want to select this element, I don't want to like this element. And I do want to select one, and the last one, and the result will terribly new, right? So this is new, but it's you a brand new way of selecting data, you a Boolean array. Now, you might be thinking, true false, for I don't know how many records right, you will not say to write all the strong because these arrays are the ones that are So we saw again, regular arithmetic operation operations. So we what happens if we ask a right, and array A is this right here is 0123, one, because they are not greater or equal two untrue for number three. So all the individual true and false. In other cases, this is the to combine these operations. So now we can that a equals A being greater than or equals advantage of this is just filtering, we're with a very familiar syntax a greater than index of the operation. It's pretty much What these Boolean array. It's a willing list, or sorry to select elements based on that. list of Boolean? Well, in this case, we have including a condition that needs to be matched. method, you're looking, looking up some data, match this condition. So you can say, for you can say, give me all the elements that provide other Boolean appraiser operators not greater than the mean. So that means they're include all their Boolean operators like or, with a pipe or an ampersand ampersand. Because in Python, we can, but it's a good choice, concept of Boolean arrays, we are going to representations or Booleans, based on conditions, say I want to select these one, and these is the result right here. This is the result array, we never manually type all these right, etc. We just Run Query filtering option, a array. And now we can use it as filtering. we saw in broadcasting before, a timestamp operators return Boolean, a race, which can of it. And you can even combine these operations, a less or equal to two. And it's also divisible So now it looks a lot more powerful than when about linear algebra very quickly. And this lesson. The part the important part of of all the most important operations for it already to be extremely fast, adult product cross is all that works as expected. And again, for example, machine learning, etc. It's it's up what we saw in our, in our binary explanation is the difference in sizes between NumPy and between them. So in Python, a regular number, total size is 28 bytes in order and just let of bytes, not bits bytes that you need in one is 28 unit 28 bytes to store just the super space consuming, right? It's not very bytes to store them. What's the size of the example, we can create integers with eight right which were something like here we have has only one byte, right, but you can have numbers will take. And you can see here the in Python which is extremely large 28 byte Let's say for example, we want here you have which is also significant. But I want to focus we have one list that has the first 1000 numbers, 1000 numbers, we're going to perform the same one. First, we're going to do the Python one all the elements in the list, okay, the elements operations might so we express it at saying, 4x, nl, and then some everything, how much do the same thing with NumPy, we're gonna see that it's a lot faster in the NumPy perspective, all very, very tiny, tiny operations with numbers, let's add two more numbers here. going to do the same two operations. So as changed, we're still in the microsecond layer layer in Python. So as the size of your objects fast compared to Python. So there are a few extracting normal, random numbers, etc. I'm you're interested in them, I remember you all the concepts we discussed. And we're going going to see also visualizations are gonna Python tutorial. Now, it's finally time to talk about pandas for data analysis in our day to day basis in the entire process of your data analysis data, step one, getting the data from multiple files, etc. That's all gonna get into pandas, So you're going to be combining merging, doing to be visualizing the data, right, so a bar data with pandas, and you're going to be creating statistical analysis, you're going to be doing of other libraries, but everything from the it's, again, one of the most important libraries with Python. pandas has recently released very mature library. It's been around for library that we use in Python for data analysis introduction to the data structures of pandas work. So you can start building right the I need you to be very familiar with the way And then we're going to move into other things to get things started, we're going to talk which is this series. In reality, pandas has the time, and it's the series under the data probably be more familiar with. It looks just first with a series. Okay, so just stay with for a second. In this case, we have important as you might imagine, as I told you before, saying NumPy is fundamental for data analysis they all sit on top of NumPy and you can see from NumPy within this lesson, too. So these here, it's The concept of a series is this right with they are all indexed by a given this looks a lot like a Python list, right? of countries, right in millions of inhabitants. we're getting the population of the Group But basically, we are storing population in lot like a list, but we're gonna find a ton that the the series has an associated data when a NumPy array couldn't hold different having one type of object. In this case, it's will be of type float 64, the underlying data these objects is a NumPy array. So a second can have a name, right. So now when we display it might not make a ton of sense. But once form of a column, then the name is going to again, we saw that A has a type. And again, by a NumPy array that you can always consult, going to get the array that it's backing up that it's a NumPy array. Once you have these series, we were just consulting elements as you good in a regular list, right? give me the second element, the last element, has an index, similar to list a list when I create L equals a, b, and see, but there list, we don't say it right. But the idea is one, and this is two, right? In the pendous element has an associated value within it. same thing. They're all they're both the list ordered sequences of elements. But we're going and is that we can arbitrarily change the created it, we didn't assign any indices. up to n minus one elements. But you can actually of your series. And in this case, these data that we're seeing right here. Why is this to these values, not by a sequential position, which has a meaningful name for us humans. more like a dictionary we could say, than was similar to list but now, we can think But wait, don't get me wrong here. The series still ordered something that didn't happen are not ordered, actually, in python 3.7. that they are ordered their unordered data order. So it has both those advantages. It's that's as we decided to create it, but also with the values as a dictionary. So this is these methods, you can see you can create To be a two step process where you first created case, you can do everything at once. And the indices, right. So those labels that make data. So g7 pop, we see has these countries index, we were saying, I want to get what's to remember, what was the position of Canada, to do g7, pop zero. With the index, now we Canada, what's the population of Japan. And with a Python dictionary, it's just pretty get the value. So again, summary, the advantage of elements, backed by a NumPy array, very an index that can take any labels we pass, indexing, you can steal when you have a series, ordering. After all, it's a sequential data in an index, you can still say, Hey, I know the last element, or the first element or by using the attributes, I look at it and to ilok locate by sequential position, these last element. And that still works as expected saw with NumPy. So in this case, we can get you can pass multiple indices. And the same index series also support range or selection here, this is very important here attention, and it's not in Python, the upper limit of that we created before, if I do l, up to number this is zero. This is one, this is two, two upper limit is indeed included. So if when in the result. Okay, so this is something pandas, I think this is still valid, it's just different from Python. So, you should we discussed in our previous lesson of NumPy. the difference is we instead of saying Boolean the idea is that we will be able to perform right here we have mathematical operations zero D seven pop, which as I told you the we want to get the series of interest units, and there we go now is in terms of units these the bras these broadcasting operations can instead of a multiplication, a summation and Boolean operators. So in this case, we get what are the countries that have more than 770 their assault is a bull in aerates, Nebraska, it's the same concept of with us with a NumPy have more than 70 million inhabitants in Germany here. 80 on the same for Japan, so Japan Here also have past more than 70 million inhabitants. in this case, works in the same way, as with now select, I can say, give me from these more than 70 million inhabitants, the value filtering, we're building a query language data based on this condition. Remember, when the idea is that you can always track down case, we are it's not that the selection knows about how to select countries with more than resulted in these series. And now this series array. And the result is as you can see it, calculator methods, and all the operators which was or this irregular pipe, or, and applied in any order you want. So if we read it's worth saying give me all the elements deviations or below the mean, actually, above if this isn't correct, but it doesn't matter. of the it's actually, it's above the mean, this operation or right, that operation we and they all work with Boolean selection as perspective mean in in statistical operations, deviation, we're actually using standard deviation case, but also you can use traditional NumPy again, a panda's series is internally backed So this is all the same, as you can see, here clear, we're getting all the countries that all the countries have less than 200 million it also has to be below 200. Okay, or in this or below 40. Right. So that's with the OR is relatively simple. Whenever you have a In this case, we're saying Canada is now 40.5. This is by index, you can also do it by sequential say the last country should have 500 now. country has 500 now, or you can also modify you can say all the countries that have less our previous query, all these will now be these countries. So this the assignment works indexing. And this is going to be extremely move forward and start talking about data series, and also for data frames, so I recommend frames, this is what a data frame is going us an Excel table. So this was our series a table. So it looks a lot like an Excel spreadsheet. data frames out of CSV files, which are tables with these data frame object I created. There see, right, it has columns that we have assigned. and we have rows of values right below each with with series, and it's not a data frame think a data frame is a combination of multiple an index to the data frame the same way that is our data frame. Sorry, right here. This And it has the columns as we had before, what data frame, these are all attributes that interesting methods from data frames that info method. That's going to give you quick data frame. Right. So it's going to tell you area, HDI continent. And it's also going to you have, it's actually telling you how many when we're cleaning data to quickly then define can check for the size of the data frame, to a matrix right, a two dimensional array also similar to info the voice again, to check we can also use this cribe, which is going the data frame. And in this case, what we those columns are numeric continent is not can see the type is object is a string, basically, summary statistics for them. So for example, what's the mean, right? What's the average minimum, the maximum, and in between a couple So this is quick summary statistics. And we method is very popular. As you could see, in the in the info method, this is very important. They continent is string HDI is a float and surface area is is automatically with through NumPy, is automatically each one of the columns. This is similar to contain natural datatype, a series was part you cannot change. And in this case, checking of the types of your series. So moving forward, series Well, there are a couple of methods. So what I'm going to do is I'm going to skip first, and then you can read if you want through and this is just two quick rules, given a using the lock attributes. So the lock attribute for example, when I get Canada and that's will let you select similar to the series, We want to select the last row. In this case, look lets you select a select rows by route I log will let you select rows by sequential row, the second row, etc. And finally, without the f up something, you are selecting that tire column population right here, the entire first, first of all, this is a quick reference I look we'll give you an element by position, some things gonna give you the element, the like, both look on I look, look and I look while bf art, whatever works in in a vertical But something more interesting here is that these one, they're all series, what are being before. And the way it works is first, if to see that it's pretty standard, just these it has a type and everything. So that's, that's case, we can get for example, here easily. what you can see here is that this thing is volume of this year is population is here, on continent on here you have volleys. So right from vertical to horizontal, in our series is extracted as the name that the column hot. So in this case, the that it had. So you can read more about it these rules don't lock you select by index the F at something you go by column, there not want to apply, there will be some issues. is numeric, you might have issues with these For now, it's gonna get you any element you what we've seen, the oldest slicing also works or we can get friends up too easily. So the look and we select by indices from France similar to the way we worked with NumPy, we all the countries that are from France, or column or population and GDP. So here you at the concept of of multiple dimensions in ilok. It works in the same way that in that for example, from one to three right in sequential not included. So that's another difference dimensions we can say give me the countries 0123 should be the third column, the fourth is HDI, so that also works as expected. And to select rows and just use the naked data Now moving forward, conditional selection to call it. This also works for data frames. data, it's a way for us to consult the data we have is, we want to select all those countries, so all the countries that have more than 70 we did with a series, but in this case, we going to see here is that we're going to construct video, right? So every country with more than to inject that result, that Boolean series which match here than that the true value mnemonics are a way to remember, the way pandas this index, right from the resulting series. These are two different objects, they are much. So here, Japan, March, Germany March, and that's why that thing is working us expect which is give me these rows, you can also column, or these columns, right. So that's about dropping stuff, you can say, whenever these pieces, or you can say drop the others, is very simple, you can drop by index, drop or drop these indices can in Japan, or you HDI as columns. These ways also have a more to NumPy. I don't recommend them so much, So all the operations we've seen, so far, here is the broadcasting operation that we're to create a new series crisis. And I'm gonna show you what it looks like. So we have here operation between between these, I'm going between that two, these data frame on the subtract, I don't know what's this number in here. And we're gonna subtract 0.3 HDI here is again, this alignment between columns these GDP and the HDI is much with these HDI. objects, these series and these data frame like this, the the columns in this case are So you're gonna subtract these value in all subtract these values in all this column for value here in these column for all these values. forward, what about modifying data frames? And that's when we were dropping stuff before. So here we did df dot drop Canada, but df similar to what happened with NumPy these changing the underlying data frame. We are data frames that store the result of the given Canada. The result is that the these new data changed. That's because again, they are immutable are immutable, there are ways to change it, But for now, I want you just to think that to perform an operation, it's going to create this, you will just need to do something like know, just to modify the current data frame. But we're going to save in a sec. So modifying data frame more explicitly, how can you create column, I said, let's say in this, this column language. Oh, it's just read only. But if whatever I want. In this case, what we've what Lynx had, in this case, was a tiny series, in the data frames, but that doesn't matter. exist. And it will live like the rest. This number from NumPy. We're going to talk more Data cleaning, sorry. So again, links France, all up there. What happens if you want to exist, you want to change it or column or case, we're going to say df language equals df now will be affected, and all the values How can you realize when there is an operation the underlying series or than the line NumPy symbol, remember, NumPy, we saw something a plus and equals symbol is you're modifying So for example, check this out, the Rename you pass columns and indices to rename. So States to USA, the EU, United Kingdom to UK in this data frame. But that doesn't cause you, the US, UK were modified correctly, and doesn't exist, didn't cause any problems. these operations are immutable. If I check that the original data frame has not been if we renamed it before, it's still the same all these operations are immutable. A few to look at. And something that is very common of other columns. So again, this is read only, do is hear something like for example, GDP GDP per capita, GDP, p per capita, per capita, column divided by this column, right? So I three, C three, divided by b three, right. way along here. In pen this, we could do something can just perform operations, broadcasting by population. And we can assign that series we are going to assign that series to a new is now a column of our data for. Again, all fast, they are backed by their NumPy array, statistical information, a few methods, right this crime method. But minimum maximums mean, that I want you to note here, if possible, change colors here, we're going to use red. frame, right data frame that has multiple are resulting operations are resulting in data frame, and you have your series. And it's like always, the data frame is always will just return a series. And the series this case, these resulted in a series, but of a column. Right. So that's why understanding more assignment exercises for you here. So it's going to make a little bit more sense Finally, I want to give you a very quick introduction And to do that, we're going to use a few methods look them up very quickly here, we can say So these function, read CSV. And as we have sequel, read Excel, read XML, there are multiple be able to automatically parse an HTML page like, what we're going to do with these read few of these functions will let us import this workflow. So in this case, what we're so it's right here, if I open the CSV, this price taken a read and devalue the bread, of the value no decide the price of bitcoin just note inside, but again, this is a CSV, To do that, again, we're going to use this parse the CSV, as expected. And there you start tuning it to get to the right point. SP customizations, we can do with the receipt, let me tell you first, we have a ton of attributes do with read CSV, you will not remember all of the top of your head. So don't worry, you and just practice, it's going to come naturally. was considered to be the column names. So name, let's say I add it, I'm going to do save it, I'm going to rearrange the file and pandas is assuming that the first line of back into what it was. Right, and I'm gonna pandas is doing. We're gonna Of course, of this case, our CSV file does not have column equals none. And this is when we start seeing the read CSV function, read CSV. When I do That means don't infer don't read a header. the CSV file. And the columns are zero and And I say, actually to be time something prize. first rows. So you're saying here that I have because this is a significantly large file. at least it doesn't fit in my screen. What's It has 365 rows, and we have two columns. have a little bit more reference about we price is actually float, that Tamsin is an I'm sorry, that the F that head on the F dot the first and files or the end row sorry, default, you can change that and say, Show something you can do. And again, the types the timestamp column was not properly parsed string, which we don't want. So we're going we're gonna explore in more detail in the Part sorry, if it weren't tutorial, we're column D f, the timestamp into an actual date. equals to this function resulting, and now more change that we want to do, we want to timestamp, because by doing so, we can quickly the price of bitcoin in 2000 1709 29. And LLC. There you go. So we have the value of look, remember that to get value from a particular So we are getting Dodd's particular value. we get artists value directly from the index. into an automated script, for example, when we can, we want to read the CSV, strip the etc. This is what we've done so far. Read turn it into a daytime timestamp into a daytime result again, well, actually, the read CSV, that it will let us do all these actions in are parameters that will let you customize we did with four lines of code right here. CSV, don't assign a header, that's something from the first line. These are the column can just say these are the columns names. to be the index of the data frame. Oh, and it's a date, so part of the date, and we have to pro try and same thing. There we go. So this plotting. Alright, so we're going to I don't know what's this thing is as a vertical that you can create plots with Hannah's interest So in this case, what we're going to be doing the plot method. And the plot method, what something that you can check if you want in with these, we're going to be more than enough. regular plug library, as you can see dimopoulos Data stack. And again, for us to access using you're done, you can set the plot as you want, So don't worry too much about that later. that I can just run very quickly, you can But this is what we have, there we go. And what you can see right here is the difference of time right here, and they are both loaded is the resulting data frame, we have Bitcoin side on we are plotting it right here, we're noticing these empty value right here. So 1 up to January the first these period, so And we can just go ahead and plot it again. that we're seeing. So again, this was the example of pandas following up. Also we have reading all the interesting files and sources pipeline, right. So the idea is going to be from SQL and then do the actual processing Now it's time to talk about data cleaning, in which we have pulled the data, I've shown beginning at least the introduction to data to properly fix it. For the sake of brevity, of data cleaning, especially you're going talked about basics, conceptual, missing data miss a few other things. But I'm just going form. And then you can of course dig deeper, more about it. Usually when we talk about level, we're going to talk about a four step missing data, which is the simplest problem is missing. So you have car sales data. And there is a card has no price, right? So there missing and there's a string missing. And a different meaning how to solve how to fix simple. If you can just for example, drop So for example, the prices fill in these missing, the sales data or something like that. Or important if you can't move forward until it can involve something like picking up the going on that the data is missing. Or even the vendor, ask them why their ID if you've etc. So it can be a very political process. from a technical perspective, identifying extremely simple. Once you have fixed the the data is assuming the data is not clean second step is when there are invalid values. column that is price and there is a string numbers and there are strings in it. So then it's not going to be too complicated to fix until a deeann of these data cleaning process, with the domain of the day you're looking is customer age, and there is a value that it's a perfectly valid integer. The problem about customer age, is highly unlikely that that case, the vowel is completely valid, values, etc, is just about the domain. And because in this case, that example of age we know about age of humans. But if you're a data analyst, in a domain that you don't be able to judge if a value is invalid or I have something like white cells count per it's a good value, or what's an invalid value, know the domain. So that's usually the the you reach the limit of everything is valid, sure that these value is valid for these domain spectrum that we're going to be revisiting this works with no values is is it has four it's going to be it's going to be relatively few things first, everything that pandas does to the way NumPy works. So again, we're skipping out by yourself. But it's extremely simple. to identify a missing value or no value in in pandas and NumPy, we're going to use na we have these two functions is no n is na, find also is no and no we have it isn't a n na for pan, this is the same. You can use it's the way I learned it. I think for my it feels more correct. And it feels more self if you can use is no, I think that's going then you're going to be on my side, just do gonna say true or false, depending if the not No, it's going to be or not na is going is false, and not an A of three is true. If to set all the false e values on the true that is not empty or non etc is going to be here that again, is not an empty string or So it's no not no or is it a and none an A, entire data frames, right? So it's not just And the result back is going to be if the series are either no or not no, depending null or not null. So in this case, we say not, no this is not No, this is no so this method we are applying are actually function. entire entire data frame. So something we a few hacks that we usually apply are the no values or not no value. So we have this values we have. And if we sum those, not no result out which is the entire the entire and the same thing is gonna happen if we say gonna get how many novels we have? And it's is no. And the way it works is in Python bullions zeros. So every true Val is going to count zero. So if you ask for the sum of a Boolean of the number of truths that are available have to know values we ask how many knows out, you can use these tricks to filter the say give me all the values that are not known. is that both for data frames are for series. also, sorry, functions also work as methods. dot know, we can say s.is, no load s, that a little bit simpler. But if the final objective only the boundaries are no no, was to drop which is dropping, okay, so in this case, invoking the same thing that is happening all the missing values in the series or the frames. So what's the one, one important thing are immutable, we are not actually changing series is not being modified, there is a new again, this thing has is not modifying their that's the one that hasn't, that doesn't have also works for data frames. So right here, right? The first thing usually is to start and we see that there are in total, four entries, more information about the structure of our in our index, column A has only two no no that are actually no no, sorry, no, there values. So that means that one value must so usually info gets you very close to understand values there are missing. The same thing happens a and then some, we're gonna get a quick reference data frame. Drop in a works in the same way, way drop in a works in a data frame by default no value. So these row has no value dropped, has two new values dropped, this is the only it's very harsh in that respect, you can change the column that has no no values, and that's is also a way to select a subset or thresholds. valid values. For example, in that case, you're the drop in a you're gonna say, drop the columns, is also works for columns that have all the behavior, drop all the rows that have any you mean by basically saying, I need this rope it's the way it works. Now, which ones fresco. So once you have identified it No to sorry, fix them. So the first method we're value, we're going to say from this series, missing values with or fill the anaise. fill two are numbers zero, or, of course, you can case, we can use the main. Remember, this is still the same, we're not changing it, methods are immutable. The following method is or this the following which is for field or backward fields, these it works is it's overflowing, all the values here, it's dropping this value here, dropping as this thing is a nun, it gets replaced. up here. And now this thing is three again. course, backward fields works in the other it here and then moves here, etc. You have you have no no values at the beginning or no values because there is nothing to fifth have India. And all we've seen also works field or both in terms of rows for feeling, sets. So we do for field row base is going going to be for field x is one, if you use right? It's going to go here, one 130 30. one 130 30. So it's either for filling in, it's going to be in this direction, depending let me we're going to put the correct forms it's going to be visit direction with axes it's this direction, right? So we had a no moving forward, we what else we have, we have much seen this already, you can use the is you have. And there is also any an old, which called Boolean tests, you can say ask if there are valid is just to build more complicated we said was at the beginning, we were fixing in there. We have read a data frame, where's data frame from CSV from a database, and the So we have quickly identified it with isn't we didn't want to keep dropping a or we were fill a name that was simple isn't a drop in data that actually has a value, so there is But those warnings are invalid. So for example, that only accepts an on f. d on question mark, to see an invalid value here because it's as we have, for example, question mark in in the age column, it's very simple to identify start with sex first, because it's simpler with either unique or with volley counts, this method before. It's a quick summary of case, volley counts also gives you a total Well, there is a replace method which is extremely we're changing all of these two F's and The For those volleys, that again, we said were we know age, in this case, is 290. And we as an invalid age for a human. So we will need more complicated fixing, and it will you have to be better coding. In this case, it's probably an extra zero. So all these there are a total of 180 290 32 320, for example, places. And that's because there were typos you going to fix that? Well, in this case, we're dividing everything by 10. So also, something that may be useful is dealing what's going to be a duplicate value. So this if you want, you have to define what's going series that contains ambassadors, and each, the ambassador is going to be the value, right? here says the word conducting a party, and we don't want to repeat ambassadors, ambassadors. that these two in our humanize at least, we two belong to the same country. And these again, we have to define which ones are the not duplicate. So for example, maybe we can say the last one is duplicate. So this is say this, the last one is one, and when I to have political rules if you want for each method and the way it works by default. By true for duplicate for all the it's it, I'm it as a duplicate as the first instance that top down right now saying, Do I have friends? it here. Because it's the first time I see the UK, it's just gonna keep it here. Then there, too. It's already present. So this Italy is here, it's fine. The first occurrence but then it says Germany two more times. And are now duplicates, right. So the way it works it to last to the last element is not considered to be duplicate. And the same thing here. it's either top down or bottom up depending either keep default or keep last, or you can duplicate it is actually to be needs to be and these three are all duplicates, as you method, which pretty much tells you which them, you also have the drop duplicates, and do is basically the same thing as before, true, right if the method is if the value same rules apply default, last and false. have multiple, we have multiple players in player Colby is present three times for humanize happen here is that the The way we're going the correct subset that we should check. In two times but COBie, playing us in SF could because maybe it's a different season, or played. So in that case, we need to pass What's duplicate, only check for the column name, for the column name, which is the default when that happens, then these two are considered with this rule, if we put keep last, sorry, duplicate. So this second occurrence is the different row, because the the value in position Moving forward with more cleaning of values, And this is a very neat feature of panelists, attributes. So given the column type, so df right, in pandas, that all the strings columns which is str, all the daytime columns, something know, all the daytime columns have a.dt, Math have a.ca t cat attributes. And those attributes, the domain of that column. All the methods string handling, or the methods associated we're going to review all not all very good And something interesting is that all these And they're related to the ones in pure Python. a split method. There is a contains method it's actually, I think it's the in operator, right, so most of the methods under the str have an analogy in the standard library of the beginning, this data we have, I'm going are going to do is split the values right what we have, we have split all the volleys the special attribute is expand, expand sorry, going to create a data frame out of that. And this is what we have now. So we can keep or content contains, regular or contains with the power of it, we can just strip replace, replacing so we could fix something like this with regular expressions if you know how to going to be very helpful when you're doing a visualization perspective. data cleaning of your data to when a volume is considered and you want to claim it. So but that's a I want to show you very quickly, the mottled some time now, the mapa lib library. So far, pandas, or we're doing a data frame dot plot. all those methods and we're going to see how has two important API's we're gonna call him is the global API, but it's the most common the global API. And the second one is the And usually there are there are ways it's thing. Okay. The global API is an API that around for a long time on sadly Most of the and books will be using these global API. And I'm gonna explain you why in a second. But I want to show you both. So you have a of preferring the object oriented API, you Why is it considered a global API? Well, we we haven't imported the whole module, the know about Python programming is going to module. And now what we're doing is we're then we're going to do a title. And then finally, x, our plotting x squared and minus x squared. functions that are at module level. And there modified by these very generalistic and global here, I'm modifying the final result of the So you see the problems with the global API. If you look at these line, if you could delete What is this line doing which plot is affecting, way of saying in this second plot the plot actually the sub plot on the right, I want it to the entire module. And depending the to land, that particular figure where it's lend. Again, it's a global API. So we start me from So from now on, I'm going to start And hey, by the way, it's going to have one gonna start drawing in the first plot these left, okay. So now I have kind of activated I'm going to start drawing on it. So every to be affecting these blocks, these blocks, this vertical line, I put a legend, I set and say, Hey, now I want to switch the plot, to start plotting here in this second one, line these one. Oh, sorry, the way it works but second plot. So now I want to start plotting that line. And again, you can see that understanding the sequence of lines is very hard. If you takes 100 lines, then you have to keep in approach is going to be the object oriented And we're creating axes. So in this case, one entire figure in red. And we have in here, and this is access to so we have two axes. oriented approach. And we're going to keep later, to these blocks to these artists, sorry, very explicit, it's going to be an object the figure on DCE. The axis in this case, can have more and then you say in this axis, want to pull up that thing, etc. When you going to go back again to that in a second. right, so we create one figure. And it has saying and rows and columns. Now we say to to axis number two, I don't want to put that lot more explicit, it's not depending on the matter. They're that the results are gonna be the of the position that we're following. So the out the differences in both API's, maple leaf depending on sugar enter global, that we'll we're passing all the values in x and all a given line style, this can change with these this thing in X, I'm blowing this thing in to use a straight line, it's a straight line, So this is if you are very familiar with it. can use to send links in other games, you color specific keyword arguments for each in APA live? No, of course not. We have a is another one here, if you want to see more and put different things in it. And again, nice scatterplot. So basically, we're plotting value, our color map, right. So given the So these kind of lets you plot three to four volume, y, the size of the bubble, and the much encoding four dimensions in just one using two different scatter plots, there's that we've very quickly seen that with pandas type histogram, current histogram hist, actually, So just go back into the index in the video. takes the valleys you're plotting and how arguments here, like the alpha level, etc. you can also create kernel density estimator to simulate if you want a continuous distribution. this case, we are creating the plots were the lines and they were plotting our changing can also create bar plots, right? So in this two bars are stacked, right? That's the different You can always plot histograms or box plots, to have in here. So this was all with data this tutorial, I want to mention one more for kind of a task that you can follow with where indentifying missing values in given here, we're looking into more detail about case we need to clean it. Okay, so this is to the concept of cleaning data given the you that this value is an outlier. For this for example, a human being is 90 years old. But if you're analyzing data about high school soul, it's going to be completely invalid And you can treat it as such You valid valid So that's, that's deal a little bit more with here, it's a little bit more advanced for rest of the videos. Now it's time to get into more advanced features seen already in our real life example, the from SQL databases, right, we had actually part of the tutorial is to show you how you cases of importing data. So we're going to And again, you've seen it already. But here, going to show you more advanced features. files, is, conceptually speaking, a CSV file right? That it's encoding information. The So it's a plain text file that contains tabular for comma separated, but it can be separated later. But basically, the idea is that it's format. So though, both CSV files and text to get things started, I want to show you from from external sources using Python without need to know this, it's usually it's usually or data analysts to understand a little bit computers, because there are multiple, multiple systems processes your language, right, it's with Python or with another language. So there pandas in this case can make it simple, very a little bit of a more advanced use case, operating system processes on your language. file, sorry, using pure Python, we use a function manager, just a security feature, again, related files. But it creates a file pointer, right. the very simple API x point post. But they red line, red lines, read a number of bytes FP as an iterator, just do a four line in like this, we'll start reading data from top we hit I've given in this case, we're doing can, it gets very difficult when you're reading hard to parse the structure of the file. So is separated by comma separated by colons gonna see that once you want to get a little an advanced usage, right, or a little bit you parse the data, it's gonna, it's gonna pandas, or I'm going to show you in a second, So this is the file that we're going to be going to open it. And even though it doesn't difference is that here the separator is the sign. That's going to be what marks the elimination So we're gonna use the CSV module. And the way right here to parse the data using right? So that's gonna be the type of work data. It's not the same thing to have that same thing to have numbers for example, that will change the way you work on all days is module. So to get things started, again, with underscore something methods that will work have read sequel we've seen read CSV, there's from a table, it's literally you can just from a table, or read Jason read more advanced each file format will usually have a correspondence to rewrite my own stuff. To be honest, the like Excel, which might need external modules, by installing those modules, you can easily work. So the read CSV file methods already main characteristic of all these rate something you're going to have with these files, there the method invocation. Alright, so again, happen. csv is a passage that have a header different and closing of strings or numbers, things are going to happen. And that's all read CSV method. So this is the reference attributes you can pass to it, usually something use pandas a lot, and I still do something right here, to look into the, the parameters use case. So keep an eye always in the docs, parameters in the CSV. So in this case, what is we're gonna parse a CSV file, but it's available in the computer. The CSV file is source, if I get the raw version is this thing. is download the file, right, so just do File, here, right, so just copy and paste here, has this nice characteristic that it will did with BTC market price, or you can also download the content of those files. And it's memory for further usage. So there's a very file that we are using. And again, the same same way. So a few features you've seen already, you don't want to treat the first row as a treat some of these values like a question etc. us not a number, not a value, right, values we have passed, will be transformed process cleaning, we can pass names, which for each one. And we can also specify column the types are going to be float. And object. we are parsing the time and there you go. forms of reading csvs where we're passing to read dates, were passing no values, Heather's doing. So what about XM review, if we try format. In this case, they put the parameter in CSV is now set from separator so the separator, just works as it needs. So, a few more examples is following right, the documentation to find so for example, some Like skip blank lines, beginning, right. So if you have empty rows say skip rows. So you don't need to parse that is all part of the read CSV file. And going to tell you something that applies to have a read something method, there's going the process of writing. So you can do read we imported from the external source and the going to store it locally. Alright, and there delimiter, or actually the separator, if you an index, etc. They're pretty much the same every read something method, there's gonna the process of writing. So let's move forward we're gonna get to read directly HTML pages time to read data from databases. We have Panis part of the tutorial. But I want to for you understand how data is being processed importing data from databases. So the libraries database engine, you're using Postgres, MySQL, libraries. But the API's, once you have installed, There's actually p Ep from Python that actually unpin, this can work with pretty much any that comply with that interface. In this example, right here, there's nothing, no server to And the example we're going to use, or the different one from our previous video is reading in this case, we're going to be using chinuch, size. So it's going to be a little bit simpler. that we did with our previous part, that was to actually read data using Python. So forget we go back again, to the beginning of time, were writing, finance, open FP, FP, the red predates to pin this, what was the default is with the regular again, interface from import SQL lite three, we're gonna create we have these common interface that again, that you're used to. And the default behavior going to execute queries using that cursor. Select star from employees limit, Fox will table employees, once you have executed a do a fetch all to get all the results of that you are noticing this is the result is a list if you combine it with pain, this you can And we're close. It's not perfect, but we're gonna close it Kurt Dickerson on the connection. With pandas we have as we have a read CSV method, and in this case, what this method is going to be the query that we're passing connection. That's the object the connection panelists. So it gets a simple as writing into a data frame, including column names fancier, you can either specify the index as a index, and also what types to parse for all the work down. So we're going from something etc, which might also be as low to using pain database. There is actually a caveat here deep detail of the way pandas works, and is for two other methods, read SQL query and on read SQL query, when you're using read work to either query or table, or an SQL query far, so in this case, it's just going to issue it for you. In contrast rate SQL table is a name, and it's going to automatically give case, all the column names, etc. So it's a thing to keep in mind is that to use this SQL alchemy, and the connections generated on we create a connection objects, and now for pandas to do it. So again, it's pretty Red Star from this table, Red Star from that table, and that's going to do it just advance. sorry, read CSV method had a to CSV method, is a read SQL and the results are to SQL, the from the database and write it down into also receive the connection, right? So to of these data frame, what table name is going to keep in mind is that to SQL has an important already exists, that in the default way, it's when you are trying to save data to a table. were usually reading data and processing it, meet make sure that it's not by mistake. But can just change this parameter if exists something to intermediate intermediary table tables, whole concept of the table, be careful here, the current table. So that's just for to see. of course, we're not touching on anything advanced, it's just for you, if you already you can pretty much copy and paste what we're get your data import into Python. So let's now very quickly, I'm going to show you how HTML web pages. To be honest, this is a simple it depends a lot on the structure of the web tables are not correctly created, you're going of data cleaning. In my experience, whenever site like Wikipedia, or some stats site, it way of hacking. You know, whenever you have need to know the GDP of countries. Instead go to Wikipedia page, there is usually a table done. So again, it's it's a relatively simple exploration. The way it's going to work is testing purposes. To get started, usually, from a live website. So you're going to pass HTML method will download the content of the the content already the HTML, and this is same HTML we have on top, I'm just displaying is we're gonna invoke the method, read the parse the entire HTML and look for multiple have multiple tables, even if you don't see in HTML to use tables. That's why it's going stored them all in a DFS, multiple player there is only one. So in that case, we're it has correctly parsed what we had before The same is going to happen with for example, doesn't have a header, it's gonna automatically much as we know it already. In this case, before about data cleaning process that these one that has a T head to head attribute, in that's why read HTML is going to have issues information. So let's see another more realistic from a website, let me tell you here, just need to understand if you have if the data for Wikipedia, at least what I do, the content on it. There. What we want to show you here multiple headers, etc. So that's why we're URL, and we're gonna directly do NBA tables. is this one, the large one. So that works. that and we see that the all the players in else, let's actually open this page right we will probably find several tables. See, to import it. We have 27 tables, again, you they are there. And the most important one So the problem you're gonna have with this and rows pans. So in this case, this column these row here stands for 123, at least three very ugly data frame, and you will need a you're going to find with HTML tables that formatted for machines that are formatted we have this header repeated, when you parse 20 rows, there is going to be header row, case, to enter rows, you will need to drop let's see, actually, if we can see it haven't head, and you're going to find 25 Records so what we're going to do is you will need range 22 starting in 22, up to the F the shape, one and every 20 rows, I don't know this is didn't even work. It didn't compile. Oh, this So maybe it works, you can check it. But what cleaning to do because HTML pages are optimized it's going to take a little bit more time. associated that you can consult. So for example, instead of a page. But again, sometimes just So that's it. You can also write data to CSV standard. As we've said, this is up all we move forward now with a few other methods, going to do a little bit of grouping and keep decided kind of last minute to our final source Excel file. It's just a common Excel files, come from an Excel backgrounds, you can just Excel spreadsheets, and load them into Jupyter him this so you can try things out and kind you do with pandas and Python. So the first So if you try getting the content of it, it's it. So that's why it's gonna require external AI, there might be a student's holding goal going to install it. So just keep in mind data from Excel, if they if there is low compatibility version you're using. But without those without Excel method, which pretty much takes care like the finding the the sheet that you're we're going to start reading these file, which descriptions, and merchants. And it's actually in our data analysis, from Excel to pandas that. And from this file, what we're gonna see is that it reads the first sheet of the to one sheet only, right? And the first one There are different behaviors for it, you you notoriety defining and specific index, So far, it's selecting specific shifts is can share the rate story either products, Excel file. There is another format or a new advanced. But it's the Excel file class. So directly is going to read thought Excel file this Excel file class, with the parameter have just a reference of everything you have. names, it's going to tell you how product more explanatory data analysis. So let's say of the Excel file, this is going to be helpful, get the sheet names, and a little bit more say from these files we have previously parsed product, the product sheet, and that's going is going to happen with all the parameters Finally, you can see that the results are same way as to CSV, and decide if you pass you're going to pass a sheet name or not, you can see, getting your data into a from is extremely simple. There are more customizations array, either rows or columns, you can change to work, too. So that's pretty much the only a little bit more complicated. Like for example, sheets. Excel file, you can use what we call you instantiate the rider, and then you can you want to ride with each one of those, that from on to Excel files is relatively simple. It depends on on what libraries you have in or if it's a Linux slash slash mark, the documentation might have more details for the given platform document, if it's not here, it's gonna be be a requirement is supported. So just check it out, check in Windows, Mac Linux, how to get those libraries So in case you're just getting started with the objective of this quick section is to I think it's going to take a little bit more. of Python, again, just the high level features functions, how to import modules, variables, scroll through this notebook, if you want explanation on top of all the topics, but language. So to get things started, Python has caught more attention in the past five It's even older than Java. It's up here in by Guido van Rossum. And it's an important think he still the one deciding discussions the language, etc. Python is a high level a tone actually, if we read these entire sentence, is basically high level programming language, functional attributes or functional features And it also, of course, it supports imperative applications, you can do web development with for system development for configuring machines data science, it has multiple applications indentation, for defining blocks, etc, that with programming. So if Python is your first It's a very good idea for me, it wasn't my But I, I have taught people programming with it's always been very good for them, because in JavaScript or Java. So it's a very concise So let's get started very quickly. First of your own computer or you can use notebooks in your own computer, you might see that you or actually, if you're reading tutorials online, the reality is that Python two was deprecated use it anymore. There are still ways to install shouldn't use Python two, you should stick of the language. So ton of fixes from Python language and used to confuse beginners. So again, is what you should use, you will read using Python two, you should try using Python but the changes to fix it are not very hard. the problem of this and with regular syntaxes. a function in for example, JavaScript. And or Java based languages, the function keyword, parlors and with these sort of languages. function in Python is in this way. And the the way we're going to define blocks is by is a valid function in Python def is the key parameters it receives. And the way to define Everything one level to the right. Usually, Another example is an if else statement. So something else, right? This is JavaScript. If this thing happens, we indent one level if there was another if statement here, if like I don't know, three, then do something indenting everything to the right, every time is just when you go back again, print this going to work it by indenting. Our blocks, have debates of where we should place the a lot more readable, it's a lot easier to obligatory indentation to even make the code how it works. How we're going to make comments there we go. And the way to define variables is a language that you don't need to declare and just one pass, you know, you find a variable, typed. But it's also strongly typed. And these you can assign variables to any value you are heterogeneous in terms of types, etc. types, I'm going to show you the most important have numbers, of course, integers, we don't other languages, like different precision concept of Long's that has changed with Python honest, we use just integers, that's the way to save storage when needed. So that's, that's which is the regular float type for floating course, it suffers if you want from strange like in this case, you can prevent that by see, doesn't suffer from from this issue. also have decimals, strings are just a type as in this in the st, you can see right here, is a difference between there was a difference strings, etc. In Python three, that has all Unicode. And there is the concept or the difference the type. The Unicode code points as it's turn it into binary. So in Python three still whether it's a binary string or whether it's about it, I just want you to know, if you're might find a difference between Unicode strings something that we should be worrying about. it expands multiple lines, you can always quotes or single or single quotes. So just to create multi line strings is extremely do Boolean objects are unique, right? It's false objects. For example, They are of type which is none, we don't have no, we have none, In Python, everything is an object. So even have an associated class, if you want, everything of you have seen. So for example, we have is str, you can use the int, str float bool also as function. So in order to cast in this into an integer, you will use it you will same thing that you get with these, for example, what we have to show. So functions again, function, we use death I, you can use define, are optional, and finally have the return you usually 99% of the time, the function to be the result assigned once we invoke the function doesn't return anything explicitly, a return statement anywhere in your function, that the fact that you haven't included a the function is not returning anything implicitly, returning none, right. So by default, if you Just for you to know a function always returns parameters is pretty standard. Python has for example, variable length arguments, we it very dynamic keyword arguments, named arguments, already, the shin modulus, in this case, were standard. And the same thing happens with or equals then etc, there are type checking. feature, even though Python is dynamically case, you cannot compare a two with this doesn't about that. So this is an example of an error on the same thing with bolens and not on or defined by the indentation so every new block includes if else and also l F, which is very happens, Elif, Elif, etc. Python does not how are you going to loop through something or collections in general, are very interconnected. Python, you're not doing a regular in Python, you're gonna have something like int i equals What else I it's been decades. And I this is I haven't 10, less than 10 less than 10. And here we don't have these in Python. We have a way iterate over a collection. So what we're going and we're going to iterate over it. So the is going to be a for each. Alright, so in we're going to do for name in names, that's be associated with an element in the list. are usually discouraged in favor of for loops. it should be coded with a for loop and not these my trigger or these might result in conditions correctly. So the collections we the primitive ones, the most important ones usage of lists. And it's just a heterogeneous it. And actually, all these collections are want. And in this case, we have three elements one string, and one Boolean. And let me say supports mixed types in the collections, it honest, we should, you should usually avoid means we don't, we don't know what we're putting So it's possible, revisit your code, if you the length length function accessing elements So in this case, give me the first element index starting from the from behind from the minus three. So in this case, minus one minus can check the operations associated with all dot append, we're going to append the new at the end. And we can check if that element this case is false. topples are similar to difference is that they are immutable, there or remove elements from a tupple once it has a list with three elements. Now tupple, sorry, can check if something is in it in the same with a tupple. Again, you cannot modify it to it. Another important data structure is key value, right and mapping, it's similar in, in Java, it's a key value mapping type. values to names. So you can see this, the a topo list, right? So let's say we're going give me one second, we're going to create elements. And we're gonna associate that to we could very well store the information about I mean, I can get it done. The problem is about this list, we're going to say, for example, this customer, I have to remember the position is going to be position number one, if these values or four pieces of information for our be very hard to access those individual volleys. are collections of values. The important part value. But they are instead of just indexed we tell them very explicit names. This is And this is if they are subscribed or not. access those values by the name, give me the of the user is the last name present of the again, it's a way to store information associating let me delete this. And I move four sets sets you're learning about a collections and, and not so common in too many languages. I mean, often because it has a very interesting feature, to tell you about dictionaries, both sets data structures, you never know, the order there have been changes, which make Python to say you shouldn't rely on it, you should unordered data structures, and the same thing elements, you know, it's a big bag, you keep is no orphan in it. And what's gonna happen to the set, or you're going to remove elements that makes this set so useful, and it's the write it down here, membership, ship operation, later. So in the membership operation, the the, the in s, the process s of checking this is extremely because as you might have seen here, when repeated elements, 333, write 11179, the resulting these are two features of the set, the set way, it's implemented behind the scenes will simple to check whenever you pass these membership extremely performant. It's very fast, different sets are very, very useful when you're checking we're going to iterate over collections with a list, it's going to be for element in list. use a dictionary, sorry, in this case user, key, we're going to get for name email age out of the of the dictionary, we could also you go. Or you can iterate over both key and go. So each iteration in in in Python is very we're always using the for loop that assumes don't have the for Ei equals zero equals zero, we don't have that right in Python, we can example. Print. We've got simulated with the those elements. Something that you might have of built in modules, right that you can just things already coded in Python, that it makes on top. Do you want an a library for I don't NumPy, right? machine learning web development, want to create a graphical user interface, a library that has already been coded and the bill team is down there library, right, not third party. In this case, it's already library, so many modules. And the way it works way we work with packages and modules, there third party ability, and this is a little random number generator, it's already built right here. exceptions, whenever you do something that the age is greater than 21, but age is a string, to fail. We can catch exceptions before they accept lock. Right. In that case, if this going to be kicked in. And you can catch the And you can be more explicit about the error It might be useful if you're coming from another as a reference. We're going to be using Python if you want to do scripting, work development, etc, visualizations, machine learning, Python lesson helps you port your knowledge from