The following content is Commons license. Your support will help MIT offer high-quality educational To make a donation, or view hundreds of MIT courses, visit ocw.mit.edu . PROFESSOR: Good morning. Try it again. Good morning. STUDENTS: Good morning. PROFESSOR: Thank you. This is 6.00, also known as Science and Programming. My name is Eric Grimson, I have Guttag over here, we're the course this term. I want to give you a heads up; firepower this term. John was department head for century, and in course six, head in course six. John's been lecturing for All right, I'm the young guy, twenty-five years. You can tell, I have less What I'm trying to say to course really seriously. We hope you do as well. But we think it's really to help everybody learn about this course is about. What I want to do today is three start-- actually, I shouldn't little bit of administrivia, the to know about how we're going I want to talk about the goal you'll be able to do at the end get through it, and then I want the concepts and tools of is what we're primarily going We're going to try and help you computer scientist, and we're that towards the end of this throughout the rest of the Right, let's start I'm going to give you The strategic goals are the prepare freshmen and sophomores in majoring in course six to department, especially for those a lot of prior programming If you're in that category, going to get it. We're going to help you ramp able to start the course six and still finish on target. We don't expect everybody to contrary to popular opinion, that category, the second thing to help students who don't plan feel justifiably confident in read small pieces of code. For all students, what we want an understanding of the role play in tackling technical come away with a sense of what and what kinds of things you problems. And finally, we want to position you can easily, if you like, office and summer jobs. Because you'll have an confidence and competence computational problem solving. Those are the strategic goals. Now, this course is primarily little or no prior programming As a consequence, we believe under-qualified for this students, you're all qualified But we also hope that there are over-qualified And what do I mean by that? If you've done a lot prior not the best course for you, category, I would please or I after class about what your experience you have, and how that better meets your goals. Second reason we don't want class, it sounds a little nasty, is, an over-qualified student, programmed for Google for the have an easy time in this a student accidentally We don't want you to feel inexperienced. And so, it really is a course or no prior programming And again, if you're not in that I after class, and we'll help want to go. OK. Those are the top-level Let's talk sort of at a more we want you to know What we want you to be able you leave this course? So here are the skills that we Right, the first skill we want to be able to use the basic thinking to write small scale coming back to that idea, computational thinking. And that's so you can write And small is not derogatory the size of things you're Second skill we want you to have is the ability to use a tools in order to be programs written by others. So you're going to be able to be able to read. This latter skill, by the way, Because you won't want to do yourself, you want to be able created by somebody else and there, whether it works build on it. This is one of the plagiarism is an OK thing. It's not bad to, if you like, others in order to create Although we'll come back bad thing later on. Third thing we want you to fundamental both capabilities computations, and the costs And that latter statement sounds of computations having There're some things that We want you to understand So you're going to be abilities and limits. And then, finally, the last going to get out of this course the ability to map scientific computational frame. So you're going to be able to problem and map it into Now if you think about like grammar school. We're going to teach you to to write, we're going to teach and cannot do, and most try and give you the start description of a problem from out how to map it into that can do the reading and writing OK, in a few minutes we're going about what is computation, how those tools, but that's what you what you're going to gain out you're done. Now, let me take a sidebar for about course administration, the we're going to do in the course, the rules are. Right, so, class is two hours You obviously know where because you're here. Tuesdays and Thursdays One hour of recitation a week, back in a second to how you're And nine hours a week of Those nine hours are going to problem sets, and all the involve programming in Python, going to be using this term. Now, one of the things you're problem sets are pretty easy. Actually, that's probably They're very easy. And we're going to ramp up. By the time you get to the end be dealing with some fairly things you're going to see is, of libraries, or code It'll allow you to tackle you to write from scratch, but here is going to be You need to be able to read that as well as write your own. OK. Two quizzes. During the term, the dates have John, I forgot to look them up, and November 4th, it'll be My point is, go check the course way is right there. If you have, if you know you those quiz dates now, please We'll arrange something But if you-- The reason I'm saying that is, getting married that day for from the quiz to get married. We'll expect you come right way, but the-- Boy, tough crowd. All right. If you have a conflict, Second thing is, if you have an for taking quizzes, please see At least two weeks Again, we'll arrange for this, warning so that we can OK, the quizzes are open book. This course is not It's not how well you can think both John and I are a tests, given our age, This is not about how you how you think. So they're open note, It's really going to test The grades for the course will the word roughly because we these numbers around a little following percentages: 55% of problem sets, the other 45% And I should've said there's two I forgot, that final exam So the quiz percentages Which makes up the other 45%. OK. Other administrivia. Let me just look through First problem set, problem set This is a really easy one. We intend it to be a really It's basically to get you to and make sure you understand The first problem set will be pretty boring-- somewhat like and that means, you know, get going on things. Don't worry, we're going to make you go along. Nonetheless, I want to stress sets are intended We're not using them to weed you help you learn. So if you run into a problem don't get, all right? Seek help. Could be psychiatric help, I recommend the TA. My point being, please come The problems are set up so that, right path, it should be pretty work it through. If you start down a plausible sometimes find yourself stuck in want to bring you back in. So part of the goal here is, exhausting kind of task, it's be helping you learn If you need help, ask John, That's what we're here for. OK. We're going to run primarily a the website is there. Please check it, that's where posted in terms of things In particular, please go to it there that you need to fill out up for rather, a recitation. Recitations are on Friday. Right now, we have them 11:00, 12:00, 1:00, and 2:00. We may drop one of the course size, all right? So we reserve the right, you around. My guess is that 9:00 is not popular time, but maybe Nonetheless, please We will let you sign up for sense for you. Again, we reserve the right to to, just to balance load, but we that fits your schedule OK. Other things. There is no required text. If you feel exposed without a have a textbook, you'll find one going to reuse that word, John, the course website. I don't think either of us are the best we've probably found If you need it, it's there. But we're going to basically not Right. Related to that: attendance obviously not mandatory. You ain't in high I think both of us would love to at least your faces, smiling at us every day. Point I want to make about this, going to cover a lot of material assigned readings, and we do associated with each one If you choose not to show up choose to show up today, if you future days-- we'll understand, understand that the TAs won't you if you're asking a question was either covered in the lecture and is pretty All right? We expect you to behave and we will as well. All right. I think the last thing I want handing out class notes. Now this sounds like a let me tell you why. Every study I know of, and I about learning, stresses that take notes. Ironically, even if they OK. The process of writing is brain, and it's actually helping taking notes is really Therefore we're not going What we will distribute for that's mostly code examples I don't happen to have one today to do a lot of code. We will in future. Those notes are going to make outside of the lecture, So it's not just, you can swing and go off and catch What we recommend is you use annotations to help you but we're not going to We want you to take your own like, spur your own All right. And then finally, I want to of the staff, our job is That's what we're here for. It's what we get If you're stuck, if you're certain about something, We're not mind readers, we struggling, other than sort of face, we need your help But all of the TAs, many of whom front row over here, are here At the same time, remember that And if you come and ask a easily answered by doing the using Google, they're going But helping you understand conceptual difficulty is what we're here for, so please OK. That takes care of the John, things we add? PROFESSOR GUTTAG: Two This semester, your class OpenCourseware. If any of you don't want your the web, you're supposed to sit PROFESSOR GRIMSON: I forgot. PROFESSOR GUTTAG: --Because I think you're all very good image, so please, feel PROFESSOR GRIMSON: I'll turn know, move to the back, Right. Great. Thank you, John. PROFESSOR GUTTAG: So that, the is, recitations are also We will be covering material in the lectures, not in the to attend recitations. PROFESSOR GRIMSON: Great. Thanks, John. Any questions about I know it's boring, but we need the ground rules are. Good. OK. Let's talk about computation. As I said, our strategic goal, help you think like a computer saying it is, we want to give make the computer do what And we hope that at the end of confronted with some technical instincts is going to be, &quot;How that's going to help So we want to help you scientist. All right. And that, is an interesting What does it mean, to think Well, let's see. The primary knowledge you're course is this notion of this ability to think in computational modes of thought. And unlike in a lot of consequence, having the ability going to help you. It's really learning those want to use. What in the world does computational mode of thought? It sounds like a hifalutin trying to persuade Right. So to answer this, we really question, a related question; It's like a strange What is computation? And part of the reason for to, as much as possible, separating out the mechanism, computational thinking. Right. The artifact should not be It should be the notion of, computation?&quot; Now, to answer that, I'm going And I'm going to pose what question, which is, &quot;What is about two minutes why I'm But I'm going to suggest that I least two categories. OK, and what is knowledge? And the two categories I'm going declarative and imperative Right. What in the world is declarative Think of it as statements It's assertions of truth. Boy, in this political season, phrase to use, right? But it's a statement of fact. I'll stay away from the Let me give you an Right. Here's a declarative The square root of x is that y y's positive. You all know that. But what I want you to statement of fact. It's a definition. It's an axiom. It doesn't help you If I say x is 2, I want to know, of 2, well if you're enough of whatever the heck it is, but in you find the square root. The closest it does is it would if you're wandering through out-of-work Harvard grad, of square roots, they'll give test it to see, is the 2, 1.41529 or whatever. I don't even get laughs at to stop in a second All right, so what am I It doesn't -- yeah, exactly. We're staying away from that, with the cameras rolling. All right. What am I trying to say? It tells you how you might test tell you how to. And that's what imperative Imperative knowledge how to deduce something. So let me give you an of imperative knowledge. All right, this is actually a knowledge for computing square Heron of Alexandria, although I are suspected of knowing But here is a piece of All right? I'm going to start with a guess, And then I'm going to say, if g And return g. It's a good enough answer. Otherwise, I'm going to get a g, adding them, and Then you take the average Don't worry about how came But that gives me a new guess, That's a recipe. That's a description Notice what it has, it has a want to use, right? It's a sequence of specific that I do in order. Along the way I have some tests, value of that test, I may change sequence of instructions. And it has an end test, I'm done and what This tells you how to it's how-to knowledge. It's imperative knowledge. All right. That's what computation We want to have ways of OK, and that leads now to an would be, &quot;How do I build a that set of computations?&quot; So there's an easy way to do it-- I realized I did the boards in the ways I could do it is, you little circuit to do this. If I had a couple of elements of some wires to move things to do addition, little thing something to do the testing, I that would actually do OK. That, strange as it sounds, is earliest computers, because the what we call fixed-program had a piece of circuitry computation. And that's what they would do: computation. You've seen these A good example of this: It's basically an example of It does arithmetic. If you want play video games If you want to do word It's designed to do It's a fixed-program computer. In fact, a lot of the other similarly have this flavor, to how to pronounce this, One of the earliest thing designed by a guy named solved linear equations. Handy thing to do if you're 1806, or whatever you want All it could do, though, was One of my favorite examples of Alan Turing, one of the great time, called the bombe, which It was actually used during German Enigma codes. And what it was designed that specific problem. The point I'm trying to make is, where we started, but it doesn't we'd like to be. We want to capture this idea So let's see how So even within this framework computation as a set of steps, a circuit to do it, let me a wonderful circuit to build. Suppose you could build a property: the input to this circuit diagram. Give it a circuit diagram for to the circuit, and that circuit reconfigure itself to act like Which would mean, it could Or, it could act like Or, it could act like a So what would that circuit You can imagine these tiny around, right? Pulling wires and pulling stacking them together. How would you build a circuit diagram in and make a machine Sounds like a neat challenge. Let me change the Suppose instead, I want a recipe, the description of a as its input, and then that is described in that recipe. Reconfigure itself, emulate it, the words, it's going to computation. That would be cool. And that exists. It's called an interpreter. It is the basic heart What it is doing, is saying, This is now an example of a What that means, in a that I can provide to the instructions describing the And inside of the machine, and is a process that will allow as described in that recipe, thing that I can describe All right. That actually seems like a so let me show you what that Inside of a stored-program following: we have a memory, control unit, in what's called unit, and this can take in and inside this stored-program the following: you have a And these all get Notice the difference. The recipe, the sequence of getting read in, and it's It's inside the memory of the access to it, we can change it, pieces of code, as well as One other piece that goes I never remember where to put ALU? Separate? I'll put it separate-- called a program counter. And here's the basis That program counter points to typically to the first And those instructions, by the things like, take the value out and run them through the piece of circuitry, and someplace in memory. Or take this value out of other simple operation, stick Having executed this up by one and we move We execute that instruction, Oh yeah, it looks a whole Some of those instructions will say, is something true? And if the test is true, it will program counter to point to memory, some other point in that and you'll keep processing. Eventually you'll hopefully out, and you're done. That's the heart Now that's a slight The process to control it is but the heart of the computer is build our descriptions, our primitive instructions. And then we have a And that flow of control is It's moving through a sequence changing where we are OK. The thing I want you to take think of this as, this is, And that's really what It's a sequence of Now, one of things I left build it out of primitives. So one of the questions is, primitives to use? And one of the things that was actually know that the set of use is very straight-forward. OK, but before I do that, let me this is a recipe. Assuming I have a set of can describe everything on, I Well, I'm going to do the same So, real recipe. I don't know. Separate six eggs. Do something. Beat until the-- sorry, until they're stiff. Do something until an Take the yolks and mix them in No. Sugar and flour I guess is and water is not going to do here-- mix them into Do a sequence of things. A traditional recipe actually primitives, and a good chef say, with that set of unbounded number of Same thing holds true Right. Given a fixed set of primitives, programmer can program And by that, I mean anything of these process, you can primitives. All right, the question is, as are the right primitives?&quot; So little piece of history In 1936, that same guy, Alan simple primitives, anything that mechanical process, it's could be programmed just using Think about that for a second. That's an incredible It says, with six primitives, With six primitives, I A couple of really interesting way, one of them is, it says, programming language, another programming language. And there is no programming actually, that's not quite true, doing certain kinds of things-- that you can do in C that It's called Turing Anything you can do with one, based on that fundamental OK. Now, fortunately we're not going six primitives, this would be because they're down at the write it onto this tape.&quot; First tapes anymore in computers, and want to be programming What we're going to see with we're going to use higher-level A broader set of primitives, fundamental thing holds. With those six primitives, OK. So where are we here? What we're saying is, in order describe recipes, we want to steps built on some primitives, describe the flow of control sequence of steps So the last thing we need before about real programming describe those recipes. All right, And to describe going to want a language. We need to know not only what we make things meaningful Language. There we go. All right. Now, it turns out there are-- I don't know, John, hundreds? Thousands? Of programming languages? At least hundreds-- of PROFESSOR JOHN GUTTAG: PROFESSOR ERIC GRIMSON: True. Thank you. You know, they all their pluses and minuses. I have to admit, in my career at least three languages, I five or six, John? Both of us have probably number of languages, at least taught in those languages. One of the things you there is no best language. At least I would argue that, We might both agree we have language, there are There is no best language. All right? They all are describing Having said that, some of them things than others. Anybody here heard of MATLAB It's great for doing things with things that are easily captured But there's some things pain to do in MATLAB. So MATLAB's great for C is a great language for control data networks, I happen to be, and John regularly, I'm an old-time Lisp how I was trained. And I happen to like Lisp and when you're trying to deal with arbitrarily structured It's particularly So the point I want to make particularly best language. What we're going to do is simply helps us understand. So in this course, the going to use is Python. Which is a pretty new language, popularity, it has a lot of languages because it's more from it's pregenitors, But one of the things I want to not about Python. Strange statement. You do need to know how to use details of, where do the All right? It's about using it to think. And what you should take away learned how to design recipes, to do things in modes Those same tools to any other language. You can pick up another language weeks at most, once you OK. In order to talk about Python one last thing to set the stage do here, and that's to talk of a language. And there're three I The first one is, whether or low-level language. That basically says, the guts of the machine? A low-level language, we used programming, you're down at the are literally moving pieces of memory to another, through A high-level language, the richer set of primitive In a high-level language, square primitive that you can use, over and code it. And there're trade-offs Second dimension is, whether targeted language. And by that I mean, do the set range of applications, or is specific set of applications? I'd argue that MATLAB is it's targeted at matrices and And the third one I want to an interpreted versus What that basically says interpreted language, you take the thing you write, it may go it basically goes to the the machine that's going to through each one of and give you an output. So the interpreter is simply code at run time. In a compiled language, you have which you take the source code, called a checker or a compiler called object code. And that does two things: one, code, and secondly it often efficient sequence of actually go off and run it. All right? And there's trade-offs I mean, an interpreted language debug, because you can still see it's not always as fast. A much faster in terms And it's one of the things you Right. In the case of Python, it's I would argue, I think John basically a general-purpose It happens to be better suited numbers, for example, general-purpose language. And it's primarily-- I shouldn't say primarily, it OK? As a consequence, it's not as does let you-- sorry, that's the not as good at catching some is easier at some times along on the fly. OK. So what does Python look like? In order to talk about Python-- to do it this way-- we need write things in Python. Again, you have to let me back Our goal is to build recipes. You're all going to be time you're done here. All right? Our goal is to take problems and computational steps, these that'll allow us to capture To do that, we need to describe: the primitives, but how do we language, and interact And so for that, we We're about to start talking language, but to do that, we last piece of distinction. Just like with a natural separate out syntax So what's syntax? Syntax basically says, what are this language? Boy, my handwriting is There's a English sequence It's not since syntactically It's not a sentence. There's no verb in there a sequence of nouns. Same thing in our languages. We have to describe how do you expressions. OK? And as we add constructs to the talk about. Second thing we want to talk along is the semantics And here we're going to break semantics and full semantics. Static semantics basically meaningful. Which expressions make sense. Here's an English sentence. It's syntactically correct. Right? Noun phrase, verb, I'm not certain it's meaningful, the habit of giving your What's the point? Again, you can have things that but not semantically meaningful, semantics is going to be a way expressions, what pieces of meaning to it. All right? The last piece of it is, in semantics, we have sort Which is, what does Or, said a different way, happen when I run it? That's the meaning of That's what you want. All right? You want to know, what's the When I run it, what's That's what I want to build. The reason for pulling this out see is, that in most languages, Python-- we got lots of help built-in with something that your syntax for you. And in fact, as a sidebar, if is not syntactically correct, you push that will check If you've turned in a program correct, the TAs give Because it said you didn't even sure the syntax is correct. The system will help In Python, it'll find it, a time, right John? It finds one syntax error at little patient to do it, the syntax is right. You're going to see that we static semantics, and I'm going second, meaning that the system, better than others on it, but it some things that are not statically. In the case of Python, it does I'm looking to you again, pre-time checks. Its-- sorry? PROFESSOR JOHN GUTTAG: PROFESSOR ERIC GRIMSON: OK. Most of them, I think though, time, and that's a little bit see it until you go and run the actually we're going to see an where you find it, but you The problem is, things that you the least worrisome bugs. They're easy to spot, you can't them there, so you're not going Not everything is going static semantics checking. Some things are going to that's actually a bother. It's a problem. Because it says, your program but it may not be what you tell, and that may propagate bunch of other computations catastrophic failure. So actually, the problem with it to catch everything, you Sadly we don't get Which is where we'd like it. But that's part of your job. OK. What happens if you actually syntactically correct, and semantics, and you run it? It could run and give you the it could loop forever, it could you the right answer. And you're not always going Well, you'll know when it very much, but you can't something's stuck in an infinite simply taking a long You'd love to have a system that it's not possible. And so to deal with need to develop style. All right? Meaning, we're going to try to good programming style, but you which it is going to be easy that cause those semantic All right. If that sounds like a really Let's start with Python. But again, my goal here is to about, why we need to do it, last time, our goal is to primitives that we combine which we can then abstract to want to use that sequence of control computing, in order That imperative knowledge that So I'm going to start today, minutes left, I think, in left-- in order to do this Python, and we're going to pick time, so; simple parts In order to create any kinds of need values. Primitive data elements. And in Python, we have two to and we have strings. Numbers is what you'd expect. There's a number. There's another number. All right? Strings are captured in Python sequence of characters followed Associated with every data which identifies the kind Some of these are obvious. Strings are just a type But for numbers, for example, a variety of types. So this is something that integer, or an INT. And this is something floating point, or a float. Or if you want to think of And there's some others We're going to build up this reason it's relevant is, those types is a set of types of input in order And given those types of input, All right. In order to deal with this, let and I hope that comes What I have here is a Python show you some simple examples expressions. And this'll lead into what as well as what you're So. Starting with the shell, I Actually, let me back up I can type in a number, I get string, I get back the string. Strings, by the way, can have other characters, it's simply notice, by the way, that the string's digit five digit than the number 52. The quotes are around them We're going to see What I'm doing, by the way, here expressions to that It's using its set of rules to them back out. Things I might like to do in combinations of things So we have associated with operations. So for numbers, we have the arithmetics. And let me show you some And actually, I'm going to do What I typed in, things like-- there's an expression. And in Python the expression operand, when we're doing simple and if I give it to the exactly what you'd expect, OK? The distinction I'm going to The interpreter is going When we start building going to use commands. Or statements. Which are actually things that computer to do something So I can similarly do this, because it's going to give me it actually did a slightly And notice, by the way, when I in a different color? That's the Python saying, that specific command to get the print it back out. When we start writing code, difference, but for now, don't plant that idea. OK. Once we've got that, we do things like this. Notice the quotes around it. And it treats it as a string, the value of that string, the value of it. Now, once we've got that, we And I'm going to use print order to just to get into that, go-- in order to get I can print out a string. I can print out-- Ah!-- Here's a first example caught one of my things. This is a static So what went on here? I gave it an expression that It expected arithmetic types. But I gave two strings. And so it's complaining at me, I don't know how to take multiply them together. Unfortunately-- now John you may one-- unfortunately in Python do things like this. What do you figure that's Look legal? The string three times Well it happens to give me I hate this. I'm sorry, John, I hate this. Because this is overloading that with two different tasks. It's saying, if you give do the right thing. If you give me a number and concatenate them together, operations, but nonetheless, STUDENT: [UNINTELLIGIBLE] PROFESSOR ERIC GRIMSON: You know, there will be a on, just like with the political likes it as a feature, I don't a Lisp programmer and I am. All right. I want to do just a couple Here's another one. Ah-ha! Give you an example Because 52A doesn't And you might say, wait a and the answer's no, I didn't quotes around it. And notice how the machine In this case it says, this is actually highlighting where back and fix it. All right. Let's do a couple of other All right? I can do multiplication. I've already seen that. I can do addition. Three plus five. I can take something to a power, three to the fifth power. I can do division, right? Whoa. Right? Three divided by five is zero? Maybe in Bush econom-- no, I'm comments today, I will not What happened? Well, this is one of you have to be careful. It's doing integer division. So, three divided by five remainder of three. So this is the correct answer. If I wanted to get full, real them a float. And yes, you can look at that Well, up to some level of what I'd like to get out. All right. I can do other things. In a particular, I have similar OK, I can certainly print out add strings together, and just strings, you can kind of guess It is going to merge them I want-- I know I'm running you slightly one last example, it's, I also variables to store things. And to do that, in this it says, want to keep it around, do things like this. What does that statement do? It says, create a name for a there, in fact, let me type it sign, which is saying, assign or of the following expression. As a consequence, I that just by its name. If I get the value of mystring, say, take mystring and add to it print it back out. So this is the first What have we done? We've got values, numbers We have operations to I just threw a couple up here. You're going to get a chance see not only are there the there are things like length can do with them. And once I have values, I want give them names. And that's what I just did I said, use the name mystring value of Eric, so I can refer want to use it. And I apologize for taking you next time, please go to the recitation for tomorrow.