In this video, we'll compare Nginx and Pingora, We'll measure latency using the p99 percentile, for any proxy. Then throughput by counting handle. And, we'll measure the availability we'll measure saturation, or how fully CPU usage, memory usage, as well as the CPU usage I ran all my tests on AWS. For this test, each with 2 CPUs and 8 GB of memory. Medium proxies, and EKS cluster to deploy my monitoring I used Nginx version 1.27.2 for this test, and version 0.4.0 of the Pingora With help from others, I optimized Nginx's main in my public GitHub repository. I configured on the number of CPU cores. Given that large independent worker processes. I also set 4 For the proxy configuration, I backend applications and used the default is to enable keep-alive along with I also enabled the HTTP/2 protocol and provided a self-signed certificate. Since Pingora for a fair comparison, I disabled Lastly, I added an X-Forwarded-For header with the real client IP address to be Most high-level proxies like Caddy but with Nginx and Pingora, you need some Now, Pingora is a Rust library, so you need to Rust is not the easiest language to learn, but it For example, here I create a load balancer. file to configure your proxy as with Nginx. each backend service. The open-source version of only removes a backend application after it has the paid version, includes active health Next, I provide a self-signed certificate There are different built-in functions in Pingora, like X-Forwarded-For along with other metadata. but Pingora even allows you to create your own Feel free to improve both Nginx and a PR. If it shows a significant performance gain, I'll rerun the test and explain to others You can also configure Pingora but you need to run it in daemon Since I used 4 threads and 2 workers for Nginx, for Pingora. I've tested different settings as explained before, threads in Nginx do not compared to Pingora threads. Alright, let's go ahead and run the test. It it into just a few minutes. For this test, I used if I should keep this or revert to the 15-minute On the left-hand side, you can see proxy receives from the clients. We slowly From the latency graph, you can notice latency is consistently lower than Nginx's. it might seem insignificant, but consider if each proxied by either Nginx or Pingora. If microservices, that latency can quickly On the right-hand side, we have CPU usage, for the Pingora proxy at the beginning of the Now, memory usage is also very similar, at least in mind that many tools behave differently under If you use Nginx as a reverse proxy, make sure otherwise, your latency and CPU usage will without keep-alive and compare them with description explaining how to fix it. On the but you can adjust the pool size, which Finally, availability typically remains at 100% until both proxies start to Up until 20,000 requests per second, both proxies staying under 1 millisecond, which is excellent with Caddy or Traefik in these benchmarks. At and Pingora is around 70%. This is the moment to start scaling your proxies horizontally by proxies begin to slow down, and latency increases Soon after, at around 28,000 requests per either clients get a timeout with a 408 status returned to the clients, which slightly at the actual numbers, these are just a few At around 34,000 requests per second, longer keep up with Pingora, and it becomes the latency for Nginx stays relatively Let's continue the test until both proxies can notice that CPU usage starts to converge utilization at around 40,000 requests per results from the previous Nginx vs Traefik a reliable way to measure performance On the other hand, Pingora reached around latency is the most critical metric as it directly the infrastructure cost. Alright, let me open each graph for we have the requests per second graph. 41,000 requests per second and Pingora Next, we have latency. It's very lowest latency throughout the entire test, even beginning of the test as well. You might think the Then we have availability. You can see but it stays around 99.99%, Following that, we have CPU usage. CPU at the start, I thought it would fail at roughly the same time, with Pingora Next, we have memory usage, which in CPU-bound applications and performance tests. And finally, we CPU usage for the applications higher CPU usage for Nginx's applications, to fail at the end; throughout the I also measured network usage for both proxies, I measure more metrics than can fit in one screen. Now, if you have programming experience Pingora is the way to go. Keep in mind, though, so if you find Nginx complicated, you'll have library. I would definitely consider including I have other benchmarks you might find and I'll see you in the next video.