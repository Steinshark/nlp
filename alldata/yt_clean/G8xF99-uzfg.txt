Arguably, it's never been easier to build some software-as product, some web-based software-as product, totally on your own than it is today, because nowadays you get plenty of powerful technologies, exciting frameworks and tools which you can use to simplify your job of building such a digital product, such a website-as thing, right? Yeah, I would say that is the case, because of course we have plenty of frameworks, we have like React, Angular, if we have a look at the front-end side, we have Next.js and Remix, which is becoming React Router, I guess, and Analog.js, if we take a look at the full-stack side, and we're only in JavaScript land here. Of course, we also have Laravel, which is amazing, and which might be one of the best solutions for building web projects, if you're on your own, or of course also for teams, but especially if you're on your own and you have to do everything on your own. So, we have plenty of amazing options. But of course, that also brings us some new problems. Which options are best? Which solutions, which technologies should you use? Now, of course, the easy answer is, it depends. And of course, it does depend. There is no clear winner, but I can at least share my opinion on which technologies I would use, or which framework I would use. Though, of course, you have to keep in mind that I am in that JavaScript ecosystem. That is what I work with day to day. So, I won't recommend Ruby on Rails, for example, simply because I have never worked with it. It might be the most amazing thing that exists, I just can't tell. So, that's something to keep in mind. That being said, though, I have worked with Laravel. I have worked with Python Django. I have worked with Next.js and Remix and with all those frontend JavaScript frameworks. And therefore, I do have some opinions on these solutions. And as mentioned, these are all great alternatives. And of course, for example, if you know Python, but you know only a bit of JavaScript, using Django might be your best choice. Django with some client-side library like HTMX, for example, to have an easy time adding some JavaScript and communicating back to your backend. That might be the perfect solution for you. If you know PHP, of course, it's Laravel because Laravel is amazing. Though, I would argue that even if you're not a PHP expert, Laravel might be an amazing choice because Laravel is really amazing. It's a super powerful framework with lots of features. Essentially, it has everything baked in you could possibly wish for. It's under active development. New features are added all the time. New packages are being released all the time. And it has a super active ecosystem and community. So there are plenty of third-party packages, tutorials, articles, and so on. And of course, Laravel is also a framework where you have services like Forge, which make hosting Laravel applications a breeze. So these are many great reasons why you might want to pick Laravel. And I think especially if you're working on a project on your own or in a small team, you can be very productive with Laravel because you don't have to make a lot of choices when you work with Laravel. It's all baked in after all. You have your ORM, which makes working with SQL databases a breeze. And it's easy to connect different kinds of SQL databases to your Laravel app. You have authentication and authorization built in. You have testing built in. So it's all built in. You don't have to glue together lots of different frameworks and libraries, but instead it's one package and then you can easily host it. So that is where these are lots of great reasons for why Laravel might be one of the best choices. Though again, I don't know all possible technologies and frameworks out there. I might be missing some important facts about Ruby on Rails, which would prove that it's much better than working with Laravel and so on. So that's a different thing. But of course I mainly work in the JavaScript ecosystem and here things are a bit different because of course we have amazing technologies there as well. Next.js even though it has some problems and some annoying parts, which will very likely get better in the future though, but even though it has these things, Next.js is an amazing framework which makes building full stack React web applications really fun and which really helps with building such applications. And of course it's not the only choice you have there. You have alternatives. But one problem you do have in the JavaScript ecosystem is that you often have to glue together lots of different libraries. There aren't that many frameworks like Laravel that come with everything built in. Instead you have something like Next.js where you get that full stack React application where you have built in caching and so on, but where you for example don't have built in authentication support. You have to add an extra package for that if you want to implement authentication and that package must be either very flexible or it must specifically be built for Next.js. Otherwise integrating it can become annoying and can be quite complex. And of course at that point once you combine Next.js with some authentication specific package you have two dependencies, whereas with Laravel you have one main dependency, the Laravel framework where all the different parts that make up the framework are developed and evolved together. In JavaScript you often have independent dependencies and it is possible that development for one of your dependencies stops. That one package is not maintained anymore and therefore you have to switch and you have to rewrite a bunch of code. Or you have compatibility issues where adding some library or package to your project becomes unnecessarily tricky because they require different versions of Node.js or of some other dependency or because something else breaks. These things happen in the JavaScript world and therefore whilst we have lots of choices there, whilst we have a very active ecosystem and where we have many packages and libraries, whilst we have that and whilst this can be an advantage it can also be a disadvantage. Now maybe you heard about Adonis.js which is essentially Laravel for JavaScript. And here's something I can't explain. I haven't worked too much with Adonis so I can't judge it but from what I see it looks pretty amazing. It looks like Laravel for JavaScript which it aims to be. It looks very polished. It is under active development and yet no one cares. I have a feeling like no one really knows it. It's a project that has been around for years and yet it doesn't have too many GitHub stars. It doesn't get a lot of attention in the community and whenever I tried to use it for some videos or I even considered a course on it at some point I quickly realized that there isn't any audience for that. Though of course that can also be the other way around. Maybe there would be an audience if there would be more coverage. I don't know. But that's really weird because to me it really looks like a great solution for building full stack applications with ease where you don't need to bring in a lot of extra libraries and packages with JavaScript. So essentially what Laravel is for PHP. So maybe it's worth a closer look if you're aiming to build some web-based project, some web-based software as a service with JavaScript. But of course these other alternatives are also great. It's just worth keeping in mind that because of this fragmentation which we have in the JavaScript world it can sometimes be annoying if you're working totally on your own and you can spend quite some time on gluing together different packages and for that reason going for something like Laravel or Adonis.js might be better if you're totally on your own and if you want to get out your project quickly if you don't want to spend a lot of time finding all these different packages. But on the other hand of course JavaScript and this entire JavaScript ecosystem also has many advantages and being able to build web application front-ends that are very reactive and where you're able to offer great user experiences also makes a lot of sense and having frameworks like Next.js where you can seamlessly add backend code to those front-end applications that also is quite intriguing. So ultimately it's not an easy choice but it is definitely worth looking beyond just JavaScript if you're in that world as I am. If you're in a different world like the PHP Laravel world you might be wondering what all these JavaScript guys are doing all the time because you already have the best framework ever you could say. But ultimately that of course comes down to personal preferences.