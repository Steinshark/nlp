Can you persist this object model into is Entity Framework Core? receiving on virtually every video I make. good - thank you - until it is time to persist... map all these objects into a database. your code cleaner. But! you still have to persist it in the database. I really am. how I persist these objects in a nicely designed There is a short list of techniques we The one technique EF Core supports, which I find I can configure 70% of this object model using four database columns. This is the query on the Books table. of 18 types into that single table, This interface, with two classes and an These records types here act like They all go into another database column. discriminated union only adds one new column. conversions. step to code, where I will show you how. This class is modeling a book, and this The entire model is quite large. the elements I show you, or otherwise, Persisting the CultureInfo object is difficult This is the class where I have I instructed EF Core to ignore the That is where our adventure begins. ask yourself if there is a natural mapping to Cultures have a standard mapping to a country code and other pieces of information. C# can uniquely map any CultureInfo A perfect job for EF Core value conversions! property builder and specify This one maps a CultureInfo into a string. to return a standardized string. mapping a string into a CultureInfo object. type in the database. ASCII characters would be sufficient. You've got yourself the first into a database-supported primitive type. You can see that there will be a Culture column I will call this a success right now. I will not explain how Entity I expect you to have a good grasp of it already. constructors, public or private property It is a common practice to include a is to accept the data from Entity Framework. object when loading from the database. in Entity Framework. classes are proper types, like CultureInfo. In between is a value converter that moves The conversion happens only once when loading It is quite efficient. One property down, two more to go. Every Book object has one Release object in it. I am persisting the Release as a Complex types are outside the scope of this video. It indicates the book's edition. with that CultureInfo type. to receive an instance of this interface, I don't want any trace of primitive That is where things begin to complicate. Any class can implement it. a possibly infinite number of classes? You don't attempt to predict future types. There are two variants I need to support Ordinal is just a number. An enum value, plus the number. More types might come later, and when they I will now show you a technique based data and then parsing it back. an exact representation of binary Any edition can be just a number, or This format is easy to parse We can also extend it with Besides formatting, you will see another possible There will be a lot of new All source code is available on my Patreon page. hundreds of fellow programmers watch You can find the source code from this video The link is in the description. well-formatted strings and then parsing them back. the persistence for the Release class. Now, I want to define a conversion for it. trivial like that with CultureInfo. This one will format an The other method will parse the string that implements the IEdition interface. Let me put them above in the HasConversion call. What's the issue? the HasConversion method accepts Expressions. because that would be a Func Fine! I have some tricks up my sleeve. I have satisfied the form I also need to add the type and precision. Additionally, the Release class The column names would include I don't like that convention, so I will also Time to implement the formatting. An ordinal edition would only A seasonal edition would contribute Any other type that might pop up in the We must change the persistence in That is quite normal. You would have this situation in any other Let me quickly implement the parsing method. around a whitespace. season and the year, so I parse them separately A single component must be the ordinal number. Any other form would be a surprise. That is all I had to do to support the elaborate interface into a varchar representation and Adding the migration will go smoothly. Just a single column named Edition, up to This is marvelous if you think it through. of characters within this single column. code is as polymorphic as ever. The last property I want to map is I will only show you the finished code. Pause the video as many times Consider taking sick leave at work and I want to persist this custom But what is that class? implementing a discriminated union. what discriminated unions are, and how to The new discriminated unions It will make this definition a tad shorter custom mapping extension method. how we persist records using Entity Framework. publication state of a book. three forms and nothing else. planned for a date, or not planned yet. on the PublicationDate type. modeling dates at varying levels of precision. exact, or just a month with This discriminated union Time to map the objects into primitive I have made a unique plan regarding Instead of attempting to encode it somehow, The first part is to isolate the runtime It will be one of the three The second property will contain the optional depending on the publication's actual type. Please observe that this is the only I generally don't need nulls I know better than that. and its only purpose is to support persistence. to indicate missing values. Nevertheless, converting the database-produced ensure that any null is removed. the database will have its Publication Time to encode those two properties. ignore the principal property, Publication. property of type Type, named PublicationKind. the type's name and then convert Encoding the publication The column should be nullable. int value, with a caveat. By default, Entity Framework will not It will just store null in the Therefore, the conversion must only bother column will be nullable. These are the object mappings for Pause the video and read these methods carefully. I will now query the database This is the full content of the Books table, The Culture column comes from the Usually, an edition is just a number, The encoding works just fine. the name of the underlying type. and even one that was not planned yet. so the field is null. You can read the date easily. But some dates come with no day. the day and the month missing. encoding of all the objects is in my application? developed in C#, remained unaffected. could stop me from using the most advanced I would be grateful if you shared You can subscribe to my channel and learn