The OWASP API Security Top 10 is a standard reference guide highlighting the most critical web API vulnerabilities to help developers and organizations understand and mitigate potential security threats. In this course, you will learn about each security risk and learn techniques to fortify your APIs against potential threats. Corey Ball developed this course. He is a cybersecurity consultant and a leading expert in API security. So he's the perfect person to teach you how to secure your APIs. Hello, freeCodeCamp community and welcome OWASP API Security Top 10 and Beyond. My name's Dan Barahona. I'm the co-founder of APIsec University, learn all about the OWASP API Security even add a few extra bonus topics that Your instructor for the course is my Hacking APIs book and well-recognized I invite you to check out all our free including a hands-on course on API Pen Security Fundamentals, this course here Compliance course, an API Documentation All the courses on our site include if you complete everything and pass certificate and badge to recognize also display on your LinkedIn profile. Thanks again for watching and Welcome to OWASP API In this course, we'll dive into the Top 10, and discuss other significant The first edition of the API Security Top has officially released the 2023 version. As APIs are a critical component list is of utmost importance. This course highlights the most common meant to help educate the community The course will help you identify and that plague modern web application By the end of this course, you should of vulnerabilities associated with and the technical impact and So who is this course for? This course is great for anyone It is meant to help improve the skills developers, penetration testers, interested in learning about API security. Before taking this course, you should be If you would like to learn more Security Fundamentals course. So how does this course work? Read, watch, and or listen to the It is highly recommended that you resources, follow along with the quizzes at the end of every module. The content presented in the video should The videos offer visual and the content of this course. Quizzes During the course, quizzes will be Quizzes are knowledge-based, multiple discussed within the given module. The OWASP API Security Top 10 and challenging course that sets a high bar. To pass any quiz or assessment, of the questions correctly. Completing all quizzes will result in This course is entirely free, and completion by passing all course Those who would like to certify their The exam is a knowledge based APIs and find vulnerabilities. Students who pass the exam will Analyst certification or CASA. Formatting Please note that all content in OWASP is sourced directly from the This content is attributed to the OWASP API Security Project contributors. All other sources will No changes were made to the content. Hey everyone. Quick introduction. My name is Corey Ball. I'm the author of Hacking APIs, GraphQL, and contributor to the I'm also the Chief Hacking Officer for Penetration Testing over at Moss Adams. I have over 13 years of experience across several industries. In addition to a Bachelor's degree in I also hold several certs including the I hope you enjoy this course. The objective of this course is to professionals, and be able to identify OWASP API Security Top 10 and Beyond of bug bounty hunters, developers, leadership, and anyone else interested Course objectives include the Security Project, and the changes Should help prepare students Security Analyst or CASA exam. Develop a strong foundation in the Object Level Authorization, Broken Level Authorization, Unrestricted Level Authorization, Unrestricted Server Side Request Forgery, Security Management, Unsafe Consumption of APIs. In addition to that, it's to help prevent API related data breaches. Finally this course is meant to help resources for continued learning The Open Web Application security foundation that was created to The OWASP Foundation launched on known for its Top 10 list open source The OWASP API Security Top 10 is a list for application programming interfaces. The founders of the project The OWASP API Security Top 10 was and was driven by several key factors. The first was the rapid rise of APIs. APIs power the flow of the world's A business no longer needs to specialize Instead, they can use the features companies and organizations. Historically, the issue with doing different programming languages, web allowed for a common method to consume Since the widespread adoption of enabled to leverage the functionality. Of other applications. Instead of having to develop payment processing, authentication, developers can leverage APIs to use that specialize in that given area. APIs are a major business enabler, which Second, a major gap in security. So the next factor that compounded fact that the tools and techniques detecting API related vulnerabilities. The tools and techniques that were used programs, web applications, scanners, and tools were not designed to handle As a result, many organizations defend against API attacks leaving Third, a new leading attack vector. Often when it comes to the rapid security is an afterthought. APIs are no different. The rapid adoption of APIs led to data application functionality. Public internet facing APIs often measures that had grown with An attacker no longer needs to go chain by bypassing the firewall, gaining to system that contains data, and then Instead, an attacker can use access to that sensitive data. In response to the massive adoption of providers, and the new wave of API related Project published its Top 10 list. The API-focused Top 10 list provides best practices, and tools to help protect against API related threats. The OWASP API Security Project has resource for security professionals the importance of API security. How is the top 10 compiled? As described by Paulo Silva, OWASP OWASP API Security Top 10 list is put internal research, based on publicly Since the project did not receive during the two month window in late based on the project team's research. This was not something new or different Silva stated, what was done in 2019. Without dataset received from team had to compile data based on pro platforms and API security Although this dataset isn't as ideal hundreds of thousands of endpoints a sample of real-world API weaknesses. Some potential issues with applying program incentivizes certain Bug bounty programs attract participants APIs that are actually out in the wild. Newsworthy incidents often leave specific technical details. Obviously newsworthy incidents do and security incidents that That being the case, there are lessons of based on bug bounty, writeups, If you are interested in learning list of common websites to dive In addition to these, attached from PentesterLand that contains PentesterLand writeup compilation, Bugbounty writeups, all the Also, in the course content is a list incidents in the last five years, the USPS, Optus, T-Mobile, and Toyota. The OWASP API Security Top 10 list critical security risks to be on the The OWASP API security references to external sources. These sources include CWEs, or Common and the National Institute of Standards Most of the references involve CWE. CWEs are a list of common software by the community and hosted by MITRE. Each CWE is identified by a This identifier can be used to refer Check out the full table of external Understanding the external sources and OWASP API Security Top 10 risk will help Throughout the course external OWASP API Security Top 10 risks. These resources will be provided to you like into the topic of API security. We will dive deeper into In the next section, we'll go 10 list from 2019 to 2023. Since the release of the 2019, API usage has grown. API related data breaches have continued All of this has played a role in the API security project's Top 10 list. Since the 2019 Top 10, several events keeping the list updated and relevant. API attacks are consistently on the rise. Akamai reported seeing nearly 114 million The global API market value was was predicted to reach 41.5 by 2031. That's a 20 times growth In 2022, Postman had over 46 million had 3 million API related repos. APIs continue to be rapidly adopted and The OWASP API Security Project updated changes in the attack trends that have Inon Shkedy, OWASP API Security OWASP API Top 10 2023 version is &quot;We aspire to follow the security have been developed in recent years. If you try to hack or protect years ago, it would make more At a high level, when you compare the Top previous risks were removed from the list, updated, and five of the 2023 are new. The two items that were removed Logging and Monitoring. These two risks were not completely importance of new emerging risks Logging and Monitoring is a classic an item that is represented in Injection attacks are still around and but the adoption of web application mitigation techniques has reduced the There were three categories Broken Object Level Authorization or or BFLA, and Security Misconfiguration. BOLA and BFLA are still among the most the breaches in bug bounty disclosures. APIs continue to have severe issues The Security Misconfiguration category misconfigurations that can plague APIs. In other words, this category is unlikely catchall for many API vulnerabilities. Four categories were renamed. The renaming of these categories helped additional focus to the issue at hand. Broken User Authentication has This simplification has done additional attention to the API Improper Assets Management has This change was likely made to better to cover a wider range of resources. The term Assets might only refer to while the term Inventory could There were a total of five categories that 10 2023 that were not on the 2019 version. Server Side Request Forgery and Unsafe did not have previous representation on Server Side Request Forgery was 10 list and was added to that list than by incident occurrence. The remaining new risk categories Authorization, or BOPLA, Unrestricted Access to Sensitive Business Flows, each For example, BOPLA is a combination Assignment, and we will dive deeper Paired with each OWASP API security The risk ratings were based on The project now refers to the In the written course content, there is a for the OWASP API security project from Any of these factors could significantly an attacker finding and exploiting This rating does not take into account The risk score must be determined as the project team states. The purpose of the OWASP API this risk analysis for you. In other words, the purpose of not to perform a specific risk but to provide a guideline for In the course content, you can see the 2019 and 2023 risk ratings. The classic equation for risk impact with each risk score. The OWASP API Security Project team value to be determined by the business. In addition, the project team scores that the likelihood of these What we are left with are values that including complexity, exploitability, detectability, and technical impact. Note that the overall score does not factors such as business impact and API1:2023 Broken Object Level one of the most prevalent and BOLA vulnerabilities occur when an API in place to enforce authorization. In other words, API users should resources that belong to them. When BOLA is present, an attacker sensitive data of other users. The OWASP attack vector &quot;Attackers can exploit API endpoints that authorization by manipulating the ID of Object IDs can be anything from sequential Regardless of the data type, they're either through the path or a query even as a part of the request payload.&quot; The OWASP security weakness &quot;This has been the most common Authorization and access control are complex and widespread. Even if the application implements authorization checks, developers before accessing a sensitive object. Access controlled detection is not static or dynamic testing.&quot; The OWASP impact description states: &quot;Unauthorized access can result in data data loss or data manipulation. Unauthorized access to objects can If an API endpoint has insufficient perform checks to ensure users can When these controls are missing, B's resources via API requests. APIs use some sort of value like names When an attacker discovers an API's the resources when unauthenticated For instance, imagine that sends a GET request to and receives a JSON response back Bruce should be able to access However, if Bruce is able to access BOLA vulnerability would be present. This weakness can be tested by using Say Bruce is able to obtain user by sending a request to: and receives a response about Harvey disorder, then there would be a problem. Assuming that Bruce is still using data, this would be a clear indication BOLA isn't always as simple as this in how resources are provisioned and The written course content contains may be requested and attacked. In these examples, tests can be performed IDs with other numbers or words. Of course, in POST request, the resource If User A can successfully access then there's a vulnerability present. BOLA vulnerabilities are the and are easily exploitable and skills in order to discover these. BOLA can present itself in many forms As you can see in the written organized by a user, by group, In all of these instances, only those allowed to retrieve their resources. The OWASP preventative measures state: In order to improve API security, robust authorization controls. These controls should consider access control hierarchies. The primary focus should be to only have access to resources they Using less predictable resource of a user or attacker guessing Developers should perform for authorization controls. Implement a proper authorization user policies and hierarchy. Use the authorization mechanism to to perform the requested action on uses an input from the client to Prefer the use of random and unpredictable Write tests to evaluate the vulnerability Do not deploy changes Check out the written course content API2:2023, Broken Authentication, the API authentication process. All APIs that contain sensitive mechanism to authenticate users. Authentication is the process that is used Whether that is a person, In other words, authentication is the is who that entity claims to be. This verification process is normally and password combination, a token Authentication related vulnerabilities either doesn't implement a strong an authentication process incorrectly. The OWASP Attack Vector description for mechanism is an easy target for Although more advanced technical authentication issues, exploitation The OWASP Security Weakness description engineers' misconceptions regarding inherent implementation complexity Methodologies of detecting available and easy to create.&quot; The OWASP Impacts Description states of other users' accounts in the system, sensitive actions on their behalf. Systems are unlikely to be able from legitimate user ones.&quot; Broken Authentication continues to be a password policies, weak authentication API authentication is a complex most APIs and is necessarily exposed. The impact of Broken Authentication can user accounts, compromising personal data, editing someone else's healthcare data. The authentication process is often for APIs, and when this mechanism is A weak password policy does accounts by enforcing strong This allows users to create simple against user accounts, and allows asking for password confirmation. Also allowing users to change their email Weak password policies also disclose It has a lack of authentication And in regards to GraphQL queries, allow for many authentication Credential stuffing is a type of a large number of username and Credentials used in these collected from data breaches. This sort of attack allows users to brute combinations without restrictions. Predictable tokens refers to any generation authentication process. Weak tokens can easily be guessed, This would be an issue if an API is using JWTs are commonly used authorization processes. JWT stands for JSON Web Token. JWTs provide developers with the is used for signing the token, the information used in the payload. This customization allows for misconfigurations to occur. These include API providers that accept not check JWT expirations, API providers within the encoded JWT payload, and API authentication can be a complex with a lot of room for failure. A couple decades ago, security future of digital systems is the worst enemy of security.&quot; As we know from the six constraints are designed to be stateless. To be stateless the API providers consumer from one request to another. For this constraint to work, APIs often process to obtain a unique token. The token that is generated is then authentication and authorization. As a consequence, the registration the token handling, and the system have their own set of weaknesses if rely on a high level of randomness, attacker will be able to create their The other authentication processes vulnerabilities include aspects of the and multifactor authentication features. For example, imagine a password provide an email address and a six While if the API allowed you to you'd only have to make 1 million code and reset any user's password. A four digit code would As it states in the OWASP Preventative possible flows to authenticate to the API. Ask your engineers what flows you missed. Read about your authentication mechanisms. Make sure you understand OAuth is not authentication Don't reinvent the wheel in password storage, use the standards. Credential recovery and forgot password endpoints in terms of brute force, Require re-authentication for changing the account on our email Use the OWASP API You can find that in the written content. Where possible implement Implement anti-brute force mechanisms dictionary attacks, and brute force This mechanism should be limiting mechanisms on your APIs. Implement account lockout capture attacks against specific users. Implement weak-password checks. API keys should not be They should only be used for Check out the written course about Broken Authentication. API3:2023 Broken Object Property combination of two items from the 2019 Data Exposure and Mass Assignment. Excessive Data Exposure takes place request with an entire data object. Usually an API provider will down to what is being requested. When the data object is shared without risk of exposing sensitive information. Mass Assignment is a weakness alter sensitive object properties. If, for example, an API uses a special only authorized users should be able alter those administrative properties. If there are no restrictions in able to elevate their privileges by altering those properties. Both of these vulnerabilities authorization, so they're combined Object Property Level Authorization. As it states in the OWASP Attack Vector that return all objects properties. This is particularly valid for REST APIs. For other protocols such as GraphQL, it which properties should be returned. Identifying these additional properties effort, but there are a few automated The OWASP Security Weakness description enough to identify sensitive information Fuzzing is usually used to identify Whether they can be changed is a and analyzing the response. Side effect analysis may be not returned in the API response. The OWASP Impacts Description states or sensitive object properties data loss, or data corruption. Under certain circumstances, unauthorized lead to privilege as escalation or As previously stated, Broken Object BOPLA, is a combination of Mass In the 2023 release notes, the vulnerabilities were combined focusing on level authorization, validation failures. The OWASP API Security project also states the API endpoint exposes properties of an should not be read by the user, which is endpoint allows a user to change, add, or property, which the user should not be Excessive Data Exposure is when an API than is needed to fulfill a request. This often occurs in cases when consumer to filter results. When a consumer requests specific with all sorts of information, assuming they don't need from the response. When this vulnerability is present, it can their name and having them respond with phone number, and the identification For example, if an API consumer account and receives information the API is exposing excessive data. Check out the written content data exposure vulnerability. Excessive Data Exposure is an API to detect with automated scanners. In addition, this vulnerability will place to protect sensitive information simply because they use the API. To detect excessive data API endpoints and review the Mass Assignment occurs when an API request than the application intended, to code variables or internal objects. In this situation, a consumer may or escalate the privileges. For example, an application might have the user should use only to update If the consumer can include additional account, such as the account privilege an account balance, and the application them against the whitelist of permitted of this weakness to change these values. Imagine an API is called parameters for user and password. The user could be hapi_hacker, While reading the API documentation an attacker could discover that there's an admin that the API provider uses An attacker could add this to a If the API does not sanitize the request and attacker could use the request On the backend the vulnerable web {"isAdmin": true} to the user object, an administrator for that application. The OWASP Preventative Measures an API endpoint, always make sure the object properties you expose. Avoid using generic methods such Instead, cherry-pick specific specifically want to return. If possible, avoid using functions input into code variables, internal Allow changes only to the be updated by the client. Implement a schema based as an extra layer of security. As part of this mechanism, define and Keep return data structures to the functional requirements for the endpoint. Check out the written course content API4:2023 Unrestricted Resource the provider of the API does prevent excessive use of their API. When there are no restrictions for could become a victim of a denial unnecessary financial costs. Unrestricted Resource Consumption Lack of Resources and Rate Limiting. The OWASP Attack Vector description states Multiple concurrent requests can be or by cloud computing resources. Most of the automated tools denial of service via high loads of The OWASP Security Weakness find APIs that do not limit client Crafted API requests such as those, the number of resources to be status, time length analysis, should The same is valid for batched don't have visibility over costs on the service provider's business. OWASP Impacts Description states service due to resource starvation, but increase, such as those related due to the increasing cloud storage needs, etc. The OWASP API Security project least one of the following limits either too low or too high. Execution timeouts, maximum allocable descriptors, maximum number of number of operations to perform in things like GraphQL batching, number single request response, and third Every API request has a technical and not enforce limitations on resource risk of denial of service, distributed financial costs, and degradation of In addition rate limiting plays an and availability of APIs. Many API providers monetize their APIs customers to request more information. RapidAPI, for example, allows infrastructure that automatically In these cases, an unlimited significant and easily preventable The OWASP Preventative Measures memory, CPU, number of restarts, Implement a limit on how often within a defined timeframe. Notify the client when the limit is the time at which the limit will be reset. Add proper server side validation parameters, specifically the one to be returned in the response. Define and enforce maximum size of data such as maximum length for strings and Check out the written course content Unrestricted Resource Consumption. API5:2023, Broken Function Level vulnerability where API functions Where BOLA is about access to data, BFLA In addition, a vulnerable API would allow roles, including administrative actions. To drive the point home, a fintech attacker the ability to see what is in the same API vulnerable to BFLA would from other users accounts to their own. The OWASP Attack Vector description attacker to send legitimate API calls not have access to as an anonymous exposed endpoints will The OWASP Security Weakness description a function or resource are usually Implementing proper checks can be a can contain many types of roles, It's easier to discover these structured, and accessing different The OWASP Impacts Description states access unauthorized functionality. Administrative functions are key and may lead to data disclosure, Ultimately, it may lead Broken Function Level Authorization, user of one privilege level can use the user group, or another privilege level. API providers will often have different types of accounts, such as vendors, administrators, and so on. BFLA can be exploited for unauthorized privileged group, or it could be where an attacker can use the Particularly interesting API functions with sensitive information, resources and administrative functionality, If an API has different privilege to perform those privileged actions. For example, a bank may use endpoint for a user wishing to access use /admin/account/{userid} as an to access user account information. If the application does not correctly, an attacker will be able and perform an account takeover. An API won't always use administrative functionality. Instead, the functionality could be like GET, POST, PUT, and DELETE. If a provider doesn't restrict the can use simply making an unauthorized could indicate a BFLA vulnerability. When testing for BFLA, look for could use to their advantage. These functions include, but are not deleting user resources, and gaining For example, if an API gave partners partner group, but did not restrict this user could add themselves to any group. Moreover, if an attacker added chance that there'll be able to access Take a look at the written course The OWASP Preventative Measures a consistent and easy to analyze from all your business functions. Frequently, such protection is external to the application code. The enforcement mechanisms should explicit grants to specific roles Review your API endpoints against keeping in mind the business logic of Make sure that all of your an administrative abstract controller based on the user's group or role. Make sure that administrative implement authorization checks Check out the written course content Broken Function Level Authorization. API6:2023, Unrestricted Access to the risk of an attacker being able to If vulnerable an attacker will be able structure to obstruct other users. This obstruction could come in the form stock of highly sought after items, expected application functionality. This is a new addition The OWASP Attack Vector description understanding the business model backed flows, and automating access to these The Security Weakness description API in order to fully support business to the prevalence of this issue. Attackers manually identify what resources workflow and how they work together. If mitigation mechanisms are to find a way to bypass them.&quot; The OWASP Impacts Description states &quot;in Exploitation might hurt the For example, prevalent legitimate or lead to an inflation in the Regarding APIs, a flow is a that lead to an operation. If, for example, a purchase flow for a to a purchase process, then a scalper the stock of an item down to nothing. This is where mechanisms like a completely computers and humans apart, or better If a flow has a capture mechanism that automated request could be interrupted Check out the written course material build a notification bot for the PS5. Customers and or scalpers competing flows to either complete purchases or alert upon stock updates. In the example, an API flow was used updates and send out email alerts. The OWASP Preventative Measures state in two layers, business and engineering. Business should identify the business if they are excessively used. Engineering should choose the mitigate the business risk. Some of the protection mechanisms are more difficult to implement. The following methods are used Device fingerprinting. Deny service to unexpected client actors use more sophisticated Next up is human detection advanced biometric solutions. Non human patterns. Analyze the user flow to For example, the user accessed the functions in less than one second. Consider blocking IP addresses of Tor Secure and limit access to APIs that They tend to be an easy target often don't implement all the Check out the written course content for access to sensitive business flows. API7:2023, Server Side Request Forgery a user is able to control the remote An attacker can use an API to supply to control the remote resources that An attacker could supply URLs that internal network, or compromise the SSRF is also number 10 on the is a growing threat to APIs. The OWASP Attack Vector description to find an API endpoint that accesses In general, basic SSRF, when the response to exploit than blind SSRF, in which or not the attack was successful.&quot; The OWASP Security Weakness description development encourages developers to Lack of, or improper validation Regular API requests and response analysis When the response is not returned, more effort and creativity.&quot; The OWASP Impacts Description states to internal services enumeration, firewalls, or other security mechanisms. In some cases, it can lead to denial a proxy to hide malicious activities.&quot; SSRF is a vulnerability that takes place resources without validating user input. When an attacker has control over the gain access to sensitive data, or worse, The impact of this vulnerability is leverage a target server to perform Note that bug bounty payouts for SSRF be demonstrated with a proof of concept. The higher the demonstrated There are two general types In-Band SSRF and Out-of-Band In-Band SSRF means that the specified by the end user. If the attacker specifies a payload In-Band SSRF vulnerability, the server and then respond to the attacker with Blind SSRF takes place when the makes the request, but the server does that specified URL to the attacker. In the case of blind SSRF, an attacker that would capture the request from the force the server to make this request. In the course In-Band SSRF request that includes a URL. That will be used to update the The attacker is able to replace that URL to a directory with a password. The server is vulnerable and provides Blind SSRF takes place when a vulnerable but does not send back the response to the In other words, the victim server specified by the attacker, but the message back from the victim server. In this case, to know if the request have some control over the web server For examples and demonstrations of check out the written course material. The OWASP Preventative Measure fetching mechanism in your network. Usually these features are resources and not internal ones. Whenever possible, use allow lists to download resources from, such schemes and ports, accepted media Disable HTTP redirections. Use a well tested and maintained by URL parsing inconsistencies. Validate and sanitize all Do not send raw responses to clients.&quot; Check out the written course content API8:2023, Security Misconfiguration many vulnerabilities related When an API's security is misconfigured, confidentiality, integrity, and Due to the wide variety of flaws that security misconfiguration can range from The OWASP Attack Vector description to find unpatched flaws, common directories to gain unauthorized The OWASP Security Weakness description can happen at any level of level to the application level. Automated tools are available to detect unnecessary services or legacy options.&quot; The OWASP Impacts Description states only expose sensitive user data, lead to full server compromise.&quot; Security misconfigurations include all within the supporting systems of an API. Security misconfigurations are really misconfigured headers, misconfigured default accounts, the acceptance of sanitization, and verbose error messaging. For example, if the API supporting an unpatched vulnerability. There's a chance that an attacker easily pwn the API and its systems. A lack of input sanitization malicious payloads to the server. APIs often play a key role in automating to upload payloads that the server that could be remotely executed or For example, if an upload endpoint to a web directory, then it could Navigating to the URL where the file is in direct shell access to the web server. Additionally, a lack of input behavior on the part of the application. API providers use headers to provide the the response and security requirements. Misconfigured headers can disclosure, downgrade attacks, Many API providers will use their API to enhance API related It's fairly common that those additional for metrics and perhaps as some The X-Powered-By header Headers like this one often advertise the An attacker could use information published for that version of software. The X-XSS-Protection header is header that's meant to prevent Cross site scripting is a common an attacker could insert scripts into clicking on malicious links. A X-XSS-Protection header with a in place, and a value of 1 indicates This header and others like it, a security control is in place. The X-Response-Time header is middleware In this example, in the written represents 566 milliseconds. But if the API isn't configured properly, channel used to reveal existing resources. If the X-Response-Time header has existing records, for example, but other records that actually exist, this that they've come across these files. Say, for instance, an attacker can /user/account/thisdefinitelydoesnotexist time of 25 milliseconds. The attacker can know that /user/account/1021, which receives an An attacker could then send requests and review the results and see drastically increased response times. Any API providing sensitive information Security to encrypt the data even if privately, or at a partner level. Transport Layer Security, the protocol the most basic ways to ensure that API when being passed across a network. Misconfigured or missing transit sensitive API information in clear attacker could capture the responses (MITM) and read them plainly. They would simply have to intercept protocol analyzer like Wireshark to between a consumer and a provider. When a service uses default accounts or an attacker can use those credentials This could allow them to gain access to functionality and potentially lead to Lastly, if an API provider allows an increased risk that the methods properly or will result in Out of all the vulnerabilities covered Misconfiguration is one of the only application vulnerability scanners. Automated scanners like BurpSuite, will automatically check responses version information, headers, cookies, and parameters to see if expected Security misconfigurations can also be looking for, by inspecting the headers, The OWASP Preventative Measures states repeatable hardening process leading properly locked out environment, a task across the entire API stack. The review should include and cloud services and automated effectiveness of the configuration Furthermore, ensure that all API the API server And any downstream encrypted communication channel, internal or public facing API. Be specific about which HTTP All other HTTP verbs should be disabled. API's expecting to be accessed from least implement a proper Cross Origin Include applicable security headers, formats to those that meet the Ensure all servers in the HTTP server uniform manner to avoid desync issues. Where applicable, define and enforce all error responses to prevent exception from being sent back to an attacker. Check out the written course content API security misconfigurations. API9:2023, Improper Inventory involved with exposing non production When this is present, the non production often not protected by the same security This makes improper inventory API security vulnerabilities. The OWASP Attack Vector description states access through old API versions or using weaker security requirements. Alternatively, they may get a third party with whom there's The OWASP Security Weakness documentation makes it more difficult Lack of assets, inventory, and running unpatched systems, resulting It's common to find unnecessarily exposed microservices, which makes applications Simple Google Dorking, DNS search engines for various types of will be enough to discover targets.&quot; The OWASP Impacts description states data or even take over the server. Sometimes different API version same database with real data. Threat agents may exploit deprecated to get access to administrative functions Improper Inventory Management takes place are unsupported or still in development. As with any software, old API vulnerabilities because they are no Likewise, APIs that are still being as their production API counterparts. Improper inventory management can excessive data exposure, information rate limiting, and API injection. For attackers, this means that discovering vulnerability is only the first step Detecting Improper Inventory Management API documentation, changelogs, and For example, if an organization's API along with the API's endpoints, it the API that are no longer supported. Organizations often include endpoints names to distinguish Such as /v1/, /v2/, or /v3/ and so on. APIs still in development often /beta/, /test/, /uat/ and /demo/. If you know that an API is now using documentation refers to apiv1.org/admin, to see if apiv1 or apiv2 are still active. Additionally, the organization's why v1 was updated or retired. If an attacker has access to v1, Outside of using documentation, an inventory vulnerabilities through or brute forcing requests. Testing for improper assets management and non production versions of an API. API providers will often update of the API in a variety of ways, /api/v2/accounts, or /api/v3/accounts. API versioning could also So you could see something like Accept: In addition, versioning could parameter or the request body. So you could see /api/accounts?ver=2. Or POST to API accounts with Non production versions of an API was not meant for end user consumption. Non production versions could include /api/private, /api/partner or /api/test. In these instances, earlier be patched or updated since the They may expose the API to additional to a path that can be used to The OWASP Preventative Measures states important aspects of each one of them, production, staging, test or development, host, such as public, internal or partners services and document important aspects, data is exchanged and its sensitivity. Document all aspects of your API, such as limiting, cross origin resource sharing, their parameters, requests, and responses. Generate documentation automatically Include the documentation Make API documentation available Use external protection measures, all exposed versions of your APIs. Not just for the current Avoid using production data with If this is unavoidable, these treatment as the production ones. When newer versions of the API include analysis, risk analysis to make the required for the older version. For example, whether it is possible to API compatibility, or you need to take all clients to move to the latest version. For additional resources about out the written course materials. API10:2023, Unsafe Consumption of list that focuses less on the risks the risks of being an API consumer. Unsafe consumption is When an application is consuming the data those with a similar trust to user input. By that, I mean there should So data consumed from third party API standards as end user supplied input. If a third party API provider is API connection back to the consumer for the attacker to leverage. In the case of an insecure API compromise of organizations insecurely The OWASP Attack Vector description attackers to identify and potentially the target API is integrated with. Usually this information is not publicly service is not easily exploitable.&quot; The OWASP Security Weakness description verify the endpoints that interact with on weaker security requirements such authentication, authorization, and Attackers need to identify services the with and eventually compromise them.&quot; The OWASP Impacts description states the target API does with pooled data. Successful exploitation may lead to unauthorized actors, many kinds of Most of the 2023 API Security Top 10 An API can often serve as the path So if an attacker compromises a third party's connection to other businesses If that API is over an unencrypted to capture sensitive data in clear text. If that third party API isn't held internet facing APIs, then it could authorization, authentication The OWASP Preventative Measure states assess their API security posture. Ensure all API interactions happen Always validate and properly integrated APIs before using it. Maintain and allow a list of APIs may redirect yours to. Do not blindly follow redirects. For additional Resources about out the written course materials. Injection vulnerabilities have plagued They take place when an attacker can systems that support the web application. The most common forms of injection attacks and operating system command injection. APIs are yet another attack vector for from an attacker to the supporting The OWASP 2019 Attack Vector description with malicious data through whatever such as direct input parameters, it to be sent to an interpreter.&quot; The OWASP 2019 Security Weakness are very common and are often found OS commands, XML parsers, and ORM. These flaws are easy to discover Attackers can use scanners The OWASP 2019 Impacts Description information disclosure and data service or complete host takeover. Injection flaws exist when a supporting infrastructure and the input to remove unwanted characters. As a result, the infrastructure request as code and run it. When this sort of flaw is present, an attacks like SQL injection, NoSQL When these injection attacks are unsanitized payload directly to application or a query to its database. As a result, if an attacker sends to a vulnerable API that uses a commands to the database, which will The same will happen with vulnerable Verbose error messaging, HTTP response can all be clues to an attacker have discovered an injection flaw. Say, for example, an attacker were in an account registration process. The API may pass that payload database, where the or 1 equals 0 not equal 0, causing a SQL error. An error in the backend database could In this case, the attacker, who's response like, Error equals you But, any response directly from the serve as a clear indicator that there's Injection vulnerabilities are often like poor input sanitization. Injection flaws can have serious with the ability to manipulate an Finding injection flaws requires paying attention to how the API responds, to manipulate the backend systems. Injection attacks have been around for security controls that can be used The OWASP 2019 Preventative injection requires keeping data Perform data validation using actively maintained library. Validate, filter, and sanitize all coming from integrated systems. Special characters should be for the target interpreter. Prefer a safe API that provides Always limit the number of disclosure in case of injection. Validate incoming data using valid values for each input parameter. Define data types and strict For additional resources the written course content. Logging and Monitoring are a necessary In order to detect an attack must have monitoring in place. Without sufficient logging and monitoring, dark, and API attacks are guaranteed to The OWASP 2019 Attack Vector description a lack of logging and monitoring to The OWASP 2019 Security Weakness and monitoring, or insufficient logging to track suspicious activities and The OWASP 2019 Impacts description states, activities, attackers have plenty Logs can reveal patterns in API to understand how an API is abused. Logging and monitoring provide an required for compliance purposes.&quot; An important part of logging is to and cannot be altered by an attacker. Monitoring an API will help providers and anomalous user behavior. This helps providers be able to Logging and monitoring are essential for The OWASP 2019 Preventative authentication attempts, denied Logs should be written using a format solution and should include enough Logs should be handled as sensitive be guaranteed at rest and transit. Configure a monitoring system to network and API functioning. Use a SIEM system to aggregate and of the API stack and hosts. Configure custom dashboards and alerts detected and responded to earlier. For additional resources about check out the written course content. Business logic vulnerabilities that are unique to the policies and The exploitation of business logic misplaced trust or features of Identifying business logic to the unique nature of each business. The impact of these vulnerabilities the vulnerable policy or feature. My attack vector description for this unique to each application and exploit an application's business processes. They often require specific knowledge and the flow of transactions or data. Since these vulnerabilities are each application, there's no one size My security weakness description states, the assumptions and constraints of a given in the application's control structures. This allows users to manipulate to achieve outcomes that are These weaknesses typically occur when ways that an application's features can the wider context of the business rules. This is often due to a lack of application's business logic, a lack function level authorization checks. My impacts description states Business of technical impacts depending on the These impacts can range from unauthorized a total bypass of system controls. Business logic vulnerabilities, also are intended features of an application For example, if an API has an upload upload certain encoded payloads, encoded payloads, a user could upload This would allow end users to upload code, including malicious payloads. Vulnerabilities of this sort normally that API consumers will follow only use the API in a certain way. In those cases, the organization a security control by expecting Unfortunately, even good natured API to a compromise of the application. The Experian partner API leak in 2021 was A certain Experian partner was authorized checks, but the partner added the API's application and inadvertently exposed This request could be intercepted application, and if it included a would respond with the individual's One of the leading causes of this business trusted the partner to not expose the API. Another problem with trust keys, tokens, and passwords are When a trusted consumer's credentials wolf in sheep's clothing and wreak havoc. Without strong technical controls in often have the most significant impact An API's documentation can be a telltale Statements like the following potential business logic flaws. Only use feature x to perform function y. Do not do x with endpoint y. Only admins should perform request X. These statements may indicate that end users won't do any of the An attacker will easily disobey such of technical security controls. Another business logic vulnerability that consumers will exclusively use application and won't capture API requests All it takes to exploit this sort of requests and alter the API request This would allow the attacker to parameters that could negatively As an example, consider a web a user normally would employ to Say the web application issued an API username and password along with a query There's a chance that an attacker could simply altering the parameter to false. Testing for business logic because each business is unique. Automated scanners will have a difficult flaws are part of the API's intended use. You must understand how the consider how an attacker could use One method of testing for business application's business logic with an any assumptions that have been made. My preventative measures for business Use a threat modeling approach. Understand the business processes Identify the potential threats, phase that can help to uncover and Reduce or remove trust relationships Business logic vulnerabilities relationships leading to a broader impact. Regular training can help business logic vulnerabilities. Training should cover secure coding and how to identify potential issues Implement a bug bounty program, or responsible disclosure policy. This allows security researchers who delivery of an application to disclose For additional resources about out the written course material. And that wraps up the OWASP API Hope you enjoyed it. And if you'd like to earn a badge and at apisecuniversity.com, take the quizzes, And while you're there, be sure including API Pen Testing, API We also host many webinars with disciplines, and geographies. You'll see these listed on our Please subscribe. Thanks for watching, and