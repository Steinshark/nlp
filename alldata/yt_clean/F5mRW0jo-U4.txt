Hey, and welcome to the try Django series. and master Django. Like I want you to go as far as Django web framework you see in the way we're from the beginning, we're going to start with our way up introducing new concepts along the a full project. So instead, what I'm going put them into a practical use case, in you'll have a very good understanding of how to of course, I do recommend that you learn from right here on YouTube on join CFE comm slash comm we have a ton of stuff there for building all about getting the absolute basics to If you're learning Django for the first at least it was for me, because once I was able to a database attached to it, it was like, Oh, this as excited. And perhaps you've already done that the first time you're programming. Either way, not so much because of the programming language, system. And since it's so frustrating, over years, depending on what you're on. And that's part working a lot in a Mac. So Mac OS environment. And it the same? I mean, actually using Python, and Because Python is Python, and Django is Django. but realistically, it's the same. Now over the and all of that can be found on join CFE comm that setup process, you'll be ready for the rest other step other than setting up your system. one other thing, and that is the code. So we have GitHub to shortcut it, you're going to look for slash GitHub will take you here. And then if of them. In fact, if you type out, try Django, ignore all of the ones that have numbers in them is the link right here, if you want to go directly when you hit roadblocks, what you're gonna want and take a look at GitHub, and make sure that what doing in the videos. That part is critical. consult the documentation. Django documentation is that you can learn that we won't necessarily or they give specifics to whatever use case you is Google is your friend, you know, you can use not familiar with. And oftentimes, that will has all of these questions from people for all including Django, including JavaScript, all quick search, you can search for just Django and to like votes. I mean, does Django scale that's an what is normal, what is blank, I mean, this right I'm going to assume for the next video and all the set up and ready to work with Django and Python. be discussed in the next one because they will want you to stick with whatever version is in the Alright, so in this one, we're going to be and install Django. Now, if you haven't done definitely stop now and make sure you go back want you to have a fresh virtual environment and practice of it, but also to make sure that we're open up your terminal window, or if you're on but hopefully you're using PowerShell, if your terminal is fine. So if we type out Python V, you might already have Python three in there. point six, right here, you're in good shape. If an extra step. Okay, just keep that in mind, I'm over to the side a little bit and break it down. this. Okay, so I've got another terminal window but I'm gonna leave it there just in case. So a virtual environment and install Django, I'm So I'm initially going to show you the final way. to the next portion, which would be installing that. And so I'm going to show you exactly how I'm virtual environment in one development area. So out, this is what I see, yours might be a little this dev folder, if you don't see it just do make there. So I get this error. I'm gonna just CD into my development projects. So in here, I'm going Django. We're gonna CD into that directory. And before it created, I'm just going to hit virtually I see that there's all sorts of options I can you see an error, that means you need to install I cleared everything out. But if I do pwd, I see I list everything out, there's nothing in there. Python three, enter. Again, remember how I said if you can just omit this portion right here. you can omit that portion and just leave that creates a virtual environment inside of this slash activate. And then I can install Django, is going to be 2.0 point seven. So Django equals version of Django. If you're sticking with me on care if 2.8 was 2.0. point eight is out, use 2.0. stick with me on this, you will absolutely upgrade so I'm gonna hit Enter, and I'm gonna let your activate, you might remember is different, I'm going to just go ahead and break it down a window, and simulate reactivating this virtual Dev, and then I CD into try Django. I'm back into slash activate and a Mac environment. In a Windows And then you can also run deactivate. Okay, so Cool. So what is the purpose of having a virtual it's as simple as doing PIP freeze. You see all activate it, source bend, I activate and do PIP ytc. That's it. So it keeps these requirements and it's projects like Django, you want to so we have everything installed. If this part was next one, if you had some issues, or you want to stick with me. So notice that, obviously, working. So going forward, just just watch just that up to this point, if you have it working, watch this next part, rewind, and then install go pretty fast, but still explain what's going on. windows and act like I'm starting from zero. Okay, I'm gonna go ahead and make a new dev folder list everything out, nothing's in there. So I'm creating a virtual environment. The first one is that you want to give it. So V and V, that is a Python version, it's going to go off of whatever out. In my case, it's version 2.7. But that is a to start it based off of a specific version v, dash p, Python three, also, let's call this And there's Python three. So that assumes that if Python three. But if you type out Python three, happens then, well, I can just do which Python Python three is installed. Right. So which Python right. So every once in a while you install Python else. And this command itself doesn't work. But and you do something like this, you actually that should actually open up Python three for you. start a virtual environment is virtual MV, v, Python three, I hit Enter. And then we'll actually of the thing I will mention is, we can also just want to make a virtual environment in a brand new I CD into it. And then I can do virtual ENB, and version of Python I may want, right? So the order running those commands in comparison to what I was how you can create a virtual environment. Now in rid of that dev two folder, I really don't need for getting all of this stuff going. Okay, so go ahead and leave it at that. Now, if any of video and do this multiple times, because having installing it, you're going to probably do this of the basics of Django, and you don't plan on you maybe won't need to do it this way. Now, one I don't care about a virtual environment. I don't at your own risk, right. So you're gonna run into yes, I am not using conda Anaconda is a package Django can use a lot of those same packages. In well. But realistically, if you're using Anaconda, and you're probably not going to use virtual entire series, I would recommend that you use just to get used to how web developers often Now it's time to create a Django project. See, because I want to get in the habit of knowing how here and I CD into my dev folder where I'm holding My virtual environment route is, and I just run anymore. We go ahead and run source bin slash for you Windows users, it's just scripts slash go ahead and do PIP freeze, and you'll likely see using, that's the version I recommend that you right over here, so we can always see it. Right, version of Django I'm going to be using. Alright, It's really easy, right? This this, hopefully, easy. I'm going to fast, maybe just put it on a try to get it so beginners can keep up. But also that are just learning Django, so all of you can It's, it's it's a little bit ambitious to achieve. environment, and I have this command Django dash allow us to do all sorts of things with Django, So Django dash admin, create, project, and you can do this right off the bat inside of that create an src folder, as in the source folder of I go back into my virtual environment, I see that the four, the four things related to the virtual change into that src folder and just do Django name, what am I going to call it? Well, to be the name of my virtual environment as well, I your virtual environment and your Django project only for your system, the project itself will be and there won't be anything related to our virtual try Django. And I'll just put a period at I hit Enter, and I list things out, I see managed that has the name of, you know, try Django because if I run Python manage.py start or excuse me run like this, yes, it's giving me some warnings, is giving me a web address that I can go to. hey, congratulations, you have Django working. and this is new to you. This is a new landing I like it much better than the old one. For sure. go. So there's all sorts of things that we can do itself, what I want to do is start working with write the code that is not necessarily inside of For especially for beginners, it gets very, very we're going to do something different. And the In this one, we're going to download a code more user friendly, than just typing all of the So we're going to be using Sublime Text. But charm, or p y charm. So Sublime Text is 100% free can just go ahead and buy it. I am not affiliated both very popular choices to write out your here is you're just writing out your code in these even more user friendly, but I'm not really going just go ahead and download this and get it up and see something like this, right. So you can have and you'll see some blank page just like this. So it. So to do that, you just go into project, add to wherever our project is. Now in my case, I go because that's where the terminal opens by I'm going to go ahead and hit open. This brings in virtual environment related stuff. And it also and all sorts of Django related things, right? So editor is it just makes it really clean and easy it also gives you these numbers or these lines of And you already can go boom, line 10. Okay, cool. mean, there's so many things to it, that I'm just spend probably an hour just going over the setup anyway, so we now have this folder in here. And what I want to do is just save the project inside Django. This workspace thing that's an extra I save it in here, I've got my sublime project. and you are in your project itself, and you navigating through back to where it was, you know, it'll open up sublime. If it doesn't, then just, which is get info. And just say make sure that you If you're on Windows, it's right click and, you want to make sure that it opens up. But the nice my code is. And I can open up all the different them. Sublime Text is really cool. I really like they don't. But I really liked their product. So going to be using it a lot. It's not required, Let's talk about settings.py. This is absolutely has a lot of implications for your project line as to what's going on here. Of course, you that is going on behind the scenes. And just course import the OS, because Django works on any all of you guys see the exact same thing if you've we import OS, and then we have this variable of what the heck is going on. All this does is but more specifically the folder that is holding that folder right there. Okay, so how I know this but how you can figure out where that directory gives you in my case that right? So your user it's going to be different for sure that the nice thing here is we know that Django knows where right? So we can do things relative to Django, is based or shows us that right off the beginning. is, too, if you were so inclined. You can print ahead and run that server again. And what do you us? Right, just like I said, that's where it is. key. Every Django project has a secret key that's project. Or at least they should be unique to that public in production because it it could possibly So just doing a couple changes. is good. Okay, very useful while you're learning or while you're live server or a live production environment, it's using it, you turn that to false. And then has names that are allowed, not going to get into that of Jango. installed apps, there's a bunch of them But this is where you're going to build your apps. creating, you would put it in an installed apps, have, you would put in installed apps. That is, I in terms of components than apps, right. So like phone has a bunch of apps, it's not like that. Django project itself, middleware. This is the I it has to do with your requests and how requests stuff like that. This is something we'll go over But it's nice, because it allows us to know that as we can see with some of the ones that are we'll definitely cover for sure, too. This is how so like, I'm my server is running right now. So go to slash, you know, it, whatever this is URLs, default by Django, something that's really cool is templates. You know, like Django renders out But basically, like, where do we store them? And stuff will go over later. But it's essentially it's really cool. It's very useful. And it's next thing is the Ws gi application. This is how uses this setting that's here. In some cases, you is. Next thing databases, Django maps to databases a few others as well, very easily maps to it, located. And some of the other settings, you can it has a sequel lite three database already there, Next thing is we have password validators, or at least good to the current standards of what stuff. I'm gonna skip that for now. And then your images, your JavaScript, and your CSS? Like, something we'll absolutely talk about as well. right. So it's pretty fundamental to how all of main configuration. I mean, that's it. That's it things a lot more. But what I did want to mention is that that database thing, so we have this Python manage.py migrate. So what this does is it have, with our Django project, and in whatever for sure. But all this is, is this right here. So Hey, database, make sure you in Django are So if I actually change this DB to I could Django actually creates a brand new database for Lite. If you had MySQL or Postgres SQL, you'd have we can just do whatever you'd like. As far as the default, db does SQL lite three, I'm gonna go understanding of how settings work. Let's go ahead Now it's time to talk about one of the key should think of apps as components or pieces the little bits and pieces that can hold a good your mobile phone. Right? So if you jump in to the installed by default. Right? So this is also where Right. This is pretty cool. So let's take a look at. The very first one is called admin. And if I something like this, this Django administration, filled in, because I use Django all the time. yet. You know, and actually, the question should I'm going to go ahead and jump into my terminal, I have one that's running the server, and then also known as port managed py is, you can a couple things that definitely need to happen. run Python manage.py migrate, I see something that are built in those are there by default. but you definitely want to make sure that migrate and then is Python managed up UI create super a user that has access to the admin. This is not user, right, so the user that you'll end up using, I'm going to leave a the email address empty, the password typing doesn't actually show up. And and you're learning, you can use whatever password It has to be secure. When you go live, when you want to be secure. So I've got my username here, all lowercase. And I can actually log in to actually create a user that's actually in the I didn't have to do anything. Really cool. So that that same action would happen, regardless of the about the first portion, or first two portions of right? That's off an admin off is that user, I created a super user. And then admin is what users. And I can see more about this auth user, I and hello at team CFE Comm. And what do you know, sorts of things in here inside of the admin. But it's really cool. I can also delete users, there's a lot of built in things about the admin apps, right? The next few things, well, they're talk about is actually creating our own custom do a custom app of our own and have it inside our own data. So our own structure of data. Now, last one, we saw some of the built in some of these components, also known as apps, that things are phenomenal. They're really easy to use, and the purpose of using Django is to build not confuse apps with like, what's on your mobile this greater hole. That is your web application. Django project, I'm going to use that term a lot. manage py, so where manage.py is assuming that you where you want to be whenever I say root of the the case. So I'm navigated there. And of course, Might be a little different for you. If you don't this series, it's linked below, make sure that let's go ahead and create our own custom app. So and then whatever we want to name the app. Now, can do the same thing by pressing up and renaming you could do it to cart, right, so I can name those four names actually fit with like an e into the code itself, you see that, hey, I've now those different apps that I just created. Now, towards, like, we could totally build an entire what it should illustrate to you is that each one really well, like, the products app should really things that should be separate, that should be means later. But the idea here is that your app to get wide, that's when you start to bring it really easy to create an app. So there's really no And I want to avoid that in the long run for you. so I want to show you how to use an app in the way for storing data and mapping what data you want to go ahead and delete some of these other apps that them. Because we're still learning, right? So I only have products. So opening up models.pi. We'll just models.pi I want to store a product, right? that I created. How do I do that? Well, I write I wanted to have various attributes to it. I want to say that it has a description. maybe I just want title and description. Maybe description, and price. Now I want these mapped to in Django, it's actually fairly straightforward. models.we, just type out models dot, it's already a text field for each one of these for now. but let's just use text field on each one. class that I'm using here, I needed to inherit so this means that it's going to get a lot of work that we just won't go into just yet, that's simple model called product. This will map to the since I created models.pi, and I created this app, apps. And that's really simple. I just put my own app that I created, right, so that's the folder I'm just going to go ahead and put a comma after that I save my settings.py and models.py. And migration. So Python managed.py, make migrations so those commands, you're definitely going to want and then Python managed up, py migrate. Okay, so The second time I did it, it didn't do anything, each other every single time I changed models pot. and I'm going to just going to say active. Okay, right? So we got description and summary, those change to the model, I saved it. And now I want to basically a default. And I'm just gonna go ahead But I'm gonna go ahead and say default and say, make migrations again. And then I run, migrate that? Well, the main reason is to remember that we make changes to models of Hi, anytime, anyplace, So we've got this model now. And I want to take I do here is go into admin.py. And do from dot a relative import. It's importing the product because admin.py and models.py are on the same, I can actually do that relative import. And all I We save that. And with our server still running, I now see this new thing here called products. price. And the summary, hey, I've got my default, Hit exclamation mark had save. And there we go, in the database. And that's the that's really the model saved in the database. Now I could use this the database. This is not a great model, I will how it is, we'll get into more advanced features That's all we have to do for a model. That's do this in the Python shell, that is actually And now what we want to do is just use the Python before, now we want to use the Python shell. So to of my Django project, you know where managed.py shell. So when you do manage.py shell, that means inside of a Python interpreter. So I hit Enter, it not because I can do from products, the models of imports, I can import classes, just like we import in the admin. This is closer to an absolute enter here. And I can do product that objects we'll get over this sometime in the future. But one thing in here, right, there's only one item. that's all I did, you might have done it. And that's cool. If you have that means that what I want to see is more I want to actually have the ability to do those commands. So it's And then we want to create new ones inside of this this is built into Django, this is default by the things that are required for this product, we those four fields in here as title, new product, right price being, you know, whatever price, notice each one, each argument in here is purpose. They're all strings. And that's how I can I can press up and enter again. It's creating product dot objects at all, again, what I see we'll get into that later. But it shows us all of have our server running, which I do, you can close make sure that my servers running, I can come back you see this, you go to products, what do you So that's another way to actually create things in you know, clicking through and going pretty awesome. So we still have a lot more to form. But before I jump into another form, I want model that isn't so convoluted, like I shouldn't in the actual decimal, right. And perhaps maybe it should just be one shorefield. So there's product model to make it better. That's something So now, what I'm going to do is actually start did here. So in order for me to start over, I can just leave it in there, that's fine. also delete I'm going to delete my sequel lite database. Okay, fields to something different, what I just did was right, you'll delete those migrations, and then some data. But that's no big deal. That's part of really important to do. So with these fields, more realistic to what they are. So let's go ahead So Django project.com. Look for the model fields, for this. And you'll see the reference for all used so far was just one of them. As you see, just this text field, that's one of the very many a few different ones. First of all, the title I'm going to change it to a char field. And I'll it at most 120 characters, that's still a fairly when you use a char field, you have to use max I'm gonna leave it out for just a moment and and run my migrations, right? So I'll go python char fields must define a max length attribute. Django will tell us if something's required, once description text field, that actually makes sense. want to have a description, then I can say blank true. I'll explain these deep the differences what should our price field be? Well, should it see if there's a decimal field, hey, what do you I'm gonna stick with decimal field. And this is easier for us. This will show us what's required. things are required right here. Whereas if we we're not going to use that. But there's nothing that has a requirement, but it's already in there. getting used to but that's essentially what's you inside of the docs that it has those required and change this just to decimal field. Let's save right? It shows me these errors. It tells right so the doc says back digits and decimal product decimal places is gonna be two, like you You don't have three decimal places of sense. this will allow, like 1000 digits is actually a in your math in your head, what's 10,000 digits? So I now have a little bit more robust fields. Maybe I want summary to be in there by default, I'm gonna go ahead and get rid of that default. most likely in the next video, but I will explain so I save this. And now what I need to do is every time you change models.py, you have to then Python manage.py migrate. Now, I deleted the create super user all over again. And I'm going to code. And there we go, my server is still running I refresh in here on the Django admin, I still actually don't have any products anymore. But already changed. The title can't be some long I can write stuff if I wanted to. Price has now numbers 2989. And I can add a summary, some what do you know, not a whole lot different. Okay, too. So Python managed up py shell. And we'll import product, does the exact same thing, it's is, we can enter product objects, create title actual a decimal number in here, no string. So sauce is awesome. We hit enter, it looks like our products. In the admin still running, we see stuff was saved. So it's bringing those two things starting to save stuff, we already hopefully This one, I'm going to make a new change to our the migrations for that matter. So that means that what's going on with both of those things. So when database with our model. But if we add a field that field. So we have to make sure it knows and happen. But it also introduces a whole set of like into the database. What about all of the previous let's see what I mean. Right? So if I jump into here, right? But if in my models, I decided to let's say models, dot Boolean field, okay, but this particular objects, this saved object ones might, but this particular one doesn't. So managed up, py make migrations, right? So you a non nullable field. I did mention that I would right? So if I said no equals to true here, this have said all of those old values, just leave that's fine. No worries. But I don't want to do want a value for those old items in the database. actually doesn't know how many items that are in it could be zero items. Now, there What Django it's going off of this initial value. Notice this what's in here. For this model, it's saying, hey, right here, isn't in this initial description, that the database needs to know about what's what default things we should do. Now, you can right? In the code, you can say no equals to true, right? So you can have a default in there, right? case, it's a Boolean field, which means either true. So you could absolutely hard Right, right, you can provide a one off default, for all of the say one, and literally say true, right. So this going to go through all of them that's already those things as having a field of featured with true. There we go. Now that make migrations, what a migrations file, and this is it right here, anything, right? It doesn't know about this field can actually come back into my Django project. And right. So that's an error that you might see quite forget about this. So we want to run Python make migrations, and then migrate. And then there we see, all of our old objects that are stored new ones. There is no default in there. Cool. So models, this summary, what if I wanted that to not to true. But let's go ahead and say no, equals to I made changes to the models. So what do I make migrations, and then Python managed up, I come back in here, I refresh. summary is no the database. So if I change blank equals to and again, migrate, I can go back in here and So if I'd save and continue, it'll give me this has to do with how the field is rendered, no has meaning that it's required, then it will do with the database, as we see with these two that the database can be null or empty in the in the model. This used to be very, very hard. And doing this several times, breaking it, the in here already deleting the database, running several times, will really get you comfortable to explain it to somebody try to explain to a things that I just did. Go back and reference to really better understand how this basic stuff we can do in models, but I'm going to kind of does really well that we want to start talking So we want to change this default homepage to that? Well, we do this by creating a class or a going to handle our request. I'll get into all is just illustrate the purpose that we're doing. pages to Settings installed apps are you Want to new apps, but you should know how to do that by of views.py, we see that there's nothing in here, sorts of things for your pages. Think of views Just think of it that way. And we're going to do Python. So the first one I'm going to do is just function, it's home, you give it a name, whatever you'll probably add view to it. Like, you're right. So I'll get into view and all that stuff And then it's going to return something, we want I want to just say, h1, hello, world. Now, if this is just a very simple Python function. It's so we need to change it to be related to Django. is a string of HTML code. It's not actual HTML definitely useful if we want to just have one do I actually make this functional? To do that we HTTP response, we can just call with that string to making this an actual functional view, or add RS and keyword arcs in here. If you're not recommend that you look that up on Python, this is it. It's okay, you can look it up. But for now, now created a function, all this function does is but it returns it back in something called an this work. I'm gonna save it. And I'm gonna hope what if I tried different page like ABC, that it says something about URLs? Well, this is where comes in. And when we went over the settings, URLs are in try Django dot URLs, or otherwise, the URLs, this configuration folder has settings and been using, which is admin. But that's the only is actually import that view to work with my in here. Right? So this is actually written for in a similar fashion by saying from pages, import views. And then I can quite literally or in the comments there. And I didn't call Right? So there we go. I'm just going off of what that. And let's go back to our homepage. Hello couple things that I don't particularly think that what if I wanted to use the product views things get confusing. So don't do it this way. that you want to use, and then just put that down the same exact response? Wow, that's fairly easy Let's talk about URL patterns and how this now URL patterns, you notice that I Have I actually copy this and paste it down here and and save it, I can actually go into home. And different page like ABC, that won't show up. routed a path to that view. Right. So let's say you know, we can, we can actually ignore this name sure, it could actually go to that same homepage another one called contact view. And again, we'll HTTP response. And then we'll just say, h1 and we would import that as well. Just like that. And page. pretty useful. Now what's actually happening go to a Django page, right, so we we go to a something is being requested, that's different. this homepage. And then if I go to another and it's getting that item, whatever's in there, is being requested, look in this urls.py, or that it's going to look for that URL. And then with a is made to handle that URL. Right. So we already you know, we can have as many views as we want. project might have a lot of views, right? So like you can absolutely start playing around with. And this and play around in the sense that, hey, how of my own pages? Now there is a critical thing that just yet. What I will say is that remember, from that URL, it's kind of like knocking on it's not a whole lot different than that, we're knocking, we're asking for something, we're requesting a web page that's at that URL. we have ours and keyword ours to just capture let's go ahead and print out ours and keyword into our terminal. We see here are the things that I'm requesting something. So that means that it here, I can say request, and then RX keyword here by default. So if I go back refresh, now my absolutely in there. So I can print out that request do exactly? Well, there's a lot of them that's important for us is request the user. in. This is where logging in your users come that. So if I refresh in here, I can see that, an incognito window, or just another browser or user. It's not somebody that's actually logged are really good to know. Because then I can do that's a little bit more advanced. So before we or these basic application work better for and it's rendering out of HTML. And that's great HTML. Hopefully you have some background HTML Just like notice, like my head is empty. It's just So now it's actually a really good time to engine. So we can override this HTTP response with quick recap, we go to a URL, it's like we're the server or Django returns a response to with correctly configured Django projects. Now, being requested or, you know, that web address is what function is going to respond to it, right. some sort of HTTP response. The basic default one whether it's HTML itself or just a string, it we can even return it being nothing like it could work. So this is still a valid page. But what we we want to use some built in shortcuts that Django import render was in there by default. So okay. So I want to actually be able to use this what I want to do is return render, and it's going request argument that's being passed. One is going home dot html. And then the last one is context. we will talk about context later. So that's how template or HTML document, either way. So how do Like, where's that located? If I save this and not exist. Well, it certainly doesn't. We haven't it throughout our site, but it doesn't actually for it. And that's what we'll do now, inside of we're gonna make a new folder in here called our templates as we see fit. So inside of there, making that new file. Notice templates is online, folder, as well as manage.py. So I'm gonna put a hello, world, close off h1, and then do a p tag. so we save that seems like things are looking in there. We want to render it out. Save it. Let's still. Well, this because we haven't actually set mean, I didn't name it templates. But that's an name. It is a best practice name, but it is still, remember how I said we were going to come That's this. So we want to actually put where this directory location is. Now I could do that. So let's go ahead and say pwd, here is my of the Django project. All I need to do is add I hit save, and refresh in here. What do they're actually in there. But if I sent this work unless your user is CFE. So what we need that's actually fairly straightforward. But with it OS independent. I want to make it allow it for So it's b o s path that join base dir and then two where manage.py is with the templates directory still working, that templates still showing up. So pages like about dot html, contact dot html, and in all this code here, and say, contact and about. I could just read, change these about and about an HTML and contact that HTML, I save that hey, look, and cool. So it's rendering HTML. right? So it's, it's not actually like rendering through Django, and Django is rendering out that web design before, you'll know that that dot html and it's a lot easier to navigate and share. in my opinion. Okay, so now we have a way to there is a lot of repetitiveness that could happen basic inheritance stuff with Django templates. Time to talk a little bit more about the Django using, but we want to learn more about it. So if brackets, request dot user to more curly brackets. and it actually will render out that relative homepage. And I see that CFE user, that's my anonymous user, that's expected. So that's part of we can use the user model in it, right. And I can it'll say true or false, depending on if they're things we can do there, which we'll talk about a everything. But what you also should notice is HTML pages that actually might share attributes or more importantly, some metadata, like, and we saw, like, you know, the title tag, or the need to implement in here, or some CSS data, I those pages would actually be able to use. So and where it's really useful for us. So what that all these other pages are going to borrow based as your HTML is convention, that's how going to want to make it a actual HTML document. and then body and body. Okay. And then we just to show that this is actually working, we'll entrepreneurs. is doing try Django. Hey, okay. So we've got our head tag, our body tag, we have what do I want to do? Well, each one of these the exact same stuff. How do I do that? Well, html, curly brackets, percent, block content, block or curly brackets, percent block or rather weird to you. But basically, it's saying Like, in here, let's just replace it. So replace me. these blocks these exact same blocks on any given go ahead and cut this out. And say, just like content that's going to be it's essentially going I have to do to make all that happen is extends percent signs, it does definitely can get a little on your own to make sure it's working. Okay, so into home, look at my title tag, if I refresh, and try Django. So that title tag actually did change. do that again, on about instead of about curly so this is now pulling from based on HTML. If about page, it just says replaced me. Ah, so it's doing. So in order for me to actually replace I do block content, curly bracket. So curly stuff. Content is a variable that I created. And also see in block content, that's okay, too. So we the title has changed. So we now have template would be true with context as well. So again, we And then finally, in block, just like that, so But now each one of those pages is uniform. I use something like a navbar. So let's just go just to show this is a navbar. Not to get into it's all about page. It's on my contact page, the same thing all across. And that's how this you know, if you change this to blog content, that every single one of those pages would change, not replacing the correct block, and each one So they just don't do anything, which is really for us in the long run. But this might be a this actually works. So what I do also recommend to another content area, and do several blocks sure that that you have a better understanding of a little bit trickier than just rendering out is important. So we will still do more stuff So what inheritance allows us to do is to remove or we're gonna talk about in this one is the of the same, just on a little bit more of a sometimes you'll have a nav bar or a navigation places. So to allow this to be showing up in that navbar not having to go into the base every let's just make a brand new one called the navbar it's not gonna have anything else, it's not really what we're going to do is have a navbar of some ul in here, and you know, did some navbar related but let's go ahead and just say brand. There brand. And let's say contact, and about. Okay, And let's get rid of this, this is a nav bar use include. So again, curly brackets, percent that actual HTML document lives. And we'll so this is very, very similar. Now very similar, right? So whatever we put here would be very, we'll get into that more later. But this is how our templates. So we save that and refresh. And it's not a very good one, but it is a navbar, that the reason you do this is once your project gets you're gonna want to use this include, because navbar, I can just jump in to navbar dot html. to do is actually talk about context. So like, request user that we've seen before. So I want from other places. So I'm not hard coding it every So the main purpose to use templates in Django and granted, it does the things well, and you really want is data from the back end, we want inside of one of these templates, we want to see request that user a few videos ago. But I want know, maybe I want to change the title of a page, off of a different user. And we're going to work to understand is what's called template context. So let's go ahead and jump into our views and so it's an empty dictionary right now. And that's template. Because what Django does is it takes our things together, renders it, and then sends back means in just a second. But that's essentially some context, mashes those things together, turns Okay, so what do I mean by context? Exactly? Well, in our, let's say, our about view, right? So let's dictionary and say, my underscore context equals here and put it in and replace that empty one, so I said that I wanted to change my title. So meaning I'm making up this key. And we'll say, whatever. Okay, so this is now my context, all of probably could guess. But we've got a key value with a key as a string, that's a standard thing in or I could use something else like, number or And we could do 123, right. So I can use strings, which I'll let you play around with the data what's important. What's important is how we page. So since I've got this context, I have this myself. I want to bring this into that template two different key items here. So let's go into our project is open on that page is So we'll go project that's rendering out this template. And I passed in as context, I would normally normally general HTML here. And then whatever context twice. So curly bracket, curly bracket, or braces, and then curly bracket, curly bracket, and then in the middle of here? So this is called a context what variables did we pass into our context? And so that is something that's already built in things that I pass through? Well, hopefully, you you'll develop it. We have these two variables. are inside of any given context that we pass. we've got this about dot html page. And then we together and produce something that I wouldn't we can say, my underscore text, and that right right, so it's taking this key, that's what we we can do that same thing with my number. So or rather comma, curly brackets, curly brackets, us, but you know, if you're using a different text way. And then we'll say my number, we save that we're not actually getting anything. Why is that? about view context. So I need to make sure that if it's empty, that means it didn't pass it means that this stuff wasn't actually set. bat. It's not really an error, it's actually a that data coming through. So that at its simplest just a really quick thing, we make a dictionary then we pass that now one of the things that you do I actually work through with a list? So if I it actually doesn't matter? How do I actually look my list, I render out that list. Well, that's nice want to see it in maybe an actual HTML list item, So this gets a little bit more complex. And that We left it off where we passed in some template actually rendered out, we want to actually look at the format I want to see is something like this. do a list item. So item one, and then close out would we go about doing this? There's, there's a let me say a couple ways that you could do it one the wrong way would be to come in here into variables. So in other words, saying like, for here. And then doing my context. And something this is not the greatest because it's only going to do this, you don't want to go this route. But do in the template. And that is we want to create themselves can have this same sort of flow, we can on any given context, object or constant context curly brackets or braces percent for and then some and say my sub item in my list. And then curly Python, it's closer to how like HTML would work. loop. So there we go, we have a way to actually do is put a ul on the outside of it, and then a those curly brackets again to braces, and do my is actually iterate through every single item in So if I refresh in there, now we see those two that are rated out. And they're shown up here. And here. One of them being like for loop, counter. we are currently. So if I refresh, I see that it were to change the order, or change the values, stuff like that, all of that will come through. all sorts of things inside of our template that's don't get me wrong, we still aren't seeing data all this stuff, like I do want to work towards But there's still a few more things that I want to So now what we want to talk about are conditions of our template itself. Now by and large, you handled in your view. That's a general rule of we get more advanced. But basically, if you're you're going to want to do those in the view and template, you don't want the template to do too will want your template to do it. And I'm going also going to give you a little bit of a warning so the first thing is, when you have your context instance, you do have a list like this, we're render that inside of our for loop. So in other my text to being ABC, and then inside of my about, my for loop as ABC, the things get a little hairy, out fine. But then when I actually want to do a if that's the case, then I might want to rethink they are I mean, then this is already looking on. So let's keep this in as my text. And my text, when you don't catch it. But it is something that it's just about recognizing how you name right. So sometimes you might name a variable, one It's also true with functions and classes. I mean, so much. So I just wanted to bring your attention Okay, so going back into this about page, I have one, and it's really simple, we just call an if thing that would be able to compare to another true. So you can also pass in a context variable is true, and just set it equal to true, right? So what they allow you to do is just evaluate whether things like equals equals, just like I have here. you can render something in particular. So let's you know what I'm going to throw in a another at later, let's just say add 22. So I've got a also known as a pipe. And then we just type out add. So we do that, and then we refresh in here. the third iteration goes twice. Now this is also have the default or what I used to have. Now the default like that, we would just say an else just like this. That way that the list can be then it's going to render that out and add 22 to still only those four items, except that one do some addition. Now, we can also have another another condition, you might be tempted to say just like that. And that's how we would do another And let's just say if it's equal to ABC, or we can keep that for loop counter in there if ABC. There we go. Nice little ways of doing like, what the heck is this What's going on here? filter. So every single one of these items but it's a template tag itself. It's like Django templates, and the templating engine. And on that context. Well, we'll play around By now we've used several built in template tags as a template tag, we've used block we've but this is an it right, we've actually have a there's a whole list of items that you'll see we just talked about block, but there's one you can write comment as a template tag, you can actually covered. But it is something maybe to particular, please let us know in the comments. And I'll explain why in just a moment. of what extends, right? So we have all sorts of items in more valuable. And then there's another thing that which is filter. So so this is a filter, all it the template context variable value is. So any of thumb, if you see two curly brackets, so really pipe and then some filter there. And yes, there's have if you have a need to see that, please let filter reference. Right. So we have all sorts of or even a string that represents a number. You context variable and you wanted to combine them slashes or cap first. Cap first is probably a in here, we changed my text to being title, we would change this to being title. And let's We put title here, and then we use that filter cap does is it ensures to us that that first text item and there we go. Pretty cool. Now luckily, the this right so like when would I actually use value I can honestly say I don't think I've ever used but let's go ahead and use center and try it brackets in there. Sorry about that center. It of how templates work. But you know, so I mean, it doesn't do anything. So it didn't do anything. things at once. So I can say cat first, right, But then maybe we use the upper case, with just is capitalize the first letter and then uppercase, filters together, which is kind of nice. Now, I'm these together like this, but it is possible. safe. So when you pass in HTML, as a context Hello, world, by default, when this is rendered, when it's rendered, it is rendered as just plain HTML document. Right, so we can actually use a And there you go, it actually renders that HTML. right? Or title look at Hey, that's pretty cool. then title. So title, and title, a title, a title the variable, whatever that is, is the variable. into the filter name that it might be cool. So we little bit more advanced than where we're at. You time, you can strip HTML tags. Alright, so we see I did strip tags, save them refreshed, hey, there So those are kind of the reverse of each other rid of it. These are pretty cool, very useful that's another really cool one slug five, what a hello world with the h1 tags in there still into But I can also do strip tags, and then slug fi. HTML tags and Slug a fight it at the same time. for this, whenever you think like, hey, I need to generally what you're using. Right. So if you have show up as a title, then you might do that. But enforce those things. And that's something that's to pick and choose on when you want to use them, them that much, honestly, because as we see here, when you have values like this, you'll do that also would do that in the view. And in fact, something called Mark safe. But that's actually That's a bit a little bit more advanced, so that's it for Django is built in template tags, rendering content from our back end. So the data Now it's time to actually render data from our play around in the shell a little bit. So we in the first place before we render it out. So terminal. And I'm in the root of my Django project but you don't necessarily have to do that. Let's Also, I'm assuming that you have this exact model, but make sure you have one model. And I'm going models. Import product. Okay, so if you're might want to go back a little bit, but basically module model module. That's a mouthful. And then product item, we can do product that objects that here. So ID equals one, I hit Enter, and I get to a variable itself. So let's say OBJ equals like dir OBJ, to see all of the different things there are other intuitive ways on how to do familiar with Python, you would just use dir to or attributes that you might have on here. One of right? So a lot of these are unique to my model. but and a lot of built in things that Django has you'd probably do OBJ dot title, or something unique to this model. And it allows me to grab now we sort of understand a little bit more you're wondering where the heck did Id come from, little bit. But let's go ahead and exit out of the first view where we're rendering out this actual views inside of the product app again. And I mean, other one, if you've been following along, has sure that everything related to your products is out a view that's related to one product, that are a few exceptions to that. But just keep that and I'll just call this product. Detail View. just stay with the naming conventions that I we're going to show one product. That's why we're put in the request here. And then it returns and then some context. So of course, we have to write product slash detail dot html. Right. So I you haven't seen that yet. So we're going to talk is the the actual context here. So I'm going to import here. So from dot models import the product little bit off. First of all, they might name functions, keep them lowercase. Secondly, you not a good idea. Just make sure that it's explicit product. That's why you want to put the product product dot objects, dot get ID equals to one. error for you. And I'll explain why we jump into we go into products, I actually have two products might have zero, but my model actually has some I see there's a number right up here. That is product. That's the other ID, one, two. But if we has to do with Django has built in features. One which you can see in the migrations in the initial so it automatically creates that for us. We don't so how do we actually create the context here, by default. And what context do I want to put and again, that was OBJ dot title. I can put right? You could, you could fill out the rest This context again, goes into my template, but I getting too too advanced level stuff of where we about literally in the next one. We're going to called product. And inside of that folder, we're That's all you have to do. So if you want to just make a directory in there and make sure you regardless of what system you're on. It should that HTML. And with detail, we want to extend continuing from previous videos. So make sure you just in block, there we go. That standard, we've we import our view to our URLs. So in our URLs, view. So we'll do from products dot views, import of course. And then finally, I'm just going to go product. And it just takes in product detail view. here and say, item. Okay, so let's go back into have this, stop, go check the code against GitHub, things, because we've already done this. But what some objects data. So like some database objects So you might already intuitively know, hey, I can do you know, something like p tag, description got a new product looks like I don't have a But of course, this is a good opportunity to use we'll just render out the description. Otherwise, something like description coming soon. And is not none, I mean, you could do all sorts of well. So those are Python conditions. Or sorry, actually equal to none. So we would want to say which it very well could be. And that's what it That's something that's great about watching these so now that we've got that we've actually rendered there is one thing that's really disadvantage, back into our view, what I have to do is I have that's in my objects, meaning every field here, I okay. But it adds an extra step like, meaning new data in my HTML, I also have to go to my view, to do instead is instead of all this, just get leave it in there for for reference for you guys. that now the context object is object, right? So detail here, we could then just do object ID, object description. Yes, I will promise that dot price, right. So now I can actually change my much about this detail view. Right? Oh, we got That's not the name. It is title. So object should didn't save our view. We didn't. Okay, cool. from the database, really cool. And of course, You remember call that when I say To create a as much about that app inside of that app or that you make things nice and simple. So you can use I mean, if you make a really, really good blog again, or even release it as a third party package up doing that, then that means that you're gonna this gives us a really good opportunity to talk left this out, because I wanted to show you how and then move the templates around. Now, inside of called templates. So inside of the sub app, you And you can do things inside of that, we can make folder is going to be the name of our app. So just we would do that same thing here. And in fact, case, I did product first. So I'm going to name it underscore detail dot html. So we've changed a and paste that entire template itself, bring that going to just call this one in app template illustrating the difference and understanding save this, and in our view, I'm going to change because I want to show you something, you can jump you something. So if I save, then what's gonna error saying template does not exist. So this is lot of times you put templates to the wrong place, that. This allows me to see what's going on. And me how it's actually loading my templates. So system loader. This right here, believe it or not, that main configuration settings, and where we that is. That's all that is. So if I had actually So if you were on the wrong system, you would see this. The next thing is you'll see a few other site packages, contract, admin templates, product that's built into Django. And then finally, it looks inside of our own app, inside of products, the actual name, the name that we change it to and refresh, everything looks good. But let's keep uncover how cool this actually is. So we're going inside of our project. Now do keep in mind we're just looking at it for illustration purposes Django, the just the single Django not if we retrace back what's going on, we see contrib here are other templates. Actually, let's look a whole lot different than what we have. There's because we're still doing a lot of basic stuff. an app with this much stuff. So that's not really thing. It's the same Django app with the admin doing. That's pretty cool. So you can actually but you don't need to. In fact, what you would in templates, or any of the app templates, you would then just put them in your file system same path. So let's go ahead and change the view products, right product detail. That's the end inap template. Now, if I wanted to override this I would come in to my template folder, that main or add the same path that I had before. So I'm it completely changed that refresh in here. And template, right. And that's how you go about doing on your own solo app, or you have a team, chances it inside of this itself. So I'm actually going want you to get confused about it. That's why it's of how all of that would work with your templates, critical to see it inside of map versus in any product app at this point is inside of this, bringing it into the Django project itself. But including the built in one like the Admin app, accessible to Django. I mean, it's still working, So that means that it's a very reusable app. And You see, we want to actually be able to allow they really wouldn't use the admin or the Python breaking down the basics of using Django model take a look. Now, inside of any given app, I'm call it forms.py. Do keep in mind that this works So we're going to go ahead and do from Django we're going to import our model, which in my make a new class in here. And I'm gonna call this it product form, or product create form. Those are So we'll just leave it in as product form. And have to do here is do class meta model equaling model fields that I want to have in here, like, let's just do title, and description and price. price. Okay, so we now have our model form, all I go into a view. And let's import this. So from dot new view specifically for this. And I'll just this product create view. I won't worry about the though, is I'll just say form equals to product request that post or none. That's a worry if you videos, or the next few videos, we are going to with me. So if form.is valid, that's another thing save. Okay. And I'll go ahead and add in this form called product create dot html. So that means I you should absolutely know how to do all of this, of course, our other template. And then in here, element. And I'm also going to do input type save and close that off. And then inside of that, method that turns the form that we're passing as paragraph tags. We'll take a look at that code in view, let's actually bring it into our URLs. So ahead and make a new path for it. I'll just call view. Okay. So again, let's make sure everything all that stuff. Let's go ahead and look in to rendered out here with the actual fields that this is awesome. And some price, right doesn't here, right? So I've got this stuff up here, actually specify the method that I'm using we'll go ahead and say form method equals to post. okay, these things we will absolutely discuss, I just wanted to show you how to do it first. lot more about this. That's the point. Okay, so I in the URL. And I'll just do a new product again. so I've got this not null constraint failed, because if we look at our model, take a look, and it's not blank. That's where this error which is part of the reason I actually left it what I'm gonna do is just add in a default that part doesn't matter. But we made some changes make migrations. Oops, we want to make sure we're is making migrations and Python managed up, py say new product, or new course, whatever, doesn't I go ahead and save that. And I can't tell if our admin. Let's just log in there, go into our have more products. So I've got new course here. few different items of data. So one way to solve really simple, we just go back into our view, and rerender the form. So then the context will change literally reef, submit that same data, we get this problem, but a security feature. So let's go ahead Save clears out the forum for us, we go into the Cool. So we now have a model forum. So the next break this down a lot more in depth, like how do understand that data, that's where we'll start. better understand how forms work in general, and Because this is certainly not the only way to doesn't feel like it's that easy of a way, I Now that we've created this product model form it's time to just take a few steps back and then move up the chain. So one of the first of the Django related stuff. So those two things input here. And that is to save it. So the first type equals to text. And the name is going to be I'm given the input itself is a name. So I can use actually makes a huge difference, which we'll see title. And we can also add in something called This is just kind of giving them some information, next thing is in the view itself, I'm going to go new one that only renders out empty context. And Bree, you know, backed up a lot, and redid this that view, let's go ahead and take a look at it with a Save button. If I type out ABC and hit Now, why is that happening? Well, it actually has method to get what happens, I refresh and say ABC, what you might have noticed is the URL changed, for a form. So if I just typed out a form like it will change the URL. This is actually very your website. But instead of doing a search, and, what we are going to do is keep that method of try ABC again. And we get this forbidden yet that Django has built in. Now, a big part of the we type out action, and we set it to, let's say, let's go ahead and bring that method of get back. in ABC, hit save, whoa, what happens, it takes you know, also including that data that I actually to a completely different URL. So what if I google.com, slash search, I'm actually going to also going to change the name here to Q. And then refresh in here, we've got your search, and I'll I actually performed a Google search right fresh produce came up a lot. That's awesome. I here is understanding that, hey, I just created for one feature. But the other part is, none of learned a couple things. Number one, the action Now, if we actually changed this method to post, let's just refresh in here. And now search request method post is inappropriate for this URL. I'll explain in just a second. But it's pretty change the method. Now by default, what happens is period here, you can see it as an empty string or URL is pretty nice. And then it's going to use this back to being title and your title. And then I get that forbidden call once again. So to so we save that and we refresh in here. Confirm again. And there we go. So it actually goes away. the heck is get in post Now get request is meaning URL on my page, like about contact, whatever you to save information in the back end, we use post, you post it right? This is very similar. And we that. Now, what's happening is actually not a both kinds of data in the same way, which we can has those two methods built in. So if we do print, we can actually see what's going on with either I see that I've got this query dictionary that's know, title equals to something, right? So I've I changed my URL, I can now see in here that I've is an actual dictionary that I could say get key value pair there. And that will print out this is a title, it's going to actually print that you can absolutely save this data, I don't method for saving data. That is why there's a to Django. It's certainly not unique to any web to when you have posts, you want to add in if I was going to have this title in my URL, then that changes it to being something like this. And me, it starts to bring up all sorts of security that, we use request post, right, so I'm gonna get of my form, I still have an add post. So I can get I see is all of that data coming through. Pretty of this is I can actually come in here and say And I'm using di get for the dictionary itself the title I would use. And then I'm actually not of the information in. But if I did product that right, so my new title. And then I had every actually saving that requested post data, which right. And getting rid of these requests methods we go. We've got our title being printed out. one more time, not refresh. ABC, we hit submit, none. Now why is it that I see none at the very default. So there's a lot of things that I still I just showed you is how you would write a raw how you would create the data from that, there's dot method equals equals to post, then you can run So that's asking for the method, whatever that a few of the other HTML methods. And then you when you refresh on that page, it won't say none only render out ABC. So it's not an error because a lot and just illustrate the point. I refresh hit save, I got my post request, and the actual you might want to look into more about HTML forms But this is really a bad method of saving data validating if this is good data at all. We're not we do that. And that's another topic that we need So I'm actually going to again, comment probably should have copied it first. I'm going to go ahead and delete all this, because we were starting from zero. Okay, so I've got my just go ahead and ignore this for now. But it is say class raw product form. And it takes in forms Django form. So with the standard Django form, I've just been using model but I can go further you know, we can say description. And we'll also say price, and forms dot decimal field. So these because they are, so we've got our decimal field, fields. So if you try to do text field, it's not just do char field. And honestly, if you wanted fields. And it should give you the field types in field types are in here. So you can absolutely not there. So these all render out a specific look into my view, and bring it into my new view, not to render it out, we create an instance of the instance of that form, as you may be familiar with we add that form into our context. Okay, so again, they're still going off that product creates. So and just do form.as P. So this renders it out a look there, let's just refresh that page, I can hey, we've got our form. We've got an action, token. We have some p tags in here. And that's not as HTML, but as Li, or is it ul from like as ul is HTML. So as HTML doesn't make sense, but form with some data. So I can add in whatever what just happened was, we submitted the data to but we didn't, we didn't do anything. Right. So actually getting any of that data. And that's why just as is and refresh in here, let's just refresh me these validation errors. These are called into Django right away. It's already validating was not. But it's asking, like, Why are validation right? So we see that this field is required, but do with what I initialize it with. So I have it kind of a long way at first, we'll say if request so again, that's built into the request. object equal to post, then that's going to be my form, words, I'll pass in that request, post data as I the form by default, so I need a get method for render it for the get method. So I can see what it is a different type of request, which means that of request. So we've got this is roughly requests default. But requests I get doesn't have anything, And now this will actually handle my form data. So it's now saying, please fill out this form. And says required there. So if I actually removed code in the elements, you don't have to do this, it just moves to the next one. So again, I all those requirements, just remove it, and I me. Right. So I actually showed you a way that raw HTML forms. And that's where Django security right. So I absolutely need all of those things And this is a way to actually validate it, this my form is valid, this will actually say, hey, you And I'll explain the data part in just a second. print out my form dot cleaned data. So this would form after it's been validated. Okay. And then Okay, so we've got those two different methods. if it's not valid, then it's going to print out necessarily need this because the form itself, as might be related to that form. And that's because features going on here, that we're just not quite a look at this, let's actually put in some valid I'll say ABC, you know, whatever. And whatever, I which will solve that problem in a minute. here's our clean data, it actually gives us that because we re submitted the form, and there were we could do that, you know, would potentially field? What if I go to inspect element, change it Right, so now I can actually type out text type of number. So that's other built in validation that let's actually save an object, let's actually we've got a product that objects that create, and right, we have a dictionary of this data. right? I named those fields on our form. That way, what you should do as well, because again, we're the long way we're understanding more as to what's this create here, well, what if I actually just in the clean data here, just like that. So I'm go back in here, and I'll say, new title, some And again, I get an error here, right? So what and that will turn this into arguments that we're no errors. Let's look into my back end. that exact same name. Cool. So I actually was that does some validation for me. Now there are there's definitely a lot more that we can do this description works. So we're going to dive Now, what we're going to do is things related for instance, you want a field to not be required, input is in there by default. So if you take a of things very simply, do you want this field to false? Right? Obviously, with the title, I want it So really, you don't have to write out whether false. Now, of course, you might be wondering, the descriptions on the documentation for the defaults are, like required, the default is true, your label. So if you want the label to not a very simple way to do it. And like something So initial equaling to, let's say, for instance, change those three initial arguments to any given we go. It actually shows us for that. So more, just going back and re rendering the page, this more things that we can do in here as well. Like and also the description itself is not rendered first. And we'll change this to being a text area equals to forms dot text area. And that's it, you can look up all the various widgets because there's definitely a lot in there. And you perhaps you want to have even bigger or larger then just put in some parentheses here, attributes overriding a lot of this, I'm just going to go more clearly understand what's going on here. like maybe you want to set a new class name too. You can also set the rows that you'd have hey, that is a big form there, right? Of course, more like 20 and have a bigger text area. And of of course, if I inspect this element here, I see classes that I added. And then I have an ID, what area. Refresh in here, need to make sure I put I now see them ID has changed. So any different you absolutely can. And that's a very easy way tag. So we wanted to say that we want to put a dot txt input. This is the default widget for the attributes equals to placeholder and whatever that and we refresh in here. What do you know your you might also want to have that inside of your So that is how you override some of the basic how the validation works just slightly, at least and I type out some of the other ones, the going to show up with the price and the title are tell me to fill out this fill field itself. And So if I did that little hacky thing where I got again, it gives me that same validation. So that's of what validation actually is. So this part is, product form at this point, the forms themselves form renders out the same sort of stuff. And here, That's it, you might remember, we just did the this is actually doing roughly that same out new types of validation for our forms. So Django has a lot of built in validation for its Django form, we actually can submit some data, matches that built in validation. So if we take going to use, I'm going to show you that it's right. So if I actually bring this title in that one. So that's actually how you override what to have. So now what hopefully you realized, and are actually identical, they have the same three view handles them. That's it. But we're going to going to go ahead and comment out all of this. And view that we were using. Okay. So what I have right, so that request post, and then render these if post data comes through, otherwise, we'll just on that right there. Okay, cool. So now that I look further with this is valid related stuff. So is coming through, I refresh in here. And I've got that I might need to save a few things here. Let's forms, and we go, and we refresh, our title goes that I have my placeholder there. So yes, I can as well. And once I do that, I have a more robust and almost how I want it to work. So so when you a bit. And yeah, there's absolutely shortcuts to lot of this stuff for us, which we're not going to too advanced. But instead what I'm gonna talk you know, to contain a certain word, let's say I word itself or that those initials itself, what underscore, then my field name. So whatever field this is what I want to do. Clean title, a specific item in there. So he's just say those are probably not necessary. But oftentimes just make sure you put RS and keyword ours. So cleaned data dot get title. Okay, so this is going the post Django form cleaning. So Django will going to trigger this title. In other words, that required will absolutely still be in there. ahead and say if title or rather if CFE in title, way? Right. So let's, let's just do the logic return that title, who whatever that default is, validation error. This is not a valid title. Okay, here, I'll say ABC, hit submit, hey, this is not a really simple. I mean, it's not that advanced or it in this format, what I would do instead the validation. And the default, returning that multiple validations, if I wanted to, if news So ABC space, we get to not invalid, well, let's that again. So as ABC, I hit save, I've got this it will raise that one. Now, assuming that I put gonna say not about the title. So it would have have. And of course, these aren't realistic ones for like an email. So let's say for instance, if I email and just second the actual field itself. if email ends with the edu, or if not ends with this is not a valid email, then we can return that little feature that you might end up using is you Notice on the model form, it's certainly not on my email field in there, I say abc@gmail.com, I validation is fairly simple. And then you can run, Now, I will say that doing validation is not only forums, it's a really good way to introduce do validation on the fields for a model as well. model form, or just a standard Django form. And that you're noticing is that if I commented this will render the exact same, all of the validation the one caveat is how the actual form would So to set initial data on a form, all we have to data, set that equal to something. So what are we the fields inside of the form. So looking at we would do title, description, price, any of so and of course is outside of the form itself, this is my awesome title, something like that. And say initial equals to that data. And again, we can refresh an air, what do you see, we've got that it's literally the same text, or it's I don't know how often you're going to do this do is do it in a product form or a model form. the data is not any different, it still looks is not a whole lot different than a Django form. and that is actually changing an object that's in grab that object first. So product objects that one. So we still have to look up dynamic ways of that yet. But to actually change one with this equal to whatever that lookup is. So in this case, look at that object. So I still have the initial refresh in here, I see that the price actually Usually when you're editing something in the initial data come through. Instead, what you'll the final step to make sure that you can edit and then you can just do form not save. Okay, so of product title, and I'll change the price to working, we'll just double check in the admin The very first one, because we were going off see that new price, it works. That's how you set Now we're going to change our content based off So first of all, we're gonna say object equals to setting the default. So we can see just exactly we are going to render out this basic template URL, this is what it looks like. But we want able to pass in an ID here. So if I put in one or of that. To do it, we just put in these brackets I'm going to use an integer, you can also use str, I'll reference in a moment. So integer, and then ID, you can also say my ID or pretty much anything that's sort of standard is using something like do slug colon slug. But we're going to use it for is it passes in a new argument to our view. So our that new argument of ID, which we declared the like my ID, you'd have to change the name on your just for illustration purposes. But what's going based off of that ID, because we're going to pass and I refresh in my page, I go to page one, I get save everything here. But this is an error that if what happens, right? So I'll save this, and I'll refresh in here, I now see that what do you know, the lookup based off of what's in the database. them, we see that it's also doing that same sort but the number is iterating. So again, if I I get this problem, this dynamic lookup or view, know what this keyword argument is. So we To handle a missing objects. From a dynamic called get object, or 404. So basically, it's all we need to do here is get object or four then the lookup parameters that we're using. And now if I go in here on product does not exist. No it'll just say page not found this is a valid that is putting it inside of a try block. HTTP import http 404. This will also raise four, four. So I'm going to go ahead and product dot objects. dot get ID equals to ID. block here to handle the exception, so except then we'll go ahead and raise the http 404. we get that four four error. And if I change it to actually, let's look at this real quick to see that I've been doing this so long. So if I save is an exception right there. That's an exception. this get object or four, four is the preferred all of these different things out, or even just deleting an object in the database is OBJ dot delete. And that will actually this will happen on a what's called a get request, we want to have it on a, well, let's say a there's something called a delete request, but that they actually want to delete this. Okay, so form in here that will just do the post request need to know is if they actually submit this form, they can go back a URL. And of course, I'm using than what we've seen before. Okay, so to do this, request dot method equals to post, then we'll this is a confirming, delete. That's it, it's just confirming that they want to. So if I go yes. And then if I actually refresh in here, I see here would be to sort of redirect them somewhere shortcut, and just do return redirect. And we'll we'll just say yes. And that will bring us that. And that brings back a couple more these things in the database. So we delete it, where I might list them out. But this, this is in Kalista objects, we first have to get a query set. set that objects that all that is a query set, And a typical context variable name for a query in our variable, I can actually render out that or for instance, and object list. That is can use the instance variable inside of that something like this. So instance, that ID. And so save that, save the view, save your URLs, now I see all of my data coming through the I don't want to have happen. But now I actually template. Let me get rid of that object list. here could be reused with any model. And that's can make these things reusable, and that's why we To create a link to the detail of any given And of course, it would actually work, it would dynamic URLs just fine. But the problem with this let's say for instance, you change them all that all of these things are changed, and it's is create something called a instance method will shortcut this for us. And it's called get to grab the URL inside of Django, so it's we'll just go ahead and use it in ours. So is that I'm using for the URLs, using the me to actually grab whatever that URL is based I can just make sure or know that everywhere they So we just do instance dot get absolute It's time to transition our get absolute URL right here. So if you look at a URL, we actually them yet, because it's only related to this based off of whatever this is named. So to come in here and call reverse. Here are some of you're familiar with keyword ours in the sense passing to my view. So I know that I need to pass Id and self.id. So self is referring to referring to the ID that's built into it. The so the name of the actual URL that's going to So that's the name just product detail. So we save course, all of that is now working. So that's dynamic. And what I mean dynamic is in my P, those links would actually update, right, it as well. And it does it across the entire method is used, which there are third party keep that in mind when it comes to making it. But that is definitely not a recommended take everything we've done so far, and just clean to your app, you'll see something like this, the the list view, the detail view change that, right, if you don't go back a few videos. Now what we do like this, this is related to that. But the we have this is not actually that reusable of an views right on my URLs. And number two, what keyword arguments somewhere else? Remember, our what happens is, it doesn't work as expected, you great. So what we want to do then is actually put that it's using, right to make that app reusable. So to make these URLs, I can actually import quick import, just like this, right. So this is And it's important path and then we just declare I can go ahead and cut all of this out and paste now those apps URL patterns. So back in my URLs, I here. In the comments, it's already in there. bring in the example that it gives what is for a app. And we just do it like that. And then put our main configuration, URL patterns are a lot that are coming through there. So save this and What's going on here? Well, it's actually showing products, it works. But that's not what we want. we haven't gotten rid of our original path that solve that problem, there definitely is still save this and refresh, I still have my products still bringing me to the wrong place. And this is inside of our apps URLs, to the name of our call it that. Now what I can do in my model is now my reverse is based off of the app itself, that refresh. And now it's actually going to take if you have to test this out and try it out on realize that having names on the URLs doesn't those things are unique. So this is a way to app name if you need to. And that would allow reverse method to change as well. As you can see, That's why this is the main reason is then when project, my URLs, all I have to do is declare what users know or that third party package know, hey, along with that namespace, I realized there's want to try this out multiple times, make views do all the things that we've done leading the next few videos are going to combine the So what I want to make sure that you can do go ahead and do them now if you can. And I'm going like. But again, make sure you do these steps. to the beginning and start from there. So without the absolute simplest class based view. And that and it's going to inherit from the list view. And called a query set. This is a requirement. So my entire list view, notice I didn't have to call I didn't have to do any of those things. So with I'm going to import it in here. And I'm for it something that we've seen before, I'm I'm just going to call as view. So it turns like we've seen in our product view page. Right? our class based view. And that's how you actually I'm going to go into my URLs and bring in my newly module inside of that app. Let's go ahead and take what do I see I see something that says template look for a specific template. And the way it looks the view name, or the generic view name. So in for blog slash model name, underscore list dot right. So let's let's actually Put this in future. So what we need to do is actually items in here. So there's two ways on how I can can say template name equals to what template that will allow me to use my very basic templates the generic one, I'm not going to go based off you can override those templates. So I refresh in The next most simple class based view is, well, the article list view, and just change it with bring it into my URLs come in here, I'm gonna preference. Okay, and then down in my URLs, I'm I'm going to change the keyword argument to pk. simple. So I'm gonna go ahead and go into that that hard to do, it's actually very easy to do. what would happen, I would get something like to back to ID, what would happen, I would get your own lookup if you want. But by default, or slug. So those correlate to different fields in Id actually equals to PK but it stands for primary to look up by slug, let's just change the URL to saying that it can't resolve this into our field. ID and title. So let's go ahead and go back to is the def get object method. This is built in to list views, it doesn't make sense, right? Because wants a list a query set. So let's go ahead and So get object or 404. So all we're going to do model name itself and then we want the ID. Well, how do I get this keyword argument from the URL, right? The view for that detail view, it's passed views, it doesn't work that way. So instead, how get ID. So this is the actual keyword arguments can see what they are by printing them out. But keyword argument is to our URL. And then we can back, and it works just fine. So it's very similar different. Now I understand that this probably main thing here to understand is class based views override its primary function is just get object view is to render a template from a specific and refreshed, it would still work. I actually does is it limits the choices available for that at that. If I change this to being like, filter understand what that is, but if the ID is greater key. Again, that's the default, we're overriding it gives me a page not found. That's because query set, it does not exist in there. So that's hopes that hopefully, this makes you want to I'm going to go ahead and leave that commented as an ID, because this is almost identical to To ever create or update view, we want to make we're gonna go ahead and import into my views. I'm going to go ahead and create my view. So I'm Can it be the same? Well, it can be definitely view. And there we go. And I'm going to call this Article, create HTML. And much like product, So we got our view here. Let's go ahead and bring open up that path. And let's go into blog create. using model for mixing without the fields we see that we actually didn't bring in our model Article model form, save that refresh, there's save that data, it would work by default. And inside of my model form, again, those validations, I wanted to validate the title, I would say clean built in ones as well. So this view does that for we also have a method called form valid, takes this is actually the form valid data. So I can I'll just return super the superclass the built this will allow me to see what data is actually this is my second post, I hit save, I do get this if I look at my terminal, before that error, I can is this error, get absolute URL, that is a method model. So if we look back in our list, those items item, except didn't go anywhere. So if we create And well, I want it to be based off of reverse, would just do something along these lines here. I how to do this already. Okay, and then the app article detail. Okay? So the reverse function is and create another post and say, new one, this is to that URL. So that is a critical method for the view. It's actually also part of the update view change where I want that to go by just overriding URL and you can return some path. That is another really well for us, because chances are good after to look at it. So the the actual next part of this I'm going to put it underneath my detail view, update view. And much like our detail view, I'm can just use that get object method again. And I don't actually have to change the template, change like that. So if I wanted to go update it, but update. And we might need to make sure and this is my third post, I had save, it brings are almost identical. The only difference is it thing it's trying to change. Still using the same remove an object, we just use the Delete view. And delete, view, and delete view. And then called delete. And then again, we still want that is identical to the one that we created a product and post here. So we save that we save our views view uncomment this out? Same stuff. So let's post two and delete it. Do you want to delete URL here. And in this case, it wouldn't use the no longer exists. As soon as I say yes, it deletes because that object is gone. So what we need to string, so like success URL to something like to bring in my reverse call. So from Django dot right under here. And then I'll just go ahead and going to return reverse blog list view, or, you article list. Good thing I looked. So change it Right there. Cool. So now this is our new delete it doesn't matter just like the detail view, that, and now I go to delete. Do I want to delete to all of my posts. Very simple. And something to have that get absolute URL method, or rather something and say, yes, that error actually just something interesting to know. But that's Here is a fairly standard function based a template that we already have. In granted, and I added it into my settings, as well as my I have this function based view. And if I look a template, not a huge thing going on here. we're going to inherit from a class called view. class equals to view and all I'm going to do is in this case, I'm gonna call it course view. And So to have the exact same function work, I can I'm now turning it over here. But if you remember, really matter. But inside of a class based view, HTTP method that it's trying to handle. In other But like, if you were submitting a forum like that's actually how you'd handle a form. We'll course view, we'll import this into our URLs, we our function based view here, save that and we have to actually add in self here as well. we say something like a new OBJ, or a new object that object is an instance of that class. So to reference self inside of there. And with that, we like this, that means you did that same error I now it's actually rendering out that template you can print out the various methods if you'd are identical with the exception of the fact that this is saying something like template name equals say, self dot template name. And that renders pretty cool. The other aspect of this is literally contact dot html, save that refresh in here, what that's one of the huge advantages of using class So we now have this model in here, and I'm going detail view, how to actually handle that. Now, our URL. So inside of your urls.pi, inside of the not any different, they're nothing new. So I want to work. So to do this, I'm going to pass in ID ID is no longer required. When you do it with just that it's done means that we have a default if you like. But basically that means that these actually render just fine. Now, let's actually my standard template is I'm going to do courses with the detail view generic view. So I'm gonna new folder and their courses, new folder, or HTML. And I'm going to go ahead and just copy just use the title because that's the only field I class based view running twice, but two different is well, going off of the default of what I set let's go ahead and run it out. Instead of courses, up. If I go to one, or some sort of detail, an empty template is because I haven't passed any context, and we'll just do from dot models, import get object, or 404. And I'll just say, object, ID equals to ID. Okay? And since I have a default the past argument is not none, then I'll go ahead my context up here. So then I can just augmented Or rather, we want to pass context here. So we that is the name of my first object, which I could I'm doing everything correctly. Save that. And Let's go ahead and create the raw ListView. Very we can add in a template name here, much like list. And then I'm going to do something new. And objects that all and then I'll just go ahead and And then we're just going to go ahead and return template name, and then my context, I'll just put to self dot crueset. For better illustration just like that. Okay, pretty cool. So I bring this you know, get rid of this other one, and leave I'll go ahead and say Course List dot html. And there. And I'll not worry about a link. For now and go back into our courses, just that one list. very easy. But I want to go one step further to that is defining the get query set method it's going to return self dot query set. And it will just will call self dot get instead. So if I save that refresh in here, it's from this and said class, my list view from that here. And I said query set, and I put it equal to this will actually give me a list of items, even bring this into my URLs, and use that one make sure I've saved everything. Okay, I refresh benefit of using class based views is this going to end up doing that. But I wanted to When you create something, you want to accept method. So I'm going to go ahead and grab the course, create view. And we have our get method in then we want to have our POST method, because when back end. So we want to make sure that we have ID argument passed through here. We're not using going to be course, create, now want to bring in of it is course model form. And I want to actually get method. We'll say form equals to the course that. And then inside of my context, I'll have the has that need. Okay, so we save this, let's bring really simple stuff so far. Let's go ahead and if I type some stuff out and hit save, it doesn't does happen, because our view actually accepts So what we have to do is come in here and grab the same context, we bring it in here, just like that. form data coming through with whatever the context hit save, seems like things have happened, have anything in there. Because of course, I still then I would just do form dot save. And that would Now, I want to test this method to make sure that do that, I use something called field validation. clean, underscore, whatever the field name is. So could be any of the model fields or any other form that. So we're going to go ahead and come in here cleaned data, dot get, and then the field name, of to something like ABC, then we'll just should And this is not a valid title. Okay, so this is on the model, it only does it on the form. That's obviously, we're not going to touch it just yet. that I didn't change anything in my view, let's I just type out ABC, hit save, I see that it says what our POST method is doing is it's actually happen. Now there is one other thing that once it's valid, you might actually want to I hit save, it stays in there, although I might or whatever it is that I'm building, right. its original state. So to do that, all I need or update view combines the things that we just update view here. And we have two methods that are basically all they're doing right now is a whole lot different than the Create view as to actually adjust is this get object method. you would typically do for your detail view, you so then you can use it in your various methods. that is actually how we're going to call just pretty much grab the same data that I've done or four or four related stuff, right here, right, the ID, we just do self keyword arcs dot get ID, coming through on our URL, like we see here, and and this will actually grabbed that object for us. none, and this will grab that object. So now we will work on both our get method as well as our And if we look at our template, it's a combination now, what we'll do then is actually update this is pass it in to my form as instance. So instance in addition to the request dot post. So this is this is initializing that looking to see if everything for me. And then finally, my template changed. So let's go back in here. And let's take a context error. So we want to make sure that we That should actually not be their little mistake. a Hello World, I'll just change it to being Hello, to the detail view, it's still Hello. If I go and hit save, it does validation again. Now, you it is and that's because of how we had to do it redundant code. But really, at this point, it's based view, the built in classes views that we've so much cleaner and simple. But the idea here is Continuing off of the idea of the update view, we except we don't need to bring in the we would do is actually have a redirect. POST method and then redirect it somewhere my URLs, I update that. And then in sight of my I just rendered out this raw form, as we've seen, the idea here is that we render out this sort saying, Yeah, we confirm, once you do that item. So let's go back in and take a look three, delete, and there we go. So we do want yes, it deletes it redirects. Really, really sense, or part of the reason that classic views to extend a class based view with some new code. and we'll call this course object mixin. And is just a Python object. And then we're going to or model class or just simply model. And we'll called get object. And then we'll return something we will return this right here. So we've we'll just do self dot model. And of course, the leave in that, that default. So this is now going ahead and just say URL lookup, or, you know, to ID. So now down here, I can just change this to it. This will help me reduce redundancy inside and just bring it into my delete. And quite because it actually works in here, it's this right want to make sure that you put the MCs in first, last. And then we can do the same thing for or Well actually, we don't need it and create but detail. Right, so the object down here, instead object equals to self dot get object. Because right? So it's going to raise that error, if it's up by that field. Unfortunately, the lookup is here. Right. So this this makes things a little So I'm gonna leave it back in as ID. But the be able to change what the lookup would be. But but that's how this actually works. makes sense to all that, let's go ahead and take a look inside of update, still working, delete, still working. we have by creating our own mixin. And of course, you make it more complex, then our class