How many programming languages should you know or learn as a developer? How many do I know? That's an interesting question I recently got or it's also a thought I recently had that I thought about, well, what would I answer to that question or to anyone who asks me how many programming languages you should learn and know as a developer? And of course, you could reply, now with AI you don't need to learn any, but that would be pretty wrong. Whilst all that AI development is exciting, in my opinion, AI is nowhere near to taking our jobs as developers. But I did create separate episodes and videos about that. That's not what this episode here is about. Instead, let's focus on that main question. How many programming languages should you learn and know? And of course, as always, the answer isn't trivial because it starts with the definition of knowing a programming language. When do you know a programming language? If you're able to write a Hello World program, well, then you can learn a lot of languages. But if we instead think about really understanding a language, being able to build advanced programs with that language, being able to follow best patterns and knowing about best patterns, if we think about it like this, then you probably don't know too many programming languages or at least way less languages than with that other definition. And if I think about myself nowadays, I would say I know JavaScript very well, TypeScript, but that's of course kind of related. I know Python quite well. I know Go very well. I'd say I do have decent Rust knowledge at this point, I'd argue. And I also, of course, know things like HTML, CSS, SQL. I wouldn't consider myself an expert in SQL, for example, but I do have a very decent understanding of it. And maybe some other languages as well, which are on a similar in-between level. For example, I started my career as a developer, I started learning to code with C. Because why not? It's the perfect first language, right? Yeah, maybe not, but it was my first language. I started with C when I was 12 or 13 years old. It was super overwhelming, but also a lot of fun. And I then also had a look at C++. I spent a lot of time learning and working with Java and C Sharp back then. I also did learn Visual Basic for applications, or how is it called, that thing which you can use in Microsoft Excel, that horrible language you can use there for scripting tasks. I had to use that quite a lot in a job I had in the past, so I knew it pretty well back then. I knew and still know PHP, though I haven't worked with it for quite a few years now, but I did learn that. So I do know lots of languages, but of course there are many languages in that list which I haven't actively used in a long time period, or at least for a couple of years. And therefore, I'm absolutely no expert on those languages, and if I know them depends on how you define knowing a language. But of course, that's also just me. What does that mean for you? How many languages would I recommend that you learn if you are becoming a developer? Or how many languages should you know as an experienced developer? And here my main recommendation really would be that you should not think of becoming or being a developer as an achievement thing. You don't unlock achievement. The goal is not to know 10 different languages. You can be an amazing developer with just one language which you know really well, where you're a super experienced expert. So the goal is not to know as many as possible, but of course the truth is that as you become better as a developer, learning other languages also becomes easier. Because whilst of course all these languages have their different approaches and features and philosophies and syntax differences, there of course are a couple of core features like variables, functions, control flow statements that are typically the same. And then there are some, let's call it more advanced features, like pointers or asynchronous tasks or dealing with asynchronous tasks, which can differ quite a bit, or which might not be supported at all in certain languages, or which might be harder to do in certain languages, but which also do have some common ground at least in some of these languages. So as you get more experienced, learning more languages also gets easier. Now becoming an expert is still of course hard because that simply requires working with that language. You can't just learn it in two weeks and then forget about it and never use it. You then know it to some extent, but you don't really know it. You wouldn't really be able to build anything but non-trivial applications with that language. And I'd argue then you can't really call yourself a C++ developer for example. Though of course if you've learned a language in the past and you then haven't used it for a couple of years or months, getting back into it is of course easier than if you would learn it all from scratch again. That's definitely a good point. But therefore in the end the goal is not to learn as many as possible. You're not a better developer just because you know 10 languages. Chances are, as mentioned, that you don't know them very well anyways. But even if you would know them well, you're not a better developer because you know that many languages. The goal is to learn the languages that you need for your projects, for your job. And the ultimate goal is to become good with those languages or with that one language which it maybe is. The ultimate goal is that you're able to solve complex problems with a given language that you know maybe about niche features or specific patterns or practices which you don't need to use a lot but which are exactly the right thing to use or do in that specific situation you're currently in. If you're at that point then you're really good at a certain language I'd argue. It's that goal that you should have as a developer at least. That's the goal I have though I will admit that I also simply love learning new things. So indeed I do learn a lot of languages not with the goal to become an expert in all those languages. I know that this won't be possible unless I would focus down on just a few of them but I do love learning new languages. I love seeing how they tackle different problems differently, how maybe certain problems can be solved more elegantly or with better performance than with another language. I really like that and I like the process of learning and I like the process of building lots of projects, demo projects, real projects with different languages even though it's not necessarily the most efficient approach all the time because I do spend a lot of time learning different languages and I also spend some time revising and improving code because when I'm learning a new language I'm obviously no expert on it yet and therefore the code I write will not be optimal yet. But that's just my approach. That's what I like and what I thankfully can do. That of course doesn't have to work for you.