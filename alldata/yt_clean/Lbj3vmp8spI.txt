This is, I think, going to be one of the this channel. Because if you understand this and you really get it, and you apply it to your be virtually impossible for you to write bad code But there's actually more. So in this video, I'm the most important one, the one that you also gone ahead and created a list of 10 more just maybe a little bit smaller, in a document document will have text and code examples of 10 one that I'm showing in this video, that are again, it's completely free. And the way that Import React, which is my free newsletter, you're join the newsletter, you're going to receive the free in your inbox. It's honestly a no brainer. I highly recommend it. Watch this video, read the begin. Now, unfortunately, this design pattern a name, because it's actually a lot of smaller I like to call and really think about the correct the proper way to create your components, the way them together, the proper way to create custom put them in the project. And generally how to set React project to be as efficient as possible and in React. So that's what you're going to learn in take some code, an example of code like we have that doesn't follow the best practices that is of all, understand why this is considered bad we factor it to see a different approach of doing just in a way that's better follows more the to understand as a developer, because that really an example of something that let me just maybe better. This is an example of some typical React work on many times, I've opened up projects that I point, only to see components that look like this, as I like to call it, right, all of these things related to different things that don't have any we have the name, email is visible, item selected lot of things to put in this one component, again, here, we have some use effects that do some things the local storage as well as sets the document of functions over here that do different things which really is not needed, because we already increment function, especially if we're not using code, right, all of this code right here, and then things. And it's honestly confusing, if I was to as a junior developer, I would feel intimidated, I what to follow as the best practice, because this like I said before, this is the state of a lot of the projects that you're statistically going to different projects, different companies, you will people that didn't fundamentally understand react used. And they just wrote code that is functional, follow any best practices or design patterns. piece by piece, because we actually need to go to show you exactly how messy this component is. better and learn a thing or two about design applications along the way. So the first thing up this wall of state right here, right, all of especially the app component, which really what is is the main entry point of the application. So it basically take all of the different pieces of the code base and different folders, and put them it's actually holding the state being responsible the state and all of the code required to actually all of this, right. So that's violating the pattern in react, which is every single component as soon as it needs to do something else, it function and then uses that function instead. we could split up in a separate component, maybe and then all of these is visible items and select which loosely can be transcribed to some sort of So we can also put that in a separate place. And which again, would be its own separate thing, nothing to do with the user. So we can already see of the state, which we can split up, put into let's start with that and see where that gets us. going to take this put it in a separate component. variable inside of this component and potentially also have some functions over here, if I saw these only update the count, these should also go that. Let's come here to our sidebar. Let's come hooks. And in here, I'm going to call this hook, then we're going to open the hook. And there we we're just going to put it over here. Yes, there And that is going to take for now, at least until we're going to come here to the app, we're going to put it in here, right, and then we're going to to take the functions over here. Aha, we also have local storage. So we'll also have to do that. So just see if my editor will actually let me take the component and import use effect over here, to see we also have this increment and decrement in this hook as well, because they also belong we have all of the functionality removed, and we except this JSX, which we'll also actually going our hook, this is sufficient. And I think we got right. And this is also another design pattern in you have functionality that is reused by multiple you put it in a custom hook, you create a custom then you put all of the code in here that is then any component or any other custom hook can This way, you only write it once you define you share it across the entire application. Now bit of things that we can do here to even improve we just took the code that already existed, and the code was perfect. And that could not be here. And specifically, with this use effect over better solution for this. So essentially, this use mounts, or whenever this custom hook actually local storage for this actual count over here, if it is going to set it in the state over here. Now it works, it will achieve what we want our goal actually, by the nature of use effect will run and will actually cause a rerender of the again, once it got it from the local storage, that the local storage. And the first render is going doesn't include the value from local storage. So it's always a good idea to remove use effects default this you state over here to actually check effect. So for that, I'm going to come here at call it function, initialize count like this. empty for now. And then inside of the body of the put it inside of here. And then I'm just going because again, we might not have it in the local going to convert it here to a number saved count right? So this is the same functionality as this for the count. And if we have a count, we're because it is going to be a string in local local storage, if we have it returns a number of our initialized count function. And then we can and this might be a surprise to you, but maybe over here to actually call the function and give didn't do this, and first of all, this works, this this function is actually going to get run every even if the value is only going to ever be However, if you give this here as a reference, when this component or custom hook mounts, get the initial value, and then never call that function because if you do it this way, the function gets time does this result actually get used, so every way, it's only going to get called once initially go. So this you can do in React, and if you didn't we've already improved our custom hook over here, function only has one responsibility, and we're here to get the initial value of the count. That's this use effect over here, I mean, we just want local storage every time that it changes. because we need to have a use effect that listens it's just going to get synced automatically with this as is this is perfectly fine. But then which we actually need to return along with the that. Let's return. And here we're going to do we're just going to make one little optimization directly, I'm going to convert these to a const. and this is then going to be an arrow function So we're going to do use callback like this, and should work, and then pass it here, the dependency are good to go. And we're going to do exactly the this decrement. And here, set count count minus we're going to be using these functions inside of functions are going to get used. And if they have a use memo callback, we're going to have to wrap to prevent use effect actually, of running functions are not stable references. So what we do just wrap them in use callback, and you prevent them to have to wrap in their own use callback, do. Whenever you have a function that you're wrap it yourself and use callback because they do And with this, we now have our use count custom component. So let's go here to the app component. just do something like const count, increment, to use count like this. And now we have access to decrement that our JSX is actually using over custom functionality in a custom book that we can do more, we can also take this piece of code in a separate component and use that component JSX actually doing, it's just rendering the actual rendering the buttons to increment and decrement multiple pages in multiple components. So it would inside of a custom component, and then use the use make things reusable. And then if you ever need to you have it reusable in a separate component. we can call this one components. And we can do in just do our JSFC, like this to create a component return exactly the same code over here, this diff, let me cut it correctly. There we go. Here, we're going to do here. And now obviously, we need to count as well, which we can easily get because take this hook over here, that we just created, now we have all of the functionality related to custom component with this JSX using a custom we're following best practices here, because it handles the functionality of what is to be a it delegates the actual implementation of the to a custom hook, which is a good thing. And then So if I want this counter, I can just use the own counter in a separate component, I can also this is flexible. And this is reusable. And in your application should look like. So now with no longer have a count over here. And here inside we can just add it here by saying counter like and we're going to import from components slash now this entire functionality of a counter is only better. Good, let's keep going. So we're going going to continue breaking this apart and putting for us to do is all of this state over here that to the user, we can first start by just putting seeing if there are other things that we can do to come here inside of components, make a new file we're just going to wait a bit, my computer's our GSFC, we're going to create user form. And in that we had. So let's take all of this code. And we're going to have to import your state, that's react, then we're going to see what errors we need to take this, we'll need to take selected functions related to name change, and then toggle well, right. So already, you can see that this form. But really, we're not sure, right? Like what it kind of looks like. But it could actually And that's a sign that something should be done cut all of this here. And we're going to put them we had inside of this and then import use effect functions, which aren't used because we need to over here. So let's take the ref. And let's also the ref over here, I always like to make a visual my ref. So always make a little gap over here, a we go, we're just missing everything in the return believe it's all of this over here. Yeah, all of is related to dark mode, we can just take all of like this. And then let's just fix the formatting we need to put all of this in a form, because this another sign of something that we can improve. the same code, the same functionality, just in didn't really improve anything, we did put this in responsibility principle, there is a separation of the app component, we can just come here. And here form, import this from component slash user form. much smaller it is. If I also just clean up here, this use effect and this use ref, look at how lines of code, including the actual imports, we what you want to do. Whenever you see a big what is this component doing? And what should it things up into multiple things and put them right, teach in this video. Because you take a component it into multiple parts, and then you turn it understand, super easy to work on. And if you want If you want to access the form, you go to this And it's very efficient. So then going back to our can improve. Well, the first thing that I'm seeing the document title to hello name as this form is but I generally don't think that we need this. not put this as part of the user form, because that are outside of its scope. And generally, So because this is such a feature that really the document title to the user's name as they right? We're just going to remove it. And this is working in code that somebody else wrote, you yourself, is this code pertinent? Is it needed? Or we're removing an extra use effect, we're removing render cycle in the component. And that's always a use effect over here, which simply if there's right, we don't need to do this, we don't need earlier stage of development, when they wanted maybe this just got forgotten and found its way developers to spot these things and say, hey, and make this component a little bit simpler. use effect in this component, which means that we And we're that much better for it. And then let's functions here handle name change handle email and set the email to eat our target that value. this is creating a function for nothing, I would directly inside of the JSX and be done with it. to retype this event over here, because the type using it. And so I'm going to come here and just handle name change. And I'm going to come here in access the event, which is again, the type And we're going to pass your what happened E dot target dot value. Again, same functionality little bit simpler because we don't have to define This is also a smaller design pattern that you do the same for the email, I can access the E over E dot target dot value like this. Now, ideally, would use something like React hook form to have we're not going to bother, I'm going to try to ideally, you would use something like React hook And then we have all of this functionality related state of an array, right of strings, then we items. As you can see over here, if is visible, that's all of the items where we're looping all I'm not saying this is good code, this is just with. And oftentimes, you don't get to choose have to choose the way the only thing you get to it and making it better. So that's what we're because I don't want to take too many risks, want to put everything that is related to items just again, to have a separation of concerns to and see if there's anything else that we can do to come here at the bottom of this component. And call it function, user form items. And here, we're inside of this file, because this component is not used inside of this file. So instead of creating a then always navigate between two different files, you can have multiple components in the same file. perfectly valid to use in React applications. And going to pass all of this state over here. Right. So we have the button as well, right. So we're just everything that is related to items, cut it, also have to return it, I believe in a div, what return it as a fragment just to make sure that we then this should be fine, I believe I missed a div div. And this should be let's just put a div here we should be fine. And then we just need to get get the ref. So first, let's start with the ref, we're going to take this ref, we're going to put have access to the ref. So that's good. Then we we need a state for is visible. Now because this we have the button here to actually, where is it the on click to toggle the visibility on click, component. So let's take the state over here. And the user form items component, then this toggle this because all that this really does is it just first of all, we don't need to do this anymore, it like this. And we can just do set is visible, again, we don't have to create another function. this, then we also need the function to add here because we have the items over here. So let's put it over here inside of this component. And I am just putting things in separate places just what's going on. And then naturally, things are improve this. And then what we need is we actually which again, all seem to belong to this component, belong to this component. So we should also put these because these are no longer used. And let's make this more complicated on ourselves. And here properly to put state with state because that's three state variables over here is visible items this relates to the same thing, right? This right? So that's a good thing. Then we have then the function to add the item. And then the we can just inline this because instead of select should work, set selected item. And again, we we can just remove this function. And now this is concise, and again, only relates to the items on and we can just do user items form user form items this made this user form component smaller, from how many we want to five from two, which is form over here. And then everything else related in the same file because it doesn't need to be this one's also manageable three pieces of state, actually make this work. Now, obviously, we can components for like all of the items over here, not going to do it because I feel that you've the actual point of this most important design split them up, you break them apart, and then you is efficient, and that is scalable. And actually, missing, we have a form, but we have actually no that. So we can do something like async function, some data, this would take the E here. And that's there we go, import this from react. And here something with data, right, send it to a back end and then we can do handle, submit. And there we form, which this component didn't have before, component, it's super small, it is being used here starting to look a little bit more clear, a little intimidating, which is good, we're almost done. is all that we have left is this is dark mode it, which again, is just used here. So what we can all of this functionality inside and be done with here inside of components, we're going to create mode toggle dot TSX, this is going to create a is going to be dark mode toggle like this, we're we're going to put this here inside of dark mode here, then we have our function, then we're going and we're going to return it over here as we don't need to toggle dark mode, we don't we can just do let's kill it first, we can just actually.And now we have the same functionality can just come here to our app component and we can And now we have almost the same functionality, we 15 lines of code imports included, and actually 14 And that's how most of your components should be. want to drill this into you. This is how most component that's much larger, that's a code smell. and improved to make this better. Now back to this is dark mode, because now it's only inside of this code, because this is dark mode property is only shared across the application, you wouldn't want context that holds the application appearance, dark mode or not. And then you would access that other component using a custom hook that accesses because if I did, it would just make this I even have a tutorial video on use context that I wouldn't do it exactly like this, I would create more sense for something like dark mode. But yeah, here, right? So actually, let's just fix this one. just pretend that it's not actually useful in our is the final state of our app component, three the app component, and then it just renders I said in the beginning of this video, you take a what should this app component actually do? It entire app, your entire react application it should take all of the different pieces of across the application across different folders, it shouldn't implement any of them, right. And component is super small, it uses everything is delegated to each of these components. And super simple, super reusable, they all only do principle. And we have the same here for the for the user form, we've refactored this, we've there's more things we could do, we will probably over here. Maybe we also want to create a custom for you to do, you can actually get access to this it. But the concept remains the same, everything put it in a separate function component, and just what we've done here. And I think honestly, because we have a custom hook that we created, that we created. And this is super flexible, art at this point. So really, again, going back if there's one thing that you get from my videos this design pattern, how to properly structure your components, your functions, your custom understand this, and you really get this, I will in your applications, because this makes it very to make messy code. And you're just going to and understand. And that's what you want. That's that's what the whole concept of this video is. you're going to have access to the code for this, description. And remember, you also have access important as this one, just in an actual document, it would have been like a five hour long video I went through the painstaking effort and time to completely for free. The only thing that you have which is completely free. As soon as you sign up, get the document in your inbox. And you can those to your react projects. And like I said, in never look back and never write bad react code. see more videos just like this one, make sure also click here to subscribe. Or you can click YouTube seems to think that you're really going been Darius Cosden. Thank you so much for watching