[MUSIC PLAYING] SPEAKER 1: All right. This is CS50, and this is week 7 Today, we will introduce yet is not to introduce another but to really begin to emphasize that programming, engineering different tools for different jobs. And if you were to try to use C to it would actually be seen how much more pleasant it is to But today, quite quickly, Python's actually not the most pleasant especially when it comes And, in fact, as we transition to the world of web programming, and if mobile programming, you'll in your tool kit than In fact, today we'll introduce a or SQL. Next week, we'll explore markup A bit of JavaScript, as well. And then we'll synthesize all of this as some of you might, for But, before we do that, let's actually start So if you could visit this URL Or, if easier, here's a You can point your camera and it's going to pull up a just going to ask you so that we can collect and actually play around with So if you go to that URL there, And if you haven't been able to Just kind of look over the But you, or they, will see a So among the questions will be, On the list, only thus far, and below that you'll see about your favorite problem Each of them is radio you'll be able to select one And, ultimately, what's that if you've never used Google all of that data is actually going to but also, if you so choose, Which is an example, of course, of a to Apple Numbers on Macs or Microsoft And Google Sheets is all of that data in rows and columns. And so, since Google made they integrated one with the other. So, in fact, if I, on my laptop this up-- let me flip over. Here's the live spreadsheet. And we'll see that the very liked Python, as did a lot But, Hello, World was your There's a couple of If we scroll down, there's one hold in this case here. And if we scroll down further, it looks A few more C's, and so on and so forth. So suppose that we wanted to, Now, any of you who have used Excel, know that it comes with built and we can do all of that, but suppose Or, suppose that this data was but via your own web application, and it's just ending up in Well, wouldn't it be nice if we could with code. And, in fact, you can. And the simplest way to store a bunch in fact, but just a literal text or, maybe more commonly, .csv. In fact, what we'd call is literally just code for a text But your data typically has delimiters And, in fact, the most is to use, indeed, comma-separated And what that means is that in simple you sort of mimic the by using newline characters, to represent row after row after row. That's pretty straightforward. To just move the cursor And because text files aren't graphical, that you can put between what you literally just use a comma, to separate one value from another. So, in fact, let me Even if you've never done this before, and also Excel and Numbers, not in some proprietary Apple but in a globally portable So let me go up to file. I will go to download. And notice, I can export this but the one I care about for On my Mac, that's going to put And what I'm going to go ahead is let me go ahead it So, in short, I've downloaded this file. Google gave it a long default file name. I've renamed it to favorites.csv. Let me go ahead and actually And this now is the exact same data. If you're still submitting the form, So we're not going to see more because I've literally But, indeed, if I scroll see that it's got some Or, technically, 398 is what we'd call a header what each of these columns means. Now notice that even though the put all of this data in proper you can still see the rows because and you can kind of see the here, the comma here, the comma here. And then, also, the comma the comma here, and so forth. Now, a quick subtlety. Hello, World is a two-word problem What's to stop me from confusing the that Google, apparently, Yeah. So, automatically, you We did not type it into the form. But Google is smart enough, as they export CSVs to somehow escape or characters that And, in this case, a is just to quote any strings so that any program you're writing that So the only thing that came is just this timestamp of day in our own local timezone. That was added automatically. So we have three, and So with that said, we timestamp, language, and problem. The latter two of which Let's actually write some Let's figure out what the most So I'll close the CSV file. Let me go ahead and use what seems to and write a file called And I'm going to use Python analyze it, crunch some numbers, and So the easiest way to manipulate CSV is not to just open the file yourself, or anything like that can literally just import CSV, gives you CSV related functionality. In Python, there's a bunch One way to open a file You can say file equals You can specify the name of the file and you can explicitly say you quote unquote, &quot;r,&quot; just like fopen. Strictly speaking, in So if you omit the second But for parity with fopen, Then you can, maybe, do something you can close the file like this. So in Python, there really is a But in Python the functions are But a more common way, a more the way people tend to do to use a keyword that didn't exist And you say, with open this file and then indent it inside of that. Now you can do whatever And the implication of using obvious from the keyword itself, is that for you later. So this is just a minor so that you don't have to Unless something goes close automatically as soon as So how do I go about reading a CSV? The simplest way is to actually maybe, reader. Like if I want to read the CSV, Set that equal to the return value of module called reader, in lowercase, So the first line there on and gives me access Line four now actually comes with Python to just go read it so that it can hand me, line Now the first piece of data What's the very first row? So it was that header row with I actually want to skip that That's what we might call metadata So one way to deal with this, I And next, even though the it just means, no, no, give me the of the first by default. And now inside of this with block, For each row in that reader, let's Let's just print out row bracket one. So row bracket one. So what's going on here? Well, the CSV reader in Python of this loop, one row after another. Each of those rows, though, Three. The timestamp, the And just like in C, our lists So zero, one, two. So if I'm printing out row bracket one, So what's this going Each of the languages So that's all. This isn't doing any I'm just going through print out some data of interest. So let me run this. Python of favorites.py, enter. And it happens super fast. But if I scroll back in my terminal So this is to say, once you once you know the pretty simple in Python to just and start looking at the data therein. But it turns out that it's a little It turns out there's better me make this clear as follows. I don't strictly need a variable, a variable called favorite, set and then print out that favorite value. This is not doing anything new. It's just declaring an but I wanted to highlight the fact bracket one is the problem-- or, is the language I care about. Is language, is language. But suppose one of you, or I, and like anyone might you might start moving things around. And you might swap some of You might delete one of the In short, spreadsheets in that it's pretty easy in the to change them around. And so my code in Python, because I'm just hoping that row that I care about. So what would be marginally better? Well, let's actually use And more common, arguably, in Python, but, instead, what we would I'm going to change this to and that's it for the On line five, I'm going to because I don't want What DictReader does, is it automatically analyzes figures out what are all and, thereafter, when you iterate over now is-- it's no longer a list of one, bracket two. Each row that you get back is now, wonderfully, a dictionary are from the header field. Timestamp, language, problem. The values of which are whatever So how do I change the code? I no longer have these numeric indices it's a dictionary. So if I literally want the I can use row bracket, quote unquote, not as a list anymore. Now this is, again, more robust because code is still going to work, rename the columns at the very top. So that's still one All right. Well, beyond that, what Well, just to be clear, I don't, So no need to highlight this again. So let me just simplify and get rid of this variable, the language in that row. As a quick check, let me and it seems to still work, even We're not going to check looks like it printed out all Well, what more can we actually do? Well, let's actually now and figure out how many people C, how many people like Python. Let's start to analyze this. So maybe the most pedantic would be to just create some variables So let me actually go ahead and do this. Let me delete this code for now. And after opening the a variable called Scratch a variable called C, set it equal set it equal to zero, just so that I we did in week zero, week one, this looks a little In fact, this is how you but Python also has some clever syntax. If you want to be really cool, Python equals zero, zero, zero, and So it tightens up the code a little bit, the same. Now let's go ahead and iterate And if we see Scratch, If we see C, increment the C counter. If we see Python, increment So how do I do this? Well, I could do something like, just like before, let me go ahead and set it equal to the language in as part of this iteration. And now I can do something like this, if with my indentation, I can do Scratch equals &quot;C.&quot; I can go ahead and Else-- and I don't think I Even though we only saw three options, elif favorite equals, equals and increment Python. The one thing we can't do that we So plus equals is as So what have I done? Inside of this loop, I've just by one if I see Scratch, or All right. Outside of the loop and because once I'm done I might as well let the with clause let's just go ahead and So I'm going to go ahead and print out let's print out whatever the Let's then go ahead and then whatever the And then, lastly, let's print out And now I made three typos here. This is not going to print the values. What do I need to do? Sorry? Yeah, I'm missing the f in so that I actually get formatted. And that is to say, the variables get like we saw last week. All right. So, honestly, that's kind like 18 or so lines of code, just But let's see if I got it right. Let me open my terminal and and now I see, by an folks like Python, followed by C, But that was a decent amount and it turns out there's actually better more programmatic ways of doing this. And if we think back to one of Think back to how we preached the value of these Like the CSV module, because that's what dictionary, after And this was the general It associates keys with might in a two-column table Well, this is what I need if I want Scratch, and C, and Python. If I had a piece of chalk, I and Python as three keys. And then with my chalk and, maybe, They all start at zero. Then, I add one, add two, add three. Or, maybe, on a chalkboard, But a dictionary is kind of the perfect something like Scratch, C, Python, respectively. So this is going to but it's going to be pretty conventional Let me go back into VS Code. I'll close my terminal window. And let me go ahead and because I can simplify this further. Let me go ahead and now give generically, called counts, and set And you can actually do You can literally write in parentheses, which will like the picture on the board, is to just use two keystrokes and use That gives me an empty dictionary Now my loop is going to be the same. I'm going to do, for I'm going to go ahead and grab the So favorite equals row, But now I'm going to do There's two scenarios here. Either, I have seen this language before Or, if I've never seen this language what should I initialize the So, one because I've only seen it once. Exactly. So now let me go ahead If this current favorite, is already in the counts this is literally how If favorite in counts. That will check, is there a key with If so, go into that location index into it at the favorite It's either, quote unquote, and just increment it by one like this. Else, as you noted. If it's not there implicitly, then be set equal-- not to zero are seeing it in the current row. Let's initialize it to one. And, thereafter, if going to be plus equals one, So now outside of that loop, outside For each favorite in those counts-- And this, too, in Python is a all of the keys in a dictionary. That is, if you want to iterate over the you literally can say, for So for favorite in counts, this is and updating it automatically Let's go ahead and print going to say whatever the name and whatever the value of that So, again, logically the only I'm now using one dictionary to keep track of three things, like different things, Scratch, C, Python. And the last thing I'm doing, is once I have that dictionary, or, maybe, tomorrow there'll going to introduce SQL today. Well, this will iterate over all of All right, so if I if I do Python of There we have it. And it happens to be in a That's because we saw Python and, eventually, we saw C. But if we actually could with But, in short, what have we done? We've created this kind of Python, C, and Scratch, we encounter such a language from you or increment it by one instead. Any questions on this code, or this like, a little cheat sheet for Super common paradigm. All right. Well, let me tweak this a little bit. Right now, in my output, we're Maybe, for the sake of discussion, We can actually do that. Let me close my terminal temporarily. And it turns out, in Python, but the simplest way to is literally to use a that comes with Python, And even if you pass it a dictionary, by the left-hand column so you can So if I go back now to VS Code. If I open my terminal window and now that I've added the see just because it's sorted Now that's not that useful, especially You probably don't care as much as you care about it being which is the least popular. And, for that, there's a bunch And, I think, the simplest way to sort of the left-hand column is probably Let me close my terminal temporarily. Let me still use the sorted function, but let's change it to be as follows. Let's change it to sort by a which is a little weird, to last week's brief discussion of Remember, in Python, is like an object of some sort. An int is an object, a dictionary Which is to say that, not only do these &quot;Hello, World,&quot; or 50, these can also have functions methods. So it turns out that because counts that counts dictionary, like comes with a function called get. And if you just tell the sorted it will actually, for every key, get and sort effectively by the Now we'll see down the line, perhaps, but, for now, this just and sorts the dictionary, not All right. So now watch this if I run Previously, it was in the order in in the CSV file, then it Now it should be sorted by value. And, indeed. Scratch is the least with Python is the biggest with 280. That's not much of a top Let's actually reverse it. And the easiest way in to pass a third argument into by just reading the documentation. You can literally say, reverse and now if I rerun this one last I'll see the same values but with Long story short, even though like adding this and looking up where you would have had to figure Let me implement bubble sort, selection or use some other library. In Python, you just get a lot It's just built in once you get And, to be clear, this is an But in Python, we have not only are based on what position they you also have these they have explicit names to make clear that you're using More parameters in Python can All right. Any questions about that technique yet? And if you're feeling like this is that's actually kind of the All right. Well, let's do it one other It turns out, in Python there really the code that comes with the language And coming with the called the collections whereby if I use from collections, I capital C. And it a little bit painful to initialize it, maybe, to Turns out, you have the same problem and so there's another way to do this. You can create a variable called C, open paren, close paren. And this is a different type of object. It's a different type of has counting capabilities built in. And so if I actually want to use For each row in the reader, let's go from that row, just like before. And without doing any of that headache you can literally just index quote unquote, &quot;Scratch,&quot; or &quot;C,&quot; or What the Counter class is going Another example of object-oriented is now an object thereof. What this whole feature of Counter going to automatically to zero, even if you've and then you can just blindly So, in short, there's just to do something in Python as well. All right. How about, lastly, let's Oh, actually, let's do this. We can even simplify the sorting here. Let me actually take Instead of manually figuring out how For each favorite, and the count common function's return value, go So in short, again, a bit new syntax. But what's going on here? Well, it turns out that sorry, this Counter class, and, comes with a function built in that you It's literally called and what it returns to you when you call And so this, too, is a trick in If you want to iterate two variables at a time on you separate them by commas favorite count, favorite count. So if I run this now, Python of And it's getting a little simpler, than if we had actually Lastly, here is a code that's We're down to like 14 or 15 lines. If I wanted to change this to far in the class, how do I to print out, top to bottom, the What line should change? Yeah. So, yeah. Line 10. Because I've written this in and using dictionaries to change language to, because that was the And so now, if you're make my terminal window a bit bigger. Python of favorites.py, enter. And, OK. Tragically, we peaked is the most popular problem thus far, OK. Peaked even earlier. Mario, DNA, and so forth, and So based on this sample size, here's So, we got it. More Hello, World problems All right. Now that we've done just make this program and see how we can really take a I'm going to go into VS Code. I'm going to keep everything the I'm going to get rid of want any more print out everything. I want to look up specific counts. Like, how popular was this problem, And what I'm going to go ahead and do set it equal to-- I could use get string but we saw last week there's no Let me just use the input and prompt the human for And then let me go ahead and print out, whatever their favorite is, colon, of that favorite, close quote. So let me open my terminal window. Let me run Python of And if I type in Hello, World, looks If I run Python of favorites.py again. I type in Scratch, now we see that one. If I type in anything else, I'm So this is to say, not only can we write tightly versus the manual you can also make these And this is going to be a if you go into the world of consulting, generally. Among your roles is going to be to get back the answer. be ask questions Honestly, life gets pretty been programming in Python, perhaps, for When you have to write code to and there's this sort of that programmers tend to avoid because, ideally, you with the right tool for the job, you actually write. So how do we actually get to that point? Well, instead of just dealing with there's an entire world Not flat file databases, where you but a database program, a piece running on a server, that's It's got a lot of memory, it's got a and it supports a that makes it much easier, much faster It's a relational database that it's not even one set of rows and columns. You can have two sheets, three sheets, well be relationships, or relations. So S-Q-L, or SQL, is a stands for Structured Query Language, you're not going to be typically, of writing loops and You're instead going to describe you're going to describe the and we'll do this using a That is to say, there's not It's a pretty small language. But it's going to allow us to eliminate perhaps. SQL follows this CRUD paradigm. So C-R-U-D, which simply means you can really only do four things. You can create data, read data-- that Update the data, or delete the data. So, CRUD, for short. And that really speaks to the world is, even though we'll of its capabilities today. And you'll explore more over time. Specifically, in SQL, there's map to those four ideas. Technically, you don't just you can also insert data, like And it's not the word People say to &quot;select&quot; data. But they mean to read data, which or creating data. But the U and the D are the a keyword in SQL known as DROP, very dangerously delete entire So how do we do this, and what's thus far? Well, here is the syntax SQL via which you can create a table. So the jargon is a little different, from the world of spreadsheets. What you call a sheet in a spreadsheet, It's a table of rows and columns, You're going to have discretion just like you can call a and you can also specify that you want to store And it's going to go a little more like in Excel, and Numbers, you can actually control, maybe, on the database you're actually using. In CS50, we're going to Literally, a language called-- an implementation of SQL all of the core functionality that and with larger, more going to allow us to focus on And SQLite's actually really popular A lot of the data that games and other actually have a file, a binary that's in the SQLite format. So if you do a mobile app, for you'll have an opportunity to Well, how do you actually run SQLite3? It's just a command built So this is a program you could or the like. We'll do everything as we've and actually use your code space. And by that I mean, we can just using SQL instead of Python. So let me do this. Let me open up my terminal me go ahead and maximize my focus now on the files here. Recall that I have a file and that CSV file is just text. But let me load it so I can actually use this To do this, I'm going just means the third going to create a new That's just a convention, a database that I'm going to create. Notice, I'm not using I'm not using the code command for text files. SQLite3 is going to create a binary When I run that, it's going I'm going to hit y and then enter. And now I'm at the SQLite prompt, It literally says SQLite Now, one time only, I want to into this database so I can actually but this new language called SQL. And the way I'm going to I'm going to do dot. Mode csv, enter. And that just puts SQLite into CSV mode. It has different modes for I'm going to .import and then I'm to import, which is favorites.csv. And then this one's up to me. What is the name of the And table, again, is essentially So I'm going to call I'm going to call my So what this command is is all of those lines of Python code and do something with it-- This is just built into SQLite. It's going to load the whole darn and then that's it for now. I'm going to go ahead and literally I'm back at my dollar sign prompt. If I type ls, I have I also have favorites.db now as well, a an optimized version of the CSV file. In that DB file now is a going to lend itself to CRUD and deleting, using this All right, so how do I get into this? Well, let me clear my terminal window the next day. I've already created the database. That's a one time operation. Once you've got the ahead and again run SQLite3 favorites.db But it's already now-- all Just as a teaser, let .schema is a SQLite command that just table. And we'll see more about but for now this is the SQL command that when I imported this database And, for now, just notice it mentions language, Very loosely, it calls So we're not trying very hard from another. It's all text. But notice, create table This is essentially that I alluded to create a table in a SQLite database. But more on that in just a bit. Here now is how we can actually It turns out that we can select table using syntax like this. Literally, the keyword select, then that are in that database, and then from And notice that in capital specific keywords, select, And in lowercase, by convention, for the columns that you, or I, have have created. So if I go back to SQLite here. Let me just clear with Control L, which so we can focus on what's new. If I want to select everything here's what I can do. Select star from favorites semicolon. And, do forgive me, semicolons But select star from favorites uses a Star here has nothing Star is a wild card. It means give me everything, called, from this particular table. When I hit enter, what is the entire contents that's the result of having imported So when I hit enter, And SQLite, just to be what we might call ASCII art, just and vertical bars, and pluses on and make it look like But what you're really seeing specifically in that table. Specifically, if I only let me try something Select language from This is going to give me of all of the favorites that you This is a little overwhelming to so let me actually Let me do select language So we're about to see that can use to tweak the in order to get back more or less data. In fact, it turns out like these built into SQL, much like Microsoft Excel, and certainly Python. There's a lot of functionality that you If you want to calculate an average, get the unique or distinct values, force everything to uppercase, minimum value-- much like spreadsheets, you get all of that functionality So, for instance, if I go back Let me go ahead and select in this table, the total number So I could do select star and then I could literally Like 1, 2, 3, 4-- there's And, indeed, on our list of And so the way I can use Select count of star-- so pass star in as an argument You don't care what columns you're From favorites semicolon. And now, you're actually like a little baby table that has just one cell of which has And it's 398 because 399, recall, row from the file. All right. So suppose you want to-- actually, note that this as counting a specific has the same number of columns, three. We could just say select or select the count of problems. All of those are going to It is, therefore, conventional trying to count the worry about what they're called. Just do count star to get All right, but what if we want to and we didn't know a priori that with three radio buttons? Well, we could do something like this. We could select the distinct languages And that gives me Python, is one of the other functions This is, obviously, very easily but if I wanted to do I could change this to be And just like in C, just like I can nest these functions into the input of another. If I hit enter now, I now OK. Let me pause to see if there's any Yeah. [INDISTINCT SPEECH] Does SQLite-- [INDISTINCT SPEECH] SQLite3 is a program. And it's an implementation itself is a lightweight as SQL, which is a very there's lots of humans in the world. Not everyone agrees what SQL should be. Microsoft might disagree with Oracle, as well. So there's a common that almost everyone knows, but there are also some SQLite tries to distill things and so that's what you increasingly see as well. So we use it because it's Good question. All right. So let's do a few other things by without trying all of these right now. Here in this list is a that are going to give And we saw limit already, and But you can also have what You can literally use the keyword without using an if, and an elif, and You can just in one line you can order the data, and you can So what do I mean by this? Let me go back to VS Code with a few different queries. Let me select, maybe, the count of was going to be 398 if I just get back want to know how many of you like where the language in each and the convention here is to is tolerant of other formats as well. If I hit enter here, I'll see, indeed, That, honestly, took what? 13, 14, 15 lines of code? Now I've distilled that kind of instead, by using this Suppose I really want to get specific, Hello, World in C as your favorite? Well, I could change this query. And just like your dollar you can go up and down in your You can use Boolean logic. And I can say language problem equals, quote and the number of you that So really, really early on Now notice a couple of key differences. One, I'm using AND, and not using single equal signs. So SQL behaves like Scratch does, Different people have implemented Equals, equals, equality for comparing things left and right. All right. Things are now going to get but the whole goal of was to analyze the ranking of Turns out in SQL, once it's pretty easy to do I'm going to do this. I'm going to select all of but I'm also going to And then I'm going to do that but I'm going to group claimed a moment ago that group by is that's going to let us group data. And what this effectively got this table with a lot of and again, you can group by smush all of the Python rows together, all of the C rows together, but rows just got smushed together. Effectively, doing all of or the counter legwork, 15 lines of Python code. So if I hit enter here, for what we're now starting to do. I have distilled into in a language called SQL more than a dozen lines of Python And I can do the same I can just change language here, But, per this list, I can not only So if you actually want to get a top just change this query slightly. Before the semicolon, let me order And now what I get is 40, 78, 280. If you want to flip that, that's fine. By default, order by uses If you want to do descending order, And now we have a top three Now, honestly, this is a bit of a count star over here. There's a nicety in SQL, too, where So if I use the same query again-- let me scroll over to the left. I can actually use the can rename this weird looking column, I can rename it to n. And then at the end of this query, creating a synonym, if you So if I hit enter now, same exact that came back-- not a technical is more simply called n It just makes it minorly more to reference things that might Lastly, suppose we want and we just want the Honestly, I can just That gives me just this tiny little with one row. And, honestly, if I don't even I can omit that entirely. Just see how many people really 280, in this case. But, of course, it's more interesting So, in short, just by turning it's relatively easy to start And more answers there, too. Phew. Questions on this thus far? Any questions? No? OK. Well suppose that this One of our new problems is and it's going to allow you in the context of a Suppose that suddenly becomes Well, how can we go about Well, we've seen create we've seen select for Turns out there's also that you can use to insert Now, I did this in bulk by just and SQLite3 did it all But in the real world, if you don't have is submitting the form but maybe it's an application you're going to get more and more data So if you write code like at a time, one row at a time, and So just as a check, let me do Just to see all of the data. And the last data we got was Suppose now I've decided I I can do this. Insert into favorites-- what columns do I want to insert into. I'm going to insert a new language Timestamp? I could. I don't really want to look up the time, And I'm going to put in SQL for the language, which wasn't and Fiftyville for the name So there's a bit of dichotomy here. In the first set of parentheses, of the columns that you In the second set of specify the values that you So when I hit enter which, in general, is a But if I now rerun select star voila, a brand new row. We don't know what time or In fact, we see an old friend, null, but we do indeed see that SQL, in So in the world of SQL, null has nothing The world of SQL, it's just using the that there's no data to do with actual memory But suppose that you don't want Let's just delete that. Fiftyville hasn't even nor have we even finished How do we delete data Well, there's a delete from command. Let me go back to VS Code here. Let me go ahead and clear my Let me go ahead and and let me not hit enter This is one of the you can do as a database administrator. If you Google around, of interns in the real world executing This will delete So if you ever do this, remember, But if we add a where clause here, only is null, this is more reasonable. And, frankly, any companies have backups of their be reading about these horror So this is going to delete any where Timestamp, capital T, because I go ahead and hit enter. Nothing seems to happen, but if I do that now row is, again, gone. So you can use these predicates, these coupled with delete, and What if I actually So if you want to update Well, we could do this. I could update this table I could where some condition is true. So how might this work? Well, let me boldly are really going to like so all of these favorites So let's do this. Let me go ahead and update setting the language column And with a comma let me go ahead and equal to, quote unquote, &quot;Fiftyville.&quot; I'm not going to have any kind is just going to do its So if I hit enter nothing but if I now do select everyone's favorite is So this too is destructive, there's no Control Z, or undo that. You better have made a backup that's not a good thing. In this case, I do have this delete my favorites.db file. I could re-import the data, so I haven't but you could in the case of you're actually working on. So just to make the and delete from favorites Let me reselect. There's no data there anymore. And in fact, if I do select we'll see as much that the because everything has now been deleted. Any questions, then, on that code there? No? All right. So if not too scared yet, let's go Halloween candy is served, All right. So we are back, and before we dive it turns out, unbeknownst to me, So it's now time to announce the winners If our two winners would I'm told during break, dressed up as me. [APPLAUSE] Come on over. Would you like to introduce yourselves? SPEAKER 2: Yes Hi, everyone. I'm David. I am living in Matthews as a first year. I'm planning on studying SPEAKER 3: Hi, everyone. I'm David. I'm a second year in on just studying computer science. [LAUGHING] SPEAKER 1: Well, thank you. We have some Oreos for you. Thank you, both, so much. Did anyone else dress like this? We have two more Oreos, if you'd like? Intentionally? [LAUGHING] Oh, that's pretty good. OK. Yes, we have one more winner. Come on down. [LAUGHS] Thank you. SPEAKER 4: Hi. SPEAKER 1: This is intentional? SPEAKER 4: No. SPEAKER 1: Oh, OK. [LAUGHING] SPEAKER 4: Hello, my name is David. I'm from Canada, and I'm a first year. I'm not sure what I'm going to study. SPEAKER 1: OK. Welcome, as well. SPEAKER 4: Thank you. SPEAKER 1: All right. [APPLAUSE] Up until now, we've played that you all gave us, which was based, and your favorite problems. But it turns out there's a lot the real world, some of And, indeed, there can be not just hundreds of thousands, even millions And so what we thought we'd do is really, actually, get our data set from the Internet Movie And, in fact, if you go to via their web interface, some do today using SQL alone. But what you'll find, ultimately, or their mobile app versions is-- yes, giving you a nice pretty but underneath the hood they are or similar queries, that They're just waiting for that you're actually searching for. So let's go ahead and experiment, initially, before we consider how So let me open up, just an actual, empty some rows and columns to play with. And let me propose that we want to How can we go about doing this? Well, maybe I could start in and I could create a title column. And then, maybe, a column And a very popular show, So I might put this into the And under star, I could put But, of course, he wasn't There are others as well. And so if I want to put in well, maybe, I need So Rainn Wilson. But even as early as was also another star in So he was a star. Jenna Fischer was top So Jenna Fischer. And then BJ Novak, Harvard alum, was credits, as well. So we've got all-- one, two, three, four, Hopefully, I didn't but here's the beginnings And we could imagine doing this adding more, and more rows. But let's consider, as we often of this implementation, but the design. It's pretty straightforward. It's very readable. So I think it's good in that sense. But if you start to nitpick even in the world of spreadsheets, assuming that the next the next row is another What's bad about this? Yeah? [INDISTINCT SPEECH] Yeah, so each row is going to have and even I, kind of, couldn't Like, do I have just one star column? Or two? Or maybe now I'm up to 5? For even bigger shows, when more people got to need more than five So that's fine. We can clearly scroll to the right, but there should be that like rubs you the feels a little off if some others have this many. The data would be very jagged It would be very sparse, which There's probably a better way. So maybe I should flip a better approach here would be So let me do this. Let me just move Rainn Wilson over and Jenna Fischer over here, I'll get rid of all of these And now this is sort of better because in the vertical, although it's a So maybe I should of copy paste here. So in some sense this is have one title column, one keep adding row, row, row, But what's now poorly Yeah? [INDISTINCT SPEECH] Yeah. I'm repeating the title. And, in general, copy, paste, has generally been a bad thing. It's generally gotten us in trouble a typographical error somewhere. Maybe it propagates elsewhere. And if nothing else, it's If this is actually going to be why are you duplicating the same for large TV shows? That's just wasteful. It just doesn't seem wise. So how can we eliminate that redundancy? Well, unfortunately, in the world escalate quickly to be kind of annoying. But let me do it, nonetheless, Let me propose that we do this instead. Let me create not one sheet and assume that there's or relation, across these sheets. So, just to be pedantic, let me call but let's call this shows. And in this sheet, I'm going to and I think I'm going I'm going to start giving every show affiliates have Harvard have Yale ID numbers, and so forth. Let's go ahead and give each for reasons we'll soon see. So for The Office let with the actual Internet going to give it a The specifics don't happens to be what people in But that's it for TV shows, there being many more in this sheet. Let me create another sheet now And in the people sheet, let me So one column will be name, another but it's going to be a And here we have, for We have Rainn Wilson. We have John Krasinski. We have Jenna Fischer. And we have BJ Novak. And, this is going to but just to be consistent that according to IMDb Steve Carell's Rainn's is 933988, John's is and, lastly, BJ Novak's is 1145983. Phew. OK. So now we have the same people, but Lastly, let's associate those shows avoids the two problems we was having a variable number versus redundancy in the second case. Let's really tighten things that doesn't actually need to be. So I'm going to create a third like the TV stars for these is have only two columns, I could write these in conventional in the database world where everything is lowercase, And for show ID-- well, we're but I'm going to go ahead and say And now I'm going to go ahead and this time it's OK to copy So I'm going to grab all of these and I am going to indulge even though we didn't like that earlier. Now this indeed has escalated are very useful to look at to the has the complete picture. We have shows in one, people in another, of numbers in the third. But I propose that this is the if your goal is to have a for every show and every person. That is to say, you only say the You only write the TV star's And you associate them, you by way of this third sheet here. So if you've not seen it already, this unique ID, 386676, that same value appears multiple times. But what this third sheet is doing with one, two, three, four, Now I can see that it's similar indicted as bad design a moment ago. The Office, The Office, The Office. But think about our world of C. In in general, data takes up finite Like an integer is four bytes, 32 bits. So even though, yes, I'm it's just the same four It's not t-h-e space It's not the same 11 It's just a number, and numbers That computers can crunch Duplicating numbers is in Duplicating strings will So with that said, is this Would you want to be handed this Like, hey, who stars in The Office? You can answer it, but you then another, then a third. Or you need to use VLOOKUP, or special I mean, you're just creating But, academically, if you has a lot of merit because We've normalized the data, so to speak, So where are we going with this? Well, it turns out that we'll from the real world from the And in a moment, it's going to This is an artist's rendition six different tables. So not one, but six created using freely available They kindly provide, not CSVs, which are essentially look for tab characters in order to convert them, as SQLite in this case. But we'll see that there made available from today, which you called shows.db, and it contains And in that shows.db file there but let's focus on just IMDb, the Internet Movie Database, and tracking that kind of a look at some of these how we can actually So let me go over to VS Code. And let me run SQLite of shows.db, There's no CSVs, no TSVs, we When I hit enter, I And the first thing I'm playing with a SQL database I got it from a class, is just to wrap my mind around because you're not typically going to You're just going to be given a file. So let me just select some data. Let me select star from the shows table. I don't really want to see all to the first 10 shows in the table. And here, we can infer what Every show has an ID, a title, the and the number of episodes as of So that seems to reflect this an entity relationship diagram, a And you'll see that in have an ID column, title column, Well what about these ratings? Well, according to the picture, and a votes column. So let's go back to VS Code from ratings, limit 10, just to wrap And there we have a have rating in the middle, which seems and then votes, which So we have some different But there's a lot of data. In fact, if I do this now. Select star from shows-- let's not select all of the data. Let's do select count stars there are 214,000 So we're well past the 398 rows that So it turns out, per this a standard relationship between respectively, and it's what relationship whereby every show And this is indicated, look at what the arrowheads This indicates that it's a means every show has one rating, which has a corresponding row Strictly speaking, they You could just join them together but IMDb keeps the kept them separate in So what does this Well, let's actually take a look in VS Let me clear my screen, but specifically look at the schema, So you can do .schema shows, and any specific. In the real world, if you're or Postgre, or MySQL, or others, but anything else that especially the capitalized If I hit enter here, here is what the In other words, here is the create ran in order to create and then we imported a Every show has an ID, has a title, But there's more detail here. Apparently, the ID is an integer, the cannot be null, the year is and the episodes is an integer. Well, that is now familiar. And then primary key. So there's some other which we'll come back to, but let and we'll see a couple There's show ID, which is Rating, which is a real number, a.k.a. float, but it, too, cannot be null. And then some number of votes, And then there's mention of foreign key. So unlike our data set for the did automatically, and imported, has been more thoughtfully some relationships across multiple just one. Now in the world of SQL, we have For instance, we have One, cutely named Binary Large Object, which generally that's zeros and ones. Though, generally, it's best like in folders, on disks, so There's integers we've seen. There's numeric. Which numeric is more things that are numbers, but not values. There's reals, which do And then there's just text. In other SQL databases in the or your future classes that there are even more data types in other and so forth. But these are sort of They just get more But there's also some keywords, that you can specify when --that this column cannot be null. If you want to make sure that data unbeknownst to can impose that when creating the table. And unlike Excel, and and Apple Numbers, which will generally in anything they want, with a over the integrity of your data. Moreover, you can specify that a If you want to avoid don't want the same person to be able to making sure they have your database can help with that too. You don't have to rely on Python But there's this other feature is databases that have multiple tables and that's these keywords Primary key, and foreign key. And we started to scratch It turns out what I best practice in the world I gave or, really, IMDb gave every And that unique ID, in this case that uniquely identifies that TV show. In other words, this is the Technically a sheet, but I'm using in than my black and white window. This ID column is the primary key for What is the primary key It is also ID. It's a different ID, but it's by But this people column, And you can perhaps see Those same numbers also happen but in that context, they're They didn't come from this star sheet, so they're sort of So foreign keys is simply the presence in some other data set. And so it's just a but the foreign key is the column Foreign keys is just the appearance So what does this mean? If we go back to VS that when we created this we specified that in our shows I mocked up with Google Sheets there, again, also has year in and the total number of episodes. Because that's juicy data beyond what I mocked up a moment ago. In the ratings table, which is also an integer, just like this show ID column is actually going the shows tables ID column. So this is the relational These are two tables and that relationship is that show ID And it allows us to link these two tables together. So what does this actually mean? Well, let me go ahead and do this. Let me go back to VS Code here. I'll clear my terminal, and let's So let's go ahead and do Select star from ratings where-- let's get all of the good shows we'll do the cut off at 6.0 out of 10. So where rating is greater And just so I don't overwhelm limit this to the first 10 results. In other words, this is all of the ratings that are at Enter. And we see just the first 10 of them. Not the top 10 because we've not sorted but the first 10 in the table. So what is interesting seen just some sampling But this isn't all Let me actually distill this just to I want to know 10 good shows to watch. So let me just select show ID. So same result, but less data. It's just that first column thereof. Now this is going to but if I want to find out think about the picture All of the show's names are in the shows are in the ratings table. So even if I do select I'm never going to know Like, what the heck is show ID 62614? Well, I could do this. I could select star from shows where the Enter. OK, so I could watch Let me do another one. Select star from shows So I'm just grabbing OK. So Catweazle, a kid's show from 1970. All right. So I'll watch that. So now let's do another one. I'll just copy this. Like suffice it to say, this is where I'm literally copying and pasting But this is where SQL I can have nested queries. I can put one inside of the other. So let me instead do this. Let me clear the screen, Select star from shows is in the following list of IDs. Select. And, actually, I'll do Select show ID from ratings greater than or equal to 6.0 semicolon. So I've separated this onto two lines. The dot, dot, dot is just which means same query, multiple lines, Just like grade school math, I want And so what the database select, as before, all of the where the rating value is And that's going to a list, some kind of which previously I was now the database will It will now select everything from the is in that list of values. And it's actually going to be and say limit 10, which I can do. So let me go ahead and hit enter now. And now I see more useful the ratings information, tells me nothing about what to watch. Now I see the show ID, the title, But notably, what is-- and if I want let me actually go back select just the title from shows And I'll re-execute it by just The only difference now is instead Here's now how the data be selecting 10 shows that are really But what, of course, is whether I do star or just title? What's missing? Yeah? AUDIENCE: Rating. - The actual rating. I know these are at least Which is 10.0? It'd be nice to actually So we can actually do that, that when you have two tables in you can actually join them together. You can join them together, literally And you can do this as follows. Let me propose, with a sample And dot, dot, dot just means we don't We just care about the structure. So on the left here is a table that has a show but I've omitted year and distracting from the But they're there in the real table. On the right hand side here, with just two of its columns, but I've omitted the votes add anything to the discussion. But let me propose this. Notice that these two therein definitely have commonalities. Like, they both have the same ID. In the left table it's 386676, a.k.a. The primary key of that row. But it's also appearing in duplicate and in that context it's a foreign key. The point, though, is So wouldn't it be nice if I could and if my fingertips represent these them together so I get one wider together to satisfy your what the ratings are of those shows. Well let me go ahead and do this. Just for artist's rendition, which has no functional effect. It's just going to put the numbers Let me then literally highlight the fact and let me propose that we we somehow join these two Strictly speaking, I because they're duplicates, so I But what I'd really like a temporary table that is the joined And frankly, I don't really Heck, all I care about is what show Give me the title and the rating. All of these numbers are, that the computer cares about, So how can we implement that idea? Of taking one data set with this data set, and Well let me go back to VS Code here. Let me clear my screen. And this is going to be a bit cryptic Let me do this. Select star from shows, Let me join it with the ratings table. So let me select everything but I need to tell the database, well, What are my fingertips? Specifically, I want them to So I can literally say, on, and then Shows.id on the left should equal on the right. Again, if I'm joining shows with it's called show ID in the other, In fact, if I rewind, this Two tables with the same value. So with this query here, if I go ahead me further say, where rating is And, heck, let's limit it to 10. Just fits on the screen, so it's more we have a wider table that indeed joined these two tables left and right. Now, again, I don't really like year and episodes and So let me actually hit up. Let me go to the beginning me just select the title of the The query is getting a little long and Except, instead of star, Now when I hit enter-- like, this is the list that would have Show me 10 shows with a but remind me what the maybe, I can prioritize the sevens, the if any. Any questions about this This sort of solves the problem that where I was just kind of playing all the data into its is not at all pleasant to use. But with SQL, with join, you can Yeah. [INDISTINCT SPEECH] Correct. So, yes, I should have called In my query here, I was using dot we've seen in C. It means but it has nothing to do In this case, it has to do So shows.id just makes clear that I to line up with the show ID Strictly speaking, I don't need there is no ambiguity. One table has a column has a column called show ID. So certainly the database can But, for best practice, and for the notation and table names if there's some common All right. Well let's go back to These are all six tables in IMDb. We focused for just a moment there but what about genres. So, genres, like comedy, and Turns out that this actually implements Previously we saw a but it turns out that called a one-to-many relationship Why? Well, shows like The Office, I do and that's it, but there that might have multiple Maybe it's comedy and a bit of romance so you could imagine some shows and so one-to-many means that One-to-one would mean one show can So why don't we go ahead and focus, Let me go back to VS Code and let's just look at Select star from genres and And, again, I do this just to wrap I could look at the schema, but I just want to look at the raw data. OK. It looks like here there are a bunch So two comedies, which is interesting. Oh, interesting. Family, action, sci-fi, family. So the values here are is not the best design of IMDb. We literally just imported But notice that show ID show 63881, and so is show 65270. So it turns out that in the real world There's duplication of but such is the way IMDb's data is. But what's more interesting to This show ID in three rows is the same. So there's some show out there to be an adventure, a So let's see what that is. Let me just highlight and copy Select star from shows where the And it turns out, we it's a show from the 1970s called of those categories. So by using a one-to-many relationship, you can implement that same idea When we looked at the spreadsheet we had star, star, star, which we but now we instead have where this many-to-many So let's actually play around with it. Let me go back to VS Code a look at the schema for genres. And we'll see that it's pretty It's called genres. Every row has a show ID, which It has a genre, which And that show ID is a foreign key column in the shows table. So very similar in is just kind of on the putting one row for but 0 or more shows in the So what can we do once we Well, let me do this. How about we select the show ID from the Like, I'm in the mood for some comedy. Let's see all of the available comedies, Here are the show IDs for 10 comedies Database. Well, that's not very interesting. I care about the title, Select title from shows where the but rather, in the following Select show ID from genres where &quot;Comedy,&quot; limit 10, just So same query as before, but now to select the actual titles Enter. And there are those maybe a couple of which we've seen. Catweazel we've seen before. But what if we want to now-- let's see. Maybe we want to get all of Catweazle keeps coming up. Why don't we figure out, with a So Catweazle. Let's see. So let's do select star because I know it's in the the first 10. This was, 63881 was Catweazle's ID. So let's do this. So select genre from genres where OK. So there's the same Can we make this dynamic? Well, we can, too. What if I instead, more genre from genres where the show ID-- and not in. If I'm looking for a specific And in my subquery, I from shows where the quote unquote, &quot;Catweazel,&quot; So, again, even though I'm I'm really just composing that we've seen before into to just get at more of this data. So what's really going Well, you can think of it like this. If we've got this relationship here's an excerpt from showing the thousands of other shows. Here's an excerpt from What is that query-- what are Well, let me flip this around here. Let me highlight the fact that this is the same. So wouldn't it be nice if I could Well, if I join these going to notice an interesting artifact. If I join them together, as I'm going to need to fill in the gap Tables, by definition, always have You can't have gaps in them like this. So the simplest thing to do is But if I were to try to have this one-to-many actually going to get duplication. It's not duplication but in the temporary tables, that's coming back to us. So what do I mean by this? Well, if we actually implement where we try to join me propose that we do Let me do select star which is just like we did with ratings equals genres.show_ID. But let's just do this for Catweazel, With the ratings, it was a one-to-one relationship, so But now, because it's a you execute these queries, you are but this is OK. It's considered OK because These result sets, exist just for us to for us to crunch the numbers somehow. It's not actually stored in If I wanted to tighten let me actually get rid of the star And, indeed, we can now see. OK, Catweazel three times has But, generally, we don't can even whittle this query and that, too, will just give me the duplication. But when you join data with you're temporarily going to get because it's very easy then no matter where you are in some loop. All right. Well, what more can we do here? Well let me propose that we revisit the and let's look at, perhaps, the really what most people use IMDb for Let's focus on these three tables. And we can infer, from this diagram, three tables involved in a relationship. There's people, there's shows, but table, much like I gave us a third sheet to This stars table we're about is to join two other tables together. And, in fact, it's only going to have So what this is going to do many-to-many relationship. Why? Because any TV show can but one person can presumably Like, Steve Carell has been in So when you have a you actually do need this third table But it's going to make our life the data we want because it's going to So let me do this. Suppose that I want to get Well, let's start with a Select star from shows where title And I should see-- Oh, interesting. Several attempts at creating a TV You can, perhaps, infer the year in 2005? So I presume this is the one at least in the US, which is this one, very carefully used earlier. So let me actually be a where the title equals The That query now gets us The Office that But now let's actually all of the people who according to IMDb, So how can I do this? Well, unfortunately, in the and there's no stars even, but I Why don't I select the person whoops, where the-- sorry, where show let me do that same query as I'll just copy paste so that Office in that subquery. So what I'm going to do is take if you will. Right now, I have found in the But if I want to get I have to take a step through the stars to get anywhere close to So what can I get from the stars table? Well, why don't I at least IDs in that table that are somehow So in VS Code, what I'm doing is this. Select person ID from table, where the show ID in question is I could literally type to do this more dynamically so All right, this is correct. Whoops, ironically. Where show ID-- Oh, thank you. Oh, who said that? OK. Batman. I owe Batman Oreos after class. Thank you, Batman. That's de facto. Yes. Other good prize for that costume. [LAUGHS] OK, so let me fix this. My apologies. So let's go ahead and where show ID equals, and this I did select star from look for a show ID equaling I instead need to do select ID from quote unquote, &quot;The Office&quot; and And just to call this out, much but I'm not quoting numbers. It's not necessary for And just to be super clear, too, I have of capitalizing any SQL keywords, and so forth, and then using Strictly speaking, that's not necessary. Stylistically, we would in the habit of using because they just pop It sort of makes things more readable. But strictly speaking, about that capitalization of keywords. All right, now let me cross my fingers. And now I get back this And, again, my goal is in The Office that debuted in 2005. This is not that interesting because are, but here's where we and nest a nested query. So let me actually select the where the ID of those people is in. And then on a new line, where the ID equals this and then that equals, and then this query here. So just to save time, I'm copying but I'm wrapping it with one saying select names from people is in this result set, where the ID So the parentheses make clear, and what order from inside out. Enter. And there we have it, at least according like this is the top-billed stars All right. So how can we do something else? Well, let me just do it Suppose we want to see all of Steve Select title from shows where And then here, I'm ID from stars where person ID equals. And then here, indenting going to select Steve select ID from people where quote unquote, &quot;Steve Carell.&quot; And so in this way, I'm writing the SQL I'm asking first what I care about. But before I can even to answer this nested query, Once I have that, what are all the And then, please tell me what the Let me go ahead and cross my fingers. And, voila. Some of these you might have heard but if you were to go on imdb.com you would presumably see this here in some particular order. Just to show you two other syntaxes, because it will look complicated. There are other ways to If you prefer the can actually join not just But question first. [INDISTINCT SPEECH] No, just stretching first. So two final ways to execute the same did is arguably, relatively, simpler. You could do this. I could select the title by joining it on the stars equaling the stars And then I can further join it on the equaling people.id. This is a mouthful, and even I am kind screw up when transcribing but what I'm effectively doing is together by telling the database how table, and the people table. Specifically, the way to bridge is to specify that shows.id should And stars.person ID should And that's it. That essentially allows tables with their common fields. If I hit enter now, I'm going actually, a really long of all of those particular shows. Actually, all shows in didn't practice what I'm preaching. I wanted to search for just is the entirety of the tens Control C is your friend. Let me go ahead and reload SQLite, Let me type that once more, sorry. Select title from shows, join stars join people on stars.person this was the part I left out. Name equals Steve Carell. And if I didn't screw up Now we get, a little those same shows that So this is just to say there's But maybe a third way, which explicitly joining them in that way. You can, alternatively, still do and people. You just literally enumerate, you want to join somehow. And then you can instead can just use where clauses to You can say, where shows.id and people ID equals equals, quote unquote, &quot;Steve Carell.&quot; And I realize this is hard to all these darn different this is just to say that there's the same problem and you might think about things a little If I hit enter here, this too it's a it seems, but it does, in And just for thoroughness, Besides the tables we've seen, in there, as well. If you're curious to see what writers fast. In VS Code, let me do .schema writers, as stars. Except this case, in writers, with a person ID, both are foreign keys that indeed Which, again, if I do this schema is structurally the same. So the relationship is essentially by IMDb, and in turn by us, by way of thereof. All right. I know that's a lot. Any questions before we take Yeah. [INDISTINCT SPEECH] A good question. Does SQL provide any way to figure without looking at the database? Short answer, no. Like, this is the dia-- Depending on the database might be able to click and get a nice pretty picture like Indeed, we use software We didn't do this diagram, SQLite itself does not In SQLite the best you And if you don't specify get everything from the table described. Once you get comfortable the idea is that you can read the structure is. But, yes, there are generate prettier depends on the software you're using. Yeah. [INDISTINCT SPEECH] SQL is not case sensitive But table names, and other you've got to be consistent I've done everything in lowercase, Other people might use camel case, All right, so let's take a and also consider some of the actual are still with us in some form today. Notice that some of the were actually relatively slow whereas like that. Those last two queries, all of those tables looking were actually relatively slow. And let's try to take a simpler case. Let me do this. In SQLite you can actually time your turning it on. This is just going to keep track now of your queries take if what's faster, what's slow. Let me do something select star from shows where quote unquote, &quot;The Office,&quot; semicolon. All right, that was pretty darn fast. And it took 0.044 seconds in reality. If you care further, you can break like spent in my account, spent in the operating But we'll focus on the real Pretty darn fast. But we can actually do better because you can create what are called indexes, structure that makes it like selects, and even In an index, you can create index, the name of the on the specific columns. And what I mean by this is if you know or their mobile app, is going to you can prepare the database some fancy data structures in even faster than that. So case in point, let here, and let me create an index for instance on the shows table, So that's simply the syntax for index this column because I'm on it so I want the queries to be fast. Enter. It took a moment. It took almost half a second, but Even though, technically, you have doing updates, deletes, and inserts. But now let me do the select star from shows where title Previously, that query When I hit enter now? Boom. I mean, it takes no time than it's even keeping track of Now, that might not seem like a big but if you've got hundreds, as maybe the real imdb.com a fortune in servers and complexity. Why? Because the same server handle way more people per unit of takes less and less time. I mean, we're all too familiar with certain University applications When you click a button spins and makes you wait and can be explained by poor database have been indexed properly. So when you're searching for in the course catalog, because underneath the doing linear search over everything. But, by contrast, in when you create an index have a hunch that maybe users are like show titles. Essentially, you're what's called a b-tree, It's still a tree, though, if But it's a very short, every node might have two, or three, pulls the height of the tree way up. Which is to say that when you it's invariably going So the shorter the tree is, the fewer you care about. So when you run create table, is being magically created so it's not a simple linear top to bottom. So with that said, we can see this And let me go back to VS Code here. Let me propose to run that even though it's fine if you're It was relatively So let's do select title where shows.id equals stars.show ID, and and name equals Steve Carell. So this was the last of those queries. That just searches for all without using joins explicitly all three tables in question, and the dots, so to speak. But my timer is still on. So notice now, when I hit enter, It actually took 2.763 seconds. Like, that's slow. That's expensive. That's going to annoy your users. That's going to annoy your students if and thinking, and taking that much time. But let's note this. That same query I just executed and it turns out that a primary key in a database, at least Primary keys are automatically for a number in that column? Super fast. Not linear search, it's something closer to something Here, though, I'm touching but I'm also filtering on Foreign keys are not indexed by default. I'm looking at people ID. That's a primary key. That's indexed. But stars.person ID, not indexed Lastly, I'm filtering by Names are not indexed by default. So two foreign keys, one name structure built for them. But I can do that. Let me go down to my terminal here. Let me create one index called, could call it anything I want, on the So that indexes that foreign key. Took 1.7 seconds, but I Create index, show index So another foreign key Took 1.4 seconds, but And, lastly, let's index Create index called name index on Enter. That took 1.0 seconds, So, essentially, I've built up now, specifically for these columns. So now recall, previously, If I scroll back up, 2.7 seconds? I think. 2.7 seconds, previously. But if I now run the same stars people where shows ID and people ID equals and name equals Steve, so close, Carell. Same query as before previously took of them yet. Now, when I hit enter? Boom. 0.001 seconds, which is the of linear searches and, in this case, b-tree, in this case. So indexes matter. So what's then, maybe, Like, why not index every Because this is feeling great. Like, we're speeding things up What's the trade off? [INDISTINCT SPEECH] Lots and lots of memory, or space. Yeah, so you're just which we said a couple of weeks ago on what resources you have. But it's probably an especially since it will slightly slow because you have to maintain this tree into a linked list or something linear. But, in fact, being selective about All right. So that we can now solve some let me just connect two dots. Even though we focused today on you can actually combine and solve different problems. And so, in fact, let me do this. Let me revisit our but let me actually now use the Let me go into VS Code here. Let me remove favorites.db because if previously-- became Fiftyville. So let me remove that file. Let me run SQLite3 on Let me create the file anew. Let me set the mode to CSV again. Let me import that file called as before called favorites. And then quit. So I've just reset things to my So, I again have a favorites.db. Let me now minimize my terminal and let me just go ahead entirely and focus this time opening it, iterating over the rows. We can actually use Python and kind of get the best of both worlds. So let me do this here. Let me, from the CS50 Python library, And this is a training wheel because it's just much easier standard libraries for SQL. It just is painful for simple tasks. So now, let me create a variable I'm going to set it equal to this And this is going to look weird, but whether it's with CS50 say SQLite colon slash, So weird syntax, but it's commonplace. Three slashes, not two Now let's use a variable it equal to the return value of input by show. And now, previously we iterated over it looking for the show Or, rather-- Oh, sorry, not the show. The problem, or the Let me instead do this. Let me set, use a db which comes with the CS50 library, Select count star as n from favorites And the question mark is a little like C's percent s. Comma favorite. I'm going to plug in whatever the the question mark is. So no percent s, I'm using a This is going to give me and I'm going to store that temporary Because the temporary table is so I'm going to name my variable rows. And then if I want to get I can literally do row equals rows just to get, literally, the first row And now if I want to print I can do print row, quote unquote, &quot;n.&quot; So let me take a step back and do this. Let me go into SQLite3 of favorites.db like this. Here I'm in SQLite3 at the bottom for instance, is Scratch semicolon. Notice that is how in SQL, in I can get back the answer I want. But what if I want to queries the database for that value In two weeks time, what if a web application, like that writes code to but that pulls the data from a database? You're not going to have your you're going to generate So let me close my terminal window here. Rather, let me close out of SQLite 3. Let me now run Python I'm prompted for my favorite I type in Scratch and hit So this is an incredibly to use one language Like SQL is best at reading Python is, maybe, best in this or, eventually, making But it's certainly fine to The documentation for this library, is it this URL here, along with a But there are some might encounter in this world, and we It turns out that in the world of upon this yet, you're generally of people and their favorite thousands of movies, but like like Instagram posts or Those are huge databases The problem with SQL and, is if you have thousands, happening at once, things can get out You can lose track of how And so, for instance, as of last night post, to date, in the world. It was clicked on by so many people. And you might think that's to keep track click, when there's millions of devices in probably, at Meta running So how do you actually keep Well, maybe, Meta is to implement the counter Maybe they are using lines of wrote db.execute select from the posts table equals whatever the one is So the post a moment ago, presumably, and that number just gets plugged in all right, someone just Let's figure out what the current and update the database. So this query here gives containing the current number of likes Maybe then we just likes to get at the So this is just Python just to get the actual number you care it is here. But then suppose there's a second that updates the posts table setting where the ID of the post is this value. So these question marks are similar, They're placeholders for to be plugged in after the commas. So if I want to update to be whatever the current I put it there as a second argument The problem, though, with large the Microsofts, and that they are executing code thousands of servers, that might One might be faster, Which is to say, even though represent what should happen and you click on that post the lines of code chronologically Like, maybe, this line of and then it gets executed and then the server moves So it's sort of multitasking, The problem with this is that you where the servers are sort but other users requests are So the analogy that I was taught class actually pertains to So we have a mini refrigerator here. Suppose you've got one in and you come home one day. And you really like milk, so you and there's-- Oh, we're out of milk. So you close the fridge, you walk and go to get more milk. Meanwhile, though, your roommate also likes milk, and Oh, I'm out of milk in the fridge. So they, maybe, head out. Maybe they follow a different Some number of minutes pass, Like, Oh, darn it. Now we have twice as We don't really like it that much. And some of it's going to go We've made a mistake. We should not have bought Now, stupid story, but the made decisions based on But the problem was that variable updated when someone else looked at it. The first person in the story so the variable was in terms of quantity of didn't know that yet so they And, in that case, we ended But suppose what might happen Suppose that post, at some point And suppose this line of code got after all three of us clicked on it. Well, the value of our likes might be 1,000,000, They therefore update 1,000,000 And so what they update the but they do it three times. 1,000,001, 1,000,001, 1,000,001. But they've lost two of might have inspected the variable while like, was being processed. So long story short, when on lots of servers, all of you run into these so And code like this can be look incorrect at a glance. Thankfully, in the world of have to do this certainly for problem But too many engineers in the world or don't appreciate this reality. There are keywords in let you instead begin a transaction, that these three lines happen together or not at all. They should be atomic. That is to say, they should or they just shouldn't happen at all. And that ensures that the because my like will get and then you're like, as opposed track of accordingly. So in Python, using could wrap these three lines of to the database, commit the and that relatively simple solution But this, too, is a topic. If you Google, invariably is a problem that has hit various But there's one other problem that and that's known as a And it turns out that even with what here, is all too easily vulnerable That is misused in some way, unless which is using placeholders like this. It turns out that it's very dangerous Like, most of your users but there's always going to be or just execute something you don't So in the world of SQL, For instance, here is the Here's the comparable And all of us are in their habit or something similar or another. You're often asked for a username But suppose that Harvard or Yale are taking user input from forms or on a mobile app, and they're just that they wrote in advance that just is to be plugged in so they can ask It turns out that if I'm a I could, maybe, type in some that I know have special And it turns out in the world of SQL, are clearly important. Because I've been using them and I didn't mention this yet, but the dash. If you want the rest of a line to be So it's not hash, it's not slash, slash, It's dash, dash, or two hyphens. So suppose that I'm a and I want to see if Harvard when it comes to SQL injection attacks. I could literally type in, maybe and then dash, dash. Well, why would I do this? Well, suppose for the sake of discussion or any website, really, like this to check if the typed in match what's in the database. So how might I do this? And if so, let the user log in, show So here's the line of code in question. Select star from users where username equals question mark. This is correct. This is green because it's good. It is not vulnerable to attack because I'm using these even though we've implemented most SQL libraries But it can vary by system. This is safe. What is not safe is to you learned last week where or format your own strings and For instance, suppose last week that you This code here, unfortunately, Here's a format string in Python. Here's the beginning of a SQL query. Here's a placeholder Here's a placeholder And I've proactively, correctly, The problem is if you just into pre-made queries like this, in ways you don't expect, For instance, if I plug mail in at harvard.edu, Notice what happens. Here's the single quote from the query. Here's what I typed in. But, wait a minute. It looks like this single the thought that the developer started. The dash, dash means, heck, And, indeed, I've lifted grayed out is that only executed is what's Why? Because everything which finishes the developers So I mean, this is literally an example by injecting SQL. Like dash, dash is an example of SQL. Silly as it is, it's a comment to ignore the password. So what does this mean? Well, of course you're going to get searching for someone by username, it what they typed in, you've and you're not even The effect then would be that you could just by knowing their usernames if in this way. And even though I'm pretty sure so many darn websites have in the past. And if you Google, SQL and Google, for instance, the you will tragically likely continue to make this mistake. The solution though, use placeholders, just escapes potentially dangerous input. And this looks a little saw that the escape And that made backslash n, or backslash Weirdly, in SQL it tends to So if you do quote, quote I mean, a literal quote. It's not like the empty string, So it looks weird. But, long story short, if or anything in the escaping of user input, can think of as being now good and green the human types in. Any scary characters will be So it'll depend on the but it almost always is marks or some similar placeholder. All right. So with that said, you are of People who know now a little We've only just scratched the but it's now something we'll use to applications, especially for transition to web programming or mobile But you'll soon be able to speak a that those before you So you are now qualified to This is someone who, if to get out of paying some camera based into deleting or dropping Drop means delete the whole OK, so maybe not that funny. But this is now the note will end we've introduced you to. Every CS person out there So if you ever refer to, with a wink-- if you ever refer to little if it's a computer scientist on the [LAUGHING] OK, there we go. All right. Tough crowd. All right, Batman, come on down for your [APPLAUSE] [MUSIC PLAYING]