React gets a lot of things right. The solutions offers us when building web applications nothing is perfect. There are some things in without any sort of third-party library, you're such things is forms. If you try to build a form more time trying to prevent the default behavior I'm going to show you an alternative to building and it's a form library that makes it really easy React. Let's get into it. All right, let's begin. you would want to use a form library like React have is I have a component that renders out a password field. This is the JSX that is rendering have the HandleSubmit function, and then you have password. The code that's running this form is one for the email, one for the password. These are values. Then you have a state here for the errors. the password as properties. And then you have actual form event, will first prevent the default, new form submission, and then will perform some checking that the email has an at symbol. And we consider the form validated, and then we form looks like. You have your email and password that basically shows that the email must include and I put something here, and I submit it, we the form has been submitted. This form works. you might ask yourself, why would we even need a you're right, it does. But the thing is, this is the email and the password. And for simple recommend that you use something like React hook like this, doing it this way is completely fine. doesn't scale well at all. This is a very simple soon as you want to add any sort of complexity this starts to get very complicated very quickly. to basically add a new state property. You have to You have to then pass it to the actual input. add another onChange property here and the value you can quickly see how much code you're going any new field that you add, you have to also which also means that you have to put it here then you have to handle your own validation. Even that the form is submitted, you actually want to service response, you would want to turn this into you would also probably want to show something display some UI that something is happening. You clicked while a form is submitting to prevent a that, you would have to come here and create to make sure that you're properly handling the that means setting it to true before the form form has submitted and got a response back from is becoming very complicated and you have to write is why you would want to use a form library like all of this and more with a lot less code and a actually get rid of all of this code and let's So first I'm going to delete all of this code form here, I want to get rid of this on submit and the on change on the inputs. And I'm also me do the same for password, get rid of this, and we no longer need them. Now we just have a simple form with React hook form, we're going to make use the top and we'll import use form from React hook we're going to come here and we're going to write most basic version of use form. Now if you're we have to do. If you're not using TypeScript, short part. We're going to define here the types type form fields, and that is going to be equal rest. We're also going to have password string. that we're going to use within our form. And we're going to give it as the type of use form so this will make it so that whenever we work we're always going to have this properly typed. this form element here and these inputs here to code, it's not enough. We actually have to connect be able to work with the form. And the way that we function that we get by accessing use form. So here and I can do register this function. I can input with React hook form. So I'm going to come I'll come here. I'll do curly bracket dot dot dot the actual field. And because we have properly email or password. I'm going to select password. the form on this email field right here. Let's now come here, we'll do dot dot dot register. And our inputs fields are registered to the form. So whenever we type in these input fields, that and it is going to manage everything for us we actually need to also connect this form element custom on submit function instead of submitting to an actual URL. So first, what we're going on submit function. So we're going to do const on you're going to want to type this as submit React hook form, and then give it form fields. it's totally fine, then it's going to be equals console dot log data, and then close this out handler, and then form fields is actually going you can see, this has the type form fields, which that we're receiving from this function is not in the first example. But it's actually just an corresponding values. And the reason for that, directly is because we're not actually going to we're actually going to make use of the handle that instead and give this function as an argument to the form. And then I'm going to do on submit, and then on submit, like so what this is going to going to first call the handle submit function, this will do some work behind the scenes for us, the form. And then it's also going to make sure calling this on submit function with the actual it actually just does all of the work of they are valid, it calls this function with the means that we don't have to do all of that work complete form using React hook form. So now let see our form right here. Let me just reload. So we actually get a lock here in our console with which is great. Our form now works exactly asAs we now, we can actually submit this form without Let's add some validation to these input fields validation before we submit our form. Now, there in React Hook Form. I'm going to first start by validate an input is actually to use this register optional second parameter, which can be an object you can give it some properties to define how this here, required, true. This is going to make it some value in it before it is considered valid. the password field, so we'll give this here an back to our application and I refresh, we can but nothing is being logged until I actually write it's going to pass the validation and we actually you can also do a regex pattern. So you and you can do a pattern here. Let's let Copilot back here and let's put anything here, one letter, but as soon as I type a valid email, it should do that with a pattern too. For the password which we can do with minLength. We can give this required to at least have eight characters. So now I'm going to do one, two, three, four, five, six, think I type nine characters, but you get the not going to submit. We now have a more robust if you want to do your own custom validation, this pattern here and let's do validate. You can and then you can actually write some code with the value includes at least an at symbol. So now type any sort of invalid email. And as long as I four, five, six, seven, eight in the password, it it's no longer going to submit the form. There here. Things like max length, min and max. I'm but I would recommend that you go and look at all of the things that you can put in here. Form proper validation, but we're not actually showing I'm pressing this button here and nothing is I want to display an error if a specific input do that in React hook form is we're actually going So besides register and handle submit, you also be an object that you can destructure and you can actually have, if I hover over this, it's going will be an object with each of our form fields we can actually use this to come back here to our we can come in here, open a curly bracket and do and we're going to put here errors.email.message. me just add here some text so that this error 500. Let's save this and do the same thing for And now we actually are going to show an error if I go back to the form and I press submit, me just close this so you can see, but we're not between these fields here, but we're not actually if you actually look at our code, we do have this must be true because otherwise this div wouldn't message here is not rendered. If I actually hover is an optional property. This can be either string correctly in the sense that React hook form but we haven't actually defined any message for a to fix that, we actually have to implement error the way that you do that with React hook form a Boolean here with this specific validation, will get used as the error message in case that true. And it's your return email is required. remove the Boolean and do password is required. So we actually have the error messages that are want. Cool. So let's go back to our code and let's and also for the minimum length. So here in this we're going to take this code and we're going to value includes and let copilot complete everything here. And also here we have to return true because have to return a Boolean. It's only when it's not will get used as the error message. In the case of we still have to return a number somehow, but Instead, we can do value eight and then message if I save all of this and go back to our form, I can press submit. It's going to say email is error now changes dynamically and automatically to is going to be considered valid and now we no I can type one letter and now it's going to say I can type seven more, one, two, three, four, and our input is valid. I can submit this and I right here. Now we have proper validation in our step further and let me show you something else to do. Let's say that now we want to convert this Instead of just console logging the data directly, it to a server and then only once the response is we would want to show that to the user. We will being submitted. And on top of that, we should submitted. So let's do that. Let's first convert we go. And now I'm going to do a wait and let's going to await something for one second, just so hook form makes handling asynchronous functions property that you can access in this form state This property is a Boolean that will be true you have to do. You don't have to manage your own React hook form is doing all of that for you. So here. We can come back to our button and we can do this text here to actually make it show something to remove this. I'm going to do is submitting, I now save this and I go back to the form and I to type here an at symbol because that's where our 6, 7, 8, I press submit. It says loading. And then console. Once again, I press submit loading one just like that, our form now supports asynchronous just convert this to an asynchronous function and form takes care of the rest. Now let me show you Let's say that instead of just awaiting here an to a backend. The backend can sometimes fail. invalid. If this was a sign in form, maybe the backend would actually return to us an error. And error to the user. And ideally, we need to plug it form makes this super easy for us. Once again, we set error, and this willAnd the last thing we can that can be, this email is already taken. And then throw an error in this try block here, so that error. And I'm just going to do it like so. Now, a clean slate, I'm going to first make sure that 4, 5, 6, 7, 8. When I press submit, it's going to this error here on the actual input field. This error from the backend, an asynchronous error, and setError. Now, what if we wanted this error to but rather to belong to the form as a whole? Well, email here with root. If you saw before, let me have email, password, and root. We can use root input field, but rather belongs to the form as come back here to our actual JSX, and then just I'm just going to take this entire block, and I'm going to do errors instead of password.root. And actual application, and I close this console so is going to get disappeared, and now this error easily have an error that comes from the backend, belong to any single input, and you can display it want to show you about React Hook form that you're that instead of having here a fresh form, a form values in our form, because oftentimes we're not and we want the properties of that entity to be implement that in React Hook form is actually here where you have use form, and in this and you can actually specify default values, and you want. For example, we can do email, and we to provide every single field in here. You can default value. If I now go back to the form, and I email pre-populated. So you can use this to super a bonus, let me actually show you the recommended better way to handle our validation here that to involve using Zod as our validation library. install two more things besides React Hook form, hook form slash resolvers library, which will give into your form. And the second one is going to be library. It does a lot more than just validation, through this resolvers library. Then once you have form, and you can start by writing import Z from define a schema for our form. And I'm going to So we have here const schema equals Z.object. And email, which is going to be Z.string.email. Z.string.min8. This video isn't going to be a haven't already. So if you're watching this at a purposes, this is all that we're going to do with can actually get rid of this form field because we can do is I can just do here type form fields let's just get rid of this so we don't have email, string, password, string. But this is This is also one of the benefits that you get from here to where we have used use form. And besides can pass it here, Zod resolver. We will import library that we just installed. And we're going to do is this is going to connect our schema to schema from Zod actually has a lot of validation email is going to first make sure that it's a of type text. But then it's going to make sure here is going to perform all of the validation which if you remember, is a lot more than what we of this function here. And we only checked that actually do a lot more checks and will only is great because we did all of our work and then for the password, we're still checking have is dot min eight. We're basically checking exactly what we had defined here previously. So of our own custom validation. So we can come here just use the register like this, like so. We can remove everything. And now our code looks a lot in Zod. And we don't have to do it ourselves. If we actually get the same error, although it has a from Zod. But it's saying that string must contain in here, it's not going to get removed until we it's going to say invalid email. I can type a symbol. It's still invalid email. But as soon as is now a valid email. This is the recommended way in React. Using React hook form, you get a lot all of the state management, error handling, and you then outsource the validation to Zod so one of the little benefits of using Zod is types. If you're using TypeScript, they can get find yourself building a form in React, consider your validation library. If you enjoyed this like these, make sure to leave this video a big Or you can click here to watch a different video really going to enjoy. With that being said, Solutions. Thank you so much for watching. And