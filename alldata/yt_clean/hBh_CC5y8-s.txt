Java is one of the most fundamental that anybody can learn It is a Marvel what can be achieved Hi everyone. I welcome you all to this Java by Edureka, but before we begin, let's look So we're going to start out by and why do we need it? Then we're going concepts like variables and data types in Java followed about operators control We are also going to discuss of this session classes objects and object oriented in Java followed by which about exception handling then we're going to discuss and finally close this Action in Java also do click on the Subscribe button on the hottest Technologies by Okay, before we start off I am vinoth and I have been with this industry into Java development Alright, so the first topic is So what are we going to cover So it's going to be what Java is all about will have So that you guys You guys can try your hands and variables in Java. This is pretty much similar to what we have in other about Java data types as well, which is nothing but data type as we have the it's a storage right or the data that is store whatever Song is first put into memory and that is what So you have different storage is like for character you and for float you will have We will have something else sort of data type So so you could convert to other data type in Java. There are implicit We're in the programmer Java programming by itself would which is implicit conversion which programmers have have to explicitly mention that you have to convert to this data type. And if you don't do it you would end up in We'll talk about operators but the operators that work upon this data type and which is nothing So you kind of use for example Of two integers So you would have We'll talk about control well control statements. Like you have if else and for loops so we'll talk about it. So Java is pretty much similar to other programming it has some unique features which makes it really important in the current industry when it comes to Big Data So we'll touch base on all which would help Why do we really use it? Alright. So the first So what is Java so Java as we which has object-oriented So when I say object-oriented in Java is taken as an object. So object is nothing but something that has got State you have chair, right? Jed has got a particular State and it has got If you do something it would go this way and that way So basically any object if we think about for that matter would have and it would have which incorporates on its own. Right? So basically similar to that which is based on object So everything Java or you define a class. So say for example So house could be thought of as an object or class and it would have like number of rooms So that is nothing So this was actually brought and basically Java is nothing but we have jvm but jvm of kind of can say it's Sun Microsystems has said so that any company tomorrow I can go and create but it has to be aligned that is given So Java is nothing of java is provided but nevertheless as I said give him which anyone can Implement Sun Microsystems talk about that is nothing but one So everything in Java and behavior and Again, it was started off by and we know it's open source, which doesn't stop anyone I want to still we have lot So it's not that you created by Sun Microsystems and it's been used You have like find if they want to have in the open a particular So right now we have which is like we have lot It's a evolving thing And as I said, If you become a good you could go and actually and which would be and which would be put And anyone can use it the very important feature or why Java is so widely used is So you write a class and you compile it and this particular Be run anywhere on any machine this particular compiled which is nothing but classify we you did not get into But just to say that you compile it you get and this compiled version of class could be transported or you could put it so you could take it and go anywhere and plug your pendrive get this class path or download this class rather and just run it so it right and the magic part is it It could be run on any platform. That's why it's So I could write a program today and tomorrow I can just take it on Linux as well. So you don't have Java by itself has a feature So As you could imagine this it's been widely used because since we of distributed computing, we cannot have everything run You don't know as a programmer write something but you don't know where this particular program It could be on any platform. So this is why So unlike dotnet, right? You need to have Microsoft just to give you with dotnet so for.net Microsoft stack implemented, but for this you need So Java can be used that may run or can be distributed among servers and clients As I said, this is more of platform-independent So it could be used on any machine you about which machine All right, so let's Earth so what features First thing is Java is when it comes to SDK or when it comes It's pretty much simple. It's kept as simple as possible. It's pretty much similar and it's verbose. So anyone can just read what it is trying to do so they have kept it to any high-level languages, right the coach as you read through it. You should understand what it is doing and that's Its high-performance. One of the things that I It's an evolving system. It's not that it's been throughout its evolving system. So as and when this continuous so as then when if I as if I find something not working as expected I can raise a ticket and they could go or there's a Java development. Which has been driven by Oracle. Now, they would look of this particular stuff. And if there are a lot of tickets been raised by And if something could be done on the aspect that you raised they and notify you in a particular release and stuff like that. So it's a evolving system the performance is always if there's some drawback or as expected they would surely Rectify it So that way it keep it up the high-performance thing So Java basically runs and no one can get So no one can intrude it. I would say so that keeps it free from virus or untrusted process. And other thing that is important is pointers so in see There who could get into the memory and can manipulate the contents Right? Whereas in Java. It doesn't expose the pointer. It doesn't give you the pointer So you can't actually go of a memory location so that keeps it secure. So it's robust. So Java checks the code during So basically what happens is as I said when you compile and whenever you try on any of the machines, it will ensure or if there's some issue It would say that it's So basically you have during the compilation as well compilation is nothing but if you have something if you miss the semicolon at the or an end of any statement, It would prompt you that this is not would ask you to correct it once you have everything as it would compile it and when you put this glass file during the runtime And the other thing is about you don't have to take and releasing unlike Java by itself does garbage collection but when a particular memory by your program of goes out of scope it a thread I don't want and stuff like that. But Java would enough You don't have to explicitly it and see you have It errors in Java. It's done by itself. So that makes it robust as we already spoke. You can write You can run the same program in Windows compile or the compiled version on any platform. It could be Windows. It could be you run it or anywhere so you don't have So Java by itself does it and that's where jvm comes about in the the further slides. So other thing is it's Dynamic which means that it has So all the objects It's not just that it's done There. Is this something done So basically it's called But just to keep in mind during the compile time during the runtime as well. So it could be You don't have to have into one machine and run I could run something written If into net in the same network to a network we could run So that's what distributed So you could think of big data. So this is one of the major features why in big data, right? So big data is nothing of data you have like petabytes of information coming or every hour or every day, right and you want So it cannot be done if you want to run as we had earlier, right? Everything was monolithic on one machine sort of so that's where you would want Now. The server thing is it's not being used that much Intense stuff like that. So distributed computing like pure computers that we have and programs on this machines than having a high-end machines. So basically this feature is what helps Java And as I said, it's run on commodity Hardware which needs a lot Java is multi threaded nothing but so you have right? You have like four cores So you could utilize all this you want to do addition and multiplication of two So you don't have to run So this could since you have four processors you could have and you could have at the same time You could have this You could run them You don't have to have You don't have to do it when you're operating So that's what multi-threaded As I said you could have on different course Object-oriented again everything is performed can be easily extended since it is based Now, let's talk or which industry sectors So you have Android apps. So Android apps Cal So basically the underneath which is similar but Java development kit. It's widely used If if you would have You could see that mostly all Financial So the Legacy systems that we have in financial developed on Java. So one of the aspects about it's pretty secure. So that's why it's of global investment Banks. Like Citigroup Barclays Standard use Java for writing front and back office So one of the main features in financial industry It provides high as we spoke earlier So basically you have your application would be hosted and you could request or JSP is nothing but in the contents could change for some particular JSP and you could get it you are trying to log on to a particular application that is nothing but a JSP. So basically a mini is developed on Java as well. One of the main features why because you have a lot Java you Have on a particular web server and could access it You should be Embedded system when it comes It has to be lightweight, right. So Java it I remember of feature making it pretty much to embedded systems. So basically you have What we are talking here that we so there are So one is j2se, which is nothing and which is standard edition, which you have like all like that all four loops Right that is about j2se. You have G to EE which is nothing but the web application that which is micro Edition, which is nothing as its name suggests, which is light in weight. And as we can imagine it has to be lighter right and you cannot have So that's why when it comes to j2me. So again as I touch base and application servers which makes Java compatible So we have Apache Tomcat which is pretty much widely used Now, they have Apache Tom e which is nothing but application So basically when it or application servers, what you do is you as a client could send and web server or the application server this particular request and send the response So basically it would serve So you have Again, this is which makes it favorable So all these J2w. J2se, this are nothing but So if you as a developer or if you want to write your own So where is Java used So I as you could imagine you need to have and precision rather. They could be and mathematical computations because it's very When you do a very with high level of high degree. It needs lot of CPU time, right? So that's where Java is good at. So basically this is about as utilizing all the course You have four core processor is been done by or through threads you or actually utilize this for course to the fullest big data is nothing. But as I said, it's distributed you cannot have which was the case earlier. You would have one server put up and everything is done Now, it cannot be the case. That's where Big Data comes have distributed architecture and you have this data being processed across Network and mind you as I said, this machines are and not server level Hardware or the Enterprise level Hardware which makes Cheaper Internet of Things is coming up the booming thing wherein you Say, for example, So you could so you could have which could emit data and you So basically it's all connecting for example, let me talk So earlier if you remember it were all pure right. It could just be used Now internet has started wherein you have all and if you are connected you could go onto Google or whatever you want to sort of So basically this is what So consider this It could be any other objects as I said so consider and it is emitting and we could utilize and do something can know where the other car is. So that's what internet of thing is about all about Let's start off So basically you could go and just download the SDK So basically based If you are using Windows, you have to select Windows if you have mac, So this is pretty much similar to other softwares you get and you just have So basically I can show you So I have downloaded as you could see here it is mentioned as Windows. So this is nothing which you could run and you would have So it's pretty simple. It's pretty much similar to other software's you or I could just show where it is installed. So if you get into you can see javabean And it says jdk 12. So once you install Java, once you download once you install this should be able to see in your program files. So it shows here. It's for you can select whatever as you could see here. This line X there and stuff like that. You have to select on and should be good to go. This is done. You could see you get a exe So basically to run Java yeah. So you go to the system you have and you have to click Basically, what we are trying an environment variable right and what we are going to set So you have if you want to put it specific can put it here put it or you want it You could basically put in the system variables. So once you install it that you have this particular path being put in So basically tells the OS that you have executables within So once that is done, once you have let me open a partial. So partial is nothing but it's pretty much simpler but it's a Linux flavor of it. So basically you could run Okay, so I will I Give me a second. Okay. So with partial you can do LS which would give you a listing You have to give dir. So it's basically So once you have once you have if you write Java here, if you write Java you should be able to see So if it's not properly set up, you won't see this it would give Yeah, open command prompt So once the path is properly set So let's set up Eclipse as well. So it could be eclipse or IntelliJ whatever with so you could use since IntelliJ has You could use IntelliJ as well. So you go to Eclipse download and whatever flavor you Whatever flavor you if you if you want If you're trying to do You can download So basically for simple purpose for whatever we are going So let me quickly open but the IDE integrated that I use with just IntelliJ all the IDS are So IntelliJ similar to Eclipse, So basically what you do is you have to select a workspace but all your program all the class files all that you write would be put and you can create So when we get which is the first program about it would give on what we are talking about. So let's talk how it looks like and all the features So basically so far what we have covered is more oriented program or it uses Paradigm which is nothing but everything is thought of as and behavior right That's why it's been widely used That's why it's been used in It's good for since its platform independent. You don't you just and you can run it everywhere. So basically this platform what helps it to be widely used So let's talk So what is jvm jvm is nothing. But again, it's You could have your own jvm son by itself gives This is what the GBM I could create my own jvm. But we usually we use of sun Microsystems Oracle now. Right, so jvm is that runs the bytecode. So basically there has to be before give him So that's where you And so what this does is nothing It takes the class files as that you write as is so Java compiler and kind of compile it dot class file is nothing and compiled version And this dot class file is nothing but it's also known what a jvm could understand. So once you have it could be sent to the jvm and jvm could understand So what makes Java this Java compiler is platform. Pendant you don't have You just have And whenever you want to run on any of the machines, you just have to have jvm Right? So basically if you right if you want you would have jvm or you would download And if you want to run it or Mac would just have for that particular platform and it should be able to sense So basically this is what makes Right? As I said, once you compile it this or ported into any of the machines and you should be able to run it that is what it is all about. It's right ones So as I earlier As get this class file and take it anywhere and you could just and just run through that's how simple it is. So, this is Java in you have set of jvm plus you it does nothing but you know, although programs put together for Java put together. So our T dot jar is which would have or you have you till classes is a class itself, which is exposed by Java. So this particular jar file or it's a Java archive jar which is set of java classes which would have lot in our T dot jar you would have and stuff like that a lot which is been used by the sea. Some are which has been So basically in JRE this is what you have jvm plus other additional files. So as spoke jvm is nothing but all these things and stuff like that does not contain tools and utilities such as compilers or debuggers for developing So GRE by itself so it doesn't have compilers So jdk is nothing for development you It's JRE plus development tools and stuff like that as well. So to run a class file, you just need the JRE but you would need jdk so if you remember that was jdk right jdk So basically if you see So essentially you need jdk only if you just want to run so why is jdk GRE and jvm as we spoke about you It has everything right GDK Plus it would have It's JRE plus your As you could see here details It would be really If you directly get but basically you and Jerry is nothing but which has jvm or RT dot jar as we said which is nothing but set that is exposed by Java which could be used right? Let's see how it works. So basically you have So this is what a developer would create a DOT Java file. So whatever you write You just create a new class What you get is dot Java you So basically this whatever you write you as a developer would Is would be sent for compilation done with your coding And once the compilation looks good enough. Once the compiler doesn't Mark anything and which means everything You will get Java bytecode. Just nothing but dot class 5. Now. This dot class file or you could as I said, you could just put it and can take it anywhere and you could run it You just have to have jvm. So basically you which is compiled on Windows. You could run it on any of the environment So this is something that we There's a verification as well. So so when classloader would it would ensure that it is up to the Mark sort of so if it all it then it would flag it off as you know corrupted So this is nothing but Java class file libraries about Java archive. So this is what is happening. When you run a particular So you have this class loaded just-in-time compiler So basically the part of jvm so but it's a platform. It is specific to platform. So basically for Windows you And for line X you So yeah, you get this class you load this class and you run through through the class files. So typically this is how Java operates so just So you have a source code you you compile it you and you can put You can run this class file or wherever you want to you just and on the machine What would happen is you load this class file and with jvm jvm would which would run Right? So what we are trying to do the source code that's written on any on any other environment. So basically you You could write but you could run it So that is what makes So here let's create one class and as we created I so that you could open and could create something so it could be a bit different and feel might not be but you just have to create So basically I could So whatever you want like it has to start which is camel casing right? So you should follow That's one of the best practices it won't flag you as but that's a normal whenever you create It has to use camel casing So it's creating And as you can see here, I have this particular project What I do is So basically as we said everything could right that's what So basically what I would do So this is my source folder where enormous Source class So as you can see here I create calm dot Ed u-- Rica. So this is nothing or the package, right? So you could give whatever to avoid collisions, right? If we don't have a name space within the class. So there are a lot on the same project right so I Class A and the other person So when this is club together there would be Collision what you have is you have a namespace. So I would write as calm The other person and that would avoid class name So this is compounded or namespace and hello So as you could see here, there's a package calm which is again a namespace and there's a class by name Right? And if you want to see and so you can see created here in the source. So this is your Source folder There was a source folder So if you go to the source folder you or you could see a directory which starts with calm and within calm you and here you can see So remember we said that your source code So basically this is This is a method that the default method So when you run jvm would actually look out So you need to have as has so you would have a main method wherein your program So as then when you compile so basically when you compile right and when you run this class file jvm would check that has the same That's a main method and your program execution So basically it's a entry point So this would be a simple program wherein we So basically you have like system system is how you print in Java. So I don't want to confuse what is system but basically what you as I said everything So in Java everything So basically you and you could see This is the source code from our T dot jar We spoke about in GRE. We had our DDOT jar. We had Jerry we had jvm So all this has been written So basically you can see here. This system itself is a class. So out is instance variable and println is nothing what this statement as nothing but writing So let's print hello world. So basically when you build as you could see here. It's saying it's building it. So once it has built it you Right? So you could see here This is because we built it Your Java file would be and it would create And remember as I said, this class file dot class file So this is Windows machine that have written and compiled on now. This dot class file could run that you want to run it on. So, let me talk Right? So you have a public key word, which is nothing which gives visibility. So basically what we are trying publicly could be publicly seen so it could be seen anywhere So basically for class level as the name suggests. As the name gives out it within your application that the visibility All right, so you have which is for the class. You need to have If you write something else, then it would give you So it has to be All right, that's Hello is nothing then you have this public which is nothing but as I said, this is the entry point or your class file. So when you run it would start off from here. You have a static keyword but it's at the class level. So basically you We haven't reached So basically hello is a class and you could create which is nothing So when you have You need not create object if it's not static, then you need to have So basically what I'm trying to say is see you have which is test. Now this doesn't have So basically what we yeah, this is a non-static We cannot call it directly. If it's a non-static. You need to have a instance So basically how you but hello world. That's your hello world object. So when I say about creating object, right and you could create So object of hello world is When you do this you What I do is so basically what I was trying to say is as is if you do it you would get that non static method test from a static context, right? You cannot call it So basically I can call it on Hello World object DOT test It doesn't give I'll create one which would give you some idea. So I will rename this and this would be static test. Right and we are printing and here we are printing So hello world Now, whereas the static test so we could directly Sorry, I haven't So this is a static method. Okay, so now you could see here. It compiles fine. Right? So what I was trying to say is when you have a static object to call it. Whereas non-static method That's what the static Then you have void is nothing it's not returning So that's why it's void. You have main method. That's the key word that the entry point You have this arguments. You can see string which are arguments provided So you could pass as you want or for example, you want to pass your name as So this is arguments then we have main which represents which I already mentioned then we have system dot out but the print statement so as I mentioned system is nothing everything as a class system is a class and println is So basically you don't have to understand the structure how a particular class This is what we have. This is how we write just to brief on this which denotes the visibility You have the class name you have but the entry point for your class you which says whether you need an object to call or could be called You have a return type here. So this is how typically and you can write whatever statements you want to This case we have printed So basically you when you do it on Eclipse, so it might be a bit different that you would have but it should be All right, so you create So I showed this which is also widely used IDE. But yeah, you could use So basically you could see the project name right and here it mentions So here you can see class class how we can run this. So we compiled it and we saw Now we can run this. So as I said main so it would start So your program control And the first thing that it would see is you so it should print this one I don't want to let's see So you could see here. Hello world being This is where the program So it came to mean so out hello world. Then you give a call to So it printed non-static method which is been printed and then it gave and you could see static method So one thing to remember is from Maine and it just you So whatever content would basically write it so you could see here hello Let's see how easy it is So J shell is nothing that was created in Java version 9 since nine So since I have I should have J shell as well. So yeah, J shell is so it's nothing but into integrated workspace. You could have J shell and you could pry It's not something as such it's basically to test something right if you want to see what it does instead of writing So if you write a class you would have to write and then run it and stuff It's just a kind of interpreter some command and see So basically you could say for right so system dot Hello world, right what we typed into So if you want to run all this artifacts created as is right to have a class and then build the class and then run it basically just to see what's output. As I said, this is not application for the developer to test what the output for and what a modifiers in Java. So one thing that we saw in the program We already saw about actually and these are public So these are nothing as I said this public means that hello world could be accessed anywhere So here we can see as a board Meaning of other phase just trying to say that one that access modifier to control the visibility or a method as well. We have access modifier So this is just one of the things right we as well modifies in general has But when it comes to access controls the visibility or a method or so. Yeah modifiers here as you could see there is access let's see access modifiers. So we use public already. So this one is nothing which is public which says that it could be used visible to the world as it says public is nothing If we talked about if we talk about the visibility so default is visible So default is nothing but within the package So basically you could default is without any keyword That's a default scope So within the package it within the package. So you have like That's your package. Right? So this hello world if it has a default scope. It would be accessible only If you try to access it from some other package So that's the default the package private is nothing It is only visible to the class. So this is the lowest visibility If you try to access it within the same package because You won't be able within the class public It could be accessed from or anywhere within your wherever So basically if you but what I'm trying to say anywhere right protected is and all the sub classes. So we will talk So subclasses is nothing right say for example integer integer is a class as I said in object-oriented could be visualized as a class. So integer itself is So there's a number which is number which has all that a particular number so number is a super class and you have subclasses like Teacher float of number long would be Basically. This is inheritance, right you are inheriting integer from number class. So number is a super class and everything is So when it comes to protect it, it says that it is visible and of the sub classes, so just to keep you can think of access of a particular component or could be visibility of a method or instance This is what drives of object-oriented Paradigm. So basically we control the or we control the access of class variables which makes it encapsulated Sort of as you could see this is like I could make this one All right, so this It would still run Right now suppose I make Just to show you what or what this access modifier I make this one private right because it within the class within the class now. I create a new class we say axis modified test. So I create a main class Now suppose if I try So basically I create See I create Okay. Now this one is If I try to access it from here, what I was trying as you could see here it says that nonstatictest has So you cannot use That's what I was trying to say. So basically since it you cannot access it And if I remove this private now as we said default is nothing but it has got access within package you could see now it is accessible, right? So that's what is it is all about when you have It's within a class. There is default is within a package public and protected is visible and just the subclasses. So let's talk about This is not controlling the axis when it static you did So basically for static that we didn't create We didn't call static test It could be called directly. That's what static is all for calling methods and variables without an object as we saw we of our fellow world we directly nothing but you as the name suggests. You can't change it So finalizing of classes methods and so this is nothing which we would be talking about the slides to come just to tell you this is which we have assigned within this particular method I You would get an error saying that cannot assign a value So final is like its final once you have created it. You can't change it. But if I remove this final you could see You don't see Whereas by putting final So that's what So basically this is good enough So if you have constants within your class you so that no one can change you could mention it as abstract when it doesn't of all the methods. So what I am trying to say again a non access modifier for example, you have a shape class because shape doesn't say area of shapes. So basically shape class by itself wouldn't know what Is a class where in the generic what the implementation It would be Side Square for rectangle its length It's pie R square. So basically shaped by what it's area would be but now shape is a super class of it like Square you So now basically that when you create a subclass of the shape class that that particular class when you create it as abstract. So the shape method would have of the shape class would have which would be implemented which has to be ensured or if the subclasses it you would get a error. So basically Circle would have in pie R square square. Would have its saying Side Square. So basically what I'm trying to for shape class. And when you have itself is abstract. So you have like shape calm I'm creating a class now. I'm creating a abstract method you don't have It's just a chain break implementation of it. You just have So basically as I said, when you have an abstract itself should be abstract. So we'll have to make So you created a shape class which would have a area and So basically we want to have how the sub classes But basically this is You don't have but you are ensuring So here you can see You don't have implementation unlike this implementation if you write something this is an implementation whereas in shape class. You just provided but we don't have So that's what abstract and volatile is much about using threads that only one thread could get So as we said threads are you could have you could have read So we have as non right say this is a method. So what we are trying if it's synchronized we can make this a synchronized So this is what id is all about. So when you have this integrated you don't have when you type S why you could Put selected. So when you put what we are trying to say is at a given point only So if multiple threads one thread has to wait for it. So only one thread and the other thread So that's what synchronized is It's basically for what we are trying to say is has got its own cache. So what we are trying to say is when you use a volatile access in Cash Store it directly so that all the threats would get the most to a variable also when you have using synchronized as such so it's So let's talk about variable. So variables are nothing Holds value and variables are to that particular meal or it's a dress or something that is pointing to a memory where the squirrel use and you could access it using or you could access where the value is stored what I'm trying to say here is so this is a variable so this 10 is stored and you could access this part where this 10 is stored or you can manipulate it So basically there are this local instance class but local to your method or you kind of create that is nothing like it has the axis Particular method once control can no longer access that is local. So if I Define something I Define something here. So this is a local variable since its defined So once the control you within this particular method, once the control goes This is no longer accessible. Basically, this is where garbage collection Once you control goes out of this particular method and were dean of this variable or clean of this particular it available for use. So that's the local scope. The next one is instance instance is that is defined So this is instance variable. So since it's right this is you could see This is at the class level. This is nothing but is static variable as well. So this is how you define So instance variable is so you could go and change to something else suppose. I assign a value for T here now. I could have one more object this object one and I have Hello World object. So I create So what we are trying to change the instance So basically this is have an instance variable which is non static through objects, right? So throughout object one you assign for object one you to 44 object to rinse variable value to 50. I won't say Changed it. But you assigned it. This is how you deal It's at the instance level. It's at the object level. Whereas for static. It's at the class level. It's one per class. It's not one per instance. It's one per class. So basically what you can do of this sort where in its It's not at the object level. You are assigning value hundred So as you could see here, it's not a particular instance that you're operating just to give you a just which is within a particular remains within a method. Once the program control moves out of this particular method and kick in garbage collector to within this menu you which is at the class level, but it's non-static that it has copy. Per object when you you could change per object static is nothing but 1 per class and we change the value of So that's about variables. We have an instance. So instance variables when the space is allocated. I will just read So when a space is allocated for each instance variable We had a your instance variable and whenever you create of a class is created which is called Heap. So whenever hello for this instance variable would be treated as well when an object is created with the use of keyword when the object is destroyed. So unlike local variables, which is within Variable is within So basically whenever of a particular class, your memory would be allocated for that particular And whenever it's done whenever it's destroyed it would go off access modifiers can be given You could have like all the access modifiers. We assign to students variable. So basically you could have it as private private is just You cannot access it outside this class you which is like would be accessed you could have protected which is like within the package or the subclass and you can have but package axis, which would be accessible just that is calm dotted Eureka. So instance variable for numbers the default value is false for all. Big references it is null so values can be assigned or within the Constructor you while declaring it something like this instead of 0 is as they have mentioned. But yeah, you could assign if you put it as 10 here it would be taken zero zero Constructor which constricts an object of a class values can be or within the Constructor can be accessed directly inside the class. However, with static methods when instance variables They should be using So what we are trying to say from which we are trying in this particular to have object reference. This is Object object reference dot instance as we have mentioned here. So here as we can to a variable name. You need to have When you try to access it You need to have Whereas here within a method This is non-static here. I can access instance variable So here as we can see it if I do it here it It's not accessible here at all. Non-static Fields instance from static context not accessible directly here. It has to have fully which is object reference Whereas when it's called within non static method you as we spoke about so it's declared. Using static keyword. So static variables It is rare to use than declared final and used as either public it's mostly used for constants when program starts and destroyed when So one thing to remember It's not one per object We have a copy of that per object case of instance, whereas case of static So the scope remains are when the class is loaded in the class is unloaded static since they must be available It's not mandatory though, but usually if it's as public static variables with the class name. So we saw here last name So how do we decide what amount So these are the data types So each variable in Java which determines the size that can be stored that can be applied to the variable data types into two major types So basically primitive is supported by language itself, which is kind of it or its pre defined and named as keywords and it that is byte short integer. Then you have long float This is pretty much similar that you have by it These are 8 primitive data type It's nothing but string string So that's something that is non pyramid your own class C student We have defined student class So this student class has non for storing string, which is again kind We have arrays or basically it's all since referencing through variable name. This is where we have table and it's range is from - 128127 short is like two bites that it would be So it's pretty much similar that you have like in C as well One thing is characteristics I believe though. It doesn't use all On encoding type. So Boolean is one since it has to store 1 or 0. So it's pretty much similar. So just to talk on the bytes 2 bytes integer is 4 bytes long but it has decimal values So it again concerns for bites double is sign or sign decimal values which consumes 8 bytes and bullion is one bit. So basically so decide whether to use float of the application. So if you want to have if you want to have more range primitive or reference that holds a particular that represents a way to a memory location baisakhi. So as we spoke Java doesn't It doesn't give you directly but it gives you So you cannot manipulate You cannot add some values to the memory location but through reference variable and assign someone so yeah, it does not hold but it holds a reference address to the object reference type So here we can see string Str So the one shown in red is actually the memory You have a reference So here we can see So we have a main method again We declare a bite to 10 short s is equal to 20, so, I think it's You kind of have this data types to assign values to it. These are all Primitives It's primitive so you could see and it's been printed out here. So I think it's You can assign a value So again, we use system for printing it you You could try it out You could just assign something We are talking about So we have implicit and explicit conversion in some case programmers write explicit conversions but in many so the arrow in the diagram shows the possible that a permissible bit It's just with primitive data Those int can be converted since int X likes less space. It could be applied to any They have to be Whereas if you want you have to So basically we are talking to store integer into long and long takes more space. So it should can since long takes more space. If it is more than the range It wouldn't know So that's why it has convert implicit conversions. We can on the J shell So here what we are trying is we and you could see see is assigned a now to C. Which could be done to an integer. So basically it's So 97 is the ASCII code for see So now when you which works as well, so you get ninety seven point character to long as well, which is in bytes integer, you could assign which is 8 bytes float but it cannot be done as we spoke. So you cannot have integer or you cannot have double So it would our possible lossy conversion It has to be explicitly done. If you want to do that need So here we have integer with type Teacher then which is assigned value. Hello. So basically here you which is a reference variable to a plus b as equal to a plus plus since hello is a string so you could see hundred and hello being concatenated Hello the data type of both but to perform any operation we of same type here integer value and gets concatenated So basically had we would have got edition of it say for example integer B is equal plus 200 you would get 300 but since it's a string in this case and it is concatenated. Hello explicit type conversions. We saw the previous case where an double was being which prompted us So this is similar to that. So basically here what we are trying to do double to integer. So you have double D which is 45 right again signed decimal number so you assign 45 to it. And now we are trying to assign So it's possible but you have a provision So basically what we're trying to assign again double if you type casted so when I say typecasting it's then the destination data type To a table. So basically to the right that through explicit double to integer. So costing may lose information. For example, floating when they are cast two integers That is 45.5 when converted so we could see here we assigned the value but when we convert we got 45.5 Force truncated since the destination data type that's integer dozens Now, this is like which is there What we are trying to do here which is string into integer. So you have a string. As is equal to 23 you you this is this We have integer dot parse int which would be So this integer class that you see here but butter wrapper class you which is nothing which converts it So the you could see Now integer to string We have a tostring method which with converts So basically you have integer I Now you have which would convert We have one more method which is string dot value Integer into string. Let's talk about nothing but it operate So you have unary which is kind of pretty have C C++ you have post fix I plus plus or expression plus plus and the operator is that it would be assigned value and then it would be added which would be added first and then assign or the operation and then assign that's pretty much similar like multiplication division and plus and minus you which is bits shifting to the right you have than greater than less than equal to. Instance of Quality or two variables which check whether they are equal We have a bitwise and bitwise xor bit which is happening We have logical Basically, this is If you want to have like if int I is greater than 0 and int J is greater or you have logical anding between two conditions or illogical or to other programming languages. Like it's or We say that either this or which says that if the condition matches we by a question mark and we would have some value Followed by colon followed So what we are trying if the condition is if the condition is false instead of having it written in if else you try to put it So basically this is when you if you have a logic if you have some particular a better practice to have if else so that because ternary operator it would be very through we have which is equal to which is but adds the value to the left hand side to the left hand side table - equal to does the same thing. It kind of subtracts value to the the left hand side from and assigns it So I believe this is pretty much Languages there's nothing different in this we or the else should be pretty So let's see when X is equal to 10, so you could see X you have X plus plus as we said it assigns first so you could see So now if you after this you should see That's 11. So that's post-increment. So, let's see pre-decrement. So you have a been assigned All right. Now, you do - - A which is pre-decrement you And now if you print the value So basically this is like decrement and then assign and then operate this is Let's see the negation operation we negate it and assign it to the variable D that it's changed to false. Now. Let's see the You have B We have D which has value of 30. So when you add when you multiply it gives which is 600 when you divide it 30 when you have mod, which is like remainder, which gives you which is equal so it shifts to the left So basically you have if you convert this into binary if you convert the 22 binary which comes out So when you convert this binary To the left you would get So you have value 20, which is nothing but if you which would give you Now, what we're doing here to the left by 2. This is what you do and this is So this is nothing So that's what this Basically it shifting Again, you could have shifting which would give the value to the right by 3 would be Right? So you're basically it shifts it Yeah, basically it So now we have which is pretty much simple It gives false a greater Since you have a is equal to B. In this case. We have a equal to B. That's why we have a and a greater than b as false. But whereas a equal to equal we have arithmetic operators Basically you have ad you have multiplication you have So here we have So what we are trying to do to 20 now B is equal which is nothing but as I said, your left hand side would be and would be assigned which is nothing but 20 plus 40 when you print a it would print which is nothing but if a is that if a is less of Should be assigned to tr The value 200 is been than b logical operators and o-ring of conditions. Yeah, here we are saying that a is less than B and D is less than b and it's like kind of Now, let's talk about Now again, this one to other programming languages nothing different nothing So you have control statements if statements you So one is selection which is like if else if if this particular condition some execute group of statements and if it doesn't then execute that is about if else Which is nothing but like you to execute like say for example, you have you write a switch on Integer value Now when X is 1 you do you do something or you can have when X is either 0 that supports which I tradition is you repeat the same set and again till the condition till a particular condition So you have four Loops, which is like after every or the iterating variables and would be checked if it meets it would come out or if it made it and if it doesn't mean So yeah, this is pretty Other programming languages. So for for INT I is equal I plus plus and you write So this Loop would go on It would break it would come out when eyes greater than 9 It would come out while is again pretty You have do while construct which is guaranteed because the condition is checked after the execution is done once so basically no matter It has to be executed That's when if that's into your program you would use to Y is equal to once for sure jump statements which come out of for or any attractive statements which would again continue Of a method or are mostly from the methods so the control leaves what if Wells is then then execute If the condition is false come out of the execution or come Skip the conditional code. That's what if else is I is equal to 10 and if I is less than b so it's pretty much similar to so you could see here TR is equal to a plus b if a is less than b a is equal to 10 and B is equal You would have PR as So basically it checks if the condition is true it let's talk about If else if it if else construct is nothing but you have a is a set when the condition is So in this case if a is less than b TR is equal to B minus a so in this case is less than b so you whereas if a is greater So if a is greater to a plus b else TR in this case a is less than b so which means CR which goes into the and here you have which is 20 minus 10. So you should have PR as 10. So here it's pretty much same. It does the same thing we are talking about So you have switch expression against it whatever case So basically you So yeah, what we are trying to say here and we have a value for Value 1 as its value then and then break out and if it has value to then and then break it doesn't match with value 1 and value to then So one thing to note here is of it would be executed Make sure you break out of all the the conditions so you could see integer We have a switch for 40 now. Is when the value of CH case 20 executor when its value is 30 then we when its value is 40 then we would have and then break out and if it's neither 20 30 or 40 is executed with says that 20 30 40 not executed. So in this case since it has a value that case 40 executed as but it is basically if a condition is met until the condition is true. The code would be executed it would come out of the loop. So basically it's So after every Loop and if the condition And if not, There are three types simple for Loop similar. See like for INT I is equal to 0 I is less than 10. I plus plus would be or an enhanced for Loop basically I treating on array list suppose or suppose you have a re right? You don't have to since the typical scenario with arraylist is I treating within the list. So we have an enhanced for Loop wherein we don't have Java has come up where and what each iteration of each element which could be used So we don't have like we don't have till the sizes met in the loop through in the size basically it Done We have an example So simple for Loop is as I mentioned you have to 10 is greater than 1 I minus minus so it That's a simple for Loop. Now. What's the Syntax for it is Then you have initialization. Then you have a condition or decrement whatever or you could even add up like I plus equal to 2 even It's like for each even number like incrementing by 2. Now. This is what I So this is for each Loop We're in a typical You kind of eye to it within the array and then do something So this is what Java So basically you don't have if we wouldn't have had What you would do is of the array is Matthew from each indexes right? But in this case as you could see and for each Loop the value within the array would be and you could use this variable within makes it pretty And as I said, this is typical thing that we do with arrays now labeled for loop it's not but still we have So basically it's like go of each for Loop. It is useful we so that we can break for Loop normally break and continue keywords continues for the loop only to give that this should because it becomes If you dry run it it becomes very difficult what's happening within so and all this could be done Sorry using simple So we should avoid it as per my experience is So type of while loop we have SIMPLE while loop All right. So simple wire Loop is first if it meets then the looping whereas do-while Loop is kind of for sure and then if it is met then If not, then comes out. So this is a simple while loop so you have conditioned while a is greater than 1 you print the value decremented Within Here so no matter what you and it would be incremented. So it's 2 to 9. So no matter what some value when you use do I now which is breaking slyke So as we mentioned that it comes out of if a particular thing is met for a particular Loop than continuing it. So basically you could have like you could have infinite Loop say for example if a particular condition of it a typical scenario where it would be used. So here you could see which I traits from where I is equal to 10 and which we are Whereas you're saying that if I is equal to equal So here you can see though eyes greater than 5 you can see the since the value It's not printing because it broke So basically this is like if a particular condition is met and you don't want the loop out of the loop when you write continue, it goes to start it starts the loop again and it skips the messages that you have after continue. So in this case you could see that we have I equal to in case to 5 We are continuing the loop which means the print statement for I when I is equal since you're continuing it. So basically as you could see You can see the 01234 and there's no 5 here So basically what we when I is equal to 5 don't execute Just continue. Just keep it. Okay. So what a methods if you would have written function or if you would have if you want to if you want to do something or if you want to do something you would write a method. So basically in Java methods of a class. So remember I told about State and behavior. So methods are nothing but it So what are methods or method Of course, as I said, since it defines the behavior some operations done, right? So you define the operations It is much more used to have that minimize redundancy. So imagine if you you have written the same piece Say for example, you have a method And if we write the piece of code to add two numbers if you want to write it again, or if you want to again you will have to write in the main method. Whereas if you have a method what you would do is and take this add which adds two numbers into a method and this method within the application which is nothing rather than writing Now, what you are doing is you into some other method which could be called So that's about redundancy that minimizes redundancy of a code a class as you could imagine. You could have into a class which means that you would potentially have A method returns a null or a value using So basically the intent of the method is to perform So what method would take and do some operations and it may or may not return something back So if you don't want have to return null or if you want to return some value you want to return string of a method you which means that the method to the calling program. It is doing something the control would be back but it won't return anything that's about method. So let's talk about so of method So the first one that you see so this is a method which is public int and it is just concatenating that we have sent a cross. So basically let's so what is public but again access modifier so public means could be accessed from anywhere So that's what public could have private. You could have default scope or So public is accessible anywhere within the class default is and the protected is and the package. Okay. What is this int it is nothing so this particular method Arguments and do something right name of the method That's the name of the method. Okay. So what do you see after the method name is that this method takes so what this particular method is doing is it which it is acting upon right? So it takes integer that's the parameter list. So whenever you want to invoke to pass arguments in this order. Now, what do you see within but the behavior or this is how you introduce a behavior how you add functionality So what you are doing these two numbers. So what is What does it do? So written statement is nothing but you do something whenever controlled comes It does something and you return it back So the written statement that terminates the execution of method and written So when return type then the method does not return you won't return anything out. But if it is written in string or something you or null if you land it could be null as well. So here we can see which is returning void. So you can see any arguments as but it is just that I do recall welcomes you in the second case you So it's taking int A and then it is printing out and it's returning So let's write a program sample and we would be writing all So let's start off All right. So we define a class Rica Dot and a typical name for with all arithmetic operation So I would write For example. Alright, so here you can see There's a package at Eureka and you have and it follows camel casing so it starts with upper case So you can see the class Okay. Now what we are trying to do is which takes to number. Okay. So say I Define All right. So this is access modifier. We want to keep it public. So you want to access this particular method from So I'm keeping this public. So typically addition You would add two numbers and return results So that's your written type So you could either write or you could write it So basically wrapper class has its own everything in terms of classes. So integer has its own class int and integer that you see here. Is a class corresponding int as integer and add is Okay. Now this takes two arguments which is arg1 and let's put All right, so we start Okay. Now we have to write So what you see here, it's throwing an error are not returning integer out. There is a missing because in the signature this is known as method signature that we have defined So in the method signature that this particular add method out of the body, but still you So basically to get rid which means it's doing that Got rid of the error. So let's do one thing just I will write integer result So this is a method body So you are adding You're giving Behavior So by defining add method that you are introducing now, you could have which would take two numbers which is again giving some sort So that's the reason we say that methods add Okay. So here it is taken two and we will return All right. So this is a method But so far we are not invoking We are not calling and check whether So that's where we When you type mean it should that are you trying So if once you click IDE by the IntelliJ You would get an option, you know, it would give that we want to All right, so we have So again, it's and it's taking arguments here. All right. So remember I said Method you can see when it's a non static method of this class to invoke it. So basically first thing that I do is I create so how do you create It's with new keyword. All right, you create new and it would create Now I give a call to add method and suppose I want Okay. So these are the arguments and it has to be since both are integer. It doesn't matter but had You have to ensure I write string here what this would return right addition of two numbers. Now, let's print it out This is for printing result of addition is flits that we get here. All right, and let's end So basically you have within the package and actually it's my bad. I should have defined So it gives my it gives So earlier I had defined calculator with income I defined a package computed So yeah, you can see here which is nothing have public class calculator. So public is nothing for this class plus is the keyword used and calculator is Also one thing of the Java file should be same So that is something that IDE or IntelliJ You just have to create class So basically if you go you would have something Then you have public method here's the method that we have defined public for this method integer is the return type add is It's taken two arguments you are adding two numbers which is integer which aligns to the signature All right in the main whether this add method What you do is you create You add two numbers you and 30 and we are going if it returns as expected. So here basically it since adding 10 and 30. So remember while it into a class file. Okay, the dot Java file if it's properly written it would read dot class file. All right, let's wait Okay, so it's that we have an other methods. So let me do one thing. Let me delete other classes So I get go to the Directa. I So I am just that we defend yesterday. So that we don't spend time in So put it into a backup folder. All right, so Okay, so we have only now I run this. So yeah, you can see here. It has been tested result So basically what it these two numbers 10 and 30. All right, so that's So we are adding two numbers. So let's talk about the sequence out by Java right when you run how things work out The first thing that's been called Okay jvm is nothing which runs the program for you which is part of JRE When you run a particular class, it would search for a main method and a main method then it that a class can't be run. So it's pretty much similar So if you're trying to run a class it has or you won't be able So that's where That's the entry point Okay. So once it encounters Main and everything is good executing the statement. That are there Okay. So in the edition case that we saw within the main the instance of calculator So when we ran that particular that the addition was done. So basically what's happening you know jvm would execute that you have with a name. So again coming back within the main you right when you invoke add to the add numbers method and it would again you have put within it was addition of two numbers. So it would execute It would return whatever So in this case, I was was addition so it would return addition of Program so you're calling method was the main method wherein you Okay, so it would come back how it prints it out. So following the invocation that we have printed that comes out of how it gets printed the sequence of execution Now what are the ways in which There's call-by-value call by value is nothing but instead it passes the value Okay. So this is similar to call-by-value and that we have in see okay, instead of passing the memory reference or instead It's just a value So if you change something if we change the value that's been passed within the method only whereas the main copy but basically call by value but not the actual reference. All right, so to understand this would give you some idea. So say for example, I have integer ARG to 10 integer ARG 2 Okay. Now I pass ARG 1 comma arg2. So what's happening here So suppose you change. What I'm trying to say is here if you change arg1 Okay. So what we are trying to pass this to arguments and within the add method we Basically we would check whether this hundred Okay. Arg1 here would Let's see what happens here. Okay, so I print it. Okay before passing it by value. So I print arg1 here. Okay, and after I give a call I would again printed it a value to a method so let's run this so basically since its passed by Okay, so that's what pass So here you can see arg1 after passing was again 10. Alright, so the change that you made here So that's pass by value. All right. So this one more concept of You could have same methods with different number when I say same method which would take variable Okay, the overloading happens So during compile-time jvm are actually giving a call based on the actual parameters you a fair idea about this I C ad which takes let's keep this adders. So I defend So instead of two I Define This is nothing All right. So here I Define ARG All right, so we sum it up here and we return it back So one thing to note here compile time error, right? So you can see that it has accepted So you can see here. The signature is only thing is we have which is a RG3. So it is treating this true That's what method about suppose I Define Alright, so we have I am giving a call If I put arg1 arg2 the first if I have one more ARG 3 now or the second add method So let's define result So here we say. Okay. So as I said, we have overloaded the add method overloading is but different arguments of arguments or it could be You could have only and one is something else if for example string that also works so basically A number of arguments but different data types or Alright, so here we are adding three numbers So it's going which is nothing but a tea. So this is done As I said this linking is done So here you can see results from new add methods You can see that it invoked and not this one. Alright now, let's start off What is the concept of arrays? So again, this is similar arrays are nothing or grouping values Okay. So arrays are used of storing multiple elements Okay, an array is group that are referred So you define a name and in the future you can use Okay specific element in an as you could imagine since we are grouping you right you could add or you could delete something or you could add it to the end insert it or just so something or just search by index rate index and get element So we would be looking you a clear idea about this but basically array of or its multiple elements of the same data type and cannot be changed. So in Java when you define an array you either give that you can store in the array, which is nothing or you have to give the values that a particular array when you define it. Okay, but all in all that when you define an array which cannot be changed of the array has to be mentioned So here's an example for which has four subjects of four subjects for a student. Okay? Here you could see indexes which says 0123 it's It starts with 0 So basically this array is from index ranges from 0 to 3. All right the value but the that's a marks which is like 87 60 70 and 80. That's the value that when stored Okay, we can access any of this indexes suppose at index 1 you could do it. Do you need to define a front of the array of front? This is how it's been done. Okay. So this is So we saw how we and stuff like that in Java. But here we are All right. So this is an integer array and you can see Alright, this tells jvm that we are trying Alright. So again, we use which is nothing but Nu new keyword is used All right, and here we are defining So this is one way The other one would be when you declare it that particular array you're not giving the values which Those some some amount of memory right jvm would of memory or in this case. It's four bytes right array. So for integer, So it would Reserve 20 bytes All right. So in the second case as I said, it's directly initializing the array it's putting into the memory location still but the second variant directly initialized. So when you declare an array of indexes would be from 0 to 4. If you try to access index 5 you would get this exception but a anomalies situation which is not expected as occurred in your program and Java expresses such event You can't access index fi. So different ways We saw that it's All right, so you have new int of size 10 again. You could either have at the end of the variable or you could have it and the variable name. So behind the scenes it It doesn't do anything but these are different ways in All right, the third one where in we have Alright, we are putting into this array. This one is again same you are you can see that you are not defining but you have an initializer that you want to put in So basically one and two That it declares the array of size. The first case is 10 but behind the scenes It's nothing different to actual preserving memory It's doing the same stuff and three and four only thing is syntactically it's varying but is GBM doesn't do anything So the length when it is declared and when an array is declared All right, so if you define an array and of it you could see We have declared when you do x dot length, when you print it out you All right. So what are different types again similar to what we have we have single dimensional array and multi-dimensional array is what we saw earlier of integer of size 5 that is So in this case, you could see a array 2 4 6 8 and 10 that's since we have just Say for example, you want to store marks or marks towed by a particular That would be All right. So say for example, the first one is The second one is the sign All right, so So now what's multi-dimensional of storing marks code So by a particular a single dimensional array, but suppose you want by all the students If you want to store it, it would be So one particular row that you see here would be by just one student The first row would be The second row would be would be by student So that's where you of multi-dimensional array. So how you access it is nothing but you want to access the first index it and this would be of 0 1 if the First Column is for math if it's a marks secured in math that you see would be marks secured by all That would be the First Column whereas the first row is in all the subjects. So basically This a table in a database, right you have a table and columns so but you have Fields that you have that you have within a table. So This Could Be Imagined So you could see how the indexes when you go down and Y increases as you go to the right so for single dimensional array 1 integer value takes So now when you declare you would have 20 bytes Reserve. That's how memories if you have a character it would be ten bites since each character So you would have All right, so that's about memory location a location and when it goes this case you have right you have array of 55, which means that you have within the array right 25 integer element and each integer value takes So it would be a hundred bytes. All right, so if you have array of if you of 5 into 5, you would have basically a Let's write some programs and understand more about So we have an array All right, as you could see here 2 4 6 8 element at a specific index. Okay, so you have an array and we want to access it. We want to access All right, so let's write All right, I Define so I don't give because I am defining so you could see here because I right and then created a new class. So yeah, you get I Define a main method as a type main it So this is the entry point again and suppose I Define the jar. Ray and suppose right so you could see here. We have an array Okay, and you have So what I was trying to say of the array given If you don't do that, it would show you an error so you can do something like so you could see here All right. So either you will have or give some value to it. So if you put here that it compiled right? So either you will have or the length size of the array or the ways Now you could see So what I'm trying to know about the size if it doesn't know then it All right, so we have defined as is okay. So now we have defined and we have initialized Now, let's try to print So just to keep It ranges the index in this case. So this value to is stored at index 0 value for is stored at index 2 value and then is to that index So let's try to print I want to copy it. Yeah, so I'm just sprinting what it gives up. Right so it should print So you could see Now. The other thing if you try to access what happens there. All right, so if you try to access at index No, it should give in Java exceptions could be nothing but God and you So here you could see that it gives it gave you array since five doesn't exist at all. The index five doesn't exist Okay. Now let's define to find the length So let's define Alright, so we have So how you define something like 1 2 3 4 Alright, so this is a multi-dimensional Okay, so we have defined the size of this array Right 2 by 2 is since you have two elements here or let me put it Let me put it this way. So right now we right so you have like All right. So now let's print actually Okay. Now, let's print the size So how we do it is again println now you and you have 0 so 0 to 1 refers Dot length, so as you could see that you have itself is an array is So multi-dimensional array of single dimensional array. Okay. So let me print here I miss Plus. So as you could see here, there was an exception an exception you won't have this since there was exception here. So basically to execute you should handle but we are not talking So I'll have to comment So now you could see that it has printed out to which So this is a program that we actually did right many characters write from created array and also write a program to Okay, so I will just talk So we have an array here So basically when you want to what you will have to do is you will have to shift You can't delete something So what you will have to do is if you want to remove to shift the indexes what happens is suppose you have and suppose you are deleting Now. What you would do if you are deleting within the array you that follows the second element So the third element What would become third and the fifth one So basically you shift it. That's how you delete All right. So other thing is about copying we have a utility class which is nothing but So as you could have seen that when I'm printing out out dot println, right? So this system it's where an IT exposes lot of functions within a lot So one of them being our a copy, so here you have to give source and the starting index and what we are trying so this is how we copy from one array into So this is copying that you see here So as I said deleting is nothing but we have A logic the indexes to the left. So here we are trying are just shifting elements That's how we delete Now. Let's see what our strings But again the data type So why do we have strings at? All? Right. We have array of characters then So here's an example where in you have lot So you could imagine who has to analyze through lot So nowadays, it's like petabytes of information being processed right which would be if you had to deal So that's where that's where Java has come which is nothing but you don't have by Itself has a class which would take care since strings are widely used within a program you could that any identify that we have is mostly we have So one of the data types that widely used within industry in programming is string, right. So Java has some kind of string management that programs run or make Okay. So here what's been mentioned and he's finding is really with character array to store so that's where we have string. So string a solving the problem of actually dealing So Java is actually having character array or the characters in the string but It doesn't expose it You can just use but you don't have to deal So Java string is nothing they are objects Once the string It cannot be changed. This is the immutability We're in once you write to it. You can change the value. So this is specifically to multi-threading when you have multiple threads or same string. So that's when immutability helps us to make sure multi-threading is it's thread-safe we call because multiple threads because it is immutable. All right. So what are different ways So you have string Str which we are not initializing which could Any value and you to Ed Eureka wherein you of the string right away. The other one is similar to the integer array We have character array as well. So immutability of the string. So why do we have immutability So string stores lot like even the credentials which shouldn't be accessed So this immutability factor of string helps us so that no one else So this is what I spoke about when you have multiple threads you don't have to synchronize through its immutability that multiple threads without hampering it as it's expected. Shing so caching is nothing So basically if you have it won't store it. It won't store There would be just one copy and both this references If you happen to change one of or it would create a new value and point the other reference what we do is why as you could as I said string is and you could have to the same value of a string. So we don't want to have That's where this caching comes memory efficiently. So what is shrinking pool as I said string pool is that you define within the application in the string pull string tool of string stored So we have heat memory. We're in the objects where string pool String pool is Possible only You can't change You can change it. If you change it, then you can change It creates one more entry and the reference would point So the actual memory location That's what immutability is all in Saving lot of space We are breaking So if you have multiple strings or if you have multiple strings it won't create. People copies of it there in the string pool, which would be accessed So basically string pool as we discussed is So string is not a unlike character character CH AR is a primitive not a primitive data type is the wrapper class and this is specifically done so that Java has a mechanism Well, which is widely within any application or any programming language Della strings are stored which we already discussed So we have stack memory So when you have define something locally, the reference is created All right, and it points to the actual object but the reference so you could see as pointing Okay, so s is nothing but a reference reference Okay, so here we can see Right? So this would give you What immutability is So here we have string S1 All right, and what we are printing that is happy, right? So you could see here that's been created You have a string pool which would store all or literals that you So you could see happy and S1 pointing to it. Now you are trying with learning, right? So it's happy learning. So you could see that the memory location to is not changed right But this one more constant in the string pool The nation of happy and learning so you could see but what's important is still pointing to happy. It's not pointing All right, so if you want S1 to actually point how you do so you have S 1 All right. So you do S1 dot concat learning All right. So you are assigning and you are printing what would happen is that we saw there in S1 is still that as one is pointing So here you could see that this one is pointing So basically you move the reference All right. So, let's see what our strings Right? So let me create Just ring demo. I create a main All right. Now what we do is string All right. So let's first print All right. So this is how this how this wrapper class helps us. So it has all these utility to do else dot length. It would give you length not had strings and if you want to deal you would have to print Alright, so when we run it, it should print of the string at Eureka. Let's have substring. So it's a beginning index. So suppose we give to so it would give you So basically we We are getting part is nothing but part from from a particular index. So since we have given from index to so you have 0 he's at 0 and x 0 D is at index 1 and U is till the end of the string Could Define two strings and you could actually the value so basically So you could have one more something of this sort. Alright, so here we compare it. So we are doing s 1 dot So we are comparing S1 with S2. So it compares the given string So here you can see it since B is one ahead of a so if you have same string So if it's exactly the same You have he's empty suppose. You don't have anything You could check it He's empty returns if it's true it is empty it has some value then we have to lower case in this case suppose you want in which you want to change or you want to So I'll just take one Okay, so s 1 is nothing but we have Ed Eureka stored when I run this you should have said So here we have written camel So here you can see or translated into upper case. So similarly you which would print Now we have value of is nothing of some of the data type so you could pass integer of and it would give you right so value of is which takes different data type So just to give you like teacher I is equal to a hundred String dot value of and you give I it So it would print but it's converting you could replace something If you want to replace particular character which could be done So replace method takes two parameters replaces which takes two parameters. First one is the character that you want to change the new character that you Okay so here to show S1 dot replace I could replace so we are making it lowercase it's printed in uppercase E so that's about replace. We have contains which again gives you which says whether of particular character All right. So in this case we check whether we have Oh and you which becomes hello, and now we are checking with which it doesn't contain it, right so it would So that's about contains for the equality of string. It takes one argument and it Compares it against which you invoke All right, so to give so you have S 1 which is at So here we do S1 Dot. printing equality of string So since it's the same if had it been different it would give you false. So you can see here. It's printing both the strings are the same you like compare ignore case where in this case we If you would have had Eureka If it would have start with lowercase e you All right, whereas this one more compared to ignore case when it doesn't consider So even if there if this how one in lowercase still it it would give the value as 0 which means both the strings are some character out Okay. There is a method character at there's ends with which again that That a string ends Alright, so here what we are doing whether the string P which holds the value happy which doesn't right. That's the reason Had it been G here it Now that's about strings. Now. Let's talk about different And why do we need it? So there are like three variants of string one is The other one is stringbuffer So we'll talk about why at the first place? So string buffer is nothing when you have multiple threads. Usually it's good because all the reads and writes It is synchronized. So when I say synchronized that could access a particular at any given point so you can't have and changing the value So basically if you have a which is been accessed by to go with stream buffer or if there is lot One factor, but of course if there are a lot and stuff like that before you could append a pain which cannot be done in string right You could actually do lot and string and just They have made all the methods as synchronized so that only one thread can access So see you can see insert You don't have all these methods to manipulate the strings Whereas in stringbuffer to manipulate the strings. So when I say strings those right not the string class. All right. So here we have string buffer and we are trying to append So we define a class So you could have and when you see that it appends any data type. This is the important factor of utility methods within or you have lot of which you don't have All right. So this is mutable, right you are changing I append three exclamation So what we are doing here out the new string. All right. So basically you could you and the three exclamation marks. As you could see So basically it's a mutable with them insert is nothing but inserts a new character So here we are saying You could replace or replace substring So here what we are saying from 0 till to with You could delete something So here we are saying from So if you have two then it So basically when you say two characters even Okay, in this case, we are just So basically this delete method and the number of characters Zebras you have like you Okay, so just to show if I reverse it. So basically this is a kind which we often use right so you can see it's All right, you of the string capacity but I think it reserves when you declare it and it keeps on incrementing it so it has a growth factor you did not take care which you did not think because those are internals when you declare a string for 16 characters, which is 32 bytes. If you have stringbuffer by do So string buffer What are the drawbacks is more is synchronized when I that only one thread one thread can process it. So basically if you have you should go because synchronization has It has its own trade offs. So when you what happens is when you move out of DVM internally has which takes some time. So basically it's good and which would make the application much where stringbuilder if it's a wherein you know that you which are going to access in that case. You should go with string First because stringbuffer lower in performance Most of the things that string buffer does is done As far as the functionality safe stringbuilder is faster, but it's not thread safe which means that you cannot have All right, so to keep it simple, if you have multiple threads then you should go But if you have you should go with string the application much more faster than stringbuffer again The default capacity is 60 as you could see for 16 characters initially. So as far as the it's pretty much As far as the It's pretty much similar to as such but as far as stringbuilder is faster because it's not synchronized. Okay, so you define and you append learning to it? Okay, and if you which is appended with learning you will see happy learning Okay similar to stringbuffer when you delete character from index position from that position you would see that the H which is the first so you could see that at index 1 you You can see the entire string that is welcome being then you have reverse pretty much similar So again, this one You have you are appending are inserting here you This is pretty much similar to far as the syntax and semantics is concerned and the outcome is Just a performance change So, when do you stringbuffer if you have multiple threads you should go with string buffer but it would be slower Okay stringbuilder is specifically good enough and you and it would be faster since it's not synchronized. So to make it thread-safe which adds over it to the performance which takes That's why stringbuffer object-oriented Concepts? So let's talk about So classes are nothing and behavior right as you could see and you have There's a phone which has got different types Then you have a touch-tone phone this are objects So you define phone and which has got State that is generate that has got State and behavior that is an instance of a class which would have So phone by itself phone Which may or may not have but you could see that the specific phones to could Define So all these three things that you see here and nothing but objects objects that is defined by It's a class level variable you define something that gives State and behavior that is defined by methods where in we had add basically gave some Behavior So what are attributes and you have and nothing but a property this is defined by your instance will have properties which would be defined and you could imagine every instance will have It won't be the same right that we saw earlier. There were three different types that it would have It's not the same. So what are the naming at the industry level for Java. So this is not something that is actually taken So even if you follow this naming conventions still but these are best practices or this is good to have thing is more about to keep On for other developers or keep things simpler. So that's why If you wouldn't have conventions to write in their own way which would make Alright. So for class name it as we saw in all that I have always used or it's rather camel casing. So in this case you could see So it starts with which is again which is again uppercase. This is nothing but camel casing Basically it follows camel casing interface name is It starts with upper case which would be lower case always which should start but you could have it follows camel casing but it has So maybe it's a predefined Right? So you could see main or I created a dry Tad is again put C uppercase. If you would have say you would have something If you want to append it should start with uppercase. So basically it's camel casing where as class name. It's a camel casing which starts with upper case again camel casing we and constant is always like it has to be So basically if I Define I would write okay, so and if you want it should be So it should be separated All right. So these are the conventions that followed in Industry So mostly even if you want to see something dig of java you would see same naming convention being We spoke about the types through we have local variables but the variables So if you define something that's local variable so ARG 100 or suppose where is equal to a hundred. So this is If you remember this is once the control goes out of a method your variable and also it gives space for to kick in and clean up Variables are nothing at the instance level so This constant is All right, so I variable starts with lower case So this integer is nothing It's at the class level right when you refer you will have your instance So instance variables but outside a method Okay class variables are nothing and it is one copy per class. So as against instance variable, whereas static variable are it's just one per class. So if you define static, this is just one per class directly using calculator you would be able to access it you need to have This is non-static basically So one of the reasons instance variable is because different instances for a particular I could Define Let me put it as calculator and we have like You could have like scientific calculator. It's one more object. Now a normal calculator as 10 and scientific calculator can have its instance value as a hundred but whereas in static it's not at the object level. So you have mod is which is an instance And you print message right d dot print message and it So basically there's which has got and we are trying from the main method. Okay, let's talk about nothing but when you invoke there is a Constructor implicit which is without any parameters. So we'll talk about that. But when you do new calculator, basically there's a method which could be used by variables if they want So for each instance, if you want the same value you could initialize it So basically Constructors are if you want to do some kind of pre-processing if you want to initialize of pre-processing that could be done through in creation of an object. It is a block of the code So when I say it's nothing but initialize within your class Constructor must have the same It is in and it does not have So unlike method, which has got a return a return type at all because what we are trying to do through Constructor is within but you can't return So basically you Constructor which you don't have control over you are not doing anything to actually return right? You don't have control It's done by jvm itself jvm when you invoke knew or when you create an instance Constructors are of and parameterised Constructor. So when I say and parameterised Constructor, this is nothing but a Constructor now calculator as I said, it has to have Okay. So this is a Constructor. And as I said, this could be used Say I initialize this 200. So for all the objects being initialized to 200. That's the initialization. Okay, so I have created of calculator class that is normal calculator Let me do normal calculator Okay. So here we are printing the Let me copy but in this case. the second case I would be We have a Constructor. I defined a Constructor which is initializing to Value 200. So as in when you call this new of calculator would be created. The first thing Is this Constructor So basically what we are trying after the construction We are going to print the values if it assigned 202 it. So here you can see the value So basically if I wouldn't have Constructor then the value So let me comment out this one. This is how we comment in Java. By the way. This is a block comment and asterisk and which ends So I commented out that one I and you would see the value so you could see value All right, so that's what Now. This is a default Constructor. You could have which is like integer and you assign So instead of hard-coding for the instance variable during the construction So basically what we are doing and bypass 40 here. Alright, so I am passing 30 and I'm passing And as you could see here, we are initializing to that value. So basically for it should be 30 It should be 40. Yeah, as you could see min printed out and this is That's what this default and that's what it is all about. So default Constructor to specify any Constructor. So I commented this calculator There is the Constructor which is the So it's not mandatory unless you want So what's the difference and Method constructive Whereas method may here you could see that which return something. This doesn't say anything. This doesn't return anything because we are not doing You're just initializing it initializing some instance must be same as the class so that This is a contract Constructor has to have since you are not invoking It's done by the jvm. You don't have control and you have to follow recommends to or Java forces us that instructor is given Whereas method can have any name as we saw the add method you're that you want to Constructor is used to initialize We saw the instance variable within the Constructor method some Behavior to a class right we saw add method which is giving some Behavior which is nothing Similarly. You could have multiplied and stuff like that which adds more Behavior Implicitly so you don't have control which is done by Java itself. When you try to or when you use the new keyword, it's implicitly invoked Whereas method you have So basically when you do this Constructor Whereas when you want you have to How does Constructor work is created The Constructor which initializes So we saw about this. So when you use the new keyword to the Constructor which could be initializing instance variables So type of Constructors this default Constructor and which we already spoke which is created by the compiler without any parameters is and the Constructor of parameters is called So here we spoke So we have integer value, right? This is a since you are passing parameters whereas if you don't Define so in this case you could see a Constructor for I read them all we don't have So Java by itself puts for array demo, which is known as So it's not mandatory that you need to have since Java takes care of it. That's the differentiation and parametrization. We use parameterised Constructor for passing values and initializing something that's been passed So the default Constructor the default values to the object like 0 null when I didn't have for a moment. I am going to comment this. So this is a line comment It's a line comment. Okay, it's commenting just this particular line This and this line comment block and ends with asterisk. / whereas line comment is Okay. So basically a comment Alright now we have this Let me print the value value of instance by default Constructor. All right, so we don't have So that's what I I commented out So we don't have And when you create by itself would have which is used by jvm so you would see this instance variable has what the default It assigns some value for integer it 0 if it's a class it would be null so you could see the value being it would assign value null. So in this case you have string depending on the type that we are dealing. We saw how we pass parameters Constructor overloading is just without written type in Java is a method of having with different parameter lists. Like we defined add we had to add methods and now I have but basically this so you could have multiple but different parameter lists, which is known as overloading You could have So basically what we we have a Constructor that sing teacher I'll Define with two parameters. So we Define one more parameter I put something like this. So we are adding up and putting it Okay, this is So here you have single You have multiple parameters based on whatever you pass Or say I say? So on construction you should C-130 as the value Okay, as you could see here, you have the instance variable which is nothing but edition and you could have something which is also K because you have as well Constructor taking And in this case, it would be just a hundred but methods which helps All right, so you get So Constructor overloading is more than one Constructor So we had a demo about it as I showed there were one with one parameter and the other one and during runtime pass a particular instructor You could see that in the first case which is shop s 1 you been called which has Whereas when you create object S 2 which has and one string you could see that second Constructor What's Constructor chaining is the process of calling one Constructor from to the current object? The real purpose is to pass parameters to a bunch but the initialization should be done at a single place in two ways within the same and Constructor chaining So basically for there are two key words So one is this this in Java this pH is and the super keyword. Let's see how we how we do it I have this Constructor So instead of what I could do is so here. I was initializing to the instance variable. What I could do as I could do this and I could pass So basically you're You could see that what I am trying to invoke this Constructor That's what the chain So when you say this it within your class which takes two parameters and this is the one It has two parameters. And basically what we the second parameter is 0 which means it would initialize to whatever value you have here, right? This is what Constructor It's more about calling within the Structure So basically from a call to this Constructor Super should be the first it gives a call to So you have a subclass What do you do here is For Constructor chaining. I think they where and you use this keyword within the same class. You basically chain We have demonstration When you create student you without any parameter and we could see So basically what we are trying would be Meghan, right? So and again we have which is overloaded Constructor, which takes name and in that case it would give and Mark as 70. So basically 70 that we are signing and you If you don't provide name, All right. So this is what Constructor Static keyword we have spoken about but I'll just walk you The static keyword is used is non access modifier used for blocks methods class is used to refer the common So as we spoke it's it's not at the object level. We have it common when the static keyword is used Then memory is allocated So in this example, we could see that So you would have Define just once right Just once whereas the non-static This variable you for each and every instance. So basically for this instance, you would have memory allocated for again this normal calculator that we had earlier a memory allocated All right, so it's whereas the static ones So yeah memory is allocated All right. So here we can see that this we have which has some company and we are just displaying it right we can see that we are displaying ID salary that for both the instances you have two employees here with ID 25 and salary to with salary 30. Sorry with ID 30 and So we are defining and you can see here. We are not passing to the Constructor right still when you display it look You can see that it has displayed and SRT Traders because it's one per class. So what we are assuming is this class is basically designed right that is SRT creators. So all the instances of the class are that you create here. All the instances of employees that you create here will have that is defined here since it is one per class. Whereas their ID which would differ as per the value that you here we can see that company is a static variable little here it could be seen that you as I mentioned earlier being created out in the stack. And in the Heap memory, you could see So ID is tri-five salaries and salaries 3000 and you So basically static variable which is permanent That's where the static So method could have When a method is static of a method to call of a class to call that method to static variables, right? So basically I can have So say for example I have so So what I was trying could have calculator. . And you could directly So you do not have instance of a class created its This is at the class level Let's talk about this keyword that this keyword is used to the current object. So basically what what it if I want to let me print So within the add method what I am trying to do is of instance variable So I'm trying to print the value of the instance variable which would be where we are calling at numbers. So basically it should be When we have such scenarios where and we refer within a method we could see of instance variable you a hundred and ten what happens is it puts this dot here All right. So what we are trying on which the add numbers whatever the value of that thing out. So this is implicitly need not use this keyword. This keyword is usually used when you have something have instance variable suppose. You have something of this sort. Right? One of your parameters as the instance variable, right? So you want to differentiate and which is So that's when you use this When you say this is referring and this instance variable to the right hand side Alright, so that's when you have to explicitly It's done by the jvm itself. You did not take care of it. All right, so So, this can be passed in the Constructor call. This can be used to invoke This can be passed as and this can be used to invoke This could be past basically so say for example, you have something of this sort but Admitted taking Okay, so I'm just trying calculator as an argument All right. So you have ADD method which takes calculator Alright, so here say for example about the logic it's I'm just trying to show Right? So I have ad and I put this you could have you could pass this as an argument. So basically you So now if I print it you can see in add numbers you So yeah here you the add method taking calculator So basically it's calling So here we spoke We saw how this could be used of the use cases as I said here you could see that I spoke regarding You could see of the parameter is rule number which is same as the name This one is pretty You could see that is passed to as the instance variable name The left hand side is nothing within the class info It's a rule number that is passed as an as similarly for the name which is referring to the name in the class info It's a parameter that's passed That's a typical use of this. So we are creating a message that we are giving a call This is within so we saw this Basically, this is what it does write what this is doing within and you are giving a call. So in this case this Annie would and would print it out. So how does it work So again, this is a sequence behind the scenes. The main function when an object of the class is called okay, in this case, the one right then you have this dot any which is nothing to the Constructor but with the parameter whether you have a Constructor so it finds it and it would give which is nothing that you see here then it would similar after the method It comes back So after this and is called it Welcome to edu Rica. And once this is done, it would go back What happens is whenever the local variables and everything is pushed onto the stack similar Also you have a calling stack. So your local variables The calling method is invoked after the method and is completely done. It would come back to the stack and start off from So typically how the subroutines and everything work That's how it's done So that's why we So that's the sequence So let's start off with object-oriented This is pretty much generic. This is not something So this is object which usually all the object-oriented or adhere to it. So we have Which we'll to come polymorphism, which is we have and we have Dynamic polymorphism The coming slides will talk about what is how Java has encapsulation or how Java is aligned words of object-oriented programming. So let's start off you an analogy you could think that is derived have or you have something from which when you have some feature We say that you inherited right because you have got it So you have a parent so this could be an illogical Maybe you are looks is inherited of that is exactly You have a parent class and you could have and this subclass Features or inherited State I would say So to give you an example as you could think of vehicle which could be a super class so vehicle could be thought Now, there are subclasses which is a type which is a type which is again a variant of course is again a vehicle. So basically this defines if you read it out that bike is a vehicle but it's a vehicle So basically this is something He's a relationship. So let's see about or the sub classes inherit from the parent classes just is a powerful feature through which one or all properties. Behavior of parent object. So as I said, So he's a relationship through inheritance. It could also be seen as So subclasses are actually in the previous case you have of superclass vehicle. So vehicle is a superclass and henceforth we of we would be using just wanted to be sure you get but a superclass and by could be as subclass child classes So you have method overriding what do you achieve about method overriding And the second thing as I mentioned properties and behavior Your parent class so there in your super class which need not be redefined It inherits by itself. That is the property If it has got a common Behavior of calculator different types of calculated the example There could be which is adding numbers It adds up and it gives Behavior could be added into the calculator a subclass of calculator where in you have this scientific which is modifying which is using the same behavior of add right basically or a scientific calculator Behavior adding up two numbers. Whatever you send it would add it up So basically you would Define in the scientific calculator. That would be the subclass of your calculator you need It would inherit So that reduces would redundancy or it helps you You need not redefine of slides to come and Method overloading so I won't talk it right away. This is inheritance. You have a manager class which is extending manager. So what we are trying as you could see here. There's a salary property to is extending manager and we could see here that employee to in It doesn't have We are able to access from employee to let You just have to click and give some project name. I'll give a dude a car modules 3 so it opens to the source folder and you could right click on it So basically I'll do one thing. I'll create an employee class. I'll follow the same example I create calm down So calm down Eureka is nothing and manager is your class name. So now I Define a property right suppose. I say maybe I will put So I Define a property which is salary. Now I Define one more class. So you could either Define it or you could create I create a new class. It will create employee. So it created an employee class Now, let's do main which is your entry point Now as you could see salary within employ. The first thing are talking about inheritance. So employ extends. This is a keyword So employ extends manager. So now you could see which is salary which is defined in the manager which is the subclass if salary is This is a place of manager. So I Define employ EMP is This is how we create instance Let's see if I will give this e MP dot salary to be sure I print out so as we can see It's not defined in employ. It has been inherited We can have one which is like manager is equal This is instance Now, I do manager dot salary Is it just printing it out? So what we have done I repeat the same thing. So we have We have defined a field salary which is extending manager We don't have the field or we don't have the property but we could see here in this example wherein we and we are accessing salary It's not defined It's been inherited that's manager and manager which is been access of here and we could assign I run the program and create a class file out of it and it runs So yeah, as you could see here, it's printing out values and manager as well. So that's about inheritance the property salary Now, what are different that we have this Bill have a parent class and you define a subclass to what we spoke. We had a manager class which was inheriting manager. That's about single inheritance. You can have hierarchical could have multiple classes So you could have a and be inheriting You could have multi-level have one class inheriting you could have subclass you inherited or you subclass it so there is one level. So you have a child class. Now, you could have of this child class. That's what multi-level So as we go through the example, it should give you a clear idea about so single inheritance, so we have vehicle which is extending vehicle. So this Similar to So what we did here You had a manager and this is just single So what is So you have a vehicle and you have two subclasses So there are two child's So this could be to a parent having two kids and they inherit some property So it's pretty much So you have a vehicle class which is the super class So, let's see how this works. So I create a vehicle class I have a vehicle class and civically class which says integer say This could be one of You have say for example, So these are common properties Say you have Motion to this particular class. I Define method move and I just print I defend two properties here which is number of wheels and the mileage and add by introducing method which is move which is nothing So ideally you would have within or you would have lines because we are talking to show the properties and behavior is been for Simplicity sake we don't have any logic It's just printing it out saying that just to indicate there's a move method is being called. We're just printing it as I said there would be So now I Define car class So now I say that car is extending but sub class of vehicle. So remember we said Chip car is a vehicle. So what we are or we are inheriting properties I change the property of any you method within or say when car cross. So basically we What we are trying to whatever method you had or the vehicle class. You are overriding it You are trying to change in your by class. You could overwrite the move. So first thing that we'll have to do is bike So bike is a vehicle we We are again overriding move in by class. So now basically we for simplicity's sake we have would write the main method. So this is generally Practice were in such classes where in you have a main method I just call it as So you have a main method to change the number So what you would do is or it won't be carved would be like suppose I put by create Mercedes. I create BMW is equal So now what we do is I want that is number of wheels I could have a bike class say by something of this sort you to Nu by so this is just how we have classes You could imagine So Mercedes is object Arvin is object of bike and Ducati is again an object the properties here as to so yeah, this is what it is all about. This should give you some idea about how we use Java you have then you kind of create objects and you could override and you could change when I say override is the values within you could change by itself would have but Mercedes and BMW, which is a car would have which is not you're overriding it this this could be like kid kid doesn't have It is something It's peculiar to and that's what this is. About so you could override it. Now. Let me print move or let so you could see a move method and when I run it it should show since it's a movement that called on car BMW So this should give how are we inheriting properties So here we can see So again, you could within your subclass, which is not something that is inherited So BMW by itself or car by itself could have which is not in vehicle. Maybe this is specific to car. So this is what we spoke about Now, let's talk So basically it's a super class category. So let me use the same example. You have a vehicle class which is extending vehicle. Now I Define one more class, which is nothing which is extending car. Basically, I can put this turbo that would make more sense. This is like So I am putting this turbo You have a vehicle class which is surplus of vehicle. You have a Supercar So all the properties that you have in vehicle class in car as well as Supercar. That's what we want to see here. So you could have something which is void which is I just want to show you that we can still access number It's not defined but in vehicle class you could actually it and you can modify it. That's the beauty of it again. Brief, you have a vehicle class which is extending You have a Supercar class, So basically there of inheritance and all that you have in vehicle class as well as Supercar cross and Supercar class can access that is there specific What I'm trying to say is so I just mention here Behavior So there's some behavior that we have defined Now Supercar class So you could see here specific to car as well. If you look it as a tree. This is a leaf node. This is super car class from vehicle and car class. Whereas. Our class can access everything but it's not the other way something that is There's a turbo method that we have put in Now. If you try to access you won't be able to access it. All right, so it's So you cannot access something that is specific in your super class. Whereas you can access anything that is there in your superclass So it's a one directional flow Now, let's talk about has a relationship is nothing but you have properties which is has a relationship. All right. So say for We defined the employee class and employee would have and it can have salary which is has a relationship which is nothing but employ as in a class Let's talk about this example has several professors without There is good chance for the professor's to exist are loosely associated. And this loose Association So one can exist without other and such thing is So here you could You could see name which has got first So basically you which has got property as first and last and which is nothing and the last name of any entity. It's not associated It's a different entity name is which would have first this employee info class, which has got ID and so you can see name hear but The instance of name class that is there So this is has a relationship. This says that So basically this is what it is when you talk about has Basically you have class So in this case within your employee info and similarly this name could It's not that it has to be used That's a kind of Detachment It's not tightly coupled. It's Loosely coupled So basically you have name which is altogether a different which would have first and you would have an employee which has name. So this is has a relationship and also to give you idea It's not just Right so vehicle has number this could be thought So let's talk Now when one task is performed then it is called as of ism is forms. Basically, that's So multiple forms. That's what polymorphism means and when one task is performed then it's called as which is the super class. You have a subclass student is a person these So you have a person class and millionaire you which is nothing but P Bill and which would be specific So as we move on you about the different kinds, but basically you That's what polymorphism So, what is Method overloading if you remember we spoke about Constructor Had multiple Constructors Define and the other one was like it was taking n 3 integers, right? So basically this is what method the same name of a method but you have different number of or you have different type of parameters passed and based on that. It would understand that needs to be called. So suppose you have ad with and you have ADD with three when you invoke add method of calculator and you it would appropriately call and if you pass it would call one or it would resolve it during the runtime which one It's not overloading It's done during the linking Ben's during the That's why it's overloading is nothing So return type is not taken to Method overloading. It's just the parameters So Alex wants to write a code which can be used to find as well as of circle. So generic code which and circle so such are could use method overloading. So what's the thought behind of both the shapes here It's there for both the shapes. It's therefore rectangle. It would be there for square. It would be there for Circle So basically you which would have area So instead of writing I will write area as And a path different arguments according to So instead of defining you would have just in your shape class and your subclasses per the type of shape. So here we can see that this which is taking integer since it's a triangle So it's taking base So Java doesn't understand This is user defined by the way. It understand. There are two integer parameters there are two integer parameters This one would be called. The other one is again, we have one more method which is area which is and which is taking just which is radius. So this is supposedly So during runtime so I'm not repeating because we did the same. Yesterday if you remember we kind of had multiple add methods that it was getting resolved based on the number that you pass. So I will just read through the slides to make you but it's pretty straightforward. So here you have area method which is nothing but during compile-time this particular area method to this one since it is taking Second one is taking just which is 5 so it understands that it has to call the second area method in method demo and it So here you could see that when you run this that the first one resolved it that the area of triangle is into point five, which is nothing goes 2 pie R square. And it gives answer as So you could see there are done based on the number Now, let's talk about type overloading can happen So you could have multiple taking same number of arguments but different data types one could be taking The other one could be taken and during runtime ordering It would resolve that, you know, this one should be resolved and the other one should be So basically it tries to resolve on the data type that you pass. So here's the example wherein I will take this one. Say for example, So it's a dummy value of the best practices when you write Java code is So you can have shouldn't be restricting which makes it difficult for other programmers So it's good to have big which is not that expressive. So here I said dummies I'm printing integer value is and here I am printing so we have two methods but it's taking different and we are just printing it out. So I Define a main method here So we have instance 2 dot display I I pass hundred to it and I pass so I have to Method One is first one. We are passing We are passing a string to it You could see that the first one would go which says printing would go to this. Display method which so you could see here. Right? So first one is The second one is So based on the type that you pass through are passed would be called This Now what's runtime polymorphism. So since it is resolved it is static polymorphism. There are few things that gets resolved or the compiler cannot judge would be and that's when it does it and that is nothing or method overriding so in an easy relationship. So in one of the methods or we we have a move method here You can see override annotation because you're overriding of vehicle in car class. So that's where it says that this Easy relationship in case of inheritance that is easy relationship method in the parent class. We saw in the move We have the same name as So huichol has a method move as well method must have in the parent class as which has different you have to be sure that it takes the same parameter if I add an integer so it's not taking it as It's not been taken as overriding because you have So basically it has of or it has to have the same So that's about Let's have a demo on this so but I will again A trait on that so basically this example you which has got a pay method which is adding Behavior and you could see and you have a millionaire is it overrides the pay behavior and you run this program. One thing to note here is you You can assign that we saw we are creating or assigning the instance But in this case you of millionaire is being assigned This is something that happens only in Easy So what I am trying automobile management I have car I have a new car which is Mercedes I could assign since Mercedes is a vertical it should be a sign you This is something that you need to keep in could be assigned to superclass. So here we have Mercedes But one thing to note here vehicle itself has Moving vehicle class and Mercedes which is car with this move in car class. So the tricky part here is when you would do something give a thought about it So you have two variants You have one in car So the one in vehicle vehicle class and one in car is the overridden version of vehicle with says Now, what we are doing an instance of a car class and we are assigning and we are calling So just give a thought whether the move method would be called or a move method on the car class So this is where method overriding comes overriding is nothing but which is done at the runtime. So during the runtime that Mercedes is nothing it's assigned to vehicle which is super class still So during compile-time jvm that which move are you calling? Is it on vehicle class or is or some sub class of vehicle? So it doesn't decided during or there's a lazy binding that happens delays it So when you run it, it understands that this vehicle That's Mercedes. So when you run that I will comment So this is how we comment out So when I move that move glass on car has been called if you get this concept, you're pretty good in terms By the way. This is an important Concept So you could see here move Called similarly vehicle could have I call it I Define one more vehicle here, which is like new vehicle and I invoke the method on vehicle to so would call the move method The first one calls on the curved glass the second since its object So basically you have to see which is the object that's been assigned It's vehicle. But since this one that's the reason you have So we had some discussion So super keyword is similar that it is called on superclass. This is called on the same on the immediate subclass immediate parent class you But this one is calling to refer immediate parent. Us instance variable used and there's one more in which you could use is So basically whenever whenever you call a class of a class by default jvm by itself would give a call which we would be looking So here we have vehicle leaven, which is a super class which defines string because of wheels that the property which extends vehicle you have your overriding that truck has four wheels. This is kind of your It's not called when it comes to properties. But basically you within your truck class print that's defined in. Truck which would bring in your truck class which would print the number or print the value of the Veals of the wheels property So we will look at this one. So we have a vehicle class which is a property which has some value We have a truck class again, which has got wheels It is just changing the value as truck has four wheels with interrupt class you which is printing that this particular it would print it first that this particular truck class that you see here which is doing super dot Wheels of wheels in vehicle class. So, let me show you So we Have a vehicle class which were in we are defining for say for example, and now we have a bike class, which is overriding And what we are going to change the value I have a method to print which would give suppose of Wheels to say to so here we and I would have which would be printing within a by class. We have a print number We are changing the number and then we are printing and number of wheels All right, and by default we in the vehicle class to before so we have to so now I print So I create the instance of bike and I invoke Now you could see that first it would print Basically. This is what it's going will print to so basically here we need to have one more when it comes It's not overridden as of Wheels defined here again and here I change number of Wheels to to so So when it comes when you define one more field it's not overriding it. It's rather creating So now you could see that when you print number to which is nothing but the value here value Whereas when you do you have a default value of 4 So on super it gives So here you are creating. It's at the Constructor level. And we can see as I mentioned The first thing that is called when you create an instance is called first and then your sub class when you create instance of car. So your first thing that would be called of vehicle and it would do that's required in vehicle. And then it would call So what I mean to say I create a Constructor here that we are within Constructor Now we have this car class for car class as well. Remember we said that there's a default that's already been You don't have to So I don't do anything here. So basically you Right Constructor jvm unless you want to write something or you want That's when you would would write Constructor. But in this case since we as such I won't put What I'm trying to say an instance of car here. And let's see when we There is a super Constructor That's what I wanted to show. So that's why we created This is not a method. This is constructed by the way, since it has got and it doesn't have So so I have printed that we are in the Constructor when we create the instance that this Constructor that's been called. So this is done You don't have to care about it. So here you could see whenever you create the instance that we are in construction. Of superclass vehicle that you see is directly So even for car you could see so this will get So there's only one instance and we can see that it and it's implicitly put we don't have to explicitly operates that way and how it calls is nothing again touch based on this one Number one final keyword is non to variable method or a class We say that the variable content final when you want within your application. So that's final a method final you define a method that your subclass that's when you define it As final when you say that there cannot be So you cannot subclass it like if you try to extend would get an error that you cannot extend it. So just to show you maybe if I make this as final your car that you cannot inherit That's Comdata recorded pickle. So that's about final class. And if you make would again get an error that you cannot overwrite are trying to override since its final it showing cannot overwrite move recorded vehicle overridden Let's remove this finer and you should see And also if you want to see if you define this as for number of Wheels as for now if you're trying to modify to to it would throw that cannot assign a value All right, so that's It's not access modifier, but it regulates it in a way that you can't change the value can change the value You can't subclass it or you cannot create and in terms of methods, if you have final method that particular method So final modifier can be applied variable class variables local So final variable is used to create constant variables as I said, usually you use final variable when you want to and it would be final static. By the way. If you have a constant static final final methods overriding in terms. Method the demo that I that we cannot override it When you have a final class, you won't be able to create All right, it gives you of final clause in string class. So system class in Java dot Lang dot package that we have been that's been exposed by or Java by itself defines it If you try to it would show you an error So system is kind of or Java by itself is putting that cannot extend You cannot extend Its Behavior. You can't change anything within your string class by yo, that's why they have marked is declared as final then in your child class. If a Variable is declared cannot change the value or cannot change the reference when it comes to objects. So we will see that later a Constructor So that's the rule you cannot and blank final variable should So maybe in this case if you wouldn't have you declared this as final if It has to be assigned It's giving an error saying that it's not initialized as for it should be gone. So it's mandatory that if you put instance it's mandatory that you assign If you don't then compiler would throw an error so So basically you have and you have a sub class of vehicle and you're trying it shows you an error. So this is what we saw and when we try to override it and it's all compiled sign if you declare any class as final you which we saw it gives So when it declared a vehicle as when you try which extends vehicle class because vehicle class was This is a compile time. Now what's Dynamic binding which is also known as runtime polymorphism is decides which instance of a method should be called or which method So this is in case and when you override so we saw this earlier you we had this move method here and in I have this move method we did this thing that is assigned to vehicle class class reference of reference named by vehicle have vehicle itself. So first one is pointing which is Mercedes and the second one is referring So this is what dynamic The first one gives in car the second one to the move method in vehicle. So yeah, you could see here. So move in car class and then it calls and it happens at run time. That's why it's So abstraction is a mechanism of hiding the implementation and only providing So basically you We're in on the first day. We spoke about the shape class and Wrangle and square Right? So basically shape is a class which doesn't know all It doesn't have all It doesn't know what would be the behavior or it doesn't know. What is the behavior when I see Behavior. It's nothing but calculation of area is nothing but it and calculation of area in your Square class would be in your circle class So shape by itself doesn't know what the implementation So that is what is attraction. There are two ways abstraction in Java one is which is not hundred which could have like abstract methods like area but there could be some methods which is same throughout the subclasses of shape say You just have to have which is printing area from the implementation per se it's same throughout would be something Whereas display area that is not an abstract method. So in such cases wherein you have blend of abstract as that's where you So it's not hundred Whereas in interface it has which says that it has to be So interface is that we have in Java when it comes to abstract a modified to a class. So you write class and you which makes that class Whereas interface is something that we are going Slides upset class and Abstract methods as I said area in this case wherein you don't of area in your shape class. That's the scenario you don't have a complete of a particular method as abstract method and if you have at least in your class, you have to declare or else compiler So whenever you have it means that there is within that particular class So when you suppress shape for that matter when you subclass shape shape which is abstract. Now when you subclass it which is nothing which extends shape now you That case you have to ensure If you don't Implement area, it is still kept as abstract to make circle class If you don't give So an abstract method is without implementation any class that contains one or must be declared and abstract class is a class that is declared and abstract class may or may not have So as I said, it's a mixture of abstract and abstract class So let me take the same example So we Define a shape This is what I was saying. So when you have at least will throw an error. So in this case it is saying that you have abstract method So we have to make And as I said abstract class just have a modifier that you need to prepare This is abstract method which is public void. It's not returning anything. We are just displaying area now Maybe I will put something and now I declare this circle method It's throwing an error and it the abstract methods shape as got abstract method if you don't implement it if you don't implement it if you choose not to implement will have to make this abstract. If you make this abstract But in this case since we know the concrete for Circle will have when I say we will have and we override it. So for Simplicity reason, I'll just put since we are talking I'll just keep it simple. So basically what we have implemented area which would be nothing so here we have a shape class and we are overriding And this is how you abstract it. When you run it, so basically you like suppose I create So this is pretty much So you could have a shape to New Circle and you So basically what you would get which is your area area of let me put it when I want to print it. What I would do is and I print area of circle what we have seen here is which was implemented in your subclass that Circle and and here you could see that again similar about instance of circle and when you give a call to on circle is being called because shape by itself doesn't So one thing to note here is So here you could see this value class would have one or more And when you subclass it, you have to ensure of your abstract methods. If you choose then you will have as abstract as well. So execution of abstract method. This is very much similar that we have. So the main method you have this case then there's of mobile class gets So pretty much similar when you create which is subclass of mobile. As I said the first statement that you have the Constructor but super or it calls So here we can see that the default Constructor when you try as we are running run method, but in Mobile class run run method from Nokia class gets that we saw so shape on Circle got executed What is the encapsulation that encap solution is and data together So basically everything It's put as one so you being put as one right classes You see everything you group these together you group this integer and long which is a property of vehicle through this move. It's all encapsulated as one or it's all put that is nothing So basically you could which has got which has multiple made sense which are put together and you have you think but it's basically combination Within Thing is There is access modifier comes into picture you have or private and you have public you have protected this access modifiers restrict or it restricts the visibility of regular component or variable or anything. So that's encapsulation feature You can't see everything. It's not that everything So you can have different levels of restriction when it comes to visibility that is a part So to achieve encapsulation in Java declare the variables the best practices because once you expose expose it for the application that you maintain it right So your class is becoming a I won't talk about because fragile D is something or coupling we say so I don't want But basically the best practice is to have less or different visibility Try to make it as much less Basically if you could make all the variables as private So basically all non private or public variables are So it increases the maintenance and it's easy to break that way if you make some changes very difficult the future So usually the general practice as private not methods variables and Setters method which exposes which are public which would expose this variable to the outside So usually we don't We restrict Usually you have a private since variable and you which is a public method which is nothing of the instance variable So data hiding the user about the inner implementation What are the advantages need not know the core It increases flexibility. We can make variables and right only as So imagine if you didn't have there's only one that is public so it would create a Havoc. So this is basically based You could have of this access modifiers used It makes testing easy. So basically Hotpoint is and easy to change So with reusability, even the maintainability of the particular when you have this encapsulation if imagine The way around where in you have so a class could access within a class nothing It cannot be accessed Imagine such a scenario You would have a lot of code You would write the same code. It might be the same thing. We have already implemented but you will have since it's not accessible So that's how encapsulation and it makes testing easier. Of course. So here you could see So this is the encapsulation I was talking about. So basically you which has got string name, which is private It's defined as private when I would be used only If you try to access it from outside class but there might be scenarios in from outside class you its value is in that case. You would have something You would have which is nothing but which is the data type for name and it's returning the name. Now one thing to observe This one was Private name was which means it could be accessed Similarly. You could have Setters By the way, you So again Setter is something that you want to set So basically you are saying through this method is going So we are referred to this particular So you create an instance who have edad set name and when you access it So basically what we a demo end caps is a Glass it's not the same class. So you have employee one and you have demo end caps as It's a different class till you are able to access from this class. This is again, a private instance variable you because you have let understand interfaces but could imagine or it is something that right and interface could be This is how it should be. So basically it could be or remote rate. It would say that this is how it should be basically there There should be This button should be there So basically through interphase what we do is we specify that this is For example, you could have specification This is how Remote should be and there could be different who would be actual and which would be aligned to this particular Then you could check that. Okay, so and so specifications that this this particular thing So basically these are nothing for the system so that this is how it should be and you or you would have that align to the specifications and if they match up it means that it's So hence an interface contains and can be used So all you see here, there's a joystick this TV remote and everything. It has got different things but there's something what you specify through interface and interface but the methods declared inside interface or by As we saw in the earlier hundred percent abstract. So all the methods that you have and interface is used It is used to achieve loose coupling when I It's like you are not binding Basically you say It has to have So basically your kind that all the implementations of remote will have which is been introduced you cannot have You cannot have a class which extends multiple which extends vehicle and locomotive locomotive is if for example, so, you cannot have a class which extends to classes Do you could have levels and you could have but you cannot have But through interfaces you you could parlament but not multiple classes again, since this is inheritance interface is And basically you from or you implement but it follows So what's the difference and interface can just to give you an example, I'll show you what interface is. So instead of this class. I will make this interface. So this is how we Define an but as I said, the interface is Everything has to be attract. You cannot have methods You cannot have a concrete You could have a default method at in the in the slides to come let's imagine that you have whatever methods you within your ship class has It is abstract. You did not even mention it by default jvm puts Even if you mention it abstract, It is abstract. So now when I unlike extends that we do on glass so you implement shape class. So you'll have to make it public for a method the face is public. So here you can see that we have implemented that it has a hundred So with this you could see most being listed here and interface which we saw class can contain We are talking about normal class here The members of the interface which we again saw when I didn't implement this one as public Circle So by default it is public the members of the class or protected and interface since we are not The first point you cannot be instantiated since we There's no need of Constructor to initialize the variables which we met yesterday for inheritance and whereas we have extends which we saw now right changed it to implements after extends keyword. Any number of interfaces is multiple inheritance whereas after extends you can have only You cannot have multiple classes The only field that can appear in our interface both static and final So only the constants when your interfaces You can have all levels Classes have implementation whereas this is between class So classes have implementation no implementations or they So it's a mixture of abstract methods as we saw. So abstract class is right unlike interfaces. You could have as well concrete classes object abstract classes cannot be instantiated abstract classes cannot be can be final and abstract as it has no defined functions for abstract class It has to be extended. That's what the focus and interface is an abstract with class using keyword extends and whereas interface can be implemented which we saw. Abstract class can extend and interface can extend number So yeah, this is one thing we're other interfaces, right and you could have extended abstract class can have and public members and interface members are in abstract class keyword to declare a method which we saw okay in interphase. It's not mandatory because by jvm by default put are to achieve zero to which means that you could have some concrete Whereas interfaces You cannot have anything you within but you could have can have abstract and on abstract methods can have Constructors. Interface cannot have saw earlier abstract class can have abstract since it's not a Whereas interface can have only from java it as I said, there's a default which is nothing but you could have a concrete within interface class interface which extends other class you have class which implements interface which can extend other interface if there's an interface already some methods or you want that you have within would do it using extends while implements an interface and interface extends cannot extend multiple classes, but can Implement So here you could see Which is extending and this one at the right side. It's time to extend it. If you try to extend it would give you It won't allow you to inherit Whereas in this case, you could see it's implementing You could see one interface and there's one more which is being implemented cannot extend multiple classes, but it could Implement which gives an opening when any interface gets compiled access modifiers to the members. So this is done by default So here you could which has got one variable that is int count is equal to 10 and it has got a method when this demo dot Java, which is an interface, which gets compiled you See It has put it as public static access modifier public static itself puts public static final and four methods it would put So that is the reason when we try to override that it has to be public. So John went to a bank he to his account. So let's see this one. So basically here you could see money interface and you have So now you could see one is debit and the other one We are just saying that we are writing They're saying that we are whereas credit is nothing. But again, we that we are crediting So now when you create or you create in It's off credit and assign it to money You would have operation method on credit being called We can see that there's which has abstract area which returns this value right which is square which implements shape and its that you will have You will have to so I will read this and say like hundred you have a square We are just hard We don't have to implement it. So it gives you two hundred. It's returning 200 as float. And this one So what we can do here is So here we have this thing So I will just print And now I have one I create one more shape which is square nothing what we are doing is we where dot area so instead you could do it this way What we did is we and we have a area method We have two concrete it Circle and square and we are instantiated circle and square here and we By the way, you could see here that this is and square is been assigned It's not directly to the circle. You would see hundred and so Circle was 200 and you could see two hundred and hundred so it's basically in interface as well. You could extend an interface So suppose you have for now just too. So I create which has like test method. So you have a test interface and you could have shape which Now your circle and your Square because there is one more method If you don't implement to either make this abstract. If you make it abstract, it should go off we want to implement it that you implement test method the error should be gone You will have to find it. So that's what is extending one So basically here you There's a runnable when you implement runnable, you will have to ensure both the methods. It's a class extending one class and implementing more There's two interfaces so you could see animal which implements walk and So both the methods Walk and Run whereas there's a human glass So this is basically which is implementing and which has to ensure that it implements So in this case walk and run that it implements Walk and Run which is extending and you could see here that you could assign human which is a subclass of animal we could see that human could be assigned is implemented from there. So you could have H 1 dot walk and H 2 dot run sort to this methods. So basically this is again if you understand the idea or dynamic polymorphism, which is nothing of subclass to superclass All this thing we are pretty all this is talking If you get that thing, So we are talking since Java it you could within your interface. You could say that you but you could have if you put a concrete methods it would give you an error. Okay, it gives you that it's not allowed but you Once you define is default. It's good enough. So all this methods are all and all these classes this they can't override it. They can't do anything with it, but they would inherit this we but he can't override it. So basically I'll So basically you which is say say and Hello. Welcome to edu Rekha, right and you can see here. Flash interface demo, which is implementing welcome Hello bean concrete which is nothing but that is passed though default class say method it When you do out dot say you being invoked here. We could see that you know, hello welcome to edu which is nothing but the output basically default methods which cannot be overridden but is available that implements a or implements that interface so rules for using following all the rules in interfaces private interface private method can be used only inside interface can be called from other static. Non-static interface methods cannot be called This might look confusing but you could think that first cannot be abstract because we want it to be implemented in some We cannot keep it by itself doesn't have You want to implement So it cannot be private only inside interface. So if we Define a private method it can be used only So basically you which is private, right? So basically default method but within default method, so what I am trying you could have private void but here your default method So private method can only and it's usually used 24 can be called from other static. This is pretty much similar private non static methods from private static methods. This is a common rule that we have private non from private static method. So if you have a static method you cannot call Remember we mentioned it earlier unless we create We can't call it. But in this case you So it's not on a class within an interface. So private methods is Private methods from within and since private methods are That's the only reason you near interface static methods So you could have where in you have have a static method display? You remember static of a class level method, right? You need not have to create instance of a class if an interface has it directly by interface dot does the name of the method so we can have a static So this method could be called so you could have something and you could call it directly So we have this so now within shape utility like as you could see here, you could call the static method directly by the name You cannot have unless it's a default four different jdk version. So interface has evolved of JD case. So just to brief on that. We have jdk 121 .7 having normal interfaces as we said the variables that you would have in a The which is public static final of course in Java 8 it evolved as I said, there would be which would be inherited by that interface and you have which was not there earlier So in Industry right now, it's mostly Java 8 very few have gone to Java and everything we have at this point. So with the latest version that's Java 9 and above we variables abstract methods and they have come up which are nothing and private static method, which was not there earlier. Now you could have It makes very little sense to but maybe they might Have or something as but at this point, I believe since this private from outside it just that you have control So basically maybe if you have a big within your default method just to modularize into multiple methods not to or big method you could have That's what I can think. What is the package we have been So package is nothing it's for avoiding Collision. So basically I could write and maybe someone else within my team would Right? So basically at the end like we have a jar file, which is Java archive when we archive this files to be named Collision, right? You wouldn't know Are you referring to? So basically namespace Stewart and it avoids in the same package can access So basically you can have So we'll talk about that will give you of what we are talking about. But basically within a package we have not done anything So it's within a package and we have all these classes so you could see that employ which is a different class We are accessing it directly. We are not doing anything But when you want to access it from a different package you which is nothing the normal living convention You could see we So it's usually something of that sort dorji dot It has to be lower in lower case companies Net domain name to begin So basically if you have you would have it This is typically a one of that's been followed the package but it from the Java side as such you could do anything. So for example, if I make it uppercase, that it's not showing error but basically you don't have with uppercase Aspire Java You don't have any constraints. For example, I could do something like So basically it even if you give uppercase. I don't know whether this is or it is of course it has because Heidi is converting it far as the Java naming This is what we do but it doesn't have constraint So Java itself So you could imagine in Java source code. So basically all this you when we refer to the string when we refer which resides in Java dot Lang. There is Java dot language is So string is something that resides in Java dot which is a super class So, you know, after we went through So you have super class So the superclass All what class you use with in Java. All the classes are inherited There is a class object in Java from which all from our all the class inherit from this particular for multi-threading. Java dot length of thread is used for multi-threading but 2 lightweight processes in of your processors. So if you have multi-core, then you could have at the same instance of time. That's what thread is all for you make it faster you have system class This package is used to achieve such as conversion of data from string to fundamental data display and many more the package So you don't have to This particular package is by default voted into This is like utility classes and stuff like that util this package is used or reliable applications ee this package contains which improves the performance So basically these It does something or does some conversions Java dot IO is a package like file input stream and stuff like that, which is basically for interacting with So basically if you want to load if you want to read or write something go file you would use something if you want to do some kind of of network programming which has something datagram socket Etc. We have applet tablet is that gets loaded It's not you. So as of now earlier but now there are a lot that have come up like an applet is a Java program which runs in the context of You have Java dot e WT like you could If you click on your checkbox or button there and you would have if you click on a mouse or something you would have So basically all these classes which is Java dot AWD so you could see which has like Mouse listener. This is specific to event It is impossible to handle events generated by So as far as the front end is concerned as that is concerned. It's not in use basically. Java is much more useful which means you take data and stuff like that, but it's not well suited and it's not used to that extent You have Java dot SQL which is nothing So we want to connect to your post gray or if you You have all the stuff So mostly in Java data skill, you have interfaces as I said, it's nothing but specifications and this specifications are So it's nothing an abstract method it would have within so all Someone will have two women or someone will have a class which will implement as developers can to interact with databases. So Wenders like Oracle will have to the Patients that are mentioned as I said most of the thing So about the access modifier. We have spoken earlier. We have public we have protected public is nothing but from anywhere within So you could have your methods your class as public you could have your instance which means that particular from anywhere within You could have protected nothing but your subclass and your current package in which a particular method or particular class resides in You could access it or any class from the protected methods defined so I will give you an example since we have spoken so I will give you a demo Modifier is basically It's within a class. You cannot access If you try to access it, you would get a compile that it's not visible default within package So within package So basically it's like protected right within the package if a sub classes are even though subclasses whereas in default. It's just within the package. So protected has wider scope This is kind of public so public why didn't scope then comes and then comes private so access So when you have Public Access modifier you have two packages. Are you Ricardo back one and a new record out back to within your class one, which we can see here Members could be accessed which is there in the same at Eureka dot Pack 1. So now there are two classes to one is a class which doesn't have one but still it It's there in But still it can access You can see class for which since it extends class one, but it's there but still it can access protected protected is nothing but it could be accessed the class is defined and it that are outside the package but So in this case we can see that there are few protected which could be accessed since they are in the same and class two are defined we have class 5 Is not related to class 1 which means or it doesn't have any relationship with class 5 cannot access any protected So here we have class for which but plus 4 is a subclass in a different package to but it can access of class one since it is there private member is nothing within the class So in this case you could see So you have class one and you can see is it class three contacts? Is it either class 4 or It's just that class So we have seen this in examples that we took in session So default package is nothing but only within the package It so in this case which has got default members and you can see that class 2 but not class 4 and Class out of this package since Class 2 and class 3 are as class 1 that is That's the reason you This is same for There's a table here, which is summarizing whatever have modified public. So yeah, it's within the class. Yes. It's within the package. Yes, if it's Yes and within the world days so everywhere it That's why you have public Yes, within packages Yes, but not within world. So just within but if you have different package or but it's not a subclass. Then you can't access it. No modifier, which is a default scope within the Yes, but we saw that it cannot be accessed if the subclass is when we save world world and they are not related in that we should saw that could be thought of as laws But reside in a different within the class you can see that it's not with package It's not within the subclass. It's not within the world. So I think we have spoken about private public Let's start off with protected. So in the meanwhile let's talk about this. So here we can see package demo which shows public it that is message. There are three ways to access So let me talk about So there are three ways to The package one is like you had a direct a 1 Sample that we saw earlier. I do record Pack 1 and add you taken right back to these if you want to access class 3 from class 5 you a new record Pac-12 class 3, since it is outside the package of back one if it's the examples that we within the same package, so we didn't have I will just show you an example that is outside the package how to access it. So we have to import it. So whenever you have it then you have to input within one thing is importing The other one is importing So in this case you and we can see There's a pack demo, which is nothing but a class So, let's see how to access package you have a Demo here that's a class that is defined as you could see here. There is one method which is taking two parameters So what are the ways in which you could access that is packed demo So the first thing that you could do the entire package itself. So demo dot star as you could see here, which says that all the classes can be accessed So you have a package which says import demo dot star and which would input everything So in this case back that pack demo class from within package demo class that's there in So basically this that you see here is defined in some other package if you want to import and not the entire package. You could do that thing as well. So here what we are doing is So we are importing and not the entire package And the third one is can do one thing you can have or fully qualified name That's your class name. You can access it So basically you would use who might use it. You did not do it, but you might use it in case within your class, but you would go with or demo dot star in which you to the class in different So in that case, you just do it once within your class. You need not do it so I create a new class which is Calm down So I created a new package. So there is one and the other one that is calm dot ed different packages you have if you want to use something Comdata Rekha suppose I want So this is what I When you try to access it. You can't do it you because it's there Now you are not able because you haven't imported it. So what I do here is Rica dot vehicle once I do this I am able Now what I was saying is if you are accessing multiple within the package like car also you are accessing so instead So what you would do is calm down at Eureka the car now So basically instead of doing Multiple times the other option that we have is like calm down So now if I get rid of this 2 inputs I don't need these two inputs because we have putted all So it's able to access and Ed Eureka from The other one was you could get rid of this now What you could do is calm You could access it directly so you can see So these are the three ways different packages or access classes Now, let's understand. What is the regular expression so regular expression pretty that you have regular expression through which you of characters from your string or you could check whether a specific Fake whether a string is aligned to So you could Define that if for example email ID, right one of the use cases like you have email IDs and you where in you do some kind and if you don't give what it would do is it at the red gmail.com. If you don't give that it would throw that it's not proper. So it's not checking whether your email ID So it is just You might have seen it. So if you give a wrong if you go to the next tab, if you tap to the next what it would show is you So basically what it's doing is its checking it It has got a regular expression how an email ID with so-and-so characters. It should be at the rate. It should have at the rate. It should have Gmail or it should have add followed by.com So basically to have this syntactic this thing that you have given it properly So yeah, one of the use cases Checker usually to see if you're giving value which aligns to So maybe other thing could be if you're typing something or if you have been asked and if you type characters there it would give that it's not allowed those type of checks could be done if you want some value to start with a particular character and You can check it regular expression is and manipulating strings. It could be used for So one of the use cases is Ching and the other one the regular expression or fields to match. So basically it whether it's a match so we call regular nothing but abbreviation So Java supports and these are the pluses that we have with in Java, which So remember we spoke which has got utility classes. So these are among them. So here you can see have mature class and you have patterns So basically if you if it's not proper, then you would get So we would be taking an example So here are some in regular expression. So it just about So you have like ABC It match ABC if the string that you are matching it ABC it would match when you put it which is any letter a b And again if there's a negation if you have this negation Mark, which says that any character should be matched. So if you put D it if you put a or b or c it will match and here If you put anything it It could be anything So when you say A to Z, it says that we are giving So we are saying from a so it understands range as well. So when you say a - Z which means that it is from A any one letter or digit. Ben sequence so basically and lowercase as well. Basically it is saying It should end with basically digit at the N dot is some kind that any one character except line Terminator This one indicates So we say that line and so you could put and we can say that if a line begins when Sue and Sue character sequence that we have put in then The other one is end if any character present at the end of the line We have an example about this so which would give you but it's more about it when we put slash B to the front and the end of a particular which means that it has I'd be part of some other that any character is not present at the word that the character is present at the end of the previous So we have /t instead You could use metacharacters. /d to define DJ when you want to Define like you can see here which is non digit which could be like which could be grouped as /t / who space tabs and stuff for that matter /s is a non whitespace character which means the actual character W is a word character W is a non word character which is a quantifier defines So star, which means that zero or more times that it has to occur one or more could be no or just one time you of times you want which could be put occurs X number of times x you could put a range within within your curly that it should occur So it's a range you have it tries to find This makes the at the first match. So as and when it finds so we will have a quick demo So here before we start off Basically, then you could see it and followed by character one or more character which is nothing Which we are going We compile the pattern. This is a regular that you have you're going So the first thing that we have to do is we have if it's properly done or not. So first thing is to compile it if it's correct up to the mark if it's wrong then of exception thrown then So once you have the pattern and you provide the string in this case you have happy learning welcome that spin past and if this is fine, it would return the result true and if you remember the while if this is true, so it's a loop so it would basically and you could see here that it's displaying I'll quickly run this. Let's name the class has I write a main method we had a pattern there which was like a to z Then we have string or you could say So we just put this one. So once you have what we want to do is we want to So what we do patten.com pile, so one thing to see here is the IntelliJ or Eclipse. So you could see here. This package is already Unless you have multiple classes it would ask you mention which one you opt for. But in this case there was So it imported it automatically So basically if this if it's rightly formed a pattern here or so. Pat and I believe we have what we do is we take and I think we We get the matcher. No so matcher would So you have a string to check So here it's asking me which mature do I want and you see this one getting So this is what we have done. We have compiled the pattern and against which we have We get the instance of matcher. So everything is This is what object oriented You have a pattern You have a method within pattern which is So this is what object oriented Everything is realized in terms This is nothing but the object So now what I do I just print this one So basically what we the entire string passes through we are trying to get So when we get you would get the string indexes matched end as well. So when we run it, n so the first character so you could see first character So I'm putting We saw that Java dot util Then you have patent then against the pattern which is to be matched are given to Z and plus means one or more whether it matches the pattern from the sentence which match So basically here we could see that Echizen uppercase and we So that's the reason I dreamed So basically if I add H hear and it won't cream H You should be able So yeah, as you could see here with previous case. It was getting primed for the word boundary. As I said, like you want to be sure and it's not a part of any word you could put So basically what we so we can mention here something and then in so what we are trying to do What we are saying is as in we don't want it to be So here in learning It didn't pass it whereas Just a It just passed this one. So if and I remove this one That's what I mean to say. So now what's exception but typically so here when it's / / be it that are complete word instead Let's talk about and exception is an event which occurs during that disrupts the normal flow So to give you we spoke about arrays, right if array size is 5 and if you try to access if array size is 5 which means that the index is if you try to access if you try to access it would give you an error or if a particular Their object And if you're trying within that particular object, you would get since it's not when you instantiate it that's But if your reference and if you're trying to access or a class you would get similarly you have like / 0 It's basically something or something that would of program execution. When an exception occurs the jvm to identify the type that has occurred. So basically within itself, it would create it so I can create my own If I am writing an application That's how we do. We write our own I can Define my own exception as well if My application or something is not running as I would expect it so that within my application or it properly prints out that this is the exception that's been triggered So an exception is often So here we can see divide Now there are different types checked exception the other one and the third one being error. So checked exception is in the compile time. What happens is when you have are invoking some method, which is throwing I don't want to get as yet because we So this is also called It means if a method is throwing should handle the exception It should declare the exception Otherwise, the program will give a compilation error whenever that's been thrown out not at the runtime. There could be methods So whenever there is a checked when you give a call to there is a method X which is throwing which is throwing some checked You are trying to when you try to access that you are taking care that is thrown from X. If you don't take care of it, it would give you when I say when you How do you take That would be the first question that would have come So when I say you have but you have to catch it. You have to So try and catch is a mechanism through Which you So what you would do is to X you would put and the catch block. You would say that if this particular this block of code, that is a Handler or checked exception So basically you write a Handler that this is what I want to do Once you have that if the exception occurs, it won't stop and check whatever is written that you have written on it's basically a decision whether to carry from their own or whether you want to break a checked exception that you handle it either handle it or you say that I'm not going I am just going to throw or throw this off from the Well, I'm executing this method about which is throwing I can choose not to handle it to the calling program wherever So if you don't do that, you would get a compilation unlike checked exception. It's not mandatory that you catch that you handle it. So runtime exception basically and it's not mandatory that you go So even if you don't handle and it won't give you So basically these are nothing but runtime exception that we spoke about his nothing but a runtime exception that you go and actually, you know handle it You can either handle it as is and during the runtime So compiler doesn't check It's done at the These are Conditions that are and that application or recover from it. For example, if stack Overflow occurs they are also ignored So even the error condition during the compilation time. It's done during runtime. Right? So one of the classic example is we're in see for example, you call the same methods like thousand times not for the stack to get overflowed. But suppose you call it like million times you call Remember when I said when you give a call to the call stack, right? We have a call stack. So it would push something or it would push the properties that's been passed as an argument the class or to I treatable if you call it what would - because basically everything would basically, you know, give you a memory for the Heap memory if you create lot of classes if you create a lot you are Heap memory and you would get Those are classic So what the hierarchy when it comes to classes and then you have error and you have exception. So exception is further. It has got runtime exception. The other ones are So ioexception SQL exception. These are the checked exception. This has to be handled if there's a method of these checked exceptions. You have to ensure that when you give a call to or you throw it from your method to the right side so it need not be handled Divide by zero and stuff runtime exception even and Class cast exception Then you have that we spoke about all these exceptions and you need not actually handle So why to use exceptions when we execute a given program handling is performed So basically, why do we handle but to get the program going at that point use of exception handling from program components handle in large projects. So basically, why do we do it? So it's done basically to get the process going rather and you could handle to that 's the reason handlers give you a simple. Example suppose 29 by zero what I am trying after dividing 29 by zero. So basically when you run this, it's not showing up It's compiling fine. Now when I run it since it's a runtime exception But when I run it, let's see if it So as you could see here it which is divided by 0 at the runtime. That's why it's or unchecked exception when a runtime exception and control comes as we saw here when we ran it. It didn't run this part of it. You could see that it broke out So whenever there if you haven't handled it from there exception handling without getting an exception. So handling is done basically whenever the exception It's flexibility to it the way they want to and get and finally our keywords So we have a trike at as I said, there's a try block where in all the suspicious one you think that there could put it into a trike block you would say that if this is what I want to do. All right, that's The finally block is nothing but no matter the exception A finally block is going So basically finally to release resources, right when you and stuff you create or you create some socket When you do some socket would be a place where in once the execution or execution of something that we can release these establishing the connection, right which picks up some or which takes up memory. So basically it's to release of So let's talk about try try that could generate as I said that could generate into the try block. So the cache block could be more about catching and doing something with it. So you could opt at that point or do something with it say for example want or you want to have for the application to see how much time what are the exceptions right if you want to see that may be a typical way in which it is done is into a database and we're in later could apply what kind of Errors you could see one of those cases where a new Let Whenever there put it into a database you make that this is the exception that was caught And you could later on how it could be improved how the application So finally block is nothing or unsuccessful the block as I said, this is nothing but mostly resources such as connections Let's see a demo of how we can handle exceptions of try catch us with this was which we are running. Maybe you could put this in and there is any kind that occurs just printing It Out Printing So what we are doing but we are catching exception and we are printing it so everything is again see exception itself. A class so you could click and you could see it as a class. This is source code So you could see extends arithmetic expression is So it's a subclass of runtime exception and everything being used here So arithmetic exception is right and you could see So that's how you could get into exception and you could how the source code that would give you a good idea about how flexible Java when it comes to flexibility and when it comes it's very much so you could go and actually see at the the way If you remember when you'd we did 29 it came right from there and it didn't execute Now we have Handled it. We are saying that whenever there is in this piece of code. That's here. We are saying that whenever there is We are going to just print it Don't stop at that point. So you could see here the program didn't break right for you to actually didn't break it continued. So you could see this statements That's why you So we had printed here. So as a part of handling what we did is we just printed of exception had occurred. So exception dot get message that gave like divide that you see here is nothing but is printed out So it give you an opportunity to handle it and get as is so try Basically. What I can do here is let me Define integer as I said finally block of pot is going to get executed. So I just print the message I'll put denominator when the denominator is and it would come or the catch block here and it would print it and then it would come So let me run this and see so it came to the exception Handler that is divided by 0 that printing the typical that we got and it came Let me put a scenario which is not going to throw My denominator is 1 which means 29 by one we So what I want to show the finally block so you could see here which this got executed because the denominator is not 0 it's one it got successfully is been executed why to use so you could have and you could write There are different exceptions like a pointer exception as well So it depends upon your program logic or So there could be null pointer so you have multiple So you usually don't handle but this is just So basically you have here been handled then you being handled here then you have finally so if you want to have different within your application, you could have multiple the exceptions are derived He should be placed at the end. So basically if you put right if you that we spoke about all out of exception class so you could have So if it is not an arithmetic expression then is of course going which is going to be handled So basically we are catching here first is specific The second one is if it's not a null or arithmetic exception then is bound to get executed and it has to be last because if you place it first Handler blocks will because even this two of exception class itself. So it has to be it is mandatory or else it would be be so you could have something out of bounds and stuff. So just to give you I put one two three I say integer array and if I try to access when there are three elements So now I put three here. So this is generic exception We would have this Handler This is going to give you because you are trying at index 3 which doesn't exist. So you would see and so it came here. What I was trying to say is so you could have arraigned X So instead of null I have arranged index it would be handled and it wouldn't come to So here you saw it came to Now what you would out of bounds exception Handler because it's been handled by and not the last catch block. So this one is as you go down So here you could see out of bounds exception It becomes generic more. Generally it is So this is pretty much similar. We have re we have that occurred array and you are trying That's when you would get array as we saw there could You could have try So basically when you if there's an exception or the innermost one, it would try to see for that particular If it doesn't find then So in many cases it may happen that a part of the block and the entire block You're going s to try block. So what I was trying to say We have one more like exception So you have a nested one within This thing with says array index null pointer exception sending It's not handling So what I was trying to say is it would check the innermost one if it finds it would execute it. If it doesn't find then it So basically though this try for arraigned X Out of pound so you can see here. It came to the outer one. So if you would have some piece it won't get executed. So this piece of this code if inner try so basically if there's a reception and if it's not handled it but this piece of code whatever and this catch would At x equal to Y to use throw keyword is used to explicitly while executing the program. So if you want to throw you could create if you want to throw something could throw an exception It can be used to throw checked of exception could be thrown and the Java through keyword so you could see here. Basically if B is equal 0 causes an exception. So before it goes to actually you are kind of handling it whether denominator is 0 you're throwing Exception a new exception. This is kind right you are you're creating that it's divided by 0 so basically Denominator to 0 you could throw it from So basically if I keep and this should be prior and this should be done prior to this event to use throws when you have you can either handle or you have to throw it that I am not going to handle this let the collar that using throws keyword. The method is not taking a checked exception and it is, you know, asking the collar of the method to This is in terms when you have So basically since you're but since you have Handler so you have this denominator you but this exception so it came here saying All right. So if I remove this that's the reason you have So I remove this Handler exceptions whenever you It has to be handled since exception is So basically you could which need not be handled. So basically the Handler we just have two handlers which is for arithmetic out of bounds exception, but we don't have a Handler So that's the reason saying denominator is 0 so, this is an exception that we So it's giving you because this is The exception itself is Now, you could either handle it like the way we You could write catch exception you want to so you when you get into this scenario You have two ways to handle and handle it. This would be a Handler. If you see the compilation error that you could do that you could do is you this method can say I'm going to throw it So the main method is saying I'm just throwing it off or the caller to handle it. So see the exception has So basically Whenever there you have to option and this is happening by the way, that you either handle it in the sense throws that I am not going to handle as you could see the throws keyword was added We saw how we Throw exception. We throw exception for some condition from Why uvu's throws throw is and a method saying that I am not going So what's the difference the throw keyword is used to The throws keyword is used The through keyword The throws keyword is followed Alright, so here you keyword is actually by instance you create Whereas throws is the class itself through keyword and throws keyword is used So you could see through within the method body and you could see throws So you have throws and throw so throw is nothing whether there is an exception you want to actually when you would right through So basically here we if denominator is equal to zero, which is potentially which would cause error So we are checking that if the denominator is 0 then we are not passing it We could throw That's how you figure Rose is nothing but it's of the method that you could see and what you mention that main is saying here that I'm not going and just going to throw it off. So this are unchecked So whatever is not if there's some exception to the exception Handler But if there is something that is not been handled out of this main method That's the reason through keyword is used and throws keyword is used Through keyword can throw whereas throws keyword multiple exception. Basically, you could have something like this one so you could have So the main is saying I'm I'm not going to handle so you could have user-defined exceptions. You can create your own as user-defined exception or custom exceptions can be created by creating a So basically create exception. I create a clasp Now, this custom exception so you could have and it would have like this. So what you exception you get you go you could pass So this is See, what I'm trying to do here So you could see It would come to this. If you are passing exception So you could create So basically to give you example What I throw is I can have So initially I Now what I am saying is This is the exception It's my own exception you can see that it so you can see here exception in thread main thread main is where your program is executing which is custom exception and I have passed the strings and at what point or at which line this particular in the stack trace. This is a stack Trace basically. Whatever you get here when an exception occurs So hi everyone, welcome to module number four Just briefed on what we covered so we covered on Hoops What are the Hoops Concepts what are different that we have in oops? Then we saw how Java is aligned how Java is known as right or how Java oriented programming Paradigm. Then we spoke which is a different right and then we spoke about which is nothing but interface which helps you and you could have per the specifications then we spoke What are different exceptions and why do we have And how do we catch exceptions or what is the need and what are different types Have like checked unchecked to be caught by your application or a particular method my top actually handling it through We touch base on regular And why do we need what are different classes that Java has to support Alright. So today we would be and Java Collections framework. All right. So file handling is nothing but you have external files on your network or it could be on your local machine and do something on it or you might want to have data that's been coming You might want to so that you could kind I spoke about exception right? If you get an exception, you could write it into a file so that you could later and understand at what time and you could act upon it. It's a kind of profiling and instrumentation turn on on the behavior and to improvise on it. Such activities could be done will talk about Java Collections framework a re array list and everything. That is we spoke about arrays But Java Collections framework which is a dynamic list. You don't have to manage it. So remember in list we said that when you take Claire a list you have to mention whereas array list is dynamic. You don't have to mention it. It keeps growing. So these are the topics that we are going to cover in Java wrapper classes in Java. We are going to talk about We are going to talk about list in Java and sets and So as you could relate all within the collection but data structures in general. That's you straight. So maybe in see you might have and whereas in you have different This is just to handle but to store data efficiently and you could select one that you're handling So let's start I/ O is nothing but you have a file on your disk if you want to write to that or if you want to read you would ideally All right. So file I/O is used and produce output All right, so you within your local and you can write it on Write Java dot IO package contains all the classes and output operation for a Phi. All right, so As we said package is nothing So everything is grouped. All the I/O classes are that is handling. IO is grouped into Okay, that makes it easier for programmers to Right? So if you're doing a lot you could directly say which would in put within your Java dot IO package. All right, the files could be binary file, right so you could imagine not always right you have So nowadays. There's a lot on iot right internet of things. So you get data It could be like It could be from the car sensors You have a real-time into your system for analytics. So such data Txt file as such is right so such iot applications. What is been passed between between systems is done which is kind compared to text file So you could imagine this files It could be binary files and so it could be it could be images as well write different images that could be shared that is there which you want to read into Java and do something on it some kind on it right stream is So you convert this file into a stream and you Okay, we'll look at example, which would give you a clear Okay, so here you where in you have a file which is student dot txt into your local disk where you are running have a pretty Traitor this is nothing that is exposed by Java which is there in Java dot IO package you So initially you have new file and you pass on that you are going on not just read it could be So basically you have new file and you specify the path name The next thing that you do is you pass this file. All right. Now what we are trying to do into a Phi, right? We are trying to write the name We're trying to write into your local file which would give you that we are doing here is kind Alright. So the first step that you do is write it that you do is read and print the contents of it. All right, so it's not mandatory that you have to specify This is for just or just to demo it. We are using the same different file as well. All right, so let me show you So again, I create which is All right, so we create a new module 4 Alright, Let's create a new class. Calm down daddy. Rekha is nothing and I give up. input output demo Alright, so before we start off I can create a folder here. Say said, Eureka. All right, so we'll put So this is the empty folder that I have created right now So for Simplicity, I'm going to put it Alright, so on see have created where in we are going Whatever we are going into this particular directory. Alright. So the first thing that we are going to do is so into a file first right? So I create a main method right? The first thing All right, and I Which is nothing, but I am calling the Constructor which is with in Java. Right? It's not something So Java itself has which is file. All right. So now a point All right, calm down so I call it Alright, so we are going from java program. So now it's showing that which file I as we said the all all the all the I/O in Java dot IO package. So I select this package once selected you can see Being up. So why do we because file is a class which resides in a different Eureka had it been You need not import So you have to put it right then there are different ways but now we'll follow So I write Is there within Java dot IO and you could see All right employ okay now we create a new printwriter and if you see so we spoke about Constructor Right? So you could see If you want to Deep dive into the source code Alright, so here you which is nothing So the file I can put it as All right. So there's a file So I put the same since the Constructor Now this is checked exception. All right, you could see here. It is saying Java that you are not All right. So ideally the better practice is we shouldn't be writing because it would become later on right you to the main method. So as a good practice, what you should do a new method right to file. All right. So this is best It's not mandatory. Java is not going to tell you But as a part of best practices, this is how you which would make because tomorrow some other this particular class. It's not that you throughout right so basically so that other developers and maintain it. Well, this is how we write it. I move this content. Whatever the writing part is. I move this content here. Alright, so now it's showing that it's not been handled is not been handled because it's So remember in the checked that there are two options one within your method all can hop to throw it off saying that I am not going to handle So when I say caller caller is so I am going to create Sam trading in instance here. Alright and demoed right to file that we created here. All right, so there was one file which is pointing And we are calling if you think about So this is how you make If you put it into Maine If you're taking the right logic and putting all the code that is specific to writing You could reuse it generic right now. I opted to throw it off All right when I It's nothing but you All right, so I say Catch It was filenotfoundexception. So you need to have Alright, so here I print saying that given file was not found All right, and once that file of the file as well. Alright, so here we Okay, so we remove this. Alright, so we have a try catch block written now so we are handling this error. So we say that it that given file was not found And as a good practice, I don't want if I don't have a file I don't So I say through and I so runtime exception It won't give you error even right whereas this was That's why you Basically. What I'm doing is I'm catching and wrapping it All right, because I don't want So once we have so I'll have to take or I'll get here. Alright, so what I do and I write some content to it and say in this case I write some ID to it as well. Anything you could write. Okay one side right I have to ensure So basically you so you would do this. I'll have to take so this if this is within try within the finally block. So to make it accessible what you will have to do is All right. So I Define it outside Dry block so that it gets Alright, so now what I do is employ I close it. So that's one of the use cases it's basically for So this finally if this doesn't throw or don't throw any exception if it throws an exception. All right, so that's what the use So let me quickly run to create a file here. If I create a text All right before I create a file maybe I will I would want if we don't have a file, right? So if you don't have so we don't have anything I oh, all right. Basically, you're trying which doesn't exist at all. So it's building. And it's running now. Even if you don't have a file, it doesn't throw file It creates one on its own. So remember we Now. Let's see the content You could see whatever we rode and you could see which is hundred. So whatever you wrote All right. Now, let's write or read through this file. All right, so maybe I or I can use something So I write something All right, I I write It's a vehicle info and say you have something as is okay. So you have So now we are writing All right, so we pass on There are different ways All right, so we create if you see instructor you file as a parameter. All right. So I put scanner file again. It is saying that file not found So in this case, you have to be sure since you are reading it was writing to the file which can create a file but reading to the file that the file is present or else you would get So in this case, The read file is saying that I don't want instead threw it off. All right, you Okay. Now what we do is we read So we have like Okay, so we read line from it basically, you would have me just print line read So this is nothing but we are just printing Basically, this should have until it's end of the file. Alright, so this is how you use the while loop in C and C++ right till the end of the file till yo F character is encountered you kind of read All right. So this is a method that we have written but we So I create file since it's a different file a file vehicle info We give the path of it, which is nothing but a Eureka All right, we Now, what we are going to do read file on this file or vehicle info file and we should be able All right. So now one thing here is since you have thrown that exception has All right, I can choose here as well and I am adding it Sure, so main So basically what if you don't have a file which is being read your program because you're not handling You're just throwing So basically at the end if you don't have a file an exception your program I run this file and All right, so you and Audi being read out This was the content and which you could So file writer and file reader so similar to print this one is So what's written but we create an instance and we pass the string the path to the file writer is nothing but right print was not This one is character oriented which means two bites but two bite-sized with in Java. So this one is not at the byte level. Basically, whenever you're dealing with you could use this one rather All right, objectify which is a character a character oriented place. All right, and you write to the file here. All right, and similarly it's a character oriented reader at a time from the file So maybe I will take just because it's going to be So quickly write this program. You have a main method to say you have public as I said, the best practice as much as possible rate. If you don't want this method you could have private method so it's going So you need to give string Whatever you prefer and file to write to okay. So basically we were talking All right, so I create Okay, and again say And I pause this file All right. So again, you could see now you that is nothing but issuing to be handled now I I'm not handling it here. Bike in four thought and I write some content. Basically, this should be writer All right, I say this particular file. Okay. Now I give a call to this method which is nothing to Nu we are creating Okay, let me create a file which is nothing and which is new file which is nothing record at I/O. I create by info Dot txt. Alright, so what we are doing We are going to write And we are going that is Ducati and maybe after this we could have that that would be flushed Alright, so when I don't have a file now bike info so you could see here. We don't have a bike info file. Okay. So again, let me talk So what we have written So what we are trying to do we wrote using printwriter. Now we are going to use a character stream based I/ into bike info dot txt file and we have a method in which we are creating which is taking or taking this pile, which we are going to read All right and not read So the file to which is taken as an input parameter to the file writer and we So right now we are just All right. So I invoke this method to file and I pass All right shows up an error Option which is been thrown So I choose not to handle Which means if you or if there's some ioexception that's been triggered you All right, so I So basically, it and should write to it as well. All right, so I go So you see bike info file We didn't have it earlier. It got created I just open it up and you should see the value All right, so that's and similar to that. You have to just You have to pass the file that you want to read and you just have while loop till the end of the file So basically it's pretty for the printwriter, but I just wanted to demo so we took an example Alright, so now let's move so Java streams are used and output operations A bite right screams on a bite input stream. It is used to read the data from The Source it could be or it could be anywhere across right? It could be a socket as well. So basically it is used to read that is input stream if you want to write to any resource on a network, that would be nothing but write that would be nothing All right. So with output stream you to a destination You're going to read All right, just to walk you as I said all classes or every class in Java That is object. All right. This is a super class for all the objects all Okay. So you have object that this input stream So let's talk There's file input. Beam, there's byte array input and this object input stream. So we'll talk about this Why do we have and stuff like that. But right now you could imagine that we have multiple classes that there are multiple classes which are used Like you have which is nothing It doesn't read It's sort of buffers it All right output stream We have an output stream. It's an interface. I believe which has got like file output stream. You have byte You have filter output stream. You have object output stream and filter output stream or has further sub classes and data output stream. All right, so in further slides, we are going to discuss file input Stream file output and object output stream. Okay, so file and file input stream class. Let's talk about it. The file output stream class is used to write you could take a bite array All right, so you If you have a string into a byte array and it would write to a file. So remember we said it's So basically it's going and it's going to write to it write to the file that you Right so you could take It is used to write to the file output stream. So you could provide There's a close method but closing the Stream but it is hooked up It is taking up resources and there is a Action and the file established rate So when you close it you close for garbage collector to remove that particular So basically freeze unless you close it. It's going to stay So it's a good practice after you use it. Okay rights, you could write which could be done So right length bites, whatever length you have it would write it It would write the bite or bite that you It would write that bite do a particular Offset which is nothing and forces any buffered All right, so it so not writing it each and every time You have bite and you could have flush method So basically we which is this Method All right. So here we have and using file output stream. We rewrite it to the file All right, as far as It's pretty much similar that we took but just to give how it is. We'll have fun demo done here. All right, so I which is nothing Alright, so we and I create a new method which is like file Which could be private void write to a file? Alright, so we are going what using file output Stream so I select Java All right. Okay now I create Create an instance how we did for other programs. Now, it says file not found I choose not to handle it and I throw it back All right. So now what I do is I do file I am going to write So I just write a text here. All right. So write a text here. Hello folks. Hope you're enjoying the session it throws ioexception So remember we said there that could be thrown So I again I choose So basically what I'm trying IO exception as well. Okay, so it doesn't take So what I have to do is As we saw the Constructor isn't takes string as input in case of output stream or in It interacts in terms of byte array So I converted this string So when you see get bites get on a string class which converts the string All right. So now what I do is I give I'm writing to a file and I'm going to take So I can take I am going to take a b All right, so I create a file or you need not even create it. It will create by its own. I will delete it may be okay on the thing is I love All right. And here we say message dot txt. All right, so I call a method file output stream night from here as well. Alright, so we have a method which is going to write into All right, so I Okay, it ran successfully. Let me open this message and see if we have the All right, so you Hello folks. Hope you're enjoying the session which is written All right, so this file which is pretty much similar in terms of bytes. As you could see the signatures would read the contents that you have passed The second one is to read from a particular that you have mentioned or passed as a parameter close It would close the connection that's been established and it would make for garbage collector Okay garbage collector where in you have to delegate that's been used garbage that is run by jvm to remove the that's been acquired by classes. So it runs sporadically it's It runs per radically and it We have a reed method but reads the next bite So on the file input stream it would read out the next bite it would return -1. So the return value is integer as you could see here you of bytes from the input stream and available Returns that can be read right? So maximum number of bytes So I'm just going to read or if you want. Yeah, I can take since we didn't take I'll take one example Okay, so here I to file so we create a class here and I have a main method here. Okay. I have a private method which is void and it's and I said read from file. All right. which takes file Again, Okay, so Java dot you could see the input statement So now I create Okay. I create a new instance of it. Which would typically take for that matter it Just to show you It's not that you have could pass string as well. Alright, so we are It says file not found since its read you that you have the file there. Right? So I choose to again So I'm not handling it. So typically you when you want to do Right when file not found if you're trying to read a file in your drive. I wouldn't handle it. I would just throw it off. I want program Right? I don't want it to proceed because our program at this particular method and if it doesn't exist it, it doesn't make sense All right, so I Now what I do is not read and as you could see it's written so This has to be looped. All right. This has to be looped So basically you would have like so this is integer All right, and I which is so whatever you read want to write that as well. All right, so I'm assigning to this and unless this to read through write it which I need to handle. So this time it's ioexception and I'm going to throw All right, so you have a reed and basically till the time to be red right now. What I'm going to do I'm going to just type. So basically I'm going to just It's read as integer. So you have to convert If you want to see If or else you would get Alright, once this is done. Basically I need to close Okay. Now what I do is of file output stream demo. Just nothing, but creating Right demo dot read from file. But remember this time we are We are just passing the string. All right, so you since we are reading it we could for it just got valued Ducati. So I'm passing this All right, and it's You could pass it You could pass it But since I have been passing this time I choose Alright, so now I from here as well since I So if I get an error, So that's the reason from here as well. So coordinator, let's see. What's it? Okay, so I have to put All right. I miss that one. So basically if you would take it as a regular It's not bike which I missed I believe so it says that bike Right since it's You have to provide All right, so you of characters, right? So you could see the first you could see it followed till All right, so that's or file input stream. That's how you write programs. Now what serialization and deserialization I since this is something that's been used widely to Big Data or when it comes Just not to if you If you don't understand you but I'm just talking in terms Right? So when it comes to Big Data, it's not that you have Your program doesn't run It's more about you on which a program is run and that's what about the investments by having server Farms has been cut down a lot and you could have on which you could have this So say for example, you might have heard which could actually run or you could Need So you have like which is cloud like you Google services, which exposes as a cloud which is nothing So all these are kind of not big that you have. It's a normal Hardware and you could run or petabytes of data that comes in from cloud So that's the beauty of it. That's the beauty of the main things that Java has and deserialization which helps in having this Okay. So serialization is nothing right and you you create which is nothing this instance of a class if you want to pass it over or some other computer right? This could be done just because this Serialization of serialization right suppose. I create some object And if I want to pass right it's about not the behavior behavior is So it's about passing So whatever state my object is or whatever properties at some particular point if I want to pass it over on the network. This could be done just because you have what you would do is basically if you remember the object stays which is protected which no other process can get He process Heap memory, right? That's a security if you remember in the first So what Java does by serialization is whatever or whatever contains set any could be written. To your disk as a binary file and you could send it over or you could take and you could just take that that's created and you and just play that file or just deserialize it Right? So you could imagine that is needed in terms since not everything on a single computer you on your computer you would you and you need to pass or transport this file to different computer right would think of serialization Could you could have say for example one operation and same operation or different operation on some other computer now you want to move Just them where you would and deserialization coming into the concept serialization is nothing but writing the state and deserialization is nothing but again taking that's been written to the file to a class format or when you want to use You would basically So serialization is a process To sequence of bytes, which can be persisted and can be sent through streams or could be you could actually and transport it elsewhere which will convert is called D serialization. All right. So how do we have and deserialization done or what classes we have Let's talk about that. All right in this example. You have a student info which is having ID And basically you could see that we have created which which has value All right. And now what we are doing is we nothing but the value that this particular which is nothing but ID of John, right? So we are writing this which is nothing And and we are just writing Okay, and this is nothing that you see it should be txt. Actually. It's it's a binary file. So you should I would rather n or binary and you using right object. So the supporting class for serialization is and object input stream. All right, so I will quickly So the first thing that we do is done by object output stream. All right. So again, we have I want to serialize it. So I would do something like say I have a private method which is serialize. Okay. So the first thing I is nothing but Java class So this is a class which you want to serialize across two different computers. So such losses are known Basically such classes which holds chunks of data. So for Simplicity, we have taken small data but in general you would have They're all right. So here I say Vehicle info. Maybe this is the class Alright, and now what I do is suppose two parameters here. All right, so I have which is nothing but integer and suppose I have Alright, so now I Define which takes T three parameters First. Say for example, then it's number of wheels and which is mileage. All right. Remember we use of this keyword since the name of the arguments and the name of the instance we need to use this Is equal to number of Wheels? All right, and this dot mileage All right. So this is a simple model class which is supposed Basically in reality. This would be holding Okay. Imagine like could of information or even All right, but we are taking Now. What we want to do is we want We are going to of this particular class and we are going or whatever values we have We are going to so that it could be read or it could be used by All right, so I Again suppose I write BMW is Now, what I have to pass which is BMW right number of and I pass some value Okay. Now we have created and we have passed the values that we want to pass it and now Okay. So how do we see realize object output stream, right? So what does it take? So basically you could go if you want to deal see what other Constructors that it takes. You could see it So one is output stream If it takes output stream, then I'll have to create Basically. I will name this as object stream and this one Okay, I create a new and you could pass the file All right. So in this case the file on which I want to write I will pass it as file and I'll be passing All right. So what I am trying to do So you take the file or to which so basically this vehicle info into this file and this file would across your network. So it shows file I choose to throw it. It shows my exception now, I've passed this Alright, so this is You have file input which is nothing but the file to which you want to write write and you instantiate Okay. Now let me write to it. Okay. So basically what are you but vehicle info just So you're going to you of vehicle info particular into your into the file? Okay. So I write something like this. Okay. So so basically what we'll have to do here is whenever you want to write or whenever you want of a class to a file you need which is serializable. All right. It's a do-nothing interface. It's just used by it's well marker interface rather. It is just used by jvm to say that this particular class but it doesn't have as you could see if it would. I've had some methods it that you should implement it. But in this case it didn't any methods within right? So basically when you Okay, so it takes all right. So we we create objects stream and we pass the file and we have right object method of the class that you like we flush it So one thing to note here to implement serializable. That's a marker interface but a marker interface and it doesn't have any method as you could see it's All right. This is the source code of it. You could see it's It is just a marker or it is just a notification that this class is something Alright, so we have this class and we are going of BMW object into a Phi. Alright, so now what I do is I create and I call serialized within it now this serializes So if the first parameter is We are not actually We are passing it directly. All right, so I pass this Okay, maybe dot bin that it's taking is nothing that you want to serialize. Alright, so here we which needs to be thrown off. Alright, so this is have we have vehicle info which carries BMW instance or we have created instance and we are trying to serialize which is serialized Okay. Let me see if it runs. Alright, so I hope it ran now. This is a binary file. If you see you are not going that you have within this file. Okay, so I just Okay, so here you could see completely readable, but you could get It's during game W. All right, and this is not meant for you to read it writes This is basically for passing and at the other end you Alright, so this is We will check on All right. So you you saw It's something that Okay again, I'll open it up. Not everything would make sense. But you could see So basically you could see So now what I do is I want So this is We spoke about it how we see realized it now we So basically this on the same computer. It might or might not different application within So if you have and want to interact running on the same computer and deserialization or you for this feature is more about passing it All right. So, let's see Okay. So when you easy realize it Okay, so in the same class I'll change this because this is so I Defector it and I change we name this too. Okay, so this is been renamed create a private method, which is nothing Again First DC realization you you could imagine of you should be okay. Okay. So now what we do is basically we could have since we are going Same file for DC So it's better to have And you pass it as CD list. Okay so far we have serialized it now we are going So what you do in D but you use object. So the first thing that you will have to create file input stream about now, we are going to file output but here we are going And a provide the fight here. Alright, so we have file we have object input stream. Alright, we are creating would be new object input stream and you would be passing that you created the step above all red showing You have to could either throw So this case I'm Alright, so we have so here you could see I'll have read object. So read object throws not found exception that you need to handle So here you could and class not found can choose to throw All right, so we have chosen have vehicle info whether it's BMW at that point. So I say d serialized object. All right, so object streamed It returns object type. So we need to we This is how we typecasted So basically we know or read object is going That's why we can All right. So now what I do is once I get this D I'm going to print out All right, so I'm going to print So I say All right put us. Right, so name of the vehicle I just copy paste. It will print number and we'll print mileage Alright, so basically and then DC realizing it We are printing the value or we are printing the contents if it is what we expect. All right, so maybe I can delete this off. Let me close this and let Okay. I'm deleting serialized info. I'm going to run and this program will serialize Okay, it will see realize it And now I'm going to write would and the serialized file. All right now here as well. I am going to throw away. Okay. So first we are going and then we are going whether we get the contents All right, so it's running. Let's see if the file So we deleted the files. It's not yet come. So we can see Right which is a serialized file from be serialized file as We printed the value in the serialized file just like we got the expected value which you had said. So basically what we are storing the state of a class or state of the object to a disk and this when I say it could this is just a binary file, right so you could take it or you could take it and you could take it anywhere. All right. So that's the and deserialization. I spent more time on this because this is something for Big Data since big data is nothing that we have they follow and this is one of distributed computing though you need not. Take care of it. It's all taken care by But this is an important All right, so let me quickly It's not an important topic to but I will quickly So wrapper classes are primitive data types that we discussed So initially we didn't have when the initial version So data types were dealt in terms of primitive Then since Java is It has to be completely came up with a concept that we shouldn't be a primitive data type rather. We should be having which is rapper, right which is wrapping So in order to make they have come up right so int when you if you define int it's Native whereas you Inti is going to be and whereas you would have which is nothing So if you go into you could go into the source but it's doing the same thing. It has got some utility methods but basically it So for now they have changed Basically, it's touring in terms All right, so you But what I am trying to say but a rapper built so that everything is taken care completely object-oriented So Java has a class dedicated These are known because they wrap into the object of that class. All right, so you could see for corresponding wrapper class as Be all right, since it's a class it has or it has to follow has again short int has You could see with name float double will have double character which starts with a bouquet camel cased Boolean All right, so when it comes to classes So basically you could see that all this byte short integer Everything is subclassed So basically in the source code that we saw for integer it's extending number right? So that's what it is saying of number integer is So how do we It's basically you just have You could have as you could pass some kind So you could either assign value or you could have something Okay. So you have different You could either create literal value to it, or you could have as you could see This is no longer required. Actually. It is still accepting it. It's not throwing but it's deprecated. Which means if you're you shouldn't be So there's also concept which is nothing but if you have like integer a could All right, or could be assigned So it could be converted into your primitive type That is known as Auto boxing. It does it by itself? What is generic in Java generic in C++ rather you have which is which is a general. Thing you're not putting in a specific data type that this is what it is. It's a template and you could have So basically what you're trying or this particular class which could handle any data type So it's not specific. All right. So generics in Java is similar to templates in C++ generique when defining classes interfaces So the type parameter is nothing but a generic type that it's going to deal just or with string. It is saying that it that comes anytime that you would instant. She ate that class with. All right. So when we take example, you should get some more idea provide compile time. Type safety allowing programmers to catch invalid types So generics work which is nothing at the compile time itself. Basically, it's done It can catch exhibitions or it could prompt you during We can specify the type So whatever type you want to do, whatever type is to handle we can put it which makes it generate right? So here you could see that this is a method which is taking e as type. So as you could see All right, he is a type here that it is going to take or string array We are seeing that it generates. So whatever you pass or whatever you it's going to take that array All right, so this Method of as a generic method, right you could think of this printer as which is just taking integer It could be string array So that's what of generics type safety objects or single type can We would be looking at it in the next example There is no need to type casters because it knows that particular data or hold compile time checking in compile time, which avoids runtime errors. All right. So imagine a list which we are going to talk but imagine a list All right, and you have which is holding strings. All right, so you have list dot add and you you Now when you get 0 typically get Zero would have object since it doesn't know that it is just carrying string that it is a string of it's a list of string right? It's a generic list so it could hold Alright, so in that case, what you need to do is you have to Typecast The next element We don't know right since we haven't said So that's that the reason you All right now using that this list is All right, it's going to carry It's going to hold now. It makes it simple right If you try to during if you try to add like list dot add hundred. It would throw an error saying that it cannot pulled integer So that's the advantage Rick's you could hold it during the compile time itself. All right, so it or it won't allow in to your list of string. All right, and since we know it's going to hold of typecasting it as well. You can see here. It's not typecasting it in this case you had to put So basically in this case, There's no type because we know it's what a collection Frameworks but you have data structures Again, it's a wrapper All right, it's nothing but like you have array which is but this one would be So basically you need not take you know adding It would automatically It's So you could imagine when it comes to array you You could imagine within collection is list, which is nothing but growable All right, so Java Collections framework to store and manipulate or Java Collections framework has interfaces classes and algorithm interfaces is This is how it should be. So Java says that you know, when you have a list it like adding to the list setting to the list removing some elements to the list So it defines collection should have so-and-so methods and list should have so-and-so So basically it's for but concrete implementation so list by itself would have that you just the it's So it would have all the methods that you want But this classes implementing it or rather. It would be and would be giving a concrete Right? So as you could read here, it's concrete implementations in essence. They are reusable right algorithm is nothing that you have like if you want to sort if you want to sort a list list using your algorithm using that already comes All right when I say algorithms and where are It is a class So you have a collection which is an interface and you have a collections class Which is holding all the whatever you call who basically you could just These are different types that has been supported by Java. You have a collection. So the top level interface is as you could see which is extending extending iterable interface an interface you have which is extending collection. All right. So list is extending collection is extending collection. So we have three distinct type of data structures and set list is nothing but you right it maintains the order in which you Q is nothing but and whatever you push in and set is nothing but To sit in you have unique values. You cannot have So that's what set is It need not maintain So you have the concrete our array list, which is nothing that we have right that we use. So it's a wrapper class for it. We have a linked list. Alright, so this linked list is All right, so you could insert the either direction you which is which is Legacy Forum, which is not used So we have vector which extends this Vector but last in first out and it adds some more capability which is nothing but it's a subclass of Victor. All right, so these of list we have a Q and there's one interface but it is extending Q. Alright and we have an array D Cube All right. It's a class which is All right, this is which is a class when it comes to set which is again an interface and as you could see which is a concrete and it sorts the element It sorts it into All right, again, the concrete implementation which is nothing but which is a default and which doesn't as set is nothing but it is indexed or Want to go get its kind of indexed set. You could say right it has It follows hashing algorithm, right which is which is basically for indexing or which is basically meant from the hash set from the set That's the default has said, all right, there is a linked hash set which All right. This has said doesn't maintain So if you put X &amp; Y and if you retrieve it or and print the values, it's not mandatory that you would get X whereas in the linked has set a hundred percent sure before why all right. So it maintains insertion order nothing but an ordered which can contain duplicate son like sect but it has ordered an unlike say are further classified into and vectors, right? So based on the use case, you could select one Let's talk about array but similar to arrays that we had and here you within of size 5-a released of size 5 and you could see So this is how you instantiate an arraylist array list object and you have an arraylist about arraylist is as I said itself growable or its Dynamic you unlike array where in you had to you had to mention during the Declaration itself. Whereas in Array list, you need not have All right, it grows when you insert data So basically you in general scenarios or in most of the programming cases or in You don't know up front. What is the size of data that a particular array Now the number of elements is going to hold you because things So suppose you are reading You don't know what that size of the data or what what that a particular database So typically you could imagine real cases and not primitive arrays. All right. So also you could imagine us in terms of memory because we are not hard So by default, it starts with 10 size of 10 and when you insert it. So again, it has a logic it and every That you do but it has a logic by particular size. So which is all optimized which is good for your So these are the methods It's very straightforward. When you do add it It's usually add and You have a doll methods. So it's a typo here you you mention an element that you want to if it's a string you would have string string element or if it's an integer, you would have integer element to a particular index you could clear it removes from the list you of a written the index of of the mentioned object. So if you have multiple as we said they could be when you give last index of All right last index that's been passed So it's basically coming that they're within and it would shallow So whatever list you have Right so clone is it's it's from the object class. So any class that you All right, then so you could have if you want to convert it into in some form you could do by doing two array you So trim to size is nothing of this array list instance All right. So whatever is the size it would trim to that so how we can Traverse So travel cell is done Okay. So basically you have how you Traverse it. Basically you have since it's an interface the specification you would have So I traitor is an interface It is used to Traverse the data element and remove the data elements All right, it's used as removal of data elements Okay. So what are the methods that we have within I So it's it's nothing but as you could imagine So if it has a next element Okay, and if it doesn't then if the arraylist then it would give you false. So you would I basically would have a loop if it has a name next right and if it has next you could using next Method All right, so next and to remove it you which removes the last element Alright, so here you could see how I treat her have you declare an array list and you you I trade through it and you print the elements So basically I do create one more package Okay, Isaac collections, All right, so I have this I create a main method I write a method which is create All right, as you could imagine to return an arraylist. All right, we want Okay, what I do here and this list is going Okay, imagine generic that we spoke that it is going to be it's three mirrors saying to be Java dot util so you could see Java Now. I say it's strings dot new. I didn't list. You're saying that here what we are doing is So we have a list of strings since we want arraylist. It's going to be a release. So here you could see array list All right. Now what we are going to add some values or maybe I will put again since we have been and bikes I will cars right? So we are creating All right, so I all right, so all German cars We are returning this. So we are creating a collection. Right and we are and we are returning it. All right, so this would create I want to I trade So I create a private method and which food print All right. So as you could imagine this is going to take All right list list or it's pretty much implicit or implied that list is as a parameter is going Okay. So here what I would do I take the I traitor. Okay, so I get I say I traitor and it's a list I traitor All right. So I take this list I traitor and I say list right while while it has how do we check with whether it has elements has next if you remember while it has any elements to do is we are going to print Alright, we are going to print Okay. So I've created two methods one and the other one for demo create arraylist but it's creating a list and it is returning the list and printer a demo that you have passed Okay, so I create a new element of array list All right, and whatever I realize Will is that I get I Right now I create All right. Now when I print it this returned array list. All right, I think So we have created and we have returned it and in the second case we We are going to take and we are going to print it. All right. So let's see. So rest of the collections most of the collections you do It's just that you know, it's used for All right, I am getting Yeah, you could see here. It has printed BMW Mercedes and Audi which we had put Alright, so that's how you kind of Similarly. You could just remove it. You could use list I traitor Don't remove will remove that's penetrated. All right. So yeah, this is I create one dot remove All right Drew. So that's how you remove it you have the same syntax. So basically we don't use It's more about we have Java 8 Like we have Lambda We have screams which is you have I traitors. All right. So this is what we have which is I creating and you could remove the I traitor usually nowadays. We use Java 8 streams which helps us to I'd rate like the underneath is I traitor and stuff but there of abstractions done so that we don't I traitors there's are it's less verbose You have to write a lot of code Whereas in streams. It would be just one method call which would do lot So that's what has but this should be good enough the basics of it. Alright other thing about the best practices. So it's good to have things So that could reuse it rather into the main method for any other developers So basically it's Make it modular, right and which enables which reduces the lines So tomorrow if I which I want to I trait I and it would right fit So I don't have to write Alright, so moving on so we have a released arraylist on a primitive array. So what are the advantages It's more about it's faster in terms of retrieval right If you want to get like arraylist get to and it would give 2 or the element when it comes If you want to insert at index 2 what it has that was there at the index 3 and it has to increment or move to the right by Position right which takes a lot and deletions are not good whereas when it comes So based on the use case which data structure So simply put we think It's mostly about you don't have as such it's not transaction, right but typical this thing would be for example, you have Amazon where in you have a lot which needs insertions in that case arraylist Whereas in terms of big data, which is like analytics right which doesn't have It doesn't have It is one-time load into your data structures and or you do some kind but you don't You don't actually have insertions or deletions It's better to go All right, so which is a variant which is good that is linked list. All right, when it comes and you want to maintain the order of the list That's when you would go All right. So linked list is which contain items to another link and that's how insertions and You don't have to shift when you insert it or you don't have when you delete it. There are two types of linked lists to store and doubly linked list singly but it has pointers in One Direction like it has previous Both each node would store the previous element So yeah, this is a singly that it has pointed to the next. It doesn't have pointed It's a one directional Whereas in doubly linked list, you could see to the previous element as well. So it has a pointer to the next and it has pointed It's a bi-directional traversal. So linked list has to arraylist you have ad you You could check whether a particular object is and that object has to be passed You could add a certain element You could add it to the could add to the last you could You can remove the element could get the index so you could pass some element since linked list is again, it can have duplicate elements. If you want to get of a particular element you So if you have you would get the last one So linked list example that a linked list and you add values to it, which is fragile Rahul and Richard you And and yeah, this is just about adding All right. So arraylist versus linked List Dynamic array to store it's Groove able it grows on its own linked list linked list to store in between or to from the array list slow because it internally uses array if any element is removed then the rest of the elements All right, similarly when you add something to move everything in between or removing an element with linked list because it uses So no element shifting You don't have Or something. It's just about Right? So you would just move and move to the next in Whereas in terms of insertion, you would insert a node and you would manipulate the pointers according can act as a list only but linked list could be thought since it's a doubly linked list first-out arraylist is better All right. So as I said, this is pretty much good enough of application analytical Whereas when it comes to transactional linked list So linked list is better and it is slow because it needs to compare when it comes to you know, index based search. It is slower because it has to start Was it goes through links? Right? It has links to next how it traverses through but the Legacy form of it. It's a dynamic array again All right, it could be similar to array list, but just that it's It's not used to that extent or I would say it's not used But what is important to note when it comes to multi-threading but nowadays we have that is supporting concurrency. So there are a lot which gives lot So vectors are no more used It's a Legacy form of arraylist. There are concurrent that that has been evolved which could be used All right, Victor. Contain many Legacy methods that are not part So it doesn't even fit because it contains which are no longer used or which are not part Now Vector is again taken and it implements list and that's the reason it for this methods because this methods are and list collection interface and list interface and all have to implemented. And since Victor is one of the concrete They have to ensure that they Implement All right. So these are the methods what we spoke earlier to a particular index remove and then you could have size and you could have last index So it's a vector of string Issued fun and Kumar and you through it to print out and Kumar would be the output or this program. All right, so you could see Like we did it in list. So let's talk about QQ is out whatever goes in first would be first to come to initialize the queue. These are implementations of Q. So you have as we said linked list is could have linked list assigned is the list and linked list is which means it's So here we can see double and remove so double-ended allows you to Add and remove elements from Peak That's what DQ is right and array d q is nothing of DQ EQ is an interface and the concrete q. So what are the Q which is nothing but it adds and it returns a Boolean as you could see here if it has added it would give you true. And if not, then it would give you which inserts the specified it does the similar stuff. It inserts to the cube. All right, you have removed which removes the head which retrieves and removes It does the same thing retrieves and removes the head if the queue is empty. All right, bullying is nothing of the queue. And you have element which retrieves but All right. So when you do Q dot element of the queue of the head but it would just give you So if you want to check value if you want to check it and do something with it that is there on the top If you want to perform using element Peak again does but it does not remove if you want to actually retrieve of the queue you would Basically you would use pole not remove right remove is when you want to retrieve The best practice would be to use piec to retrieve and use and remove Alright, so let's take an example of Q. So right here Secretary main method, right? So I create private. Q v8q for demo All right, so it's asking me which is Java dot util dot Q. All right. Now I am creating a new priority queue which is which would be say So I create a queue of integers. So we are putting integers and what we are doing is new. I am instance eating it. Alright, so this is a q which is going to That's what Jen Rick's come Queue of integers I put a hundred and then as I said to insert So I've created a queue So I've created a q so far. Let me print this queue. Alright, so we have which is going to return void and which is going to take you. All right Q of Cl you I so now, let's see how we can retrieve elements to I trade through it and other things work right? So let me get the head So this is just retrieving head of the list. We are not removing it it is We are just trying So when I say when it's if I want to remove it if I want to kind So basically what I'm when you have q dot Peak the top of the list All right. So the first one the peak Whereas when I pull it and remove as well. So I have q dot pole when I do s out retrieve and remove Say this is All right, and we again do it This is just to show you that when you pull it it's Whereas Peak is not removing it. All right. So Peak is just retrieving it So the first pole whereas the second pole It's going to give you 200 because it has removed All right, so this is So let me Q demo Alright, Dot. So when it comes to generic we by doing something of this and instead of hard-coding it Right now, let's keep it as is. Alright, so the first case Q is We are going to see Retrieving is just ringing and it is still at the top of the queue whereas polling is actually All right, so you could see the last one here. It's a double-ended one. So it's giving you and pull is giving you this one. It's based on Friday. I think. All right, so you can see pole is giving you 50 as well it's giving you a hundred. All right, let's move All right. So here we have something All right, you know, so it's a double ended queue in both the directions remove first and add to the last and stuff like that. So you could see here that there's a double with four elements initially that remove first is removing 4221 rather from here so it's removing 21 last it's adding to the last which is nothing but it's adding So what is set is nothing but as we said it's a representation of mathematical set which holds unique values right? You cannot have duplicate values within set set has in various classes such as as set so it's We have variants of set in Java which is has said and we said hash set is or basically there's and it's good for retrieval as you could imagine It's good for retrieval. Okay. So the analogy behind this could be our it that you have in books, right you have to the index page and see that you are looking pretty much similar to that. So when you do hashing to retrieve it much faster All right, so that's what has said does and it which is a property of a set. You can't have or duplicate values within it This is a typo here has set is acid doesn't maintain at all its internal to The order in which the retrieval would to the runtime or if you have a has set and if you run it that the retrieval is different So it doesn't maintain might demand something that is set as well the insertion order right? That's a scenario in which you would go So link - there is nothing its insertion order maintained. All right. So the third one is tree set, which is nothing but it so these are the methods into hash set and but similar that we have, but just to talk about this one so you have ad which is just or linked has set which is basically checking whether a particular. Object is present in a set. You can clear You can check whether a set is empty You can remove a particular remove method and pass. The object that you is nothing but a method that is inherited which is super class and it is basically meant or any class All right. So when I say cloning it's and it's a shallow copy. There is a steep coffee and there's a shallow copy but the properties So the references remain would have a value say If you have a value say have both the set pointing to All right. So it's a shallow copy in you would have So when A Change Is Made it won't be reflected So that's deep copy, but by default the shallow If you want to deep copied then you will have or you some other class. All right, there's an iterator you can have I traitor and if you want to check the size of the set you All right. So let's see an example Alright, so here I have created which creates the instance some integer values to it, which is 130 340 and 440 and you see there is which is create linked hash set which is again inserting which is hundred three hundred So I return this. All right now I write a method Which is displaying nothing and Print set and All right. What you do is you have like set to print dot you which would give you I traitor which would give you an instance Alright, so we have I Let's iterate through it. so remember how we so you would say set if it has next then of So basically we have this then you have set which would give you Alright, so we have a method which would I trade and display its content? All right. Now what I do is I create I create has set I put it as as set. That's it for demo. All right, keep it I set. All right. Now I have against it. I say linked has set for demo. So basically we just All right, then we create demo we are going to print it. The first one to be printed And this is what is See I'm not fighting the method It's just once and for printing has set as So this is what reusability If you don't expose if you write it you won't be able to reuse it and you would have of code multiple times which adds to the redundancy and And this also makes it much You can understand that. Okay, it's creating a hazard. The second method and the third one So it makes much So that's an important when it comes to programming. Alright, so here we can see that when I printed the hash set Now the thing is it's So it has maintained But basically if I have copy this multiple. Okay, I remove this. Okay. Now you can see that you won't get it since it was it was its by fluke that you got it in the same So if you see it now. So now you can see that, you know, the first element which was basically you put So it's pretty much random. As I said linked has set. The retrieval would be You could see 4401 then 130 inserted than 340 then which is again out of order. So basically this is what linked has said does the same values in the link that insertion order All right, so from here if you see from 130 it's printing linked has it and you could see the insertion as is 4410 and which is very much you can see that it's random. All right, so that's what link has set preset is nothing, but it Sorted set and you have a retain nothing but intersection So basically you to the retain all method and you would get So what I mean to say is two, one, two, three four and you or you invoke retain all method which has values 1 and 2. All right. So your Source set on is being called that has got whereas the set that is passed to retain all That is one and two. All right. Now when you invoke it one and two your 3 &amp; 4 from the source set because the retinol method is between two sets. Okay? So size and hashcode, so all these methods remain that you have So you have like size Hash code is nothing that's written for It's not just free set. Any object in Java it would give unique integer. All right, because this particular method of java contains is nothing but pretty much similar you whether that element is contained in the All is something like retain if all the elements that's passed here as an argument is present All right, it has to have So the previous case wherein three and four and on a set Are you pass with values 1 and 2 it would return true. Whereas if you pass a collection with values 5 &amp; 6 because you don't have values All right, I traitor is nothing that we checked on you can convert it to to array any collection which would give You could check if the collection is I here it checks whether So there's a typo here. Just to give you an example. I will create one more. So I copied the same method All right. So what I do here is I I will keep it as this could be kept as set All right, so tree set Now I print this one. Okay, basically set All right, so I'm printing Maybe I will put a statement All right, so I created a tree 133 4440 and stuff like that. Now let's check Right? So I created a tree set So what you can see here there's if you see it right after printing tree that you see here It's all sorted efficiency. Right and it's Unique as well. So if you insert it if you insert n multiple times still in it All right, so you if you put 10 unlike array list which will have multiple values. This would take just one 10. All right, it would Enunciate is a special type is nothing but a constant for constant in Java. So basically the replacement for public static for constant earlier. It was like we used but now it's advisable All right, we'll see an example which would give you much So first one is all of all but creates an enum set in the specified element type. So it would create enum set that you have copy of is nothing but creates from the specified collection. All right, so you and it would create None of is creates a MD enum set or this creates a in mm set initially containing Can you could So basically here we are giving a specific class or the enum set would be set initially containing right and clone is nothing. But again, it's As I said clone is a is a method that is inherited and is meant to clone or have a shallow copy against which it is invoked which the Clone All right. So here we can see which is months. Alright, so here you which has like within Jan Feb and March. All right. So now what you do is, and you just wait set out which is Fab and March. All right, so this is so you could have some enum values put in and it Now when you write you would see and March into your genome set. All right. So this is something when you have enums and if you want to have or you want to create set with it, right? So it would be or you imagine of enums as right which is used Now there might be instances where in you want to have and do something with it. Right? So basically this is mint because the values into a data structure as of now We were not able to put into a data structure, right? It was considered as So now this is That you could put it and you could play So that's the reason What is map map is nothing and it is unique Keys So suppose if you try to insert you would have or overwritten with the new one. All right, so but it won't duplicate it. So what I mean to say is but the key is going All right. So This Could Be Imagined You have a table which has got one primary and there's a name which is like name Imagine. This ID is a primary key, right? So you cannot So if you try if you try to put it won't allow you to put in. The only thing that you of existing ideas. He's our add a new ID. So this is pretty Right map is specifically and we're in Keys and if you try to map and existing key you would see that the value but you won't have Right again. There are different variants that we would look which is similar to Hash set which is based All right, you which is pretty Hashmap doesn't maintain linked hashmap maintains There is a sorted map and which is sorted All right. So the structure that you see here is right we had hash set we had linked hash set so this one is pretty much as set So how do you put data It's with put method, right you have put method and All right, we have put all And if you want to put that they're into a map you could use put all You could get some key. All right, you could check whether a particular key You could get in the hashmap as a set, which is key set give as set and as then you would get from he said entry said Returns the set view containing So basically you and values as a set when it comes to entry set from the entry said and value distinctly. All right, so get key a key get value would give Now. What are the typical exceptions that you get when you deal while using map interface is So when you are trying if you're trying to invoke a key This is what you would get. Okay, this is more about if there is no item if it's an empty one, and if you are trying that's when you would get All right Class cast exception It's a generic exception that you get when you try or suppose value is a string. All right, and if you try would get a Class cast exception since string cannot be All right. Now pointer exception which we saw that if You haven't initialized And if you try to put you would get So you have to make sure that you instantiate and then start using it This occurs when an attempt is made to change a map which So you can get unmodifiable And if you try to change what you are going Hashmap linked hashmap So this is pretty much similar that we saw for the set write Java the map interface It inherits abstract map It contains only unique values based on the key. It may have but only one real key. So this is important to note. You can have But only in one alky in alkies sonal is also when it comes to hashmap, right? Whereas in hash table this one more variant which is Hash table, which would throw you an error but hashmap take ski as null so So hash map doesn't maintain linked hashmap maintains In which they were entered and treemap sorts So these are pretty that we discussed If you see entry set key set we have already discussed about that we have You could get first key. You could get lost key. All right, since it is sorted There's a hashmap example. I create a main method first. Then I create private map hashmap And I create say app of integer string. Typically you would have integer All right, and which I create a new hash map. Read so I'm creating which is like the key would be integer not put Buddhism method that we use and say so this is how you put All right, so I'd written So we so we'll take Where in we would and we would be putting and we would check how it gets I treated or how we can hydrate through out of the map. Okay. So here you can see I created this method which is create hashmap within which is nothing but It's a map of So I put a value of one and I put value as as Y and I put a hundred So I created a map so to say right? Okay, so I've created this and so what we is so you could even See if you want if I print it out like this like the values contained All right, so this is all right. I print the hash map right here. So basically I created Okay, demo dot print map and All right, so we have inserted and hundred with ID 1 to 100 and a respectively And what we are doing is we are of the map right here. So you could see here is 1/2 and Alright. So again, this is a hash map and you could have So it doesn't So if you have multiple values that the order is to what we had in hashmap. So if I put something now when I run it you would see that insertion order and when you retrieve it, you will get it in any order. All right here we can see is not been maintained which is second last actually. All right, so it gives you but it won't maintain So that's if you want to maintain the insertion order All right, if I change this to link one single change would sigh All right, and I All right and suppose I create All right, so we here one is your tree map. So the other one is linked Let's print one by one, right? The first one is hashmap that's Now, I create linked hashmap. Right? And the third one that I print All right, so we have all and we are printing it here. Alright, so here you could see The key value pair Right? Whereas when it comes This is a link hashmap that the order is exactly in which we put in. All right, and when it comes to tree map with the third one that it's sorted one. So sorted by your key. Not the value. Alright, so see the key when it says 1 equal to X1 is if you see it will see that 12 Levin 2,100 hundred and twelve 1010 and 1100 so you could see All right. So this genome map in a map with specialized map All right, which we saw here. We can see that there is a enum and you could see into the months, which is Jan Feb and March and you could see here for all the months that you have within your genome that is months right and you could actually put in So basically in a map is nothing or the value within All right, when you use could just write rate that you know, you have this Keys put in All right. So, so just to give you we can create an enum here. I'll choose to create and I create enum here, right? So I create in a month and Jan Feb March. All right, so we what I do is I create a new and with string as its value, so I create a main. Gina map fifth month and maybe we could put I create this in a map here. All right in a map of our you Alright, so here we or even months. Okay? Ticks class 1 class. All right. So in the Constructor we class as a parameter. So we put one thought class don't put I put like the the key is your it like seals ton per month. All right it basically from putting anything but All right, so that's what we are trying to do here In a map calendar and you should be able All right, so it's basically of the values or one within your enum. See how you can see here. Jan is equal to hundred fehb Now I will quickly talk comparable and comparator are when you want to have sorted set or if you want to sort you have lists of integer and you want to sort it a list that is by default could be done because integer itself but if you have or if you have your own if you have your own like this vehicle info, which has like a number of the vehicle put in now if you want to sort if you give it to a sorter, it won't understand because this is It won't understand what you want to sort Basically when you have when you have your own defined that's when you use All right, so I'll just walk you Phase is used to sort the objects of user-defined So to give you an example suppose you have which has got ID and If you want to sort Java wouldn't know what you want to sort within You want to sort it or the ID field or if that's the use case, then it could be like you want to understand joined the company Could you want to sort it which employees taking or to understand the sequence in which salaries been paid So to make Java understand which use case you based on which identifier or based on which property or instance variable You want to sort that this is what we want in a form of implementing It is in Java dot length package that is compared to it provides that is you can sort on one data only you can't have on multiple data. All right. So I'll just walk which would give you an example. So so basically which implements comparable to the example that I took wherein and name now you Now what we are trying to sort So that's how you Right? You have comparable And you could see here. There's a compareto method that this comparable student has has got now compared to will All right. Now you could see that we are comparing you're comparing the rule number that's been passed if it is equal then it's 0 right you don't have if it is greater, then you written as 1 and if it is less then you return on this compared to Java it will sort it based So what you are trying if it is equal we are returning Okay. This is what we need how it's been coded that you need to follow So if it is a real number rule number 0 or return 0 if if the one in your than the one being passed here. Then it would written All right. So how do we use this? So basically you can see All right, so they were like three students You could see three IDs All right. Now what you're doing here and you're passing and you use collections dots Not right when you do what it would do is or it would sort the array 1 would be first and 103 would be the last. All right, so there's comparable All right. There are two interfaces but it is used to order It is used to order the object But what is different in comparable is to which takes just and the other parameter is within the class itself. All right, although this instance on which this particular method or instance on which All right. So basically comparable compared to all right, whereas comparator when you use comparator will take two methods or it will take two parameters All right, and it will compare that are passed. So basically it's for customized sorting that is comparable. We are putting within the class itself, but you have a separate class which implements this So basically you could see here and student is just holding All right, you don't see how you don't see Now you have another class which implements comparator. Alright this name comparator if you see the compare method, it takes two parameters, the earlier one the compareto just one parameter here. It is chicken And what you could do is based on name right since name is a string you compared to S 2 dot name. This would compare There's another one you could which is nothing but rule number comparator which Now here you would that you defined earlier All right. If S1 dot roll number 2 dot roll number return 0 else if S1 dot roll number 2 dot roll number if it is less if S1 dot roll number Total number written minus 1 So based on this logic that the compare or you Now, how do we use this? So we have defined a class. We have defined a model class. So model class is that has got just If you see student as such it doesn't have It is just a state. So this is a model class. Alright, so student which has record roll number two separate comparators which is comparing a rule number comparator, which is comparing Alright now, how do we use it? This is not sorting at yet. Right? How do we use it? So how do you use it is nothing but you have All right. This is pretty much similar to proceed other part This is just about putting All right, so you have 1 0 1 put in as Vijay 106 put in Alright, and now we based on rule number So both this can't happen All right. This is like first you can have and so it's not in one go. All right, you could do it So as you could see here, how are we using this comparator is nothing but you have and then comes the collection that you want to sort. In this case. It is a L2. All right, and then you So here you are providing Alright, so after is called you would see that the collection All right, and as you could see and here you are passing in the first statement or here the first collections based on Roll number. Whereas the lower one All right. So this is basically offloading or just decoupling out of your class. That's when you would Whereas you would go want to put the logic All right, so it depends on But as far as the it's pretty much the same. All right, even if use comparable or comparator, It just depends on it the programmers wish to have modular programming into one class. They would go with comparator and few people like to add which they would So what is comparator and comparable comparator That is we can sort of single statement as we saw that you would have and based on that. You would have or the Sorting done. Whereas comparator you since you could implementing this comparator and you could write like in the previous example, we saw that we had a comparator and we had a comparator comparable effects original class comparator does not affect So we saw the student class within the student class itself. You define the compareto method whereas when you use comparator So that's about decoupling that I mention comparable to sort the elements and comparator provides All right comparable is found and comparator is found We can sort the list by collections dot sort lists and we can sort list by collections dot sort lists All right, when I say list, So in the previous case, and since student class itself We don't have to mention care of by itself. Whereas in this case, where an you use comparator where in you put the comparison you have to explicitly Like we give something We instantiated rule and gave it for sorting by a rule number and we There for sorting by name. Alright, so that's how we sort So basically why do we have to reiterate but jvm how to sort It could be based It could be based on names. It won't know by itself So that's how you using. This interfaces you express So what is XML so Henry handles but the data is stored He wants to extract He is learning XML So what is XML all about? It's extensible markup language. It is designed to store and transport data XML readable format XML and language independent. Why did XML come into picture So it's basically you have you might develop some system that is exposed So what happens is they has to or you as a service provider. First of all would expose that if you give input to I will give you output so basically when you want the service you would send it that the client understands So the server exposes or the server expresses in a XML form and this This is like you might have in created in.net as used by Java program as well. So it's a platform Basically, it's used as I said store which we'll see but you could imagine which is used to send to the server for communication. It's pretty much human readable. It's not like yesterday we saw but serializing and serializing which was not human readable. So this one is pretty much like you would have or You want to start something and there's a service which is exposed for that you could send the ID to it or you could send and format in which it is sent would be pretty You could see that okay, there is a name which is sent to the server and so things and it's pretty much as I mentioned and language-independent. It's agnostic of all So there are a lot which use xml's as a part So as we go you should be clear to you guys about why we need XML XML for delivering content So it's a standard. So most of the services most that's happening within in the form of XML. They communicate with each other is designed to store and transport data XML because it provides It's not that It's all done. So it's extensible. It's extensibility feature my server is accepting employee My server want to accept So you could add which makes it extensible. So it's not one time Define. You could change it. You could evolve the xml's XML and structure of data So it has got its own schema that my XML is going and employee named nothing else or the actual XML that you have against the schema and if you Some extra Would throw you an error. So that's about white need XML. Let's talk about what are Why is it so widely used As I said, it's human readable and there's a lot that are exposed for reading and writing with xml's and very So you could see parses, right? We had multiple parses. It's for Performance of your particular application or the nature You would select one So writing xml's is very easy. The other one is XML data can It's a schema description. As I said, you could extend it. It's not that it's You could extend it XML can work on any platform You could run it Or it could be different It could be different I could run it or I could run it on dotnet and can parse it So simple editor or even in notepad plus plus and there are different tools which would give you so that it's much more readable. So there are a lot XML separates data from HTML. It separates the actual data from HTML code XML So basically as I said it pretty much intercommunication you just have to put it into XML and you share it across systems What is the difference so XML is used for storing data So as I said inter and HTML is used for display. So whatever you see that is you have a HTML page and it's used for displaying it has its own predefined tags. So when you define your XML, As I said today. I might have a service which is taking employee ID which is like user defined Whereas when you use but it has to get parsed into or it has to get which has been So that's why you have You cannot have anything you cannot put something of your own it would show up an error. So it's validated reason or you have to run through or show it as a HTML page There's an interpreter which has to understand So it's predefined tags XML is case sensitive and It is mandatory So you cannot keep So we'll talk about the tags. Once you see the format if you have a every property that you want to send in a tag you'll have So for example employee ID opening tag and it will have and you will have to close that employee ID tag is closed It's not mandatory to close the tax all because it is used because it is to display it it. So basically when I say, So tomorrow you could change it. You could change the format or you could change or few more tags So it's pretty Dynamic whereas HTML is aligned and you can't change return. You cannot add of your own XML preserves white space and HTML So what are the rules let's talk about XML rule XML considers So whatever you are sending So imagine you are sending data So space is also a character So suppose you want that is client is typing. So of course you need To have You cannot have spacing node. It's actual data between between two systems and It's been considered and nesting of XML document As I said, you have to ensure a tag you have to close so there could be a tag with says employ you might have employee ID tag, and you might have And once you have and employee name tag, you have to ensure So that's nesting. So your nesting ID So your this might be really If you have no idea about what the structure but don't worry We have examples and it's pretty straightforward every opening tag must. Have a close tag else XML What does an XML file consists that is one tag, which encloses So it has one root element within which the entire and each elements consist and an end tag. So there is one of XML is nothing but element within an element some content expressed which will have start and end tag. This is about nesting it which is pretty much are case-sensitive opening and closing tags should be exactly the same without So you have to ensure that it's been enclosed as it was started off. This is an XML. So the first That you see is The first line that you but XML Declaration of prologue. So this is nothing but kind or the format in which You could have your dtds which we'll see but so kind of summarizing your That's your Declaration of If you don't put it it comes the student tag, which is user defined you could imagine this as right and you could imagine or you could have which is doing something to a database right? So you could imagine this or you have a webpage wherein you enter and email address that comes to a server To your database. So the root element of the document is nothing you can see a student tag. And as you can see here, it's an element which starts with angular of the element and it ends So this is student about you define This is nothing and here you can see or it is following You have was named Henry and disclosed the You can see the second element with angular bracket last name Then there is actual value lie, and you could see or with the element last name. So one thing to remember here of a tag ending of element. You can see the right The element is closed and you So student is a element and you can see and email being nested or they are the child elements So you have child and you have the last line which defines the end We have XML which has doors First name last name and email address Let me show you so it could be imagined as and you can see and email is nothing but your child or is since it's a root element the actual content of it you saw the value you saw the value lie and within the email address So the leaf node is nothing or the actual that you're trying This is pretty straightforward. Like you could realize XML where in your root node is and the leaf nodes or the leaves are nothing but the actual value So let me talk about three rules a root element. Then first name last name and email are This is pretty when it comes to tree so you have a root node and we can see and sisters in this example of all other elements, so root node, so it's ancestor of all other elements XML attributes you Which are common across or you could have within an element. So here we can see that message. That's nothing but an XML and you could see there are two messages here And the first one is to any and you have a body there what you want to send or this something that has been provided which is nothing but you that's attribute has to be or double quotes. So whatever you see and closed within codes that is nothing you can say some kind So attributes add more it is adding some more Formation to the element XML attributes It should be within single quote or you could have it We have it within double quotes So to make it more readable or to increase so that someone what you are trying to do you so this is pretty much similar The reason why we rationale it's more about make and understand what bag is all is nothing but you Then you have exclamation mark you have the comment and once you have the comment and then closing angle bracket. So one thing to note is there only when you and at the end you don't have and then closing angle bracket like HTML comments comments the code more understandable. What are the rules? Do not Nest a comment Okay, you can't Nest it. And I don't see any need to nested was your or we are just adding comments So if you nested it would give before and XML declaration the first line. You shouldn't be using comment anywhere in XML file So you can't put comment or you can't put it right after the element for example, you have right which starts with and right after the message. You can't have comment your after this closing angular but it cannot be within this space wherein so basically comment but it cannot be So let's see a well-formed XML and what do we as there must be exactly should have exactly You cannot have multiple every So we saw in like if you start student you for student as well. So that's what it is about an end tag attribute must be or you could have and processing instructions cannot be inside a tag and you have opening and must not occur Your data cannot have this cannot Contain this as a part So let's move So well-formed XML against DTD or xsd. So communication between to ensure plant is sending preparing an XML which is aligned So that's where you Let's see. What is D TD. E TD is a EB NF grammar It's a normalized which defined XML structure of an XML document. So it says what XML can contain or what the attributes could be Okay. So basically when you define a DTD you can expose which could be used Google can be using it So this is a legal document or accepts the times so you have to send it for us to process it through. All right. So it's a legal document XS T is nothing but used of DTD uses name space of existing definitions. So you could Define an xsd or through name spacing you of xml's as well. So, let's see. What is GT D PT d stands DTD is used to define structure or DTD defines the legal as we spoke. It defines legal elements, or which cannot be Accepted so basically you define what your so you could see So you have XML which is nothing but which has first name All right. This is what you have Now you define a DTD which could be put So the first tag that you see is and it's linking your kind with that's defined All right, you define this and you have a DTD file And here you can see that within student for other elements or as which is first name All right, if you since this DTD is linked with Mel document now if we try to add something here which could be If you have one which is address. It would throw you an error that student can have only and marks address is not a valid All right. First name now, let's define. What can we have in first name? Alright. So first name is nothing Last name is a character and Marx is again taken as how we Define DTD. Alright, so we are trying or we are trying to say that student can have and if there's something So here we can see and declare the child That it says student can have and email and marks. It defines last and data from this element when it is PC data. It's possible again which is possible which is possible which is possible which is possible. All right. So what is XML schema XML schema about XML document. All right, it's pretty much but it's much more It has much more features on XML structure a well-formed XML document So you have an xsd which defines the structure and a well-formed XML or should be Against So here we see an xsd, which is much more verbose or which is much more clearer to understand compared like was not expressing but X is T is pretty clear in terms of what Again. It defines the root node So here you can see that exists is defined All right, it follows So it says element All right element is and you have student So this you could realize xsd it's a valid XML cracker, which says that you have what can students when you say sequence it has the sequence it's again then it says first element first child element within The next one to follow The next one should be email and the last one All right, and it particular elements hold. So first name is a string. Last name is a string. You may raise a string So this is how it is you define and you have to ensure It has to be valid against this exists e it's a So what's the difference v stands for document type for XML schema definition. DTD is not extensible provides less control on XML structure xsd provides ETD does not support data types We sort the data types like it supported just in exist. You don't have DTD supporting and DTD does not define as we could see it just says that you could have doesn't have any specific when it comes to xsd. You could Define in the previous example, we said that the first one then the last name then so you could Define the sequence in which your sub elements is used to add more tiles So if you want to color when You CSS pretty much So here we can see which has got Then you have first name, which has different First name last name which has got So we want to have font size You want to display it as white and the margin All right, when you have such thing defined if you want to link CSS to XML, you need to have and you would type and you put H ref as your CSS name to make of the XML file CSS file through this statement. So this is how you link Now. What is XS L XS L stands for extensible stylesheet all the nodes and elements and display All right, it's basically for parsing sort of it navigates and elements queries If you want to query or like we had message of slides back. We saw multiple messages So if you want to read some that are sent by the users you could wear it out using on the browser as per the format given So, let's see what is Okay. So here what you're but you're extracting data. All right, you are. Acting first name. So the first name here and would be displayed here. And again the second one you have last name you select This is acting All right, how do you link up accessible to XML is You have style sheet XSL and not CSS, right and you have H ref So that's 4X s l-- What's the difference and Xs L fi CSS files Excel files are difficult to than accessible CSS is changing the font size changing and foreground color Full then CSS since you can extract Basically, it's a processor. You actually can process does not use XML notations which helps in writing code. CSS can be read by is not supported by Now, let's talk Okay. So XML parser is nothing have an XML and you want or XML parsers could be used Okay, creating an XML using XML parsers as well or you could read So an XML parser is which provides client with XML document whether the Comment is It is basically used for compiling our parsing It is used to validate and parsing XML refers to going through XML document or to modify data in one All right, you could actually or you could extract data or you could modify What a bar says here. You could see XML document to the parser parser is so you send the XML The Source XML or the XML is going to be sent and this API is going to be used by client application So XML parsing could into two different types and one is event-based right but document object model as Dom even base. We have two different parses when it comes to even and the other one is tax. All right, so let's talk about It stands for It is an object-oriented representation of So remember we assign XML and we passed it where in your root node from your XML and we had all the elements and at the end the leaves or the data that the XML stores or XML stores or care. Rather, so that's It defines the standard way documents Dom is a common way So as we look you should get Fair idea about it creating an XML So what is required How do we do that? First is you have You have to import that you have dot XML dot parsers. These are all input statements You have to import which when you use it would prompt you to import it it would suggest So you did not actually but it's very important to understand what we So these are different packages and as you could see Are put into Java x dot XML dot transform dot XML package. So once you import it, you can start using the classes that you do is you have document so you have document build You create a new instance of it and you get document build So now with the document that you got you would create So this is We have a design pattern in Java and document Builder factor a factory design pattern, right? You don't have to But basically what we of creating the instance like we usually do with new Sort of doing it on our own nothing but the creation logic which is not exposed to you. So you need not create which creates instance for you. All right, and that is nothing but a factory class then you So it's nothing but F dot Okay, you handle exceptions So now let's start with creating You have the root All right, and within student you have you create student and within student you have and marks and you could see So how do you create but using dog create element, how do you create or the actual value Then your element you would do and you could Nest So basically you have which is nothing is appended to the first name that you have T2, which is the text node, The last name is appended to the last name element p 3 and the for which is your marks which is appended So basically this is of your nesting Alright. So once you create this document and everything you create Are you create an XML that you would get since we are creating element Getting elements within doc and everything within dog. So at the end once you you would have a well-defined of document class. So we want to print in a text format, right which could or do you want an XML out of it? So that's when So there is a transform a factory design pattern. It's exposing a method which is nothing So you create a new instance and you create So at then what you get is and what are we trying but we are trying or the document object We are trying to transform it or the XML file all So that's a transformation So here you could see that you transform and you pass the document object that you created and put and text notes and everything into which You are trying to transform So how you do Then you have the new Dom source and you specify which holds your XML then and new stream result class which takes file output stream So you have to pass want to write this XML to and we are just printing The first thing that we do and using the document. We are creating elements So in this case, We have a students and within student and within student last name email ID We created this And as you could imagine in the form of object. Right which is stored in dog. So now since you want which is into a human-readable passed across Network. You have to transform which could be read. So that's what we do We are transforming which is in the form So, let's see this program. In the meanwhile, I will create one At Eureka XML. Okay, and we don't have Yeah, let's hold Yeah, I just come up. All right, so it's the same So I have loaded into my ID. So we do the same steps here. We create all the elements all So we are writing it so you could have whatever file you okay, so I right that we created but Ed Eureka XML we All right, let me It's building it and if it's generated you should get So this is about using Dom. All right. So when you say Dom it's nothing its building it. So hold on for a minute. In that see I think it Right. I think it's coming up. Alright, so we have which is kind This is same as Right what I walked you through. So basically you have students elements you are going to have student and then first name Alright, we are going within this elements. So this is nothing which would go into This is the last name which would go into that we created earlier. Then we have email and marks going Alright. So basically we are nesting We have the Transformer which is kind of taking into XML file that we want. So let me go and delete this In this folder, I run this program from here. So you could see All right. So let's go to the folder that's generated that is Now I can open this with any tool say and I see something I want to format this into because this is which is Big right? So if I want to format it, we have tools even you could format So I put this and I say or indent level which is good and I formatted okay when I click the format. You can see that it formatted So the basic thing that it's doing is just All right, this is much more You can see that it's readable can see and Henry 123 at gmail.com which is what we expect out. Okay. So we saw this output after Let me run through and how do we use Dom parser All right. So these are the classes which would be suggested either IntelliJ or Eclipse. So you have document Builder get the new instance where in you get an instance of document Builder Factory with and once you have the document Boca parse method The document Builder and pass So whatever XML you want to pass Once you have this past if you want to display something within your XML you like this talk dot get document So this would basically that you have within your XML, which is nothing could read this on the name. You have the tag names So you have methods like get Elements by tag name and you could give and it would retrieve Now, you will have to I trait through this node list All right. So here what you do is So when you get a node list, basically you would All right. So now what we are doing is we Printing the nodes that we have within one by one. So in this case, you can see that when you by tag names and you So this would give that you have within a document that we took the number of element is just one right we So it would I try it. Just once in this case it would And what we are doing here again element by tag name and these are nothing or the first name and marks this Loop since we have only one student and this is how you display So basically what we when we say parse we or we have trying to load data And we are printing it out. Why do we have parsers is if you want to query you could do it. You could write some logic from an XML. Say for example, you might have a long XML pertaining to student Henry. So what you could do some logic here saying that if student is equal to Henry then written So that's why we have to have it loaded into memory Alright, so let's see the example of XML reading as see Give the same file. All right at Eureka XML. Student dot XML that we created So I create one Say for example. Just for Simplicity purposes. I'm just putting test last name and I put test Mouse. All right. So these are the values that I have put that I've created or maybe I will put this one So we have two students now And the other one is like we have created when we run this program. What we are trying to do is that we have created it parsing is nothing but it's going to display So it's going to Loop through its going to understand within and it's going to display and mock secured All right. It says the Okay, we can see the output All right, so we can see two students here the current and re 1 2 3 gmail.com and 70 that we added directly can see it displayed as well press last name test email So that's how we bars it. Okay using Dom parser and but it creates a tree if you remember I said that was there that we discussed earlier. It creates a tree-like structure with a root element and your leaves are Henry Lee and all this stuff or nothing but leaves so and disadvantages of using when we have to randomly of the document. So if you don't want to do that you use Dom it supports So we created XML using Dom and we read XML So the first example that student dot XML was using Dom Remember we created and then we inserted within that is nothing but Dom it supports both read as we saw and what are It is slower than other parsers So it's a one time activity So remember in that we took we saw parse here, right the sparse here document Builder dot parse this because it's going if you XML is big enough it would take time because it's going Parsa's something that is going to take time and since you could imagine so xml's in general are like it could have like within they are humongous. They are not small examples It's coming from So you could imagine in the form of XML and sending it to some other So it could be humongous a hundred million records So imagine that you want to load I'm create a tree. So this parse method is going a tree and the other thing because it's going to load into your memory, right which is going to take like lot of achebe's So it's not pretty to parsing using Tom. So that's the reason of parsing which is which is basically event-based. So we have like two parses for push parsing it is sacks and whereas for will All right, so we'll just go through what is sax parser and but it stands for simple API for Sequentially. It's an event-based right? So when I say even when a parsing event occurs, the parser invoke of a corresponding Handler. So basically you define that if I get so and so tag or if I get start of element tag go All right, and this handlers are nothing so you could say that Not get Go to this Handler It could be as simple as printing it or it could be So it's up to you to write but what the framework but when you see a opening tag, it would give a call Alright you Handler when we have As I said in the previous hundred thousand records that you have within is not that efficient because it's going to load which is going to take a lot which is going to consume So it's not good in terms Whereas Sachs does a good job when it comes because it's not storing or it's not parsing everything It's an event. Just so basically you would see that it sequentially goes and when it sees of element start of an attribute It would give a call to Handler So basically it's It's not retaining It is just calling and just leaving it right there. So since it's it's good when it comes for random search because it goes sequentially so you could see the files present in Java x dot XML dot parses it was document and here You could have This is what you Right? So you are defining which is nothing so Your XML reader but a default Handler a default Handler you extended which is maybe an internal Once you extend it. It's not an interface or it since it's extending All right, it's a class. So the default parser would have this methods but start element you have characters you have end So these are the methods a big XML in this example so when it comes to student, which is your root node, it would go to start document It understands that it's So it says document begins here. It would go sequentially Is it would read and it would go sequentially when I say sequentially that there is an element again and it would give a call what you could do is So what we are doing but we are printing the XML All right, which is event-based occurs in your XML. It would give a call So whenever there is a start of is a start of element again, which would go All right, when does it come but when it encounters Henry it would go into characters. All right, you see It would go into characters that it's a character array. Alright, so here it would print the entire array Lou Henry and all All right, Henry Lee that you have would be printed whereas the tag names would be and end element. This would be your end element. All right. So this is pretty much whenever it encounters to a particular method and this method is user defined you could do whatever how you create a instance of it. So you have sax parser dot new sax parser. You create the instance Now you parse it P dot parse and you provide the Handler that you have provided which is nothing That's your Handler. So you have to create and pass it over. Let's see this program now also you could see it is reading So I'll have to change Ed Eureka XML All right. So let's run this program which is the same program that which is even based you here and you could see All right. So there's a default basically start document and everything is coming All right, and in we are just printing when it comes to end and when it comes to end of the document we that document ends here. Alright, so we are reading and this time it's using sacks. So you can see here when it encountered It printed document begins here. Then you could see So this is what it is. This is like event-driven right when it reaches the end of the document you and C are being printed out. So basically this is as I said even driven right it goes line by line. So if you say you have like within your XML and that you are searching for it's going to go through the entire XML delete when it comes if you want to search randomly if it's not well suited it's much better than Tom So it's not keeping It's just parsing it and it leaves it right there. So what are the advantages It is memory efficient. Sax parser is faster It handles large document. We spoke about all this right is land will be unable to because data is So it's not storing It's broken into pieces. It's not even storing it into It's just writing it So what's the difference between for document object model Sixth and four simple API The entire document sacks which we saw sequential. It would go Dom is useful when reading small to when big XML files Sax is good for big for Two medium sized Dom We saw it creates a tree We saw how it has that it calls a particular that it encounters Tom is little because it has to create and sax is faster than Dom once the tree is created. I think Tom would retrieve But the tree creation right when you parse it. It has to create which takes a lot and delete nodes since it has entire You could actually go and delete it you have so you can Traverse and delete a particular node or delete a part which means that you could do whereas sack Doesn't store anything in memory and just pushes it off. So you cannot insert or delete nodes So basically it's meant or retrieving information It cannot manipulate cannot manipulate the source which is Stacks. So in terms of sacks, if you imagine sex, All right, when I say push API it's nothing through the XML and it pushes the Handler So there's a push from your API to the handler whereas Stacks it's a cool API, lets go through it for Java streaming API for XML sax parser from the XML this Sax parser maintains a cursor in the document allows at the cursor. So basically it at the current position which allows it to extract at the cursor again, you could see Java x in the first one the Dom we We had sacks. Now the third one So that's the beauty of packages you could understand Okay. So using Stacks We create an event handler XML event handler So you pass a new file reader and it's nothing that you want to pass. Now, you could see So basically you have get the elements of front or you get all the events Then and XML. All right and UI Now you have a switch statement which would do which would say, for example, you have how we saw in the sax parser. So you have a start element and if it's a start element and you could actually So basically what we are getting all the events and we have a switch statement So instead of having in a separate class. We are writing the event handler This is kind of So imagine yesterday. We spoke about So comparable was like within your class right which was student yesterday. All right. And again, we had which had a compare method which was Into student objects So that's the difference. Right? So we are decoupling it. We are writing to a different class so we can So that's what the difference Stacks is writing it Whereas sacks you for event handling so you could how we did in the sacks so you can have like if it's a character characters you print encounter and document you have event as in document and so on basically and you I trade through it and you have switched All right, so I So the first thing that I'll have to do Ed Eureka XML and I Alright, so here we can see You have first element as Henry first name Henry and stuff You can see the same second which was a dummy student that we inserted and at the end you will see end Alright, so this is how we parse using and we saw about advantages and disadvantages and which one All right. So you have to understand or nature of the XML is that you are dealing that you could decide so that's about the parsers. Now, let's talk about XPath XPath expression is path of XML document You can create a query string and you can retrieve Wait using set representing XML nodes So this is basically or you have X path expression, which you could write If I want to get first name of if I want to get with 80% marks, right? I could do that using XPath. So basically it's and it returns a node at the end of the path. It is used to Traverse of an XML document and provides XPath expression. So the 7 type of nodes that can be output of XPath expression is root element text attribute and namespace. We'll take a look at it or path expression or node sets in XML document what I expect Expressions which is used with the given node name you and you could select all that has named as node name. So it could be either element. It could be but it could be just It specifies that selection If you have 1/4, it says that it starts It specifies that the selection that match the selection. All right, so / scans the entire document / / dot it is again select So whatever node you it would print it out And at the rate is So if you want to carry like at the rate ID is equal to 10 say the employee IDs and if you want to have employee ID with value hundred that at the rate ID is equal to hundred steps You have expert You have to import you have You have to create and XPath path expression from a file or a stream. So basically when you is nothing but it's Oh, basically it's for small or medium-sized XML. It's good enough because it's creating document create an XPath object Let's do you have to create to pass the expression that you want the XPath expression first, you have to ensure that the XPath expression that you have provided is up any error and you're that XPath expression has Once you get the result you have to I'd read which is nothing but the result and examine sub-elements, right? That's a typical way so you could see here. It's again Java x There is a separate and it will have all to it like expat Factory and you have like exception and you have expert We are again parsing into Document first as we mentioned the steps create the document and then you apply the XPath class / student. All right, and then you what you expression you have here you compile it so evaluation is nothing to the result and you that you got What we are doing here is we out of the XML file that we do is we and then we are evaluating it evaluation is nothing but doing There are a couple that you will have to take care that it's been handled here. It's not specifically handling. It is just printing So let me quickly. The take this example. Alright, so from here So let me go And it's let me run if it runs. Alright, so we have I take the same example c letter c let's see if it runs. It in fine dot txt size Okay, let's try to run. So what I am doing here and then reading it through. So basically just to again tell you I love to see why but it's more about you You have your XPath set or you have the XPath and then you evaluate it whatever results you get. You can do something on it. All right, let me move Dom4j is open source, Java based library to parse and memory efficient. It integrates. Well with Tom Sachs apis, it should be used in an XML document So basically with sacks if you want to pass if you want the information once it's not that efficient because it will have So it doesn't store anything. It has to go through it again. Whereas this one is something that integrates well which allow developers in an XML document So what are the steps? So basically you have from the website So there's a GitHub mentioned and download the latest So once you have that Library, this is a common thing You download a jar file. You can go and download that you opt for It's nothing but the third which is nothing but together doing something. You can download any jar and you can add it There could be a third I want to add for example, you want to do by itself doesn't have a big data processing So what it would do will have a jar file exposed. Right which is z for example which is providing solution So you would have the libraries or you would have for big data processing now into Are you need to link to that particular jar file to leverage big data So in that typical scenario, what you do is you would have into your local directory and have you could add or this is how you link All right. So you go to Java you right go to build path. Then you click And then there's a button which is ADD external jars. You would have a jar file 2.1 dot o you have Now you link up and you click on that and you click on open that would add and you can apply and close. So now you could leverage or the functionality that is exposed by the jar file All right, in this case, it was dom4j introduction for Java architecture It's a specification. Actually Jack's be is used and vice versa. All right, so you What are the features for all w3c schema features read all the standard w3c standard that you have in w3c. It has a support for it. It reduces a lot of generated It cut Downs rather on the generated classes scheme small runtime libraries It's pretty lightweight it provides additional 1.3 validation API. It steps to convert Java object into XML create a pojo And generate the classes. So basically Jags B is nothing you can create your class. All right, if you schema says an excess T wherein we saw that it was like an XML like you could have the schema if you remember we had wherein we declared of XML would be you could have the name you would have We defined the sequence as well. Like first name should then email address We Define the sequence as well. So that is nothing but That is XS T. So when use Jack's be you can create Java classes. So basically schema is nothing what an XML can contain You can have so there would be a Java class by the name student and within so We had the data type Like first name would be string last name There's a mapping and Java data type. What it would do is nothing but it would create or all the properties that you have all that you have within student. There would be created in a Java class. So basically this Java class could be thought of as right you could parse them and that's where Jack's It's a binding it binds your XML All right. So create Jack's be so the next step is to create Then create the You have to So in this case, since we are going to do it's going to All right. Create the content free All right, whatever. You want to set your going So unlike earlier that we took we were If you remember weapon child which makes it very difficult which is difficult to maintain it's cumbersome to Now, you have a student class into the student class. All right, so create the content and then call the Marshal method into an XML. We have a student class We would have all which is derived from your schema xsd or rather scheming and what you are doing here is you are going to set that you want in the XML in. The instance variables and we are going to Marshall So basically rather what you are doing the Marshall method to do it. So once you Marshall it, you should be able So let's understand Jason. Jason is nothing We will look at the format It is easy to read and write when it comes to reading and writing and it takes Jason is language-independent It's language independent. It is lightweight and which is nothing interchange format XML is a data And Jason is pretty much like the same used The medium of communication Jason supports arrays of objects So most of the rest API which is nothing but Mostly they use Json and rest API systems. So this is because it's pretty lightweight and as you could imagine since it is across networks since communication is You need to have or lightweight medium or else it would occupy between communication just because it is lightweight. It's preferable interchange and XML Json stands for JavaScript object for extensible markup language. Jason is simple to read and write XML is so we have been looking not pretty straightforward. Right? We had a lot so it is difficult to read and write Jason is data-oriented Jason is less secure than Jason Jason supports only supports many data type as text number images Alright, so it has restriction that can hold Json object We took example of student We're in new head. First name last name and marks. This is the same example, so here you could see opening and you could see and followed by colon and again, There's opening brace which means it is saying that student is object as which starts which means that the object as you get deep into this particular object wherein First name is the key which is Henry as object as you can see here I That's why you don't have which means it's Alright again, you have which is a literal value which is a literal value just to the left side of the colon is nothing but the key and if you have a value which means that it's or you have multiple things with So in this case, you could see You have like three things put and marks basically to some object in Java which will have first name So each key is represented is always string in Jason and the value can be of any type Json array It is always ordered. Json array can store string It can have string it can hold or any other object as well. So here you can see the first example is array and you could see Monday Friday Saturday and Sunday put another example is students and within students Students is nothing and each student has So basically this is So students is nothing So the key is to dance here. Let's see how to run it. So the first thing so you can see here jar file which I would be using so All right, so it's not there. Let me see. So whenever you want to deal that you would do is you have but the slides to come to Jason simple jar. So the first thing that I would do is I All right, so I go. So you could go and download Okay, usually nowadays. We don't do this because we have other we is a build tool and you have a file XML file that you want and it So it has got a repository from which it would You don't have but I don't want to confuse Let's do it this way downloading All right, so it's connecting. Basically, we are and you could see it It's pretty small because those are It's Java archive, which is nothing So I take this and I Okay, so I get and you should be able Now. This is nothing you could see it here would see All right. So now I put it into Let me put it here itself. All right, so I Which is Ed, Eureka? Jason and I put it here. So now we'll have to link up So what I do. So when we had and linked up we'll have for this thing as well. So since I am using IntelliJ, the steps would be But basically what you me see the option here. There's open module settings. So you go to the and you would see something Alright, so now I want Add a particular Library. So I go to libraries first. I click on add Java that I put the jar file into so I put it into I select this jar file So this is basically your application to All right, so you So here you can see that will link All right, I apply it which I already did OK, so that's how you link any executable jar So you go to the build path how you do it in Eclipse. Like in IntelliJ. I where as in Eclipse. You would go to the build path. You would go and you would select the path So this is how you do So encoding Jason in Java, how do we encode How do we write a Jason? How do we actually All right. So I had to comment this so there was some Let me try to resolving it. Okay, it's taking So it's asking So there is a Json object class. We'll have to see so So I have a Json file. So similarly, I would prefer I would say. Json object and this is like private method and I say create Jason. Andre and I would prefer than in main method that's one of the best it's not something But as I said, I prefer to write something like Something like this. So I'm just iterating that you get to understand. What are the best practices So I say student. Jason then I say student. So this is to make it if I come and look at it. I would be able as I said there would be who would be looking that you have written in order for them to understand and to and reusability Factor as well. It's better to write like this. Alright, and then I Bring Jason. And I take the Json object. You have a print method which is taking I call it as Jason because it and I print it out saying Jason. All right. So you have new Json encode and I create Jason Which is nothing It's going to be here Json encode dot print Jason and I'm going to pass So we have created a Json here and email address and we are printing this Jason Let's see what it shows up. So Jason is pretty much light as you could imagine this start tag in tag So when it comes to like millions of data, you're processing you of Jason is size of XML would be pretty much high since Jason is just doing it You don't have to end it and stuff like that I think in terms could be better but this one is better. Jason is better. So machine to Jason is better whereas Deputy I think XML to humans compared to Jason's. Alright, so here you So again if I want to format since this have widely become standard for data of tools dealing with it. All right, if I want to do if I want to do I have Jason for matter as well, which is online. And it's validating as well. If you miss something if you or if you don't have would give you an error, right? So if I do this, you can see that it formatted it and it has given you so you could parse through and understand more Also, it validates it. So if I remove this Cody Breeze and if I try to do it it would say So if I scroll down since it was expecting I put this braces Be able to parse it. All right, so So what do we have next So you could write Basically what you into a string and you All right, so if I want I want to write to file and I said Json object for right What I would do is say I do take the file name as well. Say for example or string. It should be absolute filename. All right, so it's absolute path So I do F or maybe I can use it So I create a file writer, File writer since we know that it's going All right. I create the instance of it. What does it take? So we have created It is showing some exception. Remember we have to add Now. What I do is Json file writer. . Right I'm going Json object as a string. Okay, so Jason dot All right, I got a string and I Now. What I do is Jason I would flush whatever And last thing that I So one thing to remember is If you don't close it. It's going to remain open and which is going to consume which might become a bottleneck So remember you whenever you have to close it at the end. Now what I do is new I create and I kind of write to a file. Okay write this to a file and I need to provide So I say Ed Eureka. Jason died say Student Jason I have to handle If I want handle I can handle it or else I can choose So in this case, So you could see the program Let me go to a director Jason Okay, go to see I go I just open it up and you that Jason has all the fields that we have gotten and this thing so yeah, we saw how to write it So we have created a Json file and we have similar thing from a Json file you which is again, you need to pass and which would pass it So from your file, you are basically converting it and from Json object. You can read whatever data an example you could have and you could have Alright, so you have this now what I'm trying to do is You can see here. There's a parse method All right, so I do dot bars. All right, and you could see which is taking So what I do is bars new file reader file reader that's why you can use it there All right, so this So it's asking me to import it. I am putted it. So this file not found exception that I need to handle which Alright, so as you I have thrown of filed all that I need to handle which is nothing I've thrown it off. Alright, so we have what do you get is nothing as object right here. You have passed it. And you have got Now. What I'm going to do is I'm say one of the attributes to be the same. I'm going to print So it says there's no method. Let me see. So you have this it cannot It has to be taken so that we could read it. All right. So this has to be typed This is basically typecasting. All right, what is typecasting is what is going But from the pass so we can do it All right, once you do this, So I give first name key. Let me print All right, and let to for convenience. So basically we are going its first name last name and email as we can see So this would give an error. So we have passed it as well, right we have read Now. What I do is I'll have which is nothing but Jason and I passed the same file here. All right. Now it is asking me So I add it as I choose not to handle it. All right. So what we have done here are parsing the Json file. All right. So we have a read Jason method which is taking absolute We have a jsonparser class, which is one that we downloaded that we downloaded and since it's put since we have attached it We are able to use If you wouldn't have done with the application you won't Okay, because these are This is not as a part that comes with Java. We are to download it with our application or if you are in an eclipse, then it would be Then you parse it and you of reader in this case. I passed file reader and I Once this is done you or read the content that you have within your file. You get this an object then I do do Jason don't get last name. And the last thing All right. Let's see if this works. So I'm running this. You could see the value First name that came out as John and the email that we printed. That is John at the All right, so that's about XML and Json a standard set across industry So yeah having said that one of the main and Json is its lightweight and most of the companies towards using Jason's but xml's our Legacy and they have lot of weight in the industries lot I call the financial systems. They have Legacy systems and less of Jesus. But Jason is something and lot of systems to or started using Json speak since they are lightweight that's pretty much and thanks a lot for Sting and I hope you guys and practice a lot on coding. All right, so all I hope you have enjoyed Please be kind enough to like it and you can comment any and we will reply them at the earliest do look out And subscribe to Edureka channel Happy learning.