Hello, welcome to the GOTO office. author of the book &quot;Five Lines of Code&quot; about Hi, everyone. I'm Adam Tornhill. engineering and psychology. And what I combine these two perspectives. I've written a Scene&quot; and &quot;Software Design X-Rays.&quot; to talk to you about this social side of tech I refactoring and code quality and stuff is entirely forensic analysis, which is interesting. So maybe Sure. I think it's a perspective that we need quickly learned is that there is so much more We have this whole social dimension, like the And to me, one of the great tragedies of software they're actually invisible in the code itself, is this a major coordination bottleneck module that's written by just one developer? That dimension is simply missing. social part of the code. It's humans working with and there are managers, and there are all of these it was a very interesting thing when I was seeing red, and green categories for code. And then you we have all these red parts, and that's bad. We to happen in that case from the managers right? They don't want to be the worst. They don't right? Or at least that's my experience. You could well be right. I think the challenge to green, it's a long, long journey, right? It's with a customer just a couple of months ago, they of their code. I think they managed to get it but what was so interesting was that they also had. They use that as kind of a goal, can They measure of like an 80% reduction in So I find that really, really fascinating every business. And yet, it's something that we Yes. So there was both that they underestimate yeah, so I go and coach teams to do it. It's the management teams in general that we need to how do you actually deal with people? How more time for refactoring? And I just every Monday in particular.&quot; That's handbook where it says 20% should be used that's just what you need to stay still. I do. I do. And I think I've seen it work. do things like having a technical debt budget. with that time. During your talk, you pretty opportunity to develop their skills, something that benefits everyone, including the staff like, yeah, paying down technical debt was the skills and the toolset that the developers So I've seen organizations that run some static 8.000 major issues. The first thing that happens okay, over three months, we got to reduce ever seen something like that happen too? up warnings the first time people Exactly. But that's my experience too. The improvement possibilities, they just get right? Then you have warnings, we don't have the really critical stuff, and even then you might proactive approach that we're doomed. I think When we're talking about the social side of the show up, that's 5,000 problems or something, gets too big, humans are like, &quot;Oh, I'm not going because it's not going to make an impact?&quot; And then you just turn off the warnings, or you of warnings, or we don't use that or throw out because they gave too many warnings and errors. I mean, living with that amount of issues So I always kind of compare it to, going from it's very much like choosing to jump from Yes. none of them is a good idea. The reason I say view like the most important thing, and that's to fix all 5,000 issues. Perhaps we just have to right? Because if you just look at the code, you because the code itself cannot tell you anything Yes. For me, I've had situations where one of the worse issue, but because we weren't looking into unnoticed and we had this huge bug. And when errors afterward which were just amazing. it's the worst error I can have because they I take warning signs really, really Yeah. I mean, it's virtually free to treat right? And for all the new code you write, do with existing code, you gradually Yes. I would say, well, I actually make an error said it's more important that we're actually doing that it doesn't grow at least. Then over time, on the human side, so I make sure to celebrate fancy is. Celebrate whenever something has gone something's gone wrong, right? So, long as you Yes, definitely I agree with that. because you have a product company. How do you do product refactoring in CodeScene? using CodeScene on CodeScene from day one. It's of eating our own dog food. I think that's very and making tools for other software people, we kind of helps. I think this is where we're much in the day. And one thing I always found missing was very much focused on the tech and very little is that the more we understand the problem So I think that's really important. That's why reason is that we're all a pretty might have like 10 times the engineering that we cannot compete by doing the same thing we simply cannot afford much technical depth. So So, it's all green, no red? long as we're aware of where they are, and as long live with that, right? Once we get to that area, that's my number zero rule for managing technical worse. If you do that, then you're already doing How do you budget for refactoring We don't. We don't. People do it automatically. And it works and we have this culture, where we really value about that a while ago that...I like what you said just meant that something broke and we learned So, one thing we start to work on a couple of successful refactorings in a code base and put Because I think there's so much we can learn from a big fan of the refactoring books that you there's value in having refactoring examples from on our team, right? So it's very likely, I would the same style that we write code ourselves. So Yes. And you mentioned to me beforehand that it's Yes, it's Clojure. find people who can do functional programming? 2015, one investor I spoke to asked me that, &quot;Hey, no one has ever heard about. If you will use Java, I don't necessarily want 10 people, right? So allow each person to kind of do more than what we also have all the coordination aspects. So as that Clojure is actually like a hiring magnet, want to work with Clojure, because the drawback in general, is that you never want to go back street. So we never had that problem. And I think it's also kind of a good hiring filter likely learn it in your spare time, and means Yes. Also, Clojure is getting a great grip. A conferences left and right as the new thing. famously it's not a famous dynamic two-type it seems very difficult. It seems you need a lot not trusting people with is having discipline. systems where humans' default behavior is on their worst days. I would find people would and just I didn't quite get the tests for Yes. We pretty much have I mean, it's vital no matter what programming like test-driven development. We have the of end-to-end tests that run on the whole But I think for dynamic-type language, I could I don't know how we should hold it together. testing that's way, way important because right, when it started drifting, which is where being academic. Yes. It seems very difficult to get some sort of where I want to move stuff and just check that it which is what I usually find also. You must a lot of people end up even if they write refactoring. They actually hinder it because Yes, I've seen that so many times. In fact, ever seen has not met the test code. I think distinction between application code, which nice and tidy. Then we have the test code, where, of it at all. And I think it's really dangerous. me that it's just test code. But it's never just it will hold back your efforts. And the example simplify and even make refactoring possible, tied to the implementation, then they're actually having a test that breaks the moment you I think we could talk about this for would always be if your tests are too complicated, you should refactor the code so that it's I always attack the code and never attack the more or less. It's been a pleasure talking to Really nice to meet you. And thanks