As JavaScript developers, did we go full circle back to kind of writing the same code we wrote years ago when we got started with PHP? That's a question I recently stumbled across. And of course, not everyone started with PHP. Maybe no one else started with that, but at least in my generation, and now I sound really old, but in my generation, I think most of us started with PHP when it comes to web development and when it comes to building more than simple static sites. Because back in the days when I really, yeah, got started with web development, which was around 2003, 2004, back then, if you wanted to build a website, you of course needed HTML, CSS, and maybe JavaScript, same as today, though JavaScript back then really was something different. It was far from being so powerful as it is today, and it was, I guess, mostly used to open annoying pop-ups and have blinking text on the screen and so on. But anyways, that was one way of building websites. The other way, or the more advanced way of building websites, if you want to put it like this, was to also use PHP. Because PHP, unlike JavaScript, allowed you to also build websites where code runs on the server, and that, of course, allowed you to build dynamic websites where you could also handle user requests, where you could handle form submissions, store data in databases, fetch data from databases. You needed PHP for that, or at least PHP was a popular solution back then. Of course, there were alternatives. I remember one internship where I worked with Java server pages for building an online banking system for a big company here in Germany. So that was also a thing, and there were other languages as well that you could use to run a web server or to render websites. But PHP was definitely a big thing back then. And just to make it very clear, I'm fully aware that it's still a big thing, most likely due to WordPress, the biggest thing today. It's not dead, and this is also not what this episode is about. PHP is there, here to stay, more awesome than ever, especially with Laravel, in my opinion. So that's all the case. But I just wanted to highlight where I'm coming from. I came from a world where I essentially had to learn PHP if I wanted to build dynamic websites. And back then, that then mostly meant that I set up that whole PHP server interpreter stuff, set up some database with that MAMP stack, I think it was called, like a tool in the end you could install on your system so that you had all these things, database, PHP interpreter, and so on, on your system. And then I got started, I created a PHP file, and that essentially was an HTML file with some PHP code crammed into it so that you had a combination of HTML and PHP, and the PHP part would be resolved on the server and would then in the end render out some HTML code that would then in the end produce a finished HTML page that would be sent back to the client. That's how it worked back then, at least for me, I guess for most. And nowadays, if you're a JavaScript developer, you could get the impression that we're writing very similar code if you're using solutions like Next.js, for example. And in the previous episode on my channel, I talked about Next.js, Next.js 14, what I like, what I don't like. The interesting thing, of course, about using frameworks like Next.js and writing JavaScript applications with solutions like that is that it has kind of these similarities to that old PHP approach, at least on first sight, because we're in the past, we had those PHP files with PHP code and HTML code blended together. We now have JavaScript or JSX files, which in the end is JavaScript, where we have a combination of JSX code and then also some code that is executed on the server that fetches data or handles a form submission so that in the end we end up with an HTML document that's served back to the client. So kind of a similar approach, just with JavaScript instead of PHP. And therefore, you could ask the question if we did go full circle back to where we came from. Now, I would argue that this is not the case for a couple of reasons. One important reason is that JavaScript, when used like this, even if everything else were the same, has one big advantage compared to PHP. Nowadays, if you're building such a Next.js application, even though it might look like that old PHP approach, you have a language that can execute both on the server and the client, so in the browser. And therefore, unlike with PHP, you can use this one language to add both server-side logic and client-side interactivity. And that is a huge advantage because back then in the PHP days, you had to bring in JavaScript as an extra language. You had to include extra client-side JavaScript scripts, and now it's instead all integrated into one project. And that is a big enhancement, a big improvement compared to what we had back then, in my opinion. In addition, of course, it's also not true that we write exactly the same kind of code. Just as you would typically use some kind of framework with PHP, like Laravel, but there of course also are others, but Laravel is probably the most popular one. Just as you would do that, you're also not wiring up JavaScript manually. You're not writing client-side and server-side JavaScript without any frameworks and build some kind of integrated environment there. Instead, you do use frameworks like Next.js, which do a lot of behind-the work for you, which help with caching, for example, but which also force you into certain patterns so that your code must have a certain structure. So it's not the case that we just create simple JavaScript or JSX files where we then start blending JavaScript and HTML code in the end. It might look like this on first sight, but that is actually not the case, I'd argue. Instead, you can really think of modern frameworks like Next.js of using JavaScript as a templating language and using JSX, most importantly, as a templating language there so that you produce the HTML files on the server with help of JSX and JavaScript, whereas with PHP, you would have a separate template engine. Laravel has its Blade engine, for example. So that's kind of how I would compare these things. Nonetheless, what is definitely noteworthy, in my opinion, is that we did indeed kind of go back full circle because whilst there are vital differences and whilst the approach we use for building complex web applications definitely has evolved and is better than back then, in my opinion, whilst that's all the case, of course, now in the JavaScript ecosystem, we're coming back to that idea of building integrated full stack applications, not necessarily for every project, of course, there might be good reasons to have a clear separation between front end and back end. But for some projects, at least, we're coming back to that idea of blending back end and front end code. And I think that's a good development because whilst there are valid use cases for such a clear front end back end separation, this separation can also add a lot of unnecessary complexity for some projects. And therefore, you shouldn't feel forced to have such a separation just because you want to use a JavaScript framework like Angular or React. And therefore, I think it's a good thing that we're seeing that development of making it easier to build integrated full stack applications. And that's maybe the part where we are coming back to where we came from. Anyways, these are just my random thoughts on this question I came across. As always, definitely also please let me know your thoughts on this. What did I forget? What's your point of view on that? And with that, I hopefully also see you in future episodes.