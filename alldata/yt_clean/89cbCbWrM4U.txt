All right, this is CS 50. Uh This is week one because of course, last week was week zero. And this is the week where we'll actually start programming in a much more traditional way that programming language we promised called C of course, we started with this and hopefully by now with problem set one, you've had a little bit of fun, even if you played with it before and the goals of scratch beyond sort of making things feel very accessible and user friendly is really to elucidate some of the fundamental concepts that we'll see again and really every week subsequently like functions and conditionals and loops and variables. And so much more. And in fact, among the goals of scratch is again to kind of plant these visuals in your mind. So even as today onward, feels all the more like a fire hose, especially when it comes to really weird cryptic textual syntax, the ideas are still going to be the same. So today this program, hello, World becomes this instead. And in fact, just to color code things temporarily, I dare say that what I've color coded here in orange, which looks probably to those of you who've never programmed pretty cryptic is the equivalent of the, when green flag clicked orange puzzle piece like this. What remains is just one line in purple with a bit of white, which is what ultimately is going to get the screen today to say hello world on the screen. And of course, we had a name for something in purple. In fact, if we rewind to week zero, this block in purple represented what type of functionality? A I function itself an action, a verb that gets the computer to do something. So what looked like this last week is about to look like this. Let's take away the color coding and focus really on what we're going to now start calling source code. So this is what programmers do in the real world. This is what software developers, software engineers do in the real world, they write code that looks like this and clearly it's a little English like, but it's not English in the way you would compose an essay or an email. Clearly there's some patterns and some special syntax to it that will highlight. Ultimately today, the problem is though that computers of course, don't understand source code. They only per last week understand like zeros and ones that is it the so called binary system. So somehow we've got to get what already looks cryptic into something that looks at a glance even more cryptic. The zeros and ones that computers do understand. And for today's purposes, just know that built into your Mac P CS and phones, there is a built in understanding of what these patterns mean. Maybe it means a number, maybe it means a letter, but today, maybe it means it instruction like print something on the screen or save something or load something that is to say computers use patterns of bits, not only to represent all the stuff we talked about last week, numbers, letters, colors, images, sounds and all of that. They also use patterns of bits to represent fundamental functionality, print things play things much like those same scratch blocks. But no computer scientist really unless they take out a paper pencil or write a program or use a website to convert this can sort of read this and know what's going on. That's why we humans are actually going to use not machine code as it is called the zeros and ones that computers understand we are going to start writing source code. And last week you already wrote source code, but in the form of dragging and dropping those puzzle pieces. So this too is going to be the paradigm that sort of guides us through the entire semester. Problem solving programming is really about input, becoming output. And we'll focus today then on a certain type of input becoming output because somehow someone has to get that machine code, the zeros and ones to look like the uh sorry someone has to get the source code that's written in a language like c into the machine code, the zeros and ones that the computer actually understands. So source code today is going to be our input machine code is gonna be our output. And we're gonna give you today a special program called a compiler whose purpose in life is to translate one to the other. And there's compilers for different languages in the world. We're going to focus on one that supports today's language known as C and here, as promised is the programming environment we're going to use. It's tail two CS 50 which is to say we've pre installed certain software that you might find useful during the term. But for all intents and purposes, the tool you will use for CS fifty's problem sets. Henceforth is a very popular industry standard tool called visual studio code or VS code for short. We are using a cloud based version of it that lives at literally this URL CS 50 dot dev. You can sign into that so long as you have a free github account with which you uh for which you signed up presumably already. And that will give you access to not only an industry standard programming environment but again, a an environment that has some CS 50 specific things pre installed and at the end of the semester or even in the middle, if you so or you're so inclined, you can actually download for free VS code onto your Mac PC. You can disconnect from the internet and you can actually program on your own computer caveat though is that you tend to hit technical support headaches in the very beginning of the term. So we suggest you do that later in the term once you're already comfortable with this cloud based environment here and here it is, this is what programming shall look like, whether we're using C now or Python in a few weeks or javascript or SQL thereafter. So here is what looked what is VS code configured as follows at the top, right, you'll generally have one or more tabs for code much like tabs in a browser. And this is where you'll write code that looks a little something like this. And in fact, this is exactly the code that you saw a moment ago. What VS code does among other things is it actually highlights your code for you? It colorizes it in what's generally uh in an illuminating way. So I did not choose to make this red. I did not choose to make this blue in this purple. The computer sort of automatically does that for you as we'll soon see to sort of draw your attention to different ideas in the program itself that all happens automatically at the bottom. Here, you're going to use a more advanced interface today onward known as a command line interface in the form of a terminal window so you can still use your mouse or trackpad and click and drag and do things like that in this environment. But you'll find and many programmers prefer uh that it's much more efficient ultimately to use your keyboard more often than the mouse or the trackpad. So we'll introduce you to that text based terminal window there up here at top left, you'll have a file explorer. So what's nice about VS code is that not only will you have textual commands with which you'll get comfy, you also have like a normal mac or PC or phone nowadays, like literally files and folders will visually appear uh appear to you so you can play with or manipulate them there. And then lastly, this is sort of like the menu, the so called activity bar that just has icons for various features including CS fifty's duck. So in fact, if you poke around, you'll see ultimately a duck icon when you log in, which is your own CS 50 specific chatbot of which you can ask questions throughout the process. So now that we've got VS code here, let's go ahead and actually consider what it represents. So this is generally for jargons sake, a graphical user interface which means buttons and icons and menus. And all of that, we all take that granted on most any device nowadays that's abbreviated just so you know, as Gui G I but built into VS code again is what's not only the terminal window by name. But conceptually this is a command line interface. So not a graphical user interface but a command line interface whereby there aren't icons to click on or double click on. Rather if you want to run a program, you use the command line interface or CL to type the name of the program that you want to run. And so so feel like a step backwards initially today because we all sort of sort of tap and point and double click at things nowadays. But again, it's gonna give us more power, more efficiency, ultimately, beyond this. So with that said, let's go ahead and actually use it for just a moment. Um During class, you're welcome to follow along, but suffice it to say we generally go somewhat quickly, really, you're going to learn how to program by way of the pro the problem sets each week. Um I'll introduce and focus on the concepts, the ideas, the sort of primitives that will get you started, but only through actually doing the problem sets is the muscle memory and practice going to come. So not to worry if it doesn't all sort of go down easily the first time around. So here is the code that I claim is equivalent to last week's hello world program. Let's actually go ahead and do this in the programming environment. So I'm gonna go ahead and switch over to VS code itself, which is now running on my Mac here. It's not just a screenshot and I'm gonna go ahead and do the following to get started with programming. I'm gonna write literally in my terminal window, the word code and I might have to give it focus by clicking down in that quadrant of the screen. And then I'm gonna give the name of the file that I want to code. And in this case, I'm going to propose that we call it hello dot C in the world of scratch. When you downloaded it, you might have noticed the files are all called like SB three or some such file extension. When writing code and c you literally name the file something dot C by convention, but notice some other details, especially if I zoom in everything I've typed as far is lowercase, there's no spaces and so this is going to be important and unfortunately, computers are not forgiving and odds are one of the first stupid mistakes you'll do is mis capitalize something misspell something add too many spaces or the like not to worry like in time that kind of muscle memory will come with practice. So let me zoom out, let me now just hit enter and you'll see at top right, the code tab that I promised. So I'm gonna go ahead and type out this program pretty quickly because I've done it before, include standard IO dot H into main voice and then some curly braces as they're called and then print f quote unquote, hello comma world backslash and close quote, semicolon. All right. So that's a lot. But that too will come in time with practice. But this is the exact same code that we saw just a moment ago. Indeed, if I zoom in it's color coded just as in the screenshot. And thus I have written my first program vs code will automatically save for you, but you can also hit control or command s to ensure that it's safe. But notice what's happened at top left. Not only do you see my code over here, you see a visual icon just like on a Mac or PC that yes, this file now exists in your account. And that too is what you're getting with VS code for CS 50. You're getting your own sort of server in the cloud. It's called the container nowadays. So there's some virtual disk space somewhere in the cloud, a LA icloud or Google Drive that's going to store all of your files. And at the moment because I refreshed my account before class, I only have one file in my own account. What's this? What's this? Well, this is like my ID number for github. Not really a big deal that's just randomly generated by github Urban Adventure is the name of my programming environment today, otherwise known as a code space. This is just a github thing which is again one of these cloud companies instead of choosing like random letters and numbers to uniquely identify all of our programming environments. It's popular in the tech industry nowadays to just put together random English words that sometimes sound kind of cool, but it's just by coincidence, not something I chose yours will be different. All right. So like I've written some code I created hello dot C I typed in all of that code I confirmed visually it left that it was created. I'm gonna hide my file explorer henceforth, just so we can focus on the code. How do I actually run this program? Well, on a mac or PC, we would be in the habit of like opening the folder and double clicking on it or on your phone. You would take it out and tap on an icon but not here here, we're focusing primarily on the command line interface within this whole environment. I'm actually going to have to introduce a few commands you saw already the code command, which for our purposes is vs code specific that just creates a new file called hello dot C in this case, but I need two other commands to actually run this program. The first nicely is called make and then I specify what program I want to make. And then a little weirdly I have to type dot slash hello, but just to take a step back, make hello. If this is about to be my second command that I type, what does that step represent perhaps given what I said just a minute or so ago. Perfect. So make represents the compiler so to speak the program that converts source code to machine code. I have to do that for now manually by running Make colo now make is kind of smart. And even though I'm saying make not make hello dot C make it smart. And it's gonna say, oh if you want to make a program called hello, I'm gonna assume that there is somewhere in this folder, a file called hello dot C. So you should not type Make hello dot C, you just type Make hello. And then this third command even more cryptic. What might it do if this is step three or three that's gonna run the machine code? It's gonna tell the computer in this folder sort of the dot implies this current folder and dot slash just means something in this current folder, run the program called hello. So that's it. Like there's three steps to writing a program and C you create the file as with the code command. But there are other ways to do that too. And you don't even have to use vs code. You can use dozens of other alternative programs in the world. You run the compiler which in this case is called Make little white lie. Make is not actually the compiler but more on that next week. But make is going to trigger compilation of this code. And the last step three is to execute or run the program called hello. So let me go back to BS code here and you'll see that my code is still at the top, my terminal windows at the bottom. I hid my file explorer just because it's not that interesting anymore. And I'm gonna do what you proposed, which was ma ke space. Hello? All lowercase enter. And ironically thankfully nothing happened. And that's actually a good thing in this environment. If nothing seems to happen, like you probably did good. If anything does seem to happen on the screen, you probably screwed up and you've made some mistake. So seeing nothing is generally a good thing. But what has happened? Well, let me actually go back and open up my file explorer and notice there's not only K dot C but there's a second file. Now. Hello, which is the name of the program. So hello is the program I wanna run. I'm gonna go back to my terminal here and to run this program. I'm gonna do dot slash. Hello. I'm gonna cross my fingers as I'll often now do and voila my very first program in C. How else can we see this file? Well, down here in my terminal window, let me zoom in. You keep seeing a dollar sign that has nothing to do with currency. It's just a weird geeky convention that you prompt at a terminal window like where you type commands generally starts with a dollar sign. Sometimes it's a hash symbol. Sometimes it's an angled bracket, depends on the system you're on. But dollar sign is very common. It just means type your commands here. Well, I've typed code, I've typed make and I've typed dot slash hello. But I can type other things too and more on these later like LS, which doesn't actually spell something but is short for list, list, programmers tend to just be as succinct as they can. So most commands are not full word, they're often uh uh abbreviations. If I hit enter now, you'll see also two things you'll see. Hello dot C and you'll see in green just to draw attention to it hello as well. The asterisk here just means in the con in the programming environment, this program is executable like you can actually run this by doing dot slash hello. The fact that this is just white here that just means it's some text file, it's in fact source code. So in other words, LS list the file in my current folder or you can use your human eyes in the file explorer at top left and just look at what files exist. These are one and the same one is a gooey. One is a cli graphical command line and so forth. And we'll start to take these kinds of uh these kinds of paradigms soon for granted. But let me pause here and see thus far. Now that we've written our first of many c programs. Any questions or confusion, we can clear up. It's ok if you don't understand most of the lines of code, that's what today is about. Yeah. What's the difference between hello and hello dot C? So hello dot C is literally my source code. It is a file that exists somewhere in the cloud that contains all of the code. I myself wrote the hello file is the file that the compiler created for me by converting the source code to the machine code. So inside of hello theoretically is a whole bunch of zeros and ones we can't quite see them. But if I do this, let me zoom out, let me click on hello and notice that VS code is going to yell at me this file. The file is not displayed in the text editor because it is either binary that is zeros and ones or uses an unsupported text encoding, whatever that means if I do open it anyway. But I don't recommend this like heed these warnings, you won't see zeros and ones, but you will see sort of nonsense. And this is because VS code is trying to interpret those zeros and ones incorrectly as, as a text like English text, but it's not there are instructions for the computer. So as soon as you see scary red stuff like this, like undo close whatever tab you open because odds are you can only break the program you just created. It's not a huge deal. You can recreate it. But that's what's inside of those files. Yeah. Use a five dot slash a alone. Really good question. What if we don't type uh dot slash hello? We just type hello. Well, let me do this. Let me hide my file explorer again because it's not that interesting here on out. I'm gonna clear my terminal window by hitting control L just to be neat and tidy in class or you can literally type clear and it will clear it. But again, that's just to keep things tidy. Your TFS might do that in section two. If I just type hello enter, I'm gonna get this weirdly bash hello command not found. So more on bash down the line, but this is means literally the command hello is not found because you need to tell the computer where it is. So dot slash hello means run the hello program. That is in fact right here, by contrast, you don't run dot slash for code for make or other commands that we'll soon see like LS because why those are installed in the system for everyone, not just in your individual folder. So that's the difference. Any programs we write, it'll be dot slash something. All right. So let's tease apart what is actually going on here and see if we can lean heavily today on scratch, especially as the syntax gets weird. Perhaps a little overwhelming still the same idea. So this last time of course was our scratch program that just said hello world. I claim today that this is the nearest equivalent that a a any programmer could convert scratch into C if we color coded accordingly. Indeed, this sort of lines up with when green flag clicked is the orange and then the purple is just the equi of the same block. So the same block we said earlier was a function. So let's compare these things side by side because there's actually some rhyme and reason to what MIT did with scratch as to why these shapes look like they do um and so forth. So in scratch, there's a function called say recall that it takes an input otherwise known as an argument or a parameter is another name. And that's always provided in these white ovals, one or zero or more white ovals in C we've already seen, but let's do it a little more pedantically. The equivalent of say is essentially the word print. Why did MIT say you say just because it's a little more kid friendly, but print is the idea in our environment, it's actually not print, it's print f because we're gonna be able to format our text in interesting ways more on that in a moment. But notice the open parentheses and closing parentheses here, sort of conjure up the idea of that white oval. So that's kind of intentional on an ma Ts part what though? And C goes between these parentheses? Well, literally the input or the argument you want to pass to the function like hello world. But in C you have to be a little more pedantic because you don't have a nice little graphic like this purple block with the white oval. You have to surround everything in double quotes. Those of you with prior programming experience in C you need double quotes, not single quotes in this context. And then there's this arcane detail here backslash N we'll come back to in just a moment, but that's essentially what's going on line by line from scratch to C. There's kind of an equality between those two even though they of course, look a little bit different. Well, let's see what that backslash N is doing just to highlight some details here. So let me actually zoom in a little bit here and let me go up to my code and let me just sort of recklessly delete the backslash N. I'm gonna let it auto save. I'll zoom out in my terminal window. Now I'm gonna run uh make hello to recompile the code from source code to machine code because I changed the source code. Nothing seems to happen. That's good. Now, I'm gonna type dot slash hello enter and there's a subtle bug since I made that change, what looks wrong to your eye. Now, the dollar size. Yeah, the dollar sign, our so called prompt is at the end of the line instead of on its new line. I mean, this isn't really a deal breaker like the code works and you can still type a new command, but it just looks a little stupid like this was not the intent of the program. It's sort of good practice to move the prompt to the next line. And that's because the backslash N is what we're gonna call an escape sequence. So it turns out in programming, you, you don't, you have to tell the computer exactly what you want it to do. So if you want a new line, the equivalent of hitting enter on the screen, you have to tell the computer to put a new line there. What you do not do is this if I zoom out and I go into my code here and I'll zoom in on the code. If you want to put a new line, you don't do this. Why? It's just confusing for the computer. Like, wait a minute. Is that a typo, did your lines just wrap? Do you wanna put a new line there? It just looks stupid and it makes it less line based the code itself. So humans decided years ago if you want an actual line break, don't just naively hit the enter key. Literally tell the computer. Put a new line here. If you want to move two lines down, just do two of those. If you want three, just do three of those. Well, why the backslash again? These are what are called escape sequences. And you don't literally want an N let alone NNN. What you want is a new line which is represented in code as simply backslash N. Now, for the mathematicians among you like what we're doing now by writing using functions like print F is just sort of like F of X notation if you recall that from high school or prior, where F is a function X is an argument or an input there too. And we're using parentheses in code, just like mathematicians would to write functions like these and the types of functions we're using right now still follow this model. You've got input, you want output in this case, the input to print F for instance, just like the say block is what's called an argument. Um The output put though of the function print F is what we call the side effect. And the easiest way to think about that is a side effect. It's just something that sort of like happens on the screen visually. Audio, it just sort of happens and there's that effect on the screen and we'll contrast this with other types of outputs from functions. But for now we're focusing on just this, which is reminiscent of course, of what we did last week, which is if you type hello world into the white oval, use the say puzzle piece, you get out the side effect of the cat appearing to have said hello world. Now, as for those escape sequences in C, there's bunches of them, but very few of them will we actually use in practice backslash N is a new line backslash R is a little more subtle and it's kind of a feature of yesteryear. It moves the cursor not to the new line but to the beginning of the line. Kind of like an old timey typewriter. If you've seen how those work, sometimes though, you might want to print out an actual double quote. But there's a problem, of course, if this is my code here and I'm already using double quotes as sort of special symbols to surround the text. I want print f to say it would probably be a little w, like, if you wanted to say hello world with sort of finger quotes, why might this not be a good idea if you think about this from the computer's perspective? Like, why is this probably not the right way to do this? Yeah. Mhm. That, yeah, exactly. The computer is indeed going to read your code top to bottom left to right. And when it sees the first open quote, ok. That's fine. It understands that. But when it gets to the second quote, it's gonna assume, oh, wait a minute, maybe you only want me to say hello comma and then it's gonna keep reading and be like, wait a minute. Why is there, the word world here and then wait a minute. Now there's two more quotes. It's just confusing, it's ambiguous. And computers need you to be again, very precise. So you want a quotation mark to literally be displayed on the screen, you would escape it, so to speak, which looks a little weird and take some getting into the habit of. But this just solves that kind of problem. And similarly might you use single quotes in other contexts more on that soon? And if you really want to bend your mind, how do you actually print a literal backslash if you ever care to, it's not that common a character to type, but if you ever want it on the screen, it seems that we're using backslash as a special character that says, hey, give me a new line or give me a carriage return or give me a double quote weirdly in programming. If you want to type a literal backslash on the screen, you literally do backslash backslash. But that's it for sort of weirdness for now. But this is to say humans tripped over the same problems years ago, they came up with solutions and now we indeed have these conventions in code. All right. So let's tease apart some other features of this in every program we're going to write, namely what's at the top of this file. So at the very top of this file, there is this cryptic looking hash include or pound include standard IO dot H in angle bracket. So this is a little weird. We'll talk more about this next week too, but this is what's called a header file. Any file that ends in dot H is not a source. Well, any file that ends in dot H is what we're gonna call a header file. And inside of that header file is functionality that maybe came with the system, came with the programming language itself. So for instance, I'm gonna do this, I'm gonna go back to my code here and I'm gonna make a very common mistake that you yourselves might make in the coming days where I just forget that line because I don't even understand it in the first place. So I certainly didn't think to type it here. Now, if I go back to my terminal window after clearing it and I run make hello, cause I wanna recompile it because I've changed the source code. I'm gonna see a fairly cryptic error. I mean there's more error on the screen than there is code up here, but you'll get the hang of sort of reading it to try to figure out what's going on. And I'm seeing this how dot C line three character five. So that just means line three colon character five from left to right. It's sort of a visual cue as to where the problem is. Call to undeclared library function print f with type dot dot dot and then the rest kind of overwhelms me visually at this point. But that's a hint if you do not include that header file at the top of the code you've written, you do not have access what's gene to what's generally called a library. A library is a collection of code that someone else wrote for you. Maybe it was mit maybe it was the authors of the C language itself years ago. Maybe it was CS 50 if we wrote some code for you, a library is a collection of code that someone else wrote for you and you access it again by including header files that those same people wrote for you. So if I go back to my code, now, let me clear my terminal window just to be less overwhelmed. Let me undo what I just did and put that file back. Can you perhaps infer just functionally what is inside of standard IO dot H that again, someone else wrote what must be inside print F so some whoever invented print f decades ago, probably put that code in this file. And so by including it, so to speak in my code, I now have access to print F functionality. So that's all. And again, C is lower level than scratch. It's obviously tech space which means you have to be a little more pedantic yourself as to what you want the computer to do for you. And if you want to use someone else's code. You indeed have to include it. Scratch, didn't bother with this, but we did do need to do this in the context of c um as an aside just to pre empt some unnecessary headaches. This word is not studio dot H every year. A nonzero number of people um can't understand why their code is not working because studio dot H is not found. It's standard IO STD IO dot H. That's when they again one of the first frequently uh made mistakes otherwise. All right. So remember that, let me undo now the unnecessary quotes I added here and let me propose that we show you where you can learn more. So all of these libraries generally are documented, like people wrote instructions for how to use them. So you don't just have to listen and pay attention only in class. You don't have to pull up a book. There tends to be online documentation as well. For instance, for the standard IO header file and the documentation in the world of programming for C specifically are called manual pages or man page. Just for short. Unfortunately, they're really written decades ago for like the more comfortable among you, those who have an eye already for programming. And so what CS 50 has done at this URL manual dot CS 50 dot IO is we essentially have more user friendly versions of the documentation for this header file and others. So for instance, if I pull up manual dot CS 50 dot IO, you'll see a web page like this and if I just scroll quickly, you'll see a whole bunch of header files dot H files and a whole bunch of functions beneath them. And there's only a couple of dozen or so here. And indeed, per this check box at the top, frequently used in CS 50 we have sort of highlighted the functions that odds are over the next month and a half. Like you will probably want to use. If I turn off that less comfortable mode, there's actually hundreds of functions that come with C and like no programmer knows all of these functions. What they do is they read the manual when they want to find some new piece of functionality. So I'm going to simplify this. I'm gonna scroll down though to standard IO dot H for instance here and you'll see more functions that we'll eventually get to. But if I click on print F, you'll see hopefully some fairly uh user friendly instructions for how this thing works. For instance, under synopsis, you'll see that we tell you what header file you should include in order to use it. Below. That is something called a prototype more on that later. But below that is a description and here is where we, the CS 50 staff have written in layperson's terms, ex explanations of how this function works, how to use it and so forth. But if you'd rather see what the uh real World uses. You can turn off that mode and you'll see much more arcane the original language. So in short, these are sort of like training wheels that you can turn on and off at your leisure. But ultimately, this is Real World documentation as well. So if we want to see something else, for instance, let me go back to the main menu. And as we'll see today, there are actually functions in a header file called CF 50 dot That for a few weeks, we're going to lean on heavily. Long story short, it's actually kind of hard. It's annoying in C to get user input, ironically to like get the human to type in a word or a number, like you have to kind of jump through some technical hoops to make that happen and we'll show you how to do it like the real way in a few weeks. But for now among the first training wheels is a CS 50 library code that we wrote that will just make your life easier. And indeed, we're going to give you access to functions that simplify the process of actually getting input from the user. So case in point, we're going to give you access to uh functions like get string, when you want to get a string of text from the user string is just text. So if you want to get one character, one word, one sentence, one paragraph you can call a function called get string. We're going to give you another one called get in when you want to get an integer from the user like one or zero or negative one or anything else. You can use that function as well. And we'll see today too, there's other functions you can use from CS fifty's library in a few weeks time. We'll take these away once you sort of don't need them anymore. And you'll see what those library functions have been doing all along for you. But for now, let's focus on this. Perhaps the most useful of them get string and solve a problem that we did already pretty easily in scratch. So recall and scratch. This was a program that used two functions. Uh three in fact, ask to ask a question of the user say to actually display something on the screen and join to combine the default of apple banana or in this case, hello and whatever the human's answer was. So this made our hello program a little more interactive last time, how can we actually translate this into a similar paradigm now? So input and output as the story, as always in this case, we have arguments going into those functions. But now we're going to introduce not side effects, which is stuff that happens visually. We're going to revisit that blue circle called answer or the blue oval called answer that represented last week, what we called a return value. And this is what many functions will actually do for us. They're not just gonna display something presumptuously on the screen or play a sound or a video or something like that. They're gonna hand you back virtually a value, text or integers or sounds or images that you can then do with what you see fit. So the paradigm we now have is much like in scratch if the input is what's your name? And the function is ask and you get back a return value of answer. We want to actually do this now and see. So side by side, what code like this in scratch is gonna look like today onward is this instead of using the ask block, you literally use CS F function called get string, it takes input. So we put the parentheses on the left and the right to kind of conjure the idea of this white oval inside of that string, you can put a prompt, so to speak, like what do you want the human to be asked in this case? And I'm missing something still per the placeholders here. What's missing? So quotation marks, so literally quotation marks on the left and the right. And I'm going to be a little anal here. I'm going to put a space at the end because I don't want to, I could but I don't want the cursor to go to the next line. Hence no backslash. N if I want the cursor just to sit there kind of blinking waiting for the user after the question mark. I'm just going to put a space so it will stay there for me. But this is just an aesthetic detail using the same idea as before. So that is the analog of this block. But how do I get access to the so called return value mit just plopped it on the screen for us automatically. In C we have to write a little more code to get access to that return value. And the way we do this is on the left hand side of this line of code, we come up with a name for the, for the return value, you can call it anything you want. But answer is a nice equivalent to what mit did you could more generically call it X or Y or Z. But that's not really useful. And so um computer scientists, unlike mathematicians will tend to use variables that are a little more verbose like the word answer. But in C it's again a little lower level, you have to tell the computer what type of variable this is going to be. So I'm kind of a conflating variable in return value, but they're being used in an intertwined way. The get string function just like the A block returns a value. If you want to do something with it, you need to put it in something called a variable which is noted in text here. But again, per last week, the computer doesn't know if it's looking at numbers or characters or images or sounds, you have to tell it as the programmer that the zeros and ones that are somehow involved here underneath the computer's hood are in fact to be treated as text A K A string. Now, there's one stupid subtlety still missing from this line of code. Does anyone know? Especially if you program be OK. All of you programmed before? Yes, semicolon. So one of the headaches of C in a lot of languages is you actually have to finish your thought explicitly. So the computer knows that that line of code is done and it's not a period like in English, it's in fact, a semicolon. Now you don't use these everywhere. We'll see where you use them. But that who is a very common mistake to overlook something simple. But again, in the coming weeks, even though this might look very cryptic with muscle memory and practice, you'll start to see these things instantly. Even if for a few days you sort of bang your head against the, the screen, so to speak, not seeing what um the TFS and I much more readily see. So let's go ahead and do this. Let me go back over to BS code here. Let me zoom in just a little bit and let me go ahead and do this. I'm gonna get rid of my single use of print F and I'm gonna say the exact same thing, string answer equals get string, quote unquote. Uh What's your name? Question mark space, close, quote, semicolon. And now I wanna print out that answer. Well, let me do this incorrectly deliberately for the moment. Let me just say print F quote unquote, hello answer. If I want to plug in answer and I want to add a new line at the end semicolon. So let me try this, but there's multiple mistakes now in my code, let's trip over them deliberately. Let me go down to my terminal window by clicking at the bottom of the screen. Let me run, make hello again, enter and oh my God, there's even more errors now than there were before but not a problem. Let me click on this little triangle here which is just gonna zoom in on the term window. So it takes up my full screen and just generally all you have to do is find a few keywords visually that give you a clue as to what's going on or as before, you can always ask the CS 50 duck. So here's the command I ran. Make hello. Somehow that induced all of these errors. Always read them top to bottom, not bottom up. So from top to bottom, there's a problem on line five character five, use of undeclared identifier string. Did I mean standard in? No, no, no, I didn't there. And then also like two errors generated too many errors remitted. What did I do wrong? Well, it turns out what I do need to do at the top of this file. Let me click the triangle to zoom back out. If I want to use the get string function to get a string, I actually need to include another header file which is probably called, include CS 50 dot H. Technically, any order is fine. I tend to alphabetize because I just know therefore where to look alphabetically for a certain header file. Now that that's in place, let me again, run, make hello, enter and now we're back in business, no error message. So even though you might have more errors than you have code, odds are, it's just, the computer is confused and it could be something simple and an easy fix like that. So just to be clear, standard IO dot H because I'm including it, I can use print F CS 50 dot H I can use get string because the people who invented C and the people who invented CS 50 wrote those two files, so to speak respectively. All right. Unfortunately, even though the program compiles, that doesn't mean it's correct. It just means it's syntactically valid. It's valid C code. If I go ahead and run dot slash, hello and hit enter, now I'm going to be prompted for my name. So I'll type it DAV ID and notice there's a space to the right of the question mark as promised enter, but it just says hello, answer, which of course is not the intent I wanted to say hello, David. So how can we do this? Well, in scratch, it took a couple of puzzle pieces but it was pretty straightforward. If I wanted to say the combination of two phrases, hello and something else, I joined those two and then pass that output to the input of say in C, it's gonna be a little different here just because it's an old language. And this is how it's done. Still use print F because that's the same thing as say, I got my parentheses. I got my semicolon. Good to go. But inside of that, this is where print F is different. You want, if you want to say something followed by something else in the world of C, you tend to use placeholders. So you don't just join things together as we will do in Python and other languages you say to the program, you say to the compiler, give me the word hello comma and then something else. And the percent S means put another string here. It's sort of like leaving a placeholder in your code or a template where you'll actually plug in some values. Now, if this is what I want to display, I still use my quotes as before and I might in fact have a backslash N if I want to move the cursor to the next line. But this is where print F is a little different. Unlike say, unlike uh unlike say, which took one input, print F is kind of like join, it can take two or more inputs. If you so choose, you just have to separate them with a comma. So much like the join block has two ovals here that are initially white, apple and banana until we dragged and dropped. Answer on top of it, print F and really any function in C if you want to pass in multiple inputs, that's fine. If they're supported, just separate them with commas. There's no multiple parentheses, there's no multiple ovals, just separate them with commas. And now notice a potential point of confusion. What's different about this comma and this one just instinctively sort of minor detail but important. Yeah. So one is inside, one is outside. So the one that's inside the quotes is literally the English grammatical comma that you want the human to see. The one out here is ac thing that's separating the first input to this function. Print F from the second. Strictly speaking, you don't need a space there. But it's a good practice stylistically to separate your arguments with single spaces just as I've done there. So let me go ahead and now do something with this. Let me go back to my C code here. I'm going to clear my terminal window just to get rid of that distraction. And now I'm going to change answer to percent. S and then outside of the double quotes on line seven, I'm gonna do comma answer and then after it auto saves, I'm gonna go back to my terminal window and just to make another deliberate mistake dot slash hello. Enter. What's your name? David enter? It's still broken but why I still have to recompile it. So again, you just get into the habit when you change your code, you have to recompile. So you get new machine code in the file. Hello. So let's do it again. Make, hello. No errors is good dot slash. Hello. Enter. What's your name again? Dav ID. And now hello comma David. So again, a lot of this is still cryptic but it's going to start to follow patterns like this functions like in math class F of X are written function name parentheses, input comma input comma input however many you have, they're gonna follow these patterns. But notice two on line six and seven. I have finished each of my thoughts with a semicolon. All right. That was a lot all at once. Questions on what we have done conceptually syntactically here or otherwise. Uh Yes, over here. What 100% like say the Yeah, a really good question. If we had something other than a string of text and we had an integer, would you still use? Percent? S no, you would use something else. And indeed percent I is what we're going to use and we're going to actually do that perfect segue to other types that C actually has. So up until now, we've been calling a string of text literally a string. And this is common in many programming languages, including Python and javascript strings in the programming world, just mean text, whether it's zero or more characters thereof. But C does have other data types. Just a few of we dabble with today, but you'll use more over time. We've already seen string for instance, which is indeed a string of text. But let's focus as well on like an integer. As an aside, there's other types too, there's boolean values like true or false. There's chars which are single characters instead of full phrases or sentences. There's doubles and floats which are real numbers, something with a decimal point, the equivalent of fractions. And there's longs which are integers but like longer integers, even bigger integers than you might type by default. So let's focus on an in because so many of compu so many computer programs of course, manipulate numbers in some way. So what can we do with this? Well, if we want to be able to get an integer, lucky enough CS Fifty's library comes not just with get string, but also get in. So that's gonna be a third function we now use and see and we need to know these what we're generally called format code. So that placeholder I called before percent. S is indeed for a string. If we want to place a integer inside of something we're printing to the screen, we are in fact going to use percent I instead. So let's now actually use these building blocks get in and percent I to actually get numbers in some way to sort of solve a problem. Well, what problem could we solve? Let's introduce another concept from scratch and programming more generally known as conditionals like those proverbial forks in the road. If something is true, do this else, maybe do this other thing. So in scratch, we might have had a puzzle of puzzle pieces that look like this. If X is less than Y then say or have the cat say X is less than Y. So it's sort of stupid program. But it just demonstrates if we have, we have two variables X and Y in the context of scratch, we're comparing them with a boolean expression. We're using a conditional to then conditionally say or not say this phrase here. Depending on whether this, this question has the answer of true or false. Yes or no in C doesn't look all that different. It's a little more cryptic. But you say literally if you use parentheses similar to functions. But confusingly by convention, you put a space after the word if so you don't put spaces after function names, you do put spaces after words like if and you use the parentheses to conjure up this weird trapezoidal like shape. So there's no real keys that kind of conjure that. So, c uses parentheses like most languages and then there's these weird curly braces which at least in English, we don't use all that often, but they're there on your keyboard, English or otherwise. And they essentially allow us to create this sort of hugging shape to the puzzle piece. Anything inside of those curly braces is going to be equivalent to anything inside of this yellow hug that's sort of grabbing one or more pieces. So what do we put inside? Well, this part is straightforward print f quote unquote X is less than Y backslash N semicolon. So nothing new here. The only bit of new code is this if construct instead, what if you have an if else? So a two way fork in the road, this is what that looked like in scratch. Same question. If X is less than Y, then say X is less than Y. Else. Say X is not less than Y in C, the code is going to be set up initially like this. So two sets of curly braces to represent this pair of yellow bars and this pair of yellow bars and what's inside of them indented no less just like our pseudo code last week is two print FSX is less than YX is not less than Y. So that's it. So the only new stuff here really is now the ELTS keyword which does not need parentheses because you're just saying ELT do this other thing. But what if it's a three way fork in the road and we'll stop after that. Here's a three wave fork in the road in scratch. If X is less than Y, then say this. E, if X is greater than Y, say this, if X equals Y, then say this. So this is a little more precise because now we're handling equality, not just greater than or the opposite in C, it's gonna look similar to before, but we're adding this element here. And at first glance, especially if you've never programmed before, it looks like I'm an idiot and I made a typo, what looks wrong? There's like two equal signs, like not a typo. So it turns out recall from earlier when we use the equal sign the first time around, we used it in the context of getting a return value back from a function like the get string function handed me back the user's answer. So unfortunately, because humans decades ago decided, hey, let's use the equal sign to assign a return value from the right hand side of a line of code to the left hand side, we sort of painted ourselves into a corner and like, oh shoot, what do we do when we actually want to test for equality of two values on the left and right. So what most languages including C do is use double equal signs so you can say double equals or equals equals or whatever. But it is in fact, syntactically correct what's inside of these three sets of curly braces, same idea, print F, print F, print F based on what English phrase you want to print out. So this code both in scratch and C I'll claim is correct. It won't run because we still need like the other stuff. The, the equivalent of the when green flag clicked but out of context, this code is correct. But there's a subtle weakness in design and we'll talk a lot about this this week and beyond correctness just means the code does. What it's supposed to do. Design is more subjective. Like how well have you wri written your argument in an English paper? How well have you written? Your code is designed? This code is not designed as well as it could be because I'm doing more work than I need to. Yeah and back. Yeah, I don't need the X equals equals Y. But why logically effect is more in the, exactly. That's just a math thing. Like either X is less than Y or it's greater than Y or the third and final option is they must be equal. So it's subtle. But why would you bother wasting time writing a line of code and expecting the computer to run a line of code that is just going to answer a question that logically you could have concluded already because if X is not less than Y and X is not greater than Y, then my God just print out X is equal to Y because, you know, at that point, logically, it's true. You don't need to waste your time or the computers asking a third question unnecessarily in the, in reality, it's not a huge deal. No one's going to notice in the real world on a Mac or PC that there's this extra line of code, but it's a bad habit. Keep it simple. Don't write code that doesn't to be there if logically, you can conclude otherwise. So in fact, let's clean this up both in scratch and see I can tighten this up, so to speak, use less code here. It's less code here. And honestly, if only statistically the less code I write, the less likely I am going to make mistakes. So that too is probably a net positive. Overall, the less writing less code is generally better than writing more code. Not unlike English essays too, perhaps. All right questions about this feature of C conditionals and this syntax. Yeah, I don't. Yes. Oh, a really good question and yes, jumping the gun. There are alternative ways to solve problems like these. And the question was to summarize when to, when to use, if Eltielt versus what's called a switch statement more on those another time, but this is gonna be true in general in programming, not just c, not just in scratch. But every language there are going to be several dozens, hundreds and infinite number of ways to solve problems among the things we're going to teach you though is indeed how to do things well or better than you might otherwise. And we're gonna introduce you eventually to another feature of the language that can even simplify this code too. So for now, let's actually use this then. So let me go over to VS code again. I'm gonna go ahead now and clear my terminal window. Uh down here, I'm gonna go ahead and close the hello dot C tab just so that we're gonna create a new program. And let's just do something a little simple using some operator, so to speak. And I haven't used this word by name, but it turns out that there's lots of operators that come with C just like a lot of operators that came with scratch for doing assignment or less than, or less than, or equal to greater than greater than, or equal to actually equal to, not equal to. Now, some of these are a little cryptic but there's no easily found key on your US English keyboard, at least where you can do less than or equals or greater than or equal. So what most programming languages do is you don't use a special symbol where there's like a uh an angle bracket and then a line below it, you actually just use two character. So greater than or equal is literally this, this less than or equal is literally this, this we already saw that equals is this this and not equals is to use an exclamation point. So this too is a thing in programming using the ex exclamation point. Pronounced Bang is how you invert logically certain things. So Bang equals or not equals is how you would express exactly that idea. It's just a symbol, the keyboard that some human decided. Let's use this one to invert the idea. But we're going to need one other thing for this program specifically variables which we've used already sort of because in scratch, we got one for free, we had that answer variable that stored the return value of the ask block. But let's consider in general how you can and probably did for problems at zero, use a variable of your own like keeping track of a counter or score or the like scratch. If you want to create a variable called counter, you can set it equal to some initial value like zero in C. That code is going to look similar. You literally just write whatever name you want to give the variable, then an equal sign and then the value you want to give that variable. And because the equal sign is the assignment operator, it will behave essentially right to left and copy the zero into counter. But this isn't enough for C remember that you the programmer have to tell the computer. Is this indeed a number? Is it a letter? Is it an image? Is it a sound? You have to tell the computer that this is an integer otherwise written as in T for short in C. But there's one other stupid detail that's missing, which is now semicolon to finish the thought here. But this then is equivalent to this in S in in scratch. Let's do another in scratch. If you wanted to increment the counter that is add one to it. You could literally use this puzzle piece here and specify you wanna add one in C it's gonna look like this counter equals counter plus one semicolon. Now at a glance, this seems like a paradox of sorts like how can counter equal counter plus one? Like I can't make that math expression true, but it's not math. In this case, the single equal sign is assignment. So this means take the current value of counter, whatever it is, add one to it and then copy that value from right to left into the same variable, thereby changing it from 1 to 22 to 3 and so forth. This though is so common in programming to be able to increment or even decrement numbers by one or two or more is that you can tighten it like this. This is the exact same thing a little faster to type saves you keystrokes, maybe less chance for error counter plus equals one semicolon. Is the exact same idea better. Still, this is so common in C and C++ and Java that there's a third way to do this to my comment earlier about solving problems in different ways. The most canonical, the most popular way is probably just to say counter plus plus semicolon, which literally automatically adds one to that value only works for one. If you want to do two or three or some other increment, you have to use one of the other approaches. But this simply does the same thing as this. And if you want to invert it to negative one, you change the plus plus to a minus minus instead. So again, just little things that we'll see and pick up over time, invariably, you'll have to look them up or check the notes or look back at the lecture slides. But in time, this will get familiar if you are not already uh familiar. So let's consider just logically how we might implement this in code. Let's go back to BS code here and let me propose that we create a program called compare dot C whose purpose in life is just to compare a couple of values. I'm gonna go ahead and proactively based on the previous chats include CS F library from the Gecko. I'm gonna include standard IO dot H from the Get go. So I can use Get in and print F respectively. I'm gonna just on faith type in main void And today we won't explain what that does more on that to come for. Now, just assume it's like when green flag clicked. But in this program, let's do a couple of things. Let's declare an integer called X and assign it the return value of get in and let's just keep it simple. Let's ask the user not what's their name but what's X question mark semicolon now, so that we have something to compare. Let's do it again. But with Y in Y equals get in quote unquote. What's why question mark and I'm leaving again a space just visually. So the cursor nudges over a bit followed by a semicolon at this point in the story, my users will be prompted for X and Y respectively. Let's do something with those values. How about if X is less than Y, then go ahead and print out quote unquote X is less than Y backslash N close quote semicolon. All right. And let me code uh hide my terminal window for just a moment. This is a 13 line program at the moment. But really it's like five or six interesting lines. The rest has been copy pasted from previous programs. Notice a few details. One, I've indeed used my curly braces here and notice a few highlight lines. You'll actually see little dots that can help you make sure. Oh, there are indeed four spaces there. I've been indenting just like we did last week. We pseudo code. Strictly speaking, it's not necessary, but it's gonna be way easier to read your code if you do at all of this white space so to speak, than if you write and then submit to us as homework a program that looks sort of god awful like this, which is to make it much, much harder for the human to read it, for you to read it, your colleagues in the real world to read it. But the computer is actually not gonna care. In fact, as an aside, one of the tools we have built into VS code for CS 50 is this button at top called Style 50. This is a program that we indeed wrote that will give you suggestions on how to improve the style of your code. So it looks like the right way that programmers would generally write it. As an aside, the computer world is fraught with like religious debate, so to speak as to like what code should look like. And people in the real world will have really stupid arguments over how many spaces to use for indentation and what lines code should go on and so forth generally in the real world or in a class, there's an official style guide that someone sort of autocratically dec air this is how everyone should write their code so that just everyone's code in the company or course looks the same, but you'll find in the real world uh reasonable people will disagree. When you click style 50 it will be formatted as we ourselves recommend in CS 50. And in fact, let me zoom out here and this looks a little cryptic at first glance. But on the left is the code that I just wrote and made a mess of by deleting all that whitespace. On the right is the way the code should look if it is well styled. So, whereas correctness is all about, does the code work the way it's supposed to design is about how well have you written that code? Is it efficient? Did you make good decisions? A is purely aesthetic? Is it readable? Does it follow a standard? Can another human sort of easily skim it top to bottom left to right and understand what's going on? So these green highlights are saying please add white space there and so I can actually change my code to match on the left hand side here if I realize, oh, my code is looking pretty ugly watch online six at left as I hit the space bar two oops, sorry. On the left, 1234. Notice that the right hand side is starting to be happier with my code by getting rid of the green indicators and I can do 1234 that fix that over here. I can do 1234, I can move this onto its own line by hitting enter and you know what if it's taking too long. Once you get into the habit of things, you can just apply changes. It will give you the suggestions automatically and we're done and on our way. But for practice's sake, I would get into the habit of doing things manually until it gets boring and tedious. And at which point you might as well automate the process with a single click. All right. So let's actually run this code. I'm gonna go ahead and open my terminal window again and clear it for clarity. I'm gonna run make compare and hope that I didn't make any mistakes. I don't seem to have yet dot slash compare. And now notice I'm prompted for X, let's type one for Y. Let's type two enter and X is less than Y. Let's do a little sanity check, so to speak. Let's rerun it dot slash compare. What's X, let's do two this time one for Y and this time it said nothing. So that's to be expected because I didn't have a two way or a three way fork in the road. The only time this code should say anything is if indeed X is less than Y. So for those of you who might be more visual when it comes to learning, here's a flow chart that represents this same exact program. If you read it top to bottom, you start the program with dot slash compare, you are then prompted for X and Y and you're asked, this is X less than Y. And the fact this is a diamond means this is a boolean expression. A question that the co the computer is asking itself if the answer to that question is true, then quote unquote X is less than Y gets printed and the program stops. Else if X is not less than Y as in the second scenario, the answer is of course false and nothing more happens, But we can build out this tree so to speak by adding a bit more code. So let's make it look like the second scratch example. If I go back here, it's not hard to just say else if X is not less than Y, let's say that X is not less than Y backslash N close quote semicolon. Let me now go ahead and rerun make compare enter dot slash, compare, enter. And again, I'll do the second example two which is bigger and one which is smaller. And this time I will see X is not less than Y if, then we were to look not at this flow chart, but a slightly bigger one, you can sort of visualize it this way. Everything in the left hand side of this picture is the same. But if it's not true that X is less than Y, the answer is thus false. This time we say quote unquote X is not less than Y and we can do this obviously one final time just to bring the point home. If I go back to my code and I even more pedantically compare these three values. Let me go ahead and do this. So Eelts uh hm I don't want an ELTS actually. So let's go ahead and do this ELTS. If X is greater than Y, let's then say X is greater than Y in English. And then finally have an ELTS that says print FX is equal to Y close quote or rather backslash n close quote semicolon. So just to show this all on the screen at once, this is identical now to that scratch version. It's well designed cause I'm not asking the equals equals question unnecessarily. If I go back to my terminal window here, clear the screen run, make compare, enter and then dot slash compare again, enter. What's X? Let's do one, let's do two, X is less than Y. Let's run it again dot slash compare. What's two and one, X is greater than Y once more time dot slash compare. What's X one, what's Y one? And now X is equal to Y. As an aside, if I seem to be typing fairly fast, you can actually kind of cheat with your keyboard. If you go up or down, you can scroll through all of the past commands that you've typed. So it's actually excuse me, very useful. If you just hit up, it'll re it will pre write the previous command for you at which point, you can say enter or there's other fancy features built into this programming environment. If you do dot slash scom and then get kind of bored with typing out the whole English word, you can hit tab for tab completion like in a web browser. And it too will autocomplete if it finds a file that starts with those letters, some little efficiencies here. Questions then on the code here. Yeah, sure. A good question. Is there any downside? You're just putting in all of the libraries like we saw in the manual pages a moment ago performance. So generally speaking C is meant to be a very efficient language so much so that even though it's decades old, still used omnipresent nowadays because it's so fast, it therefore minimizes time, it minimizes energy use. So it's still being used heavily. You would slow things down if you told the compiler, by the way, give me all of these other functions that I'm never going to use. Um So in short, just don't do that because it's unnecessary. But a good question, other questions on what we've done here. Uh Yeah, in front vy, what is it? A YC faster, a YSC faster than other languages? Let me answer that in more detail in week six when you'll see how much easier it is to write code in other languages because someone else is doing a lot of the work for you. So as an introductory course, we're sort of teaching you bottom up, like how you write code, has the computer understand code eventually this kind of stuff. Certainly, after like 56 weeks of this, it's gonna get tedious doing some of these things, we're gonna switch to another language that takes away the tedium and allows us to really focus on the problems to be solved once we've sort of graduated to that point. Yeah. Sure. The, to repeat the keyboard shortcuts, you can just go up, up, up, up, up and that will go through all of your previous commands at which point you can just hit enter or you can use tab completion. So you can start typing a word like code and cod tab will finish the thought or dot slash com tab will finish that thought just to save yourself some keystrokes and clearing the screen is control L which has no functional purpose other than keeping things neat and tidy in class. So a design question. So this code I dare say is correct. Let me zoom in a little bit here. Let me change the code to just do this even though we already saw from scratch that we probably shouldn't do this. Why should we not do this? If especially I'm just more comfortable asking three separate questions. Like if X is less than Y, if X is greater than Y, if X equals Y do this, like it's a nice world to live in. Just ask your questions you don't have to worry about Eltelt. If ELT, if forks in the road, you can just ask three questions. But let's put a finger on. Why is this correct? Yes, but not well designed. Yeah. And back again. So, ok, there could be cases that are potentially outside of these three because this is relatively simple math comparing numbers like we don't have to worry about that here. But yes, in general, you might miss a scenario without using a catch all like elts. Yeah. So maybe more than one of them could be evaluated as true, not gonna happen here. But yes, you could accidentally create a situation where two things print or three things print because you didn't really think about the boundaries among these questions that you're asking again, not applicable here. But in general, a good concern really good. Really what's concerning here in this example is you're slowing the computer down by wasting its time having it do work. That is logically unnecessary even more so than the scratch. And the first c example, why suppose that I type in one for X and one for Y because I wrote this code top to bottom. This question is going to be asked no matter what the answer is going to be false. This question is gonna be asked no matter what the answer is gonna be false. This question is gonna be asked and no matter what the question, the answer is going to be true. We're OK there because we had to ask all three questions. But suppose I did the first thing X is one, Y is two. Then this first question is going to be true because X is less than Y, one is less than two. So this is going to print and yet, then I'm wasting everyone's time asking. Hm Is X greater than Y even though it obviously isn't, is X equal to Y, it obviously isn't. You're adding Twi, you're doing three times as much work. In that particular case, it's just not good design. And again, for those of you who think a little more visually, we can actually make this picture to match. Here is a final flow chart for bad code, bad design. Why? Because no matter what, when you start the program and you want to stop the program, you're going through all three of those darn questions no matter what. Whereas the previous flow charts got us to the stop bubble faster by taking alternative arrows based on true or false answers. So in short, still correct but bad design. And so again, even for problems at one, when we start writing C code, consider not just getting the job done but how you might get the job done better uh than you might otherwise. All right, let's add a few other features into the mix. Um Here we have those same data types that are supported by C let's focus for a moment on something a little simpler. Just chars single characters, unfortunately, for better or for worse than c the language makes a distinction between strings of text which are generally words, phrases. Um They can uh uh confusingly be single characters or even zero characters if you don't type anything in between the quotes, but more on that another time. But when you know from the get go that you only want to get a, a single character back from the user like Y for yes and for no, for instance, which is super common in programs, you can get that using a char and CS fifty's own function. Get char. So how might we use this? Well, let's go back to the, this code here. I'm gonna close compare dot C and let's write a third program altogether. Let's call this one agree dot C and this is meant to represent like terms and conditions where you have to check a box, yes or no or something like that in this program. I'm gonna go ahead and do the following. I'm gonna go ahead and as before include CS 50 dot H. So we've got it include standard IO dot H so that we've got it in main void because we have to do that for now, more on that another time. And now let's ask the user a question. Do they agree? So I'm gonna call get char and then pass in a prompt of, do you agree question mark with the space semicolon. But as before with get string and get in those functions, return a value. So I want to assign that value from right to left to a variable which I could call answer again. But honestly, this program is so short, I'm just going to use the letter C which is conventional. So C for char I for in or N for number are very common. But one more thing what's still missing for my variable here, the type I need to say this shall be a char, not an inch, not a string, a single char. All right. Now, what do I want to do? I can ask a question if C equals equals lowercase Y, then go ahead and print out just so we see something on the screen agreed period backslash N as though they agreed to the terms and conditions else if C equals equals lowercase N, go ahead and print out for instance, not agreed just so we see something on the screen. So let me hide my terminal window and focus on the code. There's a couple of details here that are a little interesting. So one, what did I do online? Seven and 11? That is not consistent with what I've done before. Subtle. So I'm using apostrophes or single quotes now instead of double quotes. Why? It's ac thing when you're using strings, you use double quotes. When you use single chars, you use single quotes. So the argument to get char that's still a string, it's a whole sentence that I'm passing in. So that is just like get in just like get string. But when I get the answer back the return value and put it in this variable and I want to check, what is that one char I have to surround the char I'm comparing against in single quotes or apostrophes both through the Y and for the N. So this program is not super well designed because it's not going to handle upper case. It's not going to handle weird inputs very well. But let me open my chart window. Make agree, enter the code compiles. OK? Dot slash agree. Do I agree? Let's try it. Y for yes. OK. Let's try it again dot slash agree. N for no, not agreed. Let's do it one more time. Let's very enthusiastically say yes in all caps. And it just kind of ignores me. But why? Well, this is a feature of CS fifty's get char function. If you tell us, you want to get a char, we're not going to tolerate a whole string of text from the user. We're gonna te uh prompt them again and again and again until they give us just one char. So what yes is three times too long. So let's actually just do a single capital Y and see what happens. Return the program ignores me altogether. So, all right, this is kind of a poorly designed program. It's a little annoying that we'll just ignore humans even if they type in Y or N that just happens to be uppercase. So let's improve this. Let me go ahead and add a couple more conditions else if C equals equals uppercase Y, then go ahead and print out agreed, same as before and then down here else if C equals equals capital and then let's go ahead and print out again, not agreed. So this is now more correct. It's still going to ignore bogus input. That makes no sense if it's just like the word, uh if it's a different letter altogether, but this two code while more correct in some sense is still poorly designed. Even if you've never programmed before, what rubs you the wrong way about this code now be critical. Yeah, uppercase and lowercase Y together. Yeah. It'd be nice to just merge the lower case and the uppercase Y together. The same thing for the lower case and the upper case N why? If only because like literally lines nine and 12 are identical, lines 17 and 21 are identical. And while not a huge deal, you know, if I go in and I change this sentence, odds are over the course of my lifetime program, I mean, I'm gonna forget to change this one even though I change this one or I'm gonna forget to change this one and this one. So you don't want the code to get out of sync potentially. And you certainly don't want to repeat yourself. So don't repeat yourself as a tenant of programming too. If you can avoid that by somehow factoring out some commonality, you should do so similar in spirit to math when you factor out variables or the like. So let me tighten this up, so to speak. Let me get rid of what we just did so that it's a little shorter as before. And let me express myself with two conditions using the following syntax. I want to check if C equals equals lowercase Y or C equals equals uppercase Y. So you can actually use what's called a logical operator, two vertical bars which means or, and oh and we can do this down here or C equals equals capital N. So same exact functionality. But to your point, we've now eliminated what like another one, it was like what? 14, it's like eight lines of code now are gone, which is eight fewer lines that I might screw up in this program. Few le less opportunity for mistakes or bugs. Probably a good thing. So now if I run this, let me open my terminal window, let me run, make agree, enter dot slash, agree, enter. Do I agree? Capital Y now? It seems to be handling both of those situations. So just a little tighter as an aside, we won't use it here. But if you want to say and which would be nonsensical. It a little confusingly, two Ampersands means a logical and whereby the left thing has to be true and the right thing has to be true. So it's two bullying expressions at once. This one makes no logical sense though because the character cannot be simultaneously lowercase and uppercase. It's got to be one or the other. So two vertical bars is logically correct. That represents our notion here of or question. No. Yeah, you could not write or so I'm saying or just because that's a little more normal, but this is incorrect. However, sneak preview in the language of Python, you actually will literally say or among other things which gets a little more user friendly. Other questions on this here. Other questions and back. No. All uh where's the hand searching? Yes and back. Is there an easier way to handle case sensitivity? Yes. And we'll show you that next week, in fact, so we can combine this code to be even tighter. All right, let's do one final set of examples before taking a, a cookie break if we could. But let's go ahead and close. Agree dot C here. Let me open my terminal window and let's go ahead and implement a sort of uh virtual ca as we did last week. I'm gonna code up a file called cat dot C and I'm gonna implement this in a few different ways. The first of them pretty foolish. So here I'm gonna include standard IO dot H No need for CS 50 dot Yet. Uh uh Just yet in main void inside of these curly braces. Let's go ahead and do print f meow to get the cat to meow and then to save time, I'm gonna copy paste that two more times. So this cat shall meow three times in total. All right, I'm gonna go ahead and make the cat so to speak. All good dot slash cat enter and it meows three times just like our scratch cat. Last time, I'll stipulate this is correct. This is a really well implemented cat correctness wise. But why is it bad design intuitively just like last week? Sorry, I, sorry. So uh I keep repeating the code. I mean, I literally copied and pasted, which is sort of your first obvious sign. I'm probably doing something wrong if I'm copying and pasting because I'm literally repeating myself. So to spoil it like odds are a loop is probably gonna be our friends here. And so, in fact, in, in C, we have those uh features as well. So in the world of C, we can implement some of last week's same ideas in a few, two different ways. These are a little more mechanical, but suppose we want to repeat something literally three times. Scratch, gives us a repeat block with an input. So easy C and a lot of languages. It's going to be a little more mechanical and it's going to look ugly. At first, it will take some getting used to, but it is a paradigm you will use again and again and again, this will become very rote memory before long. Here is how we might do this in code with the lines of code on the screen are how you would implement the single yellow puzzle piece here in C. So there's a lot more work going on. But why? Well, in C we've got variables, we've got operators so we can do things like counting math incrementing, decrementing. So to implement the idea of repeating something three times, we need to do the equivalent of like all right, start with three, print something, then we have two print thing, then we have one print something all done. When we get to zero, we just need to very pedantically count from like three on down or from zero on up. So here are some lines of code. Give me a variable called I I for integer, but we can call it anything we want, set it equal to three. We've seen code like that before. We haven't seen a wild loop before, but just like the, the um the um preposition implies while I is greater than zero, do this thing. What thing, the thing in between curly braces. And this is fortunately a typo because I changed one thing but not the other. So let me remind and pretend that never happened. OK. Didn't see that. Let me start this over real fast. So first line we have in I equals three, which is a variable, assign the value of three from right to left. We've seen that before. What is new is this preposition while, which is saying while I is greater than zero, do the following and the following is what's inside of these curly braces and at the end of the curly braces, but still inside we're doing I minus minus which just subtracts one from I. So I sort of have the framework here for starting at three, going to two, going to one and hopefully going to zero at which point this boolean expression, which is part of the Y loop, not just ifs and ifs and S kicks into. So what am I gonna do inside of these curly bra? Oh Damn it. Uh What am I gonna do inside of these curly braces spoiler? OK. So, so what am I gonna do inside of these curly braces? I wanna actually go ahead and print out meow, but just once and I'm gonna let the loop handle the mechanics of doing it again and again. So how do we actually implement this then in code and get it running? Well, it's gonna be pretty much the same idea. Let me go back to VS code here. I'm gonna get rid of all of this copy paste and inside of my main function. I'm gonna do exactly what we saw in I equals three semicolon while I is greater than zero, then go ahead and print out with print F meow backslash N and then be sure you decrement I and notice that lines eight and nine are not only indented, they are inside of that Y loop, so to speak, which means they will both happen again and again and again. Because what's happening in code here is those curly braces are kind of like the yellow pieces that are hugging the, the um the other puzzle pieces in scratch. It will keep doing this, this this but every time through that loop or cycle, this boolean expression will be checked again and again and again, until the answer is false. At which point, the computer is gonna jump to the last line. And if there's nothing left, that's it for the program no more to be done. So same exact idea in scratch, even though it's a little more mechanical. So that's how we might implement this. And you can think of it sort of these variables. This is perhaps a little gratuitous, but let's do this. So if you have a variable inside of a computer's memory and that's the detail we'll get to in more detail before long, you can really think of it just as like a container that stores value. So for instance, this clear plastic bowl can be thought of as a variable, it just stores values. And right now there's obviously three stress balls in it. So it represents the number three. So what's really happening in code like this is we've initialized I to three, which is this ball. We're then checking the question on line six is I greater than zero obviously. So we proceed inside of the curly braces and we print out meow, we then decrement I So for the sake of unnecessary drama like that's decrementing the variable. So what's being stored in this this container now is one less. We do it again. Check the count. Nope two is greater than zero. So keep going. Now decrement, I check the variable one is greater than zero. So we print me decrement. I, we check the condition again, I is not greater than zero because zero is not greater than zero. And so the rest of the code stops executing. I'm not sure if that was any more effective than fingers on my hand, but we had the ball, we had the ball. So same exact idea variables are just storing some value in and decrementing would just be adding or subtracting stress balls in this case. But there's other ways we could do this. In fact, let me zoom in on my code here. And it's not really conventional in programming to count down like nothing wrong with it. It's just not really a thing we would typically count up. So we could alternatively do this set I equal to one initially. So we count 1 to 3 like a normal person and we can change our condition if I'm gonna count from 1 to 3. What should my comparison be in my boolean expression? Here, I is less than three, less than, or equal to three, I think. So, if I is initialized to one, we're going to go through this one time two times, three times, I is gonna eventually get incremented to four. But at that 0.4 is not less than or equal to three. So it's only gonna execute a total of three times, but there's still a bug in this code. What other line needs to change? Yeah, so line nine needs to become plus plus. So this code is just as correct and honestly, you could reasonable people will disagree. Your TF might say do it this way and not this way. But like this is still correct, but it's not the most conventional way as per last week, computer scientists and programmers generally actually start counting from zero by convention for reasons we'll soon see. So the better way, the more conventional way arguably would be always start counting from zero, count up to but not through the number you care about. And so this form of the code is probably the most popular way to do it. Start at zero, count up to three, but not through three as with less than or equals. Then all three are correct. Can't really do counting up as easily with the ball without picking up the balls. But the exact same logic applies. And in fact, this version of the code is so commonly done that there's a different way to implement it all. There's a similar way to implement it all together. In fact, this code here, same exact thing repeating three times because it's so commonly done that you want to initialize something to zero and keep doing something until like the value three, you can actually use a different preposition four, which is another keyword in C and it looks a little more cryptic, but it just tightens things up. This ex, this is what's called a four loop previous is what's called a wild loop. And honestly, even though it probably to the newbie still looks just as cryptic, it's just a little tighter because you're expressing all of these ideas on one line. You specify the variable you want to create and initialize, you specify the Boolean expression, you want to check again and again, you specify what increments or decrements you want to happen. And confusingly, you do use semicolons here, not commas, you do not put a semicolon here. You of course, don't put them after these, you generally only put them after functions thus far. So we do have ac one semicolon here. But in short, this, you'll get more comfortable with. This is how I, for instance, almost always write a loop, but it's doing the exact same thing mechanically as this same thing is counting on your fingers, same thing as counting the stress balls. There's just different ways to express the exact same idea, but there are ways to screw up. So, in fact, let me go ahead and do this, suppose that the cat, we'd like the cat to live as long as, as possible and we don't want it to stop meowing after just three or finite number of times. how can you do something forever? Again and again and again. Well, let me go back into VS code here. Let me delete all of the code from earlier and let me go ahead and say while something is true, I'll come back to that. Let's just go ahead and print out meow backslash n ideally forever. But what do I want to put in here? Well, if I want to do something forever, I could do something kind of stupid like while one is less than two, which is always gonna be the case or while 50 is less than 51 which is always gonna be, I could just ask an arbitrary question but like arbitrary, not good in general, like you should have meaning behind your code. So if you want the expression to be true all of the time, just say while true because true is not changing anytime soon. If it's literally true, it's always gonna be true. The only caveat is to use this trick for now, you will need to include the CS 50 library, which for today's purposes makes that possible. But there's a problem, of course, if the cat's gonna live forever, if I do make cat dot slash C enter, like you can very quickly lose control over your terminal window and you can see like the meows are flying across the screen, at least based on the bottom from what we're seeing like, this cat will never stop meowing and this is either a feature or a bug, so to speak, depending on how long the cat here should live virtually. But how do you terminate a program that is out of control like this infinitely. So one of the takeaways for today is uh control C is your friend for cancel or interrupt the program. If you ever sort of lose control over program because you've got intentionally or unintentionally an infinite loop, you can go into your terminal window, hit control C sometimes multiple times if it's ignoring you and that will break out of the program and just essentially force quit it like in Macs or P CS. But let's make one improvement here. Still the last thing we did with our cat in scratch before now we'll take a break in a moment was we defined our own functions and recall that we did that to abstract away the idea of meowing because scratch didn't come with a meow piece. C definitely does not come with a meow function. We have to implement it ourselves so quickly. Toward the end of week zero, we did this define a function called meow that just plays the meow sound. And now we have a meow puzzle piece we can use and reuse in C we're about to do this and this is going to look a little cryptic, but it's going to lay the foundation for future weeks when we do this even more. I've got a mea function. Weird mentions of void that just means there's no input and there's no output for this function. It just does one thing simply and that one thing is print F meow. So how do I use this here? Code here in scratch is how we used it last week when the green flag is clicked, repeat three times the meow function in C it's going to look like this. It made void and all of that and I can use a four loop A Y loop, I'm copying and pasting the four loop version of the code set. I equal to zero. Make sure it stays below three incremented on each iteration or cycle and just call me out. So what's nice here is that we have fairly simply A and C to create our own functions called meow or anything else that lines up perfectly with what we did in scratch will take some time to get comfy with the syntax and remember it have to look it up frequently for reference but let's go ahead and actually do this. If I go back to VS code, clear my screen. Uh Let me hide my terminal window temporarily. Let me go ahead and invent this mea function um per the code earlier. I'm gonna go ahead and do this uh void uh mea void. And again, the two voids mean no input, no output. It just does one thing well, print f quote unquote uh meow backslash N. And now down here, I can use a four loop. So four and I know this from memory in I equals zero, I less than three I plus plus. And then inside of curly braces, I'm gonna go ahead and call the meow function. Notice when I'm creating the function up here, I explicitly pedantically say void, void, no input, no output. When I use the function on line 13, you just say open parenthesis, close parenthesis. That's the equivalent of a scratch puzzle piece without a white oval. You just put nothing there. You don't put the word void. So that's it. Let me open my terminal window, let me run, make cat to rerun or to recompile dot slash cat. And I think I have a working cat. Now, this is correct. The only thing I don't love about this version if I hide my terminal window is that when I start writing bigger and bigger programs, it'd be nice if my main function, which I told uh told you to sort of take on faith for today is at the top of the file. If only because like literally the name main means this is the main part of my program. It'd be nice if it's the first thing I see, which is to say just to be pedantic, it's very common to put any functions you write at the bottom of your file, maybe alphabetically, maybe organized some other way. But you put main first by convention just like the, when the green flag clicked, it was the first thing you always started with last week. But watch what happens now if I go into my terminal window and command or control J is hiding and showing it if you are curious, but probably you'll just leave it open on your own all the time. Let me do. Make cat again. And huh, I've screwed up somehow. All I did was move the meow function from top to bottom and I'm getting called to undeclared function. Meow something, something, something. Well, what's going on? Well, C is pretty naive and simplistic. It's only gonna do what you tell it to do and it's only gonna do things top to bottom left to right. And unfortunately, on line eight, you are telling C call a function called meow. But that does not exist in CS F's header file that does not exist in standard I OS header file. It exists at the bottom of my file at which point it's too late because I'm trying to use it before it exists. So I could just undo that and put this meal function at the top of the file. But you're gonna eventually get into a perverse scenario where you can't put all of your functions above all of your functions. Like you gotta pick a lane at some point. So the solution to this, albeit a little weird and the one time in CS 50 programming that it is encouraged and necessary to copy paste is what you can do at the top of your code. Be above. Main is just copy paste. The first line of your own function. This is the so-called prototype of the function and it simply describes how to use the function. And funny enough, we actually saw this earlier, but I sort of uh I kind of um swept it under the rug a moment ago or a bit ago when we looked at standard IO dot H and we looked at the print F function in the manual pages. I highlighted the header file. But I also glossed over the so called prototype, which is sorry, the first line of the print F function just as this is the first line of my meow function. This is like a little clue. This is like saying to see, hey, there's going to be a function called meow that takes no input has no, it takes uh no input has no output. Just know that it exists eventually. And that will satisfy the compiler. Because if I go back to my terminal rerun, make cat, it now knows on faith per line four, this function will eventually exist. And indeed, once it gets to the bottom of my code line 14 onward, there it in fact is so you just copy the one and only first line of your functions code to the top called the prototype. And now if I do dot slash C I get finally meow meow meow. Yet again, in this case, questions on these here, cats. No. All right. Then the la last flourish before I keep promising cookies and I promise they exist. So last flourish, like just as we did in scratch. So in scratch recall that we parameterized our meow function by letting us tell meow how many times to meow so that we didn't need to use our loop inside of our when green flag clicked block. In other words, if I want to actually have the cat meow, a specific number of times, I can actually go ahead and do that proac with some of my own code such as this here in scratch. When I edited my meal function last week in scratch, I specified that I want it now to take an input called N which represents some number of times. And I changed my repeat block not to be three perpetually, but to actually have N generally baked in there instead. Or actually, instead of just saying play on meow, I had a repeat block using N as the placeholder instead of a hard coded three. So how can I now use this in C in C? It's almost the same, it's still void at the beginning of my function name, which means no output still, it only has side effects. But what did change vis a vis the previous version of mea what has changed exactly? Instead of saying void a second time in parentheses, it literally says in N inside of those parentheses, which means in C this function called meow takes input. It means the exact same thing as the pink on the left. And again, this is why we keep emphasizing the scratch box, like no new ideas with a lot of these features. It's just different syntax that you'll get used to over time. So if I go back into VS code here and I change this function, let's do that. Let's change my prototype to be in to N where N represents some number of times, let's change the actual function on line 14 to also have in N here. And let's actually move the four loop from main into the meal function such that I now have my curly braces here. I have my print statement inside of those curly braces. And now in Maine, I can get rid of all of that code. Just say meow any number of times like three and just like I did with scratch, let me hit, enter an arbitrary number of times, sort of out of sight, out of mind. Now, the essence of my program is like one real line of code meow three times because I've abstracted away the idea of meowing and told the cats instead exactly how many times to meow by way of that function. OK? I can't keep string along cookies so long. Let's go ahead and take a 10 minute break here. And when we come back, more cats, more code. All right. So we are back and wanna add one final flourish to this program because now more so than a lot of the examples like now, the programs are starting to grow in length and indeed soon there'll be a few dozen lines of code which is not uncommon. But let's suppose that we want to start stop hard coding three everywhere and actually prompt the user for some number of meows here. Well, let me do this nvs code. I'm gonna go ahead and get rid of this one line for now. And let's do something like this. Let's ask the user uh for an integer. So in maybe N for number equals get in and we'll say something like just number to give a number of meows. And then we'll go ahead and actually call meow passing in not three this time, but passing in N. So we are using the return value of get in to store it in a variable called N line eight. And then we are passing in as the input or argument to the function called meow line nine. And again, the actual implementation of mea on line 22 onward, like who cares out of sight out of mind? Once it exists, we can sort of abstract it away mentally, but I'll keep it up tight here anyway. All right. So let me go ahead and open my terminal window. Make cat dot slash cat number. I can still type in three and it works or I can go ahead and type in five meow me out now. But hmm it's not actually meowing five times why I didn't realize this either, but there's a bug. Yeah, exactly. So the four loop when I copy, pasted it before, before break, I actually kind of got lazy and I forgot to change the three to an N so that it matches the name of the argument that's being passed into meow. So that was a bug unintentional on my part, but we have now fixed it here and now we are passing this in from Maine to meow. So if I make cat dot slash cat and type five this time, I indeed get five meows. But it's worth noting there's some subtleties here in my code in that I've used N a couple of times. So this is actually deliberate that I've used N twice in this way to induce a bit of confusion, but it turns out this n it's actually not the same as this N um nor this one. So what's going on here? Well, it turns out in programming, there's often this idea of scope and long story short, generally speaking, variables only exist in the scope in which you create them. More down to earth variables only exist inside of the curly braces in which you define them. So for instance, suppose I got a little sloppy and suppose I didn't bother giving me meow an input and I didn't bother giving its prototype and input. And I just used N on line 14 because why? Well, I already defined N on line eight. So this is just an alternate alternate universe in which I'm not changing now to take input. I'm just using N in two different functions in main line eight and nine. Actually, I don't even need that on online eight and nine. And also again on line 14, this code will not work like the compiler will not like this. Why? Because N does not exist inside of meow. Why per the heuristic I offered N exists only inside of the curly braces in which it was defined, namely these curly braces here. So N is in scope in Maine, so to speak, but it is not in scope in meow. And that's why we kind of have to jump through these hoops and use inputs and outputs inputs and outputs. And pass things around among functions without sort of sharing things across functions instead. Now I could clarify this and maybe change my argument here from N to like times if I want to make clear that, oh, this is the number of times I want me to be said, I don't have to use N for both, but just realize that if you do, it's just a coincidence, they are not usable in two different scopes. All right, let's do one other thing though. Let's not keep, uh let's not only prompt the user for the number here, let's make sure that it makes sense what number they give us. So if I do make cat just to clean things up dot slash cat, suppose I type zero. OK? I, I suppose that's correct. If I say meow zero times and it doesn't meow at all. That's arguably correct. But if I type in something like negative five, it ignores me, which I guess is better than crashing or freezing or something. But like, ideally, it might be nice to handle the situation. And if they give me a negative number, prompt them again for a positive number, prompt them again for a positive number, like make the program make sense. So how could we do that? Well, a couple of ways, if I go back into my code here, I could do this, I could maybe do something like a, a loop may or let's see. So if I get N so if N is less than one, then it makes no sense. So what do I want to do? If N is less than one? Well, I could just prompt the user again. And I say, OK, let's get N again. And then I can say if N is less than one, what do I want to do? I guess we could ask the user again. And then if N is less than one like it just again, like I can give them like three tries, four tries to get this right. Like this is obviously stupid. Like I'm copying and pasting, I'm repeating myself. There's no end in sight like I can't do this forever surely. So this just feels like the wrong solution. So there are different ways to solve this problem. And funny enough like a wild loop is not really the best way a do while loop is a God damn it. A Y loop is not the best way. A full loop is not the best way it turns out there's one other type of loop that we want to introduce, that's super useful for getting user input potentially again and again and again, so that the user cooperates specifically. What I'm gonna do is this, I'm gonna literally say do the following while something is true. So it's more of a mouthful. It's I'm spreading it out over multiple lines. But what am I gonna put inside of the do block? Here, I'm gonna say in N equals get in and ask for that number as before close quote semicolon. And I'm gonna keep asking while sorry, accidental enter while N is less than one semicolon. So notice the semantics of this, even though it's a little weird looking, it does read in English. Do the following. OK? Get in in stored in N and keep doing that while N is less than one. But this code as written is not quite going to work yet. Let me try opening my terminal window. Make C enter. Oh damn. It like use of undeclared identifier. N Well, here's where the line number is helpful. The line number is indicated here 12 and it's repeated here 12. So I clearly screwed up at line 12. There's not that much going on at line 12. Why is N undeclared in line 12 even though I literally just declared it in line 10? Exactly because I declared N inside the scope of the dew block, so to speak inside the curly braces on lines nine and 11, that variable N no longer exists. By the time we get to line 12, it'd be great if it did, but it doesn't because it violates that heuristic I propose, which is that variables only exist in the scope of the curly braces in which they were defined. So how do I fix this? Well, it turns out you can declare a variable in advance outside of one scope, but then define it that is initialize it elsewhere. So the solution here is actually this inside of the loop, just set N equal to the return value of get N. But per the heuristic, you've got to declare N make it exist inside of the outermost scope of this function. So it's a little weird and we're kind of breaking this down into two steps, but this is valid recommended, correct C code, you declare a variable without giving it any value initially. And then in line 11, you proceed to give it a value potentially again and again and again, now what's useful about a dow loop? So a dow loop as the name implies, we'll do something no matter what, but it will potentially do it again and again and again, while some question is true, like N being less than one in this case. All right. As an aside, why did we not do a while loop? Well, let's think about that while N is less than one, but wait a minute, N doesn't have a value. OK. So I guess we have to go back to doing, get in number colon, semicolon. OK? But while N is less than one, we're back to the same problem where we have to like repeat ourselves again. So this is why four loops while loops, not the right solution when you want to do something at least once but potentially again and again. So the right solution here again is this new and final looping construct? I'm just hitting control Z a lot whereby we've done it as follows. All right, let's try this clear. The screen. Make cat enter dot slash cat. Let's type in five. Still works. Let's type in negative five and notice it doesn't just ignore me. It prompts me again and again and again, even if I type in zero, I've got to at least give it a positive integer. Well, this actually seems like kind of a common paradigm. Like what if we want to prompt the user for a positive number in other programs too? You know, we're nearing the point already. Even after just week one, it would be nice to like write our own reusable functions that solve common problems and eventually men eventually maybe we can put them in header files as well. But for now let's go ahead and do this. I'm gonna actually copy all of this code and I'm going to create one more function in this file below main called get positive in for integer. And I'm gonna specify that it doesn't need any inputs because the only thing this function is going to do is that exact same thing. So notice that I've just moved my code for main into a function that's name describes what it does get positive in. I'm declaring N here, I'm doing this again and again, and I'm doing that while N is less than one and what am I gonna do up here? I can do something like this. Give me a variable called times for how many times you want to meow and just call, get positive in some call in. So now again, we've abstracted things away and just like in scratch, our final example, which we're called, looked a little something like this where we just called a function to meow three times. Now we're calling a function to get text. If I hit enter an arbitrary dramatic number of times out of sight out of mind, I now have two functions in this world. Get positive in and meow that are collectively implementing this entire program, but it's not quite correct. There's one mistake here still notice that get positive in is written slightly differently from the mea function. And just to be clear too, let me copy its prototype to the top of the file just so we don't make that same mistake I made earlier where I didn't put the prototype at top. So she didn't know what it was. What is different about these two prototypes at a glance. Yeah, get positive. OK. So get positive. And apparently, and we've not talked much about this apparently does have an output of type integer, it's supposed to return and it hand me back an in, it doesn't have any input. That's what the void in parentheses meant. No input but yes, output and meow funny enough is the opposite. Yes input no output. Why? Because it has a side effect, the visual thing where it prints something to the screen but doesn't hand me any useful value back like the ask function or the ask puzzle piece did. So these are sort of opposite in functionality which means I actually need to return an integer from this function to whatever function wants to use it. So if I want the assignment operator to work here on my nine, I need to do what all this time get in to get string. And other CS 50 functions have been doing. I need to in my own function return that value literally with a new keyword called return. And this is why I keep sticking out my hand when you want a function to like hand you back a value, you literally use return and then that value, that's why we have return value as a term of art. Literally this return keyword. So if I open my terminal window now make cat enter. Huh I did screw up accidentally. How? Yeah. Yeah. So on lines nine and 10, I made a quick change. I changed my variable to times, but I stupidly didn't change this. So that's fine. That's why N was undeclared in that context. Let me clear my terminal make cat once more. OK? That worked dot slash cat. Let's type in five and it's still working. So again, even though the code feels like it's oh sorry, even though the code is kind of growing and growing and growing, it's the exact same program we wrote super simply before break. But now we're sort of modular it, we're creating reusable functions. And this is why functions like get string, exists, get into exist like CS 50 wrote those years ago. And we realized why are we copying and pasting these functions in all of these different CS 50 programs? Let's factor out that functionality into a function of our own get in get string. Just like here, I'm proposing to factor out this functionality, get a positive integer that gives you even more precise functionality. So theoretically you could use and reuse it in other programs too by not even just putting it here, we could go put it in a file of your own name and include it in future programs as well. Like that's all a library is someone realized, geez other people including myself might find this function useful again and again, let's package it up and our own custom functions just like our custom ya puzzle piece last week. So we can indeed use it again and again. And the takeaways for now is that unlike scratch, which was a little more user friendly. In C you have to specify if you want your functions to have inputs and you must specify if you want them to have outputs as well, but more on that syntax to come. So where does that bring us So after all this discussion of code, like at the end of the day, like this is what's important in the world of programming. Um Not surprisingly, it's like what's important when it comes to grading and evaluating the quality of code. One and first and foremost is correctness. Like if the code does not do what it's supposed to do, what was the point of writing the code? So correctness sort of goes without saying design again is much more qualitative. It's like getting feedback again on an English essay where reasonable people might disagree. You can make your argument better, you can structure the paper better, you can structure the code better. In the case of programming and style is purely aesthetic. Does it look good? Is it pretty printed, so to speak? Can other people, colleagues, future and classmates present actually read and understand it? That's what we mean by style nicely enough within the CS F programming environment, you will have tools to evaluate the quality of all three of these axes, so to speak. So in problem set one onward, you'll be introduced to a command line tool that you type its name at the prompt called check 50 that will check for you. The correctness of your code not necessarily exhaustively like there might be mistakes you've made that we don't catch, which doesn't make your code correct. But it is a tool for finding many of the mistakes in your code in the real world, you would have colleagues or yourself would write tests for code you wrote or someone else wrote. So like testing code is not just a grading thing, it is a real world thing to ensure that systems are designed correctly. We saw the style 50 tool in vs code already. You click the style 50 button. There is now thanks to the duck, a design 50 button too. Also in the top right hand corner, whereby once your code is correct and working like several of my programs have been, you can click design 50 the duck will not just quack but give you qualitative advice if it can on how you can make that code even better, even before you submit. And of course, there's all of us humans in the room and online that you can ask the same questions of as well. So let's now solve some sort of real world but still simple problems as opposed to emphasizing small bite size as we have thus far. So the first of these programs falls into this category of having side effects. So let's implement one or more functions that takes in arguments, inputs and as its output produces these visual side effects will draw inspiration from Super Mario Brothers. Not surprisingly, perhaps here, the original one which was very two dimensional side scroller left to right Mario or Luigi move from left to right and generally have to like jump over things like pyramids or other shapes on the screen? So how might we go about implementing some of the screens from Super Mario Brothers, albeit textually? Well, we'll make it a little black and white and Asy art so to speak here using just our keyboard. But suppose we want to write a program called Mario dot C that just prints out four question marks. It's not gonna be nearly as pretty as what's on the screen here, But the logic is gonna be the ex same as what Nintendo presumably did years ago. So let me open vs code my terminal window. Let's code a program called Mario dot C in Mario dot C. I'm gonna kind of start with some boilerplate. I know I want to print. So even if I don't know how to do this yet, I'm gonna include standard IO dot H for today's purposes, I'm gonna copy paste or type out that same line again and again, it may void and inside of my main function akin to the green flag being clicked. I want to go ahead and print out four question marks. Well, honestly, the simplest way I can think of doing this is with print f question mark, question mark, question mark, question mark, maybe a backslash N to move the cursor and that's it. So that is arguably correct. So let's do make Mario in the terminal dot slash Mario and it's not quite as pretty as the game version of it. But it is, in fact the exact same idea. But here's sort of an opportunity a stepping stone to do better design like this game changes over time and not all of the screens have just four question marks. It might be 56 or even more. So, what's the right programming construct with which we could generalize how many question marks are printing here? Like what feature of seed do we want a, like a loop, like a four loop, a Y loop or something like that? And there's different ways to do this. But honestly, I've proposed earlier that we get into the habit of reaching for four loops as just very conventional. So let's do that four in I equals zero, I less than four because that's how many I want for the moment I plus plus and then inside of my curly braces there, let's go ahead and print out quote unquote a single question mark but no new line. Let me now go ahead and make Mario. And can you anticipate a s arguably aesthetic bug when I hit enter? It's not going to move the cursor to the next line. But the solution here is a little non obvious. I don't think this helps me if I put the backslash N there and I do make Mario again and dot slash Mario, what is this output gonna look like instead? Yeah, like a vertical column of question marks which while nice enough is not the goal at hand, the goal is these horizontal ones. So someone else, what's the fix here? If clearly putting the backslash in inside of line seven is wrong. Yeah. So put it after the loop and not after the print F line specifically after and thus outside of the loop. So that after that loop is finished executing three total times it's totally fine to just print nothing other than a backslash N. So long as we now recompile the code, make Mario dot slash Mario and Voila. Now we have four inter it's a little generalized. OK. So we've sort of plucked off a fairly easy problem. Well, let's go back to the world of Mario and try something that is in fact vertical like this. So this is another scene with like three bricks here. Instead of using question marks, we'll use hash symbols to represent bricks. This actually is the incarnation of my mistake a moment ago. So let me undo this by getting rid of that print. F Let me change the inside one from a question mark to a hash symbol which looks the most similar in Asi to a brick. And let's go ahead and put in backslash N after that, if I do, go ahead and do make Mario dot slash Mario, it's not that interesting but and it's actually not that correct cause I wanted three. So no big deal I can of course, go back to my code and change the four to a three or better yet I could use get in or my new get positive in function and just generalize this further so that I can print out any number of them. But for now dot slash Mario gives me three. All right. So we plucked off the second of two problems. Let's now let things escalate a bit. So it turns out once you get to like world Two and beyond, there's some underground parts of Mario where you actually have bigger, more solid bricks like these here. And just by eyeballing it, this is like a three by three grid of bricks like nine of them total Wool conjecture. So how can I go about implementing this? Well, now is where the program gets a little more interesting and the sort of not correct. Well, the poorly designed way to do this would be like print f hash hash hash backslash N semicolon and then maybe print F print F like that's kind of like correct but not well designed. So make Mario dot slash Mario, you know, it's, it doesn't look like a square just because these hashes are more vertical than they are horizontal. But they it is correct this example, but it's not very generalisable and this is like literally hard coding. I copy paste it. I'm just doing a lot of bad practices here. So what could I do instead? Well, it turns out we can combine today's ideas including loops to do things again and again. So what is this grid of bricks? It's a three by three. So that's like, you know, it's, it's like a row and a row and a row. And then within each row, there's like column, column, column. So it two is like an old timey typewriter that sort of prints one line, then the next line, then the next line and so forth. So how can we conjure that in code? Well, let me go ahead and do this. I think a print approach would work is like this for N I equals zero, I less than three I plus plus because I know I want to do something three times. But what do I want to do? Three times this loop kind of represents in my mind's eye row row row. So in fact, I could be more pedantic if I want my eye to mean something beyond an I could say row equals zero row less than three row plus plus just to help me think about it. And then what do I want to do on each row? What do I wanna print? Like column, column, column? So brick, brick, brick. So how do I print three bricks or any number of bricks? Well, I could kind of cheat and just do print f hash hash hash backslash N. But again, I can't generalize, I can't take an input from the user and print four or five or six bricks. So that's gonna get me into trouble eventually. So maybe I could use a loop. So I could do like four in, I equals zero. I, less than three I plus plus inside of my loop. And then in here I could print out one hash. And that's kind of on the right direction, the right path because now I'm just using the simple building block or brick, but reusing it again and again, and it's totally fine to have nested these columns in this way. I used, I out of habit but what would a better name be? Well, maybe column or maybe just col call for short. So that my code is sort of saying what it does for me and I don't have to use row or column explicitly. I don't need to print them, but I am using them as counters one after the other. So let me go ahead and run, make Mario dot slash Mario and I'm feeling good about this. But damn it, there's nine bricks, but they're not really laid out, right? Why? What's the fix? Yeah, you've never, yeah, I never went to a, a new line and let me do what I think you're not gonna suggest. I do, let me just go to the obvious place. All right. Well, let's put one right after the brick. But of course, if I do make Mario dot slash Mario, I'm making the same mistake as before. I'm printing out too many new lines. So in, in between what lines do I actually want to print a new line between? Yeah. Yeah. So 10 and 11. So outside of the inner loop, but inside of the outer loop. So it happens again and again. So let's just print out as before a single backslash N semicolon. Now let's do make Mario dot slash Mario enter. Ah, now it's generalized as I see fit and if I really wanted to dwell on this, I could go in and I could prompt the user with, get in or with, get positive in, figure out what row and, or column B, we can make any size brick that we want. But now we have sort of a nice starting point, but there's another way to think about this because I dare say, especially for like your first CS 50 problem that if you're trying to print bricks in the world of Mario in this way, it's probably not gonna be obvious to come up with loops like this and just magically get it working after like 45 seconds in total. Like it'll be a struggle at first, but there are some patterns to follow. So one, it's pretty conventional nonetheless to use just I and then J and then K and then L and if you've got nested, nested, nested, nested four loops at some point nesting, you're probably writing bad code. It's not well designed but one or two or maybe three nesting could be an OK thing. But you cannot use and reuse I again and again, why? Because if you're counting I here, but then you're changing I here to do your columns left to right. You're gonna get all of your math out of sync. So you need two separate variables I and J are conventional or row and column would work too. But if we go back to this idea of rows and columns, well, let me actually factor something out here and this might help you instead suppose that you set out on this problem. You know, you want to do something like three times, but you don't quite understand how to print those rows. We'll take a baby step, a bite out of the problem and maybe do that, create a function with no output. Just a side effect whose purpose in life is to print a row and how many rows will maybe N for some number of row or for some number of bricks rather? How do you print a row of bricks? Well, let me just think about this in isolation. How do I print a single row of bricks? That's easy. Four N I equals zero, I is less than N if I'm generalizing I plus plus and then oops I plus plus and then inside of my curly braces, go ahead and just print out a single hash. And at the end, as you suggested, print out a single new line in other words, abstract away the idea of printing a single row. And in fact, at this point in the story, especially if you're struggling to get started, you don't even need to start with Maine, like take a bite out of the problem. That makes sense to you. That's smaller than the whole problem. Printing a single row because then you can come in and iterate, then you can go in and say, OK, now let's write my actual main function. So in Maine void as always. And now what do I wanna do? I wanna print out a whole bunch of rows. How do I print out a whole bunch of rows? Oh my God. It's like the same idea four and I equals zero. I is less than let's call it three for now. But we can generalize that I plus plus. And what do I wanna do on each iteration of this loop? My gosh, just print row with three bricks and then we're sort of done right again, out of sight, out of mind, this function can go away and never be seen before because once print row exists. That's what it in fact does for me. Now, this isn't 100% correct. I still need my prototype because if I've made my own function, I need to tell uh see in advance that it shall exist. So I need to copy and paste that one line of code. If I were really being pedantic, this is bad design. Uh In general, when you have the same number in multiple places in a program, a programmer would call this a magic number. Like how is that working? Like you're just uh honor system that you're using the same number again and again, so a better solution here, even if you're not gonna take user input would be to do this NN equals three. And then use N here and then use N here or you could call it anything you want. But now you've specified three in one and only one place and we can go one step further. It turns out in C and in other languages, you can protect yourself against yourself. If you know that a variable should never change its value, it should always stay three. In this case, you can use what's called a constant where you can specifically say I don't want just N to be an, I want it to be a cons in constant for short, for constant. And this means even if I try to change N in my code, the compiler will not let me so I can protect myself from myself or in the real world, you can use a variable that none of your colleagues can foolishly change on you without you realizing that it has happened. So a lot of programming honestly is just, you know, not trusting yourself the next morning when you've forgotten what code you wrote, let alone the next month and next year when you're writing code in the real world. So constants just give us a feature to defend against ourselves. There's another feature that's useful too, especially when you wake up the next day and you're like, oh my God, like what, how does this code work? What does it do? Well, there's comments in code and some of you might have used this in scratch. You could add little yellow sticky notes in scratch for comments in code. You can do something like this. You can, if you wanna put an English reminder to yourself or if you speak some other human language, uh comment in Spanish or any other human language, you can write it with a slash slash at the start of the line and then you can say something like print and rose. Um and then this tells you in a comment what those subsequent lines of code are doing. It's sort of a note to self. It has no functionality for the computer's sake. It just is a note to yourself or you can say something like this like never change. N because you're making clear that it's indeed constant. But that too is a little pedantic since constant says the same. But comments are notes to self to help you. Remember what is something is doing or why you did it this way. Questions now on any of these Mario problems that we have solved? No. All right. So one final set of examples that push the limit of like what computers can actually do thus far, we've solved like every problem I proposed. But that's because I've kind of been skirting some of the underlying challenges. So it turns out that we have not only functions that give us side effects, like visually on the screen, we again have functions that have return value. So let's focus on those and where things that can, where things can go wrong. And let's use a bunch of other operators as well. Suffice it to say computers got their start by being really good calculators. So computer support addition, subtraction, multiplication, division, uh remainder operators represented by the percent sign here which says take the remainder of something over something else and there's even more operators than this. So let's go ahead and implement our own calculator of sorts that actually has some bugs along the way. Let me go back over to BS code here. I'll close Mario dot C open my terminal and code up one final file called calculator dot C. And in this calculator file, let's go ahead and do something super simple. Initially, let's go ahead and include CS 50 dot H. Let's include standard IO dot H let's do in main void as always all boilerplate thus far. And now let's do something more interesting in X equals, get in and we'll prompt the user for an X value in Y prompt the user for A Y value as we've done previously for comparing numbers. And let's just do something super simple. Let's give myself another variable in Z equals X plus Y and then let's print out the sum. So print F per quote unquote and I don't want percent s here. If I want to print out a number, someone said it earlier, we want S for string, but I for integer backslash N and print out the value of Z. So it's a little silly this calculator. It just adds two numbers together, but it's gonna demonstrate some points. So make calculator enter so far so good dot slash calculator. Let's just say X is one, Y is two, Z is going to be three. This code is correct. Simple though. It is, is there an opportunity for marginally better design? Could we tighten this up? Make it shorter, fewer lines means less lower probability of bugs probably. Yeah, by a separate therapist. Yeah, we don't really need a separate variable Z. I mean, it's fine if it's clearer to you, if it's clearer to your TF if it's clearer to your colleagues. But honestly, this is so relatively simple. I think we just get rid of Z and just say something like X plus Y here, which is totally reasonable as well. But you don't want to take this to an extreme. Heck, if we don't need Z do, we really need X and Y. Well, we could do something like this. Let me actually whoops. Let me actually delete these lines of code and claim we can do this all in one very pretty one liner. Uh We could do say get in X plus get in Y and notice now kind of like the join example. Last time I'm calling get in once, get in twice, both of them return a value which is like gonna be one and two respectively based on what I typed earlier, then I'm doing one plus two that's going into print F as the second argument like this is actually correct and will work. It's just stupid. Like don't do this. Like we've crossed some ill defined line where this is just harder now to read. And so even though the variables aren't strictly necessary, I would argue, and I think most programmers would argue this is just much more readable. Each line is doing a little bit less work. There's less chance for error. It just makes a little more sense but reasonable people will disagree. So therefore, this will uh this is to say over time too, like you and your TF might disagree, you and your colleagues might disagree. And at that point is when the sort of religious debates kick in as to which way is the right way. All right. So that's one calculator. Let's do something else that may be just like doubles a number here. So let me change this uh to just get one integer from the user, let's just call it X and let's just double it quite simply. So print f uh percent I backslash N uh X times two. We'll quite simply double it. The star operator is indeed multiplication in this case. So that's gonna go ahead and double my number. So make calculator again dot slash calculator enter. And let's go ahead and type in one and I get back two. Let's run it again, type in two. I get back four, type it again. Let's type in three. I get back six and so forth. All right. So that's not bad in this case here. But what if we actually want to write a proper program here? In fact, um Yeah, let's see. It's, this is a sort of a meme that comes and goes. Let me see if you recognize this. I'm gonna go ahead and say another variable, not X. Let's be more specific like in dollars equals one. And then let me deliberately induce an infinite loop. Sometimes it is useful to induce an infinite loop. So long as you eventually break out of it somehow, if you don't want the program to run forever, I'm gonna ask the user a question, asking them for a char C using Get char and I'm gonna ask them quote unquote, here's percent I period double it and give it to the next person question mark. This is ringing a bell and then we can pass in to get our, the dollars value there. So actually, this looks a little cryptic already. I'm gonna put a dollar sign in front of it as though we're actually dealing with us currency. And what do we want to do? How about if the user says uh y for yes it and give it to the next person? Then let's go ahead and do dollars and let's double dollars. So I can do dollars equals dollars times two or recall the trick for plus and minus. I can also do times equals two, which just doubles it in one line as well. Just a little syntactic sugar as programmers call it that just tighten up your code even though it's the exact same thing. But what if the user does not type Y and they want to keep the money? Well, we have an ielts condition at that point. You don't want to keep asking, asking, asking, asking them with, get char, let's just break out of this loop instead. So break is another keyword that if you're inside of A for loop, A Y loop, A do Y loop, you can forcibly break out of the loop early if and when you want to. And so this sort of satisfies the goal of making sure that this doesn't run forever, but it is gonna run again and again and again, while we keep prompting the user with this question. So let's see now what happens um Except at the end, let's go ahead and make sure the user knows like how much money they're walking away with. Here's dollar sign. Percent I backslash n dollar. So we will see at the end of this whatever dollar amount the person ends up with make calculator enter dot slash calculator. And let me increase my terminal window size. So here we go. Here's $1 double it and give it to the next person. Yes. Here's $2 double it and give it to the next person. Yes. Yes. Yes. Yes. Yes. So, you know, the Instagram reels aren't that long. But if like you keep doubling it again and again, this is called exponentiation, which will make you quite wealthy quite quickly because notice we're already in the thousands of dollars by just saying yes and yes and yes. It's an interesting sort of societal question as to what dollar amount you would keep the money and no longer double it and pass it on. But for now we'll just keep doubling it because this is just getting bigger and bigger, seemingly infinitely large in the C program. But oh my God, like apparently the Instagram reels cut off the meme too short because eventually it goes negative and then zero. Like what's actually going on here, like the code is actually correct, but we're bumping up against a different kind of problem. Any instinct for what is actually going wrong here, it's not doubling forever. Yeah. Yeah. There's not enough bits to store bigger and bigger numbers recall with 32 bits, which happens to be how big most ins are. You can count as high as 4 billion if you start at zero or roughly as high as 2 billion, if you want to handle negative numbers as well, negative 2 billion to positive 2 billion. So eventually, once I get to like $2 billion or $1 billion it goes negative and then it just goes to zero altogether. This is because of something called integer overflow, whereby if you only have a finite number of bits and you keep incrementing them, incrementing them, increment them, eventually you can't just carry the one because there's no 33rd bit. So all of the other bits wrap around from ones to zeros and it looks like all 32 of your bits are zero because the 33rd bit was supposed to be the one, but it's not there. They don't have enough memory. So this is a fundamental problem with computers whereby if you count high enough things will just start to break at least if you're using C or C++ or certain other languages that don't anticipate this. And there's very real implication of this. So here's a, here's a photograph of something we'll look at more in time to come like of memory inside of your computer or phone or any electronic device, suffice it to say there's only a finite amount of memory. And if you're only using 32 bits then or heck even three bits you will eventually overflow. We used three bits last week. So here's an example in binary. If you're only using three bits per the white digits here, I've put in gray the fourth just to show you what carry we might want to have. Here's 01, 234567, just like last week and just like last week, someone said, how do we get to eight? We need another bit. But if that bit is grayed out because it doesn't exist, we've just overflowed this tiny integer and gotten back to zero just like my money went to $0 instead. So how do we actually avoid that? You know, one way to do this is this, let me hit control C to break out of the program or I could just type. No, let me shrink my terminal window and clear it here. I could actually do this. It turns out that ints use 32 bits typically, but there's another data type that was on the slide before called long, which is a longer version of an in which is 64 bits, which is crazy big. Um There's not that many dollars in the world but it's still finite even though I can't pronounce the number that big. But if we change all of our ins to Longs and we change our placeholder from percent I to percent L I for long in I can actually count higher and higher. So case in point, let me actually go back to my terminal, make calculator, enter, make it larger again dot slash calculator. And I'm just gonna keep saying yes. But faster this time, the sequence is exactly the same. But recall that once we got into the billions, it started to rap to negative and then zero, this is a lot of money now, like longs are indeed longer and I could do this probably all day long. Oh, interesting. No. Ok. I shouldn't have said that uh can't do this all day long because eventually a long two will overflow. I just didn't think it was gonna happen that fast. So a long two will overflow because we'll need a 65th bit, but the computer has not allocated it. So that too becomes an issue of overflow to read an excerpt like these are very real world issues. And in fact, here's a photograph of a Boeing 787 years ago that actually had issues beyond the most recent issues with Boeing airplanes. Whereby after 204 eight days, the Boeing 787 years ago can lose all of its electrical power due to the generator control unit simultaneously going into fail safe mode, whatever that means. But if you dig into this, it turns out that there was a software counter in these airplanes years ago that would overflow after 248 days of continuous power 248 days. Why? While Boeing was using a 32 bit integer and they were using it to count 10th of seconds. And it turns out if you do the math after 248 days, you have used too many tents such that you overflow, the size of a 32 bit integer. The plane would essentially have this integer, this tiny stupid little variable overflow. But generally speaking, when your numbers suddenly go negative or zero, bad things happen, the plane could literally lose its power mid flight or on the ground. And if you can believe it, anyone want to guess what Boeing's workaround was till they fix the actual software. What's that? Not even reboot the plane? Like they were told every few days, certainly every 248 days, turn the power off, turn it back on which stupidly is what all of us have been told for years with our macs and pcs and phones. Why? Because sometimes because of bugs in software, computers get into funky states, which is a, you know, colloquial way of saying like some programmer made a mistake and some counter overflowed or some condition wasn't handled and just weird on expected things happen. So rebooting just resets all of your variables back to their original values and sorts of gives you more time, more runway. In this case, no pun intended. There are others. In fact, one of the most famous ones from like the 19 eighties was the original Pacman game. Only had support for 255 levels. Why they were using eight bits. Recall that eight bits gives you 256. But if you start counting at zero, you can only go to 255. So the crazy kids who were so good at Pacman that they got to level 256 the makers of Pacman did not anticipate that anyone was going to win that many levels. And just weird stuff happened on the screen. All of the fruit sort of started overwriting everything because they didn't have enough memory allocated to the level. Nor did they have a condition that says if level equals equals 255 you win like there was just nothing ha handling that corner case, so to speak. So these things abound even these days, thankfully, in some languages, there are better solutions where you can use big inte jurors and you'll just use 64 maybe 128 maybe H 256 bits. But you need to use a language or a library that allows you to grow and shrink the amount of memory being used. And many if not, most languages do not do that for us. So there's a few final problems to see that we've been taking for granted thus far. And they also involve numbers and memory. So let's go back into our calculator. Let's throw away all of this meme code here. And instead let's go ahead and do something simple again in X equals get in and prompt the user for a variable X in Y equals get in prompt, the user for a variable Y. And this time instead of addition, instead of doubling, let's do division. So print f quote unquote present I backslash N and then plug in X divided by Y. So you use a single forward slash for division. Let me go ahead and make calculator down here dot slash calculator. And let's go ahead and do one divided by uh three which should in fact be, well, it's not really zero, right? It's like 0.333. Let's try this again. How about dot slash calculator? Three? Divided by two should be 1.5. Nope. Computer thinks it's one. Well, what's happening here? Well, it turns out when you're using integers in a program, you are vulnerable to what's called truncation, an integer plus an integer gives you an integer, an integer divided by an integer. Funny enough, gives you an integer. So even if the answer is supposed to be 0.333 or 1.5 everything in the world of integers throws away the decimal point onward and you only get the integer part of the value. So it's not even sounding, it's truncating everything after the decimal. So this program is just not correct, but there are solutions potentially. For instance, if I go back into my code here and I use a different format code we haven't used yet. We had S for string I for in, there's also F for float and a float was like a real number, something with a decimal point in it. By definition, we just haven't used it yet. I could tell the computer to print this as a float. So let me do make calculator again. And now hmm, it's specifying type double. There's an error here. The problem is that I can't just tell the computer to format this number as a float. I need to convert the number X divided by Y to a float and I can do this in a couple of ways. One, I could literally change all of this to floats and just avoid the problem altogether. Use float, use, get float, use percent F and I'm done. But if I want to use in for whatever reason, because I want the user to type in integers, but I want to show them real numbers with decimal points for correct math, I can do what's called casting a value I can in parentheses, which is a weird new use of parentheses. I can say, hey, computer, please treat the following integer as a float instead, thereby avoiding truncation, do not truncate for me. So if I now run, make calculator again dot slash calculator and type in for instance one for X three for Y. Now I get an actual floating point value. I'm formatting it as such and I'm telling the computer to actually arithmetically calculate it as such as well. But here too, I'm kind of cheating you of a reality. It turns out, let me clear this screen here and it turns out that there are fancy ways in print F to tell it how many digits to show you how many um significant digits. And the syntax is very weird. I have to look it up constantly. But instead of just saying percent F you literally put some numbers in between there and you say uh 0.5 and that will say it's weird syntax. Hey, print F format this to five digits instead. So let me go ahead and do make calculator again dot slash calculator and let's do one divided by three. And indeed, I get five significant digits there. But suppose I get a little crazy and I want 50 significant digits. Well, according to grade school, I should just see more like threes but watch this make calculator dot slash calculator. And it turns out that whoever taught you grade school math was kind of telling you some white lies because if you really do it with a Powerful Mac or PC or phone one third is actually 0.333333334326744079. Who's right, Mr and Mrs so and so from grade school or like the internet, what's going on here? What explains this? It all comes down somehow to week zero zeros and ones. Why is this floating point number imprecise, so to speak? What's the intuition? Yes, similar in spirit. Just as its only use 32 bits floats also use only 32 bits if you want more, just as it has long floats have something called double. So I could kind of avoid some of the problem by switching to double, but that's still going to be finite. And if you think about this intuitively, if you're using a finite number of bits, be it 32 or 64 you can only represent literally so many patterns and thus so many floating point values, so many real numbers. But how many real numbers are there in the world? Like literally infinitely many is the challenge of real numbers. You can just keep adding numbers after the digit. So how could a computer Mac PC or otherwise possibly represent every floating point value super precisely if there's not enough patterns to represent every number in the world. Moreover, the way that computers used to represent numbers sometimes do not allow them to represent numbers. So precisely, we can get more significant digits maybe but not 100% perfection or per. So floating point precision two is a fundamental problem with computers today. And unless again, you're using a specialized language or library that understands for scientific computing, the implications of overflow or imprecision, your code will have mistakes. Much like Boeing discovered, much like Pacman discovered as well. And in fact, just to end on a gloom and doom note, it turns out there's another problem like this on the horizon already. So back in my day, everyone was really worried about the Y2K problem. The year 2000 problem. Why? Because for decades, when computers were invented, most systems were using just two digits, independent of bits, two digits to represent years. Why computers came out, you know, a few decades ago, who'd think that a computer is still going to be running decades later turns out they were especially in government and corporations and the like, but if you're only using two digits to represent years and the millennium comes around and it's 1999 about to roll over, we're about to roll over. What comes after 1999. Well, if you're only using two digits, ideally 2000, but if you're only using two digits, the year zero comes after the year 1999 and the whole world truly, you can look it up nowadays on Wikipedia was freaking out because there was so much old software in the world that could have had this mistake and who knows planes falling out of the sky. Um Computers rebooting freezing like no one really knew because this was an unhanded situation in code. So thankfully the world actually got its act together. The world did not end in the year 2000 and most systems were updated in time without crazy horror stories. But we're gonna have this happen again because it turns out just a few years from now at this point, um, computers for years had been using 32 bit integers to keep track of time in the sense of like what time of day it is And the uh point in time they decided years ago was, hey, like, hey, everyone, let's just keep track of how many seconds have passed since January 1st 1970. And we can relatively compute time anytime thereafter. So that's great. That gives us a lot of decades worth. But 32 bits eventually maxes out at like 4 billion, positive or 2 billion if you want negative and positive. And it turns out if you count the number of seconds between 1970 on up on the day 9 January 19th 2038 the world might again end because all of these clocks are going to overflow and we're going to end up in the year zero or negative something. Now, what's the solution there? I mean, my God, it's the exact same thing like stop using so few bits, use more bits but bits and memory and computers used to be expensive. Nowadays, storage is so much more available. But among the things we'll discuss then is how you can throw both hardware and software at this problem. But for now, if you set a Google calendar reminder for January 19th, 2038 and hopefully we'll see you next week.