Hi everyone. My name is Patrick Akil we cover engineering productivity We answer questions what experiments to run, and how to start Listening through this episode, should I start experimenting My answer is yes. Absolutely. We start right now. Who better to join me at this table As head of Engineering Productivity, he's done this in many organizations So enjoy. Beyond Coding. One of the main reasons why I invited you developer productivity, and how you've implemented it You shine a little bit of light on what it is you're doing So I'm active in the field And if you look at engineering productivity, Yeah. And to explain it, I think I also have And what it is not is a way to do on individual or team level, effectiveness of engineering processes where can you maybe And if you start rolling out improvement, That is the part that engineering And if you do it at scale an efficiency of 1%, like an improvement if you have 100 700 plus workforce, What you can do that the essence is that you create insights in creating the improvements or protect Yeah, I mean, from my product side, And seeing the impact as well as kind of on specifically from a product side, roadmap or whatever we need to work on, or getting more juice But then I put my engineering hat on let's say, in such a way That does sound a bit scary. Well, then you make the assumption your work, I think it's not going to work. I always give the example, if an engineer is just staring that can be a very productive moment, But in at our decision, from a huge architecture Yeah. Is that productive? I think it is. It's absolutely valuable Should we even start thinking No, we should not do that. But what I can do are we doing project engineering? How are things flowing or where is it Let's be honest, the things where it is is annoying to do, are also the things So let's bring that forward. Let's see if we can get some data. Can we improve them? Let's have a debate about that. Let's try something. Let's see how that works. In the value chain of then until it lands in the hands of and then eventually is that the chain that you measure I think if you start thinking about engineering productivity, my advice why most engineering flows are quite You have a CI CD pipeline, So let's start there. But you can further down the road So where does your CD pipeline end? Are you looking to. Okay. It's released in Canary releases, and now it's Or are you going for general liability? It's like rolled out into AI, Why do you stop on that aspect? And on the left side, you can include more Like how long does it take us from discovery until we actually start until it actually lands So these lead times super interesting, and to the right aspect, the harder Why you have more actors to process So it's more work to get actual So when we're talking about engineering process flow, what you've implemented in measurements because of those, if you have highly standardized process, Yeah. The truth is that mostly For instance, There are environments Totally different when it comes out of the comparing to a microservice environment speed is way higher, the PR length maybe that you're doing, when you compare it So it really depends on the context. And I think it's also super important to take that context into mind So a single metric that will tell you everything will be fine I've never seen that. If you look at door metrics, for instance, give you some examples That's great. Good starting point, mostly fairly easy to implement But if you take space, for instance, in the space framework. So not only, the Dora metrics but also how do we protect So you're scaling up The complexity Could you explain the Dora metrics So to keep this very simple, If you really want to dive deep, there's excellent material But for me, to Dora metrics are, a set of metrics how well are you able to produce code and how often do you fail, The space metrics, fully, not only at the metrics that you're but also the satisfaction So what is the outcome? Basically creating all the way to the experience So the set is broader There's only a couple of examples Oh, you can try this. You can try this. So that can be a good starting point. But it's also at finding the way in, what do I want to measure That is mostly a journey because you all start with messy data. We don't measure that at all. We don't know how to measure that. Start with what you have normalized get it better and then start building out Both frameworks actually allow that, at that growth journey where Dora is okay. This is a fixed set where you can start Gotcha. Yeah. When we're done talking about this Regardless what are some of the measuring sticks or choose to ignore based on your context? So tracking I would say my recommendation It doesn't tell you anything. I gave the example There are many more. So what what you can see on the individual Yeah. When it comes to teams, there are some What I really like, Okay. So if you start creating PR, and reviewed, and how long does it take Then why is that of interest? If I bring up a PR and it takes some time That's an interesting, fact if that goes up, do we have the proper knowledge to or are we well aligned with other teams So that gives you a lot of insight. Are we managing our stakeholders Do we need to develop our teams? And then it comes to getting eventually merge thing Because now we can start deploying. How long does it take us there Flaky tests are coming into play. Are we able to test, So PR that lead time overall I think is a very interesting one There are many more I would definitely also recommend Often deployments break. Do you know that? How quickly can you fix it? What is the cause here? That is additional data only when it's deployed So have an eye on that as well. That makes sense. I read an interesting blog post recently. One of my friends, Luca Rossi. He has a Substack newsletter interactions Actually, was it this morning in the train Either that doesn't have any pull requests, and then their throughput initially And then you can see towards the future silos, or there might be different qualities here and there just by virtue And then on the flip side of that, we need more digestible, Then all of a sudden and then you're reviewing and context and you get like this fragmented feature just by virtue of having multiple Very short. Somewhere in there is like the sweet spot, this completely separate train of thought So more programing or pair programing because then every line that is written next to it, is reviewed on the fly What is your train of thought with regards Well, here you go. This is an excellent example So let's like for instance, And then we break it down. As I mentioned before, like first commit, But that's also I'll talk Like how many peers are you doing? I would love to see a team We are going to create smaller peers. Let's run that up. Let's see Your throughput should go up. What happens So you can actually see what it does. And you can have, you know, retrospectives, What are we seeing in the data? What are we experiencing. And here we're bringing quantitative And I think that brings some very powerful Then you can also start experimenting let's do some more programing there. Let's start organizing that. Let's limit Otherwise we cannot do this. But let's look at the data afterwards. So running those experiments to use the experiment canvas for that. So you really define How are we going to do that. But also what is the outcome And how long are we going to do this So driving those experiments, the key that you want to unlock And this is an example where you've tried multiple ways of let's the PR lifecycle, Or maybe the throughput You know, now that is there a trend you've seen in running these experiments And I hate speaking in generics, what trend have you seen it really depends on what you're doing, If you are, for instance, schema definitions and changes, than in you're focusing on front end. Or if you're focusing solely on backhand So that is the first thing that you need Yeah. So I would say just start exploring Where do we feel that the team is running well with their surrounding, because That is super important. So find your cadence. And I think it's different for everyone How long have you been a team? How well do we know each other? What is the knowledge These are all factors which influence how you should treat PR, Maybe a fun fact. What I did Yeah, that creates But eventually to refer to longer term very like sugar coated syntax and like So the ratio times took longer Oh interesting. Yeah I didn't expect that actually when it comes to let's say the quant because I want to go How do you measure. Because I've used GitHub on Azure DevOps. Now I've used Bitbucket before. Do you measure through those or more. So your ticketing system in a JIRA we operate on a multi source strategy. So you'll get to start that they are fairly Yeah it's not an easy task For various reasons. Sometimes they break sometimes Yeah, I would say, in the market that are able to like, and put it in a data lake, for instance, You can also use your ticketing system, I mentioned in the beginning that if you shift left if we create an initiative that's maybe the start where you say, How long does it take us for So when do I actually see the breakdown of epics there So that's But as I mentioned as well, As an example, there are teams that treat Yeah. So whenever it's an item is created, And we have different ways We're doing that in a spreadsheet So there are multiple options But there are also teams that use And everything that we think of, Yeah. So you need to make sure that both cases As I mentioned, that's Yeah, which is maybe not as streamlined Yeah. Yeah. I mean, right now because I've done product management And for me, engineering productivity on top of mind because I'm like, okay, at least in my environment everything is new and we can do everything, and everyone and then I'm like, okay. But then the things we work on really, And I don't know if I've ever realized let's say with my engineering because then decisions were already made and I would just execute. But now I'm more so also tending towards, what is the quality of what we deliver? Because if I could test and then they turn out to be wrong then I might not need 100% of And those are more so top of mind I want to be faster and more agile Also with regards to quality, how sure we are with regards to these bets And that's a completely different mindset. And then you talk about engineering It just hit home with me. I was like, that's what I want. And now Well, once again, just start by collecting the data and insights Well, if you're on the business side of your products, hopefully you can tell Is it bringing this stickiness, Yeah. But if you can in addition, determine in actually producing this feature That will totally make or break So creating those insights I think that's a really interesting spot to have discussions when you start not only saying determining scope and as you mentioned, It is key. And if you can actually show and getting it out of the door avoiding, for instance, certain complexity or quality. I think it's a very interesting conversation Let's get the first iteration out. What is that first version? Let's minimize it and see if it sticks And that mindset resonates as well get something ship and not get a six month Look, without any customer value And these business cases, when I'm like, okay, we save two clicks I don't know, X amount of hundreds Then I'm like, okay, But when they become more fine grained, and the more data availability those nuances are going to make the and right now. Because I don't have any insights They're more so a gut feeling. And with gut feeling comes communication I would think that with more data points That's why I want to move there. Yeah, and there is a lot of happening it's the field of forecasting actually, on the left side, like product creation there as well, Otherwise it's you are not able to deploy. So there's no value created. And that forecasting part is really But it requires a lot of data points. For instance, your throughput Yeah. In terms of throughput, How often do they break things So there are multiple factors. If you have good data on that, Monte Carlo techniques You will learn that what I've seen so far. Yeah. Over the years that teams are roughly in How long does it take If you have some data behind that, but just something that you can at least It brings reason to the table Are we going these first ship this one based on what we see We can't do both. Maybe initial guesses. Yes. Yeah. Data shows no, How do you combine. Because we touched mostly on quantitative data to engineering productivity. How do you combine that And in the end do you need both or because quantitative data points I mean you mentioned qualitative It's super important And the data will definitely not tell you And there's also this thing to say that it's fixed That's why you may need to DNA, asking if for need our two options there. First or meeting each other in the office But I think it's super important with your engineers what are the challenges you're facing for and why are you very happy about certain You want to keep that, Because if you're going to drive change something that people are actually Also, a lot of questions and then there's the part of serving, And I don't know about you, oh, can you please fill in the survey, And if I look at my slack channels, Yeah. Can you respond to this or. I only take 15 minutes. Yeah. If you're lucky. Yeah. So what is a context switch? Often you don't know So we're solving that by over with the results that 15 minutes survey is maybe consuming, If I want to read all the follow up What I really like is a tailored survey So there are some excellent surveys regarding engineer productivity that you can reuse there, or maybe two questions that are popping up in a team channel, And you can just, just answer a question an emoticon or whatever, A lot of insights, based on the outcome what is the next follow up question that I received, or will I bring to a or maybe the last five minutes of the I think those low like touch collaboration that you're seeking in Hopefully also in the in the standard connect with the people I see that sticks So you're going to send out with five Yeah. I feel like you lose people as well people don't see the outcome of it, then in half a year, in a year Like, I didn't see any change. I feel like you lose If you can't deliver on the you don't have Don't ask me what are some of the learnings where you had some assumptions, okay, this is really going to be effective what we measure, which turned out So one example that's neatly pops in mind is as we had a concept, The idea was that there was a single stop where, teams could go to And it also contained some, For instance, up times of our systems on our products with first learning there. Don't overwhelm people. People will drown in their own data. They see so many things. Where to start? Do I need to start? No. Okay, then I will click this way And the other part is showing metrics which a team or a stream But if you can't influence it, Yeah. So overall time for instance is great, I can be a breaking point, sure, that our time is on par Yeah, it just happens. Yeah. So why am I looking at it as a team? Why am I going to discuss this. That should be discussed So make sure that if you're presenting and make sure you only present What if you are in a need that you do need So let me give an example here. We we mentioned PR cycle time and I mentioned additional items there, like first response How long does it take us to merchant. And what is the throughput, So these are additional metrics as well, by using a technique of layering one only shows you, for instance, And when something is off, but present it in a layer two and go to a different environment, maybe a different page Now you see a more detailed information, and then it comes back to product sizing. Again, it's just a good experience If you want to learn more, But if you don't want to learn more, Interesting. When I thought of productivity to this conversation, I was thinking we can I like being productive as an engineer, but does this also put strain Additionally, that is waste or that also people need I would say I don't know what we are and there is this epidemic of burnout Should we really focus on productivity Does that also increase happiness? So what have you seen? It definitely, should increase happiness. I think people who are happy, the tools that are given which they fully understand That is bringing the productivity part. So don't use it as a performance I want you to hit a certain amount Yeah they will cheat the system. Absolutely always waste with the system. So if you start doing that If you start only optimizing on, oh, and the quality shouldn't be influence out of like over the boundaries, The machine will come to a stop. People will either leave your company, or there will be just less focus or entire teams and by the team It's just not beneficial doing that. What do you then, because you're measuring there's this gap in my understanding My individual performance is not measured, Will that then influence my performance at the end of the year, that, it starts with the assumption that you can't measure What you can do is have a discussion. And what have you learned from the data what kind of experiments Some of the metrics that we were tracking did it work or did you get any good That is an ultimate expression So what if we agree is actually operating And by utilizing this data that you're getting that on the team level how can I determine oh, this is your benchmark But what if team two team members are ill? I'm not gonna. This doesn't work now. Doesn't work. So don't never do that. But then, everyone in this process and what data points to look at, cycle that the goal rather than the data Right. If someone doesn't understand that and one team saying, and X amount of progress, Yeah. How do you educate people? That's that's I think it starts Like what And that depends If you're going to push out a, let's say ten metrics Yeah. So no need for it. Now. People don't understand that, they see it being perceived as, So I just starts playing the system we totally ignore this. But in both cases it's it's always, So take people And what can we do in as an example, where do you feel that And can we just visualize that. Can we bring some data Can we, the small surveys survey like can we learn something there. That mostly sticks with people like okay Make sure that you also have the ability You have the mandate that leadership When people see that actually improves life, that's So that is also what you see There are a lot of solutions solutions And you just plug them in can see like oh what we're working on And teams can dive into the efficiency It's overwhelming. So people don't really understand why am I looking at data quality You lose trust. People are not going to look at it or As a final thought, experiment because in my own environment, and it was really not possible to I merge them into one And now we have one There are two separate teams and plans for next year And I'm thinking of developer productivity even the product side of things. And I want to start measuring things we're measuring next to nothing. Basically, I'm wondering where do I start? Do I start within my team and running I need a separate team that overarching I'm just thinking of how do I start I would bring it to the team and ask the question to the team, to gain some insights what would be something that you are Yeah, get that first insight know, like, oh, this is the annoying thing Why they experiencing actually day to day So they will bring it forward So I assume that that is all there. Yeah. So ask that's one. And make sure that you have the enablement Get a data validate and have a discussion, buy in that that data is not being used to It's being used to drive The team is in the lead. They own it. We have those conversations in retros, that was most on top of mind With regards to that, we spoke about it. We thought of running an experiment Things are going better now and it's I don't have any quantitative data cost of implementation how much usually does it take to get stuff up and running Yeah, that depends on how complex and how much enablement So if there are turnkey solutions already then it's way easier to do. In my experience, there's always a team in the organization either by using some open source stuff, There's someone who's passionate creating their own like data engine So find these people in your organization That's a great starting point if it's not In addition, how much effort Yeah, if people I would ask again, okay, what would be Because mostly when people feel like, okay, this is going I wouldn't spend much time There's no worth it. No. I love the initiative whatever they've started measuring, that as well. I feel like we're not doing that enough, but I've I've loved this conversation I would say it's been a real pleasure I'm going to ask my team And if you do, let me know But in any case, before we round off, Well, I would like to invite everyone to start But do it anytime conversation. And we in this podcast went over several We would drill down on PR, we also shifted left and all the way There's so much I would love to invite everyone of how their product creation what their understanding is Bring that to a retrospective where do you think we're dropping the ball Yeah. And there are many techniques out there. Start simple. Just take part of the data where you feel You'll never be perfect It's the conversations this initiative, And do that as a team Even even better, if multiple teams that will be my call to action. Beautiful. Also. Then thanks again so much for joining us. This has been a real pleasure If you're still here, leave in the comment section below Beyond Coding.