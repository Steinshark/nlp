If you are a front-end JavaScript developer, you got plenty of options and alternatives. You got plenty of libraries and frameworks to choose from. You got React, Angular, and Vue to name the biggest, most popular ones. But you also got very popular alternatives like Svelte, or SolidJS, or Quik. And then you got other libraries like HTMX, where you wouldn't write a lot of JavaScript code, but which still uses JavaScript under the hood. So you got plenty of options if you want to build complex web user interfaces with help of JavaScript. And of course, it's easy to feel overwhelmed with all those options and alternatives. And the question is, how do you decide which of those frameworks or libraries you should learn and use? Do we have too many of those? Because I recall that when I released my Svelte course in 2019, so that is a couple of years ago, but still, when I released that course, I was quite positive regarding Svelte. And that course, it's a good course. It teaches Svelte. And Svelte is a really nice library, if you want to call it like this. So I was really happy with that course. And I was surprised that quite a decent chunk of all the feedback I got on that release was not about the course or about Svelte. It was about the fact that it's yet another course on yet another front-end JavaScript library or framework. And a decent chunk of my students or of the people who left feedback and left comments seemed to feel overwhelmed. And I would say annoyed by the fact that there is yet another JavaScript framework and library to learn. And I would say that's already the first problem. Also a problem on my part and maybe from the entire JavaScript ecosystem, but of course you don't have to learn it all. So if you feel like you have to learn it all, that's not the case. And people like me who create courses and content on all these different technologies can definitely give you the feeling that you need to learn all these things. But just because I like learning all these things and like working with all these things, and just because I create content on many of these libraries and frameworks to help people learn it, does not mean that you need to learn all these libraries and frameworks. And just because all these options exist and new frameworks and libraries keep popping up, does not mean that you have to learn or use them all. But I understand that it can sometimes feel as if you do have to do that. Because why do we have all these options to begin with? Why don't we just have one or two libraries or frameworks? Because to some extent that is the case, or is a bit more the case you could say, in backend web development I would argue. If you're using JavaScript for backend web development, you of course have a lot of frameworks and libraries you can use there. But the most used library still is Express.js, if you're working with Node.js. It gets millions of weekly downloads. It's super popular, even though it definitely has its issues and it's not under super active development. But maybe that's also the reason. It's very stable and people know it and therefore it's getting used by many projects and companies. And hence if you're working as a backend JavaScript developer, there's almost no way around Express.js. Of course you can learn one of the more modern alternatives and that might make a lot of sense. But if you want to land a job as a backend JavaScript developer, you very likely need to know Express.js. And it's kind of similar to some extent I would say, if you're working with PHP for example. Of course there are multiple libraries and frameworks to choose from there as well. But let's be honest, the clear winner in the PHP world is Laravel. If you want to work as a backend PHP developer, and now that I say it, I guess there are no frontend PHP developers. At least you don't use PHP for frontend code. But anyways, if you want to work as a PHP developer, you very likely need to know Laravel. It is the PHP framework. You could even argue that it made PHP popular again, if it ever was not popular. And that's also a topic for a different video. But Laravel is super important for PHP and therefore there as well. We don't have like five or six almost equally popular options as it seems to be in the frontend JavaScript world though. And of course there you could also argue that React is the most popular frontend JavaScript library. And then Angular is also pretty popular, especially also amongst enterprises and big companies as it seems. But you could argue that it's these two mostly. And if you just learn React and nothing else, you'll probably also be fine. And I tend to agree that probably is the case. But nonetheless, we have more options there and somehow every new option that appears, every new framework or library that appears in the frontend JavaScript world gets more attention than it seems to be the case for backend projects. And I'm not 100% sure why exactly that's the case and why that's happening. And I'm super interested in hearing your opinion and perspective on that. But I think that maybe we give more attention to every new frontend JavaScript framework or library that appears because a, there might be more frontend JavaScript developers than backend JavaScript developers. I'm not sure about that. I don't have any official numbers. It's just something that could be the case. And in addition, maybe frontend JavaScript development still has more unsolved problems or more problems that can be solved now that were harder to solve a couple of years ago. There may still be more progress regarding how certain problems could be tackled. It feels to me, and again, this is just a feeling, I could be wrong here, but it feels to me as if there's still a lot of innovation happening in the frontend JavaScript space. And that is not purely a positive thing because it also means that maybe there are more unsolved problems there than on the backend. It also feels like we move a bit in circles in the frontend JavaScript world. I mean, we're coming from a world where we built websites, web applications that worked such that we had some backend code that rendered an HTML page, an HTML document and sent that to the browser. And then maybe that document also loaded some script code to add some interactivity to that page. And then we had all those frameworks taking over the frontend and we started building single page applications because they also solve a problem. They allow us to build more interactive frontend applications. They allow us to give users a more interactive feeling with our websites. They can make websites feel like desktop or mobile applications, even. So they exist for a reason. But now we're moving back to a world where we also render a lot on the server. And currently there is this trend in frontend JavaScript development where we try to blend these two worlds, these two ends, the backend at the frontend, and where we try to get the best of both worlds. And I did talk about that in separate videos and episodes, so I'll not reiterate it here, but that seems to be the future we seem to be moving towards with frontend JavaScript. And maybe that's also why we see so many libraries and frameworks pop up because it's clear that we're not there yet. There are some problems and there were problems with the way we built frontends five years ago. So maybe that's why we see all that innovation and all those different libraries and frameworks pop up. Maybe that's the case. But what does that now mean for developers? Do you have to learn all these different options? How can you make sure that you don't feel overwhelmed by all these different options? And I can only say you don't have to learn them all. You can just stick with the option you personally like the most or with the framework or library you want to learn because it gives you the best perspectives on the job market or because you may be needed in your existing job. You can't just learn React or Angular or Vue and call it a day. You don't need to know them all. But I would recommend that you at least take a look at multiple options simply to find out which of those options you like the most and also to stay in the loop regarding the innovation that's happening in the frontend JavaScript world. That does not mean that you have to use all those latest features and concepts right when they come out. Indeed, I would recommend that you always wait a bit until you use some new library or framework or feature of a library or framework in a real app until it's polished and battle-tested. I would recommend that you don't start using all the latest libraries and features immediately in your production apps because that can lead to problems and we've seen that in multiple libraries and frameworks in the last years as well. It makes sense to wait and you don't have to learn everything at the point of time where it comes out but keeping an open mind and just staying informed about some general trends and developments I guess makes sense and at the same time this approach also ensures that you hopefully don't feel overwhelmed and that you can see all these different alternatives and options as something positive because it is that innovation. It is the appearance of all these different libraries and frameworks and features and the evolution of existing libraries and frameworks that drives the overall frontend JavaScript ecosystem forward and that ensures that we'll hopefully reach a point where we are at least very close to having the best of both worlds and where we maybe have a great way of merging backend and frontend because there is one big advantage JavaScript has over PHP for example and that is that it can run both on the server side and in the browser and that holds a lot of potential because that indeed can allow us to build web applications where backend and frontend are integrated seamlessly and where we therefore can give our website users a great user experience because ultimately that's the main goal. As a web developer no matter which technology you're using you have to build websites and web applications that give their users a great user experience and that do their job so that if you build an online shop it's an online shop that's easy to use. If you're building a complex web app like Google Sheets or something like that you build it such that it's easy to use that it's performant that it's intuitive that's your main job and all that innovation that's happening in the JavaScript world in the frontend JavaScript world hopefully helps with making that job a bit easier and a bit more pleasant but there is no reason to feel overwhelmed at least in my opinion.