&gt;&gt; In this episode we have Phillip Carter and and he's going to talk which is an extension that'll let us write .NET Check it out. [MUSIC] &gt;&gt; Welcome to another episode My name is Cecil Phillip and with me, I have Phillip Carter How are you doing, man? &gt;&gt; Hey, doing pretty well. &gt;&gt; So what do you have &gt;&gt; All right. So I got This one is about using &gt;&gt; Okay. So I didn't &gt;&gt; Yeah, you absolutely can. I mean, well, so there's in Safari as you can and just some F# files and open But that's not really that exciting. &gt;&gt; I'm guessing just that by default will just give you like but if I really wanted developer tools and inspection, I might want to do something else. &gt;&gt; Absolutely. So there's which has been in the works I think since about late 2014, It's an open source And what they do is they take the existing F# language service and package it up and basically put it inside of Visual Studio Code and add a bunch of So it's actually recommended So now that VS Code kind of has like the notification If you open up F# stuff and you don't have the Ionide then it will actually recommend So it's got a little over 1.3 So it's doing pretty good. Actually, we have funded this because it's used by So for a while, there were some just and that sort of stuff that took or that frankly would have taken So the primary contributors are So he said, &quot;Hey, we'll fund those sorts of problems,&quot; and that's kind of what he's But because he mostly did it's much more difficult. So there's going to be of the Ionide plug-in coming But I'm not going to I'm just going to kind of &gt;&gt; Sure. &gt;&gt; -and anybody who downloads this can then upgrade and see a bunch of cool new stuff. &gt;&gt; I think it's really cool supporting these open source products because Ionide, itself, is &gt;&gt; No. &gt;&gt; It's not a Microsoft extension. F# community project is open source. &gt;&gt; Yeah. &gt;&gt; Available on GitHub, extension to Visual Studio Code. But then now we can use this to build F# products and and Microsoft just put to kind of keep the project going. &gt;&gt; Yeah. Yeah, exactly. I mean, it's one of those things where there's only so and there's only a certain that we actually have. So if you have a really you get a lot more creative just sort of makes the usage &gt;&gt; Sure, sure. &gt;&gt; Yeah. So anyways, I guess I'll just show you a couple of &gt;&gt; Yeah, sure. So how do I get this? &gt;&gt; Right. So it's pretty easy. You just get Visual Studio Code. &gt;&gt; Okay. &gt;&gt; If you open then it'll automatically If not, you can just go to the and you can just search for Ionide, and it'll give you some stuff. So here I'm just going So that's all that I have. I searched for Ionide and you can just click So I already have it installed so that's why I'm not &gt;&gt; Sure. &gt;&gt; So what do we got for you here? Once you're here, you So the only real prerequisite is &gt;&gt; Okay. &gt;&gt; So if you install .NET Core, then you're good to go, right? &gt;&gt; Do I have to have &gt;&gt; No. &gt;&gt; 2.2, 2.1, 3.0? &gt;&gt; No, anything. It I have a whole bunch of different But in this case, I &gt;&gt; Okay. &gt;&gt; In this case, I got but you don't have &gt;&gt; Sure. &gt;&gt; I'm just choosing to do that because I also work in the .NET Team. &gt;&gt; Nice. Okay. &gt;&gt; Okay. So one of the first things and this is what I personally use at the most for, is F# scripting. So F# scripts are just but they let you do a couple and they're intended kind of playing around with stuff. Not necessarily like building more like using F# to or like explore dataset or try out an algorithm and just kind and then say, &quot;Okay. I'm now going to move this into &gt;&gt; So is that the same thing that's in Visual Studio? Or is this something different? &gt;&gt; This is a little different, So the F# Repo, F# Interactive is your primary way So what it does is it basically and then it reads the info. It compiles it and in what's called an So basically, the main thing it prints out a pretty printer So if you define you can see like a pretty rather than just some raw &gt;&gt; Okay. &gt;&gt; So let's do some Pig Latin. &gt;&gt; Okay. &gt;&gt; We're going to do because there are apparently I'm not going to cover all of that. &gt;&gt; I did not know that. &gt;&gt; Just going to do one of So the first thing that you the little top here we've the script.fxx sort of thing, and it's got this module that's sort of like that scripts live inside of. So we'll start by &gt;&gt; Okay. &gt;&gt; All right. So I'm I'm going to use this set. So notice I typed set &gt;&gt; Right. &gt;&gt; This is powered So you can see you get It's this thing that and it produces Okay. That kind of sounds So there's a, e, i, o, and u. I think that covers it. &gt;&gt; Yeah. &gt;&gt; Okay. So vowels is a set. I can see. Okay. It's explicitly a set So again, this is all &gt;&gt; I'm guessing there's a language &gt;&gt; Yeah. &gt;&gt; Version will tell and even with the C# extension. &gt;&gt; Yeah, exactly. So let's go ahead and define &gt;&gt; Okay. &gt;&gt; Let's call this toPigLatin I got my autocompletion there. So then we want to check see if it's a vowel or not. &gt;&gt; Okay. &gt;&gt; So call that firstChar. Okay. So that's the zeroth index So now, we'll go if vowels.Contains. So I've got Visual Studio style Obviously, it doesn't look exactly but it's the Visual Studio &gt;&gt; Got you. &gt;&gt; We'll go .Contains. No, firstChar, not vowels. Then it is str because and then we want to go plus All right. So then well, we don't want to go there. I think it's for my name, I think it's Illipe is the Pig Latin, at least in this flavor of it. &gt;&gt; In this flavor of it. &gt;&gt; Yeah. So Cecil would &gt;&gt; Ecil. Okay. &gt;&gt; Yeah. Ecile, I don't know. But so in this case, we So I'm going to go to the end rather So it's just neat Then we're going to convert We're going to plop it onto go ahead and add it because F# You have to explicitly &gt;&gt; Okay. &gt;&gt; So char is not a string. You &gt;&gt; Sure. You have to &gt;&gt; Yeah. Then we're going So let's go ahead and and I'm going to hit &quot;Alt + Enter&quot;. Alternatively, I think there but I'm just going to That is going to send &gt;&gt; Okay. &gt;&gt; So now F# Interactive is running, and I was able to define It looks like it takes That's what we want. Let's go ahead and test this. &gt;&gt; Sure. &gt;&gt; So we'll go toPigLatin, Okay, toPigLatin and and we'll do it with yours, too. &gt;&gt; Accessible, okay. I'm going to just put my cursor It looks like it's &gt;&gt; Okay. &gt;&gt; That's fun. So now and I will call that with Apple yeah. All right? Looks like it's working. Fun times. So we learned how to write for converting a string into at least a flavor of Pig Latin. &gt;&gt; You know what really cool is like attached to select &gt;&gt; That will be cool.. &gt;&gt; And every time you test it actually says the words &gt;&gt; Yes, like Microsoft Bob So actually, I don't know I wanted to really call it convert. &gt;&gt; To undo some refactoring? &gt;&gt; Yes, I'm just going to This is the &quot;Rename&quot; So we'll just go ConverttoPigLatin. Boom. Renames it all. That works across projects as well. It's not just an F# script thing. &gt;&gt; Got it. &gt;&gt; So it actually has I can do this, I can go this will bring up the find I can select each of I can sort of see where So that's all fun and dandy but you can do more than &gt;&gt; Sure, because I'm assuming and console applications, probably, web applications &gt;&gt; Absolutely. Absolutely. Yeah, so what I'm going to do here is I actually have a full console app rather than boring and adding packages and stuff. So, want to call out a few things. So there's this little That's really an F# icon. This is the F# tree view So this actually- notice that it has a project. This is called Spectral Norm. This is actually taken from the and so there is This is an implementation This is trying to do to implement a particular algorithm. And then new version which and we're going to modify it here. And then in my Program.fs I'm actually going to to benchmark the results of with the old so we &gt;&gt; That's awesome. &gt;&gt;And so, this whole Solution Ionide also gets you this. There's also a &quot;Debug&quot; button There's also you can you can add files, Juno project here. It's got quite a big feature set. But so, we can go here and- &gt;&gt; This is your Program.fs. &gt;&gt; So what we're going so we have this member _.old and so the benchmark and new calls new.exec. It's like we want to go there. I'm going to hold This will be &quot;Ctrl&quot; Highlights into a link. I can click on it. It So I don't have to actually hit I can just &quot;Ctrl&quot; or &quot;Command&quot;, &gt;&gt; Question about that. So does that also work with like packages and Like can you keep them on a leasee like the structure and things of that nature? &gt;&gt; No, not in this case. I think there was a feature- Yeah. There's a feature request to show a decompiled form. I think that wasn't because there were some like, when typically the compiler show and that can be seen We're kind of turn around. That idea. So if we look at the old there's a few things that So I want to get some I could look at some -- I could see some tool tips and stuff. What I'm actually going do is show and type F#, open Info Panel, you can open the command palette. You can open the command palette by hitting &quot;Ctrl + And then you type and you get a whole bunch In this case you look for Info This is a very unique feature. It opens something up on Font might be a little bit So I actually now have that but it's actually available &gt;&gt; So what I'm looking as you put your mouse over different things, on the right-hand side now, I'm &gt;&gt; Exactly. &gt;&gt; So it's like if I was hovering and it just popped up that tool tip Instead of having a static view &gt;&gt; Exactly, and and it does it So here I have the let keyword shows actual documentation is used So this right here, this looks And if I look at the Info Panel, I can see that this is a float But a tuple in F# by default So this is actually allocating It seems like a little bit overkill. Maybe I'll just turn this Maybe I can help performance. Okay. So I see that that There's the fst and snd functions and take a look at those. It takes in a tuple, Same thing with snd, takes in a tuple, not a struct tuple. So I need to actually unpack So we'll go firstResult. So it looks like it's So we'll go Array, okay? So we can see the full array module I can actually look at all functions And these are links I could actually go to definition and see what they to do. Now I'm going to go sumBy. Okay, so sumBy shows me that there's a projection function and I need to have an array Okay. So I'm going to go this APs and I'm going to pipe because that is an array of So now we're going to create We'll go fun struct. So and I'm going to discard And let's do a secondResult here. And in this case, I'm I'm going to add the second. So now, I can replace So looks like see, it's and it's dividing by We'll call this firstResult and That looks like it's doing If we compare that with the old, we're clearly -- we replaced We decomposed it into that we're dividing sort of stuff. But it looks like right here, we're But async isn't like necessarily So I'm kind of curious if there's So let's go Array. Looks like there's this module Let's click into that Provides parallel &gt;&gt; Right. &gt;&gt; Maybe that could be So it looks like there's this Okay, we'll go there. Creates an array given the to compute the elements. Okay. So it looks like like I have a generator and it That kind of sounds So I'll go .Parallel.Init. And the first argument is the count. So we want the number of threads. It turns out, we have Okay. So then we go a fun i. Okay. So, I have I'm going to get rid of And I got to get rid of this. I'm going to go ahead and get and let's see. Okay. Looks like it is happy. &gt;&gt; Okay. Now we run it? &gt;&gt; Now, the next step So I have the terminal So in this case, whenever you have to run it and release. &gt;&gt; Do you have the Pass &gt;&gt; Yeah. I got typed that wrong. No. All right, I'm just bad. Okay, come on. Third time is a charm, right? &gt;&gt; Yeah. There you go. &gt;&gt; Let's see. Hasn't blown up yet? I think this will work, maybe. Yes. Okay. Cool. &gt;&gt; Nice. Okay. &gt;&gt; All right. So it's rather than bore you with I actually ran this beforehand. So while I was doing this thing, we can actually see what So if we go into this end of the results, we have the HTML, [inaudible] or CSV. I don't know what's wrong with this. Or maybe the log is- No, the log look good. All right. We'll just go here. Okay. &gt;&gt; So for benchmark.net, so just in case folks So this is a NuGet that we could essentially instruments and do benchmarking and test &gt;&gt; Yeah. &gt;&gt; So now, what you're looking at is the results of like a previous run. &gt;&gt; Yeah. &gt;&gt; The previous run gave you, I'm guessing some markdown through different artifacts &gt;&gt; Yeah. &gt;&gt; These are the results that I was trying to test. &gt;&gt; Exactly. It's a statistical Because there's a whole lot a specific invocation can &gt;&gt; Yeah. &gt;&gt; That's like- This actually completed while Let's compare that Okay. So the previous run, we had old versus new, the mean and median times. Looks like there's Notice the ratio actually by setting this so that we can see. Okay. So the new one is about is And looks like it allocates about five kilobytes &gt;&gt; Nice. &gt;&gt; So it's not too bad. &gt;&gt; You want to keep &gt;&gt; Yeah, generally. Looks like in the run that we it's pretty much the same, actually. Wow, that's cool. I didn't expect it to be like Interesting. So yeah, went Did I -- I wonder if I Okay. So it actually was the same. Turns out there's So sort of the same thing. So we're able to actually improve and this wasn't like I actually did this I just wanted to show that you In fact, when I did submitted as the language I did it all with Ionide. I never open Visual Studio. Although I didn't use because it didn't exist, I probably would have if it did. &gt;&gt; If it did, then? &gt;&gt; Because that was just like go to arrays, see and just do this exploration that actually has without needing to write I like it because there's IntelliSense But then, this is like If you're the kind of person then Ionide I think is that offers this sort of thing. &gt;&gt; I really love how that experience &gt;&gt; Yeah. &gt;&gt; I didn't have to pop I didn't have to have or something like that that &gt;&gt; Yeah. &gt;&gt; It's right here. So I could like just easily glance where we decide to put it. &gt;&gt; Yeah. &gt;&gt; Then I can just keep &gt;&gt; Exactly. &gt;&gt; I have my terminal, and then I have That's giving me like &gt;&gt; Yeah. &gt;&gt; I think this is really cool too because now, you could on Windows, on Mac, on Linux. You can use Visual Studio Code, you can use .NET Core. Then, this is not like a toy product. This is a fairly non-trivial sample &gt;&gt; Yeah. &gt;&gt; You had benchmarking, and then you had your actual source So I think it's good actually build a real applications &gt;&gt; Yeah. &gt;&gt; This is a good extension &gt;&gt; Yeah, absolutely. In fact, the Ionide entirely in Visual Studio So it's a non-trivial &gt;&gt; Yeah. &gt;&gt; So the primary author, like one of the reasons was because he wanted to use something like Visual to do the thing that he wanted to do. Yeah. It's pretty radical. &gt;&gt; Okay. Awesome, cool. So anything you want to where can I get this stuff? Is there any samples or anything GitHub repositories, stuff like that. &gt;&gt; Yeah, main thing. If you have Visual Studio Code, It'll give you everything It's got links to the GitHub page if you want to actually back it where you can pay like a monthly. Open collector is a pretty a very transparent way to &gt;&gt; I'm guessing to show you like &gt;&gt; Yes. &gt;&gt; It's like your money and then well, I don't know &gt;&gt; Yeah. Anytime somebody as like a recipients, &gt;&gt; Got it. &gt;&gt; Actually, the money in a 501(c)(6) or something. &gt;&gt; Sure. &gt;&gt; Yeah. Anyways. If you're interested and you can become a backer and that will help the project become even better. &gt;&gt; Okay. &gt;&gt; Yeah. It's got over Doing pretty good. [inaudible] I recommend checking it out. We have some documentation that is a little bit rewritten, that's on me to actually fix. &gt;&gt; Well, that's also it involved to help out &gt;&gt; Yeah. If you are using Ionide, you need to make sure you're which is going to be coming out That's going to come with Everything is going to be fully Because today, it uses but it's now moved over to &gt;&gt; Okay. &gt;&gt; Massive performance improvements, couple of brand new features as well, and a whole lot of just So like all sorts of people have had over the past year A good lot of them have now and they're solid now. &gt;&gt; Awesome. &gt;&gt; Yeah. &gt;&gt; Great. Well, thank you and letting us know about Ionide. &gt;&gt; Yeah, absolutely. &gt;&gt; Thank you-all for watching. This has been another episode where we learnt all about Ionide inside of Visual Studio Code. [MUSIC]