Let's walk through how we can self-host going to deploy a Next.js app, a PostgreSQL all to our $4 Linux VPS or virtual private tutorial is a domain name, a VPS that Docker on your machine (which you can install on We're going to SSH into our server and there. We're going to put a Next.js and I'm going to walk you through the talk through some of the trade-offs as well. So, quick little outline here: First, we're to talk about a VPS versus a dedicated server and this deploy script that I've created. I'm going app that I built, including pretty much all of the them in Next.js when you're self-hosting. We're about some of the trade-offs of rolling your own using a cloud service. Then we'll also talk about the end. As always, the code is open source if Before we get into it, I want to show the tutorial. It's got some of the features that the Next.js server, doing streaming with server boundaries. We've got a PostgreSQL database set up. So if I view this demo of ISR, it's okay, now we've got fresh content revalidated in some code when the server starts up, environment going to get into all of those and show some Okay, so first things first, we need a There's a bunch of different places you can I opted to use DigitalOcean. I actually didn't very minimal hardware - I mean, 512mb of memory options here. If you're familiar with DigitalOcean really affordable cloud infrastructure. Some of you can get for the price. Obviously, there but there are some pretty good options here In this instance, I've gone ahead and and I have this turned on and set up in to a lot of things. The first thing you're which I think is a recent addition that your disk size. You can go in here and purchase your server, but for right now, the main IP address is how we're going to be able Let's take our IP address. I'll just our editor. For this tutorial, I'm using you can use whatever editor you want. top and I've got two terminals on the bottom First, let's actually connect to our server. So server IP. This is going to ask me for a password, and we are in. Just like that, we're is going to be our playground, our sandbox for Before we do that, I want to quickly talk about servers and having your own dedicated server virtual private server, you have multiple clients you're sharing that hardware amongst multiple you're paying for that exclusivity. That's part affordable rate - it's very affordable for these Now, there are some trade-offs here between VPSs cost, and performance, overall control of your scale, and we're going to talk through some of you can think of a dedicated server being a little bit faster hardware, but getting VPS is a bad option. It's just sometimes you We're going to be deploying a PostgreSQL database lot of this applies to databases as well. Namely whether you have dedicated infrastructure, or in reliability, in ease of use, and how much really doing a lot with your database and you're you're not doing a lot of reads and writes, it Some VPSs offer things like backups and you need to have managed hardware or dedicated you. And then going all the way to managed bunch of things on top like automatic backups I just wanted to quickly mention that because which is a bit chunkier than others. If you you might check out SQLite as Now, there are two main ways of scaling your scaling. With vertical scaling, you can basically more RAM, or more storage. And so this can sometimes take you pretty far. On where you can add more containers to your like a load balancer, that's going to be able to Now, the biggest pro of vertical scaling is that the con is that it's a single point of failure. well, you're not going to have a good where you have multiple containers, this and it can also enable zero downtime deploys to one container at 100%, you can start and only when that's finished, So, back in our editor, back SSHed into our up all the infrastructure for your application we have all the steps in the README, and talk through what's actually First, I'm going to run this cURL command. which is going to take that deploy script back and we're going to take this and change it's executable so we can run it. And then But before we do that, I want to go to talk about it a little bit. So this is you necessarily have to use. It's more so an how all of this works. We'll talk through some this gives you a better understanding So first, we have some environment variables at database name. We generate a random secrets for your application that are are the two that you're going to want to So on your server, the way you can do this So in my SSH to my server, I can actually do &quot;vi to open up this file. I can navigate down with w w and okay, now I'm on this value that so ci and then the quote. I can change that &quot;[my-fancy-domain.com](http://my-fancy-domain.com/)&quot;. to go from insert mode into normal mode so I can And then kind of same thing here with our email. in quote&quot; again and change this to whatever I mess something up. And then when you're ready write quit, and you're done. If I have another free resource on my GitHub So now you've subbed this out with run the deploy script. And as this is running, I'm going to talk through some of the So it's going to go and clone our here at the top. We are going to update all can think of apt kind of like npm but for We're going to set up some swap space. So this is $4 VPS worked pretty well, and then eventually that was because I had only 512 megs of memory. So for me to run builds and not run out of memory. Next, we're going to go and install all the things that we need. Going going to hit enter so that we can Okay, we're going to install Docker Compose, make it so it can be executable, make sure it's in you don't necessarily need to know all of it, of things. Then we're going to start Docker Then we're going to clone the git repository, that actually just happened. we're seeing the Docker build starting. to set up some environment variables that we Awesome. We install Nginx, which is our using Certbot. And then here is where which is going to have rate limiting set it's going to have proxy buffering disabled down in here to where we're actually going into We're running Docker Compose, which is happening our application. And we make sure that it worked, &quot;Deployment complete&quot;, and here's all the Let's just scroll up for a second here and git output where we cloned our repository. We Great. And now we see our Docker So while this is going, let's actually talk image for my application is a multi-stage going to install all the dependencies. The nothing has changed in the first stage, it can The second stage is where we're going to going to go into this directory, we're going run our build command. And then finally, we everything that we built like the public assets, going to talk about a little bit later, as well So back in the bottom left, you can see we're While this is running, I'm going to talk a bit is. So if I go to our next.config, I 'standalone'. This is going to help reduce 80%. It really only includes the stuff that highly recommend that. That's why we were, we were coming from this .next/standalone you'll see that my start command is actually So down in the bottom left, you can see started successfully. We have our and hey, I also have a cron job And we see our .env file was created Now you see I had three containers. How did I have a Docker Compose file. This is my application. So the first one is on our database. And you'll notice that for I'm using this network. The network is how So we've got our Next.js app, we've got our and ports and again has this network, and it's using comes pre-installed with curl so then it's using just built-in features a command and periodically ping this endpoint. so we're calling back to that first service. just clear out our database. And that's So let me go back to our server. Seems like and running. Let's just make sure that everything change directory, and this is the name of the you'd like. So now we're inside of this app. running. We can see we have these three running show is if I list out all of the files here, that got the right values. So let's do a 'cat password, database. Awesome. The database URL and then the other environment variables So if we go back to our browser, we can and running. If I reload the page, I get a new here. We have not only our Next.js app running, I've already pointed my domain's DNS, the address of my server. That's something that you can access it at the domain But that's pretty much it for the deploy and this is something I want to highlight, have to use a VPS. You can use your own container service where you just bring your Some good options are things like Google is really a great skill to learn and just to take control of your infrastructure and Okay, so we set up our Linux server, we talked versus dedicated servers, we ran our deploy we've SSHed into it. Now let's actually talk through how we configure them when self-hosting So the first one is data fetching. I'm runs this page as server-rendered, so every single request. So being served I don't actually have to configure anything The second one is image optimization. you can optimize images on the Next.js tab and I reload the page, what you're going to back to our domain slash underscore next slash back to the server. You pass it the it's a remote image from Unsplash. And what that raw JPEG or PNG and it's going to optimize WebP or AVIF if you would prefer, and it's going which you can configure if you would like, and Now, if you don't want to use this, you have in Next.js 15, we made it so that you your server to do image optimization. we recommended that you would install Sharp. It's a little bit better for your self-hosted WebAssembly-based version. So now that's But let's say actually I don't want to use How could I bring my own? So inside I actually have that image that I'm using. and I'm not configuring anything else. So I'm And if I go to our next.config, I I have a few options. I'm using this remote should allow images to be optimized from. possible here so that you're only allowing want it to optimize for. So try to make this as this new option for secureURLs or the query going to not allow any. But that helps prevent, if somebody tries to add a bunch of different Now let's say that you don't want to use the take this loader and loader file. and we can do a custom loader and we can go to image-loader.ts here. This client component image and kind of construct it in any way you you get the quality, you're going to return back could use something like Cloudinary or some other optimization service that you have on a different Now let's look at streaming server components. and we're using Suspense around those 1, 2, 3, 4, 5. If you remember from our deploy we disabled proxy buffering. We we want to be able to stream responses. Back in our editor, if I go to the streaming page, we'll start at the bottom. We have all and each one of them has this loading card, The async data component is fetching some doing here for fetching data is just using One thing to note here is that we want to let Nginx do the compression, in our Next.js app. This prevents the Now let's look at how we can talk to our I'm using Drizzle as an ORM to connect we're going to see some values I've reload the page, and delete If we check out our editor, here's the page for database. We have a form that uses a server action to-dos and list them out. For our actions, which inserts and then revalidates the path, and To validate that this is working, we can back to our README; I've included some can use is this Docker exec command, It's going to run psql with the user that you provided. If you've changed that, of I'm going to take that and enter into our Docker to our database. For example, I can see the users my to-do table. It's awesome to see that it Next, we have ISR (Incremental Static in Next.js. This is for both the Pages and I've seen the most questions about and that people first about how it works by default and then By default, the ISR setup in Next.js uses a least and you don't really have to configure work out of the box. Let me show you If I go here, this page has been fresh for about the Pokemon. But the revalidation was actually 10 seconds. So when I landed on this I get new data. I've been talking here I can get this new value. Of course, I can also I think I have a bug there with my timing, Let's take a look at what this looks like on the date it was generated at, and then I put some this little freshness timer, and I have a form call revalidatePath on /ISR. I can also have the route segment level, which is a fancy way of revalidate = 10 as well. Fetching a Pokemon is Again, this works without having to But this is on a single container. Let me go you can go in here and change the cacheHandler. provide a cacheHandler file, and then we can When you do this, it allows you to configure it storage, you can use Redis, you can do actually a really helpful community package that What I've done in this app is created a a .cache directory, and it has some of see what this looks like. The bulk of it has a get where we go based on a key, it has a set, it has a revalidateTag. there isn't revalidatePath. RevalidateTag is the the paths are actually just tags. So /ISR is Let's go back to our next.config.ts, and I want uncommented and disabled in-memory caching for our then I'm also going to open another terminal and going to do a production build, and then we're so we can get the perfect semantics for what We'll wait for this to finish and start up our and I'm going to go back to here. we're going to go to the demo, and we 10-second period for freshness. So if I reload But then once 10 seconds passes, now it's we've revalidated in the What I've done in this custom cacheHandler is of see what's happening behind the scenes. We cache misses, we set the cache data, and we can an internal tag name used for Next.js. I reloaded cache hits, and then it was stale, so we cleared You don't necessarily need to do this; I just into how caching works behind the scenes. essentially doing for you, and you can continue Next up, we have middleware. We have an is protected by a cookie. Let me go to here middleware - all it's doing is saying, &quot;Hey, if we just redirect back to the index route.&quot; So here, I'm on the root route. I click &quot;View So what I want to do is, if I go to cookies, is going to be one. Now if I click on &quot;View Another thing that I'm showing in here, which is protected page, all I'm doing inside of this variable and displaying it on the page. You'll This prefix means that we are intentionally and we want it to be bundled as part of Just to make that point more obvious, Source,&quot; and then I can search for and then we see the actual value that's I'm actually going to jump down to the bottom one, then we'll come back up. So the other bit on which is I only ever want these environment process.env, we're reading MY_SECRET. like. This is on the page here, so I have This is running in an async server so we're able to read these values dynamically and Now there's another case, which I think is pretty is wanting to read some code on server startup. stabilized in Next.js 15 called instrumentation. observability tools, but it can also be really this code on startup. For example, to register For this demo, what I did is I actually environment variables for HashiCorp Vault. I forward along the API key I have, I set it as a SECRET_API_KEY with Back in my page, that means that I can maybe to pass to some authorization header or a pretty common thing that you might want to see, than put it on the globals, but this is just The last two things in the demo and the second is rate limiting. For the cron, if you remember, it was clearing out the data now. If I go to &quot;View Demo,&quot; we see okay, new items if I want. This happens by this and it does db.delete on the to-dos table and The last thing I want to show is rate we added some rate limiting rules to our Nginx bunch of requests to next-self-host.dev using this 10 connections, run it for 5 seconds. We can in that time, 691 of them were blocked. So we prevent some of that traffic. Of course, you can bad actors on your site, but just a pretty basic All right, back to our outline. I think we've all of the demo features. I want to talk setup and using managed services, and then also To help visualize this, we're going to Pokemon references. I don't know so I've been building along with this to help your own infrastructure and kind of when So go on this journey with me. We have of our VPS that has a Docker container Next.js. It has rendering, it has caching and ISR all together in that we also have another container with our database Now, when your application and depending on the hardware that you want, You don't necessarily always want your server compete with doing your image optimization So one next step for scaling your infrastructure and then horizontally scaling your different one container - this is the Charmeleon - you have image optimization using that custom loader that own service. So you could use a tool like ipx, standalone API basically that's optimizing your so you can kind of mix and match the self-hosted The last part we talked about, that rolling your own custom ISR caching separate instance where you're kind of you're communicating back and forth Now if you keep going and you keep scaling and up with something like Charizard, where you've got which is kind of like that horizontal scaling different versions of your Next.js container. rendering, you might have another one doing or three with your database, another one with What Kubernetes is going to allow you to do or your Nginx, you're going to be able to send will give you that kind of zero downtime Now that's not to say this is the but it was kind of helpful for me to kind of put of what it might look like as you grow and the Charmander version here if your goal cost-efficiently as possible. This can be a your own infrastructure. You're kind of trading of that infrastructure yourself, and maybe you What I noticed a lot of people asking me when about a VPS,&quot; a lot of folks were asking, you obviously work for a company that's offering would you teach people how to do this?&quot; And I Next.js community have options. They're able to They understand that this open-source framework I also think it's helpful because you can Vercel is doing behind the scenes for you in kind of visualize that a little bit, so far single region application, and that can get if I'm building my blog, maybe it doesn't What Vercel is going to do, even on our free tier, all over the world. So a user makes a request to level that's going to first take action at the of points of presence around the world. Next, or one in Europe or APAC, and then we go into So everything that we talked through here it's kind of like what Vercel's DevOps team is Mega Charizard that is running Kubernetes for has some default system DDoS protection with our rules for rate limiting or blocking IPs or ASNs or We have our own kind of routing system that is add headers, run some middleware at this the compute level. We have a cache for your page service that's been plucked out like we talked and then it makes requests to other APIs that across your application. So you have the you have image optimization, which is a separate in object storage. So across all of these them and vertically scale them as well. So if we're going to have more functions that run, into one function. What Vercel is trying to you to take your infrastructure and run it, and But I think it's important to call out that you know, you might just need this Charmander, options. And hopefully now, after walking infrastructure a little bit better. You how to set this up on your own, and ultimately I mean, we are so lucky to have so many own infrastructure. The hardware has got so fast, or you can use a managed frontend cloud like tier if you want to scale even further, and both Going back to some of the differences and rolling your own infrastructure, I would is this idea of framework-defined infrastructure. you're actually not writing any of that infrastructure as code like Terraform. you're just writing the framework code. Vercel is hooking up the pieces of your code, like the and streaming those functions. We're kind of get back to building your application. And The second one is around cost controls. You want you're spending and kind of get visibility into spend management, which allows you to set both want to spend $60, you can only spend $60 and be traffic. It's kind of similar to, &quot;Oh no, I've ran up for this demand.&quot; So in the VPS case, your site that because you didn't want to spend more than that off button if you really want to. I think have, and we have a whole bunch of other tools for into your usage and into your bills. And I think Another thing to mention is that if you can just deploy your Next.js app as a so just the HTML, JavaScript, CSS files. you can basically put that anywhere. That's also but it does limit the features you can use, you can't use ISR, you can't do image So it's just worth noting that it's a little bit but it does exist if you want to build There are also other adapters in the and deploying other places, whether that's to serverless infrastructure on AWS. Shout out helping push that forward. There are also other a Vercel-like experience if you're deploying and it kind of gives you some of the things that Another one that I really like, and that I is Puma. The team over at 37signals and of work into it. It's basically like where you define it with some config, and it's all deployed on your VPS or your Puma, you can now do multiple apps on one VPS Lastly, two quick shoutouts I want to give. One, optimization on a separate box and IPFS. Also, easy to use. And secondly, thank you to Brandon good post about self-hosting Next.js and gave the experience. Very happy to say that we've outlined here in image optimization, in caching, the self-hosting experience. So thank you, And I think that covers everything. I know this far, thank you for making it this far. Feel want to see more content on Next.js. Hopefully, your questions around self-hosting and how you work on your own cloud infrastructure, your want to use. That's all for now. Let me know in