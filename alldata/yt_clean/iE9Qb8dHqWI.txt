Let's say you want to deploy the following apply the YAML file. Now, when you type First of all, kubectl will read your local to the Kubernetes API server and discover available APIs and how they can be used. validation to check for any obvious errors it will convert your pod to a JSON object and send When the kube-apiserver receives a request, it does not store it immediately in the that your request is legitimate. That is to Once the request is authenticated, it to create those resources in the request. it doesn't mean you can create The authorization is usually done It allows you to assign granular permissions RBAC roles are frequently aligned with apps, and departments. You could create roles Now, in more practical terms, the When it receives the request, it authenticates the request and return a 401 Unauthorized When the user is authenticated, it checks if it will reject the request and return it will continue executing the request. In this video, we'll focus The RBAC model is designed to grant access users within the organization. To let's take a step back and pretend that you had So how could you ensure that particular resource? One of the simplest three columns like this. You could have In this example, John has read and write access Jennifer have only read access to app2 and fine with a small number of users and Let's say that Robert and Jennifer are in the same In that case, you would need to add the following obvious that Robert and Jennifer have the same In a typical authorization system, you have assign permissions is directly to a user and permissions map directly to the resources. Notice a second user with the same permissions, Now, to solve the previous problem, you could way is to break down the relationships. for permissions: a role. Then, instead of you could assign those permissions to the roles. Let's see how this is different. Instead of having table, permissions are mapped to roles. In the Let's say you want Robert to be an admin for At this point, you should understand how can improve security administration in large When using RBAC, you have users, resources, directly to a user. Instead, they are included with a binding. Since roles are generic, when you can use an existing role Kubernetes also uses the RBAC model to It utilizes the same three concepts and bindings, but calls them Alright, let's go over an example services, and other resources. which is the identity of who is accessing the permissions to access the resources. And finally, which is a service account, to the After you submit these definitions to the account will be allowed to issue requests to created RBAC objects yourself but only relied it can be a bit confusing. You may be wondering what a service account is, and why the To better understand how these work, let's rebuild it from scratch. We will focus on three granting permissions, and finally Let's say someone on your team wants to log you should have an entity with each having a unique name Now, how should you store the User in the cluster, represent regular user accounts? So, users cannot any actor representing a valid certificate is considered authenticated. In this from the common name field in the "subject" of the is created and passed to the authorization RBAC which is a GoLang struct that maps all of the Just keep in mind that the User is used for humans If you need to create an identity that will be account. It is very similar to the regular user, A service account is usually assigned to you may have Prometheus deployed inside the or perhaps an Nginx ingress controller the backend endpoints for a service. For Since service accounts are managed within other Kubernetes resource via a YAML file. You can This is convenient if you want to reference At this point, you have a mechanism to identify human, an application, or a group of them. But In Kubernetes, we are interested in controlling Endpoints, etc. These resources (etcd) and accessed via built-in APIs like this. Now, the best way to limit access how those API endpoints are requested. For that, you would need two things. First, the API the type of permission granted to access the etc. So, for the permissions, you will use a verb Now let's say you want to get, list, and watch could combine those resources and You could simplify the definition and make First, the base URL /api/v1/namespaces/ is common you could assume that all resources the namespace path as well. This looks and you can immediately identify what's going on. But there's more. Besides APIs endpoints, and services, Kubernetes also when we deploy the Prometheus operator resources. These objects are also stored in the Additionally, custom resources can be accessed via a YAML file, you could write the following Well, it's nice and short, but how does custom? So, how can it differentiate between dropping the base URL from the API endpoint wasn't slight change. You could define it at the top and Now, what about resources such as Pods Kubernetes provides an empty API objects. So the previous definition You have two cases when Kubernetes reads the Kubernetes expands it to /api/v1/ it uses the following pattern. will be expanded to the following endpoints, and Now that you know how to map it's finally time to combine them together a collection of resources and verbs is called Each rule contains the "apiGroups," "resources," of rules has a specific name in Kubernetes, we've modeled Identities with Users, as Permissions to resources with Roles. The Now, to grant permissions defined in or a Group, we use RoleBinding. This definition has two important fields. "viewer" Role. Next is "subjects". It As soon as you submit this RoleBinding to the Service Account will have access But if you remove the binding, the app or while the Role itself will stay Take a look at the "subjects" field again. and "namespace". The "kind" property Service Accounts, and Groups. In general, it's often helpful to break the limit access to namespaced resources to you share the same Kubernetes In most cases, Roles and RoleBindings are created within that particular namespace. However, ClusterRoles with RoleBindings, granting access Before we move to the next topic, let's "subjects" field is used. In this case, this targets all service accounts in all Users, or Service Accounts as subjects like this. Let's go over a quick exercise. Let's say you Kubernetes cluster. And you want to grant namespace. For example, they should be allowed get logs from those pods. By the way, all the Now, because we use Minikube I'll create a service account instead of First of all, we need to create a which will be located in the staging namespace. to get pods, services, and retrieve we need to bind the QA service account to the one located in the staging namespace and One way to pretend to be a QA team member we can use the following command to check if we can. Now, what about the production namespace? You can also try to get logs from the pod in When we discussed resources, you following structure. But what about such as Persistent Volumes and Nodes? Namespaced and the name of that namespace is included like in the case of a Node, the namespace Now, can you add those to a Role? Well, yes, namespace limitation when we were talking about If you try to submit that definition and link it actually work. Persistent Volumes and Nodes are grant access to resources scoped to a namespace. entire cluster, you can use a ClusterRole To make our previous example work, you only need stays the same. You can also use ClusterRoles to to all Pods in the cluster instead of staging. This functionality isn't restricted to Kubernetes actually ships with a few Roles at them. You can use grep and use 'system' managed by the control plane. Also, all of the are labeled with the following label. can also inspect the details of each Role At this point, you know the basic How to create identities with How to assign permissions to How to assign permissions to cluster And how to link Roles and There's only one missing topic left to At a high level, Roles and RoleBindings are placed while ClusterRoles and ClusterRoleBindings across to the entire cluster. However, it is For example, what happens when a RoleBinding links next with some hands-on practice. Let's start To start, let's create four create a Service Account in the dev service account using the apply command. At Let's start with creating a Role and a RoleBinding to grant the Service Account access to which is placed inside the dev namespace, as After you apply these, your cluster should look and RoleBinding--are in the dev namespace. and the RoleBinding links the Well, how do you test that the Service You can combine two features of kubectl. API access with the following commands. Account and check if you can list Pods in command. Let's break it down. query the authorization model (RBAC). "-n dev" is the namespace where And "--as=system:serviceaccount:dev:myapp" Account from the dev namespace. some extra hints to identify the Service down to the following pattern. With this you can access all resources in the dev namespace. Let's create a new Role and RoleBinding in the links the role from the staging namespace and let's go ahead and apply. At this point, Now, let's test if the Service Account located in the staging namespace. This works. We the namespace where the service account roleRef property in the RoleBinding implication is that a RoleBinding can only Now let's take a look at ClusterRoles. As you This means that a ClusterRole does not scope when a ClusterRole is linked to a the ClusterRole permissions only apply to the Let's look at the following example. Create a Service Account to the ClusterRole cluster-admin. ClusterRoles in Kubernetes, created when you Now your cluster looks like this. located in the dev namespace has access to it does not have access to other namespaces. In this scenario, when you use RoleBindings the ClusterRole behaves as if it were only to the current namespace In this last scenario, we'll create a to the Service Account. Note that we also don't ClusterRoleBinding cannot identify a Role to and ClusterRoleBindings, along with are not namespaced. And now your cluster looks like this. the ClusterRoleBinding defined any namespaces, the From these examples, you can observe some Roles and RoleBindings must RoleBindings can exist in separate RoleBindings can link ClusterRoles, but they only ClusterRoleBindings link accounts to ClusterRoles and grant access across all resources. Perhaps the most interesting implication common permissions expressed in a by a RoleBinding. This removes the need to The typical rules section of a Role or the above configurations can be rewritten using the number of lines and, in my opinion, I have other tutorials on my channel and more. If you're interested, you