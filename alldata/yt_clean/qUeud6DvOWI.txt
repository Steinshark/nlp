welcome to my list of the top things away four professional licenses to pycharm, so some of these are actual issues for your code, nevertheless these things will tip people off to noob looking to get better, or if you just want to let's dive in. alright, newbie thing number things together with the plus sign. instead, use and less prone to errors. number two: manually tutorials recommend doing something like this. if this write call throws an exception, instead use a with statement, which will ensure on a similar note, number three is using i usually see this one from more experienced in python, most resources that need to use it. number four: using a bare except clause. are propagated using exceptions. that means, for like the user hitting ctrl-c. that's almost never be lazy but you don't want to trap your user in a do the right thing then catch the actual exception the carrot means exponentiation. nope, it's but i gotta pad the list somehow, right? number argument defaults are defined when the in this case that means every call to the function we call it, it's not starting out as the empty zero from the previous call. probably not what you it to None and then check if it's None inside the never using comprehensions, or if they do a lot of code can be made both shorter you can have dictionary, list, set, and even when they're appropriate. number eight: _always_ about comprehensions and now it's time to flex. every single loop into a comprehension. sometimes readability is really in the eye of the beholder, but i hope you can agree that not every number nine: checking for a type with ==. there but most of the time this is not what you want. tuple, so this Point class is a tuple. but it's in most cases you should program in a way where its parent. this is called the Liskov substitution is a violation of it. in most cases, what you number 10: using == to check for None, True, and identity using the is comparison. this is what middleman and use is directly. 11: using an particularly wrong about these. it's just that so using an &quot;if bool&quot; or &quot;if length&quot; check kind that well. number 12: using the &quot;range length&quot; coming from other languages, think about loops in but only ever use them to grab out the elements. and get the elements directly. it's much easier want to use the index though, you still shouldn't and the element at the same time. another reason a synchronizing variable to get corresponding the better way to do that is using zip, and if number 13: looping over the &quot;.keys()&quot; of a if you're modifying the dictionary as you're a copy of the keys. depending on the situation in this case the &quot;.keys()&quot; is unnecessary. number if you're looping over the keys of a dictionary for each key, then what you really want is to loop value pairs. number 15: not using tuple unpacking. elements out as separate variables? well you're number 16: creating your own index counter adding one to something at the end of every loop, number 17: using time.time to time. i think we they supposed to know that time.time is not for what time it currently is and it's not as accurate calls to perf_counter gives you the most accurate to run. number 18: littering your code with print you can set up logging easily in your you can also set the logging level or take it that you're not interested in. there, doesn't that function in the subprocess library. &quot;shell=True&quot; and ,let's be honest, the reason you probably did arguments into a list. number 20: doing math, or learn to use numpy for array operations and learn 21: using &quot;import *&quot; outside of an interactive namespace with variables. instead, just import depending on a specific directory structure for that all of your source files are going probably unknowingly, are depending on python checks for it in your system path. python to the path, so this usually works. trouble if you have multiple scripts take the time to learn how to package your code number 23: the common misconception that python files next to your &quot;.py&quot; files? or maybe they are compiled python code. but of course python is well python is compiled, but it's not compiled it's compiled to bytecode. that bytecode is then pep8. pep8 is nothing more than a style guide, nevertheless, your co-workers, contributors, and conform. at this point, whether it actually is kind of irrelevant. experts do it this way to number 25: pretty much anything to do with python only reason you should still be using it is if you and it would be too much work to migrate. all new and with that comes dispelling some rumors leaking this code will execute instantly. ranges if something is in a range will happen quickly. to construct all the numbers to tell whether it compares to the boundary elements, and that's like the changed behavior of keys. this no longer instead, it produces a &quot;view&quot;. that means if view either. there are so many of these python 2-3 own whole video, so just always be sure to check to my patrons and donors for supporting me. if subscribe, and slap that like button an odd number please consider becoming one of my patrons