- Right now some nation states and individual actors are of encrypted data like and social security numbers. But they can't open these files. So why are they doing it? Well, because they believe that within the next 10 to 20 years, they will have access that can break the encryption in minutes. This procedure is known as Store Now, Decrypt Later or SNDL. And it works because there that will still be valuable in a decade. Things like industrial and and top secret government intelligence, and everyone is aware of this threat. The National Security Administration says that a sufficiently if built would be capable of undermining all widely deployed public key algorithms. - You know in a five to 10 year timeframe, quantum computing will break - Even though sufficiently are still years away, they're already a threat because which is why the US Congress mandating all agencies start transitioning right now to new methods of cryptography that can't be broken by quantum computers. You know, our current encryption schemes have been remarkably successful working effectively for over 40 years. Up until the 1970s, if private information with someone, you would first have to meet up in person and share a secret key. This same key would be used to So it's known as a As long as no one else gets your messages are safe. But now what if you wanna send information to someone you've never met, and it's too hard to arrange You can't share a key like a phone line or the mail, because it could be intercepted. And this is what in 1977, Riverst, Shamir, and Adelman to come up with an Today it's known by their initials RSA, and it works something like this. Every person has two all their own which they keep secret. They multiply these numbers together to get an even bigger number, which they make public Now, if I wanna send I use their big public And I garble it in such a to ungarble without knowing that made that number. This is an asymmetric key system, since different keys are used to encrypt and decrypt the message. So it's easy for my intended but impossible for everyone else, unless they can factor Now, someone could try to factor in the best known factoring algorithm the General Number Field uses prime numbers that Factoring a product of even with a supercomputer, would take around 16 million years, but not on a quantum computer. See, in normal computers, a bit can only be in one state at a time, So if you had two bits, they could be in one of four possible Let's say each of these 0, 1, 2, or 3. If we want to do a calculation, to the power of one of these numbers, we can only do it for one state at a time, in this case seven squared and so we get the answer 49. Quantum computers consist of qubits which also have two states, zero or one. But unlike a classical bit, a qubit, doesn't have to be in It can be in an arbitrary a superposition if you So if you have two qubits, in a superposition of 0, 1, 2, and 3. Now, when we repeat the same calculation, it will actually perform the calculation for all of those numbers at the same time. And what we're left with is a super position 1, 7, 49 and 343. If we add another qubit, we double the number of possible states. So with three qubits, we and thus perform eight Increase that number to just 20 qubits, and you can already represent over a million different states, meaning you can simultaneously compute over a million different answers. With 300 qubits, you can than there are particles This sounds incredibly powerful and it is, but there is one very big catch. All of the answers to the in a superposition of states, but you can't simply read When you make a measurement, from the superposition and all the other information is lost. So in order to harness the you need a smart way to convert into one that contains only This is an incredibly difficult task, which is why for most applications, quantum computers are useless. So far, we've only where we can actually do this, these are precisely the problems of nearly all the public key In 1994, Peter Shor and how to take a quantum Fourier transform. It works just like a apply it to some periodic signal, and it returns the frequencies Now this may not seem but consider this. If we have a superposition that is the terms in the by some regular amount, well we can apply the and will be left with states that contain the frequency of the signal. So this we can measure. The quantum Fourier transform, allows us to extract frequency information from a periodic superposition, and that is gonna come in handy. So how does a quantum of two primes much faster I want to explain this by first walking through a simple example with and then I'll show how a quantum computer could execute this method even for a very large number So let's say we have a number N, which is the product For the sake of this example, Now I bet you can guess the prime factors, but let's pretend for the because with a product of Now I want to use a fact about numbers that feels like magic. Pick a number g that doesn't If you multiply g by itself you will always eventually, In other words, you can such that g to the power of r, Let's see how this works. Pick any number that is smaller than 77. I'll pick the number eight. This number doesn't share factors with 77. And if you were doing it would also be extremely unlikely that you just happen to pick a number that shares factors with N. Now multiply eight by itself four times, and so on, raising and then divide each We're not really interested 77 goes into the number, what's left over, because at some point, 77 should divide one of these numbers with a remainder of exactly one. So eight divided by 77 is 64 divided by 77 is zero remainder 64. 512 divided by 77 is six remainder 50. And as we keep going, we get remainders of 15, 43, 36, 57, 71, So there we have it, is one more than a multiple of 77. So we've found the exponent R But how does this help Well, we rearrange the equation to bring one over to the left hand side, and then we can split it And now as long as r is times another integer is This looks remarkably similar I mean since we know that p and q are on the right hand they must also be on the left hand side just multiplied by some So one way to think about what we've done is we've taken a bad guess and by finding the exponent r, we've turned it into that probably do share factors with N. Since r was 10, the two terms on the left hand side are eight to the power of five plus one, 32,769 and eight to the power of These two numbers probably So how do we find them? We use Euclid's algorithm. If you wanna find the of two numbers, say 32,769 and 77, divide the bigger number and record the remainder. In this case, 32,769 divided Then shift the numbers one So now we divide 77 by 44 Repeat the process again. 44 divided by 33 gives a remainder of 11 and again 33 divided by 11 When the remainder is zero, the divisor is the greatest common factor between the two numbers you started with. In this case, it's 11, which is indeed a factor of 77 and 32,769. You could do the same procedure with the other number or just its other prime factor. So to recap, if you wanna of a number N, first, make a bad guess, g, second, find out how many by itself to reach one Third, use that exponent to calculate two new numbers that probably And finally use Euclid's algorithm to find the shared factors which should give you p and q. Now, you don't need a quantum computer to run any of these steps, this method wouldn't be any The key process that a is step two, finding the to equal one more than a multiple of N. To see why, let's go back to our example, where eight to the power of 10 is one more than a multiple of 77. Watch what happens to the remainders if we keep going past to 8 to the 11, eight Well, we get remainders 57, 71, 29, and again one. The remainders cycle and Notice how the exponent of one is 20, which is 10 that yielded a remainder of one. So we know that eight to the 30 and eight to the 40, 8 by 10 will also be one It's also worth noting that say 15, the next time you the exponent will have increased by 10. So you can find the to one more than a multiple of n, by looking at the spacing of Remember that. Here I'm plotting out the so you can see they are If I had made a different guess, say I had picked G equals well then the period would be different and the remainders would be different but there would always Why is this? Well, now that you can see we can go back to the beginning and any number raised to So that is actually the first remainder. So it must also appear when Now we are ready to use a quantum computer to factor any large product of two primes. First we split up the The first set we prepare and one and two and three and four and five and six all the way up to 10 Yeah, this is a huge superposition, but if we had perfect qubits, it would require only around 4,100. The other set contains a all left in the zero state for now. Now we make our guess G, which most likely doesn't We raise G to the power and then we divide by N and store the remainder in leaving the first set of qubits as it was. Now we have a superposition we started with and the to the power of those And through this operation, we have entangled our two sets of qubits, but we can't just measure If we did, we would get a But there is a trick we can use. If we don't measure the but only the remainder part, we will obtain some random remainder. But this remainder won't occur just once. It will occur multiple times every time it comes up in the cycle. Imagine we were doing from before with N equals If the remainder we measured was say 15, then there would be multiple Because there are multiple exponents you can raise G2 that exponents 4, 14, 24, 34, and so on. They are each separated by 10, and that value is the exponent So more generally after we will be left with a that all share the same remainder and the exponents will all be separated by the same amount r. This is the number we are looking for. Since the remainder is now we can put it to the side and we now have a Each term is separated from If we now apply the to this superposition of states and I'm simplifying a little here, we will be left with states So all that's left to do now is perform a measurement and that's it for the quantum part. Now, as long as r turns out to be even we can use r to turn our bad guess g into two numbers that And as long as these terms themselves are not a multiple of N, we can use Euclid's algorithm and break the encryption. This would only take several but the qubits we have so we need additional qubits to act as redundant information. In 2012, it was estimated that it would take a to break RSA encryption, but by five years later that number had dropped to 230 million. And in 2019, after more that estimate plummeted to just So how many qubits do we have today? Well, if we look at the state we are nowhere near that number of qubits, but progress looks to be exponential. So now it's just a question of when these two curves will collide before all our existing public Because we've long known scientists have been looking which can withstand attacks from both normal and quantum computers. In 2016, the National Institute or NIST, launched a competition to find new encryption algorithms that aren't vulnerable Cryptographers from all over the world submitted 82 different proposals, which were rigorously And then on July 5th, 2022, NIST selected four of of their post-quantum So how do they work? Well, three of the algorithms are based on the mathematics of latices. So let's do a simple Take two vectors, r1 and different integer combinations of these vectors, say three you can get two different points and all the points you can get to by combining these two vectors in different ways is Now I will also give you the point C, and your task is to tell me will bring me to the It's pretty easy to see by going in the direction of r2 twice and in the negative direction of r1 twice. Simple enough. But those vectors, r1 and r2 are not the only vectors that can Take b1 and b2 for example. These vectors also build And now if I ask you can you tell me the that gets you to the This has become a lot Each time we're taking a step, in either the X or Y direction, each time we take a step with one vector, it puts us And that's why these vectors In the end, it takes us a combination of eight times b1 and to get to the closest lattice point. That is a lot harder than before, but it's still a relatively But if we extend it to three dimensions, this already becomes a lot harder, especially because you're of all lattice points. You're only given the So when you find a lattice you must still find all the to make sure yours is indeed the closest. Let's take a circle of The number of lattice is proportional to r squared. Add a third dimension in the sphere is proportional to r cubed. So just watch how the number as we increase the number of dimensions. Solving the closest vector problem is a piece of cake for your Even a hundred dimensions But in proposed future encryption schemes, we'll use around a thousand dimensions. Take one step in the right direction on one of those dimensions, be taking a wrong step in You win some, you lose everything else. With that many dimensions, it becomes extremely hard even for the most powerful computers, that is unless you know So how do we use that to encrypt data? Well, let's go back to our Each person has a good set of vectors that describes a lattice, but they keep these vectors secret, and they only share their lattice publicly using a set of vectors Now, if I want to send someone a message, I pick a point on their say this point corresponds So if I wanna send the number but then add some random noise to it. So the message I send is not precisely at that point but close to it. Now, to decode the message, which lattice point is In a thousand dimensions, this will be extremely hard to do unless you have the nice set of vectors, which my recipient does. So it's easy for the recipient, who has the good vectors, And as far as we know, difficult to solve for both Behind the scenes, there's mathematicians, and cryptographers, we're gonna make sure your These are some of the unsung heroes that will keep us safe moving forward, avoiding mass surveillance by governments keeping critical infrastructure protected and allowing you to live were never invented in the first place. (digital buzzing) Something that fascinates me is being able to see where the world is headed. And right now it's clear and AI chatbots are going to in our lives in the coming decades. Even if we don't know exactly I think it's important to and you can do that with this Brilliant has an incredible course on quantum algorithms. This one was co-developed I love that you can simulate and execute real quantum No need to set up your own And if you want to dive making and breaking codes is Strong statistical reasoning skills help us find patterns in data and make sense of them, which is crucial to mastering just about any topic in math and computer Science. Brilliant's course on data analysis will help you ramp up fast. It uses everyday situations, like business models to in statistics and it's interactive, so you can get hands on and develop a real intuition You know the thing that is they know how to into their core building blocks, whether you're learning or data analysis, Brilliant's thousands of bite-sized help you master key concepts and build to more advanced topics. You can try everything for free for a full 30 days. Just go to brilliant.org/veritasium. I will put that link And for viewers of this 20% off their annual premium subscription to the first 200 people to sign up. So I wanna thank Brilliant and I want to thank you for watching.