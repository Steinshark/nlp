Hi, everyone, welcome. In this video we are important and also how to use them. So we're going that you will use in git, and the ecosystem tutorial will include everything from basic Git intermediate concepts like branching and merging quickly introduce myself, my name is Gwen. And where I upload coding tutorial videos. And mostly on Python and JavaScript topics, as well can also find me on Twitter, and Instagram and And let's get started with the tutorial. I want what we call a version control system that is free version control system in development. Today, most So what is version control? version control is code changes, we basically save an initial version code, we can save it into Git again, and again and continues to change, we can look back at all of to see and understand what we did when, as well as of the code if we need to. So let's look at some video. First of all, I use the term directory, When I reference the terminal or command line, I computer, which is just an interface where you files and folders, create files, change update You might also hear me use the term COI, which that you install, as a programmer will require the command line. So you will be typing out double clicking on a folder icon on your desktop. Now you might be wondering, why are we going to one of these beautiful applications that handle it's always good to use the terminal. So you learn become accustomed to it. As a developer, you are see allies run programs, search for things, learning Git is a great way to get started with it's basically the same thing as when you double While in the command line, if you want to move you'll use CD, followed by the directions you want to get to. A code editor, of course this in a lot of different programming videos. you can write code anywhere in a text document, ones that are designed with lots of tools and code editors. Now some people get confused by the But in the world of programming, it usually refers project or the folder place where your project also sometimes confuse Git and GitHub. Now Git over time. GitHub is a website where you host all it easy to work in groups with other people, and show potential employers. So here are some of the which you will be typing into your terminal or for example, if there's a repository that is not want to bring it down on your local machine, so By the way, all of these commands are lowercase, through the examples in this video, when you have folders, you're going to want to tell get that you those changes. So you use the Add command for save the changes you make in your code. So you do your changes. Once you have made changes locally git, you tell Git to track them through the Add commit command. And then you upload your files remote repository, or GitHub alternative, like you do this through the push command. When there to bring those to your local machine, then you use remote repository. Those are all the commands we're going to go over examples of each of these. sign up for an account on GitHub. This is pretty and then you sign up for an account, you will get can log into your account. When you log in, you page that you can access from this drop down menu, way, you will have access to this green button where you can create a new repository. Now a your coding files and folders for whatever kind this is a repository that I have, it's for you can see the mockups pretty straightforward complete project with the folders and all of my this one application, each application or project ahead and create a new repository here, give it a repository. I'm going to leave these settings as create your files and folders for this repository straight in the online editor on the GitHub basic markdown file called a readme. And this is every project that contains text to describe any other relevant information. So I'm going to it readme.md for markdown. markdown is basically files. So I'm going to come down here and type like one hash tag for a main header. So I'm just so I'll put some description. And then I'll scroll save this file. I just want to point out really text. But if you don't write anything else here, the default. So let me commit. And you can see saved this README file. And now you can see the dot MD is the default file that GitHub always which is the same thing, except with a few I have this edit this file option. So I'm going to this to an exclamation point. Now the default readme.md, which isn't that descriptive, but it's committing, I saved my changes here. And if I go here as update readme.md. Now, if I want to see every commit that I've made, I can come here to And I can also see the message or the title that one and see what was added this green with the file. And then I'll go back, and in the updated that means this line was deleted, and then the anything that's white means it stayed the same. Now what about using this on your local machine, you should already have Git installed. You can line application and typing in get space dash I highly recommend checking out this tutorial by below. It walks you through how to install Git for the Windows installation, when you download the Git Bash option from the install menu. You up get in command prompt for you. But in the past, for Mac, it gives you a few different options homebrew package manager if you can. And it takes you probably already have Git installed if to worry about this. There's just one more piece Git tutorial. And that is getting a code editor. want. Any type of word processing software we'll specific ones may for coding, and many of them are code editor made by Microsoft is widely used with So you can install it for free from code dot operating system, Mac, Windows and Linux. Now folders inside. If you haven't used this before, going to navigate around your project and use your this bar comes out where I'm going to see all my real quick. In this test folder, when you go to I'm going to click Open. And now I have a folder actually add files and folders to but I'm not to pull the repo that we created at the beginning that to my local system using Git. So in Visual that I'm going to use. If I come up to the top, in select it. And now it opens this terminal here. because my folder is named Git. And because I've that as the directory for my terminal. So now I I want to pull all that code down here so I can called git clone. And then in clone or download So I'm going to copy this, go back to my terminal a folder here, which is my repo from GitHub that's going to move inside this folder real quick from then the name of the folder to change directory demo repo, which was the name of the repository it gave the folder this name, so my whole it says Git master. Now, this may look different every machine. I have a specific setup to make it see some kind of indication that you are in a looks like a regular folder and a regular README you can't see here. And that you won't see on to show hidden folders. And that is called the command in my terminal that I will use to show you is actually a Mac shorthand for ls space, dash l including hidden files and folders. So if you're But you can use ls space dash LA to do the same then there's something dot Git. And because it's this hidden Git folder, actually stores all of the over time. It has all of the changes recorded in ones we made on github.com. So now let's make some file, and come here and add a sub header. Not too and then some more text. Now that I have changed I do that through a commit still. So first, I'm status command shows me all of the files that were saved in a commit yet. So for example, if I come this index dot HTML. And I'm just going to put a rerun the git status command. And now you can see that it says is untracked, meaning Git doesn't to track the file before you can save it to get and then tell it which files to track. Now most of a period, which means you're telling Git to track the untracked and the modified section. So both index dot HTML would be staged with Git if we did you could also optionally tell it just the names Git to track. In this case, I'm just going to use And now you can see that all of the changes have now, and they are ready to be committed. So I'm now dash M is for message. And you need to have a could be one character in meaningless if you want, that message should have something to do with the I'm going to add a message here. Added index dot If you remember from the web interface, there first dash M and what's inside of the quotes description box. So I can say some description. information, two files change five insertions. commit isn't live on GitHub yet. We make it live which means I want to push this live to a In order to push them to GitHub under your GitHub that you are the owner of your account. your GitHub account somehow. The way this is by generating a key locally using the SSH key Gen and then the strength of encryption. And at address, this is just a test for me, because I put a fake email address. But make sure that the use to log into your GitHub account, click Enter. your user directory in the dot SSH directory, and give it a different name here, because I already enter a passphrase for your key here, or leave leave it blank. And my key has been generated. generated. And now I find that there are two. So dot pub is the key that you're going to upload to called your public key, which means that it's okay generated without the dot pub extension is called keep secure on your local machine, you don't share public key you put on GitHub, and then every time GitHub or use your account via your local machine, are the one that generated this public key. It's could have generated this public key. I'm going look something like this SSH dash, RSA starts with and it ends with your email. Now you need to copy it in your terminal or command line, which Ctrl or Command C, because Ctrl C actually means not copy. There's also a terminal command that you do the less than symbol and then the path to And I didn't actually push it, put it in the dot have your key in. And then it's just test key GitHub. I'm going to go to Settings. And in the GPG keys, and you can see any SSH keys associated key, you can give it whatever title you want. paste your key in here. And I'm going to remove to confirm my password. And now you can see left to do is to make sure that your local Git just generated. And I'm going to link all of these the SSH agent. Then if you're using version 10 file your SSH config and add this text to it. I'm Now. Paste the location of the file in your SSH at the end, you can paste in that information. my file set up So I'm going to delete it. After your terminal. And then your key will be set up to I covered with keys here is going to be linked in that you will do it with any operating system, Now there are two more arguments we have to put is master. Now origin is an option set for us the location of our Git repository. Master is the what that means in a minute. When I click Enter, code changes are all live on GitHub. Now, you can made online on github.com, and one that we made this was our commit message that we made locally. after that second dash m, we can see all of our So this was to demonstrate how to create a new you start a repo locally, so let me exit out called demo repo to drag it outside. So now it's Git repository that we have. But this one's there. So I'm going to move into that folder in you can see it's not a git repository. Even if I So let me first add a file in here. And I'm I'm going to add a header demo to and some text. I can use the command line and say Git init. And this folder, and now you can see I have the I can see there's this untracked README file, I period or the name of the file. git status again, now I will do git commit dash m, created README. Now what if I want to push this live? Let's try giving me this error fatal origin does not appear this down from a git repository. We didn't already So Git is saying I have no idea where to push this have to create that connection. And first, the Git repository up on GitHub. So I'm going to come this demo repo to don't need a description, going repository. So to start pushing here, I'm going somewhere else, but not on this computer. We're repository on GitHub. And then I'm going to say I can check that by saying Git remote dash V, connected to this repo. Now that these are set up. did before. Now, there's a shortcut here, because every time in the future, I can just use git push, meaning this is where I want to push it to upstream and then enter In the future, I can just it says to GitHub looks like everything was and I can see the readme that I just added. So push it to a remote location like GitHub. So let's and compare the flow of adding code in the So when we first started working in the GitHub and then we committed our changes we saved them here. And we never did a git add to stage changes. So really, by committing in GitHub, we are adding it really, because it was our repository, we we could just update the code just by committing have to push the code because it was already live because it's already in the remote repository. have access rights, or we needed other people all the rest of the code, then we would also have which is something we're going to cover later if we're just writing code on GitHub, versus doing luckily, in our text editor, we wrote the code. about the changes. And then we saved them to get them to the remote repository on GitHub, using the code or the code in the GitHub repository with our before, if we didn't have access rights, or we we'll need to make a pull request. So these two by using the GitHub web interface and then doing then please leave them in the comments below. Let's first go over some of the concepts practical example. Now, what is Git branching? called the master branch. Now master is a naming a repository. So if you're just working off of one your code, all your commits, everything will be because it starts to look more like a tree when that we had a master branch, we were committing another branch. We'll call it feature branch. So new branch. At first, the code on master and this as you make updates to the feature branch, those you make changes on the feature branch, you make And then you switch back to the master branch, you made on that feature branch. Each individual what changes have been made to any other branch. are made on its own branch. Now you can continue through a commit to the master branch. And then if you will not be able to see the changes that you extremely useful because you will be building out code or they are not finished yet. And you don't want to work on them in kind of a sandbox area. So and in the state that you want, before you merge And this is really helpful when you have many or a lot of different branches going on at in development is that you'll be working on let's you have all of these changes that you've made. you have to fix real quick. So for that, we make represented by yellow. And you can see that I made wrong with the code on its own branch, I made sure back into the master branch. Now that we've gone the command line and try it out. And now I'm using as I'm running different Git commands that are but it works the exact same way as the terminal inside of my demo repo again. And you can see here you might see this presented in different ways in git branch, you can see that I currently only see there's a star beside it. And that means that the letter Q here to get out of that. And now I'm git checkout. And git checkout is what you will to create a new branch, use dash B, and then you I'm going to call it feature. Now if you're to make this name as descriptive as possible. Some or description, or you can use hyphen. And then a GitHub issue number 11, or whatever convention if you want and put some more details. I'm going because I'm just going to be updating a section switched to a new branch, meaning I created this now you see that my branch changed. So now if I here, and the top one is starred and highlighted. I'm going to hit Q. And like I mentioned, git that I am on this feature reading instructions, I master. I'll do git branch shows them on master README instructions, you see that I hit the tab So I didn't have to type out the whole long name, the beginning, like in this case, I started actually start typing instructions and hit tab useful. Because eventually, when you work in with feature or with bug or hotfix or whatever. that's just something useful to know. So now I'm and I'm going to make some changes on this branch. README and make a new section. I'm going to say give it one step other than say open index dot I save that. And you can see in VS code, it gives I've last checked this into get. That's kind of added and which files you've modified right in some files, Here, I'm going to do the git status first, I'm going to save things that have changed command. And I'm just going to stage the readme and say, A, oops, I have to put that in quotes. So file changed for insertions. So now it's saved README instructions branch. So if I do a git see the changes aren't here, because they're only can go ahead and merge these two branches locally, I just want to double check and see the code that command. Now, diff, or diffing, shows me what of the code and shows me all of the lines that the Git interface, because you saw a nice visual green with a plus sign the lines that had been lines that had been removed. And let me say git And now you can see, it shows which file it's it shows text that was already been there, that master branch doesn't have some of the changes q here to get out of this. Alright, now I could go passed in the branch, and it'll merge in those are going to see is pushing these changes on that going to change back to the feature branch, and to commit, because they've already been committed. run git push. And now you can see, since I'm on a branch on GitHub I want to push to. Now the answer same thing on GitHub, and on your local machine. this set upstream flag here is the same thing just shorthand for set upstream. So I'm going to And it's even giving me a hint for how to create instructions here. So what is a pull request or pulled into another branch. In the example we're to have our code pulled into the master branch. So branch. Now once we have made a PR, anyone can changes or updates. Now, after you make a PR, you commits and pushing them up to GitHub, as long as with. Once the PR is merged, you'll generally switch back to the master branch. Then when you will create another new branch and start the merge again. And I could go straight to this URL, GitHub first. So I look at my GitHub interface. fact that I just pushed a new branch. So now it's new branch to another branch and create a pull Now sometimes this is confusing for people which GitHub interface does a pretty good job because you're comparing this feature, README instructions base branch where all the code is going to get comparing. So now I have this message, I have some more description here. So usually, I'm going maybe some description as to why I made certain section about local development to the readme, created a pull request, I can actually come here people have made on the pull request, or I can all the commits I've made that I'm trying to merge the files that have been changed, and see the diff thing I can do right here is if I want to make a written, I can press the plus button, this blue I'm just going to say, add a new sub header and the comment appears at the line of code where you there are multiple people working on a repository then usually the person who created this PR will commit, if changes need to be made to the code and merge this PR. And you'll notice that I added I'm the owner, here I have full permissions, I if you don't have permissions or your repo set up comments before you can merge. Anyway, I'm just Now that the PR is merged, I'm going to go over that I am on the master branch. And my changes merged. So locally, now I'm going to switch to the changes aren't there yet. And that's because down to my local environment. So to get the I'm going to do Git pull. Now, if I didn't already origin master. But I already have an upstream and then enter. And you can see one file changed I can see my local master has also been updated am done with that feature branch, I'm going to do not going to be using it again, because you don't into your master branch. So I'm going to go ahead branch, dash D, and then the name of the branch. now it says I deleted that branch. So now if alright, well, that's all fine and great and works have such an easy time merging. There's something you're building your own code writing a bunch of writing code on their branches. And master is So it's possible for multiple people to change know which code you want to keep, or which code is So you'll have to manually do that. Let's try that git checkout dash B. And then I'm just going to test branch. Now I'm going to come into index dot world. And P. Alright, so I modified this file, a good idea to do git status before you commit is do a git diff, enter, and it shows me all of So I'm going to hit Q, and now I will commit add, and then file name or period dad, everything because we've just modified one file. And the file which is why it says modified and not created. instead of dash m, I'm going to do dash A, which then I'm going to put my commit message. So this it only works for modified files, not for newly you have to stage that with Git and let get know added world. Okay, and now I have one file changed git checkout Master, you can see I don't have the updated the same line, so on Master, now I'm there so hello there. So now master has aligned to now everything is fine. Now because both branches together, whose line two is going to be put there. test branch. So I'm going to do git checkout. error and not letting me change branches. Because Master, it says it's going to be overwritten if before I change, so that way that line two will be lost when I change branches. Now stashing is But it's basically a way for you to stash your them later. But it's not making a commit to get. going to do that, I'm just going to go ahead and and I'm going to use the shorthand because I only git commit dash AM, and then a commit message, be able to check out and press the up arrow test branch. And before I merge master into real quick. And it shows me the changes here. So how I said before that merging locally wasn't branches into master. But Master gets updated as because maybe other people are merging into master But you don't want to get too far behind the going to be really difficult to merge later. So you're going to want to pull those down to your branch you're working off of like quick test here, branch up to date with what's going on in master. hit Enter. And now it says we have a conflict. there are a couple of ways to fix merge conflicts. fix them. You can also fix it in the terminal. directly in your code. A nice code editor like vi current change or accept incoming or take both the changes that you want and delete these lines a conflict. And first between this head and these current branch that we are on. And then it shows trying to merge in. So in this case, I am just changes. But in this case, one, two, line two and know what we want to do, because it didn't know and deleted the conflict markers, we can now look even though it seems like we are adding and need to make a commit because we have fixed the commit dash a m, and I can say merged in Master, And now I've officially updated my branch with the and I can continue coding whatever feature bug fix So what if we make a mistake? What if we get, and we didn't mean to do it, we can actually read me, I'm going to add another line here. And line 12. And back in my demo rebill, I'm going to this README. And let me do git status again, and and now changes to be committed, meaning they've staging, what if I didn't mean to stage this Git reset command. So I can either do Git reset just the name of the file that I want to onstage. and it gives me a list of the files. So unstaged git status, it shows me that this file is no so let me go ahead and add the readme file. And I'm going to say added install step. Now, if I do because all changes have now been committed. Well, same Git reset command. And this time, I'm going means to get is a pointer to the last commit. commit. And then I'm going to save till the one, last commit that I just made, right here, and head will now point back one commit further I just made. Let me click Enter. And now you I'm going to say git status. And what happened changes. So if I do git diff, you'll see that if you have many different commits, you might multiple commits. And for that there's no quick where you can just look at the last commit or see a log of all your commits. And you'll see that So this is the latest commit that we made. And why it's important to write a good commit message and see which commit is which to get these commits if you want to go back to a certain commit, you to go back to added world before I added the merged this there, from Master into this branch. when you see all of these commits, you can scroll end. So I'll say quit. So I'm going to do Git it's unstaged, any changes made to these files are still there. I added have fun and this line not saved in Git or stage with Git any longer. and I want to get rid of all of the changes after the Git reset command as well. Let me just grab a of random commits to this commit right here, where going to do Git reset dash dash hard, meaning I but to be completely removed. So head is now undone several commits now. And if I look at my erased the latest updates. So those are the basics and undoing staging and commits that you've made. forking, you may have seen this already in and then it's going to make a complete copy of the you probably don't want to fork your own repo code here, but you don't for other people's repos. so here's view, j, s. So let me click on this. And in this repo. So if I want to make a PR against or if I just want to be able to branch off of the then I want to fork it. So I'm going to hit the These are just groups that I'm a part of on over all the code, especially with Vue JS because see the repo is no longer under the View, j. s And now that I've forked this, I have complete want to this code. So if I want to come in to read there. And now I can come to the bottom and commit whatever I want, I'm just going to leave it with So before we worked off the master branch as being working in a larger project with other people, like master staging, and dev for different kinds the default branch for this repository, instead directly to Dev. And you can see my changes here. view repository, but they're part of the one that repository, including the branches associated with So now what if I wanted to get my changes back but what if I did, I would go and create a pull the place that I want to merge my changes into I Vue JS repository, and the branch and I want to and the branch on my repository that I updated, request, because this is just a demo, I can also made and what commits I've made to this branch on I can do that easily. Let's say, of course, there the same branch here. But I could merge into any merge straight into master. And you can see I request. And I'm going to create pull request. added to the pull request information. But I'm code. If I scroll down, of course, I'm on Dev, it also has my changes on master because I merged into one of our default branches like Master, been merged. In other words, we would delete because we're not using that branch anymore. But like Dev, staging and master, because generally, dev or master. And you have Dev and master and so you don't make any changes on Dev and master into dev or Master, depending on how your codebase we would merge all of our feature branches or bug delete the branch that we just merged in. And then those get merged into master. But dev never gets those kind of stay around forever. All the other fork allows me full rein, full access, full update, delete whatever I want to do with all to make some major updates, what I'm going to pull my fork down to my local machine, make all I want to do, I'll push them back up to my fork, repository. Thanks so much for watching. I hope something out of it. If you did, then don't forget Camp channel. Don't forget to check out my YouTube videos and livestreams on Python and JavaScript also appreciate if you would leave me a comment video or any other feedback that you might have.