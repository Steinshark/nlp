In this video, you're going to learn everything work with Redux Toolkit Query inside of React But before we get into that, there's two things if you enjoy the way that I teach in my videos, you should definitely check on my course, I teach in this video and really any of my build a big and complex application with React as which is a method that I haven't really seen have been on the course so far are loving it. honestly wish this for you as well. If this sounds React. And you're going to be able to find it in thing is if you want tips and tricks and really every single week completely for free, check out will not regret it. With that being said, we can Toolkit query. All right, so let's begin. So over this is actually the same exact code that I built video that I posted in the past. What we're going this code, which already has a basic store set up by adding Redux Toolkit query. Now, essentially, use Redux Toolkit query, you actually have to use same thing. We actually don't have to install any have to install are Redux and Redux Toolkit, which go over the code that we have here. Again, if you check out my Redux and Redux Toolkit tutorial everything that we have. So right here, we have an And we built a simple counter functionality useSelector. We're using useDispatch. And we and decrement the count. Here, the actual store, counter slice. There it is. This is our actual right? We have some initial state over here. The We're using createSlice, which comes directly from with some initial state. And then we functionality. And we also have asynchronous which essentially uses this builder. And then which is an asynchronous action that we what we're currently working with. Now, with much very similar. Because again, it is part of building another slice that is going to be an some data. And we're going to be doing pretty into our React application to consume the data, to any React component. So let's begin. So the first here inside of my folders over here. And I'm going to create a new folder over here. And we're going I'm going to create another slice. And we're to call the post API slice, because I want to slice. And this is going to be using the query API slice dot ts like so. And in here, we're related to fetching and querying our posts. So we're going to be using a helper from Redux using it from Redux toolkit query, it's not going So we're going to come here and we're going to API. And here we're going to import this from we're doing slash react, because we are working in simpler, because now we're explicitly saying toolkit query. And then we're going to have to takes in some options as the initial argument. So the first one that we're going to provide do reducer path. And here we're just going to do simple. It's pretty similar to the name over basic Redux toolkit. And essentially what this is of this actual reducer. And then everything against the posts reducer. And this is also going everything that is related to the post API slice action we're doing. And then the next property going to do base query. And this one is required. fetching some data, we actually need to provide function that will call each of our endpoints. And query is going to use this base query function, function and then make everything work exactly to use fetch base query, which we can import to This essentially is a very light wrapper on top of data, we're going to use the fetch function. And that Redux toolkit needs to be able to do you can actually create your own custom check out the documentation. But again, that's the purposes of this video, we're just going to from Redux toolkit query. And here, we're just object with one single property. And that is going actual base URL that all of our queries, all of this is useful, because you don't want to have to endpoint. Usually, you just define the path that is always going to be the same, right. So think, or your actual production API endpoint, if we actually don't have any real API implemented. a free public API called JSON placeholder dot that we can hit it return some data. And for be sufficient instead of us having to create our this video. And then after we did this, you're we're missing one required property. And that And this one, similarly to how we did it here in this was a function that received a builder we're going to do something very similar here, it is also going to accept a builder. And this this builder, we're going to be able to create for example, let's make our first query or first we're just going to have a very simple query, no the post from this base URL over here slash query or endpoint or actual function to call. we're just going to do builder dot query. And this take one argument, this is going to be an object. this. And we're just going to return actually a this. Actually, I just realized even this is because I just want to show you that this is is just part of the normal development process. So we're gonna have to create here an object. And posts. And this is going to be whoops, what we're going to do builder dot query. And here, an object as the first argument. And here, we're return here slash posts. There we go, we no longer me just go over what we've actually done. Because you've seen, I even confused myself, I made is we're defining our endpoints object, which is that we want all of the functions that we can call slice, right? All of those are using this builder fetch base query with the base URL. And then the builder. And we're going to fetch slash posts to be able to call the get posts function. And it is going to handle everything for us. And call this endpoint ourselves in our component, create more endpoints, we're going to define them to use the same builder. And here, if we wanted which we're going to, I'm going to show you later. all related to the posts, all using this base URL get the query to run simple, but it works. So up to be able to use this in a component in terms thing that we have to do. And we actually have our counter slice. So we can come here to our we have our main store, it's using configure store object over here with our counter reducer, we our post slice API. So what that looks like is and we're going to do post slice API, we're going slice. And here we're going to do reducer path to be exactlyAnd finally, because we are working additional thing and that is going to be the We're going to come here outside of reducer, and a function that can take in getDefaultMiddleware, that returns, I messed up, this is going to be getDefaultMiddleware. And here we're going to call posts API slice dot middleware like this. Now what this actually does. This is required for all that Redux Toolkit Query provides you. If you need is going to work behind the scenes automatically Just put this here exactly like I did and you're now go into any React component, start using start actually fetching some data and seeing the we get into that, I just want to quickly take actually doing in this video. Because what we're right? So you're learning how to use Redux Toolkit by watching me do it and then you're going to repository or by taking this repository, again, learning by doing, which is great because that's is also doing. Brilliant is a place where you thousands of interactive lessons in various topics more importantly for us, programming. Brilliant uniquely effective. Each lesson that you do on approach that lets you actually play and get a proven to be a method six times more effective all of the content on Brilliant is crafted professionals from places such as MIT, Microsoft, critical thinking skills through problem solving knowledge on specific topics, you're also learning of that on Brilliant with literally just a couple can do on there whenever you have the time. It's it actually builds a great habit. If you want some out Thinking in Code, which follows actually solid foundations for computer science, which is To try everything that Brilliant has to offer slash cause and solutions or click the link in the annual premium subscription. Thank you once again let's continue working with Redux toolkit query. follow the same pattern that we did here with this that is all about the posts, and we're going that is just generally a good practice to do. So we're going to go here inside of components, and list dot tsx like this. And then I'm going to do function. And that is going to return nothing. our actual Redux toolkit query and point our return an empty div like this, and we're going we're returning. And also, we're going to do not have an s, let's remove the s, there we go, directly in our app component, we can do a post and call it and we are good to go, we can start we want to do is, of course, we want to call this way that we do this is we don't actually call this it as part of this API slice. What we have to do slice that is going to expose to us this function So we're going to come here at the bottom of the is going to be an object, we're going to do use to posts API slice like this. Now the reason we're posts, right? And then Redux toolkit query behind use get post query. And as you can see here, and then it added query. This is essentially first That's what this means. If we don't put use and then query to actually signify to us that this in the component. So again, this function here, and automatically created with this function over list component, where is it, and then we can just query, it's more appropriate, import use get post actual endpoint. Now we're getting an error here, we're going to customize this argument to just put an empty argument. And this is going to I'm actually going to destructure this query and And we're going to access the data property because this data property over here is actually endpoint slash post over here. And then what writing some markup. So for example, we can put question mark, because this can be undefined has actually been fetched. And then we can do data we can just return. And here we're going to do keep things simple or actually, no, let's just put to be post dot ID, this actually has an ID, so we to do post dot title like this. And we are going right, because I did alias this. And there we go. in TypeScript, we're going to fix that in just endpoints to actually get proper type inference anything, we get any and this is going to be JavaScript, this is not going to be a problem. And application. And we can see our posts directly this is an unordered list. And we can see all of from the endpoint, we didn't have to do anything and then define our actual post API slice, define custom hook over here. And then we just consume And we automatically get all of the data, all of data, we just get them automatically without to use something like Redux toolkit query. which you've seen here, we actually fetch the a lot of things behind the scenes, we actually for example, is loading, right, there's loading, this is going to be a value that is representing So we can use this in the component to say that, if we don't have anything, so for example, if is says loading dot dot dot like this, right. if I refresh, you're going to see it for a brief we're going to see loading here for a brief for example, right, if there's an error with Redux toolkit query is going to behind the error from the API. And we can use this API. So we can do something like if is error like this, right? Obviously, this endpoint is not show this to you. But if it would, you can do it all of these properties over here, it does the all of your data in the background. So you don't requests, right. And you can just do that through it. And if you come here to our actual developer tools, and actually just refresh everything, and see what is actually going on. You can see here in things here that we didn't do ourselves, but that For example, we have here post slash config slash the custom middleware. Then we have post slash of our actual query, then we have fulfilled. which again, we're not really concerned with this behind the scenes for you. And this is really creating your own loading and error states and don't have race conditions, you can just use this it does everything for you automatically. This like react query in the past, this is pretty much because they're not using read a react query API and integrated it directly within Redux, we actually know how to work withNow, what I'm this type error to show you how to actually fix actually pass arguments over here so that you can your API endpoint. So first, for the types, what our SRC, we're going to make a new folder called call it post.ts. And here we're going to things very simple, we're just going to do ID, that is going to be string. Like this, and that going to close this. And we're going to go back of our builder dot query, we can actually give to do the first type is going to be the return we can do posts, import this from types at post, is going to be an array. And then this takes we're just going to do an object for now. But number. And then we're going to do offset number types on our actual query, we said that the return arguments that this query is going to receive is and offset and the number. So what we can do actually access those. So we can do an object over offset. And now we can use this directly inside mark, and then limit equals limit. And then we're Now we can do this because our API here, this JSON this is going to work. So we can do this, right. end and pass the proper values that it actually create the types over here, you define the types query, and then you use them here in this query and it's going to fetch the data automatically. here and we can do limit. Again, this is going to and then offset. And then we can do zero because to our actual endpoint, we can actually close all lot of posts, because I do believe that I've done underscore limit, I believe, and then underscore now there we go, that was the actual correct way. that your API expects, right. So we have limit that's what we passed to our query inside of this then we're just going to return one post, this And now we can work with queries inside of Redux going to show you is also how to do a mutation, you can also have mutations to send data and similarly in exactly the same way. So let's do you just have to create another endpoint, it goes here. And here we can do something like create can do builder dot mutation this time. And here, we're going to do post, this is going to be the then the second argument is going to be just like to call this endpoint with. So here, I'm just bit of magic, if you will, I'm going to do emit this. And now this is going to be our mutation this emit here is saying that I'm going to call post has except its ID, right? Because when we're the back end is going to have the ID. So we're else that is related to a post, which in our case we have this object here that we have to actually this is going to be the same regardless of a be a function. And again, it takes a post, this called with. And here, it's just going to return going to do something here, we're going to do here. Now what this actually happens, the reason we are running a mutation, which means that we going to be of type posts like this. Remember, all which is a wrapper around fetch. So if you're you have to define the method. And that's why just a string. For a query, it's simpler, you just object. And then we have to pass also the body post as the body. And that's it, we have no more inside of our components. Of course, to be able and we have to also export use create post what videos, but that's okay. Use create post mutation. we can call inside of our components. So we can we have use get post query, we can also access going to do an array. And I'm going to split this arguments. The first one is going to be our actual create post mutation. And the second one is going is loading to be able to use and also show some then this is all going to be equal to use create just make an error go away, let's do is. And then now we have to is loading. So we're going to is like this. So now we have the use create post function that we can call inside of here, this to some arguments that Redux toolkit query returns manages automatically for us as this mutation is loading is going to be automatically updated we don't have to do it. And again, this is the query. And then the only thing that we have this. And here just say create post and actually we're just going to do handle create. Actually, going to come in here. And we're going to do an we're going to create our own post over here, let's not type it because we're not going to here title my new post. And then we're just going post. And there we go, we have no type errors, typed that explicitly, it validates the type then maybe here, instead of just create posts, we can make question mark, and then we can do exactly create posts like this. So we have a going on. And that's it, right. Now I can come post button, again, the UI here, it's not meant to fine, we can press this button, and it's going to actually create the post. Now, because we're mutating any data. So we're not actually changing is just simulating that. But it's fine, because Redux dev tools, where are they, they are right execute mutation, pending, and then fulfilled, is our mutation. And then fulfilled, we actually the data that is returned back from the API, it's just going to return back to you. And we signify to us to simulate that this has actually how to actually set up a mutation, how to use the it gives you to click the mutation function to that it provides you to automatically update your you know how to do this with mutation. And you you pretty much know all of the things that toolkit query. What I would recommend that you you're going to find it in the description and more things to this. Because of course, there's have not covered in this video. So again, I highly the description, play around with it, because that to work with Redux toolkit query. If you enjoyed like this one, make sure to leave this video a big or you can click here to watch a different video really going to enjoy. And with that being said, solutions. Thank you so much for watching,