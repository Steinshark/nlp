Hi everyone! My name is Patrick Akil and today's what it is, how to measure it, where everyone is happy. Software engineers Next to that, we cover team performance the lens of bigger organizations. And who better to have that conversation engineering manager over at eBay. So enjoy! Beyond Coding for today. You kind of as a main. I wanted to start off with talking about I think it's like episode seven quality, and I think there's different when it comes to what is quality When I say quality and what that means In the simplest terms? in the simplest terms, I think, the hardest questions always. Absolutely. Yeah. I'm, I'm in favor of, So for me, quality means that the software does And, it also means that it's it's Yeah. It's not it's not fragile. Yeah. So I think as a developer, you would like your code base So it is predictable. It is stable. It does what, what you think it should do. And it's not easy to break. Yeah. It's not that you move in a different part of the of your system, Gotcha. I would say that's that could be a pragmatic definition high quality software. If it feels like that, I really like that explanation because I was like, okay, For example, documentation purpose of the software in general from a from a user standpoint, any docs to prove resilience and to make sure without things flipping over. But in essence, resilience is the biggest component. I feel like, yeah, I think that's the biggest challenges because, usually, whenever you need to implement Okay. Again, from my experience, or the big, project you know, not very often you have chances Usually you develop on top of something Yeah. Was written by many people over, you know, many, many years. And, the, the last thing you want to have is Oh yeah. That's the, that's the, the, And you want to avoid it And I think, like tasks is one of the, approaches how to guarantee that it stays like, as a, as a solid. It has a solid foundation. Yeah. Can you ever fully prevent it, you think? Because as you mentioned in a big company actual weight, because I think code Is it preventable that things will break Now, I never seen this this happening. So it's always neat, you know, if you want to have very solid, very resilient, to change as well, is that like software, that can be easily the customer needs on a daily basis But at the end they, they want to have So it kind of contradicts each other. Yeah. That's interesting. I was exactly going to say see that in resilience as well as predictability, then changes But you need change with regards to innovation Yeah. I would say if your product doesn't yeah. I can't imagine that you develop I mean, again, that earns money selling something I can imagine that if you wrote some cloud Yeah, which is part of the Linux core, Needs to be done at something. Yeah, yeah. It's done. And then you don't add anything That's but if you're talking about like, services, like, web applications that, deliver some customer, like features to customer solve You, you're The business always wants new features, with the market So they want to be. They want a change. They want changes. So changes is what make your, Yeah. You have an advantage over all your Yeah. Speed is like the name of the game And then, if you're, looking. Okay, we're going to So what slows us down eventually if you let's say Everything is really smooth. One button, like everything is deployed. When you reach that stage, you will understand that, okay, tasks are because, probably you already have a lot of tests What they're like where you had a dedicated team. They wrote a lot of internal test Now you don't have Python engineers It's either like, and then okay, do you need to learn Python So maybe let's write it in the languages So at the end And then yeah but that's you. You need to make a decision what to do with all those, But the decision is not Right. Because that speed let's say if you start out from scratch is kind of the only safety net And at some point you build to a scale and then it might become a bottleneck, but then still Because if you're super fast then that knight might in the end Yeah, yeah. And, my observation that many teams and, in many, like building, building different types indeed afraid so they understand that But they feel uncomfortable, Yeah. And, You need to prove that, And by removing you just you don't need, You just need to understand And maybe you can find a replacement Whatever. So from my personal experience, can be replaced by a series and maybe contract test if it's testing, like, let's say you have a front end application then you have one end to end test that And it's very fragile. Then you can replace it with one integration test application, another integration test And then you have a contract So the combination of these three tests sometimes and to and test they cover some very specific edge case. And then you should just be pragmatic Does it bring value to the company. Maybe. Do they earn money maybe this edge case doesn't happen Maybe just can remove the test And if you see that amount situations goes up, Yeah. But maybe for the, normal workflow So why why you constantly run this test? Interesting. Yeah. It's the balance of then prevention Yeah. And if it you prevent so much in your speed of delivery, And it's interesting that you say that people are kind of scared having been like in a software I've been in also projects And then the general notion is changing or uncomfortable We don't have the safety net. I've never been in a place that we don't want to take it away, because then we're scared Yeah, yeah. So the safety net is there, but, So you understand that you need Yeah I think it's good then that this is also that for example the safety net Python versus Java ago or whatever And it might have been created kind of Devon Ops be separate and shabby by a different person So then what they are testing and making their goal, have a very limited working experience but I am assuming their goal would be to make the safety net as big as possible So then I understand that when it then And what do you do with it? Basically, yeah. I think, one of the solutions, try and testing something which is much faster. at least in our company, I think it's also the term that is used, Absolutely. So basically, a very, at the very end of your pipeline, and your unit test, So if you watch on the screen, So we basically want to move as much test of your pipeline because yeah, it's also faster what on the left side you run it inside the docker even like locally, you don't need That's you can run it on the dev machine So also gives you, fast feedback, developers like that. I also personally I, I don't like you, you, you don't want to wait for like, So you probably switch Yeah, either writing an email next year up ticket and then 40 minutes Yeah, okay. But you have your brain is already and then you need to rollback and then get back to the So it's very inefficient in that way. Yeah. I mean, starting out I thought they were amazing. Right. Because you mock the user perspective, front end everything that's in between up On an existing environment. Probably your test or acceptance But then I know it's okay. Sometimes there's like weird behavior and before things are loaded So then it's like, And I've also been in teams with a habit. So not really reliable. If it's if it fails we click it and then you know you have an issue exactly, Yeah, I can relate to that. I think, oh. Our end to end test, Oh, down. So they only send you a failure message Yeah. If you an indication that something is wrong, Yeah. Yeah. And that's not fast If it has to run three times you know if it's something is wrong, And I think that has come with experience in a different project, where I can reliably say from a back end, software engineering recently, to see if my API change worked, or if And if my test is green, usually everything would be fine, and then see, or then manually test is because when I have the unit test, I don't have to wait for an end Yeah, and that felt really good, Yeah. Yeah, yeah. I fully agree with you, perspective. maybe it's a more frontend related more in the frontend world. Yeah. So usually, like from my observation, application, like usually they bring less value Okay. And the reason for that is usually again, if you are talking it's built in the in the modern approach So everything is different component. Then what would you call Do you need to test each component That would be very pure integration test. But then it doesn't bring a lot of value in other components and other components You basically nail it. Yeah, nailed the implementation details, the good feeling as you think it, it should run. so usually in, in this in this scenario so you don't mock at least components Maybe you can mocks You don't want to test the library I don't know, Facebook. and you and you try to test Yeah. You have, like, a set of, they bring, Yeah. Logging form. I don't know, a shopping cart, So they So you test them in one go. I mean, as a, as a, as a, as a single Yeah. And then I would call it more integration So I would say a lot of people would say so it's not a unit test by definition So it's more And in my experience, if you if you follow this approach you might end up that, you don't really need to write unit test or you need only write unit test for some, Yeah. Which then the question. Okay. Do you really need to cover them? And, the advantage of that is that you have much less test I don't know, maybe 20 unit test Yeah. And the integration test, by reading them, this functionality brings to the so just by reading the test, what's the intention of this code Unit test. It's it's hard to to say. It's isolated. It's isolated. Yeah. Yeah. And also it makes it easier completely rebuild the internal But if the user behavior stays the same, highly likely you don't need Exactly. So this is basically the first thing I do Let's say outdated. We not we we cannot use it for maybe I need to replace it with something new. How can I, build? How can I guarantee to myself that after the refactoring, So the unit test, I probably will need, because that new library that I will use internally, but the whole functionality for the end Yeah. So if I have an integration test, Integration test will tell me that, oh, So refactoring is You're not Yeah exactly I think I maybe in semantics still when I say unit test it might be it might be an integration test Then it's interesting because they used where you have your base that is like the most amount of test Then integration is in the middle. An end to end is your peak. You only want a few of them And now I've also heard where you have this trophy model less than the actual integration, And then the bottom part of, let's say, the end to end part, which would still be I'm really fond of integration tests, So I would hook into an API but everything in between I would test, want to have one function And I want to do a table driven test, because I just want to have many versions or I can even do that fuzzy, so I don't even have to define the input Those would be more unit tests, Testing, though it might be semantically So yeah, yeah, I would say because you probably test like internally probably you have some and I'll filter the incoming request. They enrich, they validate those request, some metadata that is being bit Yeah. So in my opinion And so you hey you you everything that's outside of your service, So I think this type of integration test, they give the most value per line of code Yeah, they have like a really wide reach Yeah. And I like that especially like you mentioned that you can use some, I know that some, some how it's called some really strange values Yeah. And to be honest, So understand the value. instead what I'm doing is, and from business, what are the most Yeah. And then I make sure Because that will give them it, it, if I change something and it's green then the flow that brings money to Maybe some edge case can be broken, we can fix it later. Yeah, it's not as important. It's not as important like speed, for business and especially I'm curious then and keeping a level of quality and that the team likes That is up to par with your own quality with regards to any deadlines Because usually that's how it is, because And I'm really curious when it comes to yeah. I think, again, in the companies and the software is just, It's not what they are selling. usually business needs overweight. Yeah. So delivery always overweight. The quality. Yeah. That's my observation. So you can fight against that. You can try to, this is the given. This is at least This is this is just the usual scenario. delivering something earlier is more important than delivering it Yeah. So then as an engineering team, So you have business And they have the power to because basically they give you the money. So they, they, they tell you what to do. And then to have a say in this conversation. And then you need to maybe sometimes slow down and say, okay, because if we deliver something the next feature, we will not be able Yeah. so then it comes to the quality gate The team has, gate for the business, Oh, just ship it. Do it. People say we don't care. Like, let's ship in the month or so they will handover So if something goes wrong in production, So but if your team knows that okay, or this functionality for, and it's in your interest, especially if you have on called you Oh yeah. Yeah, yeah. That's a very good motivator to actually think twice like, oh, free, you know, free out at 3:00 Yeah, maybe I just Yeah, I just need to make sure. I just need to make sure, Oh, yeah. Also in the interest maybe it will be not you, So I think every team builds you know, the, the, the quality And then they, that of course, this is very subjective. Of course, there are, to make it a bit more objective, there is this, change failure rate. Yeah, yeah. So how often you your deploy end up having some introducing Yeah. So this is something and I think many companies, they look at it from the very broad it's also it's a nice indicator, if you are moving fast, change failure rate higher Yeah. But after that you want to make your, So you basically do some actions I think the measurement if I just look at the metrics So if I see high change in failure that might not be good, right? But if we're in this ramp up and we're breaking things fast, At the end of the day. Yes, yes. Once we've proven then something, And if it doesn't, that's then alarming. Yeah, exactly. And, I have a story about that. So we were, the team was working on the project, and it was It was very important for the business. So they were actually driving feature Yeah. And, and and they made an agreement because it's not, So everything is behind the feature flag. So even if it's broken, it's fine for us It's like but of course this change Oh yeah. And then the DevOps team like the whole organization was start, throwing emails. Oh yeah. And then zoom calls. Okay, guys, what are you doing Stop doing that. And then the teams But we are just writing a new feature. It's not exposed to the end users. It's perfectly fine We understand the, that, the consequences of that Yeah, but but as you said, if you just look at the metric, the on which phase the product is just the metric itself might give you Did the team understand raise the alarm bells in the end? Yeah, yeah, they understood. But again, you need to spend time on that. You need to explain. Other people just say, Just don't bother us. Yeah, yeah, yeah. But then in all the reports everywhere, Oh, boy. So you you don't really want to have this. You don't want your team to be associated with someone who, Yeah. Like it depends. Because if in the end of the day, working your competitors, for example, a feature faster and that's But if there are KPIs to that, and therefore you can't do that even though it might be more effective That would be a shame, wouldn't it? If you do two business decisions ways of working you kind of limit your way of working. I think that'd be a shame, because then that allows you Yeah, yeah. That's why I like, when, when these dollar I was really enthusiastic about that it feels like it gives you a nice insights Yeah, but I think it's very easy to abuse. so, as I said, you, based on those metrics if you understand, the specific product, yeah. What what's the face of the product? What what are the problems like? Maybe it's the very maybe it's the product Yeah. And then you really want to have this Yeah. Or maybe that's something new You literally zero users on production. So the high failure rate But you don't see it from the dashboards. You only see the number. Yeah. And only the team can can relate this but how do you. So for example, if you're saying the door metrics don't give the total picture, then on like team performance? Because it's I feel like we're not going to do because then from a developer side, smaller pull requests, smaller pull requests with higher throughput, because those pull In some organization, that's not really going to do it. But then what Like I would say in ideal situation, everything should be measured by outcome. but I also understand Oh yeah. Because again, very I think the use case to many people product comes Engineering team, did a great job. They deliver something negative impact. so does it mean that, No. They deliver product failed? No, maybe. I don't know, they they were just coming So the learning is there, but, Yeah. So if you if the outcome is negative, because because people say that, But let's be honest, and it has a negative business impact, It's a learning. It's a learning. But unfortunately, those learnings they I would say their lesson portion Yeah the learnings versus earnings. It's like a cost versus yes. Yeah yeah learnings are good. Everyone will say okay good. But next time please Yeah absolutely. If you only doing learnings then as, the high performance But that's that's been the downside of only looking at outcomes if you go through the motions, But then the outcome is not there It's a negative. And that can definitely impact. But then is it a combination of output and yeah, I think at least what I, what I've seen, in the companies I was working so sometimes you can, if you, if you outcome is negative. Yeah. You can at least prove that. But by showing up the output. Yeah. So you can say, okay, this is the, the work that we did this work in something else. So it's not that we just throw it Yeah. iterate on top of that. So it has, it has a value Well, as just real money, Yeah. So, but I would say it's, it's it is very related to the company Yeah. So how the company general, in how people in the company perceive Yeah. Yeah, it's still subjective. That's kind of a I think it will always be there. And then if the culture decides it, it's the people that are there and they leverage that and how they make Yeah, I did a Q&amp;A recently, because you have this experience There has been a lot of questions to getting your first job, if you're either from a career switch your first job is most likely, in black and white, So you're going to be most likely things might have already been live You're going to work on a bigger project, You're not going to understand That's probably going to take a long time, and that's how you're going to contribute. And then the question is, okay, the experience to be able to do that How could I make sure that already when starting, Because a lot of the advice out there is to build a small project, build If you like anime or gaming, But that's always going from zero It's not really going into an organization How can you accommodate for that have a ramp up start when you go into an Yeah. so I can say that, in our organization, with zero experience, like I would say, paid experience. Yeah. Okay. Gotcha. Yeah. So we have people that have graduated They probably did some, projects They maybe had some, bootcamps but they never had experience commercial industry. Yeah. And to be honest, my experience with So they're really motivated. and, if you have a motivation, and quickly And, because again, the company is big, you know, certain amount of maybe people Yeah. So the company can invest in, in person that okay, Maybe, Yeah, maybe. As I said for the startup it would be a they need to deliver something Yeah. Otherwise in the next round Yeah. So but I know that also junior developers there's, there's, there's But they can only say how it like, usually if you have a team of only senior engineers, it's not very productive. because if you're a senior engineer, person. you have you have an experience, You have your favorite, topics. You want to, find those topics and I, I, I relate to myself. Yeah. So if you have too many of, such people in your team, Yeah, because there's always a lot of work it's it's Maybe nowadays you can automate it there is a plenty of work that you need to and by doing this, you are learning. Yeah. So I would say maybe your first job as a junior engineer will not be exciting. probably it will be boring. It will be just. Oh, we have a a huge set of, You know, you need to convert it to Json. and you do it and then no one maybe because you need to do something Oh we have a a legal compliance. So we need to have these copyright So and then you need to go over 100 pages Just because it's a legal requirement. It's boring work. but it's important still. It's important still. And you can learn you can improve your skills Yeah. Instead of like, manually going through the pages, that will do it for you. Yeah. And so my, my, but the but when we are hiring, hard skills. they are important, of course, hard skills are not as important And also I would say the team fit. Yeah. And it's maybe it's a very like vague thing. Maybe a lot of people would say, doesn't, doesn't exist but for me the team fit is like, you go to to the office I want to see this person. what kind of feeling Exactly. He's always complaining. Or maybe he's he's struggling, to do something, and he's still, like, or he's asking around, or maybe he's and then like, once a week, So you you kind of Yeah. And then and then if it matches your expectation, Yeah. And it could be different Yeah. That's very subjective. It's very subjective. If your team is, you know, people who really like to gather together, I know coffee, beer after work. Then you probably want to find the guy. Who or a girl. let's be inclusive here. that also kind of shares the same feeling. Yeah. The same. The same, like, I know life style. Yeah. work work style. Yeah, yeah. I mean, that also makes sense is that they go through this And then they very much But it could also be I told them there's many things People might just know hours in advance so they're not as prepared And that also goes into possibly within that organization And at the end of the day, if it's not a It's not just you as an individual, it's That at the end of the day, and has its own way of working. And that might not be a good fit then. Yeah. Yeah, it it has downsides as well. yeah. So the risk here is that who behave similar to you or share you will end up in the team Yes. Yeah. And, like diversity. Maybe again, another, word that means too many things. but diversity helps. Yeah. So I've been working in the teams in terms of like age and gender And I would say that's Yeah. it's you really enjoy working in this, Yeah. They, they, they come from different different ages, whatever. also also great that in the team you not only have like technical people, it really makes a difference. You really start, you know, feeling, that the life is not like, Yeah. It's not like, oh, There's like variety of different things Yeah, yeah. I've, I've shared that experience as like professionally, but also personally I just take that with me And I even felt like within those teams, because of that, or because of those conversations going to work But that's only one of the aspects or team performance in that way, that one you can go for that are diverse, where you can kind of It still has to happen in practice. When we talk about team performance, that's nonperformance or what has been I'll be honest with you. I think, maybe I'm I was lucky or maybe, there is no doubt, But I was always working for the teams Good. That's good, that's good. I hope so. yeah. So. So basically, the teams that, I like, as a, as a developer, at the different roles, We never were perceived so at least I, I, I never had this type that says, oh, you need to do something Yeah. maybe it has to, to do something with, with the overall So maybe if you manage that, and then basically you under-promise Instead of doing other way around. Yeah. Yeah. Maybe that also, plays a role, but, it's hard for me to answer this question Yeah, I get that. I've been in a situation Yeah. So we know that we are performing good, even better. Yeah, because I can, I don't know, like Yeah. Okay. So, I think that's, that's the constant that like the permanent situation in the, good enough, but they also understand we can perform better because we can do And we can improve So we we will be more productive. Yeah. Or like, so we don't waste so much time on and time test So that's the so you always Yeah. In this regard. But once you reach the level they probably won't put a lot of pressure It's it's basically the, So the team itself understand that, so the business is already happy with us, we understand that we can do even better. What did you focus on when you felt You're already doing You're doing good, solid. You have the feeling because maybe you saw it in another team so one of the approaches that proved to work. you, you kind of create like a parallel working track, so I call it myself like chapter. Okay. So let's say you work in the team and the team does like a lot of different And, you have backend developers, And then there's another team next to you. They also have back And then you understand that, in let's say I'm, I'm more into frontend developer. So I will talk for that. So you say we can do better We can be more productive. We can develop frontend features faster. But how do we do that. Yeah. There is always some gray areas invest time because either it's, it's They might that everyone owns, to, you know, make it or maybe make sure that it is fast, So and so. Then you try to make this, and then you try to get people Oh okay. So you learn from them. Yeah. So if you just stay within the team once you start You do this, you know, cross, I would say it's like cross pollination of everything of knowledge, And it gives a boost it it really gives the boost So usually you have very low expectations on this shared library. But at the end you have improvements not only these teams that are involved And then next time you say, You have much more people they really see the impact. Yeah. And then everyone who participates he brings something back And then every each team that basically dedicate the person to the chapter Yeah. Yeah. That's I think it's very important the more teams you're going to have. And somehow the growth path If everything is new, if everything is because you're learning this probably And then when you find yourself or even numerous years, But there's not a lot of growth anymore in comfort And then this building up a front I can see the value in that, bringing together minds let's say common perspective You also collaborate then and actually That's really cool. Yeah. Maybe one important, usually you should try avoid because managers they really like, planning estimations. And if you want to have a really space you don't really want to have You want to have, like a more star goal, where you want to go, like each step, Yeah, yeah. it's not what most of the engineers Yeah. So extra. Yeah, yeah. So try to avoid inviting managers Yeah. I was going to ask that because on paper Yes, yes. But I still do coding a lot. So I still trying to consider myself so it's it's still doable. So I enjoyed that kind of combination That's great. Nice. I was thinking something and you're, you already saw it That's And it has ebbs and flows, that I'm like, everything is going well. But I still these aspects like, I think And then someone challenged me on that somehow also has a lot of burnout, right? And it might even have to do of improving quality software team sometimes the terminology that we use, There's no marathon runner that does but we do that and then you're in sprint There we go again. Basically. What has been your kind of experience getting into that mode where they just like I'm trying not to work in sprints. so at least, in my current team, Yeah. Because we also don't you know, like you always have. Have you always have a deadline Yeah. And feeling that you have a deadline I would say it's called deadline. Yeah. It's it's but the by definition, Yeah. So that's why I really like Kanban over, the scrum. Yeah. Right. So and then usually you plan in the longer milestones and the usually to the customer and, and in this case, you, but then at the end of the marathon, Yeah. So you deliver something to the customer and then you have some time Yeah. So you gather some feedback You maybe do some small adjustment but it's already like, You see the accomplishment, you feel the accomplishment You it's it's it's in this regards. Yeah. So you don't deliver somewhere you, Yeah. So for me it feels like it, because you've worked hard Yeah. You know crunching. Yeah. Yeah. You deliver the value. This Yeah. This value. you see that? Okay. This this is the actual value for the Everyone is happy. Product is happy, businesses happy. So you you got those accomplishments. You you you now, have energy again. Yeah. To work on the next phase. So in my opinion, where you so autonomous it. I only have limited experience But you in the team, were you autonomous Because what I've seen in organizations everyone has kind And this is standardized But then people rarely have different ways scrum or how they deliver. Luckily in our organization, no one cares That's great. So there is a way of work. to basically make sure that if you have like a cross team at which stage you are or if you have a blocker So at this level, which everyone It's up to you as soon as, like every business is happy That's how it should be. Yeah, yeah, Maybe. You know, in our scenario, it helps that So like I physically cannot check Yeah. And they can like check because physically So maybe it also helps to actually natural, boundaries. Yeah. Maybe Maybe if we will, then it might be a bit harder and suddenly your team is not doing Why are they not working at all? Yeah, it was good. Yeah. The physical reception Yeah. That's interesting. I want to thank you Jean. This has been a blast. I love your perspective and the experience you have there. Thanks for coming on and sharing. Is there anything you still wanted yeah, just want to. It's also my first experience talking, but I think you're doing more. I think podcasting suits you. Yeah, yeah, but it was a great experience. I actually have one question for you. For it? Yeah. So basically this podcast. Yeah. how do you identify, your customer? Like, who is you mean from a listener perspective? Yeah, yeah. So you're doing this product, so there should be a customer How how do you see that? customer I mean, it is shifted, right? Because initially but then I'm talking about three years ago and I was hoping But now throughout the conversations, They used to be very technical. Now they're a bit and they're still some technical here And I think I learned the best episodes where people send in questions They might be the more vocal part And due I think I get a better feeling of where or with regards to the challenges Other than that, but that's the same so I think those questions pairing with those statistics their age wise, very similar to me. I like to also see myself because I cover topics So then I would also like Hopefully they're very open minded and what they do with it. I only have hopes, but if it anchors and they use it later, So yeah. Okay, thanks. Thanks, man. I'll put all Eugene's If you're still here, leave us a comment. Let us know what you think And with that being said, We'll see you on the next one this time. Coding.