Hey guys, hackers, Floyd here. And in this application penetration testing series. Alright, mostly because you want to learn the art of bug really, really hard on, you know, making it as started with setting up burp suite. So for those burp suite is essentially an integrated of web applications. Alright, so the first thing intercept the data being sent between your browser of understanding how data is being transferred, between the client, and obviously, the web using, as I said, is burp suite. And I'm currently running Windows or Kali Linux, it doesn't really install burp suite, it's pretty simple to get set the free community version. Now, obviously down version, which I do recommend and I have used, specifically a web penetration tester, I'm more of So I really work with a different vectors. So become experienced. And you know, you've chosen it's a fantastic path. I know a lot of people who know, it's something that you can look into setting up the proxy. Alright, so this is the to intercept the data being sent to and from the So to do that, we need we can just do it through you can use whatever you want. And by default, you here preferences, there we are. And you want to has the network proxy, and make sure you go into configuration. Alright, so this is where we're the port set at 8080. All right, and then you want for all protocols. So that is the proxy we're once that's done, you should be good there. Now you can search for it, or I have it already on my updated it for a while. So I probably need to do update prompt and it's going to prompt you Welcome on the version that you've chosen to select which is what I have here, or the free version, as by default, the community version only allows professional version that allows you to save your as well. So just hit next and you just want And just give that a few seconds to start it up. but we'll be looking more into how burp works. with birth in this video, and you understand what Now by default. Again, it may seem a little bit you have not heard of any of these of these words Alright, so by default, you have your target proxy compare extender, your project options, your user of this as we as we, you know, perform real vulnerable target, I'll be showing you how to and many others but for now just focus on burp go into proxy. Alright, and for some reason, I just going to leave that as it is, I just want to any traffic as of yet. And you want to go into proxy listeners, as you can see, burp proxy uses your browser. So you want to make sure that your which is the localhost 120 7.0 point 0.1 and the Alright, you can also create your own and add it the idea. Now by default, if I just go back to and this is where the real magic happens, and I type in a simple test site example.com, and up here. But if we're going to burp suite, and I there are some Firefox portals. You know, some these methods or requests. By default, you can see you know, that we ended, you can see there is a the bottom here, you can see there is some more to the web application. Or so by default, you can you more information, like the Accept language, the headers, you can see that the header shows, use agent accept language, the Accept encoding, confused if this is your first time hearing about, pairs. But don't worry about that we'll get to all and let me just open up my browser here. And would you say it just like.com. So before we do so now it's going to intercept actively. And we now by default is going to tell me that don't worry about this, just go into your and made confirm exception. And now it's still not is we have not forwarded the request. And they are go into back into burp suite, you can see that it you can see that we need to forward we need to let me just for that again, there we are, let that's the correct one. So all for this again. be up and running. And as you can see, I should There we are. Alright, so as you can see, that from the client to the web application. And the data being sent, and furthermore manipulated application. Alright, so irregardless of all and it's not really covered anything in terms don't worry about that, you know, we start off We're going to get started with spidering, more you know, the purpose of this video or this spidering process and how to go about doing going to be a little bit of theory here, but this video is really focused on understanding just wanted to let you know that the target or our we're going to be attacking is the damn vulnerable damn vulnerable web application is, that's fine, video on how to get it installed on Kali Linux. beginner, or even if you're a professional in need to have, you know, in your kit is Metasploit contains, first and foremost a vulnerable all the vulnerable web applications that we will so we're going to be starting off with the it comes pre installed with meta splittable, too. on your mat, exploitable to virtual machine, So what I'm going to do is I'm going to open up webs that IP address point 1.1 or two, and just there we are, that's made exploitable too. And web app we want to use. In this case, we're going web application. So just click on that and it's this case for your username and password Sorry and the password is password. Alright, so just damn vulnerable web application. Now we'll be the reason is we have to go through all of these just remember where it was, if I can just go application security, at the moment, it was high, it, but just change it to medium or low. But for you know what web application we're going to be to burp suite. All right, and we can I can start me just open up burp suite. So I've updated it to next now in the previous video, I was running but I could be wrong. So let's just give that a I'll do that later. And we'll just click on create start that. Okay, so once that starting, let purpose of spidering is to identify our scope, is not exactly scanning, and we'll be looking at of mapping out our web application, and is very, which is also very important because it will manipulate headers, etc, etc. Right now, when you it essentially when when burp is spidering, following links and it will start identifying for And it will, the great thing about this is it will performing the the old spidering process. Okay, can let me just expand it. So we have a greater virtual machine is a little bit slow, I need to do is we have looked at the proxy check section, this is a very, very simple menu and to understand we have the control tab and we have the options if we just click if I just look, if we look at it, and control the web spider. So it allows you to you can also clear the cues. Alright, when you about that, when you look at the options, there I will be looking at them in a second. Sorry that. Let's get started. Now with the control we are able to control the spider status where we we can clear the cues that already exists there. can, we can define our own scope. And depending few seconds. And finally, we look at the well if crawler settings which allow us to specify the way on the web application, we'll be looking at the spidering that allows us to essentially spider to we're going through the web application, we're performing requests. As for the form submission, at in the next video and we'll be doing this. we'll be performing the spidering process. But headers. The request headers are used to you can learned about HTTP headers, by the way, I really that you understand how the ad is work. But we'll start off with the spider status. Well, not really tab. If you look at the spider scope, you can see which is defined in the target tab. If you just Okay, first, you over, if you just click on this can load your own and you can save the options. about using the advanced scope here is where you want to map so you can specify a host, the port, of this as We move along. But for now, we're just if once you click on that, it's going to start the So I'm just going to come just going to pause Options tab has a lot of stuff that we need to the crawler settings. Alright. So when you're we can specify what the spider will crawl for. the robots dot txt file, which is very important you then can detect, you can ignore the links to directories very important stuff. But again, one of the things I would recommend that you'd doing yet is the maximum link. That's right, the links you want the spider to, to essentially, to in my, in my situation, or in my case, what I anything higher than that will usually overload or to respond very, very slowly. And, you know, but trust me, when you'll actually be performing you really need a good response. Otherwise, so let's look at what passive spidering is, is essentially just, it allows you to continue actually performing your requests how as as it, it process as you're performing any other tasks. monitors traffic through the burp proxy to update right. So passively spiders you browse, you can requests now this, I would recommend keeping you do not want a very, very deep alert link be performing your own requests, and you'll be at the decoder or you could be looking and you don't want it again to to slow so form submission. Again, this is something that because it is quite advanced. And we'll get there. Moving on to the spider engine, we'll be just we'll just keep over that when we talk control the engineers for making HTTP requests one number of threads you want to use. And as I said, what I would recommend is still keeping it within you might cause the web application to slow you can use dependent on timing. All right, they allow you to modify the way the spider will you could you could edit the the device that is into a mobile device and you get the idea you you headers. And from that, obviously, you'll get Alright, so that was the spidering, or actually be looking at how spidering really works in the that I actually went through through theory, and I it's very, very important to understand what in the next video, we'll actually get Get started with brute forcing with the rates going to be the damn vulnerable web application, and I'm going to be using meta exploitable you can install medispa, you can install the damn and you can host it on your local on your local attacks. But I like running it from another it on the Metasploit able to virtual machine. And and it's bridged. So you can see that my local IP I already have the damn vulnerable web application address of the meta splittable to virtual machine those of you asking why I'm using Metasploit able Metasploit able to has a much larger choice in really good for practicing. Alright, so make web application, you need the default username it's really very simple. Alright, by default, In too low. If you don't know how to do that, you can And you can set that too low, and you can just because most logins Are you know, if you look at this attack may very well work on sites that or sites that don't have good security, you'll that actually don't have any login protection, that being said, what I was talking about is if a login prompt here. Now I forgotten the username it live. Alright, but before we do that, we start up that suite. And you can see I'm using the right? So make sure that yours is the latest we're just going to start a temporary project going to hit use the birth defaults when you start the to start back. And now you want to make sure into preferences, and advanced and whoops, burp network settings. And we make sure that which is the localhost 120 7.0 point 0.1. And Now we need to move into burp back again. And and the intercept is set to off. All right, is because I just want to show you something means that you're not intercepting the request, the web application to your browser. Okay, so but we're not intercepting. So if we just test a like 12345, you can see if I hit login, it's if I set the intercept to on to see the request, we can say test and the password 12345. We can forward that after actually just turn that off. is not allowing us because you have to reload. let me just open up my browser and hit the parcel it's going to slowly reloading here. I probably And as you can see, now the intercept is on and get request being sent by the web application. looking at what all of this really means but by By get request. Alright, so you can see that the get and the and the password. Now the values again are values but it's very important to get the fields if you look at the cookie you can see the security the package, you can set it too high that is basic brute force this login. Alright, and how do we do we're going to be using the intruder alright so Don't be worried intruder is essentially allow edit the requests and then obviously edit them and Now the great thing about there in the intruder force, etc, etc. Alright, but now what we need intruder so that we can send our own response. to intruder. So we just send it to intruder. And forward. Alright, we don't need window, we don't go into the intruder and you want going to your you have got you have got the get request that see something really interesting. It's highlighted different fields that we can brute force for. By value, the login value, we have the F the SF ID we don't need all of these The only values that we most important thing you need to do right now is sorry, not that clear. I beg, I beg your apology to say is I'm sorry, just clear, just hit clear. selected to be brute force against. So now we need going to be using the the cluster bomb attack bomb attack type is because we are going to be two values. Remember that, okay, and these need to better to use a cluster bomb because essentially, need to be tested against the login, the login so in a combination, so we need to select cluster those are the those are that is what we want to it doesn't matter the password or the username Alright, so just hit Add. And as you can see, password, and you want to highlight that as well. now once you have added that those are the two make sure that none of the others are selected you're you're almost there now. Now you want to you want to make sure that your payload set is set So let's start off with your payload set as make sure that that is a simple list. Because and passwords. So we don't need, you know, a you know, dependent on Unicode etc, you get the to your payload options, which is where you select list. Now, we're not using a word list. But if on a real site, which I don't recommend unless using this in our penetration testing lab, we are the security of the site is low. And it's not so what we want to do is, we want to make sure to be for our usernames. So now we can go into and your passwords or your word lists, but by so we're gonna say, whoops, we, for some, we're the commonly used usernames, alright, so something actually, let me just remove these blank values me just type that back in. administrator, like, so typing is bad. That's because my microphone see what I'm typing administrator. Let's see what we have password. Actually, we're not setting the default ones like this. All right, so we can whatever you think could be the most commonly used that is even better. So we're gonna add all the that we want to use. Now by default, again, I'm go into load and select the word list. Now we want the payload set to. And as you can see, now we word lists that come with Kali Linux. So if I go reselect word lists, let me just find where word lists. And they are the ones that work great for the default passwords. As you can see, you have default, user password for services, that's also and passwords that you can use. But for me, I'm to the basics. And now you want to add your own you know, commonly used passwords. So pass, you know, admin again, whoops, let me just remove that let me think 12345. That was the one that I've And you get the idea. All right, so we've set our payload two is set for passwords. Excellent. All have selected we have added our payload options. is advanced once That's done, what you want to Alright, and now it's going to tell you that the but it's essentially telling you that the process OK. And it's going to start at the attack. As you And as you can see, the combinations that we all of them. Now, one great thing that you need to is you need to understand the the the status codes back. Now, that's a good way of, of understanding is correct and what password is not correct. as you can see that it's finished, it's going status, the status is still the same, we have a the length is going to be still the same. But you matching. So for example, you can see that the not, it's not following the format of the others. and password, don't worry about the status, the that. But when we'll be looking at Advanced Server So you can see that the get that we've got here is at the response that will be sent. Right there, you can see that if it was successful, it will me just browse down all the way as you can see, And there you go, that is the username and the was really simple. Again, you can you can increase you can see that this really works. And this is forcing. Now again, most of the advanced websites that have the security plugins that essentially But most of the oldest sites, you'll be, you'll are brute forces, they are log informed sorry, and you can see that the default username is can look at the role. The raw HTTP here, you can look at them and you can inspect them, if that's what's being sent, all that good stuff. But that just go back into burp, let me just go into my we can try and log in here. So we know that is password. So let me log in. And welcome to In this video, we're going to be looking at adding it to our scope, and then finally spidering be using the Matilda de which comes pre installed I would recommend that you download Metasploit who are just getting into penetration testing and vulnerable systems that you can practice really recommend. That being said, as you can running. And I have already looked at my local IP that will display to you your your current network are doing this in our virtual penetration testing And I'm going to open up my browser, make sure we're going to be using motility. So if you don't vulnerable web application. And the reason I'm web application is because I want to show you in terms of the web applications that we use. have the IP address of my virtual machine opened 68 point 1.14. So if I reload this, you can see and I can just go ahead and click on Mattila into my preferences, you can do that by opening a into preferences, and then selecting advanced and make sure you select a manual proxy configuration. which is wondering 7.0 point 0.1 Port 8080 and can intercept. Not that we want to do that in this we want to map the web, the web application. in Mattila day. But I'm going to be showing you So now we should start up burp suite community. end of the video that is really important. And it professional version of burp suite and what what point to get the professional version. Okay, so the community version as of right now, hit Next, Alright, so it's going to start burp suite. And that a few seconds to start up. And once it starts the proxy, we want to stop in the intercepting or we are not inserting any responses. So go back with actually reloading the page right here. So what's going on. And we should have the sitemap. here. Fantastic. Alright, so now you can see In our target. And sitemap, we have the files that the web server that then has the modality folder, that, the site map will show you the current sorry about that a site site map is essentially and how the web page was constructed and how it content. Okay, so the first thing that we need to our target, which in this case, again, is Mattila hitting add to scope. All right, so you might a scope essentially allows us to define our we are focusing our only on our target, we're like you can see here, for example, we have to Eclipse, etc, etc, you get the idea. So scoping so that we only see what we need to see. And So I'm going to right click on Mattila day, so now it's going to say you've added an item to stop sending out scope items out of scope items we want to make sure that we are we clear out all noticed? Well, that's essentially happened, but it's gonna tell you here logging of out of scope, just leave it as it is, if you want to re don't need to do that. Okay, so we've looked let's look at spidering is essentially the application penetration testing. Alright, relation with footprinting. And this is why I to obviously web application penetration testing through the website. And then it records all the that it can get. And that helps us build an idea works. And then finally, we can learn how we can spider our target. Well, we have added it to the it. So what we're going to do is we're going to identify all the links and the parameters that we what you want to do is right click on your and you want to spider this branch. Alright, something interesting is going to start happening. the links all the resources that it can, and it's now, what you can do is just ignore the form, default login forms where it's asking you to let's say you, you're performing whitebox, then can again log in like this and perform internal that you're you do not know your penetration, test on the security. So I'm going to ignore there's another one right there and the spidering the status of these By doing, you can go into of the spider. And once it's done, you will see the bytes transferred, will also stop changing so that we were faced with those are form login a prompt or as you're prompted, but the better this automatically. And you can do this by going and you want to go in to your application login. it is essentially what it's doing is is going to find in a database. So for example, we have male, you get the idea. So those are default values we're looking at the application login. As you can want to change this to automatically submit these credentials. Or if you have an idea of what the where creativity and sheer information gathering you know, usernames and passwords, you can enter to enter a string that is, well, I've used it about SQL injection because it is very advanced. an idea or experience with the databases, you so for my username, I'm going to change that to and two dashes. All right space and a dash. Now please do not stress about this, I will explain the password as it is. And don't worry about that. terms of these tabs, we talked about these tabs our control and target. And finally, we can spider enter the we can essentially process the strings name, so I'm going to right click and spider this And if we look at the spider, you can see that the clear the cues if you want to clear the clear them on what you want to do. Okay, so I'm just spidered the web application. And you might be that's not helping much, you know, we don't need give us a basic idea of what types of sites are you can see we have hackers.org not not very we click on the Mattila day folder? Oh, look at very important. What has happened here is it's this is vitally important. All right now, again, or the web application is structured. So in and read the documentation, you can look at so you can inspect the entire site and understand what the person who developed the website was or as we'll be looking at out of knowledge, you And that we will be talking about discovering login pages, you know, that really juicy stuff. And that's because that sweet Community Edition feature. So what I'm going to do in the next and also show you an alternative program. I'm sure Of course, that's how it works on Windows. But to penetration testing. So that being said, we the structure of the web application. And now we as we have already talked about it. Let me just all of these reference links and to essentially can do is just click on filter right here, this and it's going to show you bring up this smaller request type and make sure you check show only in results to show you only links or resources or done, just click back on the filter. And as you not need whatsoever. And now you can essentially analyze them accurately defined to your scope. And I've seen many beginners make this mistake where what the target is, and they're getting links that they're trying to perform the penetration test will help you get a solid foundation. And again, proxy traffic when you want. Again, that's very Alright, so now you only have the files that performing the penetration test only. Now I know lot of action. But again, it is very important looking at how to how to discover hidden files find. Okay. And that can be done by right clicking it is defined to the professional version of burp where I'll be explaining to you how to find page. Some things that web developers, you know, actually found, can really exploit the website We're going to start looking at how to discover you through a few things. Alright, so let's start does that mean? Well, essentially what it means, security project. Alright, and its goal. Well, whose goal is focused on improving the security of security of software. Now this project, the O w created a tool called as the Zed attack proxy. Or it zap. And I'm sure most of you have heard leaning towards burp suite a little bit more. But tools. And I use it because firstly, it's free. I usually tell them to start with zap because if And you only need burp suite when you're moving burpsuite is the recommended tool. And it is the and ethics. That being said zap is a fantastic old w SP Zed attack proxy proxy, which is, world's most popular free security tools and is volunteers, right. So it helps you find security you're developing and testing applications. So this is also a fantastic tool for you. And as I to do burp suite. All right now that's not enterprise an enterprise developed software. of this series, burp is focused on professionals. get the idea. Alright, so I'm going to be making to make a video on how to get accustomed to the the language or English used for the interface is quite different. So again, getting used to it was be needing some of the enterprise features and on However, if you do have burp suite Pro, go ahead, mentioned in the previous video, it's really that being said, it runs on the same network you're running it on the localhost and on port if you so feel you want to. That's also another change the proxies. So I have Mattila day opened able to virtual machine and it's running 2.1 68 point 1.104 as you can see Mattila day. just leave those other tabs open because again, you can configure the material at a security level things harder. But I'm just going to be showing hidden files. Now, you might be asking, why do to discover these hidden files or hidden files? you know, maybe a robots dot txt, but that's not be a txt containing maybe usernames, you know, my English or pardon my language, something dumb just not configured correctly. And you'll see these are the files that are hidden, and your web application or website. Alright, so let's logo right here on my it's added to my favorites, it should start up. There we are, the zap, give it usually the updates for the modules very, very latest version, as they improve the speed and so you here, do you want to persist the substation, I don't, I do not want to persist the session at don't worry, if you're not familiar with the video because it deserves Now you might be a not stop going to you know URLs to attack that may let's take it nice and easy. So let's talk about that, you can go into your cog right here, as into options. Alright, but I like going into this click on the cog, let me just enlarge that, you as I said, zap is a really advanced tool, and in looking at the proxies, you want to go for starting with L. So local proxies, and make And you can change the port if you're using burp applications at the same time, or you're running it to something like 8081, whatever you feel change your proxies. And if you're running the should be good there, if you don't find that the you see that there is no draya We are not going to be looking at that in a few in probably the next so let me just reload the material a page. And just going to reload the page. And as you can what's this? Well, we got some files here. Let me are, we are getting some results. So we get the IP just click on this drop down here, we get request. you want, you can right click, and then analyze. now because I want to focus on finding the or is we want to click on the utility folder. Now one gives you the file structure or the website so you have your images folder, which has it, and your all the resources in regards to the So if we, if we just look at the bottom here, you the method that the URL, and it gives you the the 200 code means the page was found, you have as you can see, it's telling us we have a high these are things that you know will be will Alright, so the first thing you want to do or you go to attack and hit spider. Alright, so we want start scan Do not touch anything here. Just make and just hit scan. Right now it's going to spider you a little progress bar here. You can pause bottom you should have also noticed that you have as you can see the the website now is completely we can find now you can see that we have some more here is the entire site has been, has been And the you know, you've you're probably really now is we need to, we need to start discovering all of this up. There we are. Fantastic. Now, today. Oops, my bad Sorry about that, guys. and you want to go to attack and you want to go important. First browse directory will not display but that's for later. Alright, so you want to make on that. And it's going to open up this tab here. you can close read if you're not using it, which zap, you then have output for your outputs alerts. will alert you on some potential vulnerabilities. you have some cookies, a noise GTP flag. So again, all that good stuff, which is again focused on a default, we've got the robots. txt here, which you ahead and doing that. So you can copy the URL to alright, and if we just try and explore this, we're for some reason, we're not actually getting today, or actually, you know what, let's not do on topic here. So I'm just gonna go back into fourth topic for some reason. Okay, so make sure on it. And now Oh, sorry, we already did the first browse, directory and children. Alright, it's going to, it's going to make you choose the Now you need to select the default directory default list that comes already with zap. And now force way to try and detect the hidden files and to enumerate them. Okay, so now you want to right and hit attack. And you want to go to force browse it's going to start the process. Now again, this depending on this the size of the website, take a while. And as you can see, immediately let's wait for this call to complete. And I know here that I'm sure will be happy to get. Alright, you can check the progress as you're going here. you can see 200 means the pages were found. So are irregular. And I'm sure we can find something look at the at the file form the website directory something that is really, really interesting year. PHP, we get regressed, sorry for the index dot notes folder. Aha, now we're talking now this so we have whoops, where'd it go? There we are. in notes. So we have a get passwords. Now so what if what what if we just open this URL open that in Firefox, I just want to see what opened up in my browser. If it's not, I'll have to any default. Alright, so copy URLs to clipboard. There we are Mattila day and passwords. Alright, hidden. And we have an interesting txt file here, Firefox. Well, don't doesn't look like we need for some reason, process unexpectedly closed Java error there. So let me just go back in over what could that be? be caring. Let's click on And well, I'm pretty sure you will know what this developer, where he wrote notes. And essentially, can find. Let's see accounts. Nothing interesting that makes our brute force much easier. You then they were ever saved here. I'm pretty sure they files here. That can be really interesting. Or you also copy that. Let's see if it gives us access to Oh, yeah, so the sitemap, for some reason, we were some other files here. Let me just open up Mattila we run the get images. Let's see what images we this. I'm just clicking on everything. But I'm you can find, as you can see, immediately, you the icons related to the website. You have the man. So I'm talking about YouTube. Oh my god, what cool. Pretty cool. And yeah, so you get the idea. and find files that could contain you know, stuff see what else we can find. I'm just going to go we have to get register out. Now. That's what I'm it's actually quite fun. This why bug bounty we can actually register. We can actually register the website from here, it doesn't look like we sure we can. For some reason, it's not actually really know what's going on there. So let's see register. Sorry about that. We can register there. wasn't actually hidden. But it was hidden. It was So that means indeed, it was hidden, for obvious if you find the login, which is again here, the the damage that you can do so again, you can that's interesting. For some reason, it's not set up database here. So yeah, we can Okay, I I do not want to manually edit the request. For While that's we admin, copy heroes to clipboard. mashed on by my tablet in front of me. Right. errors, were resetting. So essentially reset the do. So again, that is some good stuff that you can you can increase the security and find what other again, zap is a fantastic alternative that you can burp suite, that's totally fine. I used zap for I think I used it in till about I think 2016 or I really enjoyed it. And I'm just getting back to it was actually quite a user intuitive clicking means you can copy the URL, you you can attack all that good stuff. And you know, and you can look at the requests here, and then send them you can intercept them. So We're going to be looking at web application this may be a new term for you and do not worry. level. And again, this is what I've been talking documentation out there won't cover the most I'm talking about web application firewalls, what are the mitigation procedures. put in place to now as a penetration tester, or if you're perspective, from wider perspective, it's always I'll probably make another video showing you how and it will probably removed about 20% of attacks. if you're a black hat, and you're targeting, or a website or web application, we usually what a scope of the project. And again, they might give you have your white box, testing, black box most of them will know that there is a firewall. up for them in terms of hosting, or the web on a professional level, have a web application you might be saying, Well, why is this important is important because firstly, it's something that you've got an ace up your sleeve. Alright, so used, if a web application firewall is being And I'm going to show you how to detect it in think you've ever heard of. But it's also industry for some reason, it's not just, it's something after this video, you'll know about it. Alright, firewall is it protects the web application, you that it blocks attacks, as one would expect them this means that you will need to, you will going to be encoded, alright. So what this penetration test that involves you manipulating then you need to encode it in a specific way to by the firewall. And I'm sure most of you have penetration testers, and you've just begun, you'll being processed. And that's because they've, there requests from being processed. Okay, so again, web Now, looking at the tool we'll be using, the tool of you might find it hilarious, it is called wolf you pretty much already know how to detect a web simple. Alright, so just open up your terminal. wolf wolf. Alright, so this is how it is going two zeros. And the syntax is pretty simple. If I application firewall detection tool. Alright, so that's been there since the, I think almost the of Kali. So again, quite an old tool, I when I say given the fact that it's a really, really useful of time. And what I'm talking about is, so let's I have my WordPress server running here. And as 190 2.1 68 point 1.11. Alright, so I have that IP a WordPress site. And this site is vulnerable. later on the penetration tests on. But for now, we default, I know it doesn't have a firewall. But syntax is very simple. As you can see, you just URL, so you can enter as many as you like. Okay, make sure you enter your HTTP or HTTPS protocol. and we specify our protocol HTTP in this case, and now in this case, I'm pretty sure that it So let me just hit Enter. And as you can see, generic detection. Alright, now this is very, standard. And if it does tell you that there is I can guarantee that it will it does not have that I currently own. It's a site that I use. It's we use for web development now I've predicted this CloudFlare. Now, for those of you who are web hosting, you know that using CloudFlare is awesome speed. It allows you to purchase assets and make from DDoS attacks, etc, etc, all the good stuff. I'm going to type in wolf wolf. I know that name https like so and I'm going to specify the Elgon studios.com. And if I enter, as you can it a few seconds, it shouldn't take any much. You Elgon studios.com is behind CloudFlare. Right now, attacks that involve manipulation of data will get your response back the way you wanted it. And as you can see, it detected that it is behind is how to encode these, how to encode encode your the web application. And that's what we'll be using the the dam vulnerable web application. I really need to share with you, again, it's is something that, you know, if you go for a job for a company, this is something that most of the on, they want to know whether you really know your how to detect, first of all, because information this tool is fantastic. And once you know there's target and you won't be wasting time. Again, beginners do. They waste a lot of time trying find the date and they see that it doesn't work. something wrong? The truth is, the web application do not use this for any malicious purposes. Again, I'm going to be showing you how to use der Buster a web application. You might be asking yourself, der buster, let me explain it to you. Alright, developed by OS, the open web application security find commonly used directories and file names useful for those of you who are doing CTF, for essentially, it allows you to understand the terms of the files and directories and how they're Well, this is important because this will help us of attack vectors we can, we can we can find, you and I'm going to demonstrate that right now, and hidden directories and hidden files, we can use it also allows you to find hidden directories or can also lead you to, to finding additional by the devs that like for example, admin pages, really simply, once you start up there, Buster, so I'll explain where wordless come into play. web application or the website and you specify to be HTTP sewed a the a port 80 or Port 443. And Cali annex already has a dub dub Buster word list are designed for different types of scenarios. and essentially how it works is once you start requests, and it will wait for the response from it gets a 200 response. That means that yes, that bad response, meaning like 400 or four or three, know that that directory of file doesn't exist. So against This, this word list. So it will check, a temp request to the server, it gets a response, and then it will enumerate them. Alright, so let's the next, I have the OS, broken web application, scenarios. So you can see I'm running that applications. But the whole idea is to demonstrate this is extremely important, especially for a I'm gonna pull up Firefox. And as you can see, you the OS B web, as they call it, and it has plenty just test the entire server? Alright, so this is so well, I'm guessing that there going to be a lot we can start off with a perfect example of how WordPress site. So I'm going to open up the broken one, and we're not really exploiting anything. But how we can enumerate the different directories and or if you are target targeting a WordPress to copy the URL with the with the directory right because that is the root directory of the of installation. But for the website, you will we know that this is the default HTTP port, which Right here, if you can't find it, just you can use to be like so just this click on it, and give it a by the OS team. So it works really, really well. if you are a web application penetration tester, you'll know that use this tool a lot. Alright, so we will paste it Alright, so we can paste it right work method, if you want to, if you want the scan what we can do is auto switch them from the head more accurate response rate. Alright, so in terms you want the scan or the brute force to be, so the of course, you don't want to overload the server, that's probably works the best for me. But if you it's gonna have multiple requests and threads so I like keeping it at just 200 threads, which server, I can, you know, I can pretty much if you're talking about a bigger server or a matter how many requests or many threads you use, web server. But if I was to run it at maybe a would be lagging out, you know, out of the amount you have to understand it from a fundamental point and the server has to process them. So if the if good resources, like it's running on one gigabyte and to actually cause some sort of a denial of But in this case, we are performing it you you want to select a list based brute force or you that that doesn't really work. And you now need to Now by default on Kali Linux and on paradise, under word list. And you can find the doorbuster that right now. So I'm going to browse, I'm going and I'm going to go into share. And let's go into obviously with a W. Where it Where is it? Let's if I can see this. Yeah, there we are. Sorry about buster. Alright, so there is going to be a folder bit confused. Well, really, you don't need to need beginner you might be wondering like which one I know which one is the best in Most cases, 2.3 medium dot txt. Now, if you're scanning a very complex, like a simple HTML site, you know, HTML, recommend the smaller one. But if you're scanning or a Joomla installation, then you should use the your your, your requests are being blocked by the host. So I'm just going to select list. you can see it's, it's going to essentially the files, it's going to be recursive, which is directory if it is if you are trying to perform and standard start point, just leave it like so once you start is going to start brute forcing sending the request. And if it gets the responses, understand that yes, that directory does exist. sent here. And it's going to tell tell you that response, which means some directories and files getting a no access response, meaning that that just hit Cancel to these ones in it Yes. And it's course down here you can see since it's performing which varies dependent on the amount of tell you the total amount of requests done out of word list that you have selected. And finally, you vary depending on a lot of factors. But mostly selected, and the and the word list. So you have what folders and files it's testing. And in here, and files that it was able to find. And in the structure as to how files and folders are being right now, you can see the amount of the for example, the WordPress register dot php. you can open it in the URL, or you can view you understand you get the basic functionality So again, you see that we are finding files that of course, for a default WordPress installation, remember, most people are for volken, for most this can be a great way of finding files and discovering them is very, very important. And for example, if I went to the admin dot php, and to start brute forcing, if I had credentials, if So let me just move back here you can see we have Let's look at the WordPress login dot php. So can see the server is not responding. And that's want to be as you know, right now we are being not really a web application that is delivering on my local area network. So in this case, you And that's because the server is located very, So that's why it's kind of lagging out. Alright, Now if I was to, to pause the attack, like so if I and you can stop it. And let me just go back they should be able to, to be reloaded quick we can close this one. Let's see if the WordPress there we are. So you can see even though this were causing it to lag out. So always keep that in affect the performance of the website of or of the any impact to customers if you're performing the website. Alright, just something you might want to it and of course I'm not going to expect to find installation is designed to be vulnerable. running right here. So if I wanted to run, you that means you will get, the enumeration process resources and understanding what you're trying very useful tool. When doing bug bounties, or, we are going to be looking at something that is understood completely, and that is cross site I'm just going to explain what we're going to looking at in this video, we're going to start I'm going to be showing you the environment any of these attacks just because they allow how everything works, because that's the most what you're you're listening to, and you have a so I'll be explaining stored. I'll be explaining Alright, so let's get started with me explaining can see that I'm running Kali Linux right now. applications project. So I'll have this in a virtual machine, that you can easily just run it here. As you can see, I just got the local I have that running. And I'm running this on Kali browser. So you can see from here, I've opened that's what I'm going to be using to explain each was to do that false to just open up 190 2.1 68 be different. Depending on your IP configuration, w A, or the OS broken web applications project. is version 1.2. So we will be using webgoat and B this demonstration. So the default credentials for guest for the password. And for B whap. It should going to be bug app or something like that. But right. So make sure you open that up, and you have I have a web goat started up right here. Alright, Now before we even move on into performing these going on here with with cross site scripting, taking advantage of right now, this is where a lot successful web application penetration tester, you level, what's going on here. Alright, so let's simply put it is the process of injecting a script a user of the site or to potentially attack the right? So essentially, is the inject the a URL. All right, that's essentially what it is. don't worry, I'll explain what's going on here. So the three types of cross site scripting. All we have stored and Dom. So with reflected what's you know, reflected directly back back on the so if we are to look at this from a fundamental you know how to navigate the view up. Just give essentially, what's happening with reflected cross stored in the parameter of the URL. All right, of attack. Because many of you will point out and and don't worry, I'll explain all of this. parameter of the URL, so that we can essentially malicious script that is based on in JavaScript, with our portal, you don't want to touch anything I recommend setting it to lope. Not that that's you have to be humbled to begin, and you need to up the Jews, the bugs section here, and we want to go into reflected which essentially deals with off with that. And this will really make you on that, and I just hit hack. Alright, so now it's asking, Well, what what do you mean, what exactly into the, you know, into these fields, right suggestion there, that's because I was testing it the URL, we do have the input here. So you can see So you can see first name has no value. And then and you can see that it is submitting a form. in here. And the most common way of explaining very malicious code right now, it's essentially I can run a piece of code here. Now, of course, many sites are going to filter the content that and will essentially will not allow you to to protect, protect the site from these type of encode it in a different type of language. or how all of this works. So this right, right we are a lot a lot essentially encode, it will here what input is being given. So if we were and you can see the recommendation there script, this is JavaScript, so I'm pretty, I'm pretty sure Hello world. This is an example of reflected close that operate now. And then we need to close the next parameter. Most people like doing it from this can be. So I type in I close the script and which is what we and we which is what we used work and it will be processed, the input will be the client. And we can just hit OK. And that was scripting, using the get method. Now of course using the other types of cross site scripting, for at all of that. But for now we need to understand at stored cross site scripting, this is probably have. Alright, so let's go into the juicy bug menu and we want to go we want to go for the blog, and we're gonna select blog, and I'll let me explain what stored cross site scripting scripting attacks, more specifically, these stored attacking the input. And you're essentially you're attacking the data, or, essentially, I'll the input that is to be stored on a database. So malicious code that will be saved into a database, or the web application server. And then you can access it later on or other users can access it. it can trigger different things like opening information. I'm not going to go into what you can a lot of malicious stuff with code. Alright, so stored, cross site scripting, you can essentially that then that when accessed runs this this is an example of a blog. Let me explain what site scripting is in places like means, you know in the form of comments that you know, or pages stored in directly into the database, any database okay, so we can type in something like hello. you can see it's getting stored. And you have the owner, the date and the entry. So now we can were to enter Java scripts, and again, this data, we're entering is not being validated. So you if you go and try and enter a script in the they're protecting their site against that. I'm sure you know what I'm talking about. Alright, enter the same script we entered, we are to say we can you can use any type of JavaScript code you these web applications are there for you to to say, Hello world. This is stored out stored there. And of course, we have to close the script, do not code it correctly. Okay, so now we can we right, now, you can see that it's going to store see it's going to tell you, it's going to execute This is stored cross site scripting. So an example you know, to make a blog post and inject this run that malicious code. And whatever that code to the user or to the server depending on what you attacker is to do. Remember what I told you in your mindset, and your your your willingness to work. Okay, so that was an example of stored the most important thing to understand is this in it is being validated. And I'll show you that in we'll increase the security level, and I'll show how things change as you move along in terms of This my first time using it. So I had to get a And I realize they don't have dumb cross site They're the only ones I know who actually allow us the credentials are guests for the username I went through cross site scripting, and again, focusing on is stored and again, reflected. So I you want to call it. And we have the the DOM it's in. This is based in Ajax security. This the client side. So any data or input that is etc, is going to be processed by the client, not of course, on the client. Now, let me explain server side, client side i x, for example. code in this entry here, so script, and again, I Hello, let's keep that simple. And I close the not be left with anything will not get any result. not by the server. So no, no result or no data if it was reflected cross site, scripting it, back to the client. So if I was to submit here, it is going to be taken as code. Now what if a client can understand? So let's say we want so I can say in here, IMG, for example, that's a and we don't have an image source. So we can leave in case we get an error of image which we will get say that is going to be, that is going to be equal we can say, Hello, whoops, hello world. And we you can see that we can, we can close that there. by the client, and you get the dialog box or the see that with Dom based cross site scripting, it be malicious or not, is being processed by the that can be used. So you can also incorporate it's all about experimentation and understanding, what cross site scripting is, how it can be the client side on the database, and how you bad security in place. Of course, this is now. But again, this was focused on more going to be looking at cross site request forgery, and a big one that I cover it correctly. So for unique environment that in at least in my opinion, this attack. Alright, now I'm just going to give I have no, of course, you can see I have a few just just remember that we'll be using them later explain what's going on here. So you can see as my using on my vulnerable web application, I should now. Not actually no one actually recommended this a CTF challenge that I went to earlier, I think but the whole process was involved in exploiting this really outlined or really showed of how attacks. In this case, we're going to be so I have the juice shop running it's, it's based Let me just show you that right now. There we yet. And that's because I'm going to do that with host. Let's get started with this really, really so cross site request forgery CSRF. Now from into two into two sections, you have your cross we can get a basic example of what's going on going to be forging requests or we are going to be we are kind of understanding what's going on here. is it is an attack that forces an end user to in which they're currently authenticated. Alright, it's an attack that will force an end user to application, these actions can be anything, but in the password. And they have to be currently they have to be logged in to that web application then you get the idea. It really doesn't help or scripting, in this case to perform the request results. In our case, we're going to be looking that's logged in to the to this web application. we are going to be using CSRF. But the first works. Alright, and this is very important because server. Alright, the server will then respond and then send back the form with the data back to the the user and then will will perform the requested we are able to forge or to change the request it from an attackers perspective. Alright, so, is the attacker will manipulate the victim into web server, essentially, essentially performing mentioned, it will allow us to change the password the OWASP juice shop web application. Alright, bounty hunter, I'm practicing to become a bug vulnerability? Well, that's a very good question. yourself when performing any penetration test. burp suite, the Community Edition, you you will we're not performing any advanced techniques we're just going to be changing the request to get advanced stuff, I'll then be using OS zap for really simple, we, the way to look for these which we have right here, we then need to, we then finally, we will be creating our own our And that will allow us to submit the data or web application who is currently authenticated, change their password, and then we can log into is very common on sites with accounts, you know, probably would have guessed, there are a lot remember, most of the sites out there will be to you to find these vulnerabilities. Alright, so shop as our target. And the reason is, is because really well. Alright, and we'll be using the burp I'm currently running the burp proxy, I'm not I'm not intercepting any traffic. If I go to anything. So it's currently just I'm just going data is being logged through the proxy. So when saved here, I've already created an account. because I don't want to explain everything about email of test@test.com and a password of password. complicated here. And if you want if you're this is a security question with the answer. and I wrote in dog. So hopefully, that doesn't crazy. And then in here we have the scripts that the CSRF are on the site, I'll get to this in I want to log in, I know that the email is Alright, so let me do that right now we need I'm going to hit test@test.com. Alright, and I'm and I'm going to log in. Alright, and I'm don't have logged in now. Now as I said, this is very you're talking about changing passwords, because be looking to exploit this functionality because request to our target with the URL encoded URL. if we wanted to, to do that. And essentially, them change their password simply by clicking we specify. Alright, so how do we do this? Well, at how we get requests are being sent. And we can our password. So current password is password. my password into password. Oops, sorry, pass word And I'm going to hit Alright, so the password was this was processed in burp, or how the request was and HTTP history. And I'm going to go all the way request right over here. Okay, so the get request request, and it's targeting the the following URL. the current password is password, new password us perform the forgery here. So I'm going so I'm going to click on repeater. And in here, we we get. All right, in case you, you did not know really simply. So we are going to be working with individual parameters, although you could the request entirely so that it performs what we we can test so let's change what if we were to let's see test, let's change it to test and we get is a is a 401 error, which means we are an message right here. The current password is not a web application perspective, which means that And it's not going to allow us to know to just go changes. So from a security perspective, the web what if I was to change the new password? Let password, which is what we said and change the and I hit go. Again, we get another error. Again, and repeated password do not match. So yes, the that we're getting an error is the new password interesting. What if we want to change the again. So we want to confirm this. So password 123. And now let's see what this tells us. This So you can see yes, that does work. And we know was the original request. But what if we do not we're going to be targeting other users of this is very, very, this is the way penetration testers if we get rid of the current password? Alright, Password with the question mark here, essentially parameters new. And repeat what if we do that pass 123 and pass 123. Let go. You can see yes, which means everything was processed correctly. to be hash, that looks to be hashed. And we got it is working. Alright, so we know that we know this has worked. So we can do this by going back we can try and log in again. So log in with our and our new password was passed 123. Remember, we that we if we are to send this to our target, we without any pre required information like their there. So let's hit log in. And voila, you can see fantastic example of so also CSRF can be utilized for it. Alright, so this can allow us to change password that are currently logged into this web to do well, we can we can log in. As we've already we can we can test to see if cross site scripting throughout the web application is very important. see if it will work on the search bar right here. So alert, just to test whether it works. And stupid hello world, you know, that's an I can't the alert. And we can finally close the script And voila, we can see that indeed, cross site we can insert our GET request inside a script and And now you can see them conjoining together, so we now need to create our custom script And we will be using XML and HTTP. Now, you let me just minimize this and open up leafpad, you you can find many of these CSRS scripts are online I find the one that works the best is the and contains the get request in here. Okay, now, in which we submit the the parameters without the And it needs to go back into proxy HTTP. Sorry So if we go back into, sorry, the repeater. And is right over here. So that's the get request. So not using any current password field, so if we how this can be utilized really, really well. So will be format. And of course, the web application second. So we need to copy this URL right here. edit our our script. So HTTPS, and we paste it in want to. Let's take a look at whether this script not the way we want it. Let me get rid of the it's hosted on my localhost with the Port 3000 the password, the new password is past 123 and whatever you want, if you want to, you know, play want to do any of that. So this is the script. So run this in the search bar. And that should, in attack on the site. So I'm going to paste this in gonna hit search. And you can see you successfully error that is not very gracefully handle. Again, application that is awesome for practicing your Now, I talked about the URL that you should send essentially make them change their password or in to the web application or they have an account, Alright, so that's very important to understand. Now. Again, if you could have done this, you I in now. And I can type in for example test I just test. And I can change the password, we already I can just inspect the element here. And I'm check something out. All right now, let me just look at the network, this will essentially shows you can see that if we are to look at the you can go ahead and look at at the exact format the it should give you the the authentication the authentication token. But that's something for you can look at the cookie if you want to. And are. There's the authentication token and you can token. Alright, so let me show you this right now. so as I was saying, you can see that if we look there, and it will be updated to the one that so remember, if you want to customize the cross script. And where is lifted here. So there we are. we just got rid of the current password parameter, change the password to whatever you want. And link do you send to the target and that is very, and I change the password to maybe something else add that to the password. And I run the script on that. And it should change my account password. logging in, it will have changed it successfully. paste the new one in here. And I'm going to search And if I log out, and I try and log in with with see whoops, sorry, I think I typed that in wrongly see that we entered the new password, and it did execute the script. And again, when if I just run send to your target. Alright, so if I just copy love leafpad. I don't know that you guys love it, indeed is a URL. And if the web application was network, it would give you the website name, the which as you can see is encoded. So what I and you use a link shortener like bit fly or any to your target. And once they click on the link, web application, it will update their password. now because you've updated it. And you're all you be knowing if you're performing this attack. Or all of which you can, you can send this link to We're going to be taking a look at session we'll be looking at cookie collection. Alright, so cookie is. Now there are three types of cookies section. And we will be focusing on in general. discuss in a while we then have the permanent party cookies are really all to do with third if you're on a website that utilizes flashplayer, that are related to the Flash Player. So it's very cookies. And as well, we'll be looking at reverse them. Because I first want to explain to you guys into into finally tampering with them and seeing different type of of access. And where this comes cookies. And in this session cookies, we have the the unauthenticated token. So all to do with your so essentially, all the cookies that you can when you visit a website are they are generated the cookies change when you authenticate with you log in, you get a different set of cookies. cookies. This is where the whole idea of session utilized for this system. So I'm currently running Let me know if you found it helpful. So I have Now what I'm going to be covering is how to difference between an unauthenticated cookie what I have, or what I use to my advantage you you can get a cookie collection or a cookie But as I said, we're not going to be looking at what to change in them, this video is going to them to see what information they have within the OWASP juice shop. And the reason I did that going to be using this for performing all of the learn all the concepts. So I'm just gonna, before of cookies that we'll get once we were when we links, we'll get to them in a second. Alright, so find this same one for Firefox, that's what I'm if you want to do that. And in addition, we're or the OWASP zap right now, because we're just these add ons here. So what I can do now is if I have the, the developer tools right here. And if editor, you can directly go into storage. And in cookies here and other values right here. But if going on if you go into the cookie editor. Now two cookies that we've gathered here, and we have I'm not sure really what it does input output, down to the QB, consent status, we probably get an us. So when I when I opened up the website, it ask you in 2018 to do is to accept their privacy their use of personal data and cookies. And the a lot of information about you. They contain a been doing. So this is why I've created this right understand their role in session management. Okay, tokens because that's where most of the magic this up. And let me just log in. So let me just and the password, like so. And let me just log in. in now. And if I inspect the element, again, it usually takes a while to load. There we are, an authentication token. Alright, so when it comes token, for example, let's use this as our example. similar to a penetration test. Now you might be what what what do you mean by this? How can we this token is encoded. Alright. So this is if about this, but this is a JSON web token. Alright. the JSON Web Token decoder, I'll be posting this I prefer to use. If I am to paste this in here. going to give me all information. And I'm going essentially, what we have done is we have reverse now we need to look at what what it contains and to us. Because remember, this is an authentication this will determine whether or not we're logged we have on the website. I'm pretty sure you the header, now, this is very important. I've seen and they don't understand how the the web token is separated from the payload. This is the header is the header it's very important to understand In fact, the JSON web token is sorted into three you then have the payload until here. And then right at the bottom here which is also separated header, alright, the header is going to give we know it's a JSON web token, we then have the which is the RS 256. And then the payload really interesting as you would have expected, you if any data was passed the ID, we can always use else it can give us in terms of authentication, identification tokens give us different types talking about, this is where you will scrutinize tamper with it to to see what different results token, right, and we can edit anything about it. that in the OSB shop and paste it right here and results we can get. Now, of course, we're not introduce you as to what information you're going so one step at a time. So you can see that extremely interesting, we have the email which it's not very well designed because the email is case, or in any scenario, someone is able to get they will have access to my email and my password. type out all of these random passwords here. Well, password, which means I can depending on the online in a second using any of the decryption and I wanted to know the password, let's say this even mine, and I found the the email and password, I can go to Mt five online.org, which is what I And I hit decrypt. And you can see, well, first your storefront. This is this is getting really that, as you can see, it's gonna, it's gonna find on the difficulty of the hash and whether or not it will display the hash and the password in plain of course, you can experiment with this. the authentication token that you found was using the password, the first thing you need to do is decrypting it. Now, I'm not going to be talking that's a bit advanced. As you can see, by default, which means we can tamper with this token, and we with it because it said, The OWASP juice shop is you perform all of these tests. Okay, so when things are to look for the status, the ID and in the data section, or in terms of the email and of course, it's not very easy to get a hold of it but and then you are performing the penetration in the comment section of this video, what it was to Facebook lets you have access to someone's authentication token, what would I be able to do? of the token. And I can guarantee you that their performing the penetration or the penetration test looking at changing them or or tempering them to be talking about HTTP attribute attributes and and what I did is I started a fresh new instance. wanted to start afresh Now, of course, in the and tokens. But now we're going to look at how secured and how you know how cookies are stolen other exploits or functionality like cross site in a few seconds. So I have was used Stop running. did last time. So it's a test@test.com, that being so you know. And I'll do that right now I'm just and the password is password 123. So let me just haven't solved any challenges. So when we talk this can be done or can be inspected really to need any of the browser extensions or add ons, element here. So if we open inspect element and go the site, which is on localhost, you can see that and we just look at the data, you know, that we only section here, you can see that that is set to that we can potentially exploit this cookie and it is not secured. Now, I'll get to why and how this so if the value is set to false, it means that the one use this, you know, for potential attacks, if you are an advanced web application penetration know, that usually attackers will use cross site that then, you know, by sending you links to pages that have the the the malicious JavaScript your authentication cookie with your token, they can then use that to authenticate into your the cookies are usually secured. Now, you will very big vulnerability in terms of severity. So if to low category, so not really a big exploit, but you know, usually, I would like to say rookie huge frameworks like node etc. I'm not going to HTTP only is set to false. Now, what does this functionality to exploit or to display the broken my token, whatever you want to call it to a server you know, simply put, so how can we exploit and this is probably the most used method we can use any of the, we can use the search, or because usually it is unfiltered. Now, when I Well, most of the big sites, well, I'm not talking to take this into consideration. I'm talking they usually don't take this into consideration. scripting script that will essentially display do that, I'll just type in script. And for to us so alert, and we're gonna say document, and then we're gonna just close the script like really helpful. But you can imagine if we were a post here, and then whenever we send that link this JavaScript code to send their cookie to you basically know what's gonna happen there. So going to display our cookie and our token, and the context, but I'll explain it in a second. So sent anywhere across the world, provided that the this, this script is executed. Now, the question else can we post this in in sort of a malicious but I'll also get into how to mitigate this. And your HTTP status or your HTTP attribute to true or You can see that once we have this, you saw in information, and what info it contains in regards crack the password. But for now let's focus on how attackers do it. So you can also get insight if here, I can put, you know, I can type the script best way of doing it. Because you essentially bar and type this in. Not really the best of ways we look for a page that allows us to, you know, to or to save it to the website itself. So we let's that looks like a good place to start. So in the the comment, we can enter, we can end our script But we have to test it. Now. Of course, the cookie going to be telling you how to do, you can it's part of the terms that I have to follow. about malicious content, and when what not, but I'll probably have it on my website, if you to send cookies to a another server or server that essentially, what I want to do is I want to save I believe this is saved. If I looked, I looked at script is quite simple. So we can say, we can left like that. So we can say script test. And we have to include the the actual JavaScript code. So one. So script. And then once we close this one, whoops script in, you can copy this code if because a lot of you had actually talked to me code. So script. And now we want to bring up not really useful, because all you're doing is once they visit this page, so you probably just simply just going to write the document, of what I would have done is I would have used the to be sent in in the form of probably a PHP file server would log all of the information being sent then close the script here. And sorry, we have to And then we close the script there. And finally, script and there we are. And we can leave a authentication 10 plus five. You You basically, Because if you look at this very basically, from is another false positive. And again, I know I'm I'm trying to explain here is, if you are going test on a web site, you need to understand that, should not go after the big exploitations or the as I know the structure of the OSU shop, this will I click, or any other user who is authenticated and will the cookie will be displayed on the your own script to send the cookie to your server, So that is 75. And I hit submit. And what nots brackets of division multiplication addition, you 25 plus five, plus 10. Sorry, that's 3535. And I code back in Sorry about that, guys. So we can test. And then after this, we can close the first keyboard is quite a distance from me. Alert. And And finally, we can use the document. My God, man we are we have already sent the alert, we will display the entire webpage, document dot cookie. the the initial script. And then we close the there. And finally, we can give this a rating and what the issue is here. And then there we are. your feedback. So you did submitted there. Let me you go to launch the script? That's, that that So on this in this structure, you can pretty much I do recommend that you use you know directory whatever is comfortable for you. So with this you can see that that is where the the the So there you are, there's the cookie. And if that would send the cookie to my server, once it would send my my session ID all of that good password and authenticate with your account. As without ever trying to have guessed it without I exploited the web application. And because application to secure the cookies, I was able to can do in that person's account. And this is you friends out there who think hacking Facebook is you know, web applications can can be cracked of course, as I said, it's going to get really that's the reason I'm using it because it explains we're going to be looking at OWASP juice shop. And would be a fairly poorly designed one. But the levels of difficulty. And that's really, as you can probably see right over here. And that I wanted to set it up really quickly, I want to or Docker. That's really is, I really didn't have you can use Heroku. And it should be free for a try. And you should have a an instance set up it's giving us a prompt here telling us that get the juiciest tracking experience. Now, from my essentially, that's what keeps track of your be quite good. Now as for my browser, I'm using plugins or add ons like cookie editor. And that's I hope and we don't have the the proxies here like burp suite or zap whatever you want to use. OK, as I believe is to get the the scoreboard and I think I have done this already. That's really all before we actually do that, the interface is can see and could have understood and they about OSU shop is that this replicates a real misconfigurations, etc, etc. So if I log in, you can create a new account if you want to, you you know, essentially contact whoever is behind the thing I like about this is, as I said, application. Now when you talk about, about the quickly by going into scoreboard like so. So, you that should give us the scoreboard. Alright, completed the challenge, and the reason it does this can be considered a capture the flag type this is fantastic for essentially explaining the scoreboard is essentially works. Alright, so if you had my phone, it always seems to do sorted in terms of difficulty. So we have a five star and six star. And they all have the the difficulty sought in terms of star so you you know, not so easy, we have three stars, now we're talking five stars, I'm banging my head you probably a few, a few days, or, you know, so you can see it also gives you the gives you two star challenges, you can go ahead and look at the previous videos, we covered a lot of the two that we wanted to go through. So the three star because it does start logging in with other I'm not going to go through all of that, so the first challenge in the first is access the so I'm guessing we have to try and log in, I we have to access a confidential document provoked handled, not to show that is let us redirect you. we have cross site scripting attack. This was pretty much run that in one of these right over you hints these are very, very easy. So I can So yeah, there we are test. And we close that up. we hit Enter. And there we are. So that is one of So if we go back to the scoreboard, it still too low, it's not told us that we have performed a know, right, so reflected. Anyway, we'll get to page, what we can do is we can create a user. So a simple user here called test@test.com. And the repeat the password here. And I'll just call the of your favorite pet. And I'm just going to say And we're going to save that. Alright, so I can Yeah, there we are. And we're going to log in, zoom out. So the interface does not really crashed so it's sorted out really well. We have the essentially allows you to select your to view the if you want, if you want to use a coupon and you takes you to the the OWASP juice shop, donate is correct. Yeah, yeah. So if you want to support them. It's a really great project. I really do change your password, which is awesome. I think it using using the GET requests. Contact us where person via the site or the administrator as I what this requester recycling box so you can type that's not too bad. We have a complaints board. reason, keeps doesn't really load. So let's try I'll try and cover as much as I can here. And Let's see some sort of checkout or boring terms exactly are we supposed to do? Because access the here? login with the administrator. All right, so So let's try and access that right over here. like so I'm gonna hit Enter. And yeah, that was admin and do shop. That's the admin email. And we you met juice, juice shop, Bender, and some other the registered users customer feedback, and the Which means you're starting from the basics. but we don't know the password. So yeah, so I'm in with the password here. admin, I do shop, and SQL injection. And in this case, I think I know it has been changed quite a bit since the last it was with admin only, there was no domain let's try and see if we can throw some so that means you have to provide a password. So let's see if that Yeah, it does throw an error. which you successfully solved the challenge error performing error enumeration, if that's something just try and see all the CE o 's fuzzing really system, seeing how it responds. And we get here because as you can see, tells us here we have us select and what this is saying is select are equal to and we specify the single quotation. a hash? What hash is this? Let me just check. I'm me just check this hash identifier. And we just just paste that in there. Yeah, this is an MD we can decrypt that or decode that. So I'm just that. Let's just see if we can do this online what error because that's, that's a password. it's taking too much time here. So yeah, yeah, interesting stuff there. We actually now know that with the Mt. Five, hashing algorithm or protocol, that is the query statement there. So we can try ones to log into admin or to essentially log now the thing that's weird is are we going to use so that means let me disclose that. That means or get the when you were able to get the query there. Select from users, so select all queries, use the table. So there's users Alright, so the I follow now. So that means we can try we can And probably we can use the not statement if we but we only using email so we'll keep the is if you know about SQL injection, hopefully I the password is being hashed, we're saying select the statement. So select from the table for sort and password is going to be equal to is going to the the password has to be has to stay as the going to be using the or so this is basic use, me to cover it, let me know so or equals or so or I think I'll post a cheat sheet in the description to get up to scratch with what's happening. So the syntax of or is very simple. It's where we we're seeing Okay, so if you know the syntax very simple. So we're saying select from, from not a column. So it says select from the email password, so comparing and then we say we can enter our into fields. So we can say the obviously know that that is the first account remain the same. So we hit login. And yeah, we that is weird. No, because if I specify there is working. So you can see. So select from users, want to nullify and password we don't want and And there we are. Excellent. So we're able to log so let me explain what happened there. So as I we're selecting from the users table, we're them to each other. So they have to match show and what we said is, or that's a conditional the condition where the first value is going to be equal to one, and we nullify the, the password authentication. And we are what because we're so that was pretty simple. But now, the thing password. So let me just check the scoreboard. So have access administration section that's administrators use account. Marino the password. in. We know the email, because if I just go back the video is not getting too long. So we have the yes, yes, yes, we have the token. So if we inspect for example, we can use that or you can just use from the cookie editor from the beginning. So we in my other video actually went through this I think the site was it's a JSON tokens, a token, JSON web token. So jw t.io. That's an excellent watch that video, I'll post it in the description. So that's the authentication token, and that so we have the password here. But again, what is but let me just confirm, and let's see what as we know with MB five, so let's just confirm it is MD five. So let's just decrypt that one more I'm just going to decrypt let's give that a few And let's hit verify. And yeah, there we are. The basic, but again, replicating common practice boy, what was the email? Let me just log back statements. Oh, yeah. So we're logging in. So all I think we can access the the middle from the I'm getting really mixed up. Well, we're log in. And we can do the administration here. a juice.up. Yeah, that's there to confuse logging in with that. And the password is fantastic. So you solve the challenge password the vulnerability that they're trying to say something that people don't take into account, previously changing them or applying SQL. Could I'll have to cover SQL injection, because we know dependent on the query. So let me just go back to is left. There's still a lot of stuff that have but I think I'll cover that in the next video. the confidential document error handling? Or we else's basket? I did that. What else should I want here. So yeah, so the authentication area here I'm going to end this video. I know, I haven't like an introduction. So where we, where we have administrators account, we are able to get the were we able to do? We were able to provoke there. And we were able to log in with the admin Now we looks like we can actually get access to another user that we can try and get access into. you found value in this video, please leave or suggestions, let me know in the comment and I'll be sure to leave your reply and I'll