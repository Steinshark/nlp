So hi, everyone. I know I know I'm the only But this is going to be a fairly so it's going to be fast. So as Jeffrey mentioned, I'm a freelance I am based in with companies across the globe, have been-- all of them have so far. I do front end in HTML, semantics, design, modern CSS, and And I also do training both at events and in-house. And currently focusing so running workshops Now when I run I try to customize the to match my client's So usually a few weeks before I contact the designers that are responsible for And I ask them if they points that they want me or if there is anything to learn so that if I in the workshop, I can add it. Now a little less I run my SVG workshop And just like with all I contacted one of the And I asked him if there he would love to learn about. He said that he was interested He knew that they were really good, very but he wasn't really sure because the syntax can, at first, seem So upon his request, I started And then I added a section about And then most, if not that I did and everything I filtered down and that I'm going to give today. So what I'm hoping is that I will give you a clear idea of everything or even that we'll the surface of what's get you excited about that SVG brings to So over the last few know that the gap between in graphics editors such and in print design possible on the web, the has been getting over the last few years. First with the addition such as CSS Shapes. These are all demos using CSS Shapes where inside and around And then the interaction which enable us to compositing and blending to text and image effects. And then there's that enable us to do image of our code editors. Now there are currently that do a range of effects from contrast, to One particularly is that your L Function, the provides us with the ability effects other than the ones Now it is true that CSS has made smaller, but the truth is been smaller. It's just taken us to realize or to pay attention do make it smaller. SVG, which has been around has always had the ability and I'm not exaggerating, effects in the browser all In fact, CSS Filters The filters in CSS, are shortcuts for a of photo primitives. We call them primitives So the CSS functions are of filter primitives The CSS counterparts are of the SVG filters for a very long time. And the SVG versions are capable counterparts. For example, it is an object, or an image, basically, using the In the image here, we're by an amount of six a uniform blur effect that is and y-axes. But this function is merely a for the Blur Filter is available in us to blur an image either do and CSS now or apply a horizontal or vertical. And then when you with other filter you can create more complex effects such as Motion Blur Now also, SVG photo limited to image So we're not just talking about like we do with CSS. They are capable of as you're going to Now the question when I have conversations is why? Why would you want to to content on the go create something, create export that as an image, That's easy and fast Now the answer is, first of we cannot talk about We need usually, when we're we need to create multiple and then serve the source set or the depending on the Right? So we're not dealing We're dealing with And then any change that you that you have, to jump back into Photoshop, or that you use. Change that, re-export and then reinvent them. That is not very ideal. But having an effect means that your FX are so you no longer have to worry The effect is easier and You don't need to jump into change, exploratory embed. The content is editable. You don't need to need to change the an effect to a piece to change the you can do that in without having to jump And content semantics because when you have-- when you on the web using web you're applying that to real SVG text. That text is searchable, Whereas text replaced And the efforts are animatable. So my absolute favorite is that it is both a document and it's a very powerful This means that you can apply CSS and to the content of can to the content of HTML. And because SVG filters, are actual SVG elements, you Therefore, animating which is not possible Now filters in SVG are created Filter Element. Now almost everything in so you can tell what the element Filter elements are Their only usage can be referenced using So we have the filter contain something inside of it. And then using the filter we're applying that Usually the elements directly are defined So a defs element is and everything you put is not going to be unless you specifically But SVG filters don't of defs elements, because they're not going The reason for that is a source image to work on. And unless you explicitly by calling the filter on that and you call that SVG then the filter is not going to And so it's not Now a filter effect is made up are applied to a given source graphical result. So in contains a set of filter as its children, So we have feOffset, feBlend, feComposite, Fe is short for filter effect. So each filter a single fundamental or more inputs producing The input of a be either the original image, we call it. So if you're applying that image is the If you're applying an that text is the source graphic. The input can also be the alpha We're going to see examples can be very useful. Or the input of one be the result of another Now since you can use the result to one or more other means that there is of possible combinations. And therefore, an endless effects that you can create So this is code. You don't have to worry So these are just a few examples We have feOffset. It takes in a source which, the alpha channel of whatever There's also feComposite. Some filter primitives so it's usually because you're to affect the other. You don't have-- have n attribute, n2 is n3, and four, and five. It's either one Now in order to ease into I'm going to start with one effects, which is Because a drop shadow but it also requires And therefore, primitives in order It's usually a nice way to ease This is what we're a simple translucent black drop Now I know if you were you could just use the but it's going to take but there is a reason I'm because as I mentioned, just primitives and how to use them. So we're going to start container which will house And then we will be applying that we have. Then we start by creating First, we start The feOffset filter to offset its input by a and y-axes. You have dx and dy. They determine the you want to offset your input. Now since we want to create of the image, it makes sense off that image which is and then make that translucent, right? So the input for the offset, is our source alpha is the alpha channel Since the image is fully of the image is just Then we're using that the output of the offset filter primitive. Now a quick thing that if you don't specify the I'm not using the It is automatically going to that was right before it. So right now, the is being used by feGaussianBlur. We're blurring it by 10 pixels, a name, which is drop shadow. And this is the rendered on the screen, a Next, we need to make We can do that using So Color Matrix is uses a matrix to affect by channel basis. Think of it like editing So you have a matrix RGBA, and then you can edit in order to get a Una Kravets has a Apart all about this matrix That is definitely So we can choose to inside of our matrix. And since we-- Here it is. OK. Since we're not-- we do we I'm keeping the RGB which is the identity matrix. And I'm only changing the value Ooh, and I'm which is the default, to 0.3, translucent. So I'm taking end result of which is my black, I'm using that as an And using that matrix, of that rectangle to 0.3. Next, we need to so I have a shadow to make sure that I put my image on top of it. In order to do that, we can do-- you will use the feMerge As the name suggests, Merge is together. Each layer is specified in And since we want to merge is my image, and the result or three operations, create-- gets a merge So the result-- here. So the result of all of was called Final Shadow. And I also have And I want to layer them So I have a Merge node and a Merge node for and I put them on The Merge node that comes on top of everything before it. So I have my blurred and the image on is how we create a simple You can find a live available in the top slides. And you can play with and see how it changes. Now to continue easing into the I want to talk next simple primitive, which is used to morph elements. Now to morph means or the shape of an object. The Morphology filter operates and provides to a specific which is a thinning or is thickening or expanding. In more technical terms, this a little bit boring, know what's happening it helps better understand it. Now in more technical terms, operate on a pixel into its neighboring or crumbling the at the edges of the The amount by which a is specified inside of Now think of this radius as a and any neighboring within the circle and starting at the every pixel that lies as a neighboring be used to either to get the shrinking Now morphology You can either apply effects to right? When you're applying it has two very The image dimensions get depending on whether On the top right, you can see And on the bottom left, And the image looks painted with a with not a lot of details in it. So this is also a visible here. In addition to the shrinking probably the first thing is that the different colors of these two effects. Erode produces an effect than the light ones, whereas This is due to the fact-- this is a video showing This is being animated. This is due to the sets each pixel to its neighbor, whereas of each pixel to match the value. Note, this is in An image has different the colors change For a single color which are usually monochrome, of the awesome variable fonts We're? Talking about basic text here, The Erode makes and Dilate makes it thicker. But how is that useful? We can take advantage in order to create external more desirable results get using the more So if you have a piece of text for that matter and you want to this is what the it is outlined using an and then when it's outlined filter. When applying an outline you're applying that outline at getting thinner. It's practically a part of the and then using it as an undesirable results, because but we don't want our So in order to preserve and add an outline do that using the feMorphology. The code is a little but the result is worth it. So using a stroke is as attribute and the stroke that you want to be quick and straightforward. But again, this result To create the outline you can do something like this. So I take my source alpha. In this case, I'm taking the is a black copy of the text. I use feMorphology So I'm expanding so that we get the result here. OK. Next up, I want to So I want the color to be different from the In order to do that, you can most of the times, if you want inside of SVG filters, you called feFlood. FeFlood, as the going to flood the filter you're applying the So in this case, I have feFlood. I'm applying a deep pink color. I'm giving it opacity. You can change that. I have it set to one. And the result of which is a flood of color So when you apply feFlood to a filter region, is going to be covered with And that's why it's called Now in order to remove you use the going to composite that pink Compositing is-- no, it's fine. Compositing is the combining with its backdrop. A backdrop is the content and is what the element So compositing defines will be blended with what is The source is what and the destination is what is So if we were to go back I have a flood, which is is all color. And then I have the And I want to composite Now there are different And depending on what the result changes. So in our case, the dilated and the flood color And compositing these will only render the area where happens to be the text itself. And the area will be because compositing Am I making sense? OK. So in other words, with the dilated text is And at this point, is the only thing that is so we need to make sure that layered on top of that. And that can be the feMerge filter primitive. So I take the re-colored back So the pink text is the dilated And then I put the source and this is how you add an You can also do something than that, which is So you have a piece of text, And you see everything The code to achieve than the previous example, and So in order to create I only use these two steps. The first one, I'm to dilate the text, because But if you can spot what's different sorry. Here. So I have feMorphology, that I'm taking for feMorphology or the text itself. I'm not taking a and then colorizing it. I'm taking the text And then if I want to change all I have to do is change And since the text is being you can customize the color That's separation of concerns. Whereas if you use you want to change the you have to jump and change the value of So I'm using feMorphology. I'm taking my text, expanding And then I'm using, I'm using the original on top of the dilated the part of the it overlaps with the text. Does it make sense? OK. Next up, I want to talk about So the first two sections were a way to hopefully ease you and make them a little This is where the Now I want to talk about how you and use it to change the shape In particular, I want that I borrowed from that I found on YouTube. In the video-- I'm so whenever I want I look for a design video see And then I try to Now in the video, the by using what is known A displacement that is information is used to distort So let's see exactly In Photoshop, the steps to follows. So the designer has an image. He starts by applying a I also blurred it, You blur it, you make and then you export As the displacement map, sorry. And then you add it You add the piece of text, that you exported before, version. Use that to displace by a specific amount, a specific This is my displacement map. Applying that to the text, so that it looks that it's So to recap, in order to create and use a displacement is you desaturate the to use as a displacement map. You reduce the amount by blurring it by one pixel. Sometimes less, sometimes more. The reason we blur the image have in the displacement apply that to a piece of the result is going to be. If you have too not going to be very realistic. If you have too little detail, So usually, blurring the image maximum is more than enough to that you need. You save it as a This this is, again, You create the text, using the image as reuse the original image as These steps are actually the-- so you reuse the apply the distortion filter. And then you can refine the by adding slight transparency Blend Modes to blend with the background, and you So how do we do that in SVG? To create and use a we use the Again, very conveniently named. In SVG, feDisplacementMap uses the pixel values to spatially displace So we have N, N2, two inputs. N2 is used to displace. And if we want to recreate the steps would look almost that we had in in We start by filling the filter will be used as a texture. So in SVG, we have And using that can put an image But since we're dealing with filter, we can't use image. So we have an equivalent, When you use feImage, you are and then putting it inside You desaturate the image that I mentioned before, the one It comes with a few shortcuts, So if you set the value of it allows you to apply a black You'll see the code shortly. You apply a 1-pixel to the image using You use the image created to distort the text You blend the text into the and then apply a Decrease the opacity using called ComponentTransfer. I love that primitive. And then you display the by merging the two So let's start by doing that. I have a filter. I'm starting with feImage. I'm referencing that to use as a displacement map. And then I'm So the result of feImage is to ColorMatrix. ColorMatrix has It can either be matrix, which and then change the values in Or it can also come And one of those So if you set the the values is between-- I think it's between 0 and 1. So feColorMatrix-- if I set the value to 0, it desaturating the making it black and white. And the result of which is a black and white And then I decrease the level by using feGaussianBlur, I'm taking the IMAGE as an For this particular that blurring it by 0.5 And I'm calling the result MAP. And this is what And then using that map is my n2 going to be used to distort So I'm taking my source graphic, and then using the map The scale xChannelSelector determine the the effect is going to be. So the higher the the effect is going to be. And then I'm using in order to apply a slight And at this point, this is It's not displaying because that image has been used So this is what I Now, before I apply that image again, there is a little that I want to make because I didn't really like it much. So in order to increase that I'm going to I get that image one more time. The first instance of feImage Now I get that and then I use the Just like feColorMatrix, allows you to do a editing of your images. So we have FuncR, there's also funcA-- each And then it allows you to apply to each channel. In this case, I'm using which can be used to control of the colors. Increasing the amplitude of the colors. White becomes whiter and And the exponent value affects Increasing the exponent and decreasing it So you end up with more This is where the effect of So you increase the dark areas And this is my image with applied to it. And then next, I'm with the background image using And then I'm layering with the background-- the distorted text with the And this is the Almost identical to couldn't find that font face So I used a different one. So SVG can level up to in other effects, too. Another example-- I want to talk about how we can my favorite function-- to components of our images. Now, ComponentTransfer of component transfer functions. We saw gamma, which is used and intensity of colors. But it also provides that enable you to create from simple color changes to poster effects, So my original image And if you want to give a poster effect is basically of colors in an image. And that's how you Now, how can you do that So one of the other functions provides is the discrete is used to reduce the And it shows more which look more like of bands or clusters of color. For every color shade-- so different shades of red, you're mapping the colors depending on how many x values So for example, since in the tableValues of this snippet, the browser-- this is my handwriting So don't judge me. I write much better on paper. The browser is going to divide. We provided three values What the browser to divide the red component 0 to 0.33, 0.33 to Then any intensity of red, any intensity of red that in each pixel of will be replaced with Any intensity of red will be replaced So a range of colors, will end up being replaced For an image that of red intensities the effect becomes very clear. And the workings of are more visible. Now again, this is just a feComponentTransfer can do. So we saw gamma. gamma contrast and color intensity. discreet allows you to by decreasing the mapping the colors that you have And then it also allows So we can recreate duotone image that you have in Photoshop To create a duotone effect I stole this from a usually go through two steps. You turn the image And then you map the grayscale that, instead of having black it has two different to use as a duotone effect. In other words, you will that the browser will use to So you start with a and it's being replaced with from navy to some In SVG, to create we can use the But in order to map the colors not as discrete you want to map your colors you need to use a different which is called table. So suppose that you want to these two colors here. Each color has RGB These values for every RGB-- the values going to be in the And the values in the are fractions between 0 and 1. So to fill the values of the filter, we need to get the and divide them by 255. Then just like in Photoshop, can be created using The first one is we're to make our image grayscale. So when you have feColorMatrix, equal quantities of end up with a grayscale effect. The alpha is left untouched to change anything about it. So we're making our image And then using that I'm mapping it to are created using these two Now feComponentTransfer The browser will go over in the source image. For every pixel, it of the R, G, and B components. Since our image is will be in the range So RGB-- 0, 1. Then the value of be mapped to the new range we So the red component value would to 0.98, blue is to 0.12 something to and the B is going to go So by the time the of the pixels on the image, values in the grayscale in the duotone gradient map. And as a result, the This is what my This looks OK, but right about it. It could use a little In particular, it would be nicer a little bit more because We can do that using Come on. ComponentTransfer, yeah. So again, using the is used to control the I'm increasing the-- so increasing the component and increasing the the lighter areas shine more. And this, in turn, increases the And we end up with much better than we had before. Now, in addition to applying SVG filters can also using noise, textures be applied to other elements and effects such as these. Yep, that's SVG filters in applied to HTML elements. Now, this can be done using feTurbulence Perlin noise in your This kind of noise is several natural phenomena and in generating complex If you Google the you will find examples using SVG filters. Just like feFlood, with new content, random noise. Now in this section, how we can create noise and how that noise can first much like we did with the And then we're going to see how combined with SVG lighting we have lighting in order to create a So the turbulence filter It comes with five affect the generated texture. Most of the times, there that you need to worry about-- and the numOctaves. numOctaves is short baseFrequency specifies Very low values such as 0.001 So a low baseFrequency And very high values-- very high values such as 0.5-- will produce tiny patterns. Values in the range 0.02 and for most textures. There are two types of noise-- turbulence, which is you're going to see shortly. And then there's I'm going to have to say fractal And I'm definitely going So if I say it wrong, please So turbulence is the And fractal noise has more The number of octaves, is short for number presents the level of The higher the the more detail that you These 12 images represent of noise created with different and number of octave values. So in A, we start with In B, we increase with a number of octaves But we change the seed. We're not going to D is the same as C, but with So D is C but with F is decreasing to 0.01, which will If you notice, if you look at you're increasing the the baseFrequency and it's literally like you have a And then you're zooming And that's what So when we decrease the we're zooming into the corner G and H show the difference and the detail levels. H has more details than G. So the first images I and J are fractal, which J is three levels more detail that you can change the size or y axes. The examples that I showed let me try to go back to them. Yeah, OK. That is horizontal noise. The Perlin noise I just showed That is that noise OK, so there is when I was learning I looked for everything could help me understand them. And there is Hands On allows you to create a using feTurbulence, and then applying that to an image. What's happening here is if we have the feTurbulence. And then it's being used to displace the image. So we're generating using it to displace the image. You can also use it to creates this kind of effect. Turbulence can also be like these splash, This is a demo from an article Magazine. He has a ton of created using SVG filters. He has multiple in this case, to different pieces of text. So you get this effect here. Turbulence can also be animated. So you can define multiple like I have here. Each one has a different And then you can to get something like So we distorted the and then I animated into another And you get this squiggly text. This is by Lucas Bebber, one developers that I've All the demos that he And they're going to because they are very Now, animating turbulence can effects, like we saw Again, I like this video. By the way, these So next up, I want you can use the generated with the lighting to create a texture then, use to distort text or do One fairly simple using turbulence and lighting This texture requires literally primitives to create. So we're going to the base for our is the turbulence primitive. I'm starting with my filter. And I'm calling it roughpaper. I have an feTurbulence. I'm setting the baseFrequency So I'm not setting I'm not setting the I'm just telling it that I need somewhere to start. And the only required is baseFrequency. So let me start with that. This is what I end up with. This is my filter region filled Next, we need to shine Shining a light on a graphic and texture. So to create a need to specify three things-- a light color specified using and a light type specified available in SVG. We have DiffusedLighting, from an outside source or you have specifies secondary from reflective surfaces. Both of these primitives shine by using the alpha channel So to rephrase, a uses an inputs alpha channel The higher opacity areas are and lower opacity areas In other words, the alpha is used as the height of that And the filter uses that height a virtual surface, a particular amount of light Because feTurbulence full of noisy values it's random noise, so random and B and alpha. It produces a nice variable highlights when we Now, after deciding on the you'll want to choose There are three different a DistantLight, which and it's the most appropriate a PointLight, which emanates such as room lighting, and a like the second one, but its and the light can To create a light source, we of the light type. And then you finally To light the noise we will apply a white from a DistantLight source. So I have my noise, and I have The surfaceScale value is the z index multiplier. Increasing this will create in your texture. So applying this lighting that we generated Now, I can see that I want to turn this into So the first thing that have too many sharp edges. So we need to smooth How can we do that? [INAUDIBLE] What's that? [INAUDIBLE] No. [INAUDIBLE] What's that? [INAUDIBLE] Fractal noise-- exactly. So there are two types of noise. And we mentioned that fractal So I start by adding Instead of the I give it the value which makes it a lot more Now, this looks better. But when we look when we are you know that it's rough because How can we increase or the amount of numOctaves-- exactly. So five octaves is usually The effect of a sixth octave So let's apply five and see how it looks then. It should be all we Yep, this looks much better. Now we can change the tweak it more by playing change the direction, et cetera, and the For example, decreasing the getting it closer-- should increase the contrast And the image would like this, which brings us which is not what you want. So the previous one was more And that's all that a simple texture in SVG-- texture, random noise, Now, you can get a If you want to create if you want to create you're going to And then you would need and feColorMatrix in the RGB channels in your noise. And you can get very creative. And you can end up with-- these are just base to create more complex effects. So we have something I see some fireworks on but I don't know. So these are very good of applying different filter that we generated. Now before I end is one very important concept if you're working and if you're not aware with it. And that is the concept The set of filter need a region to be applied to. Like when you have and you apply that, and you want to a specific area on that SVG, Now, each element has a small region are defined by the borders The bonding box in SVG is of a box in CSS. So in CSS, every HTML element And every HTML element So every HTML element a rectangle with a with the top left of that coordinate system. In SVG, we don't have that. There is no box model. Not all elements are rectangle. And so, if you want to apply you need something similar to called the bounding box. The bounding box is the around an element. So for example, if you the smallest fitting look like the pink Although more realistically, also includes any line height. So if the line height it's going to include Now the default filter is the element's bounding box. So if you apply any filter the effort is going to be And any filter result that lies is going to be clipped off. It makes sense because and you want to apply the But sometimes when get a very undesirable will impact pixels outside An example of this This is what happens You can see that the on both the right and the This is not desirable. And according to it is often necessary to of the filter region because the outside of the bounding box. And it's possible to provide for x, y, and width, and for width and height. So the filter element that primitives has x, y, width, and the area of the filter region. You can provide negative values in order to expand it. Now, this is also the default values for the x, on the filter, according to the minus 10%, 120% by 120%. So you're essentially increasing by 10% of that area One thing that working with filter able to visualize that The way I do that is I region with feFlood. FeFlood is going to apply a region. And if I need to see I usually flood it And again, because I want to I feMerge and then So whenever I'm and I'm not sure I like to visualize You can override the area by using the x, y, But you need to keep units attribute-- these are very But if you're ever going to clip-paths or you also have clip-path Clip-path units determines is going to be used for the By default, the is the bounding So you set it in percentages. 5%, 5% is 5% of But you can also change which is the coordinate And in that case, instead you need to use pixels in order just a few things to keep have two coordinate you also have the bounding And depending on you're using for your units, So just something to keep have a filter effect try to visualize the region. Change it. Make it bigger or You can also play with And I have a bunch that I created when I was All of the demos in are available in my And that's it for me. Thank you very much.