This is a potato. 289 bucks from Amazon, it's laptop that money can buy. But for gaming, it's terrible. Intel i3 CPU, 4 gigs of RAM, and no GPU. I'm making a game using the Godot when I tried to run it on this That's about 9 FPS. To make matters worse, because inspired by retro shooters like Doom be able to play it on one of these. Needless to say, I've been working Using this computer, which is as a benchmark. And after six months since taking proud to say that this same potato depending on the user settings. And on my actual gaming rig, I've managed 100 to well over 200 consistently. So in this devlog, I'm going to I've done in the last six months From the raw framerate improvements stutters when the game first loads. The optimizations range from classic of to one thing that is honestly so All right, let's dive Occlusion culling is just a fancy way are blocked from view by other things. To demonstrate how this works in cubes with occlusion culling. Each mesh has an occluder And it's exactly the If I hide the visuals for this mesh, can see that the other one isn't drawn. That's occlusion culling in a nutshell. I've been putting off setting up a long time, because painstakingly creating all these occlusion objects But lucky for me, I'm using Qodot, which And back in December, they added generates all the occluders for me. Now whenever I update a level, button and all the occluders Only problem is there's this get occluded that shouldn't. Like right here, right here, places that playtesters reported. This really breaks immersion, so I I started looking into it, and I ended up working around this bug cull margin to all my map geometry. But this will now make it so a bunch of culled It's also just super jank Luckily, the Godot devs have a hoping it shows up in Godot 4. 3 or 4. 4. Regardless, adding occlusion culling 50 frames per second in certain areas. Alright, we're off to a pretty good start, Baked lighting is a lighting technique the lighting on all the surfaces of information to a file so it doesn't when the player is playing the game. This is awesome because we can make all with very little performance impact. The only kind of sizable downside is you have to re bake the lighting and time depending on how big your scene is. Think on the order of minutes. I went ahead and set this up for fan of Godot's baked lighting system. I mean, look at this before and after. The emissive light coming from the lava bounce lighting really helps all the Best of all, depending on what room I'm frames per second because baked lighting using before, which is Godot's Voxel GI. I do have to rebake every time I update I usually just turn off baked working on a level and only set Plus, for me, baking only at medium quality setting. Why bake at medium quality settings? Well, Godot crashes if Ah, yes, another Godot Okay, medium settings it is. If you've been playing the Bloodthief hundreds of these guys running around. And even though their AI is nothing enemies on the screen at once One user reported getting as low as of the game where there are like One of the main offenders here is the Godot's navigation mesh system to find To the player and any sort of is gonna be really expensive. In this case, every knight shortest path to the player. Every physics tick, which is just I updated the Knight's code to only once every 20 physics ticks, which Then what was being done before difference in their AI at all. One big gotcha with this method is updating their path every 20 ticks If same time every time that 20th tick their path calculation at the exact purpose of this method entirely ideally us at once All their path calculations basically happen at different frames. So what I did was add a random to the 20 tick update interval. With this method, some knights Some on the 19th, some This makes all the path calculations of calculating everything all at once. Which would surely cause a big The next optimization I got from turn off the knight's animations when These knights have some really bazillion keyframes, so limiting animate them seems like a great call. The idea here is to use Godot's just disable the Knight's animation So they basically look like this After all these knight optimizations, That player that was reporting the 110 FPS at this part of the game. So at this point the game is running super Rocking a solid 200 FPS consistently, computer, we're looking at that solid 45 So, imagine my surprise when I playtesters and saw that dozens of were experiencing terrible stutters Ah, shit. Here we go again. Enter the granddaddy of The one that stumped me for the Shader Compilation. Based on my research, Shader Compilation On basically every 3D game engine. Digital Foundry even called number one issue with modern PC And Bloodthief is certainly no exception. Look gameplay I was able to capture Stutter here. Stutter here. Stutter here. Stutter here. And then when we go to kill this So what gives? How come I wasn't experiencing Well, the thing is, shader compilation And once shader compilation is completed, and never need to be computed again. So, in other words, shader compilation the player boots up a new level. And I wasn't experiencing it, already happened on my computer, So, unfortunately, as it turns out, your machine, when you give your game to Which sucks, because those first few first impression of the game, and So this begs the question, Aforementioned shader cache so I can and go about debugging it I scoured the do this and some people did give hints as like this reddit post here and this github that different GPU drivers may store I also think Steam, which my game shader cache stuff, because I found next to my game in my Steam library. So, in the end, after basically manually looking files, I determined that these stuff, and if I delete them, the entire the shader compilation stutter on my end. Side note, it's kind of program files on my computer. Like they say nothing about Like this file right here might be Well, we do what we gotta do. For science. You, are finally awake. Also worth noting, since these files triggers shader compilation issues for So, maybe don't do this if you just through that infamous shader compilation Alright, so I can finally by deleting the shader cache. It quickly got painful having to go manually, So I wrote a Python script Now it's finally time to So what I'd like to do is precompile loading screen or something. That way they don't have to Ideally Godot would provide a function but unfortunately it's not that simple. According to the Godot creator to compile until you render it. In other words, in order to compile a thing that uses that shader on the screen. Turns out this has been a known And the prevailing strategy right now shaders, visual effects, and display explosion right before the game starts. Since we definitely can't let the player fake loading screen, and then maybe put like we know what we're talking about. Like, compiling shaders. So, this giant explosion unfortunately didn't work for me. The problem, I think, is that shader like, a bazillion different things. For example, according to this guy, by changing your lighting setup. According to this guy, updates to may also trigger a shader compilation. And according to this YouTube video, shader may trigger a shader compilation. And there's almost certainly a bunch The little script I wrote basically the player could encounter in game. It instantiates a quad for every It also displays every It does all this while But nothing that I do in this the stuttering completely go away. So I opted for a different and Record myself playing through the level. Exploring every nook and effect, and killing every enemy. And then, when the player starts up the a replay of my playthrough at 10x speed. Not a video, but literally it is and playing them on your machine. This guarantees that all the stutter will be pre compiled. Of course, similar to the other approach, sure that the player can't see what's I also turn off the volume at this sounds like it's like frantically Check this out. Yeah, we'll keep the volume off. And oh my gosh, after months and off, this finally fixed it. Silky smooth. No stuttering at all whatsoever. I tried this out on my wife's would last like five seconds and Funny enough, I checked Godot's of course Godot has an elegant 4. Well, FML. At this point I hit a wall No matter what I did, when I ran the game the game to consistently reach 60 frames is the real goal for serious gaming. Also, as development has progressed, frustrated player on the Bloodthief This leads me to an issue that I when it comes to deciding if you Support for graphics APIs. For a little bit of background, there a game engine to interact with the GPU. DirectX, OpenGL, and Vulkan. Unlike OpenGL and Vulkan, proprietary, developed by Microsoft. And since Godot is an open source engine, Further, if you want all the best going to need to use Vulkan. Vulkan is the modern open source standard, by the industry in favor of Vulkan. At face value, the fact that is not really a big deal. It is cross platform, and it is a modern be more optimized than with OpenGL. The problem with Vulkan, however, Since Vulkan came out in 2016, if you there's a solid chance that it just you wouldn't be able to run Bloodthief. The GPU manufacturers would have had to for their GPU that Does support Vulkan. Further, and this is just speculation it actually takes time for the that actually work well with Vulkan. For example, the CPU for the potato that was actually released right about when And it's Intel UHD Graphics 620 driver The problem is, it's freaking terrible. Like I said before, if I drop I'm hovering at around 56 FPS. But if I force Godot to run my game I'm suddenly getting like 140 FPS And just to fully prove to myself that Vulkan driver, I did the same thing on my A pretty modern GPU. And if I force Godot to use OpenGL. Aside from breaking half the OpenGL had worse performance than So that was a lot of technical nonsense. But, in summary, in the current of forced to make a choice. You can use the default Vulkan which will have all the newest It will give you the best performance best, will probably run terribly won't run at all on old computers. And then your other option is to use renderer, which has less features, runs better support for old computers. I'd be curious to hear how It's possible that you may have to make I'm not sure though. If there are any Unity or Unreal curious to hear what your experience Anyway, I opted to go Which means that my dreams of one these are pretty much shattered. It also means that there's probably gonna play the game, which of course sucks. Annoyingly, if the player's computer pop out this pretty misleading try to run the game using OpenGL. Which, as I showed before, Godot doesn't seem to have a way to turn message saying that Bloodthief supports And don't you ever say I did. So, moral of the story, it's not all land, so if you're considering using Godot Also, it's definitely a good idea range of computers if you can. Okay, before I wrap this up, I miscellaneous optimizations I did. I disabled screen space ambient nothing in my game, but actually can be Eventually I'll add more customization players can choose if they I set up distance fade for a whole effects, torches, lights, and enemies. When loading a new level, I set while this loading bar fills up. This is way better than just showing the level loads and the player just I also added the ability to change This definitely helps the game run And it also has kind of an endearing, if that's what you're into. And that concludes everything I've It runs consistently around 200 and 50 to 60 FPS on a potato. Well over 60 FPS if you Most importantly, if I look at the surveys the feedback says the game runs smooth even remotely the case six months ago. So overall, I'm feeling pretty By the way, if you're interested in so you get notified when it releases. There's also a fully open you're interested in that too. One last thing, I'm So if you want to chat with me Bloodthief community, join the Discord. I'll be leaving a link to Alright, that's all I have. Thanks.