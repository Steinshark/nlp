Hey, welcome to chapter two. In this chapter using Expo Router. Before we get started, some of the conventions First of all, it's a convention As you can see here, And this is a special directory this directory will become a screen as well as the web version of this app. We also have this route layouts. If I click on it, we have this route shared UI elements Then we also have naming conventions. So these layouts it's always going to be named layout And then we also have this convention index, the entry point of the route. So for example this index.tsx that But the route I have my app running and the route is not Right. Because we already know as convention that the index is going to be the entry point. Okay. So let's go back to the code. Okay. Now we know that the index And this route exports a react component And it can use either TSX or TS. And finally, we need to understand that will shared this navigation Okay, so now let's create a new screen. As I mentioned before, any file that we So let's go ahead and create a new file This is going to be my about screen. Let's hit enter So in this case I'm exporting a function And I'm importing from React Basically it's the same thing But the only changes are that now This one is going to be AboutScreen It's the same. On the right Nothing is happening yet. The layout is going to define So let's go ahead and define that this screen that I just added which means this screen can be presented on top of the index screen So I'll just duplicate this and change We can change more properties by specifying the options prop. So these options prop like the header title for example. And I want this to be my sticker And if I hit save now the header says Sticker smash. Let me just put a space in here And let's do the So in this case I want to have options. And header is going to be about from the index to the about. We can go to the index screen. Because we are using Expo Router We can import a component called link This link it's going to take a reference but as property and the reference as soon as I open these double quotes, Is it detecting that so I can simply hit enter on this one. And that's it. Now let's add a style for this. The style is going to be and I need to define this style. So let's go down here. And after text I'm defining a font size of 20 because I want to give the perspective And then I'm setting the color Finally, let's go inside this link Like for example, I'll just take my device and press the And there we have it. Now we navigated to the about screen. So we get this really cool header And also it's worth As you can see here. And we have this really cool animation are native animations. Right now This is my website. And when I press go to the about screen, I can go back so the navigation is working And now I want to show you guys if I try to navigate (oops, I try to navigate on web and let's say test and hit enter now in this case Expo Router, it's that we are navigating to a route Right. And we have this unmatched route error. But we can actually customize this If we go back we can create a new screen. So I'll go ahead and create a new file and I'll name this one, +not found.tsx. Now this route will display And this is useful For example, the classic 404 error. So let's Now this is a very simple component We have just a function not found screen. And we are defining, a view and a link that is going to take the user back to the Now, it's worth to any other screen, But it's a good practice Index is going to be the entry point. So we don't need to type it. Right. So if I just say slash this is going to take me to the entry So let's go ahead and hit save. Now another thing actually that we are We are importing stack. Stack As you can see here, instead of going to the layout Right. We could do that as well. But if you want to add this configuration to the screen, Not found. We can do it directly And now if I scroll down, we can we are re-utilizing So let's go ahead and hit save. And this is how it looks. We didn't find this route, but my 404, error, and I can press the Yeah, now I'm here. Now this is working out of the box, but, a new screen that is going to contain, And from here we can define some things, shown equal to false, and the name Let's hit save. Okay. Now we have a different, behavior I don't want to show the header, Not found header. And then click on that. Go back. Now something to notice here And we have this back button. So in the index in the index route from rendering this by saying header left. And then just render an empty tag. And let's go back. This will prevent to show the back button So we can go to the home screen. Then we can go about I can say test again, is going to tell me, oops, not found. Go back to home and it's working Okay, this is going to work as well on iOS Okay. So far so good. Now I want to create some tabs. The first thing that I'll do We are inside the app folder. So let's go ahead and create a new folder. And to define this segment of screens I'll create these tabs Now we follow the same pattern First thing is to create the entry point which is going to be a layout TSX. Then we need to define the screens. Now I want to utilize the index So we can simply take these two screens So let's say move. And the cool thing about this is that we don't need to change anything This is going to work just fine. Now let's go to the layout and we actually can copy So I'll just copy everything This is going to be the root layout. And now let's paste it in here. And instead of saying root And the only difference being a stack, in this case So let's import tabs from Expo Router and just replace these, tabs, these stacks for tabs. Okay. And hit save. Cool. Now, we have a warning over there. The reason is And now they are not accessible, in here because now the route changed. Now the entry point It's actually going to be tabs. And this about screen It's going to be inside my tabs. So we can go ahead and delete this And the only screen that I want to leave outside of my tabs, it's The reason for that it's Right. And we have first of all the tabs. And on top of the tabs not found so that we know that, you know, Otherwise, if we try to present the user is going to still be able which is not good. Right? So let's just leave So in this case we have two navigators And each of these navigators has a header. So in this case delete everything and say header This is a property in the options to prevent rendering the header okay. And now this is looking fine. And we have these two tabs at the bottom. And I can navigate between them. Okay so from here I can navigate. But as you can see I'm getting So what I can do for now and I'll show you how we can prevent Just by using their lock box. And then we can access this method And as you can see now it's working fine. We can navigate between screens And I can also press the go to And this is going to take me Cool. Now actually because I have these tabs, and delete this link Right. We have the tab. So let's go ahead and delete this import Now what I want to do Because right now we have, you know, with the white background So to do that let's go to the layout. This is the place So the first thing that I'll do of this HeaderLeft that I had in here. And let's start by defining We can apply options But we can also do the same by accessing the We can say something And then from here we can say something And then we can define, this color. And as you can see here, now Now of course our tabs look very bad. Now let's go ahead and add some icons Ionicons from expo/ vector-icons. And then we can use these icons to replace here in the tabs and inside the options And then we can define this icon here. Now this tabBarIcon basically it's going to take a function And from here Now the Ionicons take a name and a size. And you can search When you open the double quotes, for, for example, home, So, this component is going to receive some properties icons that come from the tabs navigator. And these properties are focused So basically this is a boolean to let us know when this tab is focused this is a boolean, For example So in this case I change the name The name is going to change depending If the tab is focused Otherwise I want to use this one. So if I hit save now, now I have this icon But if I focus now the about screen, Now the color is not being applied. So let's apply the color that we are And this is looking really cool. And now let's go ahead and do this So I'll just paste these in here. Now if I go to the about And when I go away it's gray. Now let's change So I just go ahead and paste So for example This is going to take an object. And I'm defining the background color The headerShadowVisible And then we can also set the So if I hit save we basically as well as the background And then we set So now our app looks really cool right. And I can navigate between these items Now as a bonus for this lesson guys I want to show you So if we go to the route layout, this inside, a tab like this. And hit save. And then we can use the status bar And then we can use this style to be equal to light and hit save. And now as you can see, the hour And this status bar is being used And now our application looks amazing And that wraps up chapter two. In this chapter we learned how to create to navigate between screens, and add the style I hope you like this chapter. I hope you learned something new