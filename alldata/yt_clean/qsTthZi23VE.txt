This is an advanced git course taught by Tobias concepts and tools to make you more productive friends. My name is Tobias. And I'm going to make is your version control system, you have a lot of about some of the more advanced topics today, and much more. At the end of the session, you'll Before we start a huge shout out to the Free this mission of teaching people how to code and A couple of words about my own background, I get desktop GUI for Mac and Windows, we've been 100,000 developers and designer, designers work Git and make fewer mistakes. For today's sessions you can follow along on the command line, Interactive rebase is like the Swiss Army and lots of possibilities. It's really a I'll start to explain what you can do with it. examples. So in short, interactive rebase allows make changes to your commits after the fact. So delete commits, reorder them, combine multiple make new changes from its change that crazy stuff. rewrites your commit history. So the commits you they are new commits. And there's a simple rule, that you've already pushed to a shared repository. A good example is when you're done before you merge it back into a team branch, you so it's easier to understand. And that's Before we take interactive rebase for a test This is the same no matter what exactly we're combining commits, the general steps are always range of commits you want to manipulate. Once you have that, you can start the actual have the change chance to make your edits. You deleting, combining and so on. Okay, let's try First, we'll change an old commits message. And Alright, let's hop into the command line Okay, so let's say we want to change Just to note, as a reminder, if it were the most we could just use git commit amend to change the for this one, this one, this one, we really need interactive rebase, determine our base commit And this is at least the parent commit of the change this here. So at least this one here. I or I can do a little bit of counting. So this two head minus three, I'll use that. So Git So there is an editor window popping up And you can see all of the commits I mean that we referred to a range of commits, from head all the way to the one we mentioned. big but, but we don't change the commit message what kind of manipulation we want to With the reward action keyword, that's the commit message. And don't worry, all of the action comments. Alright, reword, then we just save and the commit message right here, right? We do not And that's actually it. So now we get because we can now finally actually change the the markup structure, very important. Save and see it's now optimized the markup structure. So So let's do one more example of an interactive Let's combine well, let's say these two, first step of any interactive rebase. Correct, we have to go at least to the parent so it's head on is 1234. Okay, so the git again, here are the commits, we just requested squash keyword. Squash works by combining the So by marking up line number two, with squash which is what we want, right, we want to combine squash and combine it with the one before. And a new window will pop up, right. Why is we are creating a new one, right. And we of course, so I'll just write combine And let's see what happened All right, now we have combined they were present here, and they are now So these were just two examples of what see the other possibilities, you should check out add a link in the description. Normally, when you you use a command like Git merge or git from one branch into your current head branch. But in some situations, you might only want a branch. And this is where it gets cherry picking example in a minute. But before that a word of Your main way of integration should still be on exactly for this job. Cherry Picking should you need to have a good reason to use it. a sure I'll show you a great example for when Let's say you made a commit on the wrong you to commit directly The domain or master or and commit there by accident, of course. And Let's take a look at an example situation in and have that checked out. And the last commits have a feature newsletter branch. So my guess this should have happened on the feature to be on the feature branch and not on master. So So first, we switch to the feature branch, feature that commit over and we can just copy the commit And then git cherry, pick and hash of the commit. And we can see, boom, here it is. Now, it should here it is. If you also want to clean linger here, it shouldn't be here. Then back to master and then get reset to Ashutosh one behind the head. So we're effectively Wallah. Master is clean and newsletter, feature well as if nothing had happened. Let's the ref lock. You can think of the ref log every movement of the head pointer. So what is the you commit checkout, merge rebase, cherry pick documented there. And this makes it perfect for show you a perfect use case for the ref log. Let's At least we think we don't want them anymore. right? They've disappeared from the we noticed that this was a horrible So let's have some fun and make Alright, so here we go. Let's say we want to throw we are making this here our latest revision on to the clipboard. And on the command line, I can Alright, let's have a look what happened. And And we're back at this rubbish in here. I'll this was a horrible mistake, panic emoji con. and we just deleted them by accident. So let's Opening the ref log is as easy as And this here is the ref lock that journal where of all the entries are ordered chronologically, are at the top. And if you look closely, right at the top. We just did that 20 seconds Now if we want to undo our last action, we can documented here. We can just copy the commit hash, command line to the clipboard. And I could use git create a new branch. Should I find a little bit start at that previous revision with the correct Okay, there's a new branch. Wow, that can We just saved our necks. Awesome. So we just And here's another great use case So again, we think we can clean up it's a branch not commits. But again, as life And we still need it. So let's take a look ref log, re cover, Branch. Okay, so here's a let's say our customer or boss or team lead, say of course, we go ahead and delete it. Just this one is present nowhere else. So we are All right, but before we can delete it, we currently the head branch at the moment, and we checking our master. And then we can delete, a commit that is not merged into So now let's say our customer changed their what do we do? What do we do? What do we Alright, and it turns out, we're lucky checkout to master. So let's try returning to so here is the checkout and I'll copy this here to I think it was called featured login if I'm right, that we just copied from the ref log. And let's Wallah. And it includes that seemingly last If you're using Git in a desktop GUI like tower really easy, you can simply press command Z to when you made a typo, and this works for almost commits files, undoing a commit or a bad merge, doesn't matter what it is. So I can just go forced delete, I can just press Command Z. And a project, you want to include libraries or other download the code, copy the files into your projects. Git repository. And this is a valid If you simply throw those library files into your First, you're mixing external code But the library is actually a project of itself. There's no need to keep these files in the And secondly, should the library change because a hard time updating the library code. Again, the old items. These are quite common problems that's sub modules. A sub module is just a is that it's nested inside another fully functional and Git repository. You can like with any other repository. Let's see we have a little sample project here. And Creating a lib or or vendor folder is a good idea Let's do that. So let's create lib, and a little JavaScript library from GitHub, I can do provide the remote URL of that repository. And you repository responsive misspecified. And let's And here we go. We have a lib And here it is. Our project now contains that you can see there's a dot Git sub folder here. So this is indeed a fully featured git again, the actual contents of that sub module, Right? This is important to understand apparent the local path inside the main Of course, the sub modules, working files are here libraries code, but the files aren't are not part not part of that version control context. Okay, So there's a new git modules file here. And so you can see here is the path in our also a record of that in the Git slash config file And finally, the Git also keeps a copy in its internal git modules folder. So modules, and now we have lip to progress. So stored inside of our main git repository. These this configuration. Because as you can see, get is quite complex. There's good modules, there My strong recommendation is don't mess with sub Do yourself a favor and always use proper git All right, so let's have a look at our projects sub module as a modification like any other, main repository. Let me just do that to progress library. Okay, we've successfully Now, let's start from the other end. Let's clone And let's step out of that and get clone I And let's see what happens here. So I know and we'll take a look at those Here we go the airflow project. So let's see. So I know that the product checked actions folder. So these are our sub modules after cloning, visual empty. Okay, so what's folders empty? Well, you already know that modules files, right? The parent repository So when we clone a project with a default and we only download the project itself with however, they stay empty. And we can update. And we have to initialize these for the Sorry, I have to step into the you can see this action happening here. It's now, the sub module folders have been sub module Git repositories have been cloned yeah, these are all populated now. So using git clone, like we just did, and I would say. So you can achieve the same if the recurse submodules option. This tells Git to finished automatically. So I would have used the option here out the recurse submodules. And we the beginning. Alright. I don't want to go into thing is important to understand the way revisions can have countless committed reversion revisions, can be in your working directory at one time, out a branch. And automatically the last commit in new commits to that branch, the checkout revision right, we just move the pointer forwards to sub module repositories, on the other hand, not a branch. And it makes sense, think about it, new commits arrive. In a sub module, however, mostly library code. And in that situation, I revision of the code. Even if the maintainer I don't know if those would break my code. So I Alright, let's quickly hop into the sub modules this is a target client. And when I select the sub module is not checked out on a branch, but I've already mentioned it managing sub modules is a look at a good desktop, Gui, like tower, for all of that is really simple here, Okay, we could talk for hours should be a good introduction. Just try them And git repository is a perfect log every change is documented. And sometimes you want for something you're wanting to find a piece searching and finding good works. Or in other You can filter by almost anything by date by let's start with date and search for all commits we're doing this in the Ruby on Rails, open source present, you can use git log and then the after after July 1, I specifically specified in that and thereby get all of the commits Pretty easy. And if you want to search for a you can do that with the destination grep. Flag, refactored in its message. And you will see here You can get really fancy with GREP, because it to your creativity. Looking for a certain author git log, let's search for anything And of course, before I forget that, you can you could use dash dash author and dash dash from a certain person before a certain date. And really handy to understand how a certain know that a certain file used to work fine in filter for commits with only that file. So let's readme dot markdown, sorry, markdown. And I get manipulated. The double dashes in that command, that Git doesn't confuse the file name with a way to see commits that are not in one branch, want to want to find out, for example, what after you branch off with your private feature Login, dash dash, or sorry, dot double dot that are in Maine, but not in feature login. And up to date again, or you can at least see what future work. Alright, so much for today. kit. It's completely free of charge. It's a advanced get topics from things like interactive merge conflicts, sub modules, what have become more productive with Git and version have fun and see you soon. Here on