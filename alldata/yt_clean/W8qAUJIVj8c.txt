&gt;&gt; In this episode we're going to have and he's going to tell web applications with the F# &gt;&gt; Hi, my name is Cecil Phillip, and welcome to another episode and today I have with How are you doing Phillip? &gt;&gt; Hey, how is it going? &gt;&gt; Doing pretty good, here today to talk to us and not only just F# but, F# Web Development, right? &gt;&gt; Yeah, exactly. So, I talked a little bit the new stuff that's F# like language wise the stuff in the tools but there's a lot more Visual Studio, and in particular, F# on .NET Core, has a lot of options for doing especially for web APIs, and I personally think it's So, I wanted to go over some of the different options &gt;&gt; Sure, sounds pretty good. And you have some slides too that you want us to take &gt;&gt; Yeah, absolutely. So, there is numerous options for web programming I think you can even that has HTTP listener, and just listens on import But, there is sort there's ASP.NET Core MVC, which any C# ASP.NET programmer should understand there's Giraffe, which ASP.NET Core is like more and MVC is a framework Well, Giraffe is like a functional library on top So, it's very similar to MVC, but it's functional instead And it's actually which I'll talk about as Suave is something that Saturn is another option, it's a relatively new one, and it's actually built and basically Giraffe is build only what you Whereas, Saturn is like okay we've got We got all sorts of you want a bit more of &gt;&gt; So it sounds like pretty your programming your particular need I could just say hey give me like this little lightweight thing that I could use to build maybe I need some more pieces, I need scaffolding, I and some of these can pick another framework, will have those things so it makes a little bit &gt;&gt; Exactly. Then we have Suave, which I mentioned before. It's been around and it has a particular syntax to building your API routes, that was actually and so I'll show kind of And then there's Freya, which is a really interesting it's a purely functional so it's, well more functional, if you will, but it uses The sort of model pipelined sort of stuff to get really functional So, I kind of want to these a little bit and which ones you might want to choose and &gt;&gt; That's cool, so to talk about first? &gt;&gt; Yeah. &gt;&gt; So we got good So, it's in the box, and the Data Code SDK, you just type &quot;.NET new&quot; at the command line, There's a few options It's fundamentally an object oriented So, if you're interested in learning functional doing this is not necessarily a way to learn However, if you want to have functional programming put on top of something that you're in particular if you're C# and object oriented programmer, then this might actually be Because, you can wire up APIs exactly the same way that and then you can connect that to like just like a core thing that executes all of it just calls into stuff that you're already &gt;&gt; I think the thing is that you know, if I'm C# Developer, I could always look at some of the things that and I could look at it in and it kind of helps me translate back and forth between &gt;&gt; Yeah. &gt;&gt; I'm not necessarily hey let me learn I'm also not thinking about, like how do I translate I wanted to learn what's &gt;&gt; Exactly. That's kind of unlike you know, has all the object oriented but it is a functional So, we basically say, &quot;Hey, object oriented is great for functional is great for We have a set of defaults are meant for but you can opt into object oriented programming And so one of I'm a C# ASP.NET Developer, I know I'm interested but I don't know Let me apply some stuff so I can get something going, and then just kind of slowly So, the point where transition away if I feel like that &gt;&gt; Got you. &gt;&gt; Yeah. &gt;&gt; So for the F# and MVC stuff, are there templates already Visuals Studio Code that can &gt;&gt; Absolutely. How and show you what it looks like? &gt;&gt; Let's do it. &gt;&gt; So, I've put up file, because I'm terrible with going to like it's going if I try to select this menu. You'll notice under there's a thing called &quot;Web&quot;, there's a thing You'll be able to see that this ASP.NET Core So, we'll call this FunTimes, because we're having a fun time, and I blew up the font So, this in particular But I have Tonic chord 2.1, Installed on my machine. I'm not going to enable docker support because I but I can enable that as well. All that would do is compose file and Docker Yammer So, anyways, you get It's going to restore like any old .NET Core thing do. We have basically three files here that should be this program.fs, which Startup.fs, where we'll This is very similar except it's written in F#, and there is Configure Services, Configure Member Overload all- it's the same thing Then we have this which is just our values. So, you'll notice in this Get, we have this static and then we have this other Get that has this value &quot;value&quot;. Let's do something a little bit better and try to treat this values thing as &gt;&gt; Got you. &gt;&gt; We'll pretend that because that's for FunTimes. So, I'm just going to your Source File, call &gt;&gt; ItemsService sounds good. &gt;&gt; Yeah. Name doesn't I'm just going to so we have a as we have modules Modules are kind of more for Communicating things They are fundamentally therefore holding code, organizing code, They can also hold values, Whereas, name- and so I'm just going with because I generally like to have top level namespaces instead but you can do whatever So, the way that ASP.NET works, is if you want to do something, you've basically got to Like, if you want to So, lets teach you how but just in C#. Right. So, we know we an interface and that's something that implements that interface. So let's start with We'll call that, IValuesService. Okay. And this is a type, like there is no interface here, this is just a type, and I'll and I'm not going to actually write like I'm just going to say to string array&quot; in this values controller here, we have an array of strings. So, we want to just have &gt;&gt; Right. So my C# brain, as I'm looking at this, what I'm seeing is that you have and I have some function called GetAllValues that but returns an array &gt;&gt; Yeah. &gt;&gt; Okay. This will be I need to go abstract, because I'm inside because I'm live coding, I'm So, here we have an interface. If I hover over the Tool Tip type IValuesService an abstract member, given a unit which is nothing, that's same thing is void, and then there's get gives me a string, which matches what value controllers Give in an int, give me a string. So, let's go ahead and So, we'll go, we'll just So, to implement it, I'm going to have IValuesService with, and notice how I did I could go this dot, I could go x dot, I could name it whatever I want. That's if I want to refer I need to give it a name, but because I'm not I can just go with which is basically this is a member, it's but I don't really care because I don't need to &gt;&gt; Got it. &gt;&gt; So, we go GetAllValues. That's right. We need so we'll just take this out. &gt;&gt; Or just borrow some values &gt;&gt; Exactly. This is which I don't know if you would actually want to do that in real code, Okay, so- &gt;&gt; Is values database now, I guess a field or a property? &gt;&gt; Yes. So, this is just a letdown So, we have these let similar to a var except But they can also be And when they're defined inside of classes So, I'm not going to be able like when I've instantiated I'm not going to be &gt;&gt; Yeah. &gt;&gt; It's just hidden by just like a nice convenience for- &gt;&gt; For how you could scope &gt;&gt; Yeah, exactly. It's So, you noticed I still because I haven't So, I'm going to go GetValue takes an int. So, we'll call that index, and we'll give it which is actually optional but I'm choosing to do that anyways. &gt;&gt; Okay. &gt;&gt; So, we'll take values. So, basically, depending we may not necessarily that this is going to exist So, we want to be able to deal with the fact not exist but still be able &gt;&gt; Okay. &gt;&gt; So, I'll go let and I'm going to use This is similar like I'm going to pipe and this function is going I'm just going to pass So, if you hover over &quot;tryitem&quot;, tries to find the nth returns none if or if the input array does not contain enough elements, right? So, if I hover over a result, you'll see that it's a string option, right? But the signature of So, I need to find this string option into a string. Well, this is where the magic I'm now forced to that I may not actually have So, I can do pattern matching I'm basically saying meaning, there's something there, there's actually a value, then, we'll just But if it doesn't exist, I need to do something with that. Oh no, means we didn't have it. So now, I'm fully implementing IValuesService but I've also dealt with I mean, you could imagine it could come from somewhere else. It may not have a thing that or index might also be than just an int, right? But the concept of, &quot;hey, find me a thing at this location, somewhere in this remote source that I have,&quot; well So, we need to deal F# optional in dealing pattern matching are &gt;&gt; Nice. &gt;&gt; So the next step. We haven't done anything yet because we need to go into startup because this is where we need to actually &gt;&gt; Right. &gt;&gt; So, now, we're going instead to the configure of services. &gt;&gt; Yeah. &gt;&gt; That's inside where we're going to tap into the Iservice collection something to the DI framework. &gt;&gt; Yeah, exactly. &gt;&gt; So, I'm going to What did I even name this thing. Oh, item service. &gt;&gt; Item service. &gt;&gt; I thought I named Well, naming it's always fun. &gt;&gt; So, we go and we'll go &quot;IValuesService.&quot; There we go, and we're going So, this is something that you notice you don't you have to do that in F# because configure services meaning nothing, but add transients returns &gt;&gt; Yeah. &gt;&gt; And C#, that just gets But in F# it doesn't because we're very Hey, if you're calling &gt;&gt; You want to do something. &gt;&gt; Yeah, you should Now, if you literally want then, you can put it into The Ignore function you gave me a thing.&quot; So, now that we've we now need to do or we'll go into and we'll go service, I guess that's what open ItemService and this Okay. So, I now have that the DI framework is So, in this case, we'll go let values equals and right here, we'll go let value is equal to And we're going to pass in. &gt;&gt; That ID? &gt;&gt; This thing called You notice in the little hover tooltips I can go to definition Just a nice fun contributed by one of our open &gt;&gt; Oh, nice. &gt;&gt; So, I figured I'd So, let's just go ahead So, for people that have been this is just kind of there was no crazy stuff that working with the way that That's really the point, right? We want this to be something that people can use. So, were okay. So, API values, value1 and value2, it's So, we'll go one that We'll go 5,000. Oh no, looks like it's working. &gt;&gt; Right. &gt;&gt; So, what you can maybe this item a much more complicated create perhaps and then, I could from here, and then, just call into it there, be in an all F# projects. Then, I could write all accessing a datasource and I could do that all into that because now that if I'm familiar on your programming ASP.NET MVC, I can just do this I'm going to factor this out, get a bit more functional and see where that And that's kind of what I is for people trying to learn &gt;&gt; Right. You know what I really love about that point I can have a solution which essentially is and I can have some of they might be C#, and I could mix them all So, depending on I can pick the right language &gt;&gt; Yeah, exactly. But speaking of picking let's talk a little bit about some more stuff that we have. &gt;&gt; Sure. &gt;&gt; Because it's not There is a cornucopia, of things that you can So, let's start about So, Giraffe. Well, first of all, it's got a very different logo. &gt;&gt; Okay. &gt;&gt; That's really cool. It's super cool. It's got the little lambda in the shape &gt;&gt; Nice. &gt;&gt; Yeah, that was really So, this is kind of at its heart. I like to think of it as it's So, whereas ASP.NET Core MVC is ASP.NET Core MVC but NET core. This is functionally ASP.NET Core, so it's It's also it's more lightweight. It's so like whereas it's very opinionated in the way you have to Like I have to wire up the DI This is much more of a library, it's a bit more lightweight, it feels a bit more low level That appeals to and so that's part love this because I'm actually one of I like having real direct control over each and every little thing. &gt;&gt; I'm assuming with get a lot better &gt;&gt; It depends on the workload. I think between NBC and Giraffe they're but there might be a little. I haven't looked at but I know that when there were benchmarks six or they were basically the same in terms of perf like module, maybe a couple of requests per second or &gt;&gt; Got it. &gt;&gt; So, this uses what's known as Kleisli composition to So, few functional and specifically those I just said Kleisli composition. That's what this uses. I Anyways, what this actually means for the rest of us is that, it's a really convenient and it uses fun little operators and those arrows the thing on the left goes It's actually, in my opinion, where you can learn the and just have some nice syntax to work with in the meantime. So, I think this one's if you already have experience or and you're not or .NET Core, ASP.NET Core, or maybe you are, but you've never really explored F# before, then this is definitely try out because it's So, I want to show you a little bit about &gt;&gt; Cool. Let's take a look at it. &gt;&gt; Yeah. Okay. &gt;&gt; I see you're already doing this one on You're doing that &gt;&gt; Right. Of course, I am. So, if I wanted to get I already have giraffe.template. Yes, something like google how to do it or something. But, basically, you do .netnew-i, or --install. This one install a new template such that when you you'll be met with a thing, a Giraffe Web App. It'll say, okay, Harold, the short name is Giraffe, the language is F#, and here are some tags. So, I'll go to 'dotnet it'll show me some options. So, there's a dash uppercase V There's a few things I can use just the I can use Razer which is actually ASP.NET NBC Razor pages. Well not the Razer pages text, but it's Razor templates It basically builds can.Liquid which is an open Or I can go with none where have a web API and that's So, there's IncludesTests, there's a thing called UsePaket. Paket is an alternative It uses NuGet like the backend, but it resolves packages has a lock file that specifies all your dependencies source code, that sort of stuff. So, these are You can play around with it in your spare time and check it out. But, we'll go dotnet and let's put that into, we'll call that giraffe fun. &gt;&gt; You had to do a new, &gt;&gt; Yeah. I am wonderful at &gt;&gt; It'd be cool if they just had a dotnet giraffe command. We should submit that on PR. &gt;&gt; That would be cool. Cool, actually. Yeah. Okay. See if I open code at least this Yes it probably should So, it's done a design time Builds so it's actually built to deal on that sort of stuff. You notice there's this this came from paket where So, few things models.fs, httphandler.fs. This models.fs, is hey this is a type, It is what's called and then and this is basically want to put into So, then you can have an F# type, in this case, a record type. You can basically have of what you want and then it will understand how to handle that under the covers. &gt;&gt; Okay. Let me ask you &gt;&gt; Yeah. &gt;&gt; So, I see there's a So, is this framework So, do I have to put all my &gt;&gt; Oh, no. You could put this The main thing is that space giraffefun.models and you'll notice that we're opening the So, that's where there's this slight response and we have these little brackets right here, that's creating one an instance of it and then it's taking So, what I want to do very There's a bunch of stuff right here that you can I mean, when you build you'll have to learn just wiring up to ASP.NET Core. It's actually doing stuff very similar to how It's just, I mean the goal of it is to take an if there's an actual and give it 500. Then, this thing that they your actual Web API Another thing that here, so this is pretty fun. Notice how I click this tab. This is the &quot;I Not&quot; tab. I'm actually using a plugin This is the official F# plugin for the Little Studio Code. It turns it into See, there's this handlegethello I'm going to say, &quot;Command&quot; it will go to definition There's all sorts of really cool pieces of I really recommend stuff with VS code on a definitely check this out. It's a really great alternative &gt;&gt; Is that particular with F# or just F# &gt;&gt; This for anything. So, I use this in Little Studio. My main solution, well, it's the F# solution itself. It's a really big one. That But, anything that's I always do it in VS code first, and I do all of my F# So, F# has a scripting can create F# script files execute them in a thing called F# interactive which is just an interactive So, I prefer VS code just because scripting is thing and I like having &gt;&gt; Sure. That makes sense. &gt;&gt; Yeah. I reckon even if you're you should definitely check You may find that you like So, I recommend people Let's explain a little bit is doing because this is very different especially with C# in [inaudible]. So, we have a function, and WebApp signature which is an abstraction actual, the library itself, and given in ASP.NET an ASP.NET Core abstraction So, it's important to but in terms of how you actually write code like new API, that sort of stuff, you don't really have to but it's definitely worth understanding that there's because that's how you So, it's a thing called webApp, and webApp is comprised of and Choose is comprised of well, in this case it's This whole thing right and it's a list of two items. One is called a subRoute, and subRoute takes in &quot;/api&quot; or whatever You can define routes and then at the very a thing called setStatusCode. setStatusCode is it's going to be 404, and then remember how I Is the Kleisli arrow, and put the setStatusCode ''I want to compose this with a function that is called text,'' and text will ''Not found&quot; so the equivalent of happen in ASP.NET Core, it'll just say, ''Not &gt;&gt; So, that's a quick that will return the headers and the status codes need to have set just using that little &gt;&gt; Exactly. If you wanted to &quot;Not Found&quot;, you in your own function right here. Because text itself is just the thing that It takes in a thing an HttpFunc and it produces HTTP context objects and it So, it takes Basically this text has If you write a different function that has that same signature, you can plug that function can have a custom 404 handler. &gt;&gt; Great. &gt;&gt; But so, that model of I'm going to create that same signature and do That's how you implement So, we'll notice that sub route itself has a whole bunch of like this is nested choose is There's a choose and then this choose is comprised Choose is basically well an incoming request is going to have It's /API/Hello. This is basically If you find that route called If you don't find it, maybe it was something else, maybe there was a different get, maybe you defined XML and you wanted to call This doesn't exist right that was the actual slash. Well, this basically walk through the choose the list and say No. Does it match this? Yes. Okay. If it doesn't find it, then it just falls out &gt;&gt; Got you. &gt;&gt; Then, once it can't &quot;Hey 404 not found, you gave me something That's the flow with this thing. So, it's a little bit but as you start to write So, I have this So, if we go to handle get hello, we look at where that's defined. That's defined in So, that's just a Well, let's create of a module called HTTP handlers. So, that right there. Interesting that they to go with a Lambda You don't actually So, we'll go HttpFunc that will define that as one of the other one will be a context. So, that will be a HTTP context. Okay. So, this is going and we're going to This is actually the covers HTPP.NET async await and tasks this is just a nice syntax for So, we'll go response and we'll define a you can define it I'm going to use a slightly different syntax We want it to be look at the shape of this right here it's a message So, we'll do that, &quot;Hello world, from Okay. Now, we basically want So, basically this is a feature called computation You can model a lot but I won't really be It's fundamentally to write code that executes &gt;&gt; Got it. &gt;&gt; Not just the necessarily So, this is a task based context. So, I need to do that context or this thing called Return bang and that just If I do return, that that is a form task. It actually has the task type, I just need to return that out. But if I will have another value another function that a task that I then want Then I can just do return bang. So, you notice this is using That's because JSON the thing that I need. &gt;&gt; That's like almost F#s way of handling continuations &gt;&gt; Yes, this is very &gt;&gt; Okay. &gt;&gt; So, instead of using I'll use the XML function a helper that Giraffe has there and will just go Notice that XML then it needs the next function which we've already Then, it needs the contacts which we already have or here we just pass that in, So, you notice right here, I don't have the red I can go to definition this is just awesome editor what F# is all about in addition to being a full So, we'll go .netwatchrun. Probably I should have done So, I could show it executing both of the modify but whatever. &gt;&gt; That's fine. &gt;&gt; Okay, cool. So, this is going to be Okay, localhost 5,000. There we go not found because So, we know the error We'll go API hello and now I have some JSON &quot;Hello world, from Giraffe&quot;. What do we name this? We named It &quot;Hello XML?&quot; Yes &quot;Hello XML.&quot; Here we go. Hello world, from &gt;&gt; Nice. &gt;&gt; So, what's really if I wanted to add a new routes, you just go here, you go route. &gt;&gt; Specify the route and &gt;&gt; Hey there, yeah. That's what functional programming If you want a new capability, just add a new function that function with whatever So, it's that easy because it's just a function I can do I could execute I could do a complex computation, I could hit a database, I could do anything, it doesn't matter. Because all I need to it fits this That it's a function it's got a next function, it's got to call an issue to be context and everything However I fill out So, that's why it's web APIs like this because &gt;&gt; Right. &gt;&gt; So, yeah I really love Giraffe and How I mentioned Suave This is where it truly because Suave pioneered They didn't just party there's this thing Kleisli cognitive, If you write Suave Code, it looks similar to this as well. But this entire model of just, &quot;Hey I have a function&quot; It's &gt;&gt; It's a nice line. &gt;&gt; Anyway, that's the heart and you can do both JSON &gt;&gt; That looks pretty we're running really low on time. So, one thing I wanted if I want to get Giraffe or even just general with F# what are think I can go to get &gt;&gt; Absolutely. So, first of all, if you already have .NET Core then you already have what you need which But search engines have Like if you just type in you'll end up like that have everything you need. There's the same thing Suave, Freya, all that stuff. They all have excellent I recommend everybody them not just one each has a particular thing that they may speak to you Yeah, we're also some documentation for So, if you just look we are going to add that too. We just finished up a So, that hasn't &gt;&gt; Nice, pretty cool. whether I'm using Visual Studio whether I'm on Windows &gt;&gt; Yeah. &gt;&gt; I could still get I can run them on start web development &gt;&gt; Yeah, absolutely. &gt;&gt; Cool, awesome. much for being on the show man, &gt;&gt; Yeah, no problem. &gt;&gt; We just learned all about with F# on this episode