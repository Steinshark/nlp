Angie is a full stack She's an absolutely She loves everything front-end She's a brilliant She's currently acting as a University. Now she's going to talk to mobile smartphones, correct? We all use the smartphone. We carry the smartphones I mean, even to the toilet And the idea is that-- I basically use smartphone I have apps installed And pretty much everything I I can get it done by using But that's also put those apps Like just like me, So Angie is going to be micro-frontends. My understanding is just very micro. All I is that, hey, going to help when it comes to or the mobile projects. And I'm really, really keen, to hear what Angie Yu want to learn from that as well. So with saying that, I'll And I'll be very keen and very-- just listening very intently Over to you, Angie. Thank you so much, Harshal, I'm going to start All right So as Harshal mentioned, I'm a senior developer I am very excited to the fundamentals in a mobile application context. So in particular, I would about mobile micro-frontends. First, why mobile What motivates us from to apply this architecture Second, what mobile What does having in the mobile context means? The three, how to apply What is the technical and that we need in order of this architecture? So let's get started. Why mobile micro-frontends? One term in the front-end world the move from web-- or desktop applications And this seems to be because the mobile rate has grown exponentially, markets. The last obvious, factor for the migration is because of the seamless, that mobile application has. These capabilities input push notification, in-app web While these features are point of view, for business these capabilities They are extremely favorable which business model rely [INAUDIBLE]. And all of these increase the Or in another users to stay within and hence, be able to period of time. Also in the last few years, we that we find from our clients. Our clients come to us to develop their own super app. It used to be in the past when in the mobile space, want us to build their core So if they are banks, they to see their bank statement, and so on. If they are from an they want us to help to help the customer or insurance policy. But it is simply no in the digital landscape. Our client now wants us to base that they already us to increase the engagement. They want us to build-- I don't-- essential services. They want us to built They want us to built loyal space, and even It is certainly a growing to be in where we are right now. It also means that from we need to step up to meet and the strengths I see that there are that we face. The first technical challenge How are we able to build a in the new constant And the second challenge How can we be able use of the latest mobile and [INAUDIBLE] the existing that we have cultivated So to answer the I would like us to and talk about the brief architecture. And I feel like from how developers have been dealing with the So 20, 30 years ago when we application, our architecture We would have a thin which task is to present And we would also have a all our business logic. The team structure would We could probably have that deal with the simple As the requirements from the business logic becomes much more complex, and And typically, decide to put more people And well, hoping for the somewhere the development as the code complexity and in the same codebase increase. But we all know that In fact, the opposite Putting new people with zero system and the pressure the progress of the team. And having more hands with limited context the likelihood of merge conflict About 10 years ago, started addressing this [INAUDIBLE] with the which boils down of single back-end code into In this way, people can be split into distinct teams which enables scalability It implies that when a new in-- when a new independent we can spin up a new service, And the process of onboarding and running would because they do not need to in the application. They simply need of the specific micro service But as we know, the story In the past decade or of application responsibility to the front-end layer. And this is mostly because of a better user means there is also a more responsive and more This gives rise to a number applications framework such that I'm sure a lot of you But soon enough, the same issue also happened in the front-end, a giant monolithic application. And beyond just organizational perspective, also means that we our team into a vertical as was mentioned by David Vertical product slicing means on front-end or back-end, from the same team working back-end for a focused of focused product lines. This way when we still developers in product team-- unfortunately, even into the product lines-- because we still have they still will step on each because they are still among the various teams. And this is where we finally which is one architecture was designed to address in the front-end. So what is micro-frontends? This is a quote for my who is one of the the micro-frontends concept. In his article he said is an architectural deliverable front-end composed into a greater whole. In other words, micro-frontends by having multiple can be developed, tested, However these as a single cohesive product. So let's take the different architectural on a website for ThoughtWorks. Let's say we have the When applying the it is very straightforward. We just have one that serve the whole if we are choosing to use When applying the from a user perspective, we We will still see a single But under the hood, served by three For example, we can have pages. That is mainly static pages. We serve with HTML, We can have a pages that is serve as a And potentially this application by a different team. And we might also have another blogs that is served by The different applications be of a different and may or may not be But the point is they are should be able to be and deployed independently. As a whole though, they need from a user point of view. At this point you and ask, why would you want Why would you care about development, and testing? And it seems like a very and it seems like it's an And the answer to why is scalability and agility. And scalability in two different perspectives. From organizational we have a simple complex-- maybe less than five it may not make sense for or multiple code bases. But if we are working for let's say 10 teams micro-frontends allow these And to be autonomous is able to make independent Each team should be able according to their own speed. And each team could have and thus have autonomy as they are in control of From development perspective we have a smaller codebases, which means be cleaner and less fragile. It will have less We will have clearer between different functions. And we will maintain our In terms of agility, having enables us to upgrade our is a tremendous benefit when we are working on the And we want to slowly migrate to at the same time by developing new features. In the web development, as multiple front-ends as a single cohesive product. Unfortunately, having works as one product possible in the mobile rely on platform distributor or Apple App store to And they still need to as one single entity And hence, in the define micro-frontends can be developed, tested, but appear as a And in order to achieve this, to look-- from a as a coherent product. And when they are composed of multiple modules, to be able to be compiled into before publishing. So let's now take the example-- if ThoughtWorks have have the same functionality the ThoughtWorks website. In mobile have the different part developed in different modules. For example, the composed of three is developed by three For example, if we have three blogs, and one profiles. Similar to our web counterpart, with different technology, could be owned by or maintained by different And these teams can what sort of technology and they also need is the most suitable will make to suit their team And in this way, each can be scaled up according and according to the requirement And ultimately, this need to be able to be integrated before we publish it through The key to micro-frontends modules need to be able tested and deployed which means that each needs to [INAUDIBLE] Aside from the I have mentioned for there are also benefits Firstly, when we separate we will be able to develop faster as the compile that particular be faster than compiling the means that the cycle would be much quicker. Secondly, we will be also independently, which means we can concentrate on If we need to go to a review check, we can then just submit module for a security check. Next part, let's talk about mobile micro-frontends. So to understand mobile micro-frontends, first What are the typical mobile We currently have of modules that is So the first step is what The assembly module is the This is basically the entry where modules and This module can be thin and have logic and The second type of model These modules contain functions, which to business specific. For example, in the ThoughtWorks that I have, we divided based on the app features. So we have four different The last step is what I called is a common utility is used across all modules-- across different These are the common utilities authentication, analytics, and So these are basically the or common used for in the different functional In this set up, we and remove the without breaking So this is very important to because it is important that should be able to also And in order to have a tiny dummy that is attached to It can be attached or removed. And it is able to help the on its own. And in this way, we are able to modules individually. And we are also able to have Another known is a two model set up where we module and utility the viability of the through either dependency reflection. And this is a less as it is mostly work on Now that we understand how to each other, I can that they can be integrated. One way of integrating into the main app is through This is actually a pretty In the mobile world, whatever it is eventually compiled And therefore, the integration would be easiest than We can use common for each platform to help For example, if we are dealing we can use Gradle. And in iOS applications, we can to compile the functional and build the application. And with these tools, we can you want to be included Which as I mentioned before, and play capability. Going into a little more You can do built time We can actually publish each and store them in And we can then set the to fetch the library when we need it to built In contrast, in OIS by publishing pod specs Which means that uploading the whole like what we did for publish a specification And the main app be configured to fetch the spec that was published And the reason I'm going on these techniques that when applying in mobile, there's there are differences for different platforms dealing with iOS or Android. And it is very important to us and the implication so that we can make the right for the right solution And although we I believe the future of for mobile at least-- rely And dynamic integration download the application, they modules of application. For other functionalities that they will then download the upon navigating to And in Android, they through a feature called Android was just released in 2019. And these capabilities and the user's device to be necessary for the user. And from the if we are able to on separate timing and be able we will be able to of our deployment and hence However this unfortunately the capability of doing and we still need to as a single application to Google Playstore. But hopefully when Google made it is going to be of mobile micro-frontends. So far we are only really of mobile that is required for us to And I mentioned just for mobile is the integration techniques. And there are many that as a team, if we mobile micro-frontends, that we need to about how to actually But unfortunately, I of these because of And each of the topic is and maybe need their So some of the ways or like if you decide to try to that you should consider like cross-module navigation, cross-module These are cross-module that is worth thinking to implement this architecture. We also need to think how to do local debugging We also need to think and continuous deployment, us to do continuously delivery. And I will be more than happy to any of these topics in after the talk. And when we make big such as applying it is also very important how we can set up would support and optimize And eventually, the kind of have in the teams to play to and to minimize the costs of And one team structure highly recommend it-- for teams mobile micro-frontends-- what I call the custodian model. In this structure, we basically teams. And each vertical focus on developing features We will also have like a specific team charged to take care of include the assembly module But the custodian the final technical decision The final technical be discussed by all the teams. There will be a during a regular catch And with this able to have codebase and we know that the codebase by the custodian team. And we will have a that will be decided as a to case basis that is We will also create a knowledge and an increased sense of off of this weekly sync up. And we can also different teams will because we have to maintain safety and trust. And also we would trust that maintaining the reusable code. Last but not least, probably we would have dedicated sets from the would be the interface to deal with integration issues. We have discussed and the how of doing And now as a bonus, I'd the most important questions or when should we or when mobile micro-frontends? And on technical we need to understand that of decision that we architectural implementation And we will be able to between team autonomy and the quality of the product. The first thing that is the balance between team And this is especially important technical decision, such as want to use. The more uniform the technical the less complex the integration would be. And this means that if we want less complex, which have as much independence in The second thing that is the balance between the team So let's take the a common component like that is used by all models. It is possible for all modules these components, because And it might even be develop it on their own but this will result And all the teams will then to make a decision whether it be or whether they want to refactor We need to also balance between consistency. Product should always be and have a single design system. And when there is no it is likely that you would things that was obvious such as different color schemes. And this will cost the as a whole. At the end of the day, the way is-- as what the [INAUDIBLE] we should to think about We need to make a for our specific team on that they have. In ThoughtWorks application I give the illustration of such as Flutter, React to build one application. And it is certainly And it is one of the very that mobile This however is very devolve into an empty pattern I wanted to emphasize that should not be the default setup. In fact, using the same for different modules will for new models, and this and create a larger and pool within the organization. Having said that, there where it makes sense to For a scenario where we are when we are moving to a newer technology. But this scenario it's more common because mobile technology are The second scenario is when we try to optimize that we have in different teams. For example, if we have one team has capabilities and another team have development, and we that we optimize on The ThoughtWorks sense to have if we want to use for specific available on certain platforms. So for example in do that if we want libraries for data analytics in the application. In mobile, maybe we We want to use animation of the application. And before jumping and proposing this you need to figure out if this First of all, things is, what kind of scale of How many people Does it makes sense to into multiple teams? Are the teams in terms of business Also, what sort of skill sets do We need to understand to implement this architecture. Although some of the team mobile framework, point to be done in and need to be They will also need to be a cost in setting up architecture the right integration in the beginning of And also, our mobile be a lot more complex than in a monolithic application. In ThoughtWorks Tech Radar we put micro-frontends for This means that we believe that pursuing. And we as the are still actively different approach the cost of implementation. Mobile micro-frontends is and I would recommend it for and have time and the the different techniques. And when done the right this is a technique you and your team tremendously. With that, I thank you If you have any feel free to ask them Thank you.