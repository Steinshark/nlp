This class is a part of an anemic domain model. I will show you how an anemic domain model leads and a combinatorial explosion of methods. against designing an anemic domain model. from today's sponsor, Brilliant. of reasons to stay with me through this demo. all stemming from their primitive obsession. an int, a string, or an enum. One immediate consequence is This should identify the language of the book. It could be anything. This class will throw if it cannot Let me remind you of my age-old opinion A class that throws is of little use to me. I will keep this line for now, will delete it with a smile before the end. Data clumps are another immediate consequence Several values are kept These four properties, taken seven possible publication states of a book. the property definitions? And that proves my point that primitive Another data clump goes along the same lines. ordinal edition number, such as 1st, 2nd such as Summer 2020 and similar. makes all three properties nullable. I will now show you the numbers. anemic domain modeling on the class's constructor. roughly 4,000 ways to get into the constructor. positive and negative integers, Only 28 of those would result in an object. Therefore, we come to validation. different types of constructor validation. negative values, empty strings, I should add guards for the Those are purely technical guards. Still, we must include these in every class. death, taxes, and null checks are. combinations are remaining. combinations are valid still. Any exception thrown above is because the Think of it. year number - what do we do with that? So, we throw back at them. This is the case of a published book, That cannot be. their combination is not. But that is just the beginning. regarding the publication status that we consider Wait for a moment longer, and you will see five that are also impossible. modes carries its tailor-made error message. it also comes to mind that the ArgumentException Anyway, that brings us to those Look at this. code to get to assigning ten values. It should be five at most. by thirty lines of code, not just a few! all these guard clauses and avoid throwing rules of object-oriented design? Stay with me for one minute longer, and I will This anemic model protects In a way, that makes me feel safe. We must step up the application The anemic domain model invariably You may watch my previous video, in which I unmaintainable due to an anemic domain model. I will only show you the consequences from that anemic model's constructor. Shall I handle it here? How do I handle the ArgumentException? If I had a better value, I You can never handle the ArgumentException or indicates an invalid operation or value. The exception becomes someone else's problem now. Well, shoot me, I don't know! And now, that code will handle a detailed There is one coding trick that However, as I apply it, you will realize This CreateBook service builds a then populates it with data The root cause of the issues By turning it private, I could control over there in the constructor never throw. Consider this exercise another nail I will do it now so that you never do it yourself. You can download the entire source code Let me remind you that every registered patron is all the videos on my channel for free. I might expose a public method that creates That would mean no publication date or any A single word - unpublished - has Isn't that wonderful? Would that it were so simple. of the book's edition data clump. date is, an accompanying choice That brings us to the story of a combinatorial Each data clump brings one This one comes with seven possible ways to set it. There are two ways to assign a nullable Each Boolean value comes with its two variants. but not all of them are valid. pass by the guard clauses. The edition number can be null, Only the last one is a valid ordinal number. goes along the same lines. but only two will pass the guards. That makes 14 independent ways Should there be six ways to set the Not the meaning of life you We need to analyze all properties and data to figure out how many independent That is 28 valid combinations in my code. called a combinatorial explosion. will go into hundreds, then into thousands. but the ideal number of ways to You can achieve that if you apply domain modeling to a class like this. We must return to the services explosion happening before your eyes. which will cover one out of 14 combinations, and an ordinal number represents the edition. to procure the correct combinations This public method will never throw one of the The problem is that the method I have just Here is another one: Creating a book whose in the future, or in the past. There are a total of three ways Three more variants cover all the ways to That only got me halfway through, and These seven service methods create Another batch of seven service methods would You see where this is going. That is the combinatorial explosion of methods. explosion of states, which you I should probably delete all these methods and a single all-encompassing public method does it I have shown you two decisions: Choose your poison. and both are the consequences of having deserves a better, more expressive model. effort, which I will do in its own video. channel that already explain domain I will invite you to watch them. beyond just designing an object-oriented model, by visiting the sponsor of this video: Brilliant. areas of programming, engineering, and science. math, data analysis, programming, and AI. build your critical thinking Brilliant recently launched a ton of new real-world data to train you. free-of-charge offer for you. Follow the link or just click the link in the description. an annual subscription after the to use this link to unlock the benefits. and learn how to transform the anemic