Hi this is Petro and today we are going to build simple but functional blog in React. This project is perfect for beginners and it covers such features as React components, useStates, useE ffect and data fetching. In the end of this video you will have a working blog where user can view and search posts and you will also learn basic React concepts. Let's start by setting up our project using Vite. For that, open your terminal and run the command npm create Vite. OK, project name I will use the folder name and I choose React. with JavaScript. Okay, it's ready. Now just install all dependencies. Now let's start the development server to make sure everything set up correctly. Just type npm run dev, follow the link, and yes, we'll see a basic Vite plus React application. And that's it. We are ready to start building our project. But first of all let's make some cleanups and remove files that we don't need. For that I'm open VS Code and go to App.jsx. So we don't need all of this. I would say that also just leave some div. Okay, I don't need that. Okay, and all of this. Also, I will remove App CSS. Okay, I think we are ready. First of all, let's create components that we need for this project. I will create a folder components and in the components folder I will create H eader component, F ooter component and BlogList component. In this video I will not focus on the styling the project. I already have the small css filefor that, and I will use it. You can leave a comment if you want me to create a video about the styling of the React application, and I will create that one for you. So this is my file. I just copy everything I have and paste it here. So you can see this is a small piece of CSS. We have here some styling for header, for footer, for our blog and so on. So I will use that one. Now let's create our first component. I will start from header. Okay, this is our header component and here we have header with some probably logo. Let's import React from our assets. We already have that one. I will use that SVG. Ok, this is our logo. And let's add some text. React blog. And of course we need some navigation links. Ok, this is our simple header. Now let's start with footer. And probably we'll add a class name. Class name footer. As you can see, those two are simple React components and nothing special, just simple HTML. And our third component is a blogList. For now I just add some div. Later we will fetch data for our blog post. But now let's bring everything intoour root component, which is App.jsx. And here we just... let's import everything we need. So, we need header here. We need blogList and of course footer. Let's check what we have for the moment. OK. This is our s imple application. So we have header, we have footer, we have blog list. And I think I forgot some styling. Let me check. Yeah, so we need to add some classes here. Last name header. For navigation we need class name navigation. And c lass name navlink. Let's copy that. Sorry, navlink of course should be for link and here item. Ok, now it's better. So we have navigation, we have footer and we have placeholder for our posts. Now we will fetch our data and store all our posts. Now we will fetch data using useEffect to load our posts from the API and after that we will store our posts in state using useState. Open App.jsx and first of all we need useEffect and here we just do a simple fetch to our API link. I will use dummy.json dummy.json.com/ posts. And yeah, I will add some limit, for example, 10 posts. OK, this is simple fetch. There could be your link, your, for example, real link. For this project, it's OK to use some dummy data. And OK, it's simple fetch, so we'll wait for data and, of course, catch the errors. And the main thing, we need to make this fetch when we load the component. For that, in useEffect, we leave dependencies empty. So we will make this fetch only when the component is loaded. We could check it if I save and go back, inspect everything. Now you can see I load the page and I already have have some posts. And this is array that we need to store in our useState. So let's do that. I will add newState for posts. This is the place where we store our data. Instead of console, I will do that one. And now we just need to add props to our block list. Let's go to the block list. Here we already have posts from our props and let's create um HTML for this component. Ok, we need BlogLists and I will create my HTML BlogList also I need another div with class name blog-list-content . Now this is a place where we will map through all our posts and render them. So this is map. For each of my posts, I will create the separate components and render the single post there. For now, OK, we really could leave just a div. and say post. Let's create a new component BlogListItem. In the map I import blog list item, add key, add props. Ok, this looks fine. And let's create a structure for our single blog, blog post. Ok, here we have article with a class name post. Now we have blog, oh sorry, div with class name post. OK, post content, it's OK. Here will be title, class name post title, post content title. OK, now you can see that I already start using these from our post. So in this prop we'll have object for single post. And we'll render here in our jsx . Let's add other content we need. We need post body, of course. Class name post-content-body. Probably not body, but text. post-content-info. I also would like to add information about likes and views for our post. First of all, I add post reactions. I believe it likes. And another one, reaction views. Later we'll check it. And after I also add information about post tags. For that, I will make another map, but map through all tags. Map. OK. I believe we-- yeah. We could take this one, but let's make it button. OK. And last thing, I will add. image for our post, but in the our API, we don't have any images for the posts in the response. We could use another API, also from dummy JSON, just to generate some images. And for that, I will add another link. So this is HTTPS dummy JSON image, not image, but icon, post ID. Yeah, it could be post ID 250, post title. Okay. Let's check what we have. So, for now, it looks really fine. We have almost everything. We have our posts. We have tags, we have generated image. And okay, information is loaded when we load the page. But I don't like these views and looks like I don't have either views or likes. Let me check. Of course, each time you could debug what you have just with log. So we could check information that we have actions, likes. OK, it's not from reactions. OK, views, we have views. It's on the part of reactions. And just for UI, let's add some nice images. I already have those two icons. Let me copy and paste it here. So for icons, we just import, import h eart from a ssets heart and same for view. OK. Uh Let's add those images here. img. Heart. Eye. OK. Likes. Almost fine. Yes, we need to make to make it smaller. Now, it's perfect. One more thing I will add is tags. Our goal is extract unique tags from the list of our posts. And for that, of course, I will use the useEffect hook in our component. So let's go to blog list component. And here I will create useEffect. For now it's just simple useEffect and here first of all let's take all tags from our post. Ok post. I will use flatMap and take all post tags. After that we need to take only unique tags from our A rray. And yes, this is a good example. So for that you could use set because set will take only unique elements from our array. And after that, we could create another array from this, like that. OK. And that's how we will take unique tags. And of course, let's store everything. So we have tags, set tags. Tag unit tags. OK, this is ready. And another thing we need to do just render this information. Blog-list-tags. Ok, that looks fine. Tags map. Another map through all my tags. And of course, do not forget to add the key. And this actually could be another button. Let's check. Ohh We have error. We forgot to import our State. Yeah. Now it's perfect. We have unique tags that we take from our post. So it depends on the post because we add like a dependency and when the list of the posts will change, so of course all our tags will be changed and this is The next feature I would like to add to our blog, the possibility to filter the list of our posts. For that, I will create another component. This is a simple HTML we have for our hero blog component. Let's add it somewhere here. Ok, this is a place where we could search and filter the list of posts. But it's not working yet. Let's go to our component App.jsx and add another state. for searchTerm. setSearchTerm. And pass these terms to our hero component. Why do we need to pass these props here? Because we will use them in hero component. First of all, as a value we are using the searchT erm. And each time when we change this value, we could callthe searchTerm, the setter from useState and set the new value from our input. And this is the way how we could communicate from our parent to child component and also from the child to parent component. So this is the way of communication between our components. OK. Also, if you try to type something, nothing happens because we are still not filtering our list of of posts. Let's do that. Let's go to App.jsx and create another thing. This is probably the last feature for for today's video. I will create filter posts. OK, so for thatwe could just go through all our posts and filter everything. This is This is actually a good example. So we filter by title. If the title includes our search term from our state. But let's make it even better. So we could use here useMemo. OK. That looks fine. So we use here memo to memorize the result of that filter. And also now the last thing we need to do just use this filter posts instead of posts for our blog list. If we just reload the page we will see 10 posts, everything looks fine, but when you try to search some posts you will see that the list will be filtered with our search term. And one more thing I would like to change, just format everything. Ok, um just to make this code looks better. Ok, that of course I need to change my default f ormatter. Yeah, now it looks better. So today, we built a simple block using useState for state management and useEffect for data fetching. And of course, we create a couple of reusable components. I hope you enjoyed this project. In the next video, I will add the pagination for our list and create a post-single page. For that, of course, we will need to add react routing. So don't forget to subscribe and let me know in the comments if you have any questions or ideas for future videos. Thank you for watching.