Do you know how the Service Locator Some people used it where it I will now show you how to stay on the Let's start simple. that executes within the .NET generic host. A Service Locator hides deep under its I have just asked for a logger, and the the construction of this object. the dependency injection framework The generic host is using the logger, Something like this. will now resolve the logger when calling the The generic host is then Where is the Service Locator here? The built-in dependency injection framework This provider is of the type IServiceProvider. by the dependency injection framework. Is this a Service Locator for you, too? For example, I can use it to resolve the logger. Locator as it is being used inside Of course, my factory function This factory function uses the generic Service what services I plan to request. use of the Service Locator pattern. the dependency injection configuration. the dependency injection cannot passing objects to the constructor. the best Service Locator for you Let it remain as a private implementation Here is the custom class that benefits I can ask for more dependencies. Well, no, not entirely. leads us to the dark side of the Service Locator. see what it does. It crashes with the error that says: Unable That is where the greatest benefit of the The Service Locator that injection framework does not depend on any class. How can that be? its greatest benefit meets its peril. the Service Locator that sits behind this The Service Locator removes dependencies at failing at run time if not dynamically It essentially turns compile-time I expect my service to work correctly now. the books from the database. which is well known to me, to isolate the I am logging some information Where is the dependency injection framework? As far as my custom code is concerned, That is what's good about these two. What would the programming be like You don't have to learn the I will tell you what each I plan to schedule publishing for the The full source code is Every patron helps hundreds of other viewers Become a patron and get access to all the source Then comes the critical domain operation. Different publishers operate Scheduling a book for publishing I have no freaking idea how to But don't worry! The publishing services interface Don't worry, it is very simple. The publisher object tells which You can start from that object and obtain an For example, this publishing service object local laws and important dates in that country. fairs and optimize releasing a book for a fair. I am more than happy to pass it the book without my further intervention. You can see that all the books are planned. publishing instances, but the end Do you see what I did here? this code is using the Service Locator pattern. service appropriate for the operation at hand. It doesn't need to be generic. but it is polymorphic. instances implementing the same interface. the Service Locator will fail. any design of this kind. What if I asked for an actual publishing service? The only failure mode for this design There is an old principle, which I keep This object would never be created if If I found myself in the middle of an instance Publishing service and I am free to use it. Then comes the second important You can design the dependency so that it accepts Why do I prefer this design over the one below? I don't bother optimizing code ahead of time, but I know this call will execute If there were a performance issue, someone ScheduleAll method or whatever hides behind it. It produces an unknown delay. It could require a database That could cost anything from Worse yet, it happens inside the loop. when it happens? Honestly, I don't know. I don't do miracles at work, you know. between using a Service Locator and The first case is that of a dependency. present if the method was called. Principle and separation of concerns. it is either in this method or in that How about the second variant, It is obviously prone to runtime failures. that it will complete. difficulty you must account for. difficulty that has to do with software design. That will sooner or later cause trouble. Service Locator a bad name. dependency is cleaner in several critical ways. to maintain, should the trouble arise later. dependency injection and other