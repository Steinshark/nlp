Hi everyone, welcome to part three of the Master class governance. So the whole point of this V2 remember version of this module is I want to look at why do we have governance, what's the big focus around governance? Understanding the need for guardrails especially when we have this world of self-service, our business users, our app owners go and provision and manage their own resources but we still have requirements around. Policies that we need people to adhere to. We think about what are some of the constructs where I can apply those guardrails, management groups, subscriptions, resource groups? And then what are some of those specific guardrails we may use when we think of policy role based access control, maybe how much they spend with budgets? And then some other elements around that all up governance story. So if I think about basics of governance. I can really think governance in the cloud is critical because there's been a big shift. Our process and our behavior is very different in the cloud compared to what we had on premises. So if we think traditionally in ye olden days, I could think, well, I'm the user now. When I say I'm the user, this could be I'm the app owner, I'm part of a business unit. And I want to have some resource, so I'll say I am the app owner. Now how would I do that? Well, in the past what would happen is we had the idea of IT operations. So there's some kind of OPS person, and the OPS person has access to the actual capacity, the servers, the storage to host services. So what would happen is me as that user will, I would make some request to operations. Now that request may be in the form of an. E-mail. Maybe it was a phone call. Maybe we even had some kind of portal that they could go and do some requests, but the request went to a human being. There was a company. We still had rules. We still had certain regulatory requirements, maybe certain compliance requirements. So these were all. Known. And the process would be when I made that request, the IT operations people, they would go. And check. They would perform that check against that and then only if that was hey, this is good, well then they would go. And act on whatever that request was provisioning that resource however. So the key point is this app owner. Is making a request. Now if we shift this. If we now think in the world of the cloud. From the user's perspective, it's still the same requirement. But now we're thinking about, well, there's cloud resources. So now I can think about, OK, I'm the cloud. And the process would now be this request. Well, the user doesn't have to request. The request is now through some kind of API on the cloud itself. Now, maybe that request comes in the form of, hey, a portal, there is a portal they can use, maybe there's some kind of CLI, maybe. They're using DevOps, there's some CICD pipeline, so continuous integration, bringing code together make sure it's still working. Continuous delivery, continuous deployment. But something's happening to drive and create that. There's no human in the middle anymore. That's really the key point here. The human being has gone. And so. How do we solve that challenge? And so this is the new process. There's no human in the middle. I still have these rules. I still have that requirement. So the key point is that in the cloud, by default, there's all these different types of services. There are many that are just public facing by default. And this could be really bad. If I have users that aren't used to having to worry about or what are the safe things to do? What are various compliance things, things could just go a mock. So what we need is a way for those guardrails to be in place as part of the very fabric of that cloud we're using, so that it doesn't matter if I'm using the portal or CLI or a DevOps pipeline, those rules are enforced at the API level at that interaction point of the cloud somehow. It's going to enforce the requirements of my company. So governance is about the enforcement of the rules and ensuring the proper functioning of that environment to the standards. So when I think about this. If this is the new world, well, these rules, I need governance. So the key point here is what's going to happen is we apply governance. So these rules. They just get enforced because governance is going to surround. This whole cloud. So no matter what our interaction, governance would apply and we think about what that is. We think about many different elements of governance. I think about things like, well, policies. I could say, well, policy. Is what I can do. We talk about role based access control. We're going to talk about all of these things. Well, who can do the various things that are allowed to us and then we think about budget. Budget is really well, how much? Of this thing can I do make that budget is in terms of dollars? Maybe it's in terms of, well, I can create a certain number of cores of a certain type of machine as a way to really ensure and enforce that. So there's different things I have to think about. But those are key elements. We have these rules to say, hey, well what can you do? Where can I create a public facing service, what type of agents do I have to have, what regions can I use? Or who should be allowed to do these things? Who has permissions, making sure the right people do have access, maybe networking team, they have access to all of the networks and I want to control how much I'm spending. So these are critical points when I think about the governance. I have to understand my requirements. Take some time to understand now those rules maybe we already have a really good understanding of both corporate requirements things I do as a company agents, I require auditing, I require logging, I need metrics. I want to gather regulatory maybe. I mean there's certain industry that has regulatory requirements and those but make sure you really understand exactly what they are. So my corporate standards, my operational practices around again capturing what types of. Logging data types of security events, where do I capture them to? Any regulatory compliance? How do I ensure these things? When I think of Azure, this is the focus here. Azure is a shared responsibility model. IAS we talked before in one of the first session, IAS where's different responsibilities. Microsoft are responsible for the core fabric, the compute, the servers, the networking, the storage, the hypervisor. But then I have. Responsibility for the things inside the operating system. There are things to help me, but I own that responsibility. I said there's different aspects of compliance across various different services and one of the things we can look at is there is a compliance site that Microsoft. So if we go and look at this. Just really drives me nuts when it does this part of the screen thing, but if we go and look managing compliance in the cloud, there's different aspects that I could go and look at within this board. And you could kind of see here or there's compliance, compliance offerings, regulatory information here. There's white papers around it, there's privacy. There's tools. So I can go and look at compliance score. So this actually helps me go and track for different services via this compliance manager where I can go and look and I can say, well what sort of service am I looking at and it will show me the score I have based on actions I have or haven't completed. And it shows me well who's responsible. So I can see here for example. Microsoft's doing really well on the bits they're responsible for. They've got 11,645 out of 12,000 and 62. I'm not doing so hot, I've got 89 out of 4008. But the whole point is it shows me the actions I can do so I can drill down into the different types of services and understand well what are some of those responsibilities. And hey, it shows me things like improvement actions, things that I can go and focus on to really improve my all up posture. So there's there's help available to me. Now. Additionally, that same compliance portal helps me track, but it will show me all of the different offerings, different industries, different things the cloud already has if I jump back for a second over to this. One of the things we can also do is if we actually just go back for a second. Back to here and I go to my compliance. If we look at compliance offerings, it will actually show us. Well, firstly, some information about different aspects of that assurance of the regulatory requirements. But if I go to the Microsoft compliance offerings here, we can see all of the different standards. And I can see, well, what's the state of those for the different Microsoft clouds, be it Azure, be it dynamics 365 be it, Microsoft 365. So when I think of governance, when I think of the shared responsibilities, I can absolutely go and get information about, well, OK, where does that cloud, where does Microsoft sit? In terms of adhering to these various things, there's a lot of information available, and what a lot of these things really boil down to is about mitigating risk. Risk of data loss, risk of data infiltration, risk of service, interruption, risk of reputation damage, and the list goes on. But a lot of those standards are around mitigating those different aspects of the risk. So, OK, we know we need to do governance. What are some of the components I can use to apply those different aspects? The policy that well based access control? The budgets? So the first one is management groups? As soon as I go and create my first management group and I'm going to talk about what exactly these are, a certain hierarchy gets created for us. So if I go and look over here, so we draw a picture of a cloud, let's be a bit more specific. Obviously, this is a presentation around Azure Master class, so we'll be a bit more specific. We say, well, this is Azure. For this particular cloud we are leveraging is Azure now the whole point of management groups? Is it's a hierarchy. It's a hierarchy in which I can organize my other types of resource, my subscriptions, my resource group that contain my resources. Because when I think about these different aspects of governance, well, I'm going to have different requirements. I might have some very broad requirements for the whole company, maybe some other requirements at different business unit levels, maybe some different requirements it development environment. Is it production environments. So I'm going to have. Different places I want to be able to apply policy, so management groups give me a hierarchy to which I can apply that. Now if we think about Azure as a cloud, remember a key point. Let's get back to the dog. We have an identity provider. So identity provider. For Azure. Is always an Azure. AD tenant. If I have a certain Azure AD tenant for my company and when I think about the cloud, well my cloud is essentially trusting remember, a particular tenant of Azure AD. So then all of the users, all of the groups, all of the identities inside that Azure AD can be granted access through role based access control to different parts of the environment. Now, as soon as I create the first management group, a few things spring to life. So a root management group is created. So you always have this. As soon as I go to create my first management group, this springs into life. It's going to create this root management group. This cannot be moved. It cannot be deleted. I can change the display name, but that is always there and all of the subscriptions that trust this Azure ID tenant by default will roll up under this root management group. It's ID is the same as the Azure AD tenant. I can't have more than one route. So what we're going to have this route, but then I can have a hierarchy that I create. So under that rule I can create my own management groups. So I might go and create, I don't know, certain management group here. Under that one I'll create some other management groups. It's going to creating these for my purposes. Hey, maybe under this one I'll create. Maybe there's a dev management group and a production management group for this particular business unit. Whatever I want to do, I can create these management groups. And I can have for this hierarchy I create. This can be. Up to 6 levels. Now we get a management group only ever has one parent. But the management group can have multiple children. And all of these are my management groups. Now, how I structure my management groups? There's not a right or wrong. As the name suggests, these are here to help you around your governance, around your management of the environment. I might construct them using different things, maybe the based around business units, maybe they're based around certain geographies, maybe they're based around environment. And my goal is when I start to think about all the different elements we'll cover, when I apply different types of governance, they get inherited down. So I might apply very broad things at the top, and I get more specific as I get closer to the actual resources. That's a key element of what we're going to do here. So I have these different ways I can think about doing this and if we have a quick look, so actually go and look at the portal, I've got too many windows open here. So if we quickly look at my environment. And if I search for management. Management groups, there we go. What we can see is we have the tenant Root group. So it shows me it's identity and then under that I've actually got a subscription. So remember by default all subscriptions will just roll up to that tenant Route group. But then I created my own management group. Which itself? So I created all Savile Tech subscriptions and it's ID says the display name. And then there's an ID. And then I've got two subscriptions actually roll up under that management group and I've got two other child management groups. Production and development. So I can have a whole hierarchy of these management groups and I can go and select one. And the key thing I want you to notice at this point here is just this governance on the left hand side. And the key part of this is we see things like security, we see things like policy. And we see things like budgets. Now we also. See Access Control own, I think a role based access control. That's all managed by the access control. So I can see these different elements. And that's going to be a common theme that identity access control, identity access management, IAM, the policy budgets. But I can see it every single one of these management groups I get those same items and under that I can put subscriptions. So that's the point of management groups now if I own a subscription. As the owner of that subscription, I can move. My place in that management group chain so I can move myself around, but only if I'm the owner. If I'm not the owner of the syrup screw subscription, I cannot move it. So we have management groups and I've used the term subscription a number of times. So in the whole point is then we have subscriptions. Now the subscription is really that starting point for actually creating something. Remember my subscriptions? Descriptions. Trust certain Azure AD tenant now I might think about. OK, we're under here, I'm going to go and create a certain subscription. So this is my subscription. One, there might be other subscriptions. Hey, maybe I've got a couple of subscriptions here. I could actually have a subscription hanging off the rope. As you saw, by default subscriptions will just. Roll up under that root management group unless I then go and put them somewhere else. So that's just going to be the default action if I don't do anything else. And the whole point of the subscriptions. Is that's the starting point of where I can place resources? Those subscriptions remember trust a particular Azure AD tenant. So this subscription this all of the subscriptions. If they're in this management group hierarchy, they're trusting this Azure AD tenant. So all of these trust that same Azure AD tenant. So management group hierarchy is part of that Azure AD tenant. You can move a subscription. Again, if I'm the subscription owner I can take my subscription and trust a different Azure AD tenant. Now if I do that, any roles I have assigned will remember roles are based on a certain identity which lives in a tenant. I'll lose all of the role based access control I've done. So it's important to understand that hey yes I can move subscriptions to a different tenant. It will then fall out of the management group and go to whatever the new tenants management group structure is. But any roles, any managed. Entities. All of that stuff I'm going to lose. Now one of the key things about subscriptions is, well, they have certain limits that might be one of the big reasons we actually go and create different subscriptions. So if I jump back over here for a second. If we move along. If we look at our subscriptions, there are limits and quotas associated with them. And this might be one of the key reasons you create new subscriptions. So if we just zoom in a little bit. Now there were general no notice, they were management group limits I can have. They look 10,000 management groups for Azure AD tenant. But there's an unlimited number of Subs per management group. We have this root plus 6 levels we talked about already. I can only have one parent management group as we talked about. And then? Hey, different uh, management group level deployments per location and you can dive into those, but then we have subscription limits. Now, hey, resource groups, we're going to talk about these a lot. 980 resource groups per subscription. There's different number of tags I can apply to a subscription. We're going to talk about all of these things. But then we say there's resource group limits. There are Azure AD limits and then there's different service limits. And so the key point is to understand what some of these limits are, because sometimes that limit on the subscription that may drive you to create multiple subscriptions. A subscription is a boundary as well, for example a virtual network. Can we think of virtual networks? They can't span subscriptions. So if I had multiple subscriptions, I'm going to have a minimum one virtual network per subscription, but they also can't span regions. So I may end up having lots of those virtual networks. If I have lots of subscriptions that are using lots of regions, many other services, they're not going to span a subscription. So a subscription is very important construct we're going to use for a lot of different things. So we have this idea of the subscriptions. Now. The subscription itself has access controls, it has policy, it has budgets. They also have certain quotas associated with them, so if we go and go back to our portal. So many screens open. We can go and look at our subscription. So if I go over. And we saw here, well there were different subscriptions as part of this. If I just go and select one of these subscriptions. So now we're looking at the subscription so straight away. We have access control. That looks familiar. We have budgets. That looks familiar. We also. Have. Policies. So those same key constructs we talked about for governance, hey, I can alley those at the subscription level as well, but one of the key things we also have is we have quotas. Now, some of them I can increase, some of them I can't. But through this usage and quota screen. I can go and see well where I do have quotas. What are my quotas so I can go and see here? It's showing me how many I've used down here in this column and I can also see well how much of my quota have I used and then I could understand well, do I need to go and maybe request more quota so we can see at the top here? Their disability to request quota increase. Now there is also an API for this, so I could programmatically also query what are my quotas. I can query what is my usage and then I can automate a request to go and increase that quota as well. So all of those things are available to me. So we have these subscriptions and there's many different guidance and when I should create new subscriptions. And we're gonna talk about some very good documents at the end of this that go through some standard patterns about when to create new subscriptions. One thing I would caution though is don't just jump into creating huge numbers of subscriptions again because it is a boundary for things like virtual networks. It can get fairly complex if I micro create subscriptions for every tiny thing. There are better constructs if I just need to segregate off permissions for example, which are actually resource groups. So next thing we have is a resource group, and the resource group is where we actually create things. Everything. Every resource lives in one and only one resource group. Things get provisioned together. Things that run together, things that ultimately get deeper vision together. Well, I should put those in a resource group. So if I go back to the picture now since that was subscription, well now I think within that subscription I can create N number of resource groups. So I'll create resource. Group One. I give them proper names and I'll create maybe a resource group too, resource Group 3, etc etc. I cannot nest resource groups. So a resource group lives in a subscription, but I cannot put a resource group in a resource group. So a resource group lives in a particular subscription. And the whole point is I'll put resources so inside this resource group. I'll actually go and create my Azure resources. So for example, maybe I'll create a set of virtual machines, maybe I'll create a database, maybe over here I've got a virtual network. But I would put things together that share a common life cycle. That's how I think about, well, what do I put in the same resource group? Well, if these things are providing a service, I would create these elements together. They're going to run together. Ultimately, they'll get decommissioned together. If the same sets of people typically need permission to those things, we're gonna have the same sets of policy assigned to them. Hey, these would all be. Good criteria to put them in a common resource group together, but it is not a boundary of access. For example, hey, my virtual machines are sitting in this resource group. The virtual network is in a different resource group. Maybe there's a log analytics database over in this resource group, because hey, a virtual network is used by lots of different applications, so it shouldn't live in the app. Vnet my log analytics workspace maybe as a central key vault, well, they're not owned by anyone app that. Is managed by and that has its own set of life cycle that's in a different resource group. But these VMs can still absolutely be connected to this virtual network. Even though it's in a different resource group, it's the still the same subscription. So we're all good. I can move resources between resource groups very easily. I can even move some resources between subscriptions. And some resources can be moved between regions. The exact ones vary. You'll see this if you go and select some resources and you'll see there's move options. So if we jump back over to here for a second, for example. If we just go and look so as we can see here we have resource groups. So you have an select a resource group. Try and find something with some stuff in it I think. South Central, that one. So we look at Resource Group. Now it says things inside. This resource group. Have a whole bunch of different things available to me here. One of the things I could do if I started to select some of these resources, you'll notice this move option is lit up. And it's given me different types of move. So hey, moving to another resource group, that's super easy. Moving to another subscription's going to vary. Now what it will do both for another subscription and another region, it will go and look at the resources and work out what are their dependencies. For example, think of a virtual machine. Well, a virtual machine isn't really just its own isolated resource. A virtual machine actually is. Yes, there's the virtual machine, but there's actually a network interface card, which is a resource. Well, that's connected to a virtual network. The VM is connected to a managed disk. Which operating system? Maybe optional ones for data. But there's, there's extension resources, so there's all these different aspects. So when I go and select these moves, it will go and look at what are the dependencies can it move and it will then give me that guidance to actually go and perform those things. So the key point is moving between resource groups is pretty easy. Moving between subscriptions, move between regions, that's really going to vary depending on the exact type of resource. But the whole point of all of this, all of this structure, the management groups, the subscriptions and resource groups, is these are the places we can actually apply governance. And that's the whole thing. Now there is one other aspect of this. Um. Once we have these constructs, so we have the management groups, the subscriptions and resource groups. Remember, I want to think about we're getting closer and closer to the actual resource. If we went back to this picture, where are the resources? They're in a resource group, which is in a subscription, which is probably under a management group. Through some hierarchy. I would not put very detailed policy. At the root. It would be very, very broad types of policy if I did anything there that absolutely has to apply to everything. As I get closer to the resource, I'll get more and more specific with my policy. I'll get more and more specific with different people that need different permissions on the resources, but it's very hard to override. In fact, I really can't, so don't be too specific. I don't wanna just hey apply policies at the top of my route management group and then I'm stuck. Make sure you understand the requirements of different environments. Dev, test versus production. Different business units may have different regulatory requirements. They may have different capabilities they need and different geographies again may have different requirements around them. To really understand what's driving my structure, to then understand well where's the right place to apply policy, to apply RBAC, to apply budget, we need to really think about those things. So OK. That's where we can do it. So what can we do? So it's really three key things we think about. We have this idea of the role based access control, we have the idea of policy and we have the idea of budget. And I wanna go through these things. We're go go through these three in detail over the next set of sides. This is really governance. This is the thing that drives governance. But if we go back to our picture for a second, what I can think about well remember. If we have this structure right here. We go back to this idea of the things we want to be able to do. So we have this idea of policy. What? Well based access, control who and then budget how much. And those things, when I apply these, they're going to get inherited, they're going to get inherited down South, all of these structures, those governance items when I apply them at some level. Zoom out for a second. It's inherited. And there's really not a. Block inheritance, there's no concept of that. And you wouldn't want that people bring that up sometimes. Like, I've got this thing, I want my subscription to not inherit a policy that someone's applied above me, or not inherit a role based access control as a company. I don't want that because the whole point is, the reason I've assigned it at a certain level is I as the governance. My organization need that to be in place. It's enforcing requirements, it's enforcing someone. Has to have access to these resources. It's enforcing these rules. So last thing I want is some app owner at some subscription to block all of those policies. You'll often hear people talk about, hey, I should be able to block the I was no, I don't like the fact that I can't block. Companies don't want you to be able to block. Now, if you find there's a strong requirement you need to block, it's because, well, maybe that policy has been applied at the wrong place. It's been too specific, too broader level. So you need to go and discuss that with the IT teams. But certainly the idea of blocking a higher up policy or an RBAC, you really don't want to do that thing. That's actually a problem. So we want to stop those things happening. So that's not saying we're just going to be able to do. So I'll put is hey, we have these constructs. And when we talk about policy. Are back on budget hopefully as you saw when we looked at the screens, I apply all of those things that all three of the levels, management groups, subscriptions. And resource groups. So if I think about those constructs, well, I could absolutely apply. Maybe there's some core very broad policy up here. Maybe there's some broad RBAC here. Maybe for here I have some other role based access control for some business unit admin. Maybe there's certain policy and maybe I'm going to apply some budget at this level. Whatever's right for you, but I can do the same things here. Hey, for this subscription I need to apply some policy and definitely some RBAC at this resource group. I've got some additional RBAC to apply just for these particular service owner. Hey, they get some permissions here. Oh, this has some role based access control. Hey, and I want to apply some budget at this level. And you're going to get the sum. So if I'm down in this resource group, I'll get the sum of these policies here and here and here. I'll get the sum of the RBAC. And it will be the sum of the policies. It will be the most restrictive. Um, sets are probably the the sum of all of those. Budgets would roll up. So if I set a budget here, well, that budget is going to cover everything that rolls up under that particular construct. So that's the idea. But I can take all these concepts. And I can apply them at all of those levels are back. I can even apply at the individual resource level now. Generally want to avoid doing that. Just because I can doesn't mean I should. It gets very, very hard to manage if I find I'm constantly wanting to apply permissions at an individual resource level. It probably means I'm not using my resource groups correctly. I'm not putting things together in the right way, but you absolutely could. So hey, I'm looking at my resource group and noticing my resource group. Hey, we have the same access control, we have the same policy options, and we have the same budget options. So do all of those things. But if I look at a resource as well, I don't know. The function. Is individual function. It has access control. I could give that directly to this as well. We'll also see what the metrics. There's different aspects of things I can do at the individual resource. But the key point is I shouldn't be doing a lot of access control individual resource level. Use the resource groups. It's going to be much more manageable for me to actually do that. Now, if you're a bigger company, you may have an enterprise agreement. And I'm not really gonna go into this because the enterprise agreement has its own set of structures around departments and accounts and account owners that can create subscriptions. Departments was primarily used for billing and that's really gone away. Management groups kills off the whole point of really having departments from a billing perspective. Well, we can use tagging, and tagging is really powerful to use that for, for example, different departments. It gives me a lot more flexibility. I can do showback and chargeback for my billing. Records just by looking at the tags. I can even inherit tags for billing usage records, not for regular tags as we'll talk about if I just need to be able to track costs for different units. But there's another element around governance. I can think about. Um. Locking so the subscription level at a resource group level at an individual resource I can actually lock resources. Now this is really to help against some kind of accidental action, accidental delete. So what I can do is I could say any of these devils subscription, resource group or individual resource I can create a lock. So a lock would say. I'm going to create this lock. So I have my lock. And I apply it at a certain point so I could apply it and it will get inherited, so everything inside that would be locked as well so I could apply the lock at a resource group. That resource group and then everything inside it would then be locked. There's two types of lock. My lock could either be. Read only. So I can't make any changes to it at all or cannot delete so I could change it. But I can't delete it. But this is control plane only. And this is an important thing to understand when we talked about. This the cloud and we talk about the cloud as an API that I interact to do operations around creating. We talk about crud the whole create, remove, update, delete. Let's not all whatever that stands for, but we have these CRUD operations. Read. They go against an API. And so that portal, the CLI, the CI CD, they're all going against an API. The API is the control plane. Now, if I Azure that control plane is thing called the Azure resource manager, everything goes through that control plane. When I lock a resource, be readonly or cannot delete, that's enforced at the control plane. So that lock is going to work for any interactions. That are those hey create, create, but update, delete actions. But not data plane. If this was a storage account. We're database. When I do some storage transaction or database transaction that's not going via the control plane API, there's not going via arm that's going directly into that storage resource, that data resource. So lock does not apply. So lock says hey, I can't change the attributes of a storage account. For example, I can't delete the storage account, but inside the storage account I could still delete a BLOB. Inside a database I could still delete a row. So it's really important to understand, I talk about locking. Locking is at the control plane level only. It is not locking the data plane. So any interactions from my application to the data plane of some service, they're still going to work just fine. I can still go and do whatever those operations I want to apply are and we can see that. So if we jump over. I would here quickly. If I go and look at my resource group back up here, we can see I have locks. So I can add a lock. No it's it gives me the two types so read only. I can't change anything or delete it or delete so I can make changes. But I can't delete it. I give it a lock name. And I would click OK. So now I've locked this resource group. From deleting things if I'm going to look to that resource group. And I selected something. And. She go and look at it. And say delete. I can't. You got delete lock. Now I'm the owner, so as the owner. I can over here, I could change the lock or I can just remove the lock. So I'm just going to delete the lock, which is why this is really designed against accidental. I can't accidentally go and delete that thing, but as the owner I can remove the lock, so I have to be the owner of whatever scope the lock was applied at. So if I'm the owner at the resource group and the lock was at the resource group, I can remove it. If the lock was at the subscription level and I'm only a resource group, then I couldn't. I couldn't remove the lock so it would just apply to me. So that's the key point around that. Now, when we think about those control planes, when we think about a lot of the things we're about to talk about. I drew all these Azure resource manager. Now we're gonna cover arm in more detail when we talk about infrastructure as code using templates, but. It's important to understand the structure of resources when we think about policy, when we think about role based access control. So everything in Azure is made-up of resources. Um, those resources are defined in resource providers if we go and look super quickly. Says the URL I can go to. If I go to resourcesazure.com. I can actually go and look inside so I can look at my different subscriptions for example. But then I'll see the different resource providers that exist. And those resource providers. So compute, compute would be a big one. Compute defines things like virtual machines and managed disks. So I can see different providers actually let me just go to a resource. 1st. Some reason that's hanging because I'm trying to demo it. So of course it's going to do that. Let me try and refresh that quickly. But if I extend that out, it would actually show me the resources that are part of that resource provider. Still not working? OK that's just the way demos work, obviously. It's exit. That page. Let me try it one more time, actually. Let's go back here. So we're going to our subscriptions, go look at Dev, our providers. Look now it's working OK. So I can see some of the types of resource that are defined in the Microsoft dot compute resource provider and we can see virtual machines, we can see disks, images. If I look at my virtual machines then I can see the virtual machines I have and one of the key items is that resource has different properties. Now I can see things like hardware profile, storage profiles, OS disk. But there's different types of properties that will vary depending on the actual resource itself. So disks would have different properties than a virtual machine. But we have this hierarchy that goes through. These different elements, so if we jump over for a second. So I can think about the idea that, OK, we have resource providers. So Azure. Has lots of different resource providers. That was just the Microsoft dot compute. But there's Microsoft dot storage network huge number of these. This is how they define the resources that are available. Is there a resource providers? Inside the resource provider. It defines N number of different resource types. There's lots of resources defined, and the key thing is and if I think about an individual resource, whoops, well, I can think that. They're all properties. And then there are actions. Different types of actions that can apply to that type of resource, and the exact ones are going to vary depending on what actions would apply if we go and look at VS code for a second. So here I've got this command. It's looking at what are all the operations I can apply for anything. So go wild card for Microsoft dot compute. There's lots of different ones that's not that useful, says. Look at all of the actions that I can get for virtual machines and we're format as a table. So we can save a virtual machine. Hey, there's things like what I can do, the run command action, I can log in as an action. There are different things. That would apply to hey, a virtual machine, different things I could perform actions against for network. Hey, there's different ones that would apply to network, different ones that would apply to storage. So these different things that can apply to me, we're going to dive into these in a lot more detail and we start to actually look at things like roles and things all around that. So the whole point is resource has properties, a resource has actions, which brings us to role based access control. At all levels. Management groups, subscriptions, resource group resources. I have access control available and I can use that for the management plane. Now I'm going to say management lane remember R things I'm doing via the ARM API. However, some services are also now supporting RBAC at the data plane. That means the data plane. So when I'm doing some query against the data plane API, it still using Azure AD identities. It could be it could be a managed identity of a resource, could be a service principle for some service, and the permissions are now going to be based. On that Azure AD identity. If we go and look, storage is a good example of this. See if I was to go and look at a storage account. Oh, I don't wanna be logged on as Batman right now, so we'll log on as me. So if I go and look at my storage accounts. And I'll it doesn't matter the matter when I pick. If I go to access control. And then look at roles. It's going to show me all of the roles that have some role related to the storage account resource type. And we have the the normal ones. So here's our owner, contributor, reader. They apply to any resource. So owner is the all powerful. They can do anything to the resource. They can change the access permissions to give other people contributor. It's very similar to owner except it doesn't allow me to change the access control. So it's the same as Oh no in terms of permissions on the resources, except it cannot change the access control on them reader. It's fairly self-explanatory. Say I can, I can read stuff. But there's all these other roles. Great. But if I was to look at storage account contributor. OK, well, we've got actions and this is the key part. I have different types of actions I can apply and it's showing me the actions for the different resource providers. So hey, for the Microsoft authorization resource provider, it can do certain things, insights, but what I care about. Is see all the different ones it's using. Storage so as a different permissions on the control plane for storage. Hey approved private endpoints and storage account failover can do all these things for the control plane. Then this data actions and it can't do anything. So this account, even though as a contributor, doesn't actually have any permission if it's using Azure AD on the data plane. Now, because it's the contributor and it's a storage account, one of the things it actually can do is it can get the access key. So see this. Less storage account keys because it can get the storage account key, and as I've disabled the use of the storage account key, it can use that to do data plane operations. But. If we look at storage BLOB data. So it different row data contributor. What does this one have? Well, it has some actions. On the control plane again. But this time it has data actions. So these actually will work against the data plane. So this time, hey, I can read a BLOB, I can write a BLOB, I can delete a BLOB. I have those capabilities available to BLOB and Queue and Table some of the databases now. Will actually use Azure AD account. So it's starting to use those at the data plane access as well. So that's is changing. We're starting to see more and more of those things coming in at the data plane. So that's a nice thing that's happening right now. But primarily it's control plane. It is inherited, as is everything we're going to talk about. So what is it a role? We saw those, those actions. Well, there were a lot of them. Try to imagine giving individuals. Actions that action and that one it will get very cumbersome. The reality is there's certain broad types of access, different security principles need to be a user or some managed identity or a service principal for an app that we can create roles that are a collection of very common actions available that are then assigned to a security principle at a certain scope. So if I think about this. So we have to remember these actions were available. So what I can absolutely do? Is if I'm thinking about role based access control. Well, I can take certain actions. OK. And I'll add them to A roll. So we add actions to a role. And then what I'm going to do? Is ideally we have groups. Oh, that's weird. Let's get back to that. And we have groups. Remember I've added users or managed identities or service principles into that group. I'm going to grant the role. To the group. And then I'm going to grant it. I could grant roles directly to users. I can do it. It's just preferred not to. In an army, it's very hard to manage. And then I'm going to do this at a certain scope. So that scope could be a subscription, it could be at a resource group, it could be a management group. Different scopes are available to me. And that idea of taking a role and granting it to a security group or principal at a certain scope, well, this is what we know as a role assignment. Assigning a role which is made-up of actions out of resources defined in resource providers. To security principle or group at a certain scope. So that's my role assignment. There's a huge number of these roles built in. I can also create custom roles. Again, there's all those different actions available to us, and we can kind of see these if we go back to the VS code. I could look at. Different roles. Built in. How many are there? So it look there's 383, but I could just look at contributor and a key part here is contributor. You'll see. They have all actions. Then they have not, so except for. Hey on the authorization levels are changing access permissions. They don't have some of those if you look to the virtual machine contributor. So VM contributor, hey, it shows me the types of actions. They have available to them. I could find all of the roles. I'm not going to go through all of these right now. You can see it's in the repo for the module, but I could go and look at every role that had something to do with compute. So all of these roles mention the compute resource provider. At some point I could create a new role. So what this script does is it grabs the virtual machine contributor role. And then I'm creating a new role based off of it called virtual machine operator. And then I remove some roles and I add some rolls so I make it a bit more specific. So you're going to absolutely create your own roles if the ones they include. Don't meet your needs. Now the roles you see will vary if I look at a storage account. And look at access control and look at roles. It's going to only show me roles that have sanctioned a storage account. You'll always see owner, contributor and reader because they're basically wild card. They're everything. But then I see lots of roles specific to storage related stuff. Now I've got virtual Machine contributor because that role has sent through storage accounts as well for where it, for example, stores diagnostic information. But if I was to go and look at virtual machines. And look at access control and look at roles. You'll see a different set. You don't see those storage BLOB data readers and storage contributors. Because they have nothing to do with VM as part of their actions. But I can see some different roles here and one of the things you'll notice is I do have a couple of custom roles, so I've defined my own role. So I've got a custom role here to stop resources, a custom role for storage share changes. A custom role that can just read a VM and use the run command role because you always want to think least privilege and the roles they had built in which is too generous. So if for example this custom role read and run command I had this as part of an automation it only gave it 2 permissions. I can get VMS. And I can use the run command. Now when you think about a custom role, I can do it a number of different ways I could. Now this second. If I think of my roles. Let me go to a. Resource group second. That's right. Where's my access control? So I'm going to add a custom role. When I add a custom role. I could start from scratch. I could type in some JSON, or I could clone an existing role so I could select an existing role and notice that a resource group I'll see every single role that exists because a resource group can contain anything, so I'll see every role that basically exists. So I could select a certain role. I'll give it a new name. And it's gonna show me all of the permissions. Now from here I could delete certain permissions that I don't want in my new custom role. And I can add certain permissions I can exclude, so I can do not actions added that some subset of some wild card. I can then say, well, what if the assignable scope? So this definition is going to live at a certain scope, so I tell it, where can I? Actually assign this to so management group subscriptions or resource groups. I'll see the JSON which is the behind the scenes. Everything in Azure is JSON definition of it and then I could go and create it. So there's different ways I can go and create these things, basically if the roles. That exist are too generous. Think least privilege for me. I create a customer of. I have some automation, especially with automations. What does it need to do? Let's create something that can only do that thing. I don't want it being more specific than that. And always consider that for example, you'll see people just make people owners. Owner is like signing over the deed to your house to that person. So you want to be very restrictive with that. Owners should be literal owner of that resource group or that subscription. They own all the responsibility for it. I've basically given the deed to the house because they can change permissions on it. They could then go and give others permission contributors like giving someone a key to your house. They can go in, they can't cut other keys, they can't give other people in. But think what do they need to do and give them only those roles to be able to do it. Ideally Grant to groups, not users. So again, I just go in and I do an assignment so at any of these levels and they all get inherited down. So it could be a subscription and again when I think just enough permission. Scope as well. So don't give a scope that's more than what they need. If they only need permission to a resource group, don't give them a permission at the subscription level. Most permissions you assign should be at the resource group. So if I go and look at this resource group, hey, I can do a role assignment. Add role assignment, I would select the role I want to give the most restrictive I can. I would add the Members. This could be users but ideally want to use groups. To do this, this is not like Azure AD where Azure AD it had to be a special type of group to grant permission. For all my can and encourage the use regular groups. I could also select. I could search right managed identities. Service principles would be available here as well. I'm doing it at this scope of the resource group. And then it would get assigned but notice. I did user, group or service principal. I could also do managed identity. Managed identity is a particular resource or if it's user assigned, it's a particular set of resources. I'm allowing to use some special identity and they are inherited if I go and look at my role assignments. It shows me hey look this was inherited from the subscription. Some of them might be set directly, some of them were inherited from the management group. Hey I have a network. Contributor, maybe it's my networking team. Will they actually get that role of management group where this subscription falls under at some point so that gets inherited down from it, so I can see all of these inheritance for the roles actually taking effect? So I think about the least amount of privilege, I think at the most specific scope possible. And there are privileged density management for just in time, the ability that someone can elevate up to a particular role. Only when they need it. We talked about that when we talked about Azure AD and the identity. But I think about with footage density management, hey, they have to go and elevate up and once again I can say, hey, you can have this role. At this scope, but it's not standing, I would go and maybe do some MFA. I would request it for a time limited amount and then it would go away. But there's something else as well. We can now do this thing called attribute based access control because RBAC may not be granular enough, especially we start talking about the data. Well, there's actually a finite number of roles I'm allowed to have within a subscription if I was to go and look actually at this page. Notice this bit at the top. I've used 89 role assignments. Had a 4000. Now 4000 seems like a lot, but if you have lots of different. Applications and services and different combinations. You may start to bump into that 4000 and if I get very very specific about how I assign permissions, that may start to not be enough. So what can I do? One of the things we have this ability to do is this attribute based access control and what is going to let me have is I can add conditions. To the role assignment. So something about the data. It could be the container it's in, it could be some part of its name, it could be a certain BLOB index tag. So some metadata I'm adding has to match some condition. And I can also say, for example, well, it has to match some attribute of the identity that's trying to access it. So the identity has a project, it has to match the project to the data I'm trying to see. So that's one rule. But it says the project of the identity has to match the project of the metadata of the data I'm trying to access. So suddenly there could be 10,000 different projects. But I'm restricting it to people has to be the same project to the data through one rule instead of having to create thousands of different rules, so this is a really big deal. And it does have limited support today, but it's growing. So now I could think about optionally we have role assignments, but if I wanted to. Optionally I can add conditions. And that is the attribute based access control. We look at this. So let's go and look firstly at the user. There's two sides to this. I could think. At the user level. One of the things I have. Is my protect? Custom attributes. OI can create custom attribute sets, so these are sets of attributes that I can define in different sets. So I've created a project attribute set. That project attribute set has two attributes, clearance and primary project. And what's nice about these this is part of Azure AD, is I can grant different people permission to these specific attributes so I could give some department the ability to set these. Attributes, but only these attributes. Not anything else about the user. So this is a really powerful way, because it's some attribute specific to some application or only that application team could modify this attribute. Maybe a core security team needs to update the project? Some automation. So I create these. Custom attributes in. Attribute sets. And then at the user if we go and look at our users. I can configure those attributes so Clark Kent for example. I can say, hey, what are the custom security attributes? And I can see, well Clark Kent has with a number of things. I'm actually storing data about powers and secret identities, but the one we actually care about is this project attribute set primary project. Which I defined as a list of possible values. Clarks is assigned as value alpha, and that's an important point. Whereas Bruce Wayne for example. Well, Bruce Wayne. Bruce Wayne's is configured as Project Bravo. So we're gonna see they're different if I was to then go and look at the data itself. So let's Scroll down. To the storage accounts. One of the things we have for blobs, so this is restricted to the types of service I can use this on today. So I've got my containers. Images. I've got these five images and what I can do is on these images. We can actually define BLOB index tags. So this is optional metadata. So if I look at do you even Azure? This has a project of alpha. Now it's that first fold didn't have any project. This also has alpha this one. Has bravo. And Super Cloud has gamma. So they've got different metadata, some had none, and some have various values. And what I've done here is if we actually go up and look at the storage account itself. If we look at the role assignments. I have given so this is using Azure AD. Storage BLOB data reader. I've given it this ability to the Justice League group, which both Bruce and Clark are in, but I've added. Conditions. You have this optional condition. And if we Scroll down and look at that rule. I've added conditions and I've added two conditions. So to this role. He's been granted to this group, however there's conditions on it now. This is going to apply when they try and perform. Reading of BLOB, that's the action where this condition applies, and there's two. So this is going to be successful. Or in two scenarios. Eva this long first one, which we'll come back to. Or the resource container name. Has to equal general. Now notice we had two containers. So if I now go as Clark for a second and look at this storage account. And go to the containers. And go to general. Notice my authentication method is Azure AD user account. I am not using the access key so it is using that BLOB data reader role. If I select this. I can view them and I can view it because this is in that container. There's Ollie dog with zero sniffs given that works. If I now go to images. That doesn't apply. Remember this, the container name is different. If I try and access something it fails. Because my Azure AD account doesn't have permission so it tried to fall back to key based and it can't. Then the reason it can't fall back to key based is I've actually disabled it on this storage account. If you look at the configuration of the storage account, one of the things you can do. Is. Disable the use of the storage account key, so Clark can only use database RBAC or anyone to this storage account. Can only use database RBAC, so Clark cannot access. Using the access key so he has to have data plane access granted. OK, so let's look at the second rule we had defined. This is more interesting rule. This role, and let's actually edit it as you can see it more easily, this is saying, well, the principle, so the thing accessing. I'm looking at that project attribute set primary project. Has the equal. The attribute. On the resource. Of the BLOB index tag and I'm looking at the value in the key. Of project. So what that basically says is their primary project attribute. Has to match the index tag. Project Key and if they match then I have access so remember Clark was alpha. So Clark's project was alpha. And it was the second and third image had alpha. So if I look at the second image. Hawk has access. If I look at the third image. Clark has access. If I look at the 4th image which was Bravo, Clark does not have access. But look at the fifth image which was gamma. Clark does not have access. The first image didn't have any tag. Clark does not have access. But now if I look as Bruce. So now I'm Bruce Wayne. Bruce Wayne again would be able to look at general. Because general. That the rule was they contained image general. But if I try and look at images. Well, I can't look at do you even Azure? But if I try and look at on board to Azure stickers and coins I can because it was bravo. So you see, now with one single rule, I completely changed the game. I can now look at the attributes of either just the object so they hey the container name. There's different things I can do there. Or I can actually compare attributes of the security principle accessing it to things like BLOB index tags of the actual resource. So this ability to add conditions is really really powerful. Now it is limited support today I think. Yes, it's blobs, it's Azure Data Lake storage Gen. 2, but storage date like. Who does not support BLOB index tags today? So those more general rules, Azure queues a GA today. I think it's will grow over time, but this is a super interesting capability when I think about that more granular RBAC without having to create millions and millions of rules. So definitely that's a nice thing to understand and to leverage. OK. So. Policy. So if RBAC is, who can do the different operations on the different types of resource? Policy sets at the top any of those crud that create, read, update, delete. Again, doesn't matter how. It doesn't matter if I'm doing these operations via the portal, via the Azure CLI, via the PowerShell module, via DevOps pipeline, it does not matter. It's all going via the Azure resource manager control plane, the amapi. Policy are back apply here. I cannot bypass it. So what policy is going to let me do is remember those rules we talked about. It's how I can enforce the what can be done? Where can I create public IP addresses? What regions can I use? I must have this agent deployed, I must have this extension. I cannot turn on this setting. All of those things I can do with policy, and that's the key point here, so I cannot bypass it. I can in use it for most enforcement. Deny do not let them do this thing. I can use it just for auditing to check compliance. I maybe I don't stop it, but I can check the compliance. I can also use it for remediation as it's being created. I could modify the create request to add in some attribute or after it's been created I can maybe deploy it if something doesn't exist to fix it. So different types of things I can do. Start with audit. If I'm adding new policies, who knows if you've messed it up. If you just start denying, you might mess up the work. Mess up the business and you've messed up your career. So if you ever doing new things, start with audit. Understand, hey, what is happening? What are those compliance states? Maybe it's some user education. Help them understand what they should be doing, give them some guidance to their successful. And then once you're reaching a certain good threshold of people, hey a daring correctly, then you could maybe start denying things. So policy is a set of conditions built around resource attribute aliases, and then they have an effect. I'll come back to this point, so let's look at this right here. So let's think about. Remember we have the resource provider that defined the resources and they have properties on them. So I want to think about policy now. So when I think policy it's going to different color look at delete that quickly. So I want to create a policy. So in Azure policy. I can really think is an if. And then some sets of conditions. But those conditions are based on these properties. But it's not every property. It's the ones that are exposed via an alias. The alias is the same name as a property, but not every property of a resource may be available to use as part of policy. But if they're exposed for an alias, so if these properties match certain values, for example. So if it's a storage account, if it's got this property then. I'm going to do something and the primary thing I'm going to do is I have an effect. Audit. Deny. Modify. Audit if not exists, deploy if not exists, different things I can do? But it's got that structure to it. If I go and look. Over. Here by it's Bruce, I now have way too many windows open. There we go, this one if we go and look. Let's go and look at all Azure policy. And we look at very simple one. So we can look first, they notice what it's showing me. It's showing me compliance. So don't think that policy has to be used to block things. It's really nice to just go and see, well, how compliant am I and I can see all of the different policies I've assigned. And I can quickly see, well, what's the compliance state of those different things that I have. So I have certain regulatory requirements, hey, I can go and check. How compliant am I? But we have definitions. And firstly, we'll start off with the idea of definitions. Of. Just the policy. Notice you can have custom policies. So I've actually created no public IP excepting 1 subnet for example. If we looked at this definition, the key thing you're really looking at is the policy rule. So you can see in my policy rule it's an if. If all of there could be any of, it's like an all condition, but all of these have to be true, so it has to be of type network interface. And that network interface, the field IP configuration. Public IP address. Exists force so this is not so, IE it has a public IP address. So if we find it has a public IP address and it's a network interface. Well, this is applied so far. And then what we say keep scrolling down. And that IP configuration subnet ID. Is not. In some list of allowed subnets. So what it's basically saying is hey, look if it's a network interface card. And it has a public IP address. Well, if it's not in this special DMZ subnet ID we're going to pass, this policy is going to kick off. So then we have an effect. So my then. Is deny it. IE I can't add a public IP address to a virtual machine or to a Nic unless that VM is in my DMZ subnet. That's what this policy does. Now notice it's a parameter of subnet IDs. So when I assign the policy at time of assignment, I can specify what those subnet IDs are because I may use this policy in different. Networks. So that actual subnet ID would differ depending on where I'm actually assigning, but that's all really a policy is. That's the key point around it. Now I could apply that directly, so I could absolutely take. That policy. And I could just assign it. Now what do I assign it to? We assign it to a scope, we assign it to some scope. Management group, subscription resource group. Again, if I'm applying it at a fairly high resource group, I would only apply policies that have to apply to everything. I don't know, be too specific because I'm gonna break my organization's ability to do things. What if I have lots of policies? It starts it very cumbersome to assign them many, many times, but also from a compliance perspective, I may have certain regulatory compliance requirements that consist of 400 different things to check. I want to see the rolled up compliance state. Do I meet that? So what I can do is I can create things called initiatives. And I add policies to initiatives. And then I assign the initiative to a certain scope. If you looked at Microsoft Defender, the way it does all of its work is it actually has an initiative. So if we go quickly now, we go back to policy for a second. If I change my type to initiative. Well, firstly you can see things like NIST SP 800 consists of 471 individual policies, but we can also see the Azure security benchmark. That's what powers the defender for cloud and its recommendations. It's made-up of 209 policies which it just assigns, but there are many other initiatives built-in. NIST SP 853, Rev 5, all that well known one 700 and. 27 policies. So I can see all these different types of initiative available to me. New Zealand ISM restrictions fed ramp high and so then if I assigned that. Or I'd then be able to see whatever the scope I assigned that to. How is my compliance to that? So again, think about yes, I can absolutely deny things, but it's also really useful. From that compliance perspective? Now. If we go back over here for a second. The focus traditionally has been on the attributes of the resource. But very recently I just did a video on this a few weeks ago. There is nothing called deny action and what this lets me now do is this only for the delete action today, but I can actually use policy. To deny performing the delete action against the scope of the policy. So it's kind of like locking it. If I go and look. But the one I created, you'll see. Let's scroll back up so we'll look at all of them. And we can see my denied delete. So what I did here was I was looking for if. The tags lock status equals lock so I have to either add A tag called lock. Status and set it to a value of lock or because it's any of. Or. It has to be a storage account. And it's name the 1st 9 characters of its name. Start with storage 2 numerics production, so if it's a production storage account. I'm going to deny. A certain action. And the action today can only be deleted. So this is going to add functionality overtime. But what I did in that raw is Eva. I can set A tag on it to say I want it locked via policy or I'm enforcing the ability to not be able to delete a storage account if I deem it's a production storage account based on the name of it. And the way I would use this is I would think about, I would want to make sure. I assign that policy at a scope above where people are owners. So if I'm an owner, I could remove the policy. So maybe I would apply at the management group level, where people are subscription owners. So I would apply this at least one level above where the people are owners. They can't remove the assignment of my policy. This is the way I could enforce how you can't delete these things so that that policy, yes, historically has been focused around the resource, but now they're also enabling policy. Around the action I'm taking against different types of resources, that's a pretty exciting thing, because historically. To actually enforce a lock, unlike the the arm lock where the owner can just remove it. That was only possible in things like blueprints or deployment stacks or now I can do it through Azure policy as well. Policies can be grouped into initiatives for assignment and compliance purposes. So basically policy is hugely powerful. When you get started out, when you start leveraging Azure, take some time to really understand what are your requirements. Take some time to really get the right policies. You start with audio, I don't want to break things and then you can build on it from there. There are lots of different effects. Again, there's disabled, which means I've created it, but it's not actually doing anything audit. A very common one. Then they things like modify, modify. As I'm creating it I'm changing some attribute of the resource, maybe I'm adding some additional extension as part of the deployment. Deny obviously how you can't create this things. There's things like deploy if not exists so that happens after the resource has been provisioned. Then I go back and notice well hey if it matches this types that if conditions still applies. Hey if it's a virtual machine. But it doesn't have this extension. For example, something else then deploy if not exists, then you can have another existence condition in that it needs a managed identity because this is now running after something that's been created. We've modify effect, it's modifying it at the provisioning time. It's running as the security principle that's doing the provision action deploy if not exists happens post creation, so it has to run as something. So I need to manage identity that I assigned to use for the policy that has to have the right permissions. And eight can go and remediate. You can run a template. To go and maybe do some deployment of some extension and there were ones built in that do exactly that if we go over here for example. I think there's one around. Let me see Linux. VM. There you go. Deploy log analytics extension. For Linux VMS to put the guest extension between, just look at this one. But what we should see, so it's doing a whole bunch of things. So policy will, if it's a virtual machine and it's a certain image which is going to be the Linux ones, no, it's looking at rail. Or it's slayers. There's a whole bunch of conditions. But if there's any of those, then. Deploy if this next condition doesn't exist. So if it's a Linux VM then I want to do a deployment if this not exists. So if. This extensions. And I'm looking forward just this extension. OMS agent for Linux. Cloud monitoring and it's succeeded. So if all of these are not true then I want to go and deploy a template. To actually go and deploy the agent to that virtual machine. So basically how you deploy the VM, you missed off the agent. I'm going to go and fix it for you. So that's the whole point of what that is going to do. So policy hugely hugely powerful. Cost management and budgets. Money is important thing. Cost management provides insight and control of Azure, and there's a connector for AWS as well. So I can see my AWS spend. I can see exactly how much I'm spending. I can get a cost analysis of how I'm spending my money. I can get alerts around anomalies, how you're spending more on this particular day. Here's why you're spending it. Maybe there's some bump in usage. I can create budgets based on the actual spend or based on the forecasted trend of my spend. And then when I have the budgets, I can trigger things. So hey Evie, I've spent beyond a certain threshold or percentage of my threshold, or based on my trend, I'm going to spend more than I want to do and I can trigger certain types of actions. If we quickly go and look at this. Now my ability is somewhat limited. It's all of my accounts like MSDN or some very basic account, but we can go and look cost management and billing. I can look at cost management. I can do cost analysis. And we have some nice views here. So this is kind of in preview, but I can see sort of accumulated costs. I could go and look at my resources. And I'm looking the wrong subscription. Let's change it to. My dev subscription. But now it's. I could change it, I could look at certain resource group, I could add filters to this, I could say hey I want to go and look at certain tags for example. But it's showing me how much I'm spending on different types of resource and we've in here. There's um, I could open in cost management to get more detail. I would get insights. So notice. It sent me to check back for tomorrow for anomaly, but this would be where I would see things like hey, your trend is showing me I you spent 20% more than you would normally spend on a day. It's giving me insight into how I'm spending my money. So it's some nice sort of basic information about what I'm doing. I've had multiple tabs here. I can have basic cost analysis. Knows it. Show me my accumulated costs right here, but I could see daily costs costs by service for any of these. I can click on any area and drill down into OK, let's just see my storage spend. So it's very easy to go and get detailed about exactly what I have, what I'm doing in the environment. I again can change cost by resource. I could add filters so my filter could be based on a certain hey tag and it's once it's worked out what my tags are it could be hey if my cost center equals certain value then just show those resources like core it is one of the key ones I have for example. So then I'll just see the money I spent for the core IT department. I can download Eva my current data in different formats, or I could schedule an export to a storage account on a daily, weekly, monthly basis which I could then go and pull from and do something else. I could have alerting 4. Those anomalies. So if I see some strange anomaly, I could set up an e-mail alert to e-mail me and say, hey, there's something weird going on with your spend. I can create budgets. Now budgets. Let's just look at my current 1 go. If I edit my budget so firstly I can say, well, what is my budget? So I could see the amount of money. For example I've done 125 so 125 a month. And then once I've defined the budget, well then I can add thresholds. Now the thresholds can be. Percentage of what you have spent. I actual it could be up to 100% or past 120 so sorry past 100% so if I've actually spent more. Then my budget, I can perform certain actions, but it can also be forecasted. So I've not done it yet, but in my case, hey, if I'm trending towards, I'm going to be at 120%. Then I want to do something. I'm for example sending the admin emails so ever I have spent 80% of my budget or I'm going to spend 120 I can set up alert recipients to just do emails here. But the other thing I can do is I can fire action groups an action groups can really do anything. So the really powerful element of that is an Action Group could be called a web hook, it could be called an Azure function, it could be contact this ITSM system. And when we talk about monitoring, we'll go into a lot of details about action groups, but really I can call many different things different APIs. So I could trigger any type of action. I could even go and shut things down. That's a dangerous thing to do unless it's a dev environment, but I can really do anything I want as part of those different triggers. The other thing I can do is cost allocation. That is only if you have an EA agreement or a customer agreement. So I I can't do that in my environments, but the whole point of cost allocation is imagine we have these different organizations of resources. So that's all great, but if I think it's go down here. 2nd. So how can I think of this OK? You have different resource groups. Maybe I have some hub resource groups or hub it's or some central it. It has certain resources. Maybe my express route? That I express route is a cost that realistically is there being used by lots of different other services. Now, this sauce could actually be at a subscription level. It could be a resource group level or an individual tag so I could specify things tagged with a certain value. It's a cost. And what I want to do is split it. I wanna split this cost to other parties. Maybe it's an even split, maybe it's a custom split. Maybe it's proportional? And maybe it's proportional based on the overall total cost of the targets. Maybe it's based on the amount they spend on compute, maybe it's the base, the amount they spend on network, maybe it's the amount they spend based on storage, the different resource providers. It's how it's working out those elements, but I can target. Subscriptions. Resource groups or other tags. The idea being these owned by different maybe business units, different applications and so whatever the cost is of what I target with the cost allocation will get split to these targets based on how I define the split. And they'll be able to see it. So if these targets went and looked at their bill, so if they go and look at their spending bill that actually see two different areas. So let's see one area. Is there actual accumulated cost? I the amount of resource they've used in their subscription, or their resource group, or things with their tag, then they would see another. Line. Which said see the amount, but this would be cost allocation. I money they're paying. Based on some split of that shared resource. So that's what cost allocation lets me do. It let's me split some shared service cost to the people who ultimately benefit from it. But I can configure how I want to do that split, and again, I can't show it directly. Or have access to it. But the LinkedIn description below the Internet going slow today for some reason. But basically it will show you how I can create those cost allocation rules, how I can define those things up. It says cancel that. There's also an API so I can deal with that cost allocation in the portal, but there's also an API so I can get pricing. I can see how I'm doing the spend, there's power BI reports. I showed you the export that I could set up either hey, I want to export now, or I could do some periodic export. There's also the pricing calculator. This is so, so powerful. Make sure you understand your costs like Azure is it's on demand. Do you think of this infinite amount of capacity? But it also means I could potentially infinitely spend. So if I'm doing some new project. So think about what is my cost, what is it going to cost me? Go into the pricing calculator, put in the resources, think of the scale. What can this thing scale in and out to make sure you get the right numbers. Maybe put in those budgets. To constrain you to have the right alerting so you don't want to get some big surprise Bill. So really think about the costs. Think about what might cause you to. If you have serverless, what are the events that fire that thing off? If it's a database, what's writing transactions? The storage account? What rights to it? When do I scale? What are the limits on that scale now? I don't want to impact performance in my app if I'm scaling out a lot. Maybe it's because lots of people are using my service. That's a good thing. But make sure you take time to understand all of the different costs associated with any resource you have. So go in the pricing calculator, work those out. But it's garbage in, garbage out. If you give the pricing calculator incorrect information, it's going to give you an incorrect price. So it's really important to understand the architecture of your app and understand. What's going to make it consume more resource, which will make it cost more money? And always optimize your Azure costs again, I've done lots of videos about this, but make sure you're autoscaling, so shrink down when you don't need more. Make sure you apply as many discounts as you can. We're going to talk about that in a second. The ways about I can actually optimize my cost. One thing on the spend. You so a tax was one of the things I can do billing on there. There's billing usage records now tags don't get inherited and we're going to talk a bit more about tags in a second, but they don't get inherited. But with policy I could copy tags. So if I don't create A tag on a resource, it could copy it from its parent resource group or subscription. But one of the nice things for billing usage data only and this is really an important point. But if I switch out of my MSDN subscription for a second. What's my cost management? And let's change this to. My lab subscription. Manage subscription. Notice we have this option. Tag inheritance now I don't have it turned on. But what this lets me do for only the usage records this is not. The general arm it's not gonna go and copy the tags, but for the billing usage records what it will do is Eva. If it doesn't, if a resource doesn't have A tag, copy it from. The subscription or the resource group which everyone is closest or ignore. The attack on the resource completely just for the billing usage records and use the subscription or resource group tag. So this is a nice feature, just again, it's only for the billing usage records. This is not regular arm. It's not going to actually copy these tags to the individual resources. But for billing records I can actually go now and say hey for billing purposes apply the subscription and resource group tags. If there's the same tag for the subscription and resource group, it will take it from the resource group. So the closest tag is what will win out. And I can say hey either I'm only doing it if it's missing. So I'm going to keep the resource tag if it already has one, or ignore what the resource tag is. I always want you to take it from the subscription or resource group. That might be something I would want to do if for example I as a central team are configuring. The tags that the resource group or the sub level. And I don't trust them to put the right tag on the resource. Maybe I'm not using policy. Whatever the reason, I can basically say, you know, I don't care what's on the resource. I want to control that. So there are ways to also optimize the cost so we make smart decisions. We write size so we make sure it's the right VM skew, the right ratios of CPU to memory to storage. We make sure we autoscale constantly. We maybe use spot VMS if it's not time critical. So we may be use service. We use the right resources, but additionally. In addition to shutting things down, if we're not using it, all those things, there are some specific things to reduce the cost. I'm still having to spend money. So reserved instances are one way. So what reserved instances let me do is we've reserved instances I can say, hey look, if I know I'm going to spend a certain amount of this resource for this amount of time of this specific family, maybe I can different sizes, but particular family of VM in a particular region, I can commit to a one or three-year term and I'll get a discount on that. So I can think that, OK. We'll stay on this site. Cost idea over here. So if I think of compute services, there's a lot of different compute services. So I might say, OK, so we've got compute services. And there's all different VMS. So there's different VM skews, but they grouped into families, so maybe there's some skew family. One could maybe there's like DV4DV5E. Whatever they are, they're things like Azure container instances. There's things like premium functions. There's app services, there's all these different compute things and then I can think about I can use them in different regions. So hey, there's east US 2 W US, South Central US, UK, S, whatever they are. So this whole matrix of things and obviously there's loads and loads of regions. I'm not trying to be specific. But the point is what I've reserved instance lets me do. Is I'm very specific. I'm saying, hey, look for the DV4 family. In West US, sure, I'm going to commit for one or a three-year term to consume this amount. I'll get a knife discount that if it's three years, it's about a discount if it's one year. If I don't use that amount for any particular hours and hourly billing thing that wakes up, hey, I still get charged whatever my commit was. But if I know I'm going to use a certain amount, I can get a very nice discount to it. So I might have one RI there, I might have another RBI for a different SKU and a different region over here. I can create multiple reserved instance since for them it's a one or three-year term. There's currently the ability. That I can trade it in so I could take the remaining balance of my commit and trade it into a brand new. One or three-year commitment that could then be a different SKU for example, but it has to be the same or greater value and it does reset the time. So it's very, very specific that ability to trade in is going away. I think it's 1st of January 2024, I will not be able to trade them in anymore. So if I do a three-year commit of a family in a certain region, I'm in that for three years and I won't be able to change that. So that's an important point. But we have our, it's a fantastic, very big discount if I know I have. That steady usage. Now that is also the Azure Savings plan. And this is a completely different beast. This is again a one or three-year term. It's a lower overall discount. But if you think a reserved instance was this super specific SKU family in a very specific region. Well, if we take an Azure savings plan. Let's take Azure savings plan one, which again is a one or three-year term. For a certain dollar amount it applies. To everything, all of the included compute services, all of the regions. I don't give any detail. It's just the discount varies depending on the specific service. But I just get the discount. I say, hey, I wanna spend this amount on compute and there's a lot of things included within there. It's premium functions. It's dedicated hosts, it's. Azure container instances, it's app service, premium V3, isolated V2. Obviously VMS, bare metal VMS are not included. I mean the A G &amp; GS are not included, but there's a whole set of things that are. You can look at the pricing calculator to actually work out what the discount is for each of the individual services within it. So the Azure savings plan is a lot more broad. To discount is less than an MRI because it's broad. But it's all regions, it's all of the included compute services and I can really just it's billing mechanism again, it's going to wake up on the hour, apply it's discount where it can. If you have RI as well, RI would apply first, it's a bigger discount and then it would use the Azure savings plan and it's going to use the Azure Savings plan because the discount does vary on the types of resource, it will apply it first to whichever resource it can that gives you the biggest discount and then goes down from this. It's gonna try and. Is as generous as it can in terms of how it actually goes and applies. So it Azure savings plan. There's also Azure hybrid benefit, so if I have existing licenses for Windows Server for SQL Server, I can use that license. Maybe it's and if it's like Windows Server data Center edition, or if it's not data center edition, or if it's SQL, I can move and use the license in the cloud. To reduce the cost of the Azure service. So it's ability to, hey, bring those things over. And then it's on demand capacity reservation this is not. A cost savings, but wanted to draw out an important point. Our eyes, Azure savings plans are not a guarantee of capacity being available to you. Yes, you're committing to a certain amount of spend, it's not reserving that capacity for you. It gives you a slight preferential treatment. It's there's some conflict, but it's not a provisioning guarantee. If I need a guarantee for this mission critical workload to absolutely, positively has to be of this very specific skill and has to be in this specific. Availability zone. One way I can guarantee is a capacity reservation. I can create and delete them at anytime soon as I create it, I start paying. I pay for it like the resource exists. It's basically reserving that capacity spot. It's backed by a service level agreement and then I create a resource into that capacity reservation. So it's guarding that capacity for me. So I know it's always there now. If I'm using RI, which is basically, I'm paying for the thing anyway. Ohh, I applies to capacity reservations, so if I know if I'm using a certain amount, well this is a way to lock in the capacity anyway without any additional cost. This is slightly more specific. This is of specific sizes in specific AZ for example. There's a little bit even more specific than an MRI. But if I have that specific known to me and this is a nice way to then lock in that capacity, and if maybe my dev and my prod shared a subscription today, it can't cross subscriptions. I could even have things like, hey, my dev could be running in the capacity reservation, but then if there was a disaster I could then kick my dev out and put my prod into it. But again, it can't cross subsidy so my dev and my product would have to be in the same sub. So there's a little bit of a hopefully that would change over time. Naming standards. Super important. Have a standard. Have something agreed in your organization. There are some great recommendations available to Microsoft, so if we go and look at their cloud adoption framework, let's bring this over here. Yep, every time. Hate it. Just maximize and turn that off, I think. So it has some recommendations for the naming and tagging which you're about to get to. But it talks about some nice recommendations for. Some rules. So it talks about limitations. Sometimes there's maximum characters, for example on the names. And then it has how you could think about defining your naming conventions. So maybe it's how it's 3 characters resource type, then the type of workload, then the environment region, instance number. So it's giving you some nice guidance on how to think about those names. Applying the naming rules, I can using that policy to even enforce. Elements of this. And it just goes through some examples of management groups, subscriptions, resource groups, types of identities, types of resources. This is a great document. Again it's LinkedIn the description below, but definitely recommend going and having a look at this and one of the important things when you think about this. Is make sure you do have a naming convention not just for the Azure resources, but also things like guest OS. Have a a good naming convention so you have consistency over both the Azure resource and any guest element as well. You want consistent across the cloud and on premises. Tagging. Tagging as metadata. It's a key value pair that I can define on subscriptions, on resource groups, on resources, and it's there for you to then maybe be able to query and find things, maybe filter on it, maybe those billing things based on it. Those values could be a JSON document so I can even be more descriptive inside there. But it's attributes and metadata related to the resource again have standards for what tags I want to have. And again, that cloud adoption framework, as we just saw, they have recommendations of good tags to have. They've all limits. Each resource can have up to 50 tags. I believe currently there are a few that are 15, but that subscription limits document calls that out. I'm a tech nine, could be 512 characters except for storage accounts which is I think 128 characters and then the value itself can be up to 256 characters so I can define some nice key values. They are a valuable available for the every type of resource. If it's known as a tracked or indexed resource then it supports tagging, it supports having a location. There's very few things that don't think of Azure Key Vault, but inside that key vault are secrets although. Sequence is not its own indexed value, it's a child of an Azure resource. So those things don't support tagging. But most of all the primary resources, they're gonna let you have tags on them. I can't enforce the use through policy, so on Azure policy I could say hey if you don't have A tag of this key name, maybe it's your cost center. Maybe audit? Be careful of deny. Sometimes you may run a template and that template doesn't give you the option of adding in tax. So if you just deny if you're missing this tag, you're going to block the ability to deploy the resource. So really think through denying through policy, it's just dangerous. Maybe I'd already on it, I could warn on it, but they deny is very very dangerous because if I am using a template it doesn't give me the option. I won't be able to deploy the template, but I can then search, I can filter, I can build based on these. The document could be a JSON document if I wanted to, so the value could be a more structured set of data if it. That's why I need. They're not inherited. So if I set A tag on a resource group, it would not go to the resource. There are policies. That can copy the tag from the subscription or copy the tag from its resource group if it doesn't exist. So I could and I've got that on mine. You saw that cost center. I'm not setting that on every resource. I copy it from the subscription if I don't manually configure it on the resource and that would be a better option than this deny. So what you could absolutely say is, hey, if someone doesn't add the tag, copy it from the resource group. As A at least something. Um, I did show this. Cost management does enable inheritance, but it's only for the billing usage records. It is not copying it to the Azure resource itself. It's only for those billing usage records. Bob, if we look at our little picture, remember. If I think about all of these different elements here. The whole point now is I can add tags so I could add a tax to the subscription. And again, A tag is just that key value, and if I wanted to, that value could be JSON. I mean, it's just a string, it's a. And charge two 56256 characters whatever I want in there, it's from my purpose. If maybe the the number of keys I could have 50 wasn't enough or I could start embedding. Maybe it's OS information data I embed as a JSON document in a maybe OSD detail key or something different ways I can use this. But I could set tags on the subscription, I could set tags on the resource group, I could set tags on individual resources. So I have that, I can alley really where wherever I want to do that. Blueprints and deployment stacks. Now blueprints I think will get deprecated away. Deployment stacks will replace them, but deployment stacks is still in a private preview at time of recording. The whole point of blueprints is I can take different types of artifact and stamp them onto a configuration. And there's different deployment modes in how I do that. So what I mean by different types of artifact is I could say OK. We'll create. We'll do it in blue. It would be silly not to. So I can create a blueprint, and a blueprint is made-up of I can define resource groups. I can use. Jason, templates. Sees the arm templates, which is how I can declaratively define resources I want to create in Azure. I don't want to use the portal, I don't use the CLI. I'm saying this is what I want, go and make it happen, and we're going to cover all of that in the infrastructure as code module later on in this course. I can assign role based access control. I can assign policy. So I can group all of these into a blueprint and then I deploy it. To a subscription. Now when I deploy, I can optionally. Lock it. Now I could absolutely say don't lock. So I'm deploying resources but they could be deleted if people wanted to I could say do not delete so they could change it. But they couldn't delete them or I could say read only. We can't change them or delete them, that's optional. So I create the blueprint. And then assign it. If we quickly go and look. So if I look at my blueprints. I have a definition. I've got a very basic definition here which you can see hey look. I applied tag and a default value. I create a resource group called Networking. I gave a certain group the contributor right to that resource group. Then I deploy an ARM template that creates the base virtual network. And then I would just assign the blueprint. I can have versions so I could update it and then reassign it so it keeps it current. But hey, it's just a way to stamp down and when I assign that blueprint to a subscription so I select a certain subscription. I specify the locking now. Although it says the word lock, it's not actually a lock. It's not using that lock construct we talked about before. What it actually does is something really cool. It does a deny assignment, something that we cannot do. There is no concept of a deny assignment outside of blueprints or deployment stacks. That Azure policy, those deny action and the delete, that's getting closer to it. But this actually does a deny action. Through this, when I assign a blueprint, until I remove the assignment, if I lock it, I can't undo it. Even the owner cannot undo it because it's actually got a deny assignment against. It's something only blueprints can do and deployment stacks. That overall deny effect is not available to us regular humans. There are other blueprints available to us, there are ones just supplied. So if I was starting from scratch. If I said hey, I want to go to create a blueprint, it actually has a bunch of templates. That has some popular types of artifacts that I might want as part of my environment. But the new thing coming. Because all of these things I can do, creating resource groups, RBAC, obviously creating resources and policy, I can just do it with a regular template. I don't need blueprints to do that. The only thing blueprints does. Is has that deniability. That's the only thing I can't do. I create a whole video which is linked blueprints. Without blueprints I can just do it all in a template. And so they're taking that ability to do deployment stacks. So deployment stacks is really going to do what blueprints can do, but in a cleaner way. I'm not doing some portal based set of artifacts. What deployment stacks are gonna let me do is essentially. I'll create a deployment stack. Now deployment stack is just going to be a set of resources. That. Are going to be have a shared management lifecycle. Now I might define that as arm JSON. I might use the new bicep language to define it. But what's going to happen is I'll then deploy that deployment stack to some scope. But as part of that deployment when I deploy that I will actually have deny. So either I'm going to deny delete. Or I might deny right. And delete. So it's not using lock as the terminology because it's not really correct blueprints. It's not really locking, it's doing a deny effect. And so for deployment stacks this will be able to do all the same things. I'm just grouping the resources in this shared management lifecycle thing and all of them would get this, say, while they're in the scope of the deployment stack. Hey there, I can't delete them. Why can't can't write orderly either? Read only resources. If I remove a resource from the scope of the deployment stack I have a choice. Hey, should it get deleted or it just falls out of management of the deployment stack. So then any of those deny things would not apply to any more so then could go and do whatever else I wanted to. So deployment stacks I think will once they're released, they'll replace blueprints so that that that's coming. Azure resource graph. And resource configuration changes, so I can query on that whole crud. R was for read. I can query data, but there are quotas. There's limits on how many things I can do in a certain time period. I think it's 12,000 reads per hour, which sounds like a lot, but if you're querying every resource you have in your entire environment, that actually may not be enough and you'll start to get throttled. It's going to take forever. And So what the Azure resource graph does, it lets me query the control plane using KQL. KQL is the Kusto query language, it's what was created for log analytics. It's very efficient and I can add a very large scale. Query. I can use the portal. I can use PowerShell. I can use the CLI to go and find out information about my environment. So if I was to go and jump over here again. So I can run those queries so if I just do resource graph. So I've got resource graph explorer. It's showing me different categories of queries that I could run here. But if I open a query here, some of the ones I created find a VM by guest OS name. So you can see, hey, it's looking at all of the resources and I'm just doing hey, where it's a virtual machine. So Microsoft dot compute is the resource provider, virtual machine is the resource type. And Eva the OS profile computer name is demo VM or I'm looking inside the extended instance for demo VM and then joining it on my subscriptions? List and I'm looking for a match on the subscription ID and I output some detail. And there it found my VM. It told me it's windows and it's super fast. I've got other queries. I could maybe go and hey, what public IP's do I have that aren't being used? Ohh, and then it's telling me the public IP's. I could go and delete those, I'm wasting money. And what's this doing? We're looking at resources where it's public IP but where the properties of its IP configuration is blank. IE it's not being used as part of an IP configuration. I just export out the detail and there's a ton of queries just built in available that I can go and look information about, so it's really easy to get. Great, great insight. And I can go and see all the different attributes here. That are available that I could use as part of my environment and if I do getting started. But look at example queries. There's all types of queries that I can use. To leverage. But this is just really, really powerful and it's and bringing in data from the control plane, there's like a periodic dump and then it actually gets events fired off when things changes. So it's always very current. Additionally powered by this. There's the resource configuration changes, so this lets me go and see changes that happen to my environment, and this is really useful for troubleshooting something that stops working. It's like, well, who changed something? No one will put their hand up. Well, what I can now do is I could actually query it from there. But I can actually also from the portal just showing me all the resource changes. That have happened since the updates. I can actually go and look at any of these changes. And I could see that before and after oops click the wrong thing. But I've actually go and look at the record. Normally. What have I done wrong? And it would show me what actually changed. What was the before value? What was the after value? I can do exactly the same thing from the Resource Graph Explorer, so one of the queries I had. Is list all the changes. Now I'm only looking for creates. So if I'm not create anything, it's not gonna show anything. And I may not have done right, but notice how fast that was. Again, I'm just looking at resource changes. And dumping out information so that resource changes is going and looking at. The modifications to the control plane and exposing those outs is a really nice way to go and see hey, what's changed in my environment. There's lots of different elements to your environment. Azure advisor is there to give you guidance, guidance around performance, around cost, around security. So go and look at Azure advisor. It will give you some details about the things you may want to go and focus on. Now I'm not going to have a ton of advisor things in my environment. If I look at advisor, you can see the key sections. So I can see, hey cost, hey should go and write size something, security, reliability, operational excellence, performance, all your recommendations and if you're just going to look at any one of them. It will show you the type of recommendations it would be making. Hey, use standard storage right size or shutdown VMS disks that are not attached to VMS. Do you still need it? VMSS. It does a whole bunch of different types of recommendations to help you in this case, for example save money. But it also has ones around operational excellence, around performance, around reliability. And it's saying at least weekly, just go and check out Azure advisor. And see about things that maybe I'm missing right now but would improve my all up environment. And then there were some key resources you want to make sure you go and look at. So obviously there's governance documentation, again, links into the scription. I'm not going to go through all of these here landing zones. So landing zones are a starting point and a set of recommendations around how you might want to lay out your resources. Hey, certain subscriptions for identity or for networking and then for the applications for both enterprise scale, maybe for small, medium business scale, it goes through. Complete architectures of how you should layout your resources. Added option framework gives you fantastic guidance for how I should think about adopting the cloud planning for the cloud utilizing well architecture framework includes a review capability to see how is my architecture, how am I leveraging the different types of resources in the best way. There are example architectures, I'm not going through them all because I've been recording a long time. This module has got too long, but all the links are in the description. Definitely go and review. Four of them. They are fantastic. And with that, that is the end of this module, and I'll see you at the next one.