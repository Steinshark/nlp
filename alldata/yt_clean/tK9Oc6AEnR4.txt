Welcome to this crash course on course Herbert will teach you a basic commands, writing your variables, mastering control powerful text manipulation tools unlock the full potential of productivity by automating and making your workflow more welcome to this introduction This course is aimed at anyone people who want to expand their to refresh their knowledge. My your instructor for this course. system engineer since 2009. I've ranging from Windows Server to few years, I started development. I've been doing 2017. Up until now, and I've Linux, which might be a good completely new to Linux, I want of the operating system itself. Now what is bash, bash is short replaced the Bourne shell in the was the default shell for Unix user interface for ease of use, manage the operating system workings and complexity of the Now why would you learn bash? learn Bash is because it's scripting language for the Linux around forever it has been used and it has stood the test of included in Mac OS and in Windows subsystem for Linux. Now, why would you not use bash? considered a programming some features. For example, the programming is not available in the preferred choice here if advanced scripts that allow Speaking of Python, bash is also comparing Python syntax to bash harder to read and write. Not choice for more advanced Ansible also make it a lot multiple systems, which is a lot course, Ansible in Python are scripts and using one does not used in tandem with tools like scripts. This is exactly the bash, just knowing the basics lot of situations. Sometimes, the most valuable. What will you this course at the standard course around the windows Since we will be only using WsL seems like the obvious explaining how to install WsL on true Linux distro, even better. follow along in your terminal you have bash set as your disclaimer basic Linux knowledge completely new to Linux, or even at least follow along with the channel is going to give you a the Linux operating system Before we start with actual basic commands in the terminal. very simple commands to display first one is called Echo, which it as an argument. We will write pass it some text like so we we can detect this by looking at the argument. We will learn more course. In this case, we talk Now we can see the output that gave it as an argument. Let's try and see how another to this. The cat command But right now we don't have one. with our text editor Vim. In to be using vim because it's a almost all Linux distributions. hard to use if you get the hang multiple scripts in bash. In Python, with Vim, so it's unless you want to start writing software. In that case, a decent atom, or Sublime, or better Let's create a new file with txt, and let's write something Vim, press the I button, and you From this mode, you can start world in this file, now we press see that the insert mode is now mode and we're back into command the regular command mode, you the file. And this will make actually done and saved to the exit the file. Also, to make Vim, make some changes and Q to write colon wq. This will quit vim at the same time. If you made any changes you ignore the changes by typing will quit vim while ignoring any Now that we created our file, of the file with the cat out whatever's in the first is the name of the file we just txt file a TXT, and we should printed here. Okay, great. We also text files to the terminal. This may not sound like much, use a lot when writing bash So now finally, we are going to knowledge we just gathered in by first opening your favorite file shell test.sh, like so. Vim Now that we have our text editor of writing text in Vim, the i On your keyboard, press the A text rather than inserted. With character before the cursor with character after the cursor. Now of course, because it's a new mention it anyways, since Let's not start with our shell World, and write and quit the append mode, writing echo Hello button and then writing colon actually find the file in here list all the files in our see, the file is there and we looking at the terminals current the tilde symbol and the tilde our current home directory. By we are indeed in the home working directory. And this way we are currently working in, directory. Now let's run our file by the command line interpreter. Which is bash space, shell command we entered in the shell interpreter. But when we type in verify that we are actually should we really have to specify yes. Just because we are running mean that Linux is going to is also in bash. We should for our shell scripts to use the That does not mean however, that ourselves. We can actually interpreter in the shell script of our script. In our case, we the shell interpreter. Let's dollar sign shell command and Copy the output by selecting it clicking the selection either it Now let's go back into our shell insert mode. Since we want to the beginning of the file, press exclamation mark and then paste Dollar Sign shell command. And the shebang. So the pound sign telling the shell script which the shebang by providing the interpreter. And this way, the interpreter it needs to use, we period forward slash shell permission is denied and we need be executed. This is because in permission to act as an look at this when we type in LS of the ls command, which is a flag. So the minus L here is argument to the ls command, command to provide the long more information about the files our permissions that we do not if you want to learn more about you should look at my Linux for Let's give our file executable D or smart u plus x space shell plus x because this will give to execute the file rather than the system. It's good to have this although on a development matter very much. Okay, now we can finally run our forward slash shell test.sh. And terminal. Now that we finally we can actually start writing To understand a little bit bash, have a look at this have a classic example of a copy from to a location underneath paths twice typed out something that you want to avoid that we have a better option location path in a variable is quite a long variable name, something like loc underscore to make it a little bit shorter. just for demonstration purposes could understand if you would could have that very long file And then you could actually over again, like we did in the let's now have a look at how we example. So we can either type equals, let's say Herbert. And these variables by typing like variable like so. So that's how the command line itself. But we script to demonstrate a little So just type in Vim, hello, And then we'll do the insert slash bin forward slash bash. our first name equals pervert or last name, equals lindemans, will just do like this echo. And then we'll do dollar sign And then we'll exits with wq. to do is Srimad u plus x. Hello And now we can see that our name that. So now we actually type this also ask the user for input, shell script with Vim. same insert, they'll do the all, we'll need to ask the user is your name? What is your first do a read statement. I will read same with what is your last name and I will read last name and I Oh, dollar sign first name, space dollar sign last name. And then we'll write and quit. And then we'll do the classic interactive shell.sh. I will run us for our first name, or last print out our first and last we could have the terminal anything else provided in a first, what is a positional is exactly what it sounds like, certain position behind the run. The positional argument can forth. The positions are always working with positional to be in a certain position that counting from one position zero itself. Now let's have a look at one of Create a new script by typing insert mode again, we will have last name and position one and as positional arguments. Let's our one line of code like so. shebang, Bin bash, Echo, hello. save the file and close Vim, let's run the script again with forward slash POS argue that sh, your name is here. And as you here with only one line of code. One of the most frequently used makes it very easy to perform a the command. Let's say the and you wish to filter something that option. Now how does piping example. Let's say we want to look at a want to filter out certain files example, use a command like forward slash our directory. In directory at forward slash user and then we type the piping something that we use to filter type in bash. And we'll see the that we can see here. Rather In this command, we forward the the next command with the pipe pipe and this is what we call output from a command before the behind the pipe symbol. grep is more commands that have very with piping. When sending output to a file, of symbols than the pipe symbol. and double greater than symbols. send the output from a command potential use cases, the first logging something from your is something that you'll scenarios. Let's see how we can catch the output of a simple Echo hello world greater than world into a file called hello command before the greater than file after the greater than work by typing in cat hello dot of the echo command in here. Now here typing echo Good day to And let's see what's the hello hello dot txt. But what is this, don't have our hello world greater than symbol always What we need to have is a proper overwrite it. This is where the in. This will append any output than overwrite it. Let's try it original file with RM space hello world double greater than We check if the contents are dot exe. And indeed, the text is this, we sent another output to greater than symbol and type in greater than hello dot exe. And with cat hello dot exe. And we Now imagine using this in see which command ran at which handling. We're starting to write real script, we can also reversing the greater than than double lesser than or even input from a file, multiple of text. Let's first look at the get input from a txt file. We as an example here, because it's use case for these types of minus w hello dot exe to get the here, we get a little more than wc command, by default also what we want. If we just want to to feed the wc command and input than operator rather than the argument. This can be done like space hello dot txt, and this to the wc command. Rather than argument to the command, we will feeding data to a command with This is a great way to supply command. When we write the will immediately follow it up close the text we want to input. line Hey, wait for this word, wrote in between the first and will write e o f, but you can have a look at how this would double lesser than symbol elf. waits for input. So we can keep let's write some text creating a we'll type in I will enter write now we close it with the first again e o f. And now we should between the two e o f least, we can also supply single line. This will be done with you than operator. Let's have a look command we use. By default, wc command output, but not actual arguments. We should feed the the output of a file with one of variations. Let's see how we can command. So we typing w c minus than symbol, and then we open word count. And then we close should see the word count This is how we can feed a string that the string needs to be in it will not work. In bash, we have a built in take in a couple of arguments is true or not. For example, we whether or not a string of text write test followed by the square brackets. Let's see how open square brackets space. And need the space in between Hello Hello, followed by another space brackets. And this will show no dollar sign question mark. We because the first string of text will give us a return value of the value of the exit code or will learn more about exit codes know that exit code zero means without any issues. Another comparing numbers with each We open the square brackets close the square brackets, and question mark. And this shows us because we get a return code different operator here to make actually numerical. We could use And we do this with opening one closing square brackets, This also shows us the same which means that the values do an error if you would use of numerical ones. Now for some more powerful test expressions and perform an at this more closely with an login script which will not show us what is possible with Create a new script called if Type in the shebang. Do F open the square brackets, one comma comma close curly what this means in just a second square brackets, semicolon, we actually want to do here. So boss here. Welcome. Then start a new line. lf open sign, curly braces, one comma Close the square brackets, your user name data. Else. Echo. you're not the boss of me. And me explain to you what we did in a positional argument, which if statements will work. We start our if statements with expression. Take note of the section, we test if the first the value we provide. Take note curly braces. This is called a allow us to ignore upper and two values. We then end the test we'll follow it up by then. And on this line, we type what we test expression. In this case, the console telling the user the name and that he is indeed the have a script check for multiple this with an elif statement. that else if the previous this is true. Again, start a new expression that will test if the if it is, we display a message how to use the script. Being an that it isn't so hard to use. all in good fun. Then if none of finally we have the else action if none of the if or Elif display a message saying that and that the system will not be does not have the correct Finally, to close our if This closes the entire block of required. If Elif else statements are very often if you want to check kinds of things. We use case is a case statement? Well, a different actions depending on that we can define multiple matches the case, we will option. Let's have a look at how Let's try to recreate our statement instead of the if Elif file with vim login.sh and type start our case statement by sign and then ie variable expansion with the comma, space in and over here, special, we're going to define something that you could also do introducing it here with the it would be interesting to see username, space, and then the is actually like a separator for the pipe symbol that we saw two different commands. In a different function over here, it multiple options. So user name, then another user name, for then we close the bracket. And say or do here. So you want to the boss here, welcome, again, exercise, and then we close this Then we define another option did in the previous exercise that we close that option with what we do here is we define whatever you want to call it. that we're going to define. And default option, when none of the options are given. And then we not the boss of me, please enter that option with double with E sec. So it's case just before, notice that we have two pipe symbol, again, and when we the case statement options, we values to test for, we define a catch all or default option. else statement like we saw the options are equal to the specific action and now we can results that we expect. Before we get into looping, we knowledge about variables, we values to one variable collected of variable lists arrays. Let's this in the command line. In the equals open brackets one, space space five, close the brackets. array with open brackets, use a item, and close the array with see what the output is when we type in Echo, and then just like variable, space, dollar sign my that the output is just the course not what we want. To echo specify it like this echo, my first list square brackets, brackets, close the curly everything in the list. But we want to print like this echo my first list square brackets, type in zero, which is the close the curly braces, and this the array because we define the brackets. And because in bash, always has index zero counting item in the array. But let's say with all these items in the loop. Now that we have created our items in it and do something example, we will count the by piping the item output using don't Get to specify the minus n flag otherwise it will also count the type in the command line for curly braces, my first list, brackets, curly braces, semi space minus n space, dollar sign wc space minus c semi colon Take note of how we write the the variable item, which will during the loop. Then we define array. And what shall we loop, we encapsulate it in our square brackets, add square we loop over the entire array. colon space, then we type in do actually want to perform here. n. As I said the minus n is just ignore all the newline sign item, because the dollar the items that we are currently pipe symbol, WC minus c. And then we'd have been done. To understand why we need should first consider this. In repeated code, we might want to a certain order. Or we want to else statements multiple times. functions. These functions are script that you can run from so that you can make your code Because we can save so much time our first function in bash. first function that sh i will new line we'll type in the name call this show uptime. And then And then we open the curly dollar sign open brackets up for minus and then to close the equals dollar sign open brackets brackets and again, if I'm going you can pause the video and I'm did here, I'm going to dissect second. But then a new line double lesser than symbol elf, I create something pretty here. A machine has been up for dollar braces, it has been running since curly braces that a new dashes. Then we end our curly brackets and then we just dissect this again. First, we followed by open and close brackets. To define what our things that needs to do in our case, we will show the he catched the output of a the dollar sign in brackets in the next variable. We defined we use different flags for the output in the since variable and using these variables using the we learned earlier in the course brackets, and then we call the anywhere in the script. As long it's fine, because we need to first is defined. When we define a variable in our entire script by default, this actually cause trouble when you define the variables inside our that they are only available to entire script. This way, we will global variables, which might functions that share these look at what happens when we let's define our variables named Before since equals function, out before we define the and echo since. And then now we function. Again, we will leave up an echo since, and let's run see that the variables are is not what we wanted. We'll see available, but we have actually were defined before the was actually reassigning those assigned as local variables. thing we need to do to fix it we define the variable in our writing up, and since equals the before the up, we'll just enter goes for since we'll define this, we can now see that our scope of our function, but the overwritten. Just like our entire bash script So can our function, let's have new script called function pass shebang. And that will open our open the brackets, open the write echo Hello, dollar sign And then close the curly the function name space. And here, we'll write our own name. of characters we want. But in name, we could even go as far as the entire script to the function. And of course, positional arguments. So lots of Let's open up the previous file. we'll type an if statement. And curly braces, one comma, comma which in my case is Herbert to then return zero, else, we will the if statement. Then also over name and change it to a that also, if dollar sign close square brackets, will write someone unknown we'll close the if statements or try to run this with tests. For but then you'll see that it also requested the function. Aw K is one of the most useful use aw K to filter file command in such a way that we parts and get the output the way either filter parts of a file, command output by piping that look at how we can filter a Wk we first create a test file separated by a space once we Wk to work type in a Wk single print dollar sign one, close space the name of our test file, one acts as a placeholder. For We could also get the second word always separated by space curly braces, print dollar sign quote and again our test file in its default mode, which is separator, we can move on to characters such as a car, let's values in it again separated by a Wk again to split the values minus capital F flag and afterwards like this aw k minus single quotes open the curly close the curly braces single we will see that the output is examples, but we will see that a separator character. And last commands into a Wk like so type hello and then we pipe into a Wk print out number five, because by a space and then we'll see printed out. Or we can also like so. Echo, just get this WK. And then we specify the colon and then print dollar sign cut out the first character get the same results as well. Of course, there's a lot more want to practice you can try scripts. It really pays off to a lot of output filtering and There will come a time where you text files, and that's where sed command line tool that will txt file using regular at an example on how to use as in a text file. Create a text let's write down some text here. with grasshopper just for type in set single quotes s grasshopper forward slash G of our txt file, which is set of this command is a little bit down. First, we start off with single quotes and start our enter the mode we want to use, meaning we want to substitute slash with the word after the the first one is fly. And then that after the last, we provide to do this globally. G stands that we want to do this across means that we want to change with another single quote and we change behind the entire keep the original in a backup the minus II flag to the command thing we just do set minus i dot exact same command we just here that we use the minus II behind it. Instead, we write the II flag. This will create a original content of the file we command but the original file just like with aw k this is a there will be so much more to it you need to discover this by much as you can. Well this course