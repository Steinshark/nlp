Intro we'll compare Nginx with the Apache web actually, the Apache web server can outperform of each request using the p99 percentile one of the most important metrics alongside will be measured in requests per second, and we'll both web servers. We'll also measure availability, requests to the total number of requests. or how full the services are, by tracking CPU well as memory usage. Finally, we'll monitor compress content at slightly different rates. how effectively these web servers can function Additionally, in this test, we'll measure the To run these tests, I use AWS. I deploy large and I create an EKS cluster with 4xlarge Graviton Additionally, for the third test, I use large those proxies. For the first test, I create an AWS VPC and deploy VMs. I use m7a.large EC2 instances that have 2 I use a static website generated with and JavaScript files to be served by each and enable compression on both webservers since helps demonstrate how TLS encryption affects To generate load, I create an EKS deploy approximately 20 pods per The second test is very similar, except each I set up a private certificate authority, and provide the certificate authority to a secure HTTPS connection. Additionally, while keeping the same compression. This as almost all websites on the internet are since Let's Encrypt offers them for free. Also, For the third test, instead of serving static proxy to route requests to the applications behind you can terminate TLS on the proxy and handle also improves security since clients won't see allow you to scale and load balance traffic upgrade applications without downtime. I'm using the latest versions available which you can easily install from the however, is at version 2.4.62, which isn't I had to install it from source, along with the other dependencies that needed to be compiled. file on how to install the latest version of To verify compression, you can use curl. you can check the response size, which will By adding a header indicating you're telling the server to compress client. You'll see in the access logs that both To test HTTP/2, you can also use curl which version of the HTTP protocol was used. authority in each client to certificates I'm using for the web servers. blocks and Apache virtual hosts, are available in improvement, please let me know. Alright, let's go ahead and run the first test. or three times higher than Nginx, which clearly also notice that Apache uses significantly which suggests its throughput will likely And apache also uses a bit more transmits slightly more data because its At around 6,000 requests per second, This is likely due to high CPU usage starts dropping for Apache at this stage as well. longer keep up with Nginx. At this point, Apache's more requests, but with high latency. Now, let's When serving static website with plain HTTP more than three times the requests per second than but if you have a similar use case, this Now, let me open each graph for the full test graph. Apache started to degrade at around 8,000 Next, let's look at the latency graph. between the two was significant. Then CPU usage. Finally, we have network usage. At its peak, Nginx Based on this benchmark, if you're serving static Nginx is the clear choice. The second test is much more typical today with a TLS certificate. For example, TLS encryption keeps all data, like usernames, between the web server and client. However, using each request must be encrypted and decrypted. protocol to the more efficient HTTP/2 binary won't necessarily decrease as you might expect. still performs very well, with latency Apache's latency is also similar to the At around 7,000 requests per second, Apache less than in the previous benchmark. Let's go I ran this test a couple of times because when to 100% and fails to handle any more requests. I issue, but the second time I ran the test, it Nginx was able to handle only 22,000 requests previous test. It feels like Nginx could reach but it consistently fails at this point. Per Second graph. Availability graph. CPU usage. Memory usage. And finally we have network traffic. Based on this benchmark, Nginx is clearly over HTTPS. Finally, let's run the third, dynamic test. Here, web server as a proxy and load balancer. replicas, and each proxy uses round-robin to Surprisingly, Apache performs very well in this although it does consume slightly more CPU. usage of the applications behind Nginx is much has an explanation for this, please let me know. TLS certificate, which lets us upgrade to the perform compression better, resulting in smaller At around 7,000 requests per and its latency rises up to Nginx. From this At around 15,000 requests per second, Nginx test. It reaches 80% CPU usage and immediately Since Nginx doesn't exhibit this behavior in I suspect something might be wrong with how Nginx or it may relate to the HTTP/2 protocol. At around 21,000 requests per second, Nginx fails again. This behavior happened At about 24,000 requests per second, and can't process any more requests. First, we have the Requests Availability, and Application CPU behind the reverse proxies). Next is Memory usage. And finally, the memory usage of Based on this test, I'm not suggesting you switch dig deeper, as I use Nginx extensively as an cluster I manage. I'm interested in testing other controller, to see how it compares to Nginx. that you might find interesting. Thank you for