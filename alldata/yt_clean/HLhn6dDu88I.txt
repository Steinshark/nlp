So in React, hopefully we all know this by just go around and use hooks in any way that you errors, and you really have to follow what is states that you can't use a hook conditionally, an if statement, for example, or you also can't or may not return based on some condition. Now, you do that are perfectly valid, that's not what what I want to focus on is the fact that in a conditionally. You need to run the function, the And in this video, I'm going to show you how you way that you can break the rules of hooks and you want in any hook conditionally in a way that actually going to teach you a little bit about watch out for unnecessary extra renders in React. right. So let's begin. Now, this pattern over here be adding in my existing design patterns document also important as a React developer. And by the list that I compiled of ten of the most important developer. If you're interested, it's completely going to be linked in the description. As soon as the design pattern document. And you're going as probably I think the 11th design pattern. pattern document because it's really important. you React developers. So again, completely free. we have a dialogue component, which is basically right? This is a very simple representation of it. the parent, which is a Boolean, and then an on for it. Then what we have here is we have a ref we're passing in here to this hook. And we're we can uniquely identify the diff. And this use it's just going to detect clicks outside of this it is not going to be full screen, but it is going to detect clicks outside of the screen. And if going to close the model, right? Pretty simple. So we're passing here the ref, and then we're use effect, which essentially all that it does is And then here, we'll actually check if we're the actual element, then we're going to call the So pretty simple, nothing really fancy here. Now, being called conditionally at all. So this hook component is rendered. And even if the dialog is is telling this hook that it shouldn't run when it user clicks on the application on anything, this fine, because the only thing that is going to still, this is calling functions unnecessarily. that might change because of it, we're also going is not a good thing, right? So that's the problem, time that we have a click in our application worse if we have a lot of these dialogues in our they're only get to shown once, for example, if change your password, how often does that happen we click as many dialogues as we have in our in our applications and potential re renders. So before we continue, I just want to take a quick actually doing in this video, because what we're learning by doing, right, you're not just watching me implement the pattern, doing it in front of because that's exactly what brilliant the sponsor a platform where you learn by doing you have such as math, data analysis, AI, and of course, has a platform that is designed to be uniquely you build understanding from the ground up. Each that let you play with different concepts, which more effective than watching traditional lecture crafted by an award winning team of researchers, MIT, Caltech, Microsoft, Google, and so much critical thinking skills through problem solving real knowledge on specific topics, you're also some wonderful courses, one that I really like is what we're doing in this video and teaches you going to directly help you as a react developer free for a full 30 days, visit brilliant.org slash or simply click the first link in description. premium subscription. Thank you once again to let's get back to implementing the conditional right? Because ideally, we wouldn't want to run creates a subscriber, right, it actually adds a a memory performance overhead, right to have this is something that ideally, we will try to avoid. do if and then condition, let's just put false condition. Actually, let's do if it's open, right, we can't make a check for is open, and then render again, this breaks the rules of hooks. And there hooks must be called in the exact same order every so we can't do that. Now, this might seem like a is something that you would totally think to do, but it doesn't work, it breaks the rules of hooks. another option that we have is we can come here have access to is open over here, we can check for if is not open, then we're just going to return open is true, are we then going to actually call But it's also not the best solution. And the yes, we're checking is open over here. And then there. But what we're still doing is we're still attaching the listener, we're still doing all that here, this handle function, we're still calling it every single click, and we're still going to be we put is open over here does not prevent the rest running all of its code, the only thing that we've of running the on close function. But that's not attaching all of these things here, when we really this is really important, because it's not really solution. There's a lot of developers that would that the problem is solved. Because on paper, be calling the on close function, that's totally impacts of running all of this code over here that false, we're still going to add all of these memory here, not probably the differences are not But generally, you want to be aware of these all of this is often not enough, and you need a the solution is actually the pattern that I want this video, the solution is to actually get rid of that you may want to adopt for most of your hooks come into the hook over here, and actually add that is going to be a Boolean like this, that is if it should run or not, if it is enabled or not. the function over here, because now this is part it in the entire hook and not run any of this right, so we can come in here and inside of then we're just going to return here as well, it here, enabled inside of the dependency array, even going to run any of this code, we're not we're not even going to define any function over to allow us at the hook level to control whether it shouldn't. And another benefit of this is that right, we can actually put it here if we had other functionality, we could also in here write And we can also do if is not enabled, then we're also do this. Why is it complaining over here? I put it wrong. It should be here. There you go. could have, for example, function, do something. also take this as well and have it do something. I had a typo. There you go. Function. There we go. check the enable property inside of here as well. have more stuff in this actual hook, the solution if I can just undo it, this wouldn't even work apply to this callback function in here. All right? If we don't have this enable property, like would still run as well, even if it shouldn't be over here doesn't actually work. But passing this is available to the entire hook and whatever or not based on this property. So now what we have this hook over here, right, it takes And then all these other properties it knows what to do or not to do. This is way more is very good on memory as well. And we're not code to run. And this is again, a way for us right? We're not conditionally rendering the hook functionality based on condition, which we can do, break the rules of react. Now you may be wondering which we could do because if we do that, then we right, so it always runs even if we don't provide like about this is now we're going to have to put the way that this is formatted. It's a little bit we have the actual ref here, then we have the the bottom. And even if I mean, it's fine. But if pass is open, right? If we didn't have to pass you know, but if we do have to pass it, what I like to do is just put it back how it explicitly for this hook and any other hook that formatting looks a little bit better, because it's do. And this is also a pattern that you can apply any hook that is based on some condition that use this pattern pass this enable property as the last argument, it's totally fine, right? the code in here is not going to run based on directly past the enable property over here, you've solved the problem, you have no memory this is a simple, elegant and efficient solution