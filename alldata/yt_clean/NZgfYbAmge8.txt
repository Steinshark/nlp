Indexes are a very useful They can be created easily and can significantly If you want to know all about indexes, the different types of indexes, and even some tips In this video, I'll share a simple explanation of at how to create a simple index including PostgreSQL, and MySQL. We'll look and finish off by looking at some tips Let's get into it. Have you ever looked at a big book, like a Let's say you have a textbook on and you wanted to find the You might have some idea of what It was in Roman times, so it might be somewhere to the middle and look for it, and keep Or, you read the entire book looking You would start on page 1 which discusses the start of human evolution and read every That would take a long time, We can agree it's not a very efficient Reading every page until you find equivalent to the database's method of When you run a query, the database looks through every record in the table to That is, unless you have an index. Let's go back to our textbook example. Let's end of the book called "Index". It listed all This could take up a lot of pages, But, in this index section, there This shows the topic, as well as the specific Now, all you need to do is turn to those page This is the same way that So what is an index in SQL? An index is an object in the database that allows Like the index section in a book, they take up a bit more space, but the Also, like in a book, indexes work best You don't need to ask the database to Most of the time, the database will There are several different types of indexes. in this video, and mention others if The first type of index is It's called a "b-tree" index. It's also the that is created if you don't add any modifiers B-tree stands for "balanced tree". way the index is used by the database. It So, how does it work? Let's say we're looking for a record The ID is a column in this table A b-tree index would look like this. The steps to find the record Step 1: Look at the first level of the that covers the value of "B". There Step 2: Move to the second level first level identified in the previous step. Step 3: Find the entry, or node, that includes the we have two nodes on the second level: "A" and and ending with "M", because the next value "N" to "Z". It's a simple example, and but it demonstrates that the possible values Step 4: Move to the third level of the index Step 5: Find the entry, or node, that includes labelled here as A, G, N, and R. Which one is range of "A" to the just before next node Step 6: Find the record that matches As you can see, there is a repeating and "go to the next level". This is repeated In most indexes, even those with millions of So, we've just looked at how they work. But You can use the Create Index There are only a few things you need First, the index name, which is the This must be a unique name on the database. Next, the table name, which is the name Finally, the columns. This can be a single column or a comma-separated This statement is part of the SQL SQL Server, MySQL, and PostgreSQL, Let's look at an example. This code would create an index called table. The index name starts with idx, which is Adding a prefix of idx or ix makes it easy to tell when looking at This is a b-tree index, as that's SQL Server, MySQL, and PostgreSQL. In SQL Later in this video I'll explain and when you would create other types of indexes. Another type of index is a function-based index. This is an index that is created on the This is a little different to a index on a column is not used if the If a function-based index is Let's see an example. Let's say we have a query to find all employees To find the monthly salary, we Now, let's say there are no indexes on this but it might be slow. To make it faster, we can create the annual_salary in the WHERE clause, so When we run the SELECT query again, it may still Why is that? It's because the index is and the value being compared against in the query This means any query that uses a function or will almost never use an This is where a function-based index comes in. It's similar to creating a b-tree or expression where you add your column. So, in our example the index would look like this. We have the annual_salary / 12 inside If we run the original Select query, it should Some other situations where you may are if you're comparing strings or if you want to limit data based on a specific If you work with SQL Server you may have heard of What does this mean? This is a type of index that defines how the specifies that the data in the table is stored This means that it is faster to retrieve because there's less for the database to do. The drawback is that there can only be one is to create a non-clustered index, which is To create a clustered index in SQL Server, we Here's an example. We can see the which will create a new Another type of index is a bitmap index. A map or table of values. And, as far as I know, Each row is a separate identifier for the row, a specific column. The intersection which indicates that row has Let's see an example. Let's say we have an and this status column can be A bitmap index could be represented like this. Each row represents a row in the table, and we have a column for Active This is how a bitmap index is represented. It of unique values. In this example, there are only values in a column, the more data that is stored How do we create a bitmap index? We use the same Create Index statement, This will create a new bitmap As I mentioned earlier, this and only works well in some scenarios, so it There are many other types of like fulltext indexes and spacial indexes, What's useful to know is when to create an solve all performance problems with There are a few scenarios where you can create First, consider creating indexes on as these are columns that the The same can be said for JOIN clauses: consider If a column only has a few distinct may not improve performance. For example, a Consider indexing foreign key columns, They will likely be used in joins and covered by You might be wondering, can you just create generally not advised. An index can help with the Insert, Update, and Delete queries, because the those operations. It's much better to be specific And that brings us to the end If you learned something new from this If you want to learn more about visit databasestar.com. That's where I Which tip from this video was the most helpful? conditions and WHERE clauses, or a few of the Thanks for watching.