[thunder claps] Have you ever thought All of its goings on? How chaotic it might be? You probably see it when you get or when you turn on your laptop or when you detangle all of Of course, I often say Now imagine a world that is ordered, Would you like to see that world? Nope. Where's your sense of adventure? Look, if you take the blue pill, and this conversation If you take the red pill, I'll show you a more ordered world What about the yellow one? Oh, that's just a jelly bean, banana. All I'm doing is offering [electronic music playing] Here you go. Thank you. [music playing] - I'll need a minute. - Burger and fries. Burger. [music playing] Anything else? Fries. [music playing] Excellent. [elevator music playing] This place is crazy. No, this place is synchronous. Well, this place sucks. And how did you get that so fast? It's not how, but where? shall we? [phone ringing] It's for you. Please welcome Vice President and Chief Dr. Werner Vogels. [electronic music playing] Hello, Vegas. I really should have taken There's absolutely nothing And if there was, we really And think about those things, when And actually, I think the example What I've really learned is that to build good computer systems, And what I've observed is that it's not deterministic. There's so many events trillions of events all the time. Yet we seem to function that is not And so when I think about asynchrony, what I think is that it's similar to That just no matter our planet keeps turning. And so if I think about asynchrony, it is that we should make progress no matter what happens In our digital world, to make progress And actually if you think back we had a whole series principles where we built S3 against We wanted to make sure that under all circumstances, no matter what the load, no matter what new functionality it should always make progress. Now, of course, you know, because we enjoy synchrony, Now, the things we really care And in this particular case, Now, as you can see, if that one worker has to go through of everything that it needs to do that was actually pretty amazing, then you see that latency Now, of course, you know, you can add You have multiple workers. But they still actually have to - they are probably blocked on the And maybe it looks like but latency will definitely suffer. So getting closer to the real world that you have one or more servers and then they write the order and put in a rail You have multiple chefs, And so they all see the order and if they need to work on it, You can have these things behind the scenes for you. It is parallelism but without blocking Now, if you really want to improve You can have some of these stations introducing actually So there was actually a system in the which was called staged where basically you have of an event-driven but you have controlled parallelism to make sure that they're Again, coming back to the we took that into account. We wanted to make sure that there and controlled parallelism. That control concurrency about where are the blocking Now, sometimes the world And one of those examples They look so beautiful. They are absolutely amazing And it looks like there is that tells all these starlings Our ancestors actually thought in the birds But nothing is more untrue. This is not a singular system and nature is asynchronous. So all the actions that the birds Now what it does, it has three, One of them, it wants to stay but it doesn't want to fly into them, and it would like And so what you see there is that you accelerate. If you get too close to the other And if you are sort of in a nice that your speed matches the speed And this actual behavior looks like a spring. Now, in the '60s/'70s, what's called systems thinking. Donella Meadows is one of the most about systems thinking, and she already came up and negative feedback loops. And what you see here with these and negative feedback loops. They continuously move back Actually, in my academic days, You have X, Y, and Z axes Pitch, yaw and roll. So what you see here is that by local decision making. The bird is completely autonomous, even though the overall system But it's not. This is a pure asynchronous system. So the world works asynchronous. If you look back at those S3 autonomy, local decision, simplicity, controlled asymmetry, All of those were but we derived them And if you think about synchrony, It's just something that makes it But you know what? Synchrony is an illusion. It's something that we've built Systems as we know, Now let's go to some of the base of our digital world is, What does an operating system In essence, it just manages and adds a number So how do these devices work? Basically you have a device driver to make sure that sort of all disks But what happens is and the operating system is based If you want to write something you put it in a shared memory buffer, and maybe you can enter it back And so the underlying processes is purely asynchronous. And for a very long time - the clock is probably that generates interrupts and drives which process But, you know, for a long time, that asynchronus programming the operating system If you wanted to write to the disk, until actually the block was written. Well, throughput absolutely suffers on the other actions Now a number of operating systems actually were designed to expose asynchrony to the world. Windows NT was probably the first one that had asynchronous communication as a first principle Linux didn't get any asynchronous And actually, the order AIO mechanism And it wasn't until I think 2019 to actually give us truly And why do we want this Because it's natural. Synchrony is just an illusion. And so if you look at your and the way that we build synchrony leads Now, you cannot make any changes that the shopping cart without actually changing If anything fails, probably Now, if you look at an that actually is driven You see that everything is decoupled. There is no tight coupling And so the shopping cart the order system will pick it up, and in the payment system will The most important thing is that this is an architecture without having to change Now, if you want to add something or an invoicing service, you can do that And so why do we want First of all, But they have a number of advantages. Fewer dependencies, you can change the depending components It is a natural way If any of these components fails, actually, the whole system And if the new version of, let's say it just replaces the events So this is what's called That's really what I want you We build systems, but we don't build You start off with a story of a And then evolve it into the eventual So the great thing about the loosely is it's easy Look at S3, in 2006 it consisted of eight Now, these are well over 255 that we could add to the system without any impact We have new storage methodologies, we added different storage tiers, all of that while the system So evolvability is extremely when you think Again, we knew what we were Decomposing into small, is the sort of the fundamental part these asynchronous, loosely And actually in Amazon, we went through but we started off as a monolith, and one that had reached because we couldn't scale anymore, Because he will have those old driven in the backend a whole battery And so when we wanted to actually we couldn't do that because So we moved over to service oriented we learned from that. We went through a microservices is basically a very large running over a shared infrastructure. Actually, about a week or two This was out in 1998. It shows And it's actually how our engineers about how to deal with the fact that they couldn't evolve And how we got moved over This was way before anybody knew the service-oriented Engineers in those days at Amazon, are absolutely amazing and basically invent I urge you to read this document. It's dated. I know. But for many of you you'll because it's reality still now that have And next to service orientation, and some of our work How do we build these workflows? It's an amazing document. I urge you to read it, how engineers almost 25 years ago Now the workflows are important. It enables us to build from loosely coupled components. How can you compose them? How can you bring them together? How can you evolve it? And so to be able to build workflows, Whether you need to Or how to do retry handling, routing based on data, And in AWS we have two services that basically provide and you already know them. There's Step Functions on one end that handles all the different and EventBridge the systems, being the event broker. And one of the patterns here that you should be using to stitch together, to get Now, we've been looking that are building these workflows. And as always, customers start that you never expected them to do. And so for us, it's always really to learn from it, And so, for example, there was that we hadn't anticipated and it's that customers Map Reduce with their Step Functions. I go, like, What? After all, we have Kafka The customer is saying, We want something way more simpler. I just want to write two And so one of these examples, And so NOAA publishes the measurements of weather data and then puts it on a daily basis And the dataset is about 37 gigabytes and can be spread out But imagine you would just want, you just want to get the average, the station have the average high It's a very simple operation. And so to do this, they just wanted two simple Lambda functions So I'm happy to announce today that we're now giving fundamental AWS Step Functions Distributed Map. Now basically [applause] I didn't build it. Go talk to the guys that actually and give them the applause. Because listening to our customers So what we can do with these and actually is basically do a map So it starts off with using the which then will fire up maybe Lambda functions and then summarize This allows you very easily using very simple Lambda functions. Now, as we said earlier, The world is asynchronous, That is, no matter how much you would and how you would want it to be So the best way to handle that, is to build event-driven systems. Event-driven architecture to loosely coupled systems. Now, what are the sort of the the patterns in there you have the event, event records that get distributed that decides where These are just the basic components And if you look at the it's either point to point, which can be a queue in the middle or a publish/subscribe and then a streaming pattern, because it means that any C, D or E, and replay the event All of these are very important EventBridge supports If you look at one of these sort of an event-driven system, Gateway, APIs there, creating accounts, Create an account is just create order, post an event and then the order the service basically go off Let's see a really good example that Martin Fowler gave Martin He's one of the most famous and he's really a big proponent And this example that he normally that, you know, services can be end The shopping cart request an order, probably does an authorization gives an okay. Order service picks it up. Post order event, and shipping events happen, It communicates basically with itself And then it goes back Now, this is great. Now, all these components are loosely and most importantly, the whole If I want to add an email it's easy, you just plug If you want to add you can have a little process that picks up the events, and then maybe you have running in an EC2 instance that then picks up the work It's all very - Actually I'll make a little sidestep because I recently saw that that I was amazed and how important it is If you make APIs, probably There you post descriptions of your But if you change your API, you need to remember Now you can actually automate that. If you change the API in API Gateway, it generates an event CloudTrail then posts an event which triggers a Lambda function. This Lambda function picks up sort of from AWS System Manager API keys from and then posts the updates Gateway on readme.com. This is a very simple thing. It's actually on one of the blogs with example code for SAM, you can immediately start using this. And I know this seems simple, but it is an important part If you evolve your API, immediately But again, with event-driven and you want to add something to it, or whether or not things actually you can easily add Amazon SNS to it. With all of this, Gall's Law All complex systems that work evolved In event-driven architectures, are so close that you can actually Because remember, this here We're able to make it work because to be taken without total control. And it's actually not just If you remember the Amazon Two Pizza is actually built on this. It allows you to have teams to be and one particular component only. They don't need to know You're ordering service that there is an email So you can evolve the overall system by focusing on building Really, it is really evolve or die. Because if you want to really build on day one, that's probably not going Build systems that can evolve. And the best way to make is to focus If you've been in the Expo hall, you've probably seen and what you can do the serverless architecture You place your order Order appears on the monitor, when your drink is ready. This is what the architecture It uses Step Functions, it uses a whole You can see how this easily works. Maybe you think it looks a bit for just an ordering application. But the cool thing about this If you've used the app, you know where you can actually see that each of the steps of And the developers could just without changing anything Now I know, you know, sometimes because it's a convenience, In asynchronous systems, you have in the event bus, It can sometimes look And so I've been thinking about How can you make it easier for, developers that never used how do they know where to start? Which services do they need? How do they work together? We really wanted to make this easier. So today, very happy to announce which simplifies and accelerates the configuring and building [applause] It starts off with a canvas, a visual canvas where you can drag You can connect these resources together to create a serverless That really makes sort of the common either SAM or transformation So you build this together. You build these sort of different One click of a button, you've got And of course, it can interact So you can store all the files so you can either continue or you can just use your usual IDE to start continuing And so it's also, of course, because you now have a visual model it's really easy to share this with And so you can really quickly deploy from the Application Composer And it makes development If you can just, who don't have that much experience I urge you to start to make it easier for you with building Now, another concept for nature It's amazing. Because the spider is the most And in our world, the event bus And EventBridge is that. It does routing of events, and it does scheduling and EventBridge is one of the fastest This year for example, they added Event Archiving Scheduler, which is amazing. You can basically have either cron all the way over to actually So EventBridge is an extremely And important in all of this is that events are composable. The way that you've seen this event is that you can actually together to create a bigger And there is extreme power The power of composing in Unix Pipes make it very easy. And McIlroy, who led Bell Labs came up with this concept. That you should have small components and a standard format of interaction you could build bigger applications It's extremely powerful. Thompson and Ritchie actually and started to implement that. They actually had already thought to actually be able to interact So in Unix, the composability happens because these small components out to communicate with each other So this is a - this is just Now imagine you have an access log. You want to filter out the IDs of So you get the API lines You look for the 500 errors. You reverse that, for some reason, the customer ID So you reverse the lines. You cut out only the fourth number. You reverse them back and then you do which is not necessarily necessary. But it looks really good So basically what you get is you get that experienced this error, sorted and with only unique, Easy to do. And you can build many, many, using these very simple components. Now, I am still amazed, what is it, 50 years later, that this was Now the question is of course, However, that's a bit harder. You know, Thompson and Ritchie because Ken Thompson actually, after the night that they figured out rewrote all the applications Well, that's not as easy to do We have no uniform way And it's also an all You know, if I connect to Kinesis, Or through DynamoDB stream. And so many of our customers these sort of connections have to write a lot of glue code. And so I kept thinking, why can't we So happy to announce today, which allow you [applause] Which allow you to easily to stitch And it's a new feature for integrating messages So it is a point to point, and a way to manipulate the events So the idea is that you should be have to write the glue code. You can easily stitch And if you would want to actually before they reach the consumer, you can actually provide or a point through gateway to actually run some code that are flowing through your pipe. And it has built-in filtering, meaning that if you only want that needs to flow to the consumer, So basically this is pipes because it's not just easily it's actually also an ability that are flowing through your pipe. This would definitely reduce for quite a few of our customers that have been building or stitching AWS services together because now we have Now, if you think about events, let me take another sidestep, I recently wanted to go to a football in this case Arsenal Arsenal. [faint cheering] London is ready. Now I'm not, yeah, I'm a bit because they just Play beautiful football, [laughing] Yep. But you need to be to buy your ticket And so I went to one of that actually offered but had never used them before. So I wanted to figure out And I actually used for one I went to the Trustpilot site. And they actually gave me as a broker I later learned that Trustpilot and they actually have event-driven architecture. And I've invited them to come to give you some of asychonry Please welcome Angela Timofte, Director of Engineering [cheering and applause] Thank you. I love the energy in this room. I am here today to talk It can be hard earned to shape our relationships by increasing consumer's That word. is TRUST. At Trustpilot, we enable and find companies Because reviews help people to have more confidence They are also an opportunity and improve from Trustpilot is an open that brings both sides of We help ignite trust and we are on a mission to become the most recognized symbol Since 2007, we've grown to house However, our growth In 2021 alone, we have received And the number of reviews while their importance With the large volume of reviews, our service must be And to scale trust, we need to have However, scaling trust Today we are in a strong position, but our journey If we look at where we started, our platform was built on a monolith Our experience started well, but we soon found we were Hiring more people wasn't the answer. Immense planning, alignment due to bugs And more usage caused resulting in product outages. Not the best experience Now, I still remember Trustpilot's in their early days were prepared Because it became a tradition to happen during this event. And of course, what better way then after a few cocktails? We knew we needed to make a change. So we transitioned to But how does that work? Reviews are obviously But now let's look at one. Meet Sylvia, who had a great and wants to share it When Sylvia submits her review, an event is being published The review submitted topic with each one of them completing using Amazon Lambda, Amazon ECS One of those processes which is another Amazon SNS to consume and trigger One of them being storing the data. Now, choosing the right data store as the number of reviews increased from thousands to millions. We had to find a scalable, cost effective database. And Amazon DynamoDB stood out We all know we can plan for expected for events such as Black Friday even when having But our latest event-driven and the use of Amazon DynamoDB provides us with Meaning both expected and unexpected can be easily dealt with. One of those unexpected events all still remember, is COVID-19. Everyone was forced to buy online. We all needed to know who to trust. As a result, searching and reviewing became more important than ever. This increased our traffic more But thanks to the cloud elasticity and the use of an our platform is able to scale and unexpected traffic increases while our teams can continue focusing Dealing with the scale and growth is one challenge. But maintaining authentic, useful is quite another. If we go back to Sylvia's review, we are in a position and evolve As an example by subscribing to and using Amazon Kinesis to send data to our compliance we are able to scan While by using Amazon Step Function, we can orchestrate workflows or unusual patterns in reviews, Having an architecture and react to an event is exactly what we need protect the integrity as well as increase But what about the future? We live in uncertain We all need to spend wisely. This makes Trustpilot more relevant and more trusted decisions We won't stop here. We will invest to bring more features and with that, for helping us create and thank you, everyone, [cheering and applause] Thank you Angela. I forgot to mention earlier, Angela is part of our AWS [cheering and applause] The AWS Heroes program across 53 countries sharing and making the community They have a real impact I'd like to thank every one for all the effort that they put in Thank you. [cheering and applause] They're all over there. It is one of these things we give hundreds of thousands of But the best way to learn sometimes is from the people Because you really hear or the obstacles or, you know, this pattern worked really well for us Sometimes stories that you can't So really, I always urge you, to talk to each other, because that's absolutely the best that you can get. Now, one particular architecture that I think has become is to think about how we can run We now have 30 regions And it means that you can as close to your customers How do you do that? What is an easy way or easy, the most convenient way to actually that need to operate I believe, and I strongly believe, are the ones that you should use that need to work And we've been doing that ourselves And let's dive into how one actually works for Amazon, for AWS. So DynamoDB is, in my eyes, It routinely does trillions while maintaining and is able to operate And so there's many things we can under the hood of DynamoDB. And in this case, I only want to that is how are global tables because I think we can all learn if we built our own applications So global tables, it gives you to your local DynamoDB instance, and it will actually those updates to other regions where you need to have Then it gives you a multiregion, You still do local reads, while actually having And so what's underneath there active architecture, meaning that you can write to any of in any of these different regions are automatically propagated Now, there is no synchrony here. It's a purely asynchronous By the way, the alternative would be that you would have and actually one That is not a very reliable Because how would you build this? Would you really use Maybe if you would want to. But if you want to have a really that can operate at global scale where interruptions Yeah. If you need to run some form of two then it's most likely of your transactions will fail. Now, if you build it then And so we just like anybody else can make use of a number of features One of them is DynamoDB Streams. So we built a replication feature that DynamoDB already offers. Basically, the replication service for the updates and then propagates them to the Also, the other regions also have if you get rights in Europe, it will automatically propagate So what sits in this is basically a whole collection because you may actually And we use and SQS queue for this event-driven architecture. If any of the replicators fails, and can re-read from the queue exactly where the failed So we can have thousands And so they would take care to any of these other environments. It's a purely event-driven Now, if you think about the patterns in event-driven architectures you need to have Being able to see what were that you would need to propagate You need to make this asynchronous. Running this as a synchronous system Asynchrony will give you it will give you the ability and it will actually deal So self-healing replicators here, using the queue is something to build these systems Now, of course, you know, After all, the world You see them everywhere in nature. So we should follow these patterns. And of course, us as computer we have all read from the famous Gang of Four. At Amazon though, we keep our And I once again, urge you to take in the in the builder's library because they are the collection that have been scalable global systems So the two new articles to one by Claire Liguori and it's my CI/CD pipeline and the second one Using dependency isolation Brilliant articles. A number of the articles deal but quite a few of the articles with what I would say About having to set up how to maintain your environment. how to integrate your CI/CD pipeline All the things that are basically, sort of the heavy that have nothing to do And so imagine you have to work off or, you know, everything slows down with different types of tools So we were really thinking about, how can we remove I'd like to announce today that takes away all the heavy lifting [applause] Now we've built this with developers, It really helps you to sort of and deliver applications on AWS. It has all the tools you need to go The basic concept there, Here for example, that's what you want to build. And you will get all the help you You can actually add also your can have a set of standard blueprints that they want you to follow, And the blueprint not It does everything else. It sets up project files. It configures integrated tools, source control CI/CD And the service allows you to do like GitHub. And so an important part, of course, is how you can easily or you don't have to set it up, And you can define build action, you can actually import And it's a very easy way to deploy across services, across regions, And it has built-in support for code unit testing, automation, all of that stuff that I consider but actually doesn't help us It will hopefully take away One of the problems I always see developers, builders, need to actually work You may have one version that against Python 2.7 versus 3.9. They're not compatible. And actually being able to switch building the same application using these two environments CodeCatalyst makes this to switch without having to do any of the heavy And so, you know, you can auto with this code and dependencies and you can use your favorite IDE You can replicate and share really simply. Actually inviting people the only thing you need to do and immediately has now access to all the issues We realize, of course, always, that AWS is much more especially when it comes down So we've extended the core then Slack, and of course or VS Code and Jetbrains integrated into all of this because those are the services and CodeCatalyst integrates that And indeed, you know, so that you can focus and not spend too much time And so thinking about one of the things is not it evolves much faster. And so, for example, I met recently They're an example of a company that makes use of 3D technology And so you can basically be at home, decide whether And actually, they built And so for example, of an event-driven architecture. When Vehicles get updated, and then it's consumed which puts it And then all these components can and it's an easily extendable One thing actually that's is a pattern That they actually have all of Every car is captured in 360 degrees and with the interface you can just look around the car, you can walk around it, And this is sort of a pattern that I see really arising The world after all is multi It's not just one line. It's not just we're used to 2D, why? Keyboard, screen, mouse finger, that's how we have built and how we interact with them. But it's not the real world. The real world is multi dimensional. So how can you get a digital system as close to the real world And we've really seen great, Alexa and other voice systems without knowing You can use the thing This is not a Slack channel You sit here and I talk. And so it's normal, it's a normal way and as such, we should use to access our digital systems. Soul Machines is a company that have actually taken They actually have digital that can express emotion which is another very normal, It's not sufficient to hear you're all looking at my face. What do I think is important? What do I not like? Liverpool, for example. And so Alexa and Soul Machines And our real world And as such, we should be to present the world Again, I had a really I was given a birthday present Now my feet are ugly. And so I was amazed that I now that would exactly fit my feet. So we went to this story and they were very - And they use the same as they used They produce what is called a last, which is a physical in wood, against which And I was really surprised, that this 165-year-old company was using very modern I get to sit on a chair that had a bunch of cameras that actually made And then they were using to make the last out of that and make a pair of shoes And it seriously made me think has permeated our world already. We're getting there. It's really great to see this business is innovating and using to actually improve And they're not the only ones. Remember, this is Jeff Bezos once described our Meaning their expectations And this is true, especially in Just a few years ago, or some furniture for your house, That you had no idea how these or how it would look in the house. What customers would actually do, they would order four variations have it sent to their house, Pick one and send This is, in my eyes, and also a bad experience So what can we do better there? We need to make sure that the way that our customers can interact I need to have 3D images to make sure that it can happen. Fortunately, browsers have started that make it easy for you to have It needs a lot of math, though, Now, what you can see here in Amazon Basically using augmented reality to see how the shoes or how it would look like This really makes sure can actually buy the products of having to order a lot of them The production is called Now 3D models are worth Actually, about 130,000 pictures. You want to make a 3D model, you would go one degree over each of you actually end up And actually if we add you would get to millions Now, it's used over all industries that this becomes much easier. You can't take 130,000 images You have to get close as possible. Now, it was necessary to have these to then create But there's a technology a hundred years old And this is the science of how many to create a very good approximation And so many of our customers where they take a whole set of images machine learning And then, in event-driven and then stitch them together to create There is no PDF for 3D. There's about six or seven different that you need to create Quite a few of our customers literally have thousands and so they really pump Now, there's a lot of research There's something called NRF, And this is the science that and then use machine learning Actually, it's a bit like We all think we have brilliant It's not true. Actually, we don't really see It's our brains however that stitch and fill in the gaps. That's what's NRF is as well. Now, how can we make use of machine You actually only need about if it's not too complex, And given that this is becoming I honestly think that 3D as pervasive as what video Five or six years ago, These days, everyone is putting it 3D will be the same. And they are, of course, because they're close to what And also how these objects And remember, augmented reality But what if you buy this lamp? Now you can put it in your living By the way, not just how it looks What effect does it have What if you move this lamp All of these things you can do, called View In Your Room but it's something that actually more prevalent soon, So, of course, it means that you not of the object but you also need to have of the environment where it is in. And so we already have a number that work really well in that. Unreal, Unity, and actually, significantly in the open 3D engine, which is maintained which gives you the environment you a 3D environment for you. And actually part of that is also They're also participating in this? We want to make sure that there is that works really well in the cloud. There's also partners One of those is Matterport. Matterport allows you to actually use to make a 3D representation You have a device you can put and it will turn around the room, make an or you can actually use some of to build an accurate Then all the data goes and they can build different For example, if you want to do for a particular environment. You can also tag your objects And by the tagging, it's easy then, AWS IoT TwinMaker. What you see here is an environment You can go in there and you can look that are in there and get the accurate state You do this by actually combining The dashboard, by the way, the one that we all love to use. So you have all of this fusion that is all coming together. But you know what? It is not enough. Because there is something that we is actually pretty tricky If you have ever tried to put thinking in 2D won't help you. You really need a good sense of 3D all these suitcases in your car. You need what's called Now, most of us have this, not all. And so it helps humans understand through a digital lens. And the world is made up of and we have to understand And for that, If you think about maps, maps are They're really good, By the way they are two dimensional, so they're not really an accurate I know we were on the road trip and the maps told us that, yes, but it all didn't tell me Believe me, backing out of And if you're driving a truck, A to B, but you also need to know to be able to make sure that you can And especially in a world like, these simple 2D maps are not enough. You should think about maps as being layered with different timeframes. Roads probably won't change lanes on them may change Then you may have roadworks that are actually there You need to have all of if you want to build things And so one of these examples is, Zoox are building a fleet to serve as Ride/Hail sharing. And in a city of course, Zoox is able to predict of people and even so they can make sensible These vehicles need to have and it requires a fusion of sensors And the perception system has and LIDAR and infrared radar And all these sensors together create a 360 degree field Now here you see The car doesn't use Maps need to be software accessible not just visual. We, however, we like And we want to visualize actually even in our consoles, we love to visualize Systems don't need visualization they're all for us. Humans need to visualize And I think a company is Epic Games. Please welcome Nathan Thomas, to show how their technology to create the experiences Nathan. [music playing] Hey, everyone, it's great I'd like to talk a little bit which is the game engine that we use in which we make available developers around the world to build everything from to the biggest triple-A titles Unreal Engine is built It's a really important where we can drive innovation through our own game development and then make that available Over the last few years, we've really focused on and Cinematics in Engine, which has helped it into a wide range We're seeing users through their own creativity They're doing all kinds of things we couldn't have Now, Unreal Engine Our tools like Metahuman, are another part of that story make it easier than ever to build So I'll be talking a little bit Now, of course, in their development which helps gives us the flexibility Now, when you're building the world's you don't get there just by You've got to use to build experiences and demonstrate what's possible. That's why we built an Unreal Engine 5 Experience. This is a large scale, open world environment. It's dynamic and AI-driven, storytelling possibilities And we shipped it on next generation to show you can get this level on hardware The world is pretty impressive. It's about 16 kilometers. It's got 40,000 cars that are It's got about 35,000 metahuman It's about 7,000 buildings And a lot of this is which means that it's It's a logically consistent And we really believe of a lot of the future we're all going to have together. Historically, this type of large for 3D generation is challenging is solving that in a lot of ways. But as I said, Unreal Engine For one thing, you're going to into that world So we launched Metahuman Creator, which allows you to generate high And those are free for use This is something that used We use EC2 GPU instances to moving from petabytes of backend data down to hundreds of gigabytes and then down to a mesh And of course when we did that, and we needed instant availability So we're using Pixel Streaming That really lets us And of course, that high quality has helped make it a huge hit. We've seen over 2 million metahumans And to give you an idea, we estimate there were maybe So we're seeing a massive uptake based on the availability Now, also, as you develop you're going to want to share and you're going to get And so Twin Motion is our 3D built on top of Unreal Engine It lets you share high quality panoramas and 360 degree videos. And on top of that, which is a web service running on AWS that lets you stream interactive which means that you don't have or any additional software installed. And like metahuman creator, G4 and G5 in this case. This really allows us to get from the highest need projects while still supporting G4 that don't need that much hardware And then, of course, you're also your building, and environments inside of them. So photogrammetry is the art from 2D images Much simpler, much faster The gold standard for this has been RealityCapture, which really makes it those ultra RealityScan is our new phone that brings that same It uses AWS for processing a point cloud and a preview mesh so that it's easier for you the right set of images And then at the end, that asset that you're building for our environment, In private beta we've had over Tens of thousands of models and we've seen this from millions And to handle that, we use RDF We use S3 and CloudFront We do all of the processing and then we use ElastiCache We've seen some really exciting, but I'm really excited that we are publicly [applause and cheering] So Android will follow soon, and give this a shot now. The combination of the innovation and these other tools become almost indistinguishable This is really bridging and unlocking a huge range for these tools like which is a new set of tools on top of Unreal Engine. We're seeing an increasing number augmented reality, and it's really helping increase available in the aviation industry, We are incredibly excited for this that we can see in front of us. But that transformation is not All of the innovators who are going which is why so much of the tech is free For example, the city sample an Unreal 5 Engine experience AWS Ambit Scenario Designer is So you can use that to jumpstart applications built on top Our mission at Epic is to empower We really want to see you push that we can have in ways You have that power, the power and to bridge imagination If you're curious about that I invite you to jump in right away. Thank you so much. [music playing] Thank you, Nathan. Absolutely, mind blowing. Our digital systems may not but we definitely need Actually, one of the things and I really would like because it's something that you can I love Ambit. Again, it's one of these things So the AWS Ambit Scenario Designer is a set of open source tools that allows you to create by just the click So the first functionality of that you know, They make it easy. You just point to a city Ambit will create the 3D world You don't need to do anything It blows my mind every time And then what you can do is you and you can use rules for that, or how they should evolve And then you can add Do you want daylight, night, all these different kind of scenarios And then with one click of a button, And these scenarios that can be that into any of your your popular And actually, you can set a set that they can literally generate thousands of different scenarios that you can immediately use in your And I was always I think, I love this particular pattern, which If you go back to the 1997 letter Bezos wrote, this is key in it. We will continuously experiment, and we will learn from that. And that means that whether you need to learn, but you also need And of course, experimentation We've always decided that we would in front of our customers. They're allowed to vote It doesn't work out, But most important from that, be able Now, at larger scale, especially not immediately manipulate And there's all sorts of companies for many different scenarios. But it all started actually In 200 B.C. Roman generals were giving to simulate battles and test And then much later, Leonardo da actually started building first of his innovations In our world, in our digital world, the pioneers of simulation They were two mathematicians who pioneered simulation and they used mathematical models for example. This was the world's They were also the inventors Monte Carlo simulation, the name you can model risk in casinos. Of course, now it's being used risk modeling way But it was one of the first Very primitive, And if you get closer we had these massive workstations and desktops But most of these simulations that it would run on and the memory And as such, many different types Almost every vertical has and whether that's in life sciences financial services risk modeling. Oil and gas that actually takes and then do all sorts And we have many of our partners that have systems that run on AWS that provide to their particular customers. And take, for example, Now they have specialized simulation civil engineering companies, and many of the students that this is where they build And so this is sort of the state So why do we simulate? What is the reason for stimulation? Well, first of all, there are just that you can't play with If you think about sort of if you think about how traffic and you want to change it's not something And just try and to figure it out. Now, for example, I was involved during the COVID pandemic about one where people weren't keeping So the question was, can we put in certain places so that people naturally would keep Well, that's not something with in real life In simulation, you can do this. And simulations are naturally because they have And if I think about how I learned I learned them from Atlases. And I was it was mesmerizing. I would dream about faraway countries But the atlases in reality were 2D. I was still amazed by it. Today, kids learn geography by flying They can see around them Or you can see the tigers in Nepal. All these kind of things are possible And you do this in cases where, you can't just fly yourself And so simulation plays We have physical limitations. And then, of course, there's many where you don't want And so, for example, many of the these days that we see on the roads or where we see these companies being So think of Aurora, it's one of these that are building technology and they use LIDAR and cameras and radars to see hundreds of meters And but they are crucial using Because you can't just go messing because that would be And so, for example, their system unprotected left hand turns virtually And then the other reason, one of is that you can manipulate That of time. And in essence, you can do doing years of testing in just hours. Here you see the deforestation And of course, this happened But in simulation, you can speed up that would normally take years Then obviously, you can speed up time if you want to get But there's another type of and it's that of spatial simulation. So the real world around us This for thousands of events continuously around it. Think about urban traffic with Think about and you know this big and a pop concert how does traffic go through How do you manipulate? What do we have to do to make And each of these, think about You literally have hundreds of thousands And each of these entities velocity, behavior, And we used to run these type because it requires to be able to do this, because the large number of entities and especially how they are And Adam on Tuesday already and I want to dive a little bit So SimSpace Weaver makes spatial and it really lowers And so maybe the best way that is to go through an example. Yeah, a number of years ago, I went to Hawaii to meet with And they are working to combat by wanting to build a trillion as trees are the best carbon And so I got to thinking about that actually is focused What are the kind of questions or answers that You know, where do you place Where do you plan your seeds? What type of tree How much carbon capture is And can we encourage biodiversity? Because it turns out that for the health of an ecosystem. You need to consider where seeds Where you source your plants from, how far away from each other, and what kind of impact and what impact wildlife And so let's start off So this is a piece of barren land, And so this is a huge space that hundreds of thousands So a simulation is - imagine we would And this is many miles, actually. So we divided up into grids. And in a simulation, we may ask the best place to plant our seeds and overall growth? What if we planted here? The simulation is then able to Because it's just a simulation Imagine you would start Imagine what would happen You see that the trees will grow mostly because the water around it, you know, supports it and actually And every object in our simulation And some of these entities move Trees don't move, of course. But our simulation shows how the seeds travel And what makes SimSpace is how this simulation Our spatial simulation The simulation logic operates on each of the individual cells Each cell tracks the logic and for all the entities And every object The trees, the seeds, the animals. And the cells are distributed by These instances work together as if you have one And it appears as a single integrated You have clients that can and visualize it like we do here. SimSpace Weaver handles and handles the memory management All of that is being done for you. All the heavy lifting for spatial simulation Now we can track millions of the wildlife, the deer and birds, Animals cross boundaries in the grid, they're actually transported They are actually freely And it appears that trees were actually not growing And I honestly think that I've lived in an environment They eat everything. And so it appears the trees and it might be because indeed So what would happen if we built You see then that more trees and the deer no longer These are things that are not easy Trees may take 15 years to grow. Simulation is a true of what would happen if you would actually And this is just one way a company like Terraformation So what are other things What are the other things? Now you can simulate or public transportation networks We can do this because in the spatial intelligence world So why should you care about except for the nice pictures I think simulation plays Because you can play all these 'what if' scenarios, that you can't do in real life. And, you know, you can do you without actually having impact before you take out your system And I think there is a true pattern happening where the border and the physical real world We've already seen that before, Many of our customers sits a complex distributed system. And so this is becoming vague. And as such, the more of us that need to act with the real Now, what about the future? Is simulation really the magic key Now it helps us understand of course, But this simulation, with complicated physical engines, They will get more complex but still, there will be Now, take, for example, if you wanted like the configuration of molecules. The computational effort needed with the number of models Today we often use Monte Carlo to simulate and they're incredibly helpful in helping us understand the world. But it is still significant Given that we are living I can now easily What if you wanted to simulate You would need a lot more memory But this is only a problem or our current computers. It might be possible with quantum computing in ten Quantum simulators, Quantum are not as accurate today and that's because quantum hardware But to try the state of the art the prototypes of that you can use There's a range of young businesses that have been building and they're all available through AWS Now, the world of quantum computers our rich set What are the tools How are you thinking about algorithms and Bracket really democratizes so we can help innovate definitely of building on quantum computers. And they have actually the ability that would be impossible So let's play this little Imagine you have a fundamental You need two bits For collection of two electrons, And for collection of N electron, Now, remember, if you take, a molecule of penicillin, And to model that, That is two to the power, 285 bits. That is more memory than we have It's this. I'm not going to pronounce this. Now, I did put it through Polly, and it took a minute I'll post it somewhere what this really, So the memory you need is going to that you add to the collection. So the memory you need It's impossible to date on and the way that In a quantum world, however, with some other quantum object You don't need this large A qubit is a fundamental unit And it can be used to encode For 285 fundamental objects you can use 285 qubits directly. And this allows us to start thinking and understanding the world without actually having to go Let me give you an example. A common application, when you think is that of producing fertilizer. Well, we would think that's a well We've been producing It's a process called Haber-Bosch. Unfortunately, the process uses to create ammonia. Now, if you've ever taken food out of and put it on the counter you know that rotting food If we could simulate that process, And this can only be solved Because of the complexity involved which really would require Now, I understand that you think you're not really familiar but it is real, and it is the reality of the future. It is how we are going Now, I understand that not everybody a grasp of quantum computing. So I had an interview who is an Amazon scholar, and he is the Richard Feynman professor And his mind is full of quantum. And the way he talks about it, So we did this interview with him going back to the fundamentals So this is a video. I've done a few of these curiosity that we are tackling in the AWS. And if you want to learn more about and what the realistic state and what we expect it to help us But don't watch it tonight. Once again, we have the number one playing at our re:Play party. Martin Garrix, yeah, I love seeing you out there. So what do I want you Use simulation. Start thinking about how in your which is both customers and maybe how can you use simulation? And despite these great leaps we're still at the beginning But what was impossible with pen and da Vinci sort of scraping these Remember, for me to get my shoes that actually makes these lasts And so start thinking about using simulation I started the keynote by saying that you should think And why should you think Because it is. And I ended it by showing you how you can model and use it to build I hope that you can all agree from something and observing the greatest the universe itself. The universe itself It is extremely fault And resilient and robust. We should learn from sort of and the world around it when we start I hope this talk has inspired you better, bolder systems Thank you. And now go build.