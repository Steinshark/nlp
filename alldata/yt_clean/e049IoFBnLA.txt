Hello everyone. Hello everyone. Some of you dear contestants Professor Terence Tao is. Just a few words of the first time when he was 11 years old and he back and he received a silver medal. After that he was the youngest participant to receive a didn't participate at the IMO anymore. Now he LA and I can say that he is definitely the most influential mathematicians of our time. Thank you. I'm very happy to be back here one of the most fun times of my life. I still not just in the competition whether you social activities. They always My talk is on AI and more generally You've all heard about AI and how it's today there was a talk by DeepMind on how can answer some IMO geometry questions now. Olympia right after my talk actually I'll be talking more about how these tools which is different from competition mathematics. you take months and sometimes you don't solve the definitely not the same as math competitions It's all very exciting and it's beginning hand there's also a sense of continuity. We've do mathematics for a long time and it's just it is changing but it actually is following So here's a question: How long have we The answer is thousands of years. Here's mathematics. The abacus is one of the early That's kind of boring. That's not a really long have we been using computers to years. I think that's a bit weird didn't have the electronic computers until always electronic. Before that they were The computer was actually a job Here is a cluster of computers during World War had a whole cluster of computers who were mostly adding machines and it was basically - there girls what to do. The basic unit of computational kilgirl - how much computation you can do with We've been using computers since the 1700s or even earlier. The most to build tables. You may have heard of wanted to compute sines and cosines and so tables. When I was still in high school we these tables that were just being phased out. Of We still use tables today. In mathematical databases now but they're still the same thing. that were first discovered through tables. In is called the prime number theorem. It tells you number X and it was discovered by Legendre and it to be true because Gauss and others they was a bit of a computer - to compute tables of A couple centuries later, there's another really eventually proven in 1907 or so. But there's called the Birch and Swinnerton-Dyer conjecture first discovered by looking at lots of tables - A table that lots of mathematicians use now Encyclopedia of Integer Sequences. Maybe you've integer sequences just from memory like if I tell is the Fibonacci sequence. The OEIS is a database Many times when a mathematician is working sequence of numbers associated. Maybe there's compute the dimension or how many or the compute the first five or six or 10 of these the OEIS. If you're lucky this sequence has discovered it from a completely different mathematical problem. That really gives you two problems and many promising productive Tables are one of the earliest ways we've you think of using computers to do mathematics for this is scientific computation. You want to and lots of arithmetic - you source it out to a Maybe the first person to really do scientific the Dutch to figure out what's going to happen and they wanted to know what happened to some fluid equations. He used a whole work this out. He had to invent floating that if you wanted to get a lot of people you should represent lots of numbers of We now use computers to model all kinds of things. partial differential equations or want to do solve algebra problems. In principle, many of be solved in principle by scientific computation. you can turn any geometry problem say involving 10 equations of 20 real variables in some 20 unknowns Unfortunately, once it gets beyond a certain even double exponential. So until recently force these problems with just standard AI assistance maybe it's more promising. Another type of scientific computation that SAT solvers - satisfiability solvers. These Like if you have 10 statements that are true are true or false - and you know that maybe statement is true then the seventh statement of constraints like that, a SAT solver and conclude - can you prove a certain There's a more fancy version solver - satisfiability modulo theories y and z and you assume some laws like maybe is commutative and associative. You plug in you try to just brute force - can you deduce some Those are quite powerful but unfortunately the time complexity to solve them grows a thousand or so propositions it becomes really amount of time. But they can actually solve here's a problem that probably will only not be possible to solve by a human I think Pythagorean triple problem which was unsolved The question is: You take the natural numbers and that no matter how you color the natural numbers, triple - three numbers which form the This was not known to be true. We have no a computer proof. It is now known that numbers - you just need to go up to can color 7,824 into two color classes, one Now there's 2 to the 7824 such classes - you be somewhat clever. But it is possible. Once triple. There was an example of 7,824 where That's provable. It actually I think it was think now it's the second longest years of computation and it generated is 200 terabytes long although it's since This is one way in which we can use That's sort of a fairly obvious way to use to use computers in more creative ways. There are mathematics which I think are really exciting, other and with more classical databases, tables, First of all, we're using machine learning and find out ways in which different types you would not see as a human or Most splashy are the large language models which learning algorithms, which can take natural forth - and they can sometimes generate possible sometimes don't. You'll see more examples There's also another technology which is just which are called formal proof assistants. computer languages you use to write executable assistants are languages that you write to check is actually true and actually gives you the annoying to use until very recently and they're facilitating a lot of interesting math projects proof assistants. They will combine very well in So I want to talk about these more computers to do mathematics. I think The first really computer-assisted proof maybe in every planar map can be colored using only four proof assistants - it wouldn't really be called a a massive computation, like half of which was done The way they proved the Four Color Theorem of countries. You show that if you have a massive was a produced list of about 1,000-2,000 countries had to contain in some sense one of to check. Then they had to check that every time with something simpler and if you could four-color They had to check these properties - I and reducibility - for each of these 10,000 they could do by computer although this was an each graph by hand into this one program and a human computer - one of the daughters spend hours and hours just manually checking The process was not perfect - there were lots table. So it was not by modern standards proof. That only came much later in the '90s 700 or so graphs. But now all the things that well-defined list of properties and you could C or Python or something, and you a couple hundred lines of code in a To actually check that is completely - down to the axioms of mathematics proof assistant language called Coq. That was one of the first proofs and you when the proof first appeared and then when we Another famous example is the Kepler conjecture conjecture - Kepler from the 17th century. It's spheres and you want to cover three-dimensional There's sort of an obvious way to try to Like the way you pack oranges at a grocery the cubic packing which has the same 74% which is the obvious packing and the This turns out to be a surprisingly the hexagonal packing is not too hard to show dimensions do we know the answer - great it yesterday. But three was the only other case Surprisingly difficult to prove. Again there this conjecture. There is a strategy - are infinitely many of these spheres so it's not a priori a finite problem But you can try to reduce it to a finite Toth in the 50s. Every time you have a packing, Voronoi regions. The Voronoi polytope of closer to the center of that sphere than of split up space into all these polytopes and also count their faces and the surface areas and The volumes - like the packing density average volume of these regions. So if you volumes of these polytopes behave on average, then you could get at least maybe some upper You can try to make relations between is very big maybe it forces the nearby ones find some inequalities connecting the maybe you should just collect lots and some linear programming or something right bound of this magic p/18 which is the People tried this. There were many attempts - some even claimed success. But none have The problem was eventually solved first by Thomas same strategy but with lots of technical tweaks. slightly more fancy cells. Instead of taking that he assigned to each of these - it's a volume But again with the aim of trying to between these different scores and to eventually get upper bounds of the density and to It's a very flexible method - actually it's too can try. There are so many ways you can set up &quot;Sam Ferguson realized that every time he his functional and so forth he could But then all the things that they checked function became more and more complicated. decade I think. It became more and more through years from my work. This incessant Every time I presented my work in progress function. Even worse the function was earlier papers and this required going But eventually they did it. In 1998 they announced that they had finally found a score inequalities in 150 variables which Initially they did not plan to make this a more and more complicated it was inevitable The proof was enormous by the standards of 1998. computer programs and data. It actually had a to the top journal Annals of Mathematics panel of 12 referees. At the end they said the proof but they could not certify the They did a very unusual thing actually caveat from the editors saying this. actually. At the time there was a lot more proof qualified as an actual proof. Now I But even after it was published there was doubt was maybe the first major high-profile problem formalize this completely all the way down to So Hales in fact created a language languages to do this. He called it the take 20 years to formalize his proof but he actually finished in a mere 12 So we now have sort of complete confidence in this particular result but it was Moving now to the last few years - we've for how to formalize. It's still Peter Scholze, who is a very prominent young he's famous for many many things but he created It's called condensed mathematics. It deploys the tools from algebra to apply to functional Banach spaces and so forth which in analysis has But this area of mathematics in principle least functional analysis - certain methods. So he set up this whole category groups and condensed vector spaces. I won't His thesis is that all our categories of function incorrect or they're not the natural ones So he set up this theory but there was this he needed to prove. I stated it here but I'm mean or symbols mean. But there was a very theoretic group he needed to compute. have any interesting consequences. This So he wrote a blog post about this result. He the proof of this theorem, going almost crazy over down on paper but no one has dared to look at the &quot;With this theorem the hope that this condensed analysis stands or falls. This theorem is of the is not enough.&quot; He said he was happy to see many the world but they all stopped short of the fun.&quot; So he says &quot;This may be my most important So he was also very incentivized more modern proof assistant language called Lean. Lean is a language that has been developed a crowdsourced effort to develop this massive from the axioms of mathematics which becomes this type of mathematics is very advanced - this lots of intermediate results like the type of courses like calculus or basic theorems These have already been formalized and starting from the axioms, you're level math education. Still a big gap But in order to formalize this they had to add complete - it's still not complete. There's lots sheaf theory, topos theory that But in a mere 18 months they were The proof was basically correct. There were major was discovered. They found some nice steps that were just too hard to formalize and But actually the value of this they greatly added to Lean's math can handle lots of abstract algebra to a But also there were other supporting formalization projects have started For example, one tool that was set what's called a blueprint. Taking a huge 50 it is really painful. You have to But what we've realized is the right workflow what's called a blueprint which sort of breaks steps. Each step you can formalize separately So you try to break up a huge argument into lots of little pieces. You write that first can formalize different parts of So they also as a byproduct of this nice blueprint. This is probably the proof as a human - the blueprint is Another spin-off of this - so there's now also of lines long but now there are efforts to try So another thing that's been developed is proof that's been written in say this language proof written of a topological problem and proof. So all this text here is a proof that It looks like a human proof. It uses the same sort You can click on any location - I can't do it on any location here and it will tell you wherever to prove, what the variables are. If there's it will explain where it came from and you can I think this is great. I think in the this interactive style. You formalize them first and then you can have much more Inspired by this, I myself started a last year I solved a problem in combinatorics here in the audience. It's a problem in what the problem is. There's a subset of Z mod and it obeys a property called small to how big it can be. But it doesn't We proved it. The proof is about 33 pages. We probably still the fastest formalized actual about 20 people using all this blueprint machinery It makes the task of proving things much these nice visualizations. As I that you take your big theorem and you The theorem that we have is we call it PFR - little bubble at the bottom of this graph statements. The proof of PFR has to depend ones depend on previous statements as and they have different colors depending A green bubble is a statement that you've already is one that hasn't yet been formalized but it's are in place, someone needs to actually go statement hasn't been formalized yet, So you get this tree of tasks. The can get all these people to collaborate independently. Every little bubble you don't need to understand the whole proof This was a problem in combinatorics were people from probability, there were they were computer programmers but they were mini puzzle type things. Everyone just sort of do and they did it. In three weeks we did the In mathematics we don't normally collaborate is the most I've normally seen because when you that everyone's math is correct and past a certain like this the Lean compiler automatically checks it will get rejected. So you can collaborate I met a lot of people actually - wrote a lot of letters of recommendation This is an example - like this is one a proof looks like in Lean. It's the language it's human readable It really sort of decouples the task sort of disjoint skills. You can have organize things into little pieces necessarily know all the mathematics but I think this will be a more and more common still is painful to do - like the tools and user-friendlier but you still need I would say it takes maybe 10 times longer to On the other hand if you want to there was a 12 that showed up in this theorem, we stronger theorem. Normally if you do that you have cut and paste 12 to 11 but then you have to check But actually when we formalized this then few days to change the theorem to the 11. then the compiler complained like five very specific part is not working and So in fact for some specific already the formal approach is actually faster. Now there are actually quite a few big proof The biggest is Kevin Buzzard's project - he's just in Lean. He says it will take five years to do claim to do the whole thing in five years but the So that is formal proof assistants. Machine learning - these are using to various questions that you can use in way I was discussing which is to use differential equations which is a very I'll talk about another application of theory is quite a fun area of mathematics. many different fields of mathematics and A knot is just a loop of string or a curve equivalent if there's some way to continuously you're not allowed to cross the string - The basic questions in knot theory If I give you two knots is there The way you approach this question normally invariants. These are various numbers, can attach to a knot and these numbers don't the knot. So if two knots have different There are many many types of knot called the signature which counts - you whether the crossings go over or under and and you can get a certain integer called the There are some famous polynomials called the which are connected to many areas of Then there are these things called geometry. You can take the complement called a hyperbolic space. It comes has a notion of distance and you can compute These are invariants that are real comes with some combinatorial invariants geometric invariants like these hyperbolic with various hyperbolic invariants - there's the homological cusp shape and so forth. one knew of any link between these two. create statistics of knots and they didn't It was only very recently that people this problem. They created databases was already a slightly nontrivial task and found that after training the neural network invariants and like 90% of the time it will So it created this black box and it will somewhere in these geometric invariants but it But that's still useful because once you have this did next is actually very simple analysis - this black box does - it takes about 20 different and which is one output - the signature. So each input. You just say what if I change one Of the 20 inputs that they found, they played a really major role in the output. wasn't the three that they expected for example to be very important and the There were three - something called longitudinal meridional translation - there were these three they identified the ones that were most important, against those three particular inputs and then network they use the human network - to then By staring at these graphs they could actually going on. They made a conjecture actually. But they actually used the neural the way that it failed, they could correct the conjecture which actually did explain right statement they were able to prove explanation of why the signature is so closely This I think is a way in which machine mathematics. It doesn't directly solve these really useful hints as to where the but you still need the human to And then finally we have the large language models news. Neural networks have been around for 20 around for 5 or so years but they've only become You've all probably heard of GPT-4. This is GPT-4 came out there was a paper describing question from the 2022 IMO. It's a slightly IMO you'll probably notice it's not exactly For this particular question actually you give correct solution to this question. It actually an extremely cherry-picked example. I think out of on, they had a success rate of about 1%. So this they had to format the problem in the right way to On the other hand the funny thing about these AI can do very easily sometimes, AI often struggles with. It is a very In the same related paper or presentation, they computation: 7 * 4 + 8 * 8. The model, output based on the input, basically guessed okay maybe I should give an explanation why when they did a step by step they actually not the answer that they started with. So it was 120&quot; and they said &quot;Oh that was So you know they're not solving the problem each step of the output what is the most natural that works, but often it doesn't. It's still People are trying all kinds of things. more reliable software. In fact you will see a model connected where you don't do the computation But another thing you can do is that you correct answers by forcing the model to output if it doesn't compile you send it back Or you can try to teach it directly the to solve IMO problems - you know, try try to actually prove step by step and so forth. So people are trying all kinds of things. It's of say math olympiad problems, let alone math Besides being able to actually solve just as a muse actually. I've also used these problems - I had a combinatorics problem weren't working so I as an experiment I just you suggest to solve this question?&quot; It like 5 I'd already tried or were obviously I'd not tried which was to use generating which once it was suggested I realized it So just as someone to converse with, it is but it is not completely useless. There's another type of AI assistance that's As I said, writing formal proofs is a very tedious language - you have to get the syntax exactly But there are tools - so I use something called a proof and it will try to guess what the next guesses something close to being correct and then So in this case I was trying to prove this the ones that Copilot suggested. It turns out which you can't quite see, actually So you still have to - you can't just accept But if you already know sort of how the These tools are getting better. So right line or two lines long they can fill it in sort of iterate an AI suggesting a proof and then if it compiles wrong you send to sort of prove things that are like 4 or 5 Of course a big proof is like tens of thousands can just instantly get your proof formalized Okay so where are we now? There are people use computers to actually solve math problems from that. For very narrowly focused problems just a very narrow band of problems. But even then But still for the next few years at really useful assistants beyond the sort that we're already familiar with. People I think one direction which I find particularly hopefully AI will become very good at generating of this with the knots where they could already different statistics. So you know there's just the and feed them into an AI and they would just between different mathematical objects. We don't don't have these massive datasets but I think this One thing I'm also excited about - this is a now because proving theorems is such a painful or maybe two or three if you're efficient. But trying to prove one problem or solve one problem, you say &quot;Okay I'm going to tell your AI try to and it will report back &quot;Oh I could solve 35% of this technique? I can solve this percentage do this.&quot; You could start exploring the space of This is something that you just you do over a process of decades with dozens what you can and can't do with various could really start doing mathematics on So the future is going to be really still also be proving theorems the old because we can't we won't be able to guide things ourselves. But we'll be able to do Okay I think I will stop there. So So we are on a tight schedule but I or so questions. So if people would raise Thank you. Can you hear me? Thank you that was formalizing mathematics but one thing that algebraic geometry because he made a mistake I would be interested to know if you have Right. For Voevodsky - yeah he was areas of mathematics including some so abstract and sophisticated that there was no Yeah so he proposed changing the foundation which is more robust. Like if you change a lot of what you prove in There are proof assistant languages that theory. Lean is not actually, by design, of traditional mathematics which I do hope in the future there will be different strengths and weaknesses. One thing to translate a proof in one language to another. be very useful. Once we have that then we can foundation of mathematics we could just hopefully language to another and then everyone will Yeah so I mean there are multiple and we shouldn't just certainly fix Well I - okay. All right so a random process. to the topic of the talk, but I was recently by the professors was basically along the lines of kind of a general agreement that mathematicians that perspective, how do you think about your young age? Did you think - how it influenced Well I was - yeah I had some very good advisers, both as a high school and undergraduate it's a race. I mean you go to university shouldn't go just because you were told I think it's different for different people. You I went to undergraduate when I was 13 but it was lived so I lived with my parents and they drove my classes. If I didn't have that I don't So it really depends. I mean okay I did my mean everybody should do that. Yeah it's - Thank you. Okay so another kind of more general to truly myriad mathematical fields, research topic and problem you want to Okay well my Erdos number is two, that's easy. early on in my career you know I had advisers who comes by serendipity. I mean math is a very So I mean after this I'm going to a math to a lot of people in actually an area connected have some interesting math conversations and I do have some long-term projects that I I'd like to solve. But increasingly I find conversation with other mathematicians I'd be working - be talking so much about AI Yeah I think people should be sort of - you know I mean there will still be people who specialize expert in X, but increasingly I think there'll time and just find interesting new mathematics Okay. I think we have to move is Simon Coyle from XTX who will