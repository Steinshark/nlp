So today we're talking about I assume most of you are in, type and title of this meetup. I'm going to have to do some that, on what PWAs are exactly. And then we'll kind of shoot back to do with each of them, and when I am Leigh. I'm a lead developer here at Hatchd. Aranda and I share an I primarily work on webs, And Aranda, what do you do? Yep, I'm Aranda Morrison. I'm the tech director with Adapptor. I code occasionally, not And just help generally the tech Cool, so what is this elusive Woah, progressive web app. So, what does that mean? A progressive web app is an app that's but that provides a user experience So the TLDR is, it's a website or web So what's the difference between a So there's a couple of main things of approval to sort of graduate So the main one being So what that means is, you get a fancy little browser a website that is PWA compatible. You may have seen that before. The way that that presents of changed over the years. It used to be a very obvious And I feel like that would deter just because it's very in your face. And people like, it's like, websites you, notifications and stuff like that. You, it's quite often the sort don't want to do that right now. But over the years things have can customize that install process. So you can do things like this on an And you get this sort of install the Google Play store, for example. So once you install a PWA, it the same as a native app. As in, you get an icon on your home notification badges and stuff like that. For intents and purposes, it Yeah, but to be fair, like this is still Like, people don't really know, when you toolbar, what does that actually mean? If I click it, it'll do something. Is it going to save a link What it's actually going to do is The website has a local app that That's one of the main So the other thing that is is that they work offline. And the asterisk there is, you still offline, you don't just magically get So what is actually required to browser prompts you to install as a PWA? There's a few things that you need. The first one is a web app manifest. The second one is that it's And the third one is that So the web app manifest is the JSON So this is the very basic example of At least one icon that represents shows up when you install it. A start URL, which is the URL Sometimes you might add a little you can track things and know that And you also have a display mode as well. So there's a couple of typically you'd pick standalone. That's the one that makes So you don't have the And then you register that to it in your HTML document. And that's essentially all you need. And then, yeah, obviously have to So that is just HTTPS. Or local hosts, so when you're be able to register and see a PWA. The next thing is a service worker. So this is sort of a complementary piece. I believe Chrome now doesn't actually registered for the PWA prompt to show up. But it's quite often an So what it tends to offer most of So it acts as a sort of proxy in and your network layer. It'll take any requests for or CSS, HTML, Javascript. And you can basically set up different regex of a path or anything like that. And choose when to serve going to the network to fetch it. And that enables basically 100 What about fallbacks? So if it attempts to connect and can't, Yeah, so I mean that's all rules So yeah, there's different So you can say, prefer the network, fallbacks when things go wrong. And it looks like, a little bit like this. So this is what a service worker typically So typically you'd want to cache So just the very basic files that Which might be an HTML file, Some styles to make it look pretty. And, some JavaScript. And you have a bunch of different This example here is using those resources, cache them. When the service worker is installed, visits the website in question. This install event listener will run. And that will install all able to access that offline. And then, yeah, you just need a that service worker, which is just In terms of comparison of different areas which we're going to talk through. So, development cost and speed. I think PWA has the edge here, just And, in terms of developers who I believe outweigh those who Kotlin and Swift for native. And, according to the 2023 Stack Overflow So we've got 6. 6 percent front end developers versus, versus 9.7%, 4.96% on Swift and Kotlin. The inroad to setting up a PWA is easier have an existing website, you can You can incrementally adopt offline support as you go. And, yeah, in terms of setting things up, Especially if you already know the web. Yeah, I can't really argue with that. If you have a team that is building a a more mobile experience and make use certainly PWA's are a good option there. Another thing is just If obviously you're spending less to cost less money, I would hope so. Unless something's gone horribly wrong. Deployment. PWA probably again has the edge here. It's just a website at the end of the day. There's a myriad of hosting us, as developers, lives easier. We don't have to worry about all There's platforms like Versal and hook up a Git repo, and away you go. You've deployed your website. Updates to your applications, By approvals, I mean So if you're submitting your app to the all about the joys of that process. We can go full cowboy mode with the Or did! It's kind of a double Like, in a way, the App Store take things a bit more slowly. And you need to do your QA properly got it all tested and ready to go and then release to your customers. And a little tidbit as well. Microsoft actually maintain com which lets you actually just And as long as you've got an app showed before, they'll actually spit So you can actually submit your Depends what you mean by native It's probably just a website in a Yeah, it goes on the Yeah, so you have that visibility that Device support. So, I guess, maybe a 50/50 here. It's going to depend on So you're going to have the same website running in a browser. But that also means that you have devices that you can support as well. Again, from the same code base. But you're also subject to the same cross any web development, you'd know there But now, you know, everything's of going away a little bit more. And Apple as well tend to be a little bit they can be a little bit slower to adopt Yeah, so fragmentation is a bit of a But with PWAs you're looking at and then the mobile app devices browsers on the mobile apps as well. So you know, your Samsung and Chrome And maybe one day there'll be different But it's just Safari for now. Even though you're using Offline support. Pretty good with PWAs. You can do most of what you would need to an area with a spotty network connection. But, again, you're limited by And in terms of how much Again, Apple coming to the party In Safari, you have a one gigabyte And once you hit that limit, you can go prompt that comes up and says, &quot;This And you have to sort of approve 200MB Of course if you had like a long tap that button a million times But it's a little bit of a weird UX thing. Which obviously a native I guess on that one at least, you about offline first if you're doing a It's good to think of that from the start. Whereas with a mobile app, you really, And then you're adding online Yeah, that's definitely true, and introduce that later on down the line. So, yeah, good point. Background processors are still a little Apple's ruining our good times. So background sync doesn't currently But it does in Google OS feature access. This is one where native apps We do have a lot of things in as Bluetooth, USB, ambient light But they're all under feature have to go in and turn it on. And no one's actually going to definitely can't rely on features But we do support things like geolocation, because we can't do any background stuff. But we can also access things like This is definitely one where if holds and if it's got anything to any background processing at all. Or some of these more, like Then you probably want to steer Another point on this is that, as they release cool new features. For example, iOS has got you can see things happening. Your app can do home screen And the little, what's it called? The island, live island? Dynamic island. Dynamic island, that's the one. Yeah, not an iOS user, sorry. And you can't really make use So again, if you want to have experience for your users, then yeah. You want to go native. Or a framework that is User experience. From a user's perspective, if they a lot of the time they won't Because aesthetically I saw you squint. Performance wise, that And obviously rendering performance better and there's just nothing Being that one step removed on the web, between that ruins the performance for us. But having said that, And we're not going to, unless you're like lots of compute and GPU, yeah. Like 90 percent of apps But where you do need to do rendering and you want it to look really smooth against issues in the browser context. We've got also here So unless you're doing the whole bundle store, then you don't have to go through use the in app purchase on the store.&quot; Which is kind of a double edged the whole Epic versus Apple thing. Where they're pushing you out of the the 30 percent fee from Apple with their But at the same time, they're making like PWAs on a device, which yeah, Yep. Probably another advantage that footprint, in terms of once you've I did a little bit of a comparison I know is I think an Electron app. So it's still web based But that's a 310 megabyte application kilobytes for the PWA version of it. So obviously that'll grow as caches But that initial install So if you've got, yeah, a low powered that could be definitely advantageous. Push notifications, they work! As of last year, across all the So this is a relatively new addition. If we did this presentation a year of, &quot;Ha ha, they don't work in iOS!&quot; But they do now, so yeah. Haha. Haha. I say haha. Can I say haha anyway? You can. Sure. Discoverability. PWAs, you're mostly going to and how you're going to rank. And obviously there's a lot of, the web is a big place with And there's no real, I guess, It's just, they're on the Versus native, which have a nice Yeah, and that's where people expect app, so it's, that's, yeah, again, discoverability and user experience. It's probably going to be a little while from the web become a, you know, a Yeah. Yep, definitely some education this is some form of. So we thought we'd just real world examples of PWAs. Duolingo. Obviously they have a native But there's no desktop counterpart Unless you try and install the Which I tried and I couldn't log So there's the web version, the same as the native app. I'm not 100 percent sure for these guys, but, yep. I found this a great experience to use. Starbucks. If you like overly sugary coffees, Whatsapp. And funny story here. We discovered that we were using tech that we're advocating for. So I had the native version Aranda had the PWA installed. And he didn't actually know That's right, I pressed that little I didn't realise I'd been using... Well, all that works better now. I can just press this Turns out it's a PWA all along. He's using the native app. You got conned by the install button. Spotify, which is also an Left and right tell the difference. There is none. That's the PWA on the left hand app on the right hand side. And again, that's what an installed your home screen, virtually There's some weird visual issues giveaway for the PWA there. The little iOS bar thing gets bottom navigation, so yeah. So, who wins? It depends, I guess, on As we touched on before, if you're running experience, PWA definitely makes sense. Because you've got all the tools make it something that is actually And the ongoing support for that. There's a lot of tooling and frameworks I didn't touch on that before, maintains called Workbox, which maintaining service workers basically. So that's one. But I guess at the same time, a con whim of browser vendors and operating PWAs and just web in general features. We heard about the thing recently trying to resolve this backlash And they ended up just So in the iOS 17. 4 beta they released an update So if you had one installed or installed link to a website on your home screen. There was a bit of backlash and they it's saying, okay, yeah, alright, So yeah, you very much have to worry which is a little bit concerning. But yeah, they're only going Like, as I mentioned before, was a recent addition. And yeah, gradually Apple are more with, supportive features. So it's good to see. But also you want to make sure you know What your features you want Because you don't want to be spending now we have to build it in native Yep. Or you can just do both, like a lot of That's true, yeah. If you've got deep Just do everything. Yeah, so that's it. Questions? So the cache that the service of the RAM or does the browser Yeah, so it'll save it So it'll go onto, onto the disk in the browser would maintain it anyway. Yep. And what sort of challenges different browser engines? It used to be lots. It's sort of gone away a little really only two major players in or WebKit, and Chromium, which I And a lot of browsers like Edge are just So supporting multiple headache as it was in the past. I heard that Firefox rebuilt Rust language for performance. So did you see any Honestly, I don't use Firefox small market share that it's often effort into building things for. But yeah. I'm interested to check that out for sure. There is a new thing by Apple called Can you shed some light on that, RJ? I think that's more, that's Yeah, so those would strictly be A native mini app has to be like, 10 megabyte payload. And it's installed and run automatically And it's deployed with your app bundle. So you have to build it, opt in to build And deploy it with your app. And then it can open and be So I guess like a quick and actually going to the app store. Android have a similar one called But actually we haven't seen a huge amount And potentially, you know, you with either a website or maybe So if you've got a Flutter app, you can guest experience, which runs and then So yeah, I'm not sure why exactly, but instant apps and app clips in the wild. The way you describe it, looks like a PWA and install and start using. How does it work with security? Because if there is nothing we can have access of a few things have access, and damage whatever? So it's exactly the same as a So the same level of security you have to take is the same as The level of access is not get from a native app anyway. So there's, yeah, a lot of and what you can and can't access. That, yeah, also naturally With the one that you mentioned view it like a hybrid mobile app Hybrid mobile app versus But if I'm not mistaken with Ionic, apps available, how will PWA, those those that are existing right now? Because if I'm not mistaken, those hybrid against native apps and this is a new one. So it's like reinventing the wheel, How would that fare? Yeah, that's a good question. It's... I wouldn't say it's new. I think PWAs as a thing have been It's just the adoption and knowledge I think as to how they compare to native type things, you can still use So you could use React to build a PWA. And quite often you would as well. Because it ties in very nicely app like, website experience. Those frameworks do very well. And then you kind of have, yeah, that and have it show up like a native app to publish it to an app store as well. Which would be, yeah, one of the key ionic or something where you still have It's still built with web you like a native interface layer Like the device sensors and apps are still segregated from. If you're building with Ionic, But you can utilize more of the native PWAs, if you've got a website, features, you just want it to feel Then that would work as a PWA. Whereas if you still want to build you need a bit more of that native something along the lines of Ionic. Or you could go full React and then get native UI as well. Or just go Flutter, so... No, don't do that. Sorry, I love C#. But I think Xamarin's Cool. Round of applause guys, thanks.