Getting the folder structure and the way that application is often a topic that has a lot of it this way, and then people say that you should difficult to come here and to make a video on what there is no definitive correct approach to how So instead, what I want to do is kind of show you multiple ways to organize your React projects, of what it is to have a proper folder structure in Now, I also want to mention that everything that I Project React. And I go way deeper in that this information and really build a proper big and that is totally beginner friendly. If you're on the extended version, which is the updated more tutorials, more code and just more content the course. Once again, it's called Project to be the first link in description. Alright, so As usual, I have a simple project, it's pretty use this as our playground to start working with in React. Now, first, I just want to give credit this video over here comes from this article, structures in five steps in 2024. This is actually React, it's completely free. And if you want to like this and other cool stuff and tutorials about Again, it's totally free. It's called import in the description. So first, let's start really, Let's assume that our entire project is literally here, right? This is usually how a project starts. that are really trying to do only one thing, because you don't have that much code needed to is trying to accomplish. Right? So you could component, it has some basic functionality in that something super simple. And that's it. That's all This is the first important point is that having bad approach, like it's bad code or something like if the project doesn't need anything, you could is totally fine. Even if let's come here to the just make our lives a little bit simpler. Even if over here. So now you have actually a little bit this list array over here. And then you have one that kind of work together and maybe just export these errors to go away or write the list, we're TypeScript. So it's complaining that I don't have like this is valid for a single application that What if this is the entire application? What if list of some data, and maybe makes the fetch to are currently playing in a specific theater. If needs, honestly, you could get away with just nothing wrong with that. No one's going to come a lot of projects that have only one file, they're right? So it's totally fine. There's nothing approach. Now, realistically, most projects that you and I probably are mostly working on are cannot get away with putting everything in one again, no one's stopping you. But really, at that which is to have multiple files for all of these editor, what that would look like is let's come one list like this. And we're just going to do it, list dot ts x like this. And then we're going this list component, we're going to remove this, we're going to do export const. And we're going just make a type here real quick just to get types item. And again, they should have a list of items. to do any just for now to keep TypeScript happy. going to do items like this. Oh, this is the wrong go here, item list props, that was my mistake instead. There we go. And now here, this is going is going to be let's see, we're going to move this type item card props, item, any like this. And as And now all that we need to do is item card. And And we're going to do item list. And we're going come back here to our component. And we're going items. And here we're going to pass our list, there we go. This is now officially the second different files for different components, right. also has the item cart, which we should remove And we're importing those inside of the app And we're just actually passing and using the it is very important to note that still here, we right, ignore everything else outside of the keeping this simple. In terms of the folders that or anything dependent, we have no folders, we component. And we're just working within them, them. And this is also another valid approach you could get away with just having a bunch of entire application, this allows you to have was in one file, it's still not going to allow you But if your project doesn't need to have many of components here and there and a couple different work, this is also valid. Again, there's nothing anything bigger than that, you shouldn't go ahead folders. If the project doesn't need right, you get away with not doing it. And this is again, want to take a quick moment to really think about what we're doing is we're following a method that watching theory and like a traditional lecture, thing, which is great, because that's exactly what doing. So brilliant is a place where you learn in various topics such as math, data analysis, programming, brilliant is a learning platform that principles approach helps you build understanding on there is filled with hands on problem solving is a method that has been proven to be six times videos. Plus, all of the content on brilliant researchers and professionals from places such as Brilliant literally helps you build your critical of memorizing. So while you're building real how to become a better thinker. And they have some called thinking in code, which follows pretty much solid foundations for computer science that are to try everything that brilliant has to offer for constant solutions, scan the QR code on the description. You're also going to get 20% off an to brilliant for sponsoring this video. And now in react. Now the problem with this comes when So now we're going to start progressing into a for instead that this item list over here, or this and we're going to have a hook for that, let's where we're going to want to create a file for we're going to make use, let's see items query exporting, let's just actually export const use that we can just pretend that actually it returns actual component, we're going to make this into a a bracket like this return, then we're going to do going to pass the items and here this needs to here, we're getting the items, and that's what let's say that we come here and we also need to CSS modules. So we're going to come here, we're to do app dot CSS, right one for our app, let's for the actual list for the item list. So we're put the styles over here, you can quickly see that getting a mess in this one big folder. Because But we still have no folders, right. So now at of files like this is the actual point where we some sort of folder structure in the application. typical, you've probably seen this, we might come we're going to put in here all of our actual list, let's put our item list component inside of imports. So now we're actually getting the item also going to move this item list dot CSS inside right. So it makes sense to put it in the same we also have this query over here, which is a folder called hooks like this. And we're going the hooks. So that again, it is properly organized already with this, we have an improvement in our separate folders for everything, everything goes If you ever need to add a different type of file, utils folder. For any sort of utility, we would use. Let's say for example, maybe we also have this is your app router. But again, different right, you would make a separate folder for of that you would put it inside of this folder things into multiple folders helps us be organized when we just had multiple files without any single further as well, you can have subfolders inside right also has the item list CSS over here, because again, they're related. And these files other components that we might have in this we can do item list like this. And we can put the the imports, we can put the CSS like so. And now any amount of components in here. For example, like this. And now it's part of the components can put it inside of that folder, which is great, right, and we can open up this component. And list as well. What we could also do is we could it's only being used inside of this item list, exported. But we could if we wanted to, we could do something like item cart. If for example, we used inside of the item list, we could do that. Or the components, right, we could also do that. And make a new file item cart.tsx, and put the same default item cart like this, right. And now what some reason, it just didn't copy properly. That's item cart. There we go, we have item cart. And there we go. Now we have item cart over here in a and we can just import it directly. And there we're importing it. And now we made a sub inside of the components folder. And things we could do the same thing with the hooks folder of here. And we can do queries like this. And we which is really useful. If for example, let's to have different types of hooks, for example, a hook for mutations, right? And you would have item mutation.ts, like so again, another folder that you have inside of your application is going inside of its own separate sub folder mutations. structure that probably you've seen before, I would dare even to say that the majority of a folder structure that is pretty similar to this, But generally, you have everything grouped by right? All components go inside of the components pages, utils, and so on. Every type of and may optionally be organized into sub folders Now as great as this folder structure is, and there's a reason why the majority of projects are not scale on really large applications with a have a project that has 50 100 200 500 sometimes wouldn't really scale. This usually only happens of different teams working on them. And you have that, you end up having so many components that inside of the components folder, because you have components inside of this folder to find the thing gets messy, because all of those components are to be using hooks, utility files, they're going it's really a mess. And then you have things they share the same folder, but they don't really domain in the project, right, let's say that you authentication, you have a part of the project and so on, you have things that although they they're different, one is for authentication, used the same way. And they're never ever going to the same hooks are the same utilities, yet they putting everything when you're organizing them by you have to change something and you have to folder structure that is going to allow you to be instead of grouping everything by the type of of feature that is related to. And here's how this because we're not going to be working inside all of these folders here. And we're just going SRC folder, I'm not going to put anything inside what I'm going to do is I'm going to create a new like this. And this is going to be a group of And within those sub folders, we're going to have else that we might need that is related to that features is going to be the item, right, so we're to do item like this. And inside of here, we're an item, but we're also going to organize it in want the benefits of folder organization, we just and make it easier for us to have many of these a new folder, and we're going to call this one I'm going to put the item cart over here, it I'm going to put the item list as well, we're to our components. Let me just close this and save components over here, which still has our other for now. But now we have features item and then we of item that are related specifically to the item we can also make a folder inside of item and are related specifically to the items. So notice that we had before, we're just organizing it by inside of the main feature for inside of the main we can come here and we can actually just take all our mutations inside of our hooks folder. We can we can put them inside of our hooks folder this is really annoying when everything pops up Now we have here features item, we have some it's super simple, it's super organized, we that is going to be the use items query that hook that we're going to use inside of the item then if we have other features, for example, other features as well. We can take this other make a components folder like this inside of other here. There we go. Now we have another feature, What happened? It just disappeared. Anyways, you went. They just completely disappeared. You get an empty component. I think it's here, right? file other component.tsx. There we go. Now we have feature and we have the other component. And here for any sort of hooks that are related to this what else? We would do pages. We would do also we have is each folder, right? Each feature inside of acts as a template of other features. If you folder over here, you just copy it and you paste right? Feature two, like this, right? And now pages, and everything is really neatly organized. multiple teams, each work on different features that the item feature team is going to work on the It's kind of their own mini application, right? this is kind of the best way to really scale your in a way that really scales to hundreds of well, what do we do with these component folders what you could do is you could put in here, any sort of shared shared functions that are you could have a UI folder over here, all of that the sex, right, that would maybe go inside feature probably would use a button of some sort general related in the application, you could also is inside of features, if you want to really keep is you could also do something like share it. And you can put API components, hooks, pages, and across multiple features, you could also do that. over here, right, you could kill the hooks folder, the utils folder, and so on, let me just kill all last one. And now all that you have is you have is nested inside of these features. And again, from this. And this is a very valid approach and really what the point of this entire article trust me, that's the content over here, at least of this is that you have different projects, you there's no one organization structure that would apply to any project of any size of any point of the video, if you have a project that is functionality, you wouldn't go and start creating that's a lot of overhead to do when all that your right? And this goes the same if your project has with having things in different files, and not all, because the project doesn't need that. But if all of this, then you can start thinking about neatly. And now you've seen the different ways of you might just jump straight to features right right? You're thinking ahead, you want to future just want to put everything into features, you're with a normal components, file type based approach you could also do that, that would also work. projects out there. That's why making this video correct way to do it. And again, it really depends actually needs. If you enjoyed this video, and make sure to leave this video a big thumbs up. can click here to watch a different video of really going to enjoy. And with that being said, Solutions. Thank you so much for watching, and