We're going to go through the 7 most important simply as possible. These are extremely important to learn whether class, or building projects. We'll be going through the list from easiest of where to begin. We'll go over a simplified explanation for common uses for that data structure. I'll also be putting the time complexity don't know what that is, don't worry; people who want to see. Let's not waste any time and get right into Arrays Typically the data is all of a similar type, also allow for differing data types. An example of a real-life use for an array 5 days, and wanted to store them so your program Arrays are used all the time and for pretty most important data structure to learn first. One of the amazing benefits of using an array as each element in an array is assigned a find it. This form of numbering is often called "zero-based in the array is at an index of 0. This can often confuse new programmers, because you have to use its index, which is 1, not While the advantage of arrays is that it makes is that they have a slightly harder time inserting Now, just a quick note. We won't talk about memory much in this in this video, the memory component is very difference between them. We'll use our temperature array from earlier Arrays are stored in contiguous memory, which next to one another in memory. If a new element is added in the middle of But what would've happened if there was To fit this new element in now, the array's new space where all of the elements fit. While computers are incredibly quick, this Arrays are very good for reading elements, to insertion or deletion. Now we'll take a look at a data structure Linked Lists and a bit slower at inserting or deleting, but fast at inserting or deleting. Linked lists are similar to arrays, in that However, a huge difference is in the way they Each element of a linked list has what we of the next element of the list. As a result, elements in a linked list do You can store the next element in any location, if you want to find it. The advantage of this is that it solves our To add a new element, you find a free spot point to it. To remove an element, you just delete the one ahead of the deleted element. The disadvantage of this is that linked lists stored right beside each other. This means that to find an element, we have If we want the third element, we have to first go to the second, see where it points, and If you think of a huge linked list, you can at reading. So, to recap. Arrays are faster when it comes to reading, and deleting. HashMap for each value, there was an index that numbered Well, hash maps are essentially the same thing, is, which hash maps call a key. The key and it's value are commonly known The other major difference between arrays Hash maps are fast (O(1)) for both inserting But the real benefit to using hash maps is Let's say you wanted to store a list of If we stored these in an array, we would have But for a hash map, if we make the keys countries, capital city. Hash maps go by a few different names. They are sometimes called hash tables, or, For the purposes of this video, you can assume So, if you know how to use dictionaries in You've actually been using hash maps. The way hash maps work underneath the hood scope of this video. I'll be making specific videos for all of maps more in-depth there. For now, just understand that they're unordered, searching. Stacks &amp; Queues to think of a stack of plates or pancakes. The first plate goes on the bottom, the last Stacks are LIFO structures, which stands for in is like the last plate that goes on top When you go to grab a plate, this last plate Stacks have three common operations, which Pushing is when you add a new element to the Popping is when you remove the top-most element And peeking is when you're just taking a stack is. All of these are very fast, which is why stacks If you're wondering when stacks might be For any scenario that has a similar structure out, stacks are likely a good data structure Queues are the opposites of stacks. The simplest way to think of a queue is like The first person in the line will get serviced the line goes at the end. Queues are FIFO structures, which stands for in is the first element to come out. Queues have very similar operations to stacks, Enqueue is like push for a stack, and is when queue. Dequeue is like pop for a stack, and is when Front is like peek for a stack, and is when in the queue. Queues are more frequently used than stacks, Think of YouTube playlists. When you start watching a playlist, you'll and the last video you watch will be the final Trees as you might have guessed by the name, resemble Trees have nodes, which are connected to each The first node in a tree is called the root Nodes have a parent-child direction, where node, which is a child node. Sometimes, the parent nodes are sometimes called leaves. There are tons of tree-based data structures, binary trees, and in particular, binary search A binary tree is a tree where each parent A binary search tree is a type of binary tree, the parent node, and all right children nodes These binary search trees make it very easy values. The classic example is to think of a number a number between 1 and 100, and the other With each guess, they get told whether the guess. The strategy is to always guess the middle the most amount possible each time. This is what a binary search tree does. We can eliminate a parent node and everything until we get to our correct number. This is not only useful for this game though. A more practical example is to think of a Dictionaries have over 100,000 words. If you give a computer a word, and want it slow for it to start at the beginning and correct one (O(n)). Instead, because the dictionary is sorted right to the word in the middle of the dictionary, or after. It continues sorting like this until it reaches There are tons of other tree-structures like another video. Graphs Graphs are basically models for a set of connections. Like trees, graphs are made up of nodes and In fact, trees, and even linked lists to an But graphs can get a lot more complicated. In a graph, there are less restrictions than Nodes can be connected to any amount of neighbours. Graphs can be directed, where nodes point Some graphs have cycles, where two nodes both The edges between nodes can also be weighted, it. As you can see, graphs are very complicated, be one of the hardest data structures to learn. I'm going to make an entirely separate video complexities in a little bit. For now, let's see an example where graphs Imagine you're running errands, and you We can represent this as a graph, where each Using this data structure, we can develop the shortest route between all five places For a real-life example, think of Uber. Every Uber driver and user could be seen as to optimize so that the waiting time for each There are endless applications for graphs, structure to understand. Conclusion &amp; Thank You! Thanks so much for watching! If you enjoyed this content on data structures comment down below and leave a like on the I want to take a quick moment and express supportive so far, and to celebrate hitting I started this channel just over a month ago, 1,000 amazing people who have been willing I never thought I'd be able to hit 100 subscribers so thankful that all of you have been so supportive. I promise I'll do my absolute best to continue as much as I can. Thank you, and 10,000, here we come.