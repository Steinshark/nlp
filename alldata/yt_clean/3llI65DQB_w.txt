I am Katrina and I am here to talk about code Go's secret weapon. My goal for this talk is to leave you guys blocks you can use on your own code generation All the code is on GitHub and you can find I am Katrina and a software engineer with happiness so maybe we are a little less bad A lot of our infrastructure is written in two open source projects we have. These use code generation and are great projects in talking about code generation. If you are interested in code generation production, They are on GitHub too. Code generation, what is it? 10,000-foot high-level talk. You have a template. You have data. You have got logic that will mash the template You execute from the command line this Go The format of a template is a Go text template. The format of the data is a Go interface so the format of the logic is Go code so it should We will focus on output that is actual Go. Before we get started with that let's do a 10,000 feet makes us go down to nuts and bolts. Here is a file. It has everything we talked about. Template, data CL is empty because hello world write, and we have logic we will use to plug I want to point out about the format of the This a regular Go file. You can call it anything you want. Like other Go files this is in package main to run it the same way you normally run code I added the tag Go generate and it will tag The output file is called output.text because That was like what it does but why would you Any time you are copying and pasting a lot. All thereat Boilerplate code -- if you have might want to use code generation especially and don't want to be the person that maintains a couple letters and copy and pasting a bunch I personally think the killer APP is generating but it is useful for other tests. We talk about enumerated constants in the My next example is about auto detecting JSON We have some sort of rest API. I have taken this example from Instagram. We have got a user response. They were super creative and just left their I made a couple modifications to this response. The most significant one is I took out anything and if you want to talk about nesting is gets We want to take this JSON and unmarshall into That looks like this. We don't have any highlight. You guys can see but I can't. We have some kind of user type and want to this user. We need a type that looks something like this into Go. This might be annoying and doing copy and We said can we generate this and it is a conference A caveat, we will make it a little bit simpler We are going to reorder the fields so they these ugly field names where it is sort of Normally you would never do this in Go. You would use camel casing in Go. If you really care a whole lot, you can write to template and I will show you how to do Here is the template. It is a little more complicate so I put it I added a disclaimer that this code was generated Go generate does not give you this automatically. You have to add this yourself. We need to give this template data and particularly it is user. We need to give it the fields that are going This is going to be the map of the JSON names We will take that and spit out things that In order to do that we have functions. Title case capitalize the first letter of unmarshall JSON fields have to be exported. We will have a type of function that will This is going from 1, 2, 3 to an integer or API is using. Here is the code that injects into the template. Here is where we define the template, load of function. If you are a purist, we can go out for beer functions in my template. We are being pragmatic and pass them along We have the data and we have the name which And we have the place where all that data In this case JSON. Finally, we have the place where it all gets I have called this file user.gen.Go. I usually call the outputs something with understand it was generated but it runs the We run Go generate and here is the output. Here is our user struct with the fields we It indicates it maps to the JSON fields and We have some type. In this case it is called code.gen.user and You can use code generation to create Go code This can replace a lot of annoying maintenance That is it. Thanks so much. [APPLAUSE] and being quicker in your code so I think Can we give another hand to our live captioner She is doing a great job back there. [APPLAUSE] We can come back here at 2:55. Feel free to stretch your legs and go outside back at 3:55 for the final stretch. Sorry, I am backwards in time. You guys got it.