Should the technical depth be given as story points? or in a different word Should we estimate the technical work which we need to do in order to improve our design performance of our product? So let's start with understanding what are the advantages of estimations? What are the disadvantages of estimation? And based on that, we may decide to estimate in some cases and not to estimate in some cases. There cannot be a very universal view of doing or not doing until unless you are following a particular framework. So for example, in a Scaled Agile Framework or Enabler type of work or technical exploration, etc., are expected to be estimated. So that framework recommends you estimating that case. But in general, if you are following Scrum, it is something you need to decide you want to do it or not do it. So what is technical debt? You wanted to do something fast. You took some shortcuts. And those shortcuts need to be fixed at some point in time. If these shortcuts keep getting accumulated, then your product will become troublesome to work code, improve and maintain. So there is a some amount of work created, a future work created, and that has to be adjusted. Now, if I am a stakeholder, if I ask you how much work you are creating, what is the amount of work you have that you need to fix in order to improve your technical design to improve your technical design or performance or whatever the technical work? Now, how do we answer that? If I don't have a quantification of it so many times, I may finish a sprint. I finish five user stories and I take lots of shortcuts and I don't quantify those shortcuts. It looks like I have done five user stories and I have done a great work. But if I quantified those shortcuts, sometimes it may look like the 50% work is still pending because the 50% shortcuts need to be removed at some point in time. So I am adding the work. So if as an organization, as a team, we want to have some quantification and estimation of how big our work is left. We should do the estimation of our technical work. Now you can do it in a story points so that the unit remains the same. It helps you in finding out how many iterations sprints it will take to do it, or what amount of capacity of your iteration is expected to go in that particular work. So in general, it is good idea to have an estimation of that so that we know what is left. Now, there could be other school of thought, they may say Let's not get into the estimation of technical debt and other things, rather reserve some percentage of capacity in our sprint to do this kind of work. So there are teams who may see that, okay, 20% we do technical improvements rest, we do features and business related user stories. These 20% we don't estimate, we don't we keep the capacity separate for it for remaining 80%. We do an estimation and we focus on story points velocity for that in general it also ok provided that 20% helps you in taking care of the amount of technical debts you have. Your organization where the technical depths are not many where the technical exploration and technical storage is not big. Probably this approach will work well. We can have some percentage going there and remaining capacity is utilized for doing the work which is as per the business requirements. Now sometimes that issue get little complicated. where people also claim velocity against those technical stories and sometimes it it shows a big expansion off your velocity. So again, it's a good thing to do as well as a risky thing to do because you need to know what is your your movement towards your goal. And if you have a velocity number which takes care of the movement of business as well as technical work, you can make a fair judgment about when we are finishing our work. So there is no problem in estimating or not estimating. The major question would be, and how do you use that information? What advantage we get by doing the estimation, how do we use that information for forecasting our closers? How do we use that information for quantifying the work which is getting created by iteration and then we work and improve on that. So by default, I do see major organizations estimating nowadays the technical work which they are creating, what they are doing in a given sprints.