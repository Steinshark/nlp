Hi Guys. Welcome to this interesting So in this we'll mainly related to SQL. So without wasting any further time, Let's take a look at the So we'll start today's session by understanding the data in which we'll understand what is relational How to normalize your how to create, delete and And also get an understanding about the different types of constraints present in database such as Once you understand the data the next topic would be the So in the data manipulation would basically understand how in existing tables using SQL commands. Apart from that, you will also understand how to delete data from single tables, and also how to fetch and using various kinds of commands. And finally we'll end this topic with the SQL operators such as to get an understanding of how you can play around After you get an understanding about the data manipulation commands. We'll the next get into from multiple tables. So in this part of the session, you'll basically understand the different types of joints, present in SQLs, that is the inner left, right and cross. And after you understand the joints, the next topic would be the inbuilt functions in SQL. So in this topic, we'll basically look into how to use the built in functions and SQL and also understand and having clause. And finally, we'll end the how to create advanced database objects in which we'll mainly focus functions, and triggers. So I hope the agenda So today we have a special guest, Anil, who's gonna take the session forward. So, over to you Anil. Hello guys, this and welcome to SQL Full Course. So let's start with what is RDBMS. So as you can see on the screen, RDBMS basically stands for, relation database management system. So basically in RDBMS or we store the data in which is a two dimensional database. So as I mentioned, it's stored the data in tables and the tables have rows and columns. So some of the properties as you can see in the screens, it's Values are Atomic, Column Values are of the same thing. Columns are undistinguished. Sequence of row, how the data is stored They can store the data in any sequence and all the columns have a unique name. Most of the database which we know as of the like Oracle, MySQL, all are relation database and SQL is the common query language for all database management systems. As we discussed that RDBMS is basically we store data into collection of tables. So then we store the data and collection of tables, it is very important that So we applied the concept of normalization for the As you can see, normalization is a to avoid duplications and redundancy. So we apply normalization to minimize duplicate data, data modification issues because we don't want to when we fetch the If our database is not then we may face issues any records in the database. There are various rules but generally we follow third normal form in order to organize our data efficiently. So we have first NF that second normal form, third normal form and the end we have Boyce But it is enough and it's sufficient if we satisfied up to third normal form. Okay, so what is first normal form? So as for the first normal form, as you can see on the screen that each set of column It means every column should have a single value in it. On the screen as you can we have our students table and this table has three columns, student, age and course. But in the first row as that we have two values CR001 and CR005. CR001 and CR005. Because of the multiple it is violating first normal form. So in order to satisfy first normal form, we have to split the So after I splitting you can see that we have split Adam 15 and the course is CR001. Adam 15 and the course is CR001, and another ways, Adam 15 CR005. So we have split the multiple and now our table is satisfying Let's move to the second normal form, as per the second normal form, there must not be any partial dependency of any column on primary key. So first of all, what is primary key? So primary key is a key which helps us in identifying a unique row in a table. Most of the time, the primary key is a single column, but sometimes more than one column can be combined to create Now as you can see on the screen, our table was not satisfying So we have split into two rows. So in this table we cannot consider student as a primary key because as I mentioned that of a primary key is that no two row can have the same value for that key. Here in the first column strength, we have Adam as two entries of Adam. So a student is not a primary key. So in order to make a primary key, sometimes big continent, or add one more column to our primary key. So in our case we have student So our primary key generally but sometimes aspect of We may add multiple So in this table, student and course together have a primary key. Now, second normal form states to be in satisfy the second normal form, it first satisfy the first normal form. And after that all the columns should depends only on the primary key and they should not partially So as of now, and you can see in this only depend on the student So age is partially because our primary key So that is the reason it is not satisfying second normal form. So in order to make it satisfy we have split the table into two tables. Now the first table we have and age as another column. So age is now dependent on the student as well as in the second table we have student and course. So the course is also So now the columns are not So in order to satisfy our tables should first as we can see that no columns so it is satisfying first normal form. And the second normal form should not partially So in this age is dependent on student as well as schools is So our table is satisfying Let's move to third normal form. third normal forms applies of a table must be Or we can say that there should not be a case that a non-prime by another non-prime attribute . So let's take a example here. So this example will help us understand what the statement means. So we have a student table student id, student name, date of birth, street, city, state and zip. So we have seven columns And in this table their So a third normal forms should be dependent on So if you'll see street, city and state, street, city and state, these three columns are zip code of that area and not on that student. So that is the reason it is not satisfying the third normal form. So in order to make it satisfy the third normal form, we have again split the So one table we have student id, student name, date of birth and zip. And the address table we have So this is how guys we So it is very important when when you decide that, okay these are the tables So you need to first apply So database will be more efficient, it will allow you to or duplicate data from our database. So I hope the first, second and third normal forms are clear. And the important part here guys is that the third normal form, for example, any normal form should satisfy It cannot be the case that my table is satisfying but it will fail the first normal form. So second normal form, it has to be satisfied and the third normal form, it has to satisfy the second normal form. After we know the best practices we'll discuss about the Data Types in SQL. When you store the data in our database, we know that what kind of It can be integer value, it can be strings or characters and we can store the salary, For example, money or the currencies. We can store the data in when some action has is made or when we we can store the binary string. For example, we can store images or we can store pictures in our databases, so the store in the binary form and so on. So basically we would four broad categories What the the character date and time, and binary. So let's discuss about the So we have these six type One is char(n) and and varchar(n), varchar(max) and So these slides are self explanatory and it mentioned that it what is the size of data we Apart from this guys, we have this varchar, nchar. So var basically stand for And this n stands for Unicode character. So if you want to store the data, for example, all non-English data, I want to store some Japanese languages or in some Arabic keywords, then we basically use nchar or nvarchar, basically stores for Unicode characters. Character is a static, for example, if I defined character 20 and I'm trying to store our then in order to match the right side of my data type, will be embedded with the blank spaces. So we decide basically whether we want a variable character or We have numeric data we have eight tiny, small and big. And so there's this tiny small, big, and it all depends upon we want to store in our database. So as for our business requirement, how small or the big data we decide our data type. If you want to store the that we have money. Again money based upon what is the size of a new data we want to We have money in small money, we have decimal in the decimal, as you can see we have Which basically stands So the maximum precision is 38 digits. Again, we have numeric float and real. So these data if you will see, are basically more in of the basic language like cc plus, plus we have all these data types. Data and time is one of the So we have different format for this section, we have date. So as you can see the date between Jan 1, 001 and December 31st, 999. between Jan 1, 001 and December 31st, 999. And its length is and if you want to store then we have datetime. So in the datetime also we One is date and one datetime two. Also depends upon whether in milliseconds, or you want to include the nanosecond part also. We have the small datetime and if you want to store not the date part, then we And in the end we have binary data type. So we have, as we discussed, we have with store a single bit of data. For example, if you want zero and one we have binary We have varbinary, varbinary(max), so we generally use varbinary(max) For example, some images and pictures where we don't know about the site. It can change dynamically so we generally use varbinary. So I hope you are clear So so far we have discussed what RDBMS is, how we design a better by applying the rules of normalization. We discussed three normalization forms, first NF and second NF and three NF and then we discuss the which we can use to store After that we'll discuss about So generally in SQL we write queries. So our queries falls into One is data definition language. One is data manipulation language. We have data control language and we have transaction control language. So data definition language that we are going to and we'll discuss about that how we create the database object, how we modify our database objects. And if not required, how we can drop or delete those database objects. In data manipulation language we do not manipulate the database schema. We basically manipulate in our database objects. So these are the four basic we have select commands, we have insert, update So we modify the data, we tried the data, we update the data and if not So the basic difference between deleting the database objects and data is that when we delete the database is there just we are deleting And then we have data control language. So include command such as grant, mostly concerned with For example, a new member and you want to give he can play around with your database. Then you have to grant some If someone is leaving your In that case you no longer So in that case, you're gonna revoke the permissions with a person having on the database. So we use grant and revoke commands, and this falls on the Transaction control language is basically when we commit or the rollback the data. When we are savings the data and we might be constantly saving the data in multiple tables. And while saving the data, if there is an error in we basically rollback the entire data. So we use rollback or or roll back all the changes So this falls on the So as discussed in this module, we'll be discussing more about the data definition language, where we discuss about the So in order to start with, we have to first create our database and in the database again, then we'll create multiple different database objects like functions, So to start with the very first step is that we need to So in order to understand database, database is nothing but it of the data. When I say organize the data The tables are related to each other based upon the various So these business requirements and the main purpose of databases basically to operate large amount of information's by storing, and managing the data. So I'll show you how to So as I mentioned earlier, that after installation we have in order to access the server, they need to open Microsoft So if you'll search for SSMS that is SQL server management studio. So this is how the I can look Once you open it, the screen will look like this. So on the left hand side and these are the various tool box. So you can go through these So in order to create new database we have to click on new query and it is a straight forward Let me increase the font So we have to just write create database and the name of the database. So by default, as you can see, these are the databases here. These are the custom in Eduraka, empTB. These were the system database. And once we install Microsoft SQL server, this database will be So that command is create then database and the name of the database. So all you have to do is, and the name of the database. For example, I'm creating test one. So to execute this command, either you can select this query, and then can press F5 you can click on execute button here. So if there's no error you will get this message that command completed successfully. And in order to check whether the database has been created successfully or not, we can go ahead and refresh our database. So in order to refresh it, you have to right click the databases and just click refresh here. As you can see that test one You can expand this and in any database you will see these categories will be present. But under tables, these because we have not created So whatever is present as of now is out of box. So creation of database is first step to manage the entire database objects or to start playing with the data. After creation of a database we need to create some tables in it because table is where we store our data. And all other database based on SQL tables. As you can see on the screen, the basic syntax to create Then we have table name, what is the name you want Then we define what the columns and followed by the data type. We've already discussed what present in SQL. So based upon our business requirement, based on our requirement we a column should have. So let me execute this command here. So let's, let's create our table and see how we can create the table. So in order to save time, let me crate one table for you guys. So we can delete this line or we can create a new query window. Let me again increase the font size. So as, as you can see, we have to follow, this And the best part is that It is not that I have to I can provide this small bit font size or it is not case sensitive. So we have provide create it can be any name. So as of now it's giving the test table and these are the columns Employee id, INT primary key. We'll discuss about what are the keys in the very end of this module, we'll discuss more of how we can create a primary key, what is a use of it, what is foreign key. So we create when columns as of now I'm not making it primary key and just defining the data type. So for employee id I'm then I'm defining the last name. So let's make it more readable and defining it as a and first name as another column. And I'm defining the data type as varchar and I'm defining it's not null that it is required to So if we want that certain while we're inserting the data, then we have to make them not null. By default it is null. So we have to explicitly if we want to make those column mandatory. Semi column in the end is not required. It is not mandatory in But if you will write this query in MySQL, then semi-colon the end So I'll execute this command and if everything runs successfully, there is no error while then we'll get this message So in order to see, okay, If I go to, if I'll see that, whether the table has been which we have created. So let me refresh our database and see the table is not here. So it is very important guys that when we create the table, we have to ensure under which database we are creating this table. So this window on the which database we are using So in order to create the which we have created, If we don't want to select this, then we have the write the So this ensure that we under this database test one. Now if I execute this command, and if I refresh my database now I can see the test table So this is how we create the tables, so you can expand this table and can see various columns in it. So we have created three columns. So since I have not if I am not provide whether yes or not. Then by default it will means it is optional to So we have to explicitly write not null if you want to make the column mandatory, like a table can have many columns, So based on business requirements we add the columns in it and then we defined the I hope creation of the table Let's move to the next point. So you can try this example guys, where you can create a So this has employee id one of column and its data type is numeric four. First name, last name, Since it is a date, we have defined the Then we have job id and department number. Okay, so we have created a table. Now there might be a scenario that we might need to modify our table. We need to define or we need to redefine the scheme of table We may have missed any column we have. We may have wrongly defined the data type of any column or we might And we want to drop those columns, so delete those columns from our table. So to define, to redefine of our database object, So we use alter table commands to add, delete and modify columns, or we use alter table commands to add or drop constraint So as of now we'll and the second point about the constraint we'll discuss when we discuss in the coming slides. So as you can see, we can to add a new column in our existing table. We can use alter table to remove or delete a and we can again use alter table command to modify that data type of a column. So let's see how we can So let's see how we can Then we have to follow Let's assume that we So we are going to add a new Age and the, so this is Age and the, so this is the name of the table, add name of the column and then the data type. So we'll define add age and So we'll select this and we'll execute. So it has executed successfully. So let's see whether this in our existing table. So we'll just right click our table and click on refresh here. As we can see we have added Since they have not So it is again an optional, so it is up to us whether we while inserting the data Again guys, we can use from our table. Syntax is again same. We have to write alter keyword first, followed by the table keyword and the name of the table from which we you want Then you have to use the keywords drop again followed by keyword column and the name of the column. So guys, this is the syntax. So we have to replace the table name. In our case we have the table drop column and the name of column. So in order to remove the same column, which you've added just now, so I'm deleting the column again. So you have to follow alter table, name of the table. The column which needs to be dropped. You know it's an important part is that if you have multiple then please don't click on execute, because if you click it will execute all the queries So either you will write or in order to execute the required query, you have to select that. And then you can either click F5 or you have to click execute. It's mentioned that command So now if I refresh my table again, the column is normal. We have successfully deleted So this is one use of our alter commands that we can add columns in it. And again we can delete Other than that we can to modify the data type So this is the commands for that. I'll go to management studio, paste it I'll go to management studio, paste it and they have to replace the So we'll have to define the table name. So we have that test table here, alter column, name of the column. So let's assume we need of employee id from INT to character. So I'll define it as mentioned of which we want to change the data type and now we'll define what So I'm defining it as character 10. If I'll go ahead and refresh this, I can see the data type of employer id has been changed from INT to character 10. And modifying the data type, we can use this alter tables command to modify the constraint to Even we can use it to Sometime we don't want to We just want to disable. And then as and when So we'll discuss this when the various constraints These are the various examples so you can practice these examples. So here we are adding a new column salary in the employee table and the data type is numeric 10, two. In a second statement we are called job id from employer table. And in the third statement we of first name column and we Good part here is that we do need to provide the old data type. All we have to do is that we Now we have drop table statements. So in the drop table statement drop a table, we need to from the database. As of now in the previous from a table. But now if we want to from our database, in that case we use the So syntax is straight forward, we have to write the drop keyword followed by the table keyboard which you want to drop from our database. So let's assume you which we have created just now. In that case, we simply drop table and the name of table. drop table and the name of table. Guys it is very important or deleting a table because that data, it will also get deleted. So we have to be very cautious while deleting the database objects. Select this and click on execute. Command has completed successfully. And if I'll try to go and I won't see the test table there because we have just now deleted it by executing drop table command. So so far we have discussed to create a new database. When we create a new database, it is of no use because our objects in it. The database will by default have all the out of box objects in it. So we have to first create our tables so that we can store our data anytime and can create various other objects. So we have a created tables, we have created database and we saw that in order to modify any schema of any existing tables, then we have to use alter commands. We have to use alter keywords. So we have modify the data type. We have added a new column, we have deleted a column. We have deleted an entire Now we'll discuss about the constraints. So constraints basically which we apply on the table updated and deleted from our tables. So it even prevents the if there are dependency from other tables. So for example, as we is relationship database. So various tables have So we can not delete a table if it has a dependency on another table. We'll see that what kind of in these slides. So define the constraint So we can define whether the constraint is only for the one particular column or the constraint is for the entire table. So good part here is that it is not that we have to always apply the constraint while creation of the tables. So let's assume that and then you realize that you then no problem. Even after creation of a table, we can go ahead and we can add constraint in So we will see now how we can add those, how we can add a constant or how we can concern after So before that lets discuss what are the various common constraints which apply on tables or columns. So not null as we already discussed that specified that a column If you won't provide not null, then by default the And it is up to us whether for that column while We have unique keyword, specify that collar must So if I define the column as a unique, it means no two row can have We have primary key, or a set of column that It does not allow null values. So guys this is the difference, and as you can see we, when we say unique constraint both the constraint to uniquely identify the values. Then what is the difference and primary key? So one basic differences even allows us to insert the null value. The point is that there should be only one single null value, because the moment you'll in another row, then it violates because no two row can have But yes, for a single row but it's just not the Primary key, if you as a primary key the the column cannot have null values in it. Second main differences is that we can have only one whereas a table can help or multiple unique columns in it. Okay, so let's discuss and how we create it. So as we discussed in that generally a single columns but it is not that only based on your business requirement, we can add more columns in a primary key. So a primary can key can have It can be two, it can be three. So those primary key which they are called as a candidate key. Let's see how we can Okay, so far we have discussed about like how we can drop the and let's discuss about So constraints enforce rules on the table, whenever rows are inserted, updated and deleted from the table. So we can apply the or at the particular column level. Constraint also prevents if there are dependencies So as we discussed in RDBMS, So as we discussed in RDBMS, that RDBMS is a collection is a relational database. So if their dependency between tables in terms of primary key, foreign key, if you try to delete a table, then if you give an error that and there's a dependency on other tables. So constraint prevails, the good part of our constraint is that they can be applied and even we missed the of the table, then we can add the constraint even after the creation of the tables. Like we using alter commands. So before we see how we lets discuss what are the column one and not constraint. You already discuss about this constraint when we created our table. So not null specify that a So if you won't provide this consider it as a null and that So in order to make column mandatory, we have to explicitly when providing the data type. So we have to specify the not So let me show you. So in the last name we where I get 50 and after It means that the value in and we cannot provide a null value while inserting data in test table. Where as for employer id, since we have not employee id will be null and we may or may not provide the data while inserting in the test table. Then we have unique constraints. Unique constraints specify that column must have unique values. So if I'll specify the column as a unique, no two rows can have the and we have primary key. Primary key, specify a that uniquely identifies a row and it does not allow an values. So as you will see, unique and primary, both of these constant define, that column should be Then what is the basic and primary keys? Difference is that unique whereas primary key, does The second difference is that there can be only one but there can be many uniquely in a table. So this is the second difference, second main difference between this. Again guys, primary key, generally we have single but based on business requirements to that primary key. It may be two columns, So our primary key having is called as candidate key. So before we'll discuss and other constraints, we'll first see what his primary I will create the primary and how we can add the primary key after we have done with So let me move to management studio and to save time I have so we'll create an employee table. So I'll open a new query here. So guys, if I want to all I have to do is that I primary key after my column. So if I'll execute this command, let me increase the font, once I'll execute this and I can see the employee And if I'll go and see on my column employee id. And you can see there's a So you can check which column and you can see the key sign, so this is for primary key. So just by expanding the columns we'll come to know okay, which column is basically my primary key. So you can check the keyword and you can check this So to create a column as a primary key, all you have to do is write the keyword, primary space key, right after that data type of your column. So this is one way of creating the key. Some alternate ways also, so this is another way to create the primary key. So I'll just changed the name of the table since we already created emp table, and if I'll try to it will give me an error the table already exist in the database. So one database cannot have So let me show you, if I'll try to create it will give me an error that there is already an object So it means at database with the same name. So you have to be careful. So let's create an So in the previous example, So in the previous example, primary key after employee id. But here I am not adding that query, and I'm defining the constraint. Constraint and I have to write Here, I'm not provided the name of my primary key constraint. So SQL itself will provide As you can see, we have not and followed by a unique id. But in our case, if we using this alternate approach, then we have to provide name of our constraint and And we have to explicitly we'll define okay for which column we are considering for primary key. So let's create a primary key So I'll go ahead and refresh the table. So here I'll see columns, again employer id is a primary key. If I'll expand the keys here. see the name is exactly the same, which we have provided the emp_pk. Yeah, so both this approach is good. You can pick anywhere on the approach to create the primary key. But there's a slight disadvantage of using the alternate approach. If I want to include multiple as we discuss that a primary key may have more than one column in it, then we cannot go with this if you want to create only So if you want to then we need to consider this alternate approach for primary key. Let me show you one example. Let's consider this example guys. In this case we are considering Last name and first name, so I cannot go with the first approach. I have to fall in the second approach where I have explicitly So I'll go ahead and the table again and let me refresh. As you can see, we have successfully and since we have considered for primary key, I can see the key icon in l_name and f_name, let me expand this, As we mentioned, primary so by default this columns and if you'll see the key's name, this is the same name which we provided while creating the constraint. So this is how we create the primary key while creating the table. But it is not that we once the label has been created. So let's see, one example primary key once the Okay, so this is the syntax for that. Before that, let me go So what I'm going to do, I'm creating an employee four table and I'm not providing this keyword here I'm just providing not null. So I have created a table, so I've created successfully Let me go ahead and So we have employ four tables, but there's no primary key here. And now I want to make so for that we need to follow this syntax. We have to alter the table. Again, alter table not only to delete a column from the table, or to modify the data type of a column, but we can also use alter keywords to add a constant or to from the table. So I'm using alter In our case we have So I've given the name employee four, I'll provide name of our employee primary key, and then followed by the keyword. And then I'll define which column I need to consider for my primary key. So we are considering employer_id. So I've given employer_id here. And if I'll run this particular SQL query, command completed successfully. And now if I'll refresh employee four, I can see the key has been created and if I'll go and see the columns its taking time, yeah, I can see the employee ids now the primary key. So you've seen both examples where we can create the primary key while creating the table or we can alter the existing table and add the primary key even after the table has been created. I hope this was clear guys. Important part and most please do not forget that, we can have more than one and those primary key sometimes are often called as candidate key. Let's continue and about the foreign key. So these two tables can be related and the two tables in the by means of primary key and foreign key. So first let's define what foreign key is. So foreign key helps us the referential integrity A foreign key means must also appears in the another table. So when we joined these two tables, that reference table is While the table in which is called the child table. So the foreign key in the child table. will generally reference a This is how we create primary key or this is how we get by means of primary key and foreign key. So let's first see how we and then we'll discuss So if I create a foreign let's revisit the point number two. The point number two says the deletion of a table if there are dependency So if two tables are related and foreign key and if you tried then it won't allow us to because the parent table is So that is what is the meaning If there are relationship between tables, it prevents the deletion of a table. So let's see the syntax Again guys like how we edit primary key. We can create the primary or we can modify the table, and then using alter table commands or using alter keywords we Same way we can create the foreign key while creating the table or we can go ahead, use the alter commands and then add a foreign key. So for this I'll consider two tables guys. As you can see on my screen, I am considering, let Yup, so I'm considering two tables here. First is the product table and in product table and I'm creating one And orders, order_id is my primary key, but I'm creating a foreign key. So the product id of my orders tables will be related or will be By means of a foreign key. So let's see how we'll add, let me copy these two tables and we'll open a new window Increase the font, paste it here. So first of all, I'm That is a product. So I'll select it and execute it. So command completed successfully. If I'll go ahead just to verification I'll just refresh this and I see okay, it has been created successfully and all the columns are there, order id is a primary key. Now what I'm doing is that I'm creating a child table called we'll be referencing which is the primary So this is the primary key of orders table and this product id. This second column will be a foreign key and this will be connected off my product table. So in order to do that we explicit keyword. Then we have to provide It can be any name, you have to decide, all we have to do is that this constraint does Okay, it has to be unique value. Then we have to provide the foreign key. Okay, which column we want So out of these three columns: order_id, prod_id, quantity. We are considering So I provided the prod_id and then we have to tell okay, which table we are referencing, there can be 100s of So if I want to create a foreign key, I need to define the the table which we are referencing. So in our case we are So I've selected product here which columns we want to reference. So we are the first finalize then we have to finalize the So don't get confused of the column in the child as I'll execute this command, So if I'll go ahead and I can see product with id and if I'll expand orders, so guys, can you see the is basically primary key. And this, this grey And you can see this keyword So this is how we create our foreign key. So this is how we create And let me show you the syntax and how we can create the foreign key once the table has been created. Yep, so I will be creating it. So let's assume I have and have tables one product one. So as far as create these two tables, the tables has been created successfully. Now I want to add a foreign key, once the table has been created. So I have to define alter table commands, and I defined which So I want to modify the child table that is the orders one. I'll define the constraint here, I'll define the foreign key again, which column I need to consider. So we are considering So I provide that in the parenthesis. We are referencing the product one, since I've renamed the table. So I have just renaming and the column name is same here. So we have product_id. So if I execute this command this will go ahead and So I'll refresh the I can see there's a and these are the two columns. Order id and product id and which we have given. So this is how can we and we'll discuss more about when we insert the data. Quite an important part here guys is, that when we create a for example the data of a parent table is referenced in our child table and if you want to delete the it will give us an error that the data is already referenced in the child table. Sometimes there are business scenario when you want to go from the parent table, which is referenced in your child table. But you cannot do that because but it will define our foreign key in such a way that there that if I'll delete the it will also delete the Then while creating the key, we need to define this This is an important one guys. So by default your foreign key is having a relation of restrict delete. It means if you'll try to delete the data from the parent table, which is referenced in child That data is referenced, you In order to fix this issues, there might be business scenario when you want to delete the data from parent as well as child. Then while creating the foreign key, we have to provide this So this is all about foreign key guys. So we have learned various constraints. We discuss about the not null, that not null is used if you want to make our column mandatory that it is mandatory for while inserting records. We discuss about the unique key. For the unique key, all you have to do is that the unique key word in So unique keyword, just We discuss about the primary key and discuss about the and primary key. Unique key may allow null keywords, but it only allow for one single row because the moment we'll try it violates the constraint of uniqueness because uniqueness can have the same value for the column. But primary key won't allow null values. Second thing is that our table can have more than one unique key, but they will be only one and Then we'll discuss about foreign key, and foreign key we can between two tables by means of that tables which you're is called as a parent table and the table in which is called as my child table. I hope your understanding and check again specify a condition that and check again specify a condition that must be satisfied by all row in a table. So again these are the various examples. So if you'll see in the first example they've created an employee table and while creating the table we are providing the keyword primary key. So we are creating the primary key, while creating the table. But in the second example, well we are adding the We've already seen through the example of the key in the syntax. So you have to write alter table. name of the table in which we We have to provide the So we have that in add constraint. Name of the constraint is mandatory. If we are adding the what kind of constraint we are adding. So this keyword, for example here, if I'll add foreign key then it will learned a If I'll add a unique key then it will add unique key constraint. So as of now we are creating then I have to explicitly I am adding to existing table. And in the last, as you can see it is, not only we can create a but we can remove the constraint As you can see that syntax you have to write the keyword alter table, and then we have the name of the table, followed by the keywords, drop constraint and then which constraint So guys it is very important that when you are creating you should give a meaningful name to it so that it will be easy what is the name of the constraint. So if you want to drop that constraint, it comes handy because we of the constraint which So I hope we are clear various constants we have primary key, foreign key and check. We have seen that we can while creating the tables or we can add to the existing tables and not only we can add, but from the existing tables. The last topic for this module is view. As you can see, a view is a of view takes the output of a query and treat it as a table. So view basically it takes out it takes the output of a query, and treat it as a table, It act as a virtual table. So we can create a view or we can create a view So I'll show you how we create the views from multiple tables in module three then we discuss about the joints. So before creating used we first to understand what join is and how we can join more than two tables. So as of now, I will show a view using a single table. The syntax is straightforward. We have to just write create view, name of the view which you want to create. Just focus on the keyword guys. We have to write as keyword and select and then start from which table you want to include, okay. So let me show you one example. If write create view, guys as I mentioned that but sometimes as an naming for our reserve keywords that we know that these are the reserve keyboards. So you can follow the same Create view, followed So as of now, I'm creating a test view and then as select, and then as select, star from and the name of the table. For example, let's say I'm creating a view from employee table. Yeah, it's completed successfully. And in order to see the view, I have to first go and And guys, there's a separate We have separate categories for tables. We have separate categories and under programmability we which we are going to discuss and triggers in the last module. So we have a separate categories for most common database objects. So in order to see the view we'll see, okay, see of you And if I'll expand this guys, I'll see that this view has three columns, employee id, last name and first name. Because we have created a So I'm employee table has three columns, employee id, l name, f name. If we do not want all in that case guys we have the name of the columns. For example, I just want I don't want first name So if I'll create a view now, it is basically having employee id and the l name from employee. So if I'll execute this, we'll go ahead and create another view, but this view will now be which you provided Let me see, it has only two colors. So this up too is how many columns we want to define inner view. A table can have like 100 of columns, but if you want to have few columns in our view we can do that. So view is a virtual table. We create view, for example, we need to write a query quite often, you're using that query quite often. So we can, instead of we can create a view and then can view can and we can query the view, the way query our SQL table. So DML commands basically of database objects. And DML commands basically helps us to manipulate the data So the important DML commands are, or the most common DML commands are: insert, update, delete and select. Lets first discuss about So insert command is used to insert data or record in the database table. When we create a table, There's no data in it. It has only the scheme of the tables. What are the columns we have defined and the constraint of the tables. So very first thing we have to do is that we have to insert So they are two basics syntax which we use to insert The first one is insert in which we want to insert record followed by the column names and we assume that these field names or column names. So sometimes we refer the So after table name we'll in the table. Then we define the can keyword values and the values of the Important part here is that the order in which we'll define the column here, the value should be in the same order or else we'll get an error in the table. So let me show you one example. I'm increasing the font Let's assume we have a table So we are using employee DB database here. Good practice to use it we are using for our queries. I'm using emp database, so I'm using it the false then I'm writing insert department number, department So these are the values So this is the syntax, insert followed by the column names. Then we'll use the keyword values and followed by the values of the column which we are going to insert. So let me execute this command. As you can see, one row affect it means, we have inserted the changes. So in order to see whether you need to fetch the data. To fetch the data We but we will discuss in the coming slides. You can right click the table and you can see select top 1,000 rows. As you can see here, we have with the department id. Department number 50 and This is what we've inserted into. So if I will change the order, lets assume I've changed So I've changed the order of the values. The order is not the same as And if I execute the query, we'll get an error because So department number is basically numeric and department name is character type. So what we are going to do, since we have changed so we are trying to insert string or character data into numeric. That is why we are getting this error. So the important thing is the order of the columns while inserting that record. So this is the first syntax the name of the columns. Second syntax is, if you in all the columns, let me show you on the slide, so you can see insert into departments which we have discussed. So if you want to insert then no need to specify the column names, but order of the column with the column names, So they are two difference in texts. One we need to define the columns or we can skip the column names, we can directly mention and the values here. So if I'll go here I can say and then I can directly right and say I want to enter, the department IT in the location, Mumbai. Again the insert is successful. The one important thing here guys, have you noticed that the record, numeric records. We asked simply writing it, but when we are inserting then we have to enclose Since IT and Mumbai, these which I'm going to The columns are location, department name and department number. Department number is numeric. So I'm not enclosing this whereas department name and location is variable and character. So I need to enclose the If I'll tried to insert the I will get an error, let me try to insert So please take care of this. For string data or character data, we need to enclose this in single stream. And other important insert command is insert as select statement. So far we are inserting the data in table, but here using insert as select statement, we'll insert the data in the table but the data will come from another table. So using this commands, records from one table will As you can see the syntax, we can insert into table name, What are the columns names, Then we need to select the So we are defining, select where condition and So let me show you the examples here. For example, I'm inserting the values in department one table, I'm defining what are the columns which I want to insert into. So these are the columns. So if we have department number, we have the department name, and then we have location. And then if I want to so I can define the star here, If I'll execute this query, I can see they were four records If you'll see in the department, if I'll execute this query, select top 1,000 queries, I can see there are four records. That is the reason when I got a message, four rows affected. So what we have done in this query is, I have inserted all the into department one table. If I don't want to insert all the records, then I have to specify If you see if for example, let's assume this is my table and I want to only insert those records whose having department In that case, I have to is greater than 20. If I'll execute this query now, see only two records are affected. Why? Because we have only two records which is satisfying the greater than 20. So if I'll go and see I can see all records has been inserted. In the last, we have inserted 30 and 40 because it is satisfying the condition that department number is greater than 20. So if we want to insert all in another table, then we have or the where clause. If you want to insert a then we have to filter those Another important thing here is, it's not that we have to always insert the values of all the columns. I can skip or I can selectively insert the values for column. For example, I don't want to I can skip it. But here also instead of a star, I need to define which are So I have for defined department number and then department name. Again the important part here to notice is we have to consider the Since we are inserting department number and department name, from the second table also in the same order. If I execute this query, it will execute it successfully. All the full records are inserted but if I changed the order, and I felt executed the same error, the data types mismatch. So be careful whichever whether you want to insert one or you are inserting the order of the column is very important. Another important part here is that when we are inserting we have to ensure that we'll which are not null. If you remember in the previous module we discuss about the not null constraint. Not null constraint defines that value in the column should be mandatory. So when I'm inserting a record in a row, I have to provide the which are mandatory. Let's take this example. In the department one table, we have department number as as not null and location So in this example I have not provided loc but still I'm able to insert the record. But if I'll skip the department name and I'll consider loc for insertion, and even though I'll maintain but I will get an error while Cannot insert the value null into the column department name. So department name is not null column, when we are inserting the records we have not specified So if you're not specify will be inserted in that. And since the column has it won't allow us to insert the record. So we have discussed These are the very because without inserting we cannot update those. We cannot delete them, So insert statement is as it helps us to populate with some data. Database is not static. It's not that we insert the No, data needs to be modified as and when there is a So used update statement Update statements modify the Using these statements of a single column or multiple columns, in a single statement. We have the choice, whether we want to update or whether we want to update the values of the multiple columns in a single SQL query. We don't have to write multiple queries for each and every column. When the update the it is very important that we that which records we want to update. If you fail to provide the condition, then all the records in So whenever we are updating the records, it is very important for As you can see in the all the rows will get updated. So let's see one example, let me open another table. So I have department two and I can see they are four records in it and I want to update the department name of the department number 30. As of now it is IT and I wants So we have to follow the syntax update. Let me copy it so we can save some time. So we have to set the department name and we want to set the So I had to define the new value, which we are going to update, and we have to update the for the department number 30. So I need to mention So let me execute this query. As you can see, one row affected. It means the update has been So let me again see the records. So we have updated department, So I have updated the wrong table. So let me execute it again. Again, one row affected select top 1,000 rows. I can see that the department I was talking about the where clause. That where clause is very important while you make any update statements. Let's assume we forget to include, so this is how guys, if you you can two hyphen. So the green part here in the Or you can write forward slash star, and then star for the backward slash. This is how you can add We'll see the use of this comments when we'll discuss about when you have to write some comments so that other developers can understand what you are writing. So to add comments in SQL queries, either we have to follow this syntax or we have to write two hyphen. So if I'll skip the where Let's see what happens. Can you see four rows effected. They were four rows in And while updating, when all the records get updated. So can you see, the department has been updated to marketing. So it is very important we have to specify the where clause or else all the records will get updated with the same value which we are updating. So in this example, I have updated the value that is department name. But in single SQL query we can update values of multiple columns. Let's take the example. So in the department two, I am just updating the values of department name into marketing and I'm updating the location to Chennai. And I'm updating it for only So in this single statement, I'm trying to update where it has been executed successfully and if you'll go and see the record now, 30 has been up updated to marketing. So maybe to remove the we can update it with some of the value. Let's say it's a HR and As you can see, since in the where clause I have mentioned department number 30. So I have updated the in a single update statement. Whether we insert the record in the table or whether we update the The data type plays a important row. We have to always update the data as per the data type of a column. If I'll try to insert, let's assume that I'm updating so let me write one more query. Let me first increase the font, let's assume I'm updating and instead of a number I'm trying to update So I'm trying to update with value HR. If I'll execute this, That error converting data because department number, it has a data type numeric and I'm trying to insert in the numeric data type. So irrespective of whether we or insert statement, we have to always take care of our fields or columns. Now we'll show some lights So delete commands helps us to delete row or records from the database table. Similar to update statement, delete statement can be executed with or without where condition. Again, point here to be noted is that, if you'll execute the delete commands without where condition, than all the records or rows So where clause is very important. Whether we are working or delete statement. So if we purposefully from our table, then of course we won't And if you want to specify but multiple rows. But if you want to not then of course we need to Let me show you few example, let me open a new query. So let me first you what and we'll try to delete those. So I'm, we'll be deleting the record with department number 40. So one rows affected means the query has executed successfully. So if I'll go ahead I can see only three records, because the desire has been Now if I will skip the where clause, so I'm commenting the where clause by adding two hyphens here, as discussed we can add the comments by using either hyphens or using forward slash star and then star and then If I execute this query now, can you see in the recent, So after deleting the department with the department number 40, we had only three rows and all three of those has been deleted. So if I query the table again, it's empty. Now there are no more so that is a reason it is very important to include where clause in the delete. When we add the condition it can be like single conditions We'll discuss that how we and how we can use the or conditions, or and conditions in the where clause. So far we have discussed for DML data manipulation, insert, update and delete. Now we'll be discussing So far we have discussed that how we can update the existing data or we can remove that unwanted But how we are going to from our database and is very important. In this module we will be focusing only on retrieval from a single table. In the next module we retrieval from multiple Where condition is optional so as we discussed earlier, where condition is always optional, whether it is updated statement, delete statement or select statement. So we have to be very careful It's up to us that whether to include the where clause or not. When we use where conditions which helps us for the better So to retrieve the data, As you can see the field two, field n, and from table name, which column we want to and followed by a where Let's see one example and then we'll move to the next slide. Let's assume I want to select the records from department tables or employee table. Let me like the query here, let me delete the previous query. So select statement helps If we want to include all then we have to use this So this is the basics Asterisk helps us in So I'm writing select star As you can see all the are their in my result sets. Lets retrieve some other table. Let's retrieve department table. Again, I want to retrieve all the columns, so I will write select since they are totally three I can see all the three columns are here. And there are only four records, so all the four records are displayed. Why four records are displayed because we have not included We are telling SQL server that we want to fetch So if we'll skip the where clause and we'll add an asterisk in as select, it means we want to fetch all the columns and all the rows in our result sets. One important thing that for example, I'm creating two different so it is not that at I can fetch only values from single table. If I click on execute without selecting any I can see the results that So though where condition is optional, but it is very important in SQL queries to set right conditions so that we'll get that precise result or else you'll get all the In real world scenarios, we have millions of Generally 1,000 of rows. So if you forget to add think about the number and it's very difficult So it's very important to whether they use update, in DML commands. As of now, since we have but even without using where clause, we can filter the number of records which we want to include So we have a keyword, a reserve Let me show you one example of that. So though I'm including all the columns by using asterisk sign in this query. But I'm explicitly that I want only want top in my result sets. So if I'll execute this query, I will get only three records. So we can define, we In this example I've shown only top three. We can include top five, I can confine or I can but again it will be only from So we cannot replace the where clause or the where conditions by top five, but top five helps us to of our data in a result sets. So far we have discussed that if you want to include all the But in the practical scenario our table may contains 100s of columns. But we might not be of fetching values for all the columns. We might be interested in few columns, then yes, we can include selected columns in our select statement Let's do an example. So as of now, as you can see, we have nine columns But I want to see only the first name and last name of the employee. So in instead of writing star or asterisk, I can mention select, first name, followed by comma, first name, followed by comma, So I will get the results And again, if we want I can use top, even with So this can show me only top five records in the result sets. So when we are retrieving the results. We, if you want to then we'll use asterisk. If you want to include selected columns, then we have to specify and all the column should be separated with each other by comma. And the order in which we in select statement, in the same order, we'll get the columns in the result set. Since in my results that as the first column because in the same order in my select statement. In select statement, we can use Alias name for a field or a column. Please don't get confused Field is used for the column Why we use Alias, let me show you. Let's take the example As you can see, we have But maybe it is not what loc stands for, so I can change loc to location. So for that we need to use alias in SQL. So how do you use that? Let me show you. You have to write select We have to use as keyword and we have defined the from department. If you'll see I have for the loc column. So to increase the readability Sometimes, when use of so when we'll discuss about I'll revisit this particular topic and I'll explain to you, sometimes the column name, so we can use alias for column As of now I'm showing you but we can use alias for tables also. It is not that we have to use alias only for a single column. We can use it for as many as columns in our select statement. Even we can use for all the columns which are there in our select statement. So to sum up, alias helps it made result sets more readable for the end user or for developers. Let's move to the next A column can have the same So as we discussed in a primary key or a unique constraint. These helps us in for each row for a single column, but other than unique and primary key, we can have multiple in different rows. Sometimes when we are retrieving, we are more interested In that case we'll use distinct keyword to filter our result in such a way that it will only for a particular column. So let's understand Let's take the example As you can see, I have for locations, and I want to my department is. And I want only the unique values, I don't want that repeated in my result sets. So far that, what we can unique keyword white fetching So we use other by to show the results or to filter the records. So far we have discussed about the unique or distinct keywords in Now we'll see how we can sort the data. So for sorting the use order by, so order by is used to display the specified or descending order. By default, the order is ascending order. If we won't provide any specific keyword, the results will always So order by is used but it is not a mandatory order by only with the where clause. So let's see one example, We have select star from department, let me increase the font, select star from department so we have department, since I have not provided so by default it will be ascending, or even I can provide ASC. ASC stands for ascending. So if I'll execute it now, I can see the results, same result. But if I change the keyword descending stands, DESC So if I'll execute it now, I can see department in the reverse order. The results that has been reversed. So this is how we can sort So in the previous slides the top one or top five, top 10, so we can club top keywords to fetch the bottom records. We can filter or we can fetch the bottom 10 records because there is no We only have the keywords as a top. So if I want to show let's see how we can to fetch the desired results. So first of all I'll show you that results without using order by, so I'm just showing you top two results from department column. And in the next query, I will write select top two, star from department and I write If I'll execute both the queries. You will see that in the first results. In the first since we in the descending order, I'm but in the next result sets along with the top two, we are getting the bottom two records. So this is how we can, in our select queries to So we have discussed the sorting, that how we can start the data. As you can see in this example in the order buyer by, so it is not that we in the order by, we can include multiple columns, but the results will in which we have specified our columns. So since we have specified and the other is ascending, the result sets that department name column. So yes we can include multiple columns in the order by clause. Let's move to the next slide, filtering. So so far we have discussed and then updation of data then delete statements and we discussed about top five, bottom five, how we can include all or result sets or we can We have seen that by order by Now we are going to discuss So so far whatever examples the select statement, we have not included where clause, since we clause is optional. But if you will not include then we are going to get all the results, which is not a good idea or your table can have 1000s of records. So it may impact the performance you know, fetching all So we use various While fetching that data, so we use where clause to So in the where clause, We use comparison operators, So there are three main logical So we'll discuss and operator first. So and logical operator used and it fetches the result which So instead of writing we can club the two conditions And if a query will that only those records are or those rows will be shown in our result sets. Let's see with an example. Let me first show you all the records of the department table. So we have four records and let's assume we want which has department number 10 and along with one more records, which has department name, HR. So what we can do, we can use select since we select star from, table name, department and now we'll use the where clause. So we'll use where keyword, where departments number is equals to 10 followed by the and keyboard, Please pay attention that we We always use a single quotes in SQL. So like other programming languages, CC plus plus, C Sharp Java, where we use double quotes for string. Here we use only single quotes. Whether it is a character or a string. If I'll execute this query, it is not showing me any results because it is not Why? Because there is not as single row, we just having department number 10 and department name HR. So if I change it department number to 20. That will satisfy the condition, the second record will So that's what we have discussed, that if it will satisfy then only the rows will be Now if I'll execute this query, we'll get the desired results. This is how we use and logical or get the desert rows in the result set. So again, let's see this example. So in the first example we mentioned that we are fetching the selected columns, we're using select first name, the last name from employee table where first name is equals to Miller and last name is equals to Ward. This is how we're getting the result. In the second example, we are fetching that that the first name, department name and salary where salary is greater than 20,000 and salary is less than 35,000. So we can use multiple conditions and only those records will come which was satisfy both the conditions. Let's move to another logical operator or like end operator, or operator is also used to But the main difference is that it will fetch the results if any one of the conditions is satisfied in the old statement. So let's discuss it with an example, example we discuss when we made it to 10 we got the empty result set because no row is or But if I'll replace and with all keyboard, we'll see both the rows. So the main difference and and logical operator is that in and it has to satisfy whereas in or if any one we'll get the rows or So based upon the business requirement, we use either and or or logical operator. I will discuss the last so not operator is basically It basically fetches the which is basically So it is also used in combinations with other keywords like As you can see in this screen, we are using select department name, location from department when location not in Chennai and Bangalore. Let's see this with an example. So let me show you first all the records so that we know what we querying. So let's assume that I want which are not located in Hyderabad. So I'll do, I'll write So I'll do, I'll write where column name, not keyword because we're looking we'll discuss about in Let's execute this and here we go. So now since we use, we want all the departments So we used not logical and we are getting all the So this is how we use not operator. So for filtering we use logical operators as well as comparison operator. So so far we have discussed three important logical We used and, and the we'll if it satisfies both the conditions we get the result set if it will satisfy any one of the condition, if you use the or logical operator and not logical operator is or to negate the conditions. So let's move to other operators, like comparison operators. So we have various comparison operators, which we can use it in the where clause to filter our results. We have equals two followed We can use either for not equals to or less in combinations for not equals two. So we'll get the same results. We can use either one of them. Then we have greater than and equal to, less than equals to, like operator. Like operator we generally use, when they use our play around with the strengths or characters, we use between operators or when we want to affect the results from a range in keyword. We just saw an example. So these are the various Let's start with the between operator. So the between operator is within a set of values. So let's see this example. So we are fetching the details of employee whose salary is basically So lets see with this example. Let me open a new query. So we are going to fetch employees, so let me first increase the font size for better visibility. So now I want to fetch the record, salary is greater than So I'll do that. Then right select star from employee Then right select star from employee where salary between where salary between So between operators with and operator, this There's only one record which is satisfying these conditions. This one, Smith. So this is how we are in our result set. So it's basically used for a range, so you can use between operator. Lets move to the next operation, not in. We've already discussed about the not in. So not keywords is, not is a and it is used along with other so we have just seen one example where we want to show the departments which are not in Hyderabad. So this is the repetition In the previous example which I shown I include only one locations, but we can use multiple keywords if you're using the in keywords, we'll see the example, not in. In operator fetches values So this condition see generally used when you want to fetch in a single statement. So it's not that I can use only in, I can use or operators, if there are only one or two conditions, I can either use or But if the values are more, it is not a good idea to or logical operators. Let's assume, I want to see So it I'll write, like where location is equals to Mumbai or New Delhi or Hyderabad, or Bangalore or Chennai, it is So instead of writing we can use in operators. So the in we basically out of which we want So you want to fetch our values. So let's see with an example. So let me open a new query window, and write select from department. So if I want to see the results, or see the departments which are either in Chennai or Bangalore. So I'll write, select where location in, it can be That's how we are Bangalore. Don't forget to include in single codes in SQL. So this fetch the desired results. So we can use multiple values, in the parenthesis if he So if I use not in, then and it will show the opposite So we have discussed So if there are multiple we have to use it is good Then basic comparison equals to, less than, So this is pretty much self-explanatory. So if I want to select the employees who's salary is greater than 20,000, so let's see how we'll get the results. So I can use the previous window, so where salary, instead of this, I'd can write salaries So I'm getting three results. So the three I got are three rows or three employees, whose salary is greater than 20,000. So if I include greater than or equals to, then I guess I'll get four reasons. So I don't think so we have No, we don't have. So let's take the example of 30,000 here. So we'll get the three results. But if I remove the equals to keywords, then of course we'll get And if I use the equals to, then we'll get the only single row which will satisfy that So this is how we use our various operator greater than, equals to, less Again, this example, we it will satisfy the desired Comparison operator use a like, how we use the like keywords So generally we use light operators to perform wild card searches As I mentioned earlier, that like keyword is generally or fetching the strings. So it used with two wild cards. One is a percentage, percentage denotes zero many characters and underscore denotes one characters. So let's see. So in the first example as you can see, I'm getting the values whose locations starts whose locations starts Let's see how we can use it. So we'll first see how we use If I want to note, that what where the location start So will write select star from department, where LOC like we use the like And then the keyword C that is wild card would get the results. So if I just change the order, if I'll write the wild it means I have to show the department whose location ends with C. So if I'll write it, I here. Then again, I'll get the desired results because I am fetching the rows who's location and with the So if I'll use first wild it means it ends with, if I first used the means it's start. If I'll write something like this, it C and then wild card, and ends with I. So fetch me the locations because I'm using the And since I'm using I after the wild card, so it ends with I, if again it will show me if I'll change it, for example, I'm starting with H and ending with I. So there's no department so you'll get an empty result set. And I find to show that, show me the department in that case on I have to do is that we have to remove the I. So we have to use the and it will show us the results. So along with percentage signs, we use underscores also as a wild card. So in this example, as you can see, the second example, select department or location from department So it means the first three words should be CHEN, then So we have to first So the first three should be this. So this is how we use the The last topic of this module So case expressions helps the if then else statement, like in most of the programming So this helps us to write the same, only point or the key statement is that, as you can see that note, we cannot use non values because it always use And we cannot use equals to We have to use is null, that I'll show you after this example. So let's assume I'm fetching So if I'm looking for the salary column, there are a few rows which in there are a few rows So if I want to see that, what are the different employees which have a null values So if I try to write where then I won't get any results here because equals to operators If I'm checking now we If I'll execute this query, If I want to check, if I which do not have null then we have to use is, and then they have to use is not null. So not logical operators is always used in combinations with other operators. They get all the employees for their salary column. So that is a reason we are so we cannot use the null values, otherwise it will break because we use the equal to operators and equal operators not So this is how the syntax as you can see we have instead of int. And we have set the Its just an example so the in this example. So we are selecting case, I'm just selecting that then we'll show that put as one. When it is two, them we are When it is three, then we are And if it is not out of one, two and three, then we'll show the This is how we are doing in this example. So let me give you one example for that. Let me do one thing. Let me find out the states of the cities where my department is. So as you know, the and Bangalore is in Karnataka. So let's see how we can do So we have to write in the case keyword we you want to fetch, I am fetching the location. And then we write the when condition, so I'm writing when Chennai, then show the result as Tamil Nadu, when Bangalore. Then let's say Karnataka, and I'm adding an else condition if it is not part of anything. So lets just write, no idea. So we have to end the when condition, then we have to write from which tables we are basically fetching (mumbles). So if I'll execute this query, I'll get say, if it is Chennai, I'm getting the results as Tamil Nadu, and if it Bangalore and there's some departments like Hyderabad we're So this is how we can and SQL statement or select statement by using case expression. Important point is that where we're using null because A join clause is used or more than two data tables, based on the join condition which we'll provide in the Join clause is used to combine When we say one means, the condition on a single table, then this particular condition So these joints basically happens, or takes place between tables based on the common columns between them. In SQL server we have the following joins, we have self-join, we have inner join, left join, right join and full outer join. Cross join is also call A table can we join to it The important part here is that when we'll use the self-join. Then we have to use that table alias. Because our table name is same, because we are making a So if you'll see the syntax, in the select statement we which we are trying to Then we have a keyboard from which table we wants to fetch and then the table alias T1. Then join another table, table name because the table name is same. That's why we have to use another alias for the same table, that is T2. And then we'll provide a joint condition with a on key word you equals to T2.column name. So this index will be more clear when we will show some and other joins. So this is an example of a self-join, where we are joining the same columns. So we will see this example, we'll execute this example but before that we'll And then I'll show you the It is not that we quite We execute self-join only Most of the time we tried to join two or more than two tables. So we have inner join. The inner join fetches the in both the tables. So that is called self-join or sometimes we call So here is the same we write the select we mentioned the from, that from which tables we want And then we provide the table alias. It is not mandatory to but it is good practice as sometimes, the table name is very long so we don't have to write So to avoid this we which will help us to identify, which helps us to fetch the as well as in the on condition. So let's see an example Let me close all this in management studio. So for join, we will be We will be using employee table. Let me show you the data This is our first table, employee table. So we have the following records in it. We have six rows and the first name, last name and address. In the address we have the city name. For the fifth record, we do not have the value for The other table which the examples is orders, and the order table, let me first execute the So this is the order table. We have five entries of five records in it and employee id is null or for the fifth record. Let me execute these So if you'll see my orders whereas the employee Employee id is the primary key and order id is the And these two tables are So when we join two tables, there should be one common column or there should be some matching If there is no matching values or two tables in which then there won't be any So the basic prerequisite is that the two tables which we are going to join should have some common So let's take an example We are clear with the two tables. So this is this syntax. In select statement we'll which we are going to fetch. So in this example we are one column from employee table and two columns from the orders table. So that is the reason we the table name, the dot followed So when we use joins, it is important to provide the table name before the column name. Let's assume what will happen See the moment I removed the table name, I'll get an error. That ambiguous column name, employer id. Why ambiguous? Because if you'll see we in employee table as well So if we will not provide the table name then it is difficult for SQL server to identify that which column, we want to fetch as the same column maybe present in both the tables. But if I try to remove this The reason is the order It is present only in the orders table and not in the employee. But it is good practice that in the select statement I hope this is clear that why before the column name Because if the column and child table, then it will throw an error and we won't be able to Because there will be an ambiguity If the column is unique and is not presenting both the tables, then we have the options before the column name. So we provide the column Then we'll first provide followed by a keyword inner join. So based upon type of joint we'll provide these keywords. If it is left join, then we'll replace inner If it is right joint than replace So based upon the join So as of now in this example I'm showing you the inner join example. So we have included So if you'll see we are So one is employee, the other is orders. So first we have to we need to consider for join. In our case we have and orders table. And the second part of join is that, how we want to join these two tables. As I mentioned, there should or matching data between these two table in order to join them. So in both the tables and it has the matching data. So we have to specify an on condition. And then the on condition, I have mentioned that emp dot employee is equals to ordered dot employee, fetch me all those records. And then followed by the employee id. As we discussed in module two, we use order by keywords or order by clause to sort the data. By default, sorting is If you won't provide any it will be always be So let's execute this statement first. Yeah, so if you'll see we'll be getting only four records here because in the order tables, we have only four records Though we have six records and five records in the orders tables, But matching condition is of four rows in both the tables. In the result we will get one zero two one zero Since employee id is not Also one zero six is not here. That is a reason these two row will be skipped from the result set. As you can see, there is no row with the and one zero six. So in this example, the inner joining is returning all rows from the employee and order tables where there is a matching in both the employer and orders table. That is the reason, the rows where employee id and one zero six in the Since they are not present So this the syntax which on the screen is the latest syntax, or the recommended syntax or the (mumbles) syntax. But there is an older syntax where we do not use the on keywords but still we can achieve Let's just have a look because some authors or some for the inner join and other joins. But this index are not recommended and if you're writing joins you have to follow the syntax which we have discussed just now. So in the oldest index we just mentioned the name of the tables and the tables will be the comma separated and instead of on conditions we include the condition where employee dot order dot employee id, followed So it is not that every time we have to provide the order by clause. Order by clause is always optional. So if I'll try to execute this query, I'll get the same result set. And if you want to we can change it to the And if I'll execute, the result will be in the as you can see. 105 is on the top. Again, order by is always optional and it is not mandatory an inner joins or any of the query. So inner join helps us to fetch the rows from both the tables in both the tables. That's why sometimes call or simple joins or inner join. So don't get confused Sometimes since we are matching people call this (mumbles) joins. It is the simplest of all the joins. So we often call it as a And technically this is inner join. Since we are using the inner join keyword to fetch themselves. But in the oldest syntax, we do not use inner join keywords. It is good to know but it is not recommended to use oldest syntax going forward. Let's understand more about inner joins by helps of a Venn diagram. So best we're looking at this diagram you'll come to know, so we have for example, two tables, table employee and table department. As of now I've shown you the but let's assume that we department and employee. So in inner join the in both the tables, so the intersecting part will So better visualizations, you can relate inner join with And if it is self join, instead of these two tables When we saw the example, when you see the syntax of inner join. See that we're using table alias here. But in our case we haven't Using table is optional. If I want to change to the for example, let's say I'm and orders for orders, O for orders table. In that case cases I'm using alias, I have to remove the table name and have to replace with the table alias. To sum up, if you use the table alias then we cannot use a table name. We have to replace with alias only, not only the select statement, we have to use all the places for this not mandatory to use this. We can either give the Generally we use table alias for the tables. Good practices is that do like how I have done E and O. It has to be meaningful name. For example, let's assume the table name is employee information. So I can write the short form emp info, just looking at alias we should is for this particular table. So if I'll execute this statement again, I'll get the same results. So if we are using self-join, then it is mandatory because, or it is good to use, I would rather not say mandatory, it is good to use because we will be using the same table name. If I will be using the self-join, then if I'll provide the same alias, I cannot use it. Because we cannot use the same table name in both the clause. So let's assume that then get an error because you cannot use the same table name in the inner join, as you can see the objects has the same exposed names. Use correlation names to distinguish name. So my first statement was right, yes, it is mandatory to use table alias when you are using self-join. So we can give it as E1, or we can give the same and I can replace it with E1, E2 and E2. These columns are not there. So that is the reason So we'll get this desire. So this is how we create the self-join or provide the syntax for self-join. So it is mandatory to provide because we cannot have the same table name in the from clause or in the inner join. I hope, self-join and inner-join is clear. And let's move to the next slide. So this is again example of inner join before we move to the next slide. So in this we are joining and employee table, with So we have provide the table alias, for the department we provide the T1 and for employee T2. And when we are providing then we have to explicitly is coming from which table. So first name is defined but that is the reason they're And this is a good example, here we are providing the alias for column name as well as table name. So alias is applicable for column name, if you want to give a because first and sole name it is good to use in the backend. But if you want to show the results and the result set in the query window, or if you want to consume this result set somewhere in our programming language by meanings 80.net or any other means, then it is good to provide them meaningful and more readable names. So that is the reason So let's move to next join So the left outer join even if there is no rows on So the left and right the arrangement of the So this type of join, return all rows from the left hand table specified in the on clause. And on conditions, and only and only those where the join fields are equal join condition is met. So I repeated it again, as you can see the points. Second, the result is null when there is no match. When they execute right outer join, it will always fetch the And if there is no matching then those values will be The syntax of left join is The major differences is with another keyword Here the left table will be T1, and right table will be T2. So let's see an example So here are left table employee and the right tables is orders. So if I execute this statement, this is the result set. So the left outer join all the rows from the employee table. And only those rows from the orders table where the join fields are equal or there is a matching condition. So if the employee id does not exist in the order table, all the fields in the the null value in the result sets. In this result sets the is 103 and 106 would be but the order id and order So if you'll see the data, since we are using left outer join and that left table is employee. So it will fetch all the six records, 101, 102, three, four, five because we are fetching three columns, employer id, order id and order date. So left outer join will from the left table. That's why we are having six But if there's no matching so our right table is orders and order id and order date are basically that is orders, and then the order tables, there's no value for employee If you'll see again in the orders table, we do not have any rows with So those values are replaced by null here. So that is the reason we have null values for Which is coming from orders table and that is the right table in the left outer join in this example. I repeat when we use left outer join, all the values from the will be included in the result sets and if there are no matching records for those rows in right table, then those values will In some databases, the and basically use left join. So in some database instead we simply mention left join. And if I'll execute the command again I'll get the same result sets. So don't get confused between It is one in the same thing. I hope left join is clear. Let's move to other examples. So this is one more before we move to the next join. Here we have first name and department. These are from two different tables. So employee is our left table here and department is the right table. So we'll always get all the that is the reason if we have all the records, but in the right hand side For Miller, there is no There is no department number which is there in the employee table in the department table. That is the reason the value is coming as null in the result set. All the values from the left table plus all the values which and if there is no matching than it will be replaced by null keyword. So let's move to the right outer join. So right after joint returns the rows to the right relationship table, even if the is no matching rows It is almost similar only the conditions as That result is not for when there is no match, the result is null for the right table when there is no match. If you'll see the syntax, only difference here in the syntax is in the right join we as a keyword, whereas in a left outer join and you left outer join So right after joint returns all the rows from the right table and only those rows from other table where the join tables are And as I mentioned in the point two, if there is no match in the result sets. Again, it is not mandatory We can simply use right join as well. Don't get confused between These are one in the same thing. So let's see an example or right join. In this example, right table is orders, so we'll get all the results, or all the rows from the right table. As you can see, I'm fetching, let me first use change order by clause instead of employee id, let me fetch it using the order id, order by, order id and descending. order by, order id and descending. Let me execute the statement again. As you can see we have sorted the result sets. Since orders is the right table, we have all the records but since there's no matching we're getting it as a null value. So in this example, the right outer join is from the order table and from the employee table where So it is almost a reverse I hope this is clear. So let's understand left by help of a diagram. So if you'll see this is example bottom left. So in this example we are employee and department. So if you'll see all the will be included in the result set. Whereas only those records will be considered, which are common in both the tables or which has a matching So this is a good example, or good example to understand Same if you'll see the right join example, in the result sets all the records from the department they but from the employee will be included which in the department table. And the right bottom you of a self-join, we are The table employee is connected to itself. And as we mentioned it is very important to provide the table alias because we cannot have the same table name in both the conditions. So I hope by looking at this example it's more clear to you Other than that we just and we have to take care we are placing in the on condition that is defined that which or which one will be our right table. So the placement of table in If we are looking for left and right join. If we are considering it as inner join, then the order and placement because we are going to which have the matching So the placement of tables If we are writing left or right outer join or right join. So let's move to the next example. Full outer join. So the full outer join when there is a match in either If there are rows in table one that do not have matches in table two or their rows in table T2 that do not have matches in table T1, those rows will be listed as well. It means all the rows from the left and all the rows from right will be included in the result sets and if there is no matching values that it will be replaced If you look at the syntax. Syntax is almost similar. We have to just replace the inner join or left outer join with So it is very easy to work with the joins. If we know the syntax of any one join then it is very easy for for other joins also. All we have to do is the main keyword, what kind If it is inner join we if it is left then you can or left join. Only thing which we need to consider for this left and right join is the placement of table on conditions. So this is an example of full outer join. So I'm selecting it as a first name and department from employees T1, full outer join department as T2, and then there's a join conditions on department number on department. So though we are getting the but still we have to provide So if there is no matching condition, then only the null value will be included in the result sets. So it is not that since we are you know, fetching all the rows from both the tables though we should not So let's see an example So we have all the records and if there is no matching values then we'll have the null keyword. So if you'll see we have when I execute left outer But here we'll be getting the So there's no matching in the employee table. That's why the first two is null here. Same way there's no matching and 106 in the orders tables. That's why the order id and order date is null for these columns. Again, we can omit the instead of full outer join, we can simply say full join. So we can always omit outer whether it is left, right or full. So full outer join will from the employee table and all the rows from the employee table. Whenever the join condition will be included in the result set. So let's understand it with So if you'll see here in the entire area is colored all the rows from employee as well as all the rows from department, including the matching values. So if there is a matching values that will be included in the result sets. If not, null of will be included. I hope this is clear. Let's move to the next join, cross join. This is also called the Cartesian product and it displays all rows and So what do you mean by Cartesian products? Let's understand it. If you'll see in the upper right corner we have the cross join example. So one will be multiplied one, two, three from the department table. Same way, value two will be multiplied with all the three values Same is the case with employee name three, it will be multiplied with or. So they will be Cartesian product. That is why it is also So some people call it cross join or some people refer to So let's see or understand See the number of rows. we have only six rows So six into five since So we'll be getting 30 rows. So each row will be multiplied with all the rows of another table. We have six rules in the employee table and five rows in the order table. That's why we're getting 30 So this is all about cross join. So we have discussed all inner join, left join, right outer join or right join and full outer join. All the examples which we have discussed, we have not included any other, you know where clause of group So as of now we have not We are just fetching all the we are fetching all the rows. But in practical scenario we need to fetch all the records which have a matching value, so we have to provide some conditions or some filtering conditions So let's revisit the inner join example. So we can add a condition, for example where emp dot So only those records will be included. So if you'll see. We have only one employee id And which has a matching If I'll make it 102, Because 103 and 106 do in both the tables. If I'll skip the where clause and how it can skip by using Now we have the four When including where clause and the result sets to two. So we can use where clause, we can use order by clause and on order by clause also it's not that we have to We can provide the And let's see what if the column names here. What if will provide the asterisk or star. Lets execute this. In that case I will be from both the tables. When we used to provide the asterisk mark, when we fetching the then only the columns from that tables would be included in the result sets. Since we are creating and if we'll provide asterisk then all the columns from both the tables will be included in the result sets. As per the business requirement, we include all the columns from both the tables. Important part here is that if the column is same in both the tables, then we have to have a Or else we will get an error between two tables. So far in all the examples or which we have executed we have considered only two tables, but it is not that we can if there's a business requirement four tables and five tables. The syntax is same, only on adding the other tables using the on keyword. For beginner level you can So the important criteria is there should be at between these two tables. Some people say that you joined primary key relationship It is good to have primary key foreign for key relationship but it is not mandatory are related using foreign key, then only we can apply the joins. We can very much apply the joins if there is a matching columns though there might not be any foreign key or even primary key. The result in a result set if we're joining two tables and other two tables which not Foreign key, primary in adding constraints. If we have some records in my child table which is referring or which in parent table, if you from the parent table, we'll get an error that that So foreign key, primary key, helps us in achieving on our database, but that is not a mandatory join in the tables. Built-in functions are and manipulate data. These functions can be used When we say anywhere it in the select query, we can use them in where clause, we can use them in having clause. So these built-in functions based upon the business requirement, or based upon the type of So we broadly categorize the into the following categories So we can divide the built-in functions into conversation functions from one data type to another data type. We have logical functions, math functions to play mathematical or operations, we Aggregate functions, if for example average, we want salary of all the employees. Then we use aggregate functions. A string functions helps us to play around with various strings or Most of the string functions to the string functions which we have in other or the basic programming C sharp or Java. Date functions have which we can use to manipulate date or a retrieve date from our database. So let's discuss all of the functions one by one in coming slides. As we discussed that these are conversion functions casting and converting. Logical functions are scalar functions that perform logical operations. These are kind of similar are again the scalar functions which performs calculations usually based on the input values that I've provided as an argument. And most of the times the Aggregate functions, as I average, we use maximum of values, so aggregate functions basically perform a calculation on a set of values and they return a single So count is also an aggregate functions other than count, all of ignore null values. In the objective we saw that the group by and having clause. So aggregate functions are frequently used with a group by clause All we can say that we use group by clause only with the aggregate Some people refers aggregate so don't get confused. They are one and the same thing. String functions again as scalar functions and the performance an operations and return the strings on numerical value, based upon the kind of Date functions, straightforward So let's start with the as the name itself suggests that, these functions helps us or a value from one data type to another. So we have three commonly cost, convert and pass. And in the bottom three you we have try_convert, try_pass. So the top three and bottom three they give the same results. They work in the similar fashion. The only difference here is returns value of specified data type and on success throw errors on failure. Whereas the bottom three, they give the null values on failure. So we can relate this try as like how we have the try catch block in other programming language Same way we used try_cast if you want to get the null while calculating the expressions, or while fetching the results. Same is the case with But if any error happened we'll get an exceptions, Whereas error can be handled by converting it to the null values. If you use try_cast, So as you can see on the slide then as int and we're multiplying by 20. Again, we are converting int, 10 to int. And again we are doing a after conversion with 20. So that what is the difference Because the end result is almost similar. So both function can in most of the situations. The only difference is that It follows American whereas convert does not Let's see an example of So I'll open management studio of SQL, let open a new query and let me copy the example. So let me copy both the examples. I increase the font size. So if I'll execute, I'm Since we are converting 10 as int and again if you'll see and convert functions is exactly similar. Only difference is in the syntax. The syntax of convert function is different from cast function. So one important of point here is that, in select operation we can use mathematical operators like, we can use plus, minus, So here after converting 10 into int, we are multiplying it with And this is the alias which So we can change it, we can change it to any Let's say I'm writing it to cast result and I can change it to convert result and if I'll execute it Cast results and convert These are the alias for the columns. In the model three we saw that So let's see that if there's or converting a desired value, then we'll get an error when But we'll get a null value and try convert. Let's verify this using an example. So I'm trying to convert So we'll get an error. That conversion fail when two data type int. Now let's use try cast. So I'll copy this statement. So let's assume I used to try convert and if I'll try to convert and if I'll executed it we'll near the keyword try convert. Sorry, I forgot to write select. And if I'll execute it So instead of error, we if you'll use try convert or try cast. So based upon the business requirement we'll choose either the Let's move to the next function. Let's discuss about the logical functions. So we have two logical Logical functions can be used to display one of the several values As we have discussed, we choose and if. Choose returns as specified And returns null if the index is zero or greater than the number of items. Or we can say that the into an error. When an area is composed of the argument that followed the index argument. So as you can see in syntax, we have the choose keyword and in the parenthesis we have index. So this is the index that what value we want to return. And this val one, value two So let's understand choose by an example. So let me write one example, so that could help us to understand. Choose keyboards, and all can you see the color code? For the keywords, we but for this functions we have pink color. So we'll define three. This is the index and then Let's say I have test as of one value. I have just as another value. Third value I'll be having rest. So if I'll execute this statement, I should get the value did not start with zero. Please note it down. In the choose function, This is one base index, like we have in most So if I'll execute this statement, I'll get rest because we are that we want the third value, after the various values available. The choose function If you try to use the or we'll try to provide the index which is outside this range. So let's understand it by an example. So if I'll provide index zero, if I execute this, I'll get a null value. Or if I'll provide the index which is outside the bounds of this error. When I say bound, if it is which we are trying to select from, then again it will return a null value. So this is their are only four values here and I'm giving index five. So since there's no value it will return a null. It won't give us zero. So choose functions helps us to select from a given range of values, like how we used to fetch So let's discuss the So here, before we discuss the if, let's see these examples as well. So in the first example and we are giving index 2A, B and C. These are the three values. So this will, the first in the results set because as I mentioned, that choose and not the zero index. So let's take the case Here, we have not provided an integer. If our fraction value 1.4, so choose only consider the integer value. In both the cases it will So now let's discuss the If so, let's focus on this syntax first. So it's followed by if keyword and then we have a boolean expression and then true values and false values. So when we exit this function, it returns one of the two values. Either it will then true value or either it will return false value. So the output, whether depending upon the evolution which we'll provide in that if function. So if it's a shortened way it evaluates a boolean expression fast as the first argument and then returns either on the results of the evolution. So we can even provide the The nesting should be up to 10 levels, similar to the nesting which we can have in the case expression. As it is almost similar So let's see our discuss the So in this case it will written false because this boolean One is not greater than 10, so it will fetch the result Let's execute this example If you write if, if then you have to write than any value. Let's say I'm just writing if it turns out to be false, let's see example. The example seems to be right. Let me copy from here. Okay, so we forward to Sorry about that. And for I'll execute it So since there's no header we can provide an alias as well. If I'll make this statement as true, if I'll felt divorce the values here, then I even get through as So, as I mentioned, if works like a case expression and we can nest it and nesting can allowed up to 10 level. So this is all about logical functions. So let's continue with other So let's just goes about So math functions can be and engineering calculations. So these are various self-explanatory and we must have used these functions during our engineering classes or any other classes where you do any engineering calculation. For example, when we convert it into an absolute positive value then the use ABS functions. If we want to generate from zero to one, then we use rand function. Seed is an optional value here. If you want to return an exponential value than we use exp function, in most of the mathematical values we need to round up the values when the values are of decimals So round returns and to a specific length of positions that we need to provide in the functions. Floor provides or it less than or equals to the Then we have square root, square root returns the square root of the specified float value. Saving is just opposite of the flow and it returns the smallest integer, greater than or equal to the Square again, as we know the So like we use the square functions to calculate the square of Power, power basically returns the value of the specified expression So these are the standard We have used these functions. So here we can see a consolidated examples of all mathematical functions. So in the first example we So here we are using absolute value. So it is converting the negative values to the positive value. And all these keywords So we are using ABS as Rand as we discuss, Rand to get any random values, we can provide the seed as optional. When you use this functions, as you can see we are Exp four it basically helps us Floor, we use floor so 4.66 will get the value four here, and floor we'll get the value in the ceiling we'll get the values greater than the nearest integer. If I'll use floor 4.66 when I'm using ceiling, I'm getting very five here. Square root, the square So this is the value we are getting. Square is just opposed to the square root. So we'll get the square of a digit we should provide in that parenthesis. So we have provided a value four, so we are getting 16 at this result. Power to three, so we are the base value here is the two and three is it's exponential value. To the power three, we'll get eight. It's states, if you own expand this, it's two into two into two. So they're getting eight as it results. Round functions is basically and we are using two as a decision value. So we are provided to it is So let's execute few of the for better clarity. Let's use the square function and square root function first. The square root of 16, and always use the select statement or else we'll get an error. So I can even do like I can use where's mathematical functions and then I can multiply it or I can use other If I'll execute this, so what I'm doing is I'm that will four, taking So end results should be 64, yep, so if we get the results. As you can see guys, when we don't give the name of the column. The header is blank. So it is good practice As of now I'm giving If I'll execute it now I can't even use other I can use plus, so we'll provide the sum of these two values. 16 plus four, 20. So I'll get 20 in the result sets. I'm getting minus 12 its value. And let's see, can we So let me write, select and if I'll use apps function here. So now I should be getting plus 12 because I'm using absolute function so it will convert the negative value into positive values. So we can use, we can club, So here in the ABS functions, I'm using a security functions We can play around with these functions as per our business requirement. Let's use an example of power. Let's use the base value as two. Two to the power four. So the results will be 16. So this is equal to, sorry, if I'll expand this power, two is the base and four is the expansion. So I'll get the same result set 16. So this is all about the maths functions. That's moves to another category. Ignores null values. Aggregate functions are frequently used with the group by clause Like we used to filter the So if you're using group by clause, then we use having keyboard So we have a following We have average min, sum, count and max. Let's start at average function first. Average returns the average as we discussed null values ignored. So let's take an example First, let me fetch the Okay. So I can use the average functions on department number column. So I can write select average and write the column If I'll execute this, I'll get the average of the values. Let me execute both the queries in one go so we can compare the results. So 25 is the average of 10 divided by four. So we can use average function We discuss about the distinct So distinct keyword helps us If you want to find the then we'll provide the distinct keyword before the column name. So let's take another example Let me get the results So as we discuss that average functions ignores the null values. So if I'll try to get So we have only three rows where the salaries present, And then let's see what is the result. Select average, provide the name of the So this is the average. So let me execute both like I did earlier. So you're getting the average of this. So we can use average if you want to fetch the results. Okay, let's see whether we So in the department one table, we have the repeated values So if we want to ignore that or the duplicate data, then I can use the distinct keyboard. If I executed now, I'll But if I remove the distinct keyword, the result set will be different. Sorry, my bad. I'm using department column. I have to change to department one. So let's first see the results that without using the distinct keyword, the results is 30. Now I'll use the keyword distinct. Value is different because I'm for my result set. So let's move to another Let's discuss the min function. Similar to average, min and if returns the minimum So if I'll see the values and if I try to find the lowest value of the department number, then I have to use the main function. Okay? So out of all the aggregate functions, count is the only one which considers or which takes into account So let's see the example of count. Let's move to management studio. So I'll be using employee table 'cause we have lot of I'll execute this. So let's take the count Select count. Oh I have to write the Oh I have to write the So if I'll execute, But if I execute star, But if I execute star, Even we can use the in the count function. So count basically fetch the So let's move to another We have max. So max is exactly opposite of min. We've already shown an example of minimum. So max, we can use it for numeric as well as with the character data type. If you use for the character data type, it will show the maximum value, or in the sorting order. If you use with the numeric, then of course it will show Though let's see, an example of max as well. So if I'll use max, we are trying to find the maximum salary from employee table. So this is the maximum salary. And if I try to find the location let me first show you the various location from the department table. So as for the sorting order, we should get Hyderabad, if you'll use max for this column. so let me write the query. Select max loc from department table. Select max loc from department table. Then we can provide in alias as location. So we get Hyderabad in my result set. So we have to discuss common aggregate functions are average. If you get the average of values, min as names suggest, the is the minimum Sum helps us defining of Sum only accepts the numeric value count returns the number of or in a table. Max returns the maximum So let's move to other So these are the various examples, before we move to other functions lets see the examples here. So in one example of shown so we can use multiple aggregate functions in a single statement, a So in the single select statement, we have used average of salary, minium of salary, maximum of salary, and sum of salary from employee table. Second example is for the count functions. So we will discuss about and having functions, once we are done with most And then we have string functions. String functions are and they perform an operations And the return is string or numeric value based upon the type of When string functions are passed arguments that are not string values, the input type is implicitly So these are the various string functions. LTRIM, it basically returns after it removes leading blanks. It basically removes the blanks from the left hand side of the string. We have our RTRIM, it after truncating all the trailing blanks, basically it remove the blank of a string. CHAR functions converts an CHARINDEX find out, for another expressions and returns its starting STR returns character data CONCAT, return a string that two or more string values. So these functions are almost similar to other string functions which we use in other programming languages. Most of the programming We have our functions to find We use a concatenating and operation, this is a very common string Two strings, or more than two strings. Then we have replace functions. So replace all occurrence with another specific value. We have substring, it or text based upon the which we give in. As we can see that we have a substring, a keyword like the string from which the part of a character. We'll define the start index. And then we'll define the till how many characters we Then we have the format functions. We can format strings in the desire format using the culture. Then have left functions. It returns the left part The opposite of left which returns the right Reverse, return the reverse Upper functions at converts opposite of which is the the expressions into lower case. And in the end we have which basically a returns of the specified string and So these are the various so first one is for the replace function. So this is our a string and this string, we are replacing CDE As you can see in the results set here for the replace column. The value CDE is replaced with triple x. We have sub string We all get out of this ABCDEF, which is our main string from index two and (mumbles) we are So index two is start from B and then up to three character So we'll get B, C and D in our output. Then we have left. So basically written the So from index two, we are getting the values it is A and B. From the right, we are In the end we have the examples So here we are provided the so forces for a US English, second is for British English and third is for the German. So based upon the info culture, we basically get the So most of the string functions are pretty much straightforward. So let's discuss about a few of them. So we'll discuss about a reverse, so I'm adding a string, A B C. Again, if I were to write it will give me an error if I'll try to execute this And if I'll executed it now, I'll get the reverse of the string. Always good to provide the alias. Then we have trim on the LTRIM, select LTRIM. So I've added a leading and if I'll execute this, that leading spaces has been trimmed. Same way I can use RTRIM. If I'll use RTRIM, that only the trailing not the leading one. If I execute this, I'll get this result. And if I'll use trim, that I do not have trim here. So LTRIM removes the leading the trailing spaces. This is all about the string functions. You can practice about the they are pretty much straightforward. Let's see an example for the upper and lower functions as well. So if I'll use lower here, So if I'll use lower here, But if I'll use, or let me the uppercase characters, And if I'll write the lower case. If I'll use the upper function, it can work it into uppercase. So all other string functions Please try all of them so and if you will try all of these, you will come to know that you can start using those. So let's move to other functions, the date and time functions. So date and time functions that performs and operations And returns either a string, So as you can see in the screen, they are various date and time functions. Again, we have SYSDATETIME. It returns a date time value that contains the date and time, its current time stamp, against return at date time value that contains the date and time. Date part basically fetch as the date part of a data component. Day, month, year, returns an integer that represents the of the specific date. DATEDIFF returns the number of date or time datepart between two specific dates. And DATEADD functions returns by adding an interval So let's see the examples since date time it returns It has date component as Current timestamp also gives Date part basically provides if I'll provide year here then it is providing the If I provide here, the DD, it provides the day, if I'll provide MM, it will provide or fetch Date different. So again, if we, here we are providing MM So we are getting the difference of month between these two dates. If I'll provide DD then it will provide me between the two dates. So DATEADD is that I'm adding two months. So this is how we have to MM specify for months here. If I'll provide the DD since we have provided MM here. So it will add two months So let's even example here, DATEPART. Year. Now let's say, MM. And then we can provide the date. This providing the month. So 12 months as I'm using December. If I'll change it to October. And I'll execute it again it So this is how we use the data part and let's see the DATEADD function. So if I'll execute it now. It will add two months. I can also provide DD here. So it will add two days, this is all about the date functions. So now let's discuss and having clause. So as you can see, we are and we're using having keyword here. So let's discuss about the group by and having clause. Lets discuss group by first, the SQL group by clause is used along with the group functions to retrieve data, group according to one or more columns. The important part here is should contain all the columns in the select list, except those used along So let's see an example for better understanding. Lets move to management studio and we will use department Let me first execute this query. So what am I going to do, I'm going to group by So I'll find select, count of rows from department one. count of rows from department one. Then I'll use group by keyword and I want to group the So can you see it's grouped, or even I can write the department number and let's me write the alias for this and I'm writing the alias here as department number. If I'll execute this I'll get, so we have count four there are four values for Same way, five values Five values for 40. One values for department number 50. One value for department number 80. So we use group by functions with aggregate functions. It helps us in grouping The important part here is that we have to use all the which are there in a select statement. So if I'll try to include location here, there's one more column locations in that department one table but if you're trying to execute it now I'll get an error, because all the columns other than the aggregate functions should be there and the group by clause. If I'll include the other tables as well then the query will be So to in order to execute we have to include all the columns which we are including in the group by clause. And also we can include multiple columns in the group by clause. It is not that we have to So group helps us to group and it is generally used along with other aggregate functions. So let's see the example. So here we are basically again grouping by the department number here. So let me fetch the results So here we can group the records again using the department number. Or using the job id, so if I were to use for the employee table I'll write select job id, job_id. I'll write select job id, job_id. And then again I can use it's not that we have to always use the count aggregate function. We can use other aggregate We can use other aggregate And then I'll write, group by job id. So this will group the So only for a job id for all other job ids So we are clear with the group by, now let's discuss with, lets discuss the having a keyword. So the having clause was added to SQL because the where with the aggregate function. We cannot use a where keyword So having applies to the whereas where applies to So for the summarize record or the group, when we use group by then and if it is the individual records, then we'll use the where clause. If we'll use the having clause, only the groups that will be returned in the result sets. And having keyword requires in our SQL query. So we can say that having with the group by clause to restrict the group of returned rows to only those which is or where the conditions is true. So lets see an example. So here in this example we are selecting the department number, taking the average salary, minimum salary and the maximum salary and we are finding that if the is greater than 3,000 So lets write, let's see this example And I can write here And I can write here let's say 30,000. We have to include the, you have to use the aggregate functions in the having clause. Yeah, so we get only two results. So let me first show you the result sets. So we have three rows for the salary column, J4 G5 is blank. So we have J6 as 500,000 and then we have the J1 as 30K. So as per our query we should That is J4 and J6 because which are satisfying the having clause. So having this kind of we used but with the aggregate functions so we are supposed to use having clause. This is it about the various And first we'll discuss A stored procedure is with a name that has in the database. So then the execute or when but we are not storing those queries. But in store procedure we can and we can execute them and So every time I don't I can write my business logic So store procedures can be of SQL statements which a specific task. So basically in store procedure we write most of our business logic. It's like other programming languages. Store procedures accepts input parameters. They return multiple values or output parameters. They contain programming statements. A store processor can call or functions or return status to indicate success or failure. Let's see the syntax of So this is the syntax, To create a store procedure, followed by a keyword procedure, name of the store procedure If you want to provide any then we'll provide the parameter name. If want to create the then we have to use the followed by as keyword and whatever the statement we'll write that and the end So in the syntax it is mentioned So if you want to modify then we have to use the keyword alter. If we are creating the then we have to use the keyboard create. So alter keyword is used any existing store procedure. Now why we create store procedure when we can write SQL queries. So here are some of the benefits of creating store procedure. All commands in a store procedure are executed as a single batch of code. When we aggregate queries in SQL, generally each query But when we execute store procedure, though it may have multiple SQL statement, all SQL statement are executed So by doing this it reduced the server or client network traffic Store procedure helps us in because we can impersonate another user, execute as can be specified to enable impersonating another user to perform certain database task without providing direct So it makes our environment more secure. Reuse of code. Store procedures helps us because as we discussed that we can call another functions or store procedures from Easier maintenance. Changes need to be done which handles all DB operations in client applications. So sometimes we move our business logic to the store procedure. So if any changes are required, we need to modify our business logic and we don't have to change or our code. We have to just modify and executed again. Also if there is any error we know where exactly to look for and we have for development instead of looking for That is the reason store Improved performance. All procedures by default the first time it is executed and it maintains that execution plan for subsequent call. So if we'll execute or if we'll call or run the store procedure again it will take less time because there is already the very first time. So by doing this the performance So on the slide we can see an So we creating a store procedure, so we have writing a first, the create keyword sp_GetEmployeeInfo is the This store procedure we are who's datatype is int We are defining the keyword as and begin. And then we are writing the basic query that select employee id, manager id, phone number, These are the columns of table employ. And then we are passing that condition. We are filtering the by using a where clause we are not hard coding any value. We are executing it with an employer id, which is the parameter. So then we'll execute we will pass the parimeter. So let's see few example So let me open management studio. Let me open the examples I already have. So let's create a store procedure It is not that every time when we'll create a store procedure we have to define a parameter. So I'm writing the create keyword followed by the procedure will be highlighted in the blue color. Then providing a name So I can provide any name here. So I'm providing a get give it more meaning, And the store procedure a one select query that And I'll execute this query. Command completed successfully means we have successfully created the store procedure in database. Now where to check for So I'll first expand the database under which I am creating An important thing guys the database first. That under which database we want to create a store procedure. So always write the name of the database, use keyword followed by a go keyword. Now if we'll try to execute I'll get an error that this USP get department So since I've already if I'll try to create again, it will give an error. So when you provide a name please ensure or please check that this the name which you're providing is unique and it does not exist in the database in which you are creating So if I want to check where exactly the stored procedure has been created. I have to expand the under programmability folder for the store procedures. Let me refresh it. So here we can see the store procedure DBP USP get department details. So from this object explorer, I can modify the store procedure, I can execute the store procedure or even I can delete it. So to delete it we have to Again, reconfirm whether this store procedure. And if there are any dependency we can check it with the store dependency. So when we delete something it is better to check the dependency if there are any independency, where are the not delete As of now we know that So I'm just clicking okay here and it will delete the store procedure. Since we have deleted the store procedure, and now if I'll execute it will be executed successfully as there was no store and by execution of statement will again create that store procedure. So if I'll refresh this I'll see the store procedure. Now we have created the store procedure and we'll see how we can To execute the store procedure, we have to write one command. So there are various keywords which we can use to run The first one is we have exec followed by the name So if I'll execute this, it will execute the store procedure and it will return the because in the store procedure we have given only one select statement that select star from department and the department So we are getting all the rows because we have not specified So this is an example of a store procedure without a parameter. Since the store procedure we are not passing any this as store procedure. So it is not mandatory to while executing the store procedure. Even if you'll provide the and if we'll execute it, it So exec keyword or execute while executing the stored procedure. So let me again deleted So while creating the we can either provide or we can even provide the short form, that create proc. Even if I'll execute the statement it will be executed successfully. And if I refresh this note, we can see the store procedure has been created successfully. While executing again, it is optional, provide the execute keyword. Similarly, while creating we can either provide, create Now let's see how we can with a parameter. So I'm opening a new query window. Increase the font size So this is an example of a store So here we are providing the So here we have department and the data type of this and length is 30. So in the previous example we have written our select statement but here I'm providing or I'm by using where clause and the where clause I'm checking the department number with the parameter which the store procedure. So let me create the store procedure first and then we will execute it. The command completed successfully means the store procedure has So let's again refresh this note. Yup, so now when we are even like as we saw that we or we can even directly write the name of the store procedure or if you're using the management studio, we can right click the store procedure and then we can click So the execute store procedure and if there are any it will check whether to this particular parameter. As we know that we have various start from 10 to 80, so I'm passing 20 as a value and I will click okay. The moment I'll click So in earlier example, we got all the rows in the result set. So if we do not want to from the object explorer, then again, we have to We have to execute keywords, followed by the name and then we'll pass the parameter. In our case the parameter So now this will give the desired result. So this is how we create store procedure with parameter and this is how we execute the store procedure which And now I feel try to without providing the parameter. Now let's see what happens. See, you'll receive an error USP get detail expect parameters It means when we created we have ensured that the parameter which we are providing in our Why? Because we have not explicitly or defined that this parameter can accept null value as well. So if you want to make then we have to explicit really So let me modify the store procedure or let me first delete the store procedure and we'll recreate it again. So I'm just deleting this store procedure. And in order to make instead of mandatory we have and I'll execute the statement again to create the store procedure. Now if I'll execute the store procedure, we won't receive an error, but we won't get the value because when we are and if I'm not providing any null so it will not return any result. But yes, the error is gone. So this is how we make by providing the null keyword. Now let's see how we can with multiple parameters or is it possible to with multiple parameters? Yes, it is very much possible which accepts multiple parameters. So let's see it with an example. Let me open a new query again and we already have an Let me paste it in management studio. So we have this store procedure and in this store procedure, we have a defined two parameters, one is department number We are make both of these by providing the null keyword. So if you want to create or if you want to define in the store procedure, all we have to do is the two parameters with Rest everything is same, we have to provide an as and then we'll write the we are again are writing but we are adding a where clause to filter the results sets And we are using logical operators that is and, to combine two conditions. So let me execute these statements to create a new store procedure The store procedure has We'll refresh this note. And this is a store procedure. So let me first see the data in our table so that we can provide the to get the values and the result set. Okay, so I'll pass the parameter, department number as 50 and department name as IT. So all I have to do is, I have to provide the keyword execute, name of the store Then we have to provide the that is department number, its value. So we have decided to and then we'll provide the Since it is strength, we have to enclose it and now like I'll execute this and we'll get the end result and its located in Mumbai. So this is how we'll execute and the store procedure So we write the name and followed with the first parameter then write a comma and and so on. In parameters also in So if you want to execute then you have to right and click execute store procedure. And we'll get both the names, we'll pass the value here If I'll click okay now, though they won't be any But it won't throw any error because while you're we have defined that these two parameters can accept null value. So they are not mandatory. These are optional. That is the reason even though we won't receive when while Now let's discuss about in the store procedure. So if we want to return then we have to define an extra keyword that is out or output. Both keywords are valid, against the name of the parameter whose value we want to return. So let's see it with an example. So I'll open a new query. In this store procedure, one is the department So we have defined key word output, which suggests that this parameter will be the output parameter, so we can pass the And this parameter will also return the value after execution. So we can provide the There's no difference. The end result will be the same. So lets create it, we'll refresh the note to see the results. Yeah, we have the store procedure. Now in order to execute this, We have to first declare the count int, followed by the executive will provide the value. This is how we have to define and then we are writing to see the value of the count. So let being execute this, so the counties one because with a department number 10. So this is how we use the output or out keyword against the paremeter. Now let's see how we can add comments in the store procedure. So we can add the comments in two ways. One is the line comment So if you need to then we have to use two dash, And in order to forward and just writing, this is Having output parameter. Again, write star, and a forward slash. So this is how we defined the Not in the store procedure we can write or define the comments. Anywhere in SQL queries, whether it is a functions or it is a store procedure. So line comments or single and for block comments we Let's see how we can handle the exception in the store procedure. So if you have handle the exceptions and your programming or Java or C sharp, then we try catch there and along try catch sometimes because finally always execute. So if you want to close some, like we want to close some connections or we want that some statement to execute, no matter whether Then we write those So we do not have any final block in the store procedure on SQL. Let's see how we can define that try and catch blocks in store Let me first increase the font size. I'm creating this store procedure, the name DBO.USP try catch test and to write a catch block we have to provide the syntax begin try. Then in the body will write we want to write and then So end try basically ends that try block. After that we'll provide begin catch and in the catch, see is that we have returned that we are providing what is the severity of this error, what is the state procedure and which line the and the error message. So let's create this store procedure first and then we'll refresh this note. So we have this store procedure and now this store procedure I'll execute this store procedure, execute keyword followed by the No parameters, so we are while executing it. And see since we are dividing by zero it will give an error and it results in infinity and see since it will since error has encountered. So we are written the So in the catch we at and while handling the exception we have written a select statement which provide all these values. So the error number is So these are the predefined so we can check on Google that what the error severity 16 means. Then we have error straight, and which procedure So to give you the name of the procedure, the name of the procedure Error line is four, and the error message that we are dividing by a zero. So we will get the message that divide by zero error encountered. So this is how we in the store procedure. We have seen various examples So we have created the store procedure without parameter, with parameter. We have created to a store procedure with multiple parameters. We have seen that how we can you know, include comments in a single line comments, or block comments. And we have seen that how of store procedure. So this exception handling is not only for the store procedure we can handle these exceptions So we can write, try block in the catch block. Again, we can write the select that where exactly what what is the error message. We can even provide the it's up to us. So let's move to the next topic. So I hope you are clear with the concept of store procedure in SQL. Let's move to the next topic. The next topic is user defined functions. So though SQL server provides list of many predefined functions that are built into the T SQL language. These supplied or outer box functions helps in extending the By providing the ability to perform like string manipulations, data type conversions by using converter cost functions et cetera. But sometimes these outer box functions or inbuilt functions are not enough and there certain functionalities which is not provided by these functions. So this issue can be easily addressed if we can create some So like functions and programming language and all programming There are some functions which they are functions which returns a value and we pass parameters. We do not pass parameters while you know calling the functions. So user defined functions in SQL are almost on the same in other programming languages. So user defined functions of transact SQL code, which can accept parameters like how we pass a parameter Same way functions can Functions can perform complex calculations and written either a value or a table. So this written type what kind of functions we So let's discuss more of user defined functions. So again, like store procedure, functions also helps us in achieving the concept of reusability. It will prevent us from writing We can dump a set of SQL and we can call it as many as times. Like store procedure they because the user defined function reduce the compilation time of SQL query, by catching the execution Functions that are also easier to maintain because functions help us to separate the complex calculations or from the regular SQL query. So that we can understand and debug the query quicker and better. It again reduce the network traffic because of its catching plan. Functions again can be used By this we can limit the number of rows sent to the client. So we can use functions and select clause and we can use the Now let's discuss about the user defined functions One is header and one is function body. We'll see in some examples so the header contains the If there are any input parameters because again the parameters are optional whether it was store procedure or whether to the user defined function. Along with parameter we in for its name and type The function body contains the logic and it gives this logic so it contains one or many a SQL statement depending upon what we are As you can see on the screen, there are if you need to divide and some broad category then we can divide into One is that scalar value functions and one is the table valued function. The table value function can again be divided into a line and multistatement table value functions. Let's move to the next slide. Let's first discuss about what are the scalar functions in SQL? Scalar functions returns after type defined in the written clause. If it is an inline scalar function, we even don't need a functioning body. We use scalar functions need to be provided So let's discuss about the syntax. As I mentioned that the syntax So the the create alter function, it is basically the in the head or we can the written type parameter. And then in the beginning and end we define the function body. What are those SQL statements or any competitions or any We basically do it in So if we need to summarize, the scalar functions are functions which returns a single value where written scalar that can be used anywhere a Every function, whether it's a scaler or whether it is like every function must return a result using the written statement. This is kind of mandatory. So let's see some examples So in this example we with the name fn_ get department number. So we are creating a parameter employee id of the data type int here. This functions basically Then there's a begin keyword, after begin keyword we In body we are writing from employee, where Where at written employee which we'll pass when or we'll run this function. So in the right hand side, we are executing this functions and we are executing these Lets pay attention. In the where clause we are mentioning where department number equals two and then we are calling the function by providing the parameter. So when this function will execute, it will be replaced by the value which the function will return. And then that value will to filter the data. So let's discuss some examples of functions for better clarity. Let me open management studio that we close this queries first. So we'll first create a function, a scalar function without any parameters. So this is the name of the We are not creating any parameters here. And the return type is int. And I'm just returning You have just provided a SQL statement that selects some salary from employee. After executing this, This is a scalar function. So we want to verify whether the function has been created successfully. Then we have to refresh our database. So we have created this function I'll refresh that and I'll In programmability note we again functions, we have four notes, table-valued functions, aggregate functions and system functions. If I'll expand the scalability functions, we can see the name of the functions here. So in order to execute this function, we have to write select statement followed by the name of the function. If I'll execute, we have This function will return from employee table. So let me show you the data which is there in the employee table, so that we verify a result whether we got the right result or not. So if you'll calculate This is the sum of the Since we have three employees only. So this is how we'll create the functions without any parameter. Let's see how we can create So in this function we are first name and the data is varchar 50, the second and the data type of second they're they same length Return type is also of the same datatype. And then in the body we are So what we are doing, we So if it is a mathematical operations, if we provide the plus operator then we'll add the two values. But if it is string of varchar then it will concatenate the string. Space is a function in, it which basically add a space empty space. So what we are doing, we are concatenating and we are adding a space to make it more readable. So as you can see, when I hoovering over the space a keyword, it is giving me a message that So let me create this function first, function has been created. Again, this is a scalar Let me refresh the and I can see the function name. Let me execute this function, name of the function and then we have to pass the parameters. So I pass two parameters here, and the name of the second parameter. Why I'm enclosing it in single code because this is a string type. And if you want to add an we can mention it as full name. So if I'll execute it again, we'll get the results you wrote here. So this is how we'll create a functions with multiple parameters and in this select statement or we can, sorry, call in the select statement, right? And we can even call the as we saw in the example Again in the previous example, let me first increase the font size. We can even use the functions So how we can use it, let's assume I'm calling from employee and let me So to alter this function we and instead of sum, I'm just finding the average and I'm executing again. So this is how we modify the Same way we can modify So alter is the keyword which helps us to modifying the existing functions as well as existing store procedure. If I have to use the So this is how we'll do, let me show you. So I'm writing a query, so what I want to do is that I want to select the employees whose the average salary. So I'll write where clause then I'll call the function. So if I execute it now, I'll get only one result or one employee who's the average salary of all the employee. So this is how we can include or we can call the as well as in the select statement, as per our business requirement. So let's move to the next topic. So we are clear with the So let's move to the next type of function that is the table-valued functions. And as I mentioned earlier, we have two types of our One is inline, one is multi-valued. So inline table value of user defined function So scalar functions whereas the inline table value functions returns the entire table. So inline functions, if you remember, we have created view in the first module. So we can use use inline the functionality of Inline table valued to support parameters in search condition specified in the where clause. So these are the some of for the inline table-valued functions. The return clause contains Format need not to be There's no function body do you delimited by begin and an end. The return clause contains in parenthesis and a table-valued function accepts holy constraints or This is the syntax for as you can see in the slide. So the return type is table here and we generally have the SQL statement. So this is an example, in the this is an example. So here in this example get employee info. You're passing the parameter employee id and it is returning the values as a table, not as a single value. And the return statement we are providing the select statement where we are returning the and we are filtering the result sets by using the parameter employee id. And this is how we'll execute. So if you'll remember the scalar-value function, I did not use select star from, we simply mentioned select But if you're using table-value function then we are using the select star from, because we are kind of as we mentioned, we kind of use it what parameterized view. So if you need to fetch then again we use select star So let's see an example of Let me open management studio. So this is example of inline We can create parameter the parameter or we defined the parameters for the scalar-value functions. So I'm creating a We are returning a table. And in the written statement I'm just writing a select statement, select top 10 from employee, let me execute this to I'll execute this function. So to execute this I have select star from and then So I'm getting, so there so it's just fetching the nine only. So if I can go out and modify it instead of top 10 let So to modify the function we So we got the top five results. This is how we create the So this is an example of the functions without any parameters, if you required we can go ahead create the parameter as well. So to create the parameter we have to define the parameter name here and then we can have data type of parameter. And then we can write a where clause. Let's say you employee id command executed successfully. And now if I were to run this, I'll pass a value to the functions. if I'll execute it will get the values and the result sets who's employee is greater than 1003. I hope this is clear and So I'll discuss the next category That is the multi-statement. So in the inline function we but in multi-statement we can use multiple statements. So again they also so the return clause defines We cannot provide the table value function. But yes we can provide in multi statement table-valued function. That transact-SQL statement build and insert rows defined by the written clause. And the rows in certain into the variable are return as the table So here we have the syntax for this, to modify we use the alter keywords, to create we use create keywords, name of the function if you wish. We can define the parameters in the function body. Written type will always be the table, but here we can define the in the inline table-valued function. Let's see an example. So this is an example here. So we are defining the format of the table and we are defining like will be the retGetEmployeeInfo and we are providing four columns here and we are defining the data type. We're defining the we are defining whether or not on those columns. And in the function body we are inserting records in the table and we're fetching from the employee and we're filtering the result set by using the parameter which will pass when we'll execute the function. So lets see one more So you can use the same and try to write the entire So I'm skipping the example but the basic difference between will function is that here we can format the table and we can use multiple Which is not the options So we already discussed the benefits of user defined functions, It saves time because we can in a function and use it or call it as many as number of times. It's faster executions because of this, it catches the exhibition plan and use it for the subsequent calls and it reduced the network traffic. So these are few of the main benefits of user defined functions. So we discussed the user defined functions and I hope you are clear. So we can extend the capability by writing user defined functions and we can achieve the functionality which cannot be fulfilled by outer box or the in-built functions of SQL. Now we'll understand what triggers us, as the name suggests, which triggers automatically. How we can say that trigger stored procedure that when an event occur in database. So we have various type of triggers. Let's first see the syntax of the trigger and then discuss that what of triggers available in SQL. So we have DML triggers, lets discuss what are the DML triggers, what are the DDL triggers? And then we'll discuss about the syntax. So in both category we into two major types. One is that DDL at triggers, so DDL stands for the which for discussion in the few database objects, so those triggers as the name suggests, data definition language to the DDL command that or the drop of that database objects. Like if I'll create a table, if I'll try to drop a table or if you want to alter any table, then the DDL triggers will be automatically fired or triggered. The other type of so they file in response to the data manipulation language commands that start with like if you in the table, if you want or if you wish to delete some data from the existing database objects. So based on the commands If we executing the DDL commands, then DDL triggers will execute and if you're executing the DML commands then they will trigger will get fired. We can further divide the DML triggers into two types, after triggers Let's discuss what are and instead of triggers. After triggers and instead of triggers, let's see an example of DDL triggers and see how they get executed. Let's open studio, open a new query, increase the font for better visibility. Open our example sheet. So let's first create a DDL trigger. So I'm creating a trigger for create table, alter So if I'll try to create if its create table, So it really print a message. To print a message in SQL we and if it is string we'll whatever the message we want to print and the rollback as we discussed So it will rollback, that So let's execute the statements That's the trigger has So that's all about triggers. And these are some of the benefits it provides alternate matters for implementing referential So if you want to achieve a we have to call, instead of triggers it on the database objects and can be used to publish information Like the startup and shutdown, so we can call the triggers based on this and we can publish the information's because we don't have to explicitly call, there's no manual intervention. These are auto trigger events. So these are some of the Hope you enjoyed this course - [Announcer] Alright, so thank you for the great session, Anil. I hope all of you found it informative. If you have any further please comment in the Until then, that's all Thank you and happy learning. I hope you have Please be kind enough to like it and you can comment any of your doubts and queries and we will Do look out for more And subscribed to Edureka Happy learning.