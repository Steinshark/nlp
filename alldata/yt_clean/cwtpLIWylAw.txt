[INTRIGUING MUSIC] DAVID MALAN: All right, so this is CS50. And this is week 1, And it's not every day that you can but today is that day. Today, we explore a more traditional And rest assured that even if what looks very cryptic, very among those less comfortable, week zero, wherein we talked about and loops and conditionals, all Indeed, whereas last week, we focused on learning how which, again, you might have played Today, we focus on C instead. But along the way, we're going on learning how to solve problems. But among the goals for today and is just to give you week after week so to speak, via which So for instance today, we'll learn so with functions, as per last week. We'll do the same with variables. We'll do the same with conditionals, But we'll also learn at really how not to solve problems. It turns out as powerful as Macs, there's actually certain things and information they And that actually leads to a lot and surely future. So more on what we're not going to long. But beyond that, let's come So this was the very first that you wrote presumably in some form. And all it does is say &quot;Hello, world.&quot; But as promised, today, this puzzle are going to very quickly And I've deliberately color coded it now kind of resembles the puzzle piece. So if I go back, notice that we had piece, mostly in yellow with the the whole process once the button at top right of And then there's the purple block the function that does something. So if I bring us back over to there's going to be some boilerplate, on the screen that for now you like you need to write But more interesting is And we're going to see today called &quot;say&quot; in Scratch is now called But in white here, you'll see last week, whereby that's where as the programmer, can actually go. So there's a lot of distraction. And honestly, it's these tend to distract and get learning to code for the first time. But the ideas, most importantly, So how are we going to Well, it turns out, going to start writing So code as we know it, quote, &quot;source code.&quot; That's what you and I as And indeed it might look a little But unfortunately, computers zeros and ones-- more properly known those same patterns of zeros and print out &quot;hello, world&quot; on the is an H. Another pattern is an E, And then other patterns of those zeros to the computer that literally say, show But machine code would to write if it were Entirely for us, ideally, to write source code, which conceptually But we're going to need a program to code so that we don't spend our lives zeros and ones, which back in you kind of did with and holes on physical sheets of paper. We're beyond that because after folks have given us So here's what we're If at the end of the day you but we want machine code as in the middle that's going to convert You and I are not going about really any more zeros and ones. And the type of program we're going to is called a compiler. So a compiler is a program that And it can be any two languages. But today, and often, we'll talk to machine code. So this is Apple or Google or or even volunteers who have written You and I are essentially going and use it to actually get our code that you and I write in So where are we going to do that? Well, we could actually and you could download the onto your own Mac or PC. The reality is that creates so many all have slightly different computers. We all have slightly different or other operating systems. And that, too, tends to be a distraction like this or learning programming. So we're going to use the cloud instead. We're going to use a URL of And what this will do for you is absolutely everything you need for the software called Visual Studio that's actually free itself. It's very popular in industry. It's what &quot;real&quot; But it's a cloud-based version thereof. And so everything will just But toward the end of to be to get you off of to get you to download this freely or PC if you so choose so that can come off. And then even if you never you don't need any class's You'll have everything you want But for now, it'll So in just a bit, I'm going to go And I and you will see looks a little something like this. The colors might be different Fonts might be different, and so forth. But in general, it consists So over here at the top is where we So it's a tabbed interface like And this is that same C So this is where, in a moment, Over here at the bottom is a terminal window, or a console. And the terminal window is where for compiling our code, And we'll see today a contrast or GUI, which has menus you click and are very familiar with, or CLI. And so we're using And command-line interface just means, You can click, click, click It's not going to generally do much commands at the keyboard. So in a weird sense, it's a step backwards from the Macs, the PCs, have, which are very graphical. But it turns out, once you become a you can be a lot more productive, by learning to harness and using both types of interfaces So more on that in just a bit. Over here at left, you're going to see or Windows where any of the files are going to end up, as well. So it gives you the best of both worlds. You can point and click on the left, as we'll soon see. And then along here is the where there's just VS Code-specific features. And if you're in your you click through in or zoom out so you can see everything. You'll see CS50's own rubber that will be there throughout any and all of your questions, as well. So more on that soon, too. So here's the code that I just like we wrote our very first So let's go ahead and do exactly this. I'm going to switch over where I've already logged And just to keep the focus on the I've hidden the File So you're seeing here the area and the terminal window, where all But I've just simplified on the interesting parts for now. So how do I go about actually writing Well, the teaser is going One of these is a command And Code is just going to let like a file called &quot;hello.c.&quot; Make is going to be, for allows me to make the program, that code, so from C to zeros and ones. And then weirdly, but ./hello is going to be the so the textual equivalent of like or tapping an icon on your phone. So that's it. These three commands are going to allow code ultimately. So let's go ahead and do that. I'm back in my VS Code interface. I'm going to go ahead And notice a couple of details here. So one, there's this weird dollar sign, but it's just a common convention to represent your prompt. So if a TF, if I ever we really mean, go to Go to the dollar sign. And the dollar sign is Sometimes it's a different symbol, Now that I've typed I'm going to go ahead and hit Enter. And maybe not a brand new tab, a new file And just like Word documents have their and Excel files have .XLSX and PDFs have so do C files have a file Now, a couple of minor points. Notice that, by convention, going to name my files in lowercase. By convention, I'm never going And my file extension, too, Long story short, accidentally or using file names to make life harder when you're So just beware silly, So all lowercase, no spaces for now. So my cursor is literally wants me to write some code. I'm going to do this from memory. It'll take you presumably some But I'm going to go ahead and pronounced &quot;include standard io.h&quot;-- more on that soon-- int main(void), with some Notice what's about to happen In the code I want to call curly braces, the don't use often in English, on your keyboard somewhere. But notice what VS Code does, and is it finishes part of my thought. So I'm only going to but notice I actually get two of them. And if I hit Enter, notice that not it also indents my cursor because, whenever you're doing something happen if the thing above is indentation going to be a So VS Code and programs keystrokes so I don't have to or hitting Tab or wasting All right, so with that and type the last of where the F is going to mean And notice it gave me two. It gave me the second one for free. Sometimes it will get confused. And you can certainly override And now, unlike Scratch, I'm going to need to use I'm using an English word or phrase &quot;Hello&quot; comma &quot;world.&quot; And then at the very end of my line, I'm going to use a semicolon in C. So that's a lot of talking, It's technically six lines of code. But honestly, the only interesting is really line 5. Like, that is the equivalent Now here's where I'll that I didn't make any It's going to automatically save for me. And I'm going to go back to my going to do that second Common mistake-- you do not already made that file. You say &quot;make hello,&quot; which is the name want to create. And Make is smart. It's going to look in my folder. And if it sees a file going to convert that and save the results in a simpler &quot;hello,&quot; like an icon on your desktop. Now, hopefully nothing will happen. And that is a good thing, If you do anything wrong when going to see one or many more at you that you made a mistake. Seeing nothing happen So the last command, to run my We've written code to create the file, code to machine code. So lastly is &quot;./hello.&quot; So this now is the equivalent of or single tapping on a phone. Enter. [SIGHS] So close! All right, it's pretty good. I got the H-E-L-L-O comma space &quot;world.&quot; But there's something a What might rub some of you Yeah? STUDENT: The dollar sign. DAVID MALAN: Yeah, so the dollar world&quot; dollar sign in my output. But no, that's just kind of a remnant of And this is a little nitpicky, doesn't look right. It's not quite correct. So how can I go about fixing this? Well, here's where, at going to take some introduction to The simplest instinct Well, let me just hit Enter like that. But this should soon, the wrong way because to see that programming and other languages Like, you should really start and So if you're in the habit and finishing your generally programming So this is, in fact, not And just to show you as Let me go back to my I'm going to rerun &quot;make hello&quot; Enter. And there we have it, like the And it's yelling at me. It's missing a terminating character. And there's some red in here, some Sometimes these error messages Sometimes you're going to rack your But for now I've kind of spoiled it. Obviously Enter is not So let me clear my terminal Let me delete this. And let me propose now that So backslash n, it turns the sort of magical way of a new line at the end of your output. So let me go ahead now and rerun &quot;make I need to now reconvert, recompile &quot;./hello.&quot; And now, there is the canonical that I hoped to write So for now, don't worry Don't worry about the standard io. Don't worry about int or main Focus primarily on line 5 here. And over the course of we'll start to tease that, for now, you should Questions, though, on any of Yeah? STUDENT: Why is the backslash DAVID MALAN: Sure, why is the backslash if you will? So short answer is that's to be because inside of the quotes to output to the screen. So if you want printf, this it must be included in the STUDENT: So the backslash n [INAUDIBLE]. DAVID MALAN: Exactly. Backslash n is a special pattern move the cursor to the next line. Good question. Other questions on any of these steps? Yeah? STUDENT: [INAUDIBLE] DAVID MALAN: A good question. So what if you actually Things get a little tricky there. Let me go ahead and So it turns out-- and this is when you want a literal you actually put another But this is not going to But there is in fact a solution to that. But let me propose that against what we've actually done. So here is the first Scratch program Here, recall, is the mental we have for almost everything an implementation, say, in code of for solving problems. The inputs to functions, are called arguments, or in And sometimes functions Like last time with Scratch, that magically appeared as a sort of side effect So just like this then, we The Say block was the And then we had this here, side effect. Well, how do we compare Well, here's the Say block at left. Let's compare now to Notice a couple of things to is almost the name of the function. It is technically &quot;printf,&quot; for Notice the parentheses in C are kind And that's probably why MIT chose use parentheses in this way. You still write &quot;hello, world&quot; just But per our demo thus far, you and double quotes, not single quotes-- And in order to get that new And one more thing is missing. Yeah? STUDENT: Semicolon. DAVID MALAN: The semicolon So all of these sort that honestly you will forget initially but you'll soon-- within develop the muscle memory where jumps off the page right at you. All right, so this backslash just so you know, as an escape sequence. And so backslash n allows us might otherwise be hard to type. But let's tease apart some of the other So include stdio.h. It turns out that in C, a comes with the language is So if you want to use certain functions, hey, I want to do some Like, I want to print And that's because, for as living in this file, stdio.h. That's a bit of a white lie for now. But in stdio.h is essentially that will teach the compiler how So &quot;hash include&quot; here before it does anything else on the local hard drive and copy/paste it there so So this thing, this .h file, is what And if you've ever heard if you have programmed before, we'll start calling a library. So a library in the world that someone else It's usually free and you can literally see the or sometimes you pay for it. Sometimes it's closed source, They won't show you the code, but they So libraries are super even I don't really I've taken for granted for 25 stuff prints on the screen. But someone smarter than the code in C that figures out how to forth onto the Mac screen, the PC else. So libraries allow us to stand and so that someone else and we can now solve problems not the basic commodity stuff that So again, library is code A header file in C is that gives you access to the same. And so for instance, if you there are, what are called in the And these are textual files, via which you can just or how you can use its The reality is they're written They're written for folks who They're written for and by folks And so frankly, they're a And so CS50 has its own version where you'll see not only the official but also staff-written what all of the various popular and what their outputs are. So for instance, under stdio.h, you You can go to a URL like this, And you can actually see So let me go ahead and do this. I'm going to go ahead I'm going to go to manual.cs50.io. And let me go ahead here that are frequently used in CS50. And under stdio.h, you'll only one of which we've even I'm going to click on printf there. And you'll see an interface might be a little to start to look more and more familiar. So first of all, you'll see that if you need to include this header file. Like, you literally copy and paste You'll also see this, which but this is kind of a hint as to what But more on that soon. But more importantly, you can And because these descriptions, when are written by me and the course's and course assistants, you'll find them And so long story once you want to learn and also what other functions exist. In fact, if I go back you'll see that there are all of used in CS50. And there's hundreds But learning a programming language but rather just getting a sense of you do want to try something new. But what is important is that we have our own header file that we have written in the first few weeks of the class. These are training wheels that But it turns out in C, programmed before, it's actually to get input from users, to get them else. Like, C does not make this easy, in languages that wasn't zeros and ones. So you have to do a lot of But we'll put on these training so that we can focus really on the and programming without getting that we will come back to before long. So for instance, CS50's own But within the library a function called get_string &quot;String&quot; is a synonym for just So get_string will prompt the Get_int is shorthand for want to get a number from the user. Get_float is a little more arcane-- like a real number with And dot, dot, dot, there So this is to say within CS50, we've got we can actually get some input. And let's go ahead and use one because recall that last week was this one here, where we We said &quot;hello, David,&quot; &quot;hello, Julia,&quot; whoever it But to do that, we needed And then we used the Say block. And then we used the Join So let's translate because it's a little more interesting we'll start to write. But we need a slightly Still have a function here, which is the We still have some But previously, I said that printf have side effects, which is that happens on the screen. Other functions actually have, what And this is kind of analogous to a writing down the answer on a slip the programmer, the slip you want with it without to the world with, like, a So a return value is germane because recall when we used the where did my name end up initially? It didn't go on the screen yet. Where did it end up? STUDENT: In an answer. DAVID MALAN: In an And that special oval puzzle represents a return value, so that the answer is written down on So that's what we want a return value that I can whether it's print it to the save it in a database, or anything else. So here, for instance, is the input to the Say block-- or the Ask unquote. The function, of course, And the return value was &quot;answer.&quot; If we now consider how we it's going to look a But it's going to follow a after any time we do code like this. So get_string, I claim, is going to to the Ask block. And to be clear, this is a CS50-specific But we'll show you in a few weeks what cannot use it moving forward once you're Notice I've put as sort of a placeholder for user input. And that user input is going But I can't just put &quot;what's What do I minimally need STUDENT: Quotes. DAVID MALAN: Yeah, so the So let me go ahead and add those in. I left a space here, not for a new line. I could move the cursor But I minimally at least want to move just so it looks pretty, so that there's a space between But it could also be backslash n. That's just an aesthetic But what do I do with the answer This is where the text is In C, you start to use an equals And on the left, you put the want to store that return value. So a return value is kind You can do with it what you want. And if I want to store it like x or y or z in math class, I or y or z or, more reasonably, No spaces, generally lowercase, same now, ask the user, what's their name? Whatever they type in, go to left in this variable But C's not done with us yet. If you've learned Python you'd kind of be done In C, though, you additionally have to you want to use. So if it's a string of If it's an integer, a number, you say So it's a little more pedantic. It's more annoying, frankly, the more But this just helps to store it in the computer's memory. And I'm so close to being done with STUDENT: Semicolon. DAVID MALAN: So semicolon. And mark my words, if you've never this semester, you will You will raise your hand. You'll get frustrated because you can't You will run into But do take faith that It doesn't mean it's not clicking It just takes time to see these So there now is my semicolon. All right, let's go ahead with that return value using the second So when I wanted to say, &quot;hello, I kind of stacked my This is actually similar to Python and have learned. But C is a little bit different. And the closest analog to this Scratch I still use printf because Inside of my parentheses, I'm going to So there's no real analog in C of Join. Instead, there's a way to specially in &quot;printf.&quot; And what you do in printf is or human words that you want. You then use %s a placeholder. If you want a string of text you literally write &quot;%s.&quot; And let me anticipate a question from There's a solution to that, too, if you But it's deliberately a so that the probability that we is just low that no one really All right, but that's not quite enough. In addition to saying &quot;hello&quot;, and just for vocabulary Again, &quot;format&quot; being the F in printf. I still need my double quotes In this case, to match I am going to go ahead to move the cursor to the next line. And now I've left a crazy amount of Does anyone have an instinct going to want to add after the quotes STUDENT: The answer. DAVID MALAN: So answer itself. I need to somehow tell otherwise known as an argument, what And so I put a comma and that I want printf to figure So honestly it's a little annoying, Newer, more modern languages, in the course, Python have much more user-friendly But once you wrap your mind around it's just formatting a string into this format string, so to speak. And again, the comma here is important. This signifies that it takes one input But notice this comma. There's technically two commas. But I'm not claiming that this Why? This comma I'm pointing STUDENT: It's because that comma's and it's been part of the string. DAVID MALAN: Exactly. This comma that I'm pointing to is part part of my string of English text. So this is just English grammar. This is sort of C syntax. And again, these are the sort that we're using the same symbol for So just stare at your code, and generally the answer will OK, questions now on this syntax Yeah? STUDENT: Why is the backslash DAVID MALAN: Why is the So the way functions is that you pass to them one And then if you have a second argument, But the way printf works is that its that you want to be formatted for you. So anything you want printed on the And you can perhaps If I actually wanted to say multiple maybe first name, last name, I could %s, if I had two variables, one called But then I would need another comma And so it's very general Questions? Yeah? STUDENT: Can you abstract this further DAVID MALAN: OK, so can you abstract comma answer? Short answer, yes, but as you can in other languages. So that's why we're But you're going to love something where a lot of this But you'll see also in Python and they still are inspired So just understanding it now will down the line. All right, so let's actually rather than just talk about Let me go over to, for And I'm going to go ahead now and I'm still in my same I'm going to clear my terminal And to do that, I can But this is just for aesthetic's sake. That's not functionally that useful. Or you can hit Control L to But I'm going to go back to line said &quot;hello, world.&quot; And I'm going to do this instead. I'm going to give myself Sorry, I'm going to give answer, the type of which is string. I'm going to set it equal value is of get_string, asking an with just a single space followed by a semicolon. Then I'm going to go ahead unquote, &quot;hello, comma, and then what goes here again? STUDENT: Answer. DAVID MALAN: This is where answer goes. And then I just need a But I think now that I'm done. But let me point out This got very colorful, And it's not like the black and white This is because what programs like VS or rather it syntax So syntax highlighting means so that different ideas pop out. So you'll notice, for instance, are in purple because they represent Here, &quot;what's your name?&quot;, is a light blue instead of white. But it's still going to be consistent as well. So I didn't type anything special. This isn't like Microsoft where I'm highlighting and This is all happening automatically. But it's just unicode text. It's just being and having these colors applied so that Now, I've unfortunately made a mistake. But I'm going to deliberately will probably make this mistake. I'm going to go ahead again, because I've changed my code. So I have to regenerate the machine But unfortunately, when the errors don't even fit on the screen. So let me make this bigger. I'm going to click the to make my terminal And you'll see that there's than there are of code often which is written pretty been writing code for 10, 20 years. But there are some details that pop out. So notice the problem is So great, it is my fault. This syntax And this next 5 means character 5. So you can literally triangulate your and then over five, and Specifically, &quot;the area is use Did you mean standard in?&quot; I don't think I did. Like, I do want string, and then But what's important here is not the the implication that it &quot;string&quot; or &quot;get_string.&quot; Now, why might this be? Yeah? STUDENT: You said that DAVID MALAN: Exactly. Because we are using is a CS50 thing that C does not know about it I have to teach the compiler just like I taught the compiler the appropriate header file. And in this case, quite simply, That now teaches the wrote this function already, get_string, called &quot;string.&quot; So now if I go back and rerun the exact same command, &quot;make now nothing in fact goes has been brought up to speed with And now if I do ./hello, Enter, And notice the cursor because I thought that looked next to the question mark. D-A-V-I-D as my input, and Enter. And &quot;hello, David.&quot; Questions on any of this code thus far? Questions? Any of the code. No? All right, so let's introduce some It turns out that there other types of variables in but indeed, per before, integers, &quot;int&quot; for short, floating and a few others as well. So rather than only get a little more here and see what we can do with &quot;int&quot; for short, by taking a look at how about get_int. And for this, I'm going to give us those format codes to which fortunately are pretty straightforward. And here is a list of most that you might ever In particular, we saw %s for string. And you can perhaps guess which one STUDENT: %i. DAVID MALAN: Yeah, so %i is what And this is the kind consult in the manual There's only a few of them But let's go ahead and use integers just using functions. But let's revisit this And conditionals in Scratch were like Like, do you want to do this thing It's a way of making is going to be super useful and pretty that we try to solve. So let me give you a in C by doing the So here in Scratch is how we might one is less than the other, then &quot;x is less than y.&quot; So kind of a stupid program. But just to show you the this is how you would ask the question, So Say is the function. &quot;If&quot; is the conditional. And the green thing What did we call it? Yeah? STUDENT: A Boolean. DAVID MALAN: A Boolean which is just a fancy way answer is true or false, yes or no, 1 or In C, the code is going So it'll take a little bit of habit, a But you're going to say you're going to say &quot;x less than You're then going to And then if you want to say, in C, what function should So printf. So printf, quote, unquote, So it's a bit of a mouthful, Name of the function is printf. In the parentheses, left and which is, quote, unquote, And again, just for aesthetics, to which you don't have to worry about in speech bubbles, we're So notice that these called, much like the are kind of hugging the code like this. And I'll note that If you only have one line of you can actually omit the And the code will still work if Why? Just saves people some keystrokes. If you have two lines, three you need the curly braces. But I'll always draw it with so it resembles Scratch As an aside to some of you you might be cringing now like your curly brace to be too, is a stylistic choice. And we'll talk, too, Aesthetically, stylistically there But generally in a class, in a company, would simply standardize on So we'll use these rules for formatting All right, any questions All right, a couple of others then. So here is how, in Scratch, we might If x is less than y, say x is less In C, It's going to look But notice I'm adding an &quot;else&quot; keyword I'm going to have a But in C, even though it's it's just text, no more puzzle so to speak, and it's So it's following a pattern. What about a three-way fork in then say x is less than than y, say x is greater than y, else Well, you can probably On the right-hand side, In fact, if I add in the printf's, at least logically. But there is at least one but it's not this time. Yeah? STUDENT: The double equals. DAVID MALAN: Yeah, the double but it's not in fact a bug have an intuition for why I did use Yeah? STUDENT: Because otherwise it DAVID MALAN: Exactly. Well, otherwise it would be mistaken assignment of a variable. So recall that in previous code, we used an equals sign to assign, from And that's a reasonable decision. &quot;Equal&quot; kind of means that be equal even though you think Unfortunately, the authors of C kind of And presumably, decades ago we've already used a do we represent equality of two values, all right, we'll just use two instead. And thus was born this decision. Is it the best one? Who knows? Crazy enough, in other you have not just one, but in a row to solve yet another problem. So reasonable people will disagree as But in C, this is what you must do. But there's a bad design It's still correct, the But I bet I could critique the quality and the C code for reasons, what? STUDENT: Do we have to do DAVID MALAN: OK, no, Do we have to ask this third So short answer, no, logically, right? Just based on arithmetic, either x or, what's the only They must be equal, logically. So technically, you're just kind by asking this question at that point, the answer. And you're wasting your time to type out more code than you need because logically So I can tighten this up, get rid of And I can do the same thing the double equal sign altogether, but because you're wasting time, because questions, two Boolean expressions, a total of three questions at most. Other questions then on this kind No? All right, so if we have these puzzle how can we go about Well, suppose that we actually Let's introduce variables in C, as well. We saw an example using But what about with Well, you might not have But here's the orange via which you can create a variable And you can set it equal Now, you can perhaps guess If I want in C a variable called I use a single equal sign read it from right to executed from right to left. But that's not enough in C. STUDENT: Data type. DAVID MALAN: I need a what? STUDENT: You need a data type. DAVID MALAN: So we need a data type. And if it's going to be an integer, And now the other mistake STUDENT: Semicolon. DAVID MALAN: So a semicolon So it's a little more But if you read it how you tell C to give you a and initialize it to a value of 0. That's all. All right, how about, in Scratch, if by adding 1 to it? In Scratch, it's super simple. You just change it by if you want to go up In C, it turns out you have a And this looks like it's but that's because equals So this line of code is not saying because that's just not But this means take and assign it back to So it's like incrementing But this is such a common to increase or decrease there's a more succinct syntax. This is identical. And it might take you a little but it just saves you some keystrokes. But it similarly adds 1, or And this is such a common that there's an even tighter And you can literally just say counter++ All three are exactly the same. All three are perfectly correct. But you'll learn over time is probably going to save you some time. Meanwhile, if we wanted to do the in Scratch, we could similarly do yeah, we could do minus All right, so just some additional from scratch to C. Why don't we go in the following way? Let me go ahead and go back to VS Code. And let me propose that In VS Code, I'm going to go ahead I'm going to close the X. I'm going to go ahead and because the purpose in is going to be to compare This time I'm not going to mess up. I'm going to preemptively I'm going to preemptively And here, too, is a very common mistake So when you email us asking that's because that is not the word. It is &quot;standard io.h,&quot; meaning stuff involving the Then I'm going to go ahead and, but we'll come back to that And now inside of &quot;main,&quot; which is just again you can think of this as being This just kicks everything off. I'm going to go ahead and do two things. I'm going to go ahead and and I'm going to prompt and just say something Then I'm going to do int y equals space. And then let's just do something then go ahead and print &quot;x is less than y So it's not a very deep program. It's just going to do what most any But it's at least demonstrating something like a conditional in code. So let me go ahead and re-- let me compile this code for the Nothing bad happens, which is good. And just to tease this apart, essentially means that the So dot means in your current folder. And we'll eventually see that folder, like the one I am on my computer's hard drive. All right. ./compare. What's x? 1. 2 for y. And hopefully it should So pretty straightforward. Proof by example. And hopefully this would But if I flip that around and I rerun nothing's going to happen. But you would expect only one Boolean expression I should actually type this out. So what's going on? Well, if this helps useful to think about the logic of as kind of a flowchart of sorts. And we'll put up a few of you're a particularly visual thinker. And this represents So here in this picture is where And any time you see a diamond, think a question that's being asked. And the question being That has two possible answers, true So let me propose, per the arrow, that per this rectangle, &quot;x is less than That's it for the program. But logically, if x is is that question's answer is false, and stop. So this is a control-flow diagram. It's just a pictorial on a piece of paper that just represents And this gets a little do something else with the code. For instance, instead of just concluding let's go back to the code here. Let me clear my terminal window. And let me add an &quot;else.&quot; So else, go ahead and print out &quot;x&quot;-- I don't think I want to say It's not quite right. What would be reasonable to say here? STUDENT: &quot;x is not less than y. DAVID MALAN: Yeah, subtle, but &quot;x is not We don't know if we're only So if I recompile this, Now if I do 1, comma 2, I If I rerun ./compare 2, comma 1, It's not as good as might be ideal. It'd be nice to know if it's But at least that's all of And just to now paint to my control-flow diagram, this is what it looked Now that I've added in a now, if the answer is false, I first and then I stop the program. So same idea, but the if you've taken a 10 or the like, conceptually. All right, what if we do Let's actually have Let me go back into my code here. I'm going to hide the terminal window And I'm going to say, than y,&quot; then go ahead and say but rather &quot;x is greater than y.&quot; And then down here, I'll do an then I can go ahead and say printf, close quote. All right, so now if I run it-- let Let me rerun make compare. Let me rerun ./compare. 1 and 2 are the same. Let me rerun it. 2 and 1 are the same. Let me rerun it a third time. 1 and 1 are now in fact equal. So this works correctly. But why did I make a point Put another way, couldn't I just and just say, if this, then that? If this, then that. If this, then that. Just ask all three questions. Keep the code simple. Don't bother with these else's. Would this work for me? Yeah? STUDENT: It just seems like doesn't have to run the rest. DAVID MALAN: Yeah, so it saves a little just like in English, this is like And it's not harnessing any in order to decide whether you should In other words, if x is less figured that out because it's going to print this. Why would you waste time it's not going to be true? Why would you waste time it's not going to be true? And so the point I wanted is that if we visualize what the flow chart looks And let me zoom in at the top. If you ask the question you're going to go ahead Then if you go down you're still going to And then below that, you're still So no matter what x and y are, you're of the time. But if we actually go in and where if I go back to my code and I undo and now let me go back which I claim is bad because it's or two of which might not be necessary-- the flow chart gets a little but it's going to be better Why? Well, because if I start at the is x less than y. If the answer is true, OK. I say x less than y. And then, boom, I sort of to the end of the program and stop, If, though, x is not less than y, OK, But if the answer is true, boom, and then I stop. And only in a perverse equals y, which I'm going to claim only then am I going to ask one, two, or not to print something at all. So this is what we mean by of code-- because it's still correct-- but this version is better going to go down this branch or this frequently. Any questions now about this code Yeah? STUDENT: I don't know if [INAUDIBLE] DAVID MALAN: A perfect segue. Why did I bother, though, Don't need to because hopefully I have the this would be even So thank you for teeing that up. This is the same picture. It sort of got bigger fewer shapes in the picture. Notice that if x less than y, If x is not less than y but it's Or if it's not greater conclude x indeed is equal to y. And again, we stop. So this picture is about well designed as we can make our logic. That's about as good as So if I go back to my match that, the only thing I need to Don't ask that third question. Just logically, mathematically going to be equal at All right, any other questions on this? STUDENT: [INAUDIBLE] DAVID MALAN: Sorry, a little louder? STUDENT: [INAUDIBLE] DAVID MALAN: Really good question. What if I put in something So here, too, is where the CS50 library will be your friend. So for instance, if I run ./compare I could type in &quot;cats,&quot; Enter. It's just going to prompt It's not going to let me It's going to force me C does not do that by default. And in fact, as we'll soon C is actually a very dangerous because it just trusts that the And as such, a lot of today's if it's using C or another are actually very vulnerable whereas other languages that we'll get like this. All right, so besides this, let's how about. So besides strings, besides chars, Sorry, besides strings, there's this other data type here in C So here, let me just tease this apart. A string is indeed a string of text. It is zero or more characters together. A char is always Not all languages bother distinguishing and a string of characters. But in C, a string is but technically can be zero. Coincidentally, it could be one. But it's capable of being more. But a char is literally, as the All right, given that, notice besides get_string, besides so another handy function for from the user. Now, why would it be useful to get Well, what if you're that you and I do pretty frequently or fill out some form? You agree to some form So in fact, let me go And let me propose that I create so something akin to asking So in VS Code, I'm going And I'm going to do So include CS50.h, include And then inside of main, which I'm going to do this. Go ahead and get a and ask them something expecting a yes/no response. But at the beginning of this line, I So I'm going to put it C. And in programming, if you're it's OK sometimes to use X in larger programs, you'll benefit like we did from the get go. But C has to be a specific type. So I'm going to literally I'm going to finish my And here's now how I could I could do something like this. If the value of C equals lowercase 'y,' then go ahead and Else if the variable C has a value and print out, say, &quot;Not agreed,&quot; as terms and conditions. But notice these are not typos. What did I do ever so subtly Yeah? STUDENT: Single quotes DAVID MALAN: Single quotes So here's the heuristic. When using strings, which are have to use double quotes. When using a single character, around the single character. So let me go ahead now and, make agree. Nothing went wrong, which and let me go ahead It seems to work. Let me run it again. ./agree. And just if I type in something random it doesn't crash. It just ignores me because I only But notice that it's actually Let me run it again. ./agree, Enter. How about capital Y because, OK, it just ignores me. Let me do it again. ./agree, because my Caps Lock is down. OK, it just ignores me. But this should make sense because So how could I fix this? How could I fix this without just because that would then break Yeah? STUDENT: [INAUDIBLE] DAVID MALAN: Yeah, let's just add So if variable C equals equals and say printf agreed. And then let me close my Otherwise, down here, else let's go ahead and again And I claim that this It's a four-way fork in checking for lowercase, uppercase, respectively. I claim that this is even if you've never programmed to rub you the wrong way. Like, we can do better. This isn't the best design. Why might that be? Yeah? STUDENT: Could you change the character [INAUDIBLE]? DAVID MALAN: Ah, clever. So could we change the variable or maybe forced to lowercase? No matter what the human types, we we can just simplify this again I love that, but we haven't in C that would let me change So we'll get there, but a Other thoughts? STUDENT: Use &quot;or.&quot; DAVID MALAN: So we could use &quot;or&quot; What I don't like about this, to be And there's this principle in like, don't repeat And by that I mean I literally I have the same line 18 as 22. And if anything, one, I literally wasted Put another way, per our what if I go in and just I want to be more Well, I might forget to And let's just claim for today's it's a bug, because I want So don't invite situations in one place but not another. Just only write it in one place total. So I like this idea of So let me go ahead and And just to be clear, too, while this is in VS Code based on how we've how much I've indented because in is generally to indent four So those dots just help to manually eyeball things yourself. But let me delete those lines. Let me delete these lines. And this is going to but the way you can &quot;or&quot; speak, like &quot;or&quot; them together, but you use two vertical means the English word &quot;or.&quot; And you can just ask the quote, unquote, capital 'Y.' And then down here, I can say So it adds a little more but it doesn't add redundancy, I've not added more curly Now as an aside, there's the opposite Just so you've seen it, I could do this. &quot;&amp;&amp;&quot; in C is how you express that and the thing on the right must be true. But why would this make no STUDENT: It can't be DAVID MALAN: Yeah, at a character can't be both That just makes no logical sense. So indeed &quot;or&quot; is what Other questions? STUDENT: In CS50.h, is there a way to DAVID MALAN: Good question. Via CS50.h, is there a Short answer, no. But C is going to give And in fact, next week, among the things And if you've programmed that it actually doesn't work But that's a problem, But that transcends CS50. That's a question for C. Other Just to make this real then, or terms and conditions on a odds are there is code as simple Maybe it's graphical. Maybe it's checking for or maybe hitting the Enter key. But underneath the hood of conditional checking All right, how about from last time, which namely loops, things that And these, too, are everywhere in code. So in Scratch, here's how we might In C, it's going to look a little weird. But you will get used to this over It looks like a mouthful, OK. But let's tease it apart line by line. And you'll see that you won't have that going to start to look But what are we doing here? In C, you don't have the luxury of that just do the work for In fact, in C and programming the work is on us to how can I use functions, and implement some idea like And in C, here's how this might work. How can I go about doing something Well, I know about variables now. We're about to see loops. And I've seen how I can update some value to them. Let's combine those ideas. So first, I'm doing what with If a friend cared to ask you, like, later today, what would you say? STUDENT: It's creating a variable called DAVID MALAN: Good, it's creating and setting it equal to 3. I'll use slightly new jargon. I'm defining a variable, would be and setting it equal to 3. So I'll use my hand to And that's all a variable is. It's like storage in some case that my hand in this case or Now what happens when using a loop in C? There's different types of loops, one one of which is called A while loop works like this. Inside of parentheses is a Boolean of a conditional that asks a question. But this time the question do you keep going through the So it's not a one-time It is checked again and when it is time to stop All right, so it's asking Is counter greater than 0? OK, obviously the answer is true because So what happens? C goes inside of the curly and executes printf of &quot;meow,&quot; which The next line of code is the same as just So I think I take down one And what happens next? Well, this you just kind Once you get to the end you go back to the and ask the same question, So is 2 greater than 0? OK, obviously so. So you go into it, you print a &quot;meow.&quot; You go into it and decrement So now my hand is holding up one. Now we wrap back around Is 1 greater than 0? Obviously. We print out a third &quot;meow.&quot; We then decrement counter We go back around once more. Is 0 greater than 0? No. And now the program just terminates. Or if there were more jump outside of the curly braces So that's all that's happening. And so this is what MIT has the But at MIT, someone code that looks like this to give us So what we're learning today is how by just using lower-level plumbing, Yeah? STUDENT: What would happen if you inside of the curly braces? DAVID MALAN: A really good question. What would happen if you created the Short answer, it just because if I were to for instance, to move this line of code now the very top line is trying to So C is very literal it. Reads top to bottom, left to right. And if it hasn't seen you you're going to get some scary All right, other questions No? All right, so if we want to then let me propose that we So besides this version do something more canonical, So you're totally fine with It's what Scratch uses by It does what it says. Frankly, once you get like most typical have a single integer in a program they'll just use &quot;i&quot; for integer When you have larger to start using A and B and C and D and because nothing's going But when you're doing something super using a short-named variable is But I can tighten this up further, What else can I do, if you recall? Over here? STUDENT: [INAUDIBLE] DAVID MALAN: Sure. STUDENT: A for loop? DAVID MALAN: Oh, OK, for loop. Yes, that was my spoiler. But while in a while loop, I can Over here? STUDENT: Instead of i equals i minus 1. DAVID MALAN: Yeah, instead I can actually tighten this up this way. And we didn't see the the same idea-- i minus equals 1, or So when you get comfortable with are correct. This would be more So if you want to write write code, adopt ultimately All right, so that just does But let's now put this into practice. Let me go back to VS Code here. Let me go ahead and clear my terminal And let me go ahead and So code meow.c. And let me do this Let me include stdio.h. at the top, int main(void) thereafter. Inside of there, let And then you know what? I don't want to keep typing that. Let me just go ahead and So I claim this is correct, make meow. ./meow, done. I've got code that prints But this, again, should Why? Yeah? STUDENT: There's duplication. DAVID MALAN: Because what? STUDENT: There's duplication. DAVID MALAN: Because I have duplication. I mean, I literally And that's kind of a good rule of thumb. If you, in the future, start finding within the same program, you're There's a better way to design So this is clearly a So let me go ahead and actually do that. Let me just go ahead and Let me give myself a variable Let me go ahead and and check that i is greater than 0. Inside of this loop, let me But I'll reuse that code again going to do i minus minus. So that's the exact same code, the tight Let me go ahead and &quot;make meow&quot; Why is this version better? Because if you want the cat to meow If you want to make the cat a dog, you albeit changing the file name in one place, not worrying about But there are other ways to do this. For instance, let me propose that. And actually, let's see, let me propose just to be clear-- yeah, let's go ahead and propose we can actually count I'm kind of forcing this idea of But when normal humans in this you probably do 1, 2, 3, and done. Like, that's how we would Well, we can do that, We could initialize i to 1. We could check that i is And we've not seen this no easy way on a typical keyboard like in a math book. So we use two characters, a back to back. And that means less than or equal to. And this is the same idea so long because that'll start at 1, It will go up to until i is equal to 3. Once i becomes 4, then that Boolean So it stops after three &quot;meow&quot;s total. But there's another way, the most conventional and even though it's just as correct. In CS, if you've seen already last week, Why? Just because, so we're not So generally when you start you should, quote, unquote, count up to but not care about so you don't And so this would be the of doing what we just described. But they're all correct. You can make an argument that This is what most people, OK, other questions on No? All right, how about-- we got some cookies on the horizon. But before we get there, let's So how about doing a little bit And I think we heard it over here. Turns out there's another So this one here. And this one, if you can believe it, than the other way. And this is going to be There's rarely one way, You're going to have bunches of And your code might look different tends to reach for a different And here's another tool-- and as you proposed earlier-- a for loop. A for loop is just another way using slightly different syntax. And it's appealing, frankly in general, It just saves some keystrokes the order in which it works. This code is identical to But aesthetically, of How does it work? In a for loop, notice is not a single simple There are three things. One, before a semicolon, is a to do your counting typically. Second is the Boolean expression. So it's still there. It's just surrounded on the left Lastly is the update. What do you want to do at the end of So you can probably imagine How does this work? The first thing that called i is defined and That happens once and only once. Then we check the condition. Is 0 less than 3? Obviously yes. So now we don't do the plus plus yet. We go into the loop. And this is where the for loop's We print out &quot;meow.&quot; Then what happens? There's no more lines. So we go back to the for loop, So now i is 1. Then we check the Yes, because 1 is less than 3. We go back into the Now we go back to the We check the condition. 2 is less than 3 obviously. So we go back into the Then we do the increment. i is now 3. Is 3 less than 3? No, so we exit the loop, going down here if there's more code. But how many times did I say &quot;meow?&quot; 1, 2, 3 total, when my Questions on this alternative syntax? It takes some getting would write loops using STUDENT: Could you now in the curly DAVID MALAN: Yes. If you really want to yes, it is correct and common to have one line of code therein. We in class will always because this is the kind of thing where, and add a second line. Like, darn it, like you things will not work as expected. So in general, use the curly braces, Other questions on 6? Yes? STUDENT: [INAUDIBLE] DAVID MALAN: Can be used without, what? STUDENT: [INAUDIBLE] DAVID MALAN: Oh, could you Yes, there are very fancy things you But yes, if you want to get rid of the here. And that would actually which may be a good thing that you want to tick forever, but Good question, though. All right, so beyond that, let's just Just in case it helps this is just another more of a visual what it is this loop is now doing. Previously, all of our arrows went But now there's an arrow because of this loop, this cycle. So when we start this We then check, is i less than 3? Obviously it is, so we print &quot;meow.&quot; We increment i, and then we go We check the condition. We print &quot;meow.&quot; i plus plus, go back, go back. Now, if i equals 3, 3 is not less And we stop. So again, it's just about how the code in might alternatively work But there's this one other recall, that's not the is for finite numbers of And in C, there is a way to do this, There's no forever keyword. But you can use the while you can actually use the for loop So here, I can actually say this. If I want to do to make sure that the answer to my is always true, always the easiest way to achieve that goal because true is true no matter what. And it's a trick for go around and around, want the cat to live or if it is a clock that you So here, for instance, is how we using this so-called for loop instead. But recall that in Scratch, to create some of our own puzzle pieces. And this, too, is something that we're And let me propose by introducing the C analog of this. So here, for instance, is, of a function called meow was to just play the sound This is going to look a But you'll notice some So recall this thing I keep typing with That's just the &quot;when green flag But if you want to create your own you, for now, literally do this. You say, void, the name of the void in parentheses. And technically what this means is It doesn't hand you anything And the &quot;void&quot; in parentheses It only meows. You don't have to tell it how to meow. It's just going to meow. So no arguments, so to speak. This literally just prints out &quot;meow.&quot; But what this does for me is it I don't need to know how to using printf to make the cat meow. I now have a function in life called I used it like this. When the green flag is clicked, I could puzzle piece. But in C, I could now do this. In my main program, I can use a for copy/pasted from earlier. But now I can call my own And let me go ahead now and do this. If I go over to my C code here, and delete everything inside main. Let me go ahead and do for int i Inside of my curly braces, let But I now need this meow do &quot;make meow&quot; again, notice error. &quot;Implicit declaration of function the 1999 version of C. Well, it doesn't know And the meow function is not in CS50.h. It's not in stdio.h. I have to create it. So let me type out or really copy/paste &quot;void meow meow&quot;-- [CHUCKLES] &quot;void meow(void)&quot; printf, semicolon. But here, too, let me so you can see all the code at once. Let me now do make meow. And unfortunately, I If I scroll up, still my compiler thinks that meow is This too is a common mistake. And as simple as this code might Yeah, in the middle. STUDENT: You need to define the DAVID MALAN: Yeah, I need to define So again, C is going If you try to call meow on line 7, You better define it higher up. So the simplest fix is Let me clear my terminal. Let me highlight and just And let me just paste it up here. And this will actually Make meow now works. And if I do ./meow, that, too, works. But this isn't really the best solution oh, well, just put it up there, I bet we could contrive one function needs to but it needs to be above the other. And that's just not And more importantly, it just pushes in your file. But the whole point is like, that's the entry point. That is what happens when And so just in terms of user to always be at the top of a file Your friends can, your TFs can So the other solution here would and leave main at the top. But this is the only time, if What I've highlighted here in line 11 is It is enough information to give you the and the return value-- and any arguments. And so if you just copy/paste that up there, that's enough that, OK, it doesn't And it will look like that. That's the only time the very first line of a to the top of the file that you can make the compiler happy. So if I do make meow now, still no But let me add one final feature, And then it's time for a snack. So here, recall, was sort of the last we created not only our but it took an input so that we didn't We could just let the meow do you want the cat to meow. So in C, we don't have to make We change the prototype to take And this is the syntax for that. If you want your own function in you give the arguments a name, n, But you have to tell C what So it's an int n. So it knows it's a number. And then you can just So instead of hard coding, I'm just using n here. So this is equivalent to what I did with the n variable there. And then &quot;meow&quot; will get If I want to then use this-- notice, that we did last week-- you So in C, this is where now because all the main part of the So this, again, is an abstraction. I don't need to know, care, or I just need to know what its return thereto are. So if I make this change, to meow any number of times. Let me go back over to my C code here. Let me go back into the file and where n just means number. I could use i, but n tends to be I then, inside of this function, for int i get 0; i less than n-- instead of 3-- i++. And then inside of here, I need to change my prototype to be or just manually edit it. But now notice what's that now I can meow maybe three times. Make meow, Enter, ./meow. OK, or if I really want to be cool, Go back here, make meow. Increase the size of my terminal window And there are 30-- that was a fast cat. There are 30,000 meows. I think now let's go ahead and take-- We'll see you in 10. Cookies are now served outside. All right, so we are back. And I realize this has So there's a lot of new syntax. There's a lot of translation But among the goals of having and having spent problems at 0 in are really all that new. It's just a lot of syntax that in your muscle memory as time passes. Up until now, though, we've focused like things happening on the screen. And that was akin to the speech bubble But let's focus for just a bit-- we can't do very well values instead in C. Like, get_string returns a value. Get_int returns a value, a But what if we want to make our meow and visually have this side but actually hand us back some value? Well, I bet we can do Well, let me propose let me go back to VS Code here. And let's make our that just adds some numbers together. But the same calculator, going to get us into trouble if you doing underneath the hood. Let me go ahead and run And in here, let me go access to the CS50 library with CS50.h, int main(void), which, again, we'll to include atop any of these programs. And let's just add two numbers So it gives me a variable called x. Assign it the return value of get_int. And I'll ask the user to give us x. Give me another variable called y. Assign it the return But this time, ask the user for y. And then, lastly, let's just go ahead But I don't think I can like this, x plus y do this, based on what what's actually going STUDENT: x plus y. DAVID MALAN: Right, So I think this is where I need What I think I really want to do is because, what do I want to maybe as a second argument Maybe just x plus y. So indeed, I can get away with there's a bunch of arithmetic operators, including addition, subtraction, and even this one, the which generally gives us the ability you divide one number by another. But I'll keep it simple with addition. And indeed, with printf, if I want I can do that. But I have to tell printf what kind thus the percent i And I think this should do the job. So let me go back to my terminal. Make calculator, Enter. All is well so far. ./calculator, 1 for x, 2 for y. And indeed, I get 3 as the output. It's not very dynamic. It can't do a subtraction or But it does at least do But let me propose now that we function, right, because addition And maybe it should be just like meowing was So let me go ahead and let me go ahead and give but instead of last time I'm obviously going to And instead of last time, I think I want add to I don't want add necessarily but I do want add to And just intuitively, what type of value STUDENT: An integer. DAVID MALAN: An integer, so an int. So I'm going to change void, which nothing's coming back-- But I'm not going to change the I'm going to go ahead and And I'm going to make this And then here, instead of printing out Let me give myself a third z equals the return add function that's going And then let me print Instead of x plus y, I'm so it will do the addition of x plus y. So similar in spirit to meowing, are about to create an issue. So let me make calculator again. And there's definitely some errors. So here we have, &quot;use of And that's on line 17. So that's pretty far down in the file. So specifically, my compiler does But wait a minute, x is What intuitively might even if you've never programmed before? Yeah? STUDENT: Well, because x and y are the add function. DAVID MALAN: Yeah, because x and y not in the add function. So the term of art here that is something called &quot;scope.&quot; So &quot;scope&quot; just refers to the the context in which variables exist. So by that, I mean this. On line 8, I've declared x. On line y, I've declared-- [CHUCKLES] on line 9, I've declared y. But the catch is-- and here's where those variables only exist in the that are nearest to them, like this. So I can use x and y on lines but not thereafter. So I certainly can't use But this is a problem, because if but add can't access x plus y, Like, x and y are not in But that's OK because remember that can have maybe a return but it can also take 0 or one or two So what if I instead do this? Let me clear my terminal window. And let me update add as input but maybe two integers. And I'll call them arbitrarily a and b. But I have to tell the they are-- two integers, And now what I can do is this. Let me change this up just so that the prototype And the only purpose of this prototype where the compiler didn't because it came later in the file. So here on line 11 now, if I this is now the syntax. We saw syntax in Scratch to tell it how many times to meow. So this is just telling add what So now I have to change this to a And let me see if this is right. Make calculator. So far so good. ./calculator. Let's do 1 and 2 for And hopefully we should, again, see 3. Now, what's going on? So here, again, if I zoom in on my add on line 15, means what about add? STUDENT: [INAUDIBLE] DAVID MALAN: This means that it has So it's going to hand me back, with an answer on it It's not a word, like my name. It's a number instead. These mentions of int here and here this function, add, takes two inputs. The first is an int. The second is an int. And just so we have something to call So what happens essentially when I I'm kind of passing in x. I'm passing in y. But the add function is going to It could call them anything I want. I could change this to the And then I could literally Those are perfectly acceptable But who really cares? Like, a and b for such a simple Technically, if your I could even call them But let me propose for today, confuses things if you've got x's but they're clearly different. Just don't do that. Try to come up with different But here, I have a function that takes It just returns the sum of them value of add in a variable called z. And then, quite simply, print it out. But there's one other Now, if we think about design, even do I really need the variable z? Because I'm defining it on line 11, and and that's it? Like, sometimes you And they might make But strictly speaking-- and this is if z is the same thing as &quot;add and just delete line 11 altogether. Let me get rid of mention of z. You can actually get And much like the Join block in on the Say block, kind of stacking or nest them really, Honestly, it makes it because your mind has to dive in into this second argument. But it's perfectly acceptable, too. And just to connect the dots to this is kind of analogous being like f of x, where x is some arbitrary And when you start to put so that the output of one it's like using this syntax, If you've never seen But if you have, it's a way Any questions, though, having a function that doesn't but instead has a return value? Yeah, in back? STUDENT: In our declaration show it as returning an DAVID MALAN: In our definition STUDENT: Why do we show instead of returning as void? DAVID MALAN: Oh, a really good to sweep under the rug for today. But in every one of I have indeed said &quot;int main(void).&quot; Technically speaking, whenever you it actually returns a It returns the number 0 by And it can return any other In fact, on your Mac, PC, or gotten like a weird message on the and it's like a weird numeric code, arbitrary like that, that tends on your Mac, PC, or phone had something And that is the number But that's more than we But we'll come back to this. But main always returns a number. By default, it is 0. More on that soon. All right, so with that apart what it is we've been here a little bit by returning It turns out that all keep alluding to macOS and are probably running on there's actually other very popular among which is Linux. So Linux is a very the thing that turns on-- when you first turn on a computer. And it's very commonly All of CS50's own servers Those students more run Linux on their own Macs or PCs even. So Linux is a very And it's particularly characterized its command-line interface, even though as well. So again, this term we started today is a thing with menus and buttons. It's literally what you and I otherwise known as a GUI. But today onward, you'll with and more practice down here, which represents a And just so you have a mental model when you access cs50.dev, you are in the cloud, a piece of software But that piece of connected to your very own personal Technically speaking, But it means that you have essentially that only you have access to. And that server or container is running And in fact, every time I've whether it's code or make I've been running commands from here in in the cloud, my own And you'll have the same yourself. This is the thing that for you by installing the compiler you'll soon see in the class. But underneath the hood, then, of Linux that allows you to run And those commands And this is something you'll But I wanted to give you a sense of some because we're essentially muscle memory you have from a GUI represent double-clicking on and other such commands that It'll be a little painful at but it will make you far more productive if you start using your programming or real-world job, you'll just and able to do more work more quickly. So with that said, let me go I'm going to go ahead and open And you'll see at left created thus far in class that I've compiled thus far in class. I also have this source you can download from the course's pre-written in advance, so you that I literally type. But all of these files are And you'll see that in And grayed out are actually the that I created that I was running. So you can click on any of these For instance, here is hello.c. And voila, it opens in the text editor. But if I try to open &quot;hello,&quot; because that's zeros and ones. And frankly, the computer could but it's just not going to be useful. And honestly, it's too easy to make So instead, VS Code says that it can't or maybe unsupported more generally. So know that you want to only click But let me go ahead Suppose that I decide that, wait a And we're not done yet, but what if or if I want to change meow.c to Well, let's actually do that. I could go over here and right just like on a Mac or PC. I can find the Rename option. And I can do it all via the GUI. But you should get more comfortable And among the commands on this rename. So for instance, if I want to I literally type &quot;mv&quot; space, and the new file name. So this is very similar been doing with the code I not only type the name of that I want to code or the In this case, I type the thing that Now, if I hit Enter in a moment, meow.c in the GUI should even though I'm doing this all via And now it becomes woof.c. I mean, it's not all that exciting. But this is just to say that One is a GUI, one is a CLI, Moreover, let me go ahead at left, the so-called explorer. And in my terminal window alone, like wait a minute, what was Well, there's other commands as well. On this list is, coincidentally, the file in your current folder. And as you might have gleaned CS people like to be the minimal number of keystrokes. That's why these are all abbreviated But if I go back to my terminal there is exactly the same contents And there's some heuristics here. In green with an asterisk that I made with make So the asterisks just means this Meanwhile, the source 1 directory, which in advance, has a slash to indicate But all of these white files ending Now, what if I really am embarrassed Well, I can very destructively go And rm hello.c is going to &quot;remove regular file 'hello.c'?&quot; And amazingly, this rm program has code where I can type 'y' to delete it. I can type 'n' not to delete it. But let's delete it. Let's go ahead and hit y, enter. Nothing seems to happen. But in general, that's a good thing. But if I type &quot;ls&quot; again, And in fact, the list So it's one line instead of two. &quot;hello.c&quot; is now gone. Now, if you do that, there are not So don't do that unless But there are backups maintained Well, what else is there, too? Well, there's all of And you'll experience them over time. Like, &quot;cp&quot; is copy. &quot;mkdir&quot; is make directory. And for instance, let me If I type &quot;ls,&quot; there's that I claimed I downloaded in advance. If you want to see what's for change directory, source 1, enter. And voila, notice that your And let me clear the screen. Just as a visual reminder of where you now the name of the folder So in Mac or Windows, you'd see Here, you just see a little textual And if I type &quot;ls,&quot; you'll see that before class. And each of these represents that we've been coding here have printouts of just to so you have copies online, as well. So in short, all of these commands, they will soon become And they do the most But there will be other time that do even much more than that. But let's go ahead now and And it's no coincidence that to Super Mario Brothers in from the Nintendo Entertainment to have this two-dimensional world, and side scrolls from left to right. But you'll see we can distill into some fairly representative And in fact, let me propose from the original Super Mario Brothers. So there's these four blocks in And if you click on one of underneath each of gets like a coin or Let's distill this, though, into its we make, not a blue sky yet, not but how can we just make because I dare say that we do have the Well, the simplest way might be to And then in mario.c, let's include Let's do int main(void), And inside of main, let's 1, 2, 3, 4, backslash n. Doesn't get much simpler than that. This is not going to be But if I make Mario now, ./mario, I All right, so it's not But this is clearly a candidate for STUDENT: Scratch. DAVID MALAN: Not to Scratch, though yeah? STUDENT: A loop. DAVID MALAN: So some So print the thing out So let me do that. Instead of just printing let me go ahead and remove this and i++. And then in here, let me go ahead instead. And now let's run this. So &quot;make mario&quot; to And does anyone not want Why? STUDENT: Because it's DAVID MALAN: Yeah, it's going to So notice it's four question marks, All right, well, let me fix this. It's obviously because So let me remove that. Let me rerun make mario, ./mario. And it's better in one So wait, but now the that thing where it's just looks stupid if nothing else. So how can I fix that? Yeah? STUDENT: [INAUDIBLE] DAVID MALAN: Yeah, so logically, we today. It's a lot of new syntax, but Let's just use printf to print one of these backslash n's, it happens after all four All right, let me do make And OK, now we're back in business. So sort of silly syntactical reduce the problem to its essence, become clear over time. All right, well, how about not just Well, we've done something And so I can imagine we to very simply print out three bricks But what if we consider And later on in this game everything looks like And let me propose, for that this big wall here is So it's not just a single brick. It's like three by three, or nine total. Now things get interesting. And let me go back to mario.c. I could take the easy road out let's printf, how about 1, 2, And then, OK, let me just copy/paste. And I'm using hashes instead But aesthetically, it's pretty close. Let me now go ahead and And it doesn't quite look like a square. But that's just because the hashes are But it is correct, So here, too, what would be better literally all of these hashes? Yeah? STUDENT: We could use maybe two loops. DAVID MALAN: Interesting, two loops. And why two loops instead of one? STUDENT: Oh, wait, nevermind. Well, I was going to say you could for horizontal. DAVID MALAN: OK, it's So one for vertical, one for horizontal. And even though these old-school typewriters recall that if you feed a piece of then it scrolls, line, then it This is kind of how the You can print rows and to print one row at a time, one It's not easy, but it is possible But just going row by row So how can I do this? Well, I could use at least one And this is where we're just from today and even last week. So let me go ahead and say, for for a 3-by-3 grid-- i++. And now let me cheat slightly. Let me print out just three So I'm kind of cheating. I'm printing out rows dynamically, but in one breath. But let's see what happens. Make mario, ./mario, and it does work. But what if you said, no, I Now I have to change the 3 to a 6, and Things get messy if we don't So let me now do this instead. Why don't I go ahead and But for each row, let me use another from left to right, how So to do this, I could I could call this variable something We start at i, we go to j. If you go past k, maybe l, you're You don't want nested, nested, j equals 0; j is less than 3; j++. And then here, I can print out a I don't want to screw So I'll just do one. Let me go ahead and do But when I hit Enter, What's it going to look like? STUDENT: A single line? DAVID MALAN: A single line because I never used So that looks wrong. So between what line number should Let me look a little How about over here? Yeah? STUDENT: 10 and 11. DAVID MALAN: Between 10 and 11. So I'm going to go in here. I'm going to add printf, quote, Let me go back and recompile mario-- ./mario. And crossing fingers-- voila, perfect. I printed out now a 3-by-3. Now, it's correct. It's not, if we want to be the best design. Where am I perhaps repeating myself? Yeah? STUDENT: [INAUDIBLE] DAVID MALAN: Yeah, I mean, But now I have two, people &quot;Magic&quot; in the sense of, You just randomly put it And you also put the same thing here. Now I have to make sure I don't screw up So it turns out we can factor these out. I can actually do something And then I can just to n, which is marginally I only have to change n to make this thing bigger or smaller. It's still going to work the same. So make mario, ./mario. There's our 3-by-3. But if I want to make a 5-by-5, let me ./mario. And now it's a bigger grid, 5-by-5. But this is a little fragile. And it turns out there's another It turns out that C supports whereby if you have a variable that but you don't want to or if you're working with a partner you don't want your partner or that value with their own code, you this is actually a constant And this will just prevent from doing something stupid by The code is still going but you won't be accidentally able else. And honestly, what we've now up to make this more dynamic. Let me go up here, and let me add the to get_int because now fancy like ask the get_int function And then we can use n dynamically. So for instance, let me increase ./mario, size 3. Gives me a 3-by-3. ./mario size 5 gives me a 5-by-5. ./mario, how about 50, gives me a And now I don't have to It just now works. As an aside, if you're wondering sometimes it's just because It turns out that Linux configure it this way, all So if you hit up, up, up, I can go of commands that I've typed, not for hours of commands just to save yourself some keystrokes. And another trick in a If I do ./ma and I get bored and I can also just hit Tab, and it will that do match. So those kinds of tricks, too, But let's do this. It's kind of broken, How about &quot;cat?&quot; All right, well, that works. That prevents me from because get_int only accepts integers. But it will accept 0, It will accept negative And that's not bad. It's not doing something weird. But it would be nice to to give us a positive integer see something on the screen. So let me go back into my code, that we have the CS50 library, why I'm going to change this. I'm going to get rid of the user needs to type it again. And what if I do this? While n is less than 1-- so if it's 0, negative 1, negative and again ask the user for an int, And therefore, only once this loop break out and will So now let me try this. Make mario, ./mario 0-- didn't like that. Negative 1-- didn't like that. Negative 2-- didn't like that. 3-- it did like that. So using a loop now, I can ensure with input that I actually want. So this is correct. But I dare say 6 through Why is this poorly Yeah? STUDENT: There's repetition. DAVID MALAN: What's the repetition, STUDENT: Lines 6 and 9. DAVID MALAN: 6 and 9. OK, so they're literally the same, And maybe I could change this that's not a positive number. So you might want to But just having copy/paste here for So it turns out-- and there's just one to today-- it turns out there's one eliminate this redundancy of using literally the same question-- size-- twice in duplicate. So I'm actually going and I'm going to delete the loop And instead of using a to introduce instead call a do while loop, which Indeed, we begin with the inside of the curly braces, is that thing I might want to do So for instance, I'm going to say n And then at the bottom of I'm going to use the keyword &quot;while,&quot; for a Boolean expression. And here. I'm going to ask the question, But there's one fix I still need to do 8, I actually haven't given n a type. I haven't declared n yet. But it would not be correct to declare But why might that be? Why would it not be a good thing to Yeah, so recall that this Recall that the scope of confined to the most recently opened declared. And so if I declare I'm not going to be able But there is a fix, even though I'm going to go above my do block here. And before I go into going to declare n to be an integer, I'm not going to bother know logically I'm going to end up And so what's different about is that the do while loop ensures that once. And then while that input is not what we it's going to execute And indeed, the semantics are just that. Do the following while this So if I go ahead now and rerun And now I'll go ahead and input But I'm prompted again. I'll input something like negative But if I go ahead and now, because that's a positive integer, And there's one other thing we should C supports comments. And a couple of you if you come from other Suppose I want to remember what it Let me go in between lines 5 and 6 here integer.&quot; This is what's known as a comment. And it's grayed out only in the going to care about this. The computer is not This is a note to self, like a sticky And it starts with &quot;//,&quot; which this, this is for the But this comment, so to speak, is a way your colleague, is a few lines of code are meant to do. And now this comment might be print, And what's nice about comments is that or someone else can get away and then not even have to They can look at this comment and not because you've described for Yeah? STUDENT: I just had a question DAVID MALAN: Sure. STUDENT: That's for [INAUDIBLE] DAVID MALAN: Correct, the hash is not the same thing in C. In C, hash header files in that way. Other questions on these here tricks? No? All right, so as promised, what Well, let me propose actually inside of your computer. At the end of the day, whether it's or some other computer device, there's And this is memory, otherwise known for reasons we'll get to in a few weeks. But this is where data is stored. This is where &quot;hello, world&quot; is stored. This is where 1 and 2 and all Any data in your program is stored And the most important takeaway only have a finite amount You might have a high-end device but it's still finite, count so high with that device. You can only store so many There are fundamental physical theoretically, we should be So what are the implications for this? Well, consider this. In the world of numbers, as per week and I've grayed out the fourth one using three digits, we can count from to 5, to 6, to 7. And as soon as you count to 8, need a fourth bit. But if you don't have it, to be followed by what number instead? STUDENT: 0. DAVID MALAN: 0. The number overflows, You carry the 1. But if there's no place to put the 1, if there's no fourth transistor, the lower bits, the zeros, are going and I know is 0. So integer overflow is whereby if you don't have enough the number will wrap around back to 0. Or sometimes it will wrap depending on whether the code supports alike. So that has some very in integer overflow that's sort numbers are typically stored. Now, thankfully, we based on number of digits And a bit is just a 0 or 1. And recall from last week is minimally eight bits, or a So for instance, here And if you do out the you and I know in But if I change all 32 zeros to ones, If we're only using positive what number roughly is this, 32 ones? It's roughly 4 billion in total-- Why? Well, if you've got 32 bits, each can 2 to the 32nd power, which is roughly-- I'll stipulate-- The problem is, what if you That's a bit of a white lie. It's not precisely that. But what if you want to You'd need a 33rd bit are going to go to 0 at that point, to 3 to 4 billion back to 0, or worse too. So the fact that there are finitely many And negative numbers do add a the 4 billion in question-- 4,294,968,295. That is as high as you if you don't bother with negatives. But if you want negative that because you've got to save half for positive, give or take. And so if you're supporting should for a calculator, for you can only count as high or negative 2 billion roughly instead. So it turns out that when you you have some control over how And this list is longer but we did talk about Those are, by convention If that's not enough, you can upgrade tend to be 64 bits instead, which it's actually 64 bits, It's an unpronounceable That's a crazy big number, Moreover, we can see this if we we're using code. And just so you know functions even in you use these larger values, get And this one's a little non-obvious, just so you know, for printing a So it's two characters instead of one. Suppose, though, we actually want to It turns out that certain So let me go ahead and do this. I'm going to go back and I'm going to modify my calculator be perfectly reasonable. Let me go ahead and open And where we left off, And you know what? I'm going to simplify it back I'm going to go ahead and and just distill it to its essence, But let's just do division. I want to print out this So here we go. x divided by y is a Let me do make calculator And let's divide something like hm, OK, weird. It gave me 0 instead as you might have expected for 1/3. So what might the takeaway there be? Why am I seeing zero perhaps? Yeah? STUDENT: If 0's the integer [INAUDIBLE],, DAVID MALAN: Yeah, so 0 is an integer. And indeed, that's what I'm And in fact, if we go over to my little I'm currently using %i. I should actually, when I do division of values, a decimal point otherwise known as a real number, So I'm actually going to And let's try this-- %f instead of %i. And let me go ahead Huh, all right. Well, this didn't work then. &quot;Format specifies type 'double,' All right, so that, too, So I think I actually need to Let me actually go ahead and do this. It turns out that are these things called A float uses 32 bits, and And that doesn't count higher as much as more numbers after the decimal point. So if you want a more precise by using a double and 64 But we'll keep it simple, and Let me just do the math using the type Let me do not int, but float And now let me go ahead and Strictly speaking, I But I'm trying to be pedantic and this time so we see a real number. All right, let me go ahead and 1 divided by 3 equals-- damn, now it's just showing me more Well, this is because of an issue So truncation is just a term of art and you divide it by an integer, the fraction just gets thrown doing integer-based math. So if there's anything it just gets truncated, So what should 1 divided by 3 be? Obviously, 0.33333333-- ad nauseum. Fortunately, you throw away which leaves you still with just 0. And even though I'm seeing more zeros, of the 3's. That is just what happens any kind of division like that. But there is a solution. We can actually convert, or cast, So we can tell C, I know But go ahead and treat it as if it's .0 At the end of the number. So I can go into this, and I can &quot;float&quot; in parentheses. And over here for y, I can literally use The term of art here is type casting. You're converting one type to another one type as though it's another have a mathematical impact. But what it means now is by dividing one float by another. So truncation will not now happen. So let me do make And now 1 divided by 3, there it is. Now the math is actually correct. But my God, we had to jump through So to be clear, the two issues was truncation. If you divide an int by an int, what it should be mathematically. But if you instead type cast the values, value, or a double for that matter, then you a float and preserve But here's another catch, or at least a What if I go ahead here and do-- let me do this. Let me show you one trick here, even Instead of printing out %f maybe 5f So this is weird syntax. And it's only specific to printf. &quot;%.5f&quot; means 'show me five So if I do make calculator, I get five decimal places. If I want six, let's do this. I'll change the code to 6. Make calculator, ./calculator, 1, All right, well, wouldn't it be Let's give me 20 significant So make calculator, ./calculator, So your middle school teacher seems 1 divided by 3 is apparently or just infinite number of 3's. OK, that's not quite the Oops. Why might I be seeing of just lots of 3's, intuitively? Why this rounding error? Yeah? STUDENT: The computer just has there's [INAUDIBLE] DAVID MALAN: Exactly. The computer only has limited So it just can't represent every because we know from grade school there So what you're essentially seeing It's rounding to the nearest And it also relates to how the in memory underneath the hood. I can do a little better, though. Let me zoom out. And let me upgrade, so to speak, doubles instead. I can still use %f. You don't use %d for double. Let me do make calculator I get more 3's but still some rounding. It's more precise, but because that's just not of the computer's memory. So this is a whole other issue known is another type of limitation. We saw integer overflow, count so high before you run out Floating point imprecision represent the infinite number of real if you only have a You would need an infinite So these are two issues can influence the your code but code in the real world. And case in point, back in my day-- I graduated in 1999-- thought the world was because around the time the years there was a lot of old software And in fact, that old only used two digits to represent years. Why? Memory was very expensive early on. And if you could use half as much That saved you money. That saved you memory. The problem though, of of old software from the '70s and And unless companies or 1999 might be mistaken for because all of the code just we're talking about the 1900s. This code is not going to but it was still in that case. So people had to scramble, had to solve this by using more Nowadays, and really used 32-bit integers specifically keeping track using an integer from January 1, that's just an arbitrary date early on So all of the clocks in your just have a single integer but it's just keeping track but how many seconds have just because that's The problem is you can only give or take, with 32 bits and if you support negative And the problem with that is that again in not too long from now. This is the 2038 problem because in the things could break again. Why? Because that 32-bit value is around back to a 0 or a negative value. So we're going to go through Now, thankfully the solution, as to kick the can even and use 64 bits, which I think will get It's more than twice. So it's not our problem But that's fundamentally But it will still be finite. So we're just deferring to actually deal with the issue if these things are still running. So if that does happen, that, in 2038, all of a think because a negative number will get So it will think we're back in 1901. So this has had some fun and So for instance, this is the game It kind of came out around And if you get to the 256th is what happens because expect that players would spend all this And they didn't really you win if you get to And so what happens here essentially garbled because there's an integer counts to 256, but that's too And it doesn't know when to stop as in this case, to collect. Another example of this is actually game, which looks something like this there was this mathematical the number of seconds you have to solve your current level That dictated how many seconds you get. So of course, the higher the as the level climbs. Unfortunately, once you hit level 22 plus 4, which gives And they, too, were using to represent numbers, which And the way that math 260 minus 256, if it wraps back around, 22, which is just impossible. Like, Mario can't even or so from where he actually was. So that, too, was sort as well, since that Lastly, and this one is Boeing 787 was documented as having in the following sense. &quot;A model 787 airplane that has been can lose all of its power due to the into failsafe mode. This condition was caused by a after 248 days of continuous power. Boeing at the time was in the process of will remedy the unsafe condition.&quot; And people did the math. It turns out that Boeing was probably And they were keeping track of time not because if you do out the math, after or 2 billion one hundredths of a second, or negative 2 billion. And the implications was literally And if you can believe it, if you grew anyone want to conjecture until Boeing updated their software? STUDENT: Turn it off, turn it back on. DAVID MALAN: Turn the back on because that has the effect all of its variables back to 0. So this is ultimately to say as you dive you, too, will make quite a few You, too, will encounter opportunities In the real world, there So even if you struggle, know you're in very good company. But some three months from now, because this was week [APPLAUSE] [INTRIGUING MUSIC]