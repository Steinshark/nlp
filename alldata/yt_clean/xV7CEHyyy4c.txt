Cool. So, uh, I'm just gonna Uh, introduction, talk, chat here But, um, that was a really clever I don't know, a couple minutes. Um, it was good. So, um, who am I? Uh, like Brooke said, Uh, I'm a senior developer advocate data, however you want to call it. Um, previous to that I Previous to that, in the good old days of Um, and then I very quickly learned Um, so. Past eight years, been back I was very, very fortunate to start And that's all well and good, that it's, I need friends. Um, but no, uh, actually it's all about a, Um, I'm sure you are all aware haven't watched it, please do. It was really, really great. And it was all about community. And what really spoke to me was the start with a community that you do. Um, so, you know, get out there, get And I think that that idea of community source space in lots of other spaces too, Uh, I, you know, represent Prisma. I'm a part of Prisma. Y'all represent your various companies That does not mean that we are like, We are like the same open source help develop some really awesome software. So really, I'm here because of advocacy. Yay. It's in my title. Um, it's something that I Uh, I love being a developer advocate and that are going on at Prisma to y'all. And I love taking what y'all are Um, Without the wider developer So thank you. I really appreciate it. Um, more on that, um, I'm going to be, remix meetups as much as I possibly can. So please do consider me as your Deb Avocado is, we're we're known answer any and all questions you have. Um, sometimes I will be saying like, Um, please understand. Like, I wish I could, I just can't. Um, yeah, I think that's Um, Brooks, I don't know if it's cool I'm up here, but I'm more than happy to. And if you ever wanna get in contact with Harrell on Twitter and Harold at prisma So feel free to end me up and if you have It's not, it's totally cool. I will be around. So, so I've been using the Yeah. Versace. Mm-hmm. Um, and I saw that there's Yep. I was wondering what that related to hedge in some way. Yeah. Um, sort of, uh, how, how in Um, uh, so the j s O protocol, which I Yeah. So the way that, um, Prisma works, for the client, which is like the node, And then there's the query engine, we kind of put somewhere and we reasons that I won't get into. Um, the communication between those Um, we very recently, um, found. We switch that to like So the more like hgt B over over the wire, performance and also startup time. Um, so the, the thing you're probably or edge or kind of like function as a Um, so if anyone's using prisma in Figure quotes, um, kind of set up. Do, try out that, uh, js o protocol. Um, it's currently a preview feature. Um, n no, like use it as in production. We're, we're very confident Um, so yeah, it's, it, we got a blog post. I think it's like a nine Um, so yeah, if, if you've had Try it out, please. It, it, it'd really mean the world to us. Thank you for the question. Appreciate it. Hands who's, uh, who Let's just like start with that. Sweet. That's like 90% of the room. And then who here is actually like, project, not real paid project so much. Why is Prisma cool? Tell me why pri, why is Prisma? Yeah. Um. First you have to accept that like, try and like convince you of that Um, but like assuming we're, board of like, ORMs are cool. Um, Prisma gives you end-to-end little cost, almost no cost. Um, so I'm a huge Um, I'll, I'll live and Um, if you put Prisma into your safe queries, um, that, that go beyond You might see, um, I'm not Um, and so you, you can take that idea back to response all the way through. And you can apply that to other areas. So, um, we recently heard about name in the project, but the idea of that could be run on the front end. So you could run it like in React to your prisma, like, like directly. Mm-hmm. So that means you can make Prisma Um, like that's completely type safe. Uh, that's really cool. Um, I'm, yeah, I'm a big fan of, Uh, but, uh, yeah, it's, it's It's, um, safety above all else. Migrations, you know, are And migrations are always a pain. Um, so we, we hope to, like, with that that feature it's, um, we encourage So you don't like get into a database you have no way of recovering that data. Cool. Thank you for the question. Okay. Hello. Well, I'll be around. Please say hello. Um, I was super excited to meet Thanks Um, yeah, so I, I, I shortened the, slightly cuz it was, uh, how to Run So, um, my name's Dustin Malik. Uh, I work at Indeed. Uh, specifically I work on a, like Uh, where we, we do a lot of like, new products or new features. Uh, so we just recently moved to remix. Uh, we were using Python with Jengo for some things, but like remix, Um, but we kind of moved to remix, Um, so. I've learned a lot of things from some other remix integrations. So we're gonna talk about uh, with other applications. So, uh, out of the box, if you know started a new remix application. There's a lot of places It'll run in a long running It'll run in a service node It'll run a dino, it'll run in It's, it's a, like cloudflare's, Um, but it runs there and works just fine. It, it's, I, I love Um, so there's a lot of places that an existing application, maybe it's We'll talk about some non Uh, but you want to, you want to Either run it on the same server, run it know, what is, what does that look like? So, you know, you can migrate it and have 'em sit side by side. Uh, so there's a lot of different, there's start talking about like, How you remixed I could be, could be anything, right? Like it could be just, you've created single page application. Um, you've got existing Express you run a Jango or something. Um, and like your final state be, it could be you wanna run. Wanna run remix, but you still wanna call So rather than like, here's a one be like some little interesting remix and do something complicated. Uh, but, uh, we'll help you help with your existing application. So a lot of this is actually. Actually like fundamentals of remix. Um, so this is, there's, there's what is Let's see. There's, uh, I may have trouble clicking this technical explanation page in know, just a couple down on the pages. And if you, uh, Do you wanna do This is, this is very much worth, Um, there's tab. There we go. Cool. Um, so there, there's, on the say there's four pieces, right? There's a cab compiler server, viler Server side handler. We're talking about each of can kind of plug into them. Uh, the compiler is fairly simple, server bundle and a browser bundle. Um, and then, uh, the server side into all those different platforms. Um, so there's a different server that I talked about, uh, before. So we're gonna, we're gonna We're gonna start at the top. Uh, and we're gonna talk Um, so the remix compiler is, it's expose any Es build stuff, right? So you can configure some stuff in fact that it's es build and hide that that so they could swap that out. Like if some new compiler comes they could just swap it out That's not always using it as Right. Um, and as I mentioned before, the bundle and a browser bundle, and those end up being used for. So, If you can't just use So this is, this is the first like, into remix, and you know, one example components, uh, or any CSS and JS library box with remix, because remix will do Then it'll send that to the client. It'll do a client render when it hydrates. Then it'll compare those two and it'll uh, you know, it generates some with Client side. Sometimes it doesn't work. There are some, there's some get sub components work. But if you run into issues, uh, where solve some of these issues, there are some ways to work around just using So one of these iss es build remix make this a little bit bigger. We're I, I just wanna, uh, like this in your remix config define a function Um, so if there's, if you're moving, over and there's something that did this crazy thing with Webpac. I wanna do it with the s build, uh, can hook into here, uh, to do that. It's, maybe it's not the best long probably want to use the out of the box. Because if remix did ever swap new version upgrade happens. Um, but this gives you, it gives kind of, uh, boxes you into if e Um, one of the recommendations is know if any, if everyone's familiar with Uh, If you're, if you're doing a lot of, patch packages, isly, super useful. Uh, basically what it does is you you have in your node modules folder. And when you set up patch package, payment saw something apply this diff. Uh, to this package. And so, you know, they say like, oh, source library that you use and you, you taking a long time to merge it in and change and you can have it immediately. Uh, that's the like, There's also, you know, you MPM package you you want to. Um, so if you, if you need to, Bill config, uh, patch You can also, uh, if you need to do that with patch package as well. Um, and if they're, you know, you thought that they would support, and hopefully they'll support it. If it's something weird for your a good long-term solution again, have something, you're in the middle up, uh, patch package is actually, Um, there is under the remix, uh, So if you had a web pack compiled. Uh, create React app application. There is actually, and I have not demo of how to take your web pack Uh, once again, I think it's Uh, I've considered this Webpack applications that I. I've written in the past, Um, but yeah, this is, this is, if land, this is, this is a good option. Um, good job. We're good job from the Uh, load a little bit better, are all just kind of random. Um, So when we're talking about, we're like this is, this is like the very you could create, express with remix Um, so this, uh, create request handler talk about adapters in just a sec. And then, uh, Essentially you, You pass in your build, and then that came outta the compiler. Um, so this, this application Uh, you could like detect the file changes required cash and re require these files. Um, But this is, this is This is where your server So your server is running, I don't transpile type script or whatever require that bundle there, which Um, all right. So in general, what do adapters do so that Uh, what is that? What is that responsible for? So, uh, I put native in quotes, whatever It takes whatever that request format is is really like a standard node or browser. Like it's, it's all, uh, Um, it. Passes in some context from your talk about it in just a sec. And then it takes that response back response, uh, and it, and it sends it Um, in doing so, it generally set headers, um, or cookies, it'll Um, it, it is also responsible comes back from RevX to send it. Uh, so the, the response bid is a it wants to work well with the so, passing context, this is, this application and you're doing, uh, Anything you wanna run remix on top of it. Context is super important. Basically, when you call a create a function that gets, gets variables server into the remix application. Um, so in this, in this example, You've got a complicated config variables or maybe you've got a way Um, and you don't wanna do that in instantiated your config once and then, And if you've got a database, you wanna to, you wanna keep some connections open. Connect when your server starts Uh, and you've got some nice database you can pass in to remix, uh, you Um, so yeah, I talked about If you're running like Century or thing, you can pass that in so that Um, And, uh, event emitter you pass in. I, I've done this. This is like a superpower. Uh, so you pass in event emitter for if I wanna do logging and emit Um, you wanna do like a real time you can actually have it event If we make sense, it says can side event render, uh, like a real Uh, so the ability to pass like an event unlocks a lot of really cool things. Um, so this is, this is, um, I promised Uh, this is actually like super niche it kind of, it covers a few of the Um, basically, uh, if you have In your server, this is, this And type o m sorry. Uh, uh, type o m uses entities you're talking about. So you, you say like, Hey, I want, uh, You're, it is got photos in it, and then say, Hey, give me the manager for photos. And you pass in the class. Uh, Be the manager for photos. You can, you can instantiate the data, you can pass it through in the context. Um, problem is because these, uh, because and then this, that's in remix where a bundled version of all of your files. Uh, and it has, it has bundled Uh, so they're actually different classes. Um, so like 99% of the time, if you works just fine and it's awesome. Uh, if you wanna say like, are these running in, uh, something running in server that might not actually work? Uh, so this is, it's a weird. It's a weird pitfall. It most likely you're not gonna up being, uh, difficult to debug. Um, yeah. So we talked about the merging of headers. This is, this is like our, So, uh, the, the response comes back from And essentially it just, It merges your headers together, it loops It loops through the ones, uh, it emerges those two together. So if you, uh, you can set cookies in your note application. And as long as you're not setting the Uh, if you are, if you do try and set And it kind of, it kind of on this order of this toilet loop. So, uh, in general you can set headers just be aware that if you try and do you cookies, uh, they may end up completely. Um, um, this is, this is another like, oh, Depending on, depending on how your return headers in your server, uh, you writing an express application, uh, I, Like I'll render, I'll render my, the body and I'll put some headers Uh, the problem is, You have start returning the body. And remix by default is Uh, so if you add, remix your set some headers after, uh, remix Um, and you know it, it probably For me, it came up with sessions. Uh, so usually like, you're like, oh, know, I want all the code, all the codes set stuff for, to the session and then like, I'll save the session as well. Um, and so in this case I would, uh, Remix would start showing the response session and, uh, That wouldn't work. The, you don't, you don't actually You try inside a header after the body it just, the header just never shows up. Um, so if you wanted to, and this you can convert readable stream. It's a stream and you can just wait Response body, and then you just set it whatever set of cookies or headers or Um, and it kind of, it kind of just it would be to like, move all of your Um, so sessions, uh, Yes. Uh, I'm sorry. Real quick on the last Yeah. Um, slide. Um, does Remix Stream, even if you're case, do you know, uh, it streams So it Yeah. Every, yeah. Ev even if it's just like a one sets it as a streamable response. Yeah. And maybe it may differ Uh, but I know like the express are all streaming responses. Sessions. I've mentioned sessions. Uh, if you, if you have sessions application, um, I don't know who's Uh, like they've got the cookie There's nothing special about sessions. Like, actually, like you, you Um, so as long as you, uh, well, even have to implement all of these But if you wanna make a session that looks kind of line up with what you're doing. Like as long as you set, as long Like you can implement, like you with the rest of your application. So like we, we had, uh, we had COA pass the session in on context. And then our session file just of the thing that came outta context. Um, so you kind of do, you can another application if you want to. Um, so now the thing that I, towards the end, uh, cuz it's So, um, I, I rewrote this slide like, it depends, uh, but in general, trying to use remix with some other That you use remix as your like like you can, you can kind, you You could say, Hey, you know, I've got some routes, and then I've got my routes client side routes or something like that. It is really difficult to map, Remix really wants to be the default. Like, I haven't found another route. Uh, I wanna handle, I want to handle this. Um, so I would recommend if at all Uh, and then you can do, you we'll cover in just a second. Um, so if at all possible remix should that falls back to some something else. Um, Yeah, I don't, I don't I, I struggled with trying to like different, couple different things. And I've talked to a few other like, yeah, it's probably best So if, if there's like one thing application, if there's like, the out is how you can kind of make remix So there's a couple, a couple interesting Uh, this, once again, this is a but I'm really excited about. I think it's really cool. Uh, if you've got, uh, if you've uses Reactor Router six, uh, which you can take that application and you Um, you can remove the browser router here, which is in the, in the splat route, And we can say, uh, export, uh, export And this upgrades a single application, uh, kind of magically. Um, This, the documentation React router app to remix. Uh, and this is one of the So like in theory it's just make this Then there's a whole bunch of gotchas you know, it has to use us build But in theory, uh, in And it's, uh, it's kind of cool because so they, they somehow made this work. Um, yeah, this is one of the, it is I haven't had an opportunity to try. Uh, I'll comment cuz we're This, uh, route slash dollar sign, tx, It's like a catchall. Um, so if any route. If remix doesn't match any routes with uh, it'll always fall back to this the route is in here if you wanted to. Um, but it's actually, Uh, the the route route. Uh, like slash route that See? So if you, if you really wanted to drop app, you would've to create an index. Uh, it did this exact same thing, So this is like, I've got a single page which I, I think most probably do. Uh, you know, this is a We're to, we're to go to like the not a React app at all, right? I have a, uh, Java or Python or Rails like, I wanna merge with my remix old application to a new application. So the idea here is that And you run your old application and understand, it proxies to your old server. Um, and so this is, once So you can, you can, uh, any, anything So in this case, like I'm pretending It could be, you know, old app Uh, But basically for your action and uh, all the other, all the other methods. Um, you take the request, you Uh, and this is, this is something I've If you take, if you have a request Uh, it just does that fetch with So if you've got headers or the method this basically just passes through, uh, remix application to your old application. Um, so this, so this basically, uh, you Uh, you can. Add new routes to replace How you put some logging in I fell back to the other app. Uh, slowly replace all the pages and you just shut your old server down. Uh, I'm sure it's that easy. Uh, yeah. So this is, this is a way to, if you you want 'em, you want the, the two Um, so I said in general, you want It doesn't have to be Um, so there are, and in, in fact wanna do like static file hosting. Uh, but basically there's potentially Um, and say like, I don't want Uh, and this is, this is like a very express, uh, for, for any, for any which basically says like, Hey, might be able to handle this request. Um, and so if you don't call it's just short circuits. Um, so for something like a health check, check in, in remix, uh, or you don't want Uh, like you can, you peel off, you peel If you want your express app would wanna do the same thing. Cause you don't want, you don't to be hosting your static files. Um, so yeah, as long as you, and if you health check first and then create recu. Request handler is your, Um, you, you can do that. So this is pretty much, I, I had that there was a little bit more So this is pretty much, pretty much, There's a lot of places Uh, if you, if you had an existing a bunch of existing middlewares to make have to like, dive into the internals or you have to, uh, slightly go against ES build or something like that. Um, but I think the, the overall Quickly move to remix and you're building migrating your old stuff to remix. Uh, I think that's better than, um, in order to do a huge migration. Uh, so the idea here is, you know, running as quickly as possible on pieces that you want to replace. Um, yeah, I think Uh, I just had a more high level question to jump from Python and Jengo to remix? Uh, that's a, that's a, some of Like we as a, as a company, you want to. You wanna try and consolidate as, number of languages and stacks. Mm-hmm. Um, so the team that I was on was a, was development shop and a 10% node shop. Uh, the numbers might be slightly Like we, we were outcast team, So, so the question was like, or do we wanna switch to Node? Um, the node, uh, for us was, Um, but there, there were, there's on top of, also say, I didn't, We did a fairly long evaluation Mm-hmm. Uh, next is the popular, the more And, um, the, the ability to pass uh, something you can't do next. So, next, next, basically next But like, it doesn't talk to Express, there's, there's a, there's a barrier. Uh, and if you're, you know, so doesn't integrate with express, uh, like, hey, it runs on Versace. Uh, and so it was a little, it was I, if we're not running on Versace other node stacks, like what is, how next work with the rest of our stuff? Uh, and it essentially, it. It ended up being like, if we comes up and indeed, like I hear don't we just standardize on next? Because that's like the Uh, there's just a, there's a lot of node to say like, these are next Middlewares So that's the. Uh, that's the reason why we remix a stack that we mostly already had. Right. Um, and, and it allowed you to maybe, more loosely committed to the framework you said you had to be tied to next. If you wanted to write, you Yeah. Yes. Basically. Yeah. That's, that's it. Like, cool. So there's, um, There, there's a ways that we render React at Indeed. Um, different teams do different ways we've created another one with remix. But uh, yeah, the kind May, maybe one of the other React like maybe we'll eventually move to that. Um, but for, for us as a small being on a, um, a third party tool we'll document it outside indeed And so, and next would be Rewriting is all, I don't know, 30, 40 What would some of those libraries Um, yeah. So, uh, some of this gets to it like we've got, uh, we had a specific And secrets are shared, uh, Uh, so we've got, we've got a receivers from another server. Uh, we've got, you know, Uh, we actually run in clarify Not support the, they run, they KOA is a variation of express, So they, so there are, there libraries and then there are Um, so, so all of the coa middle to be next, middle wears. Got it. That's, that's one of the reasons I So that's a, it's a, it's a Uh, And I was leading that project. But, um, but yeah, there, there rewrite that would have to happen Gotcha. Yeah. Yeah. So, yeah, unfortunately, as like generic node libraries. Things were written as Really good job of that. Yeah. Yeah. So I understand generally the all in with remix, right? But how many of those advantages can for the router and adapt, uh, use adapters backend, or whatever else we need to do. How, how much do you actually Essentially what it sounds like you did. Yeah. Um, I mean, it's a, that's a good, Um, the, well, so remix doesn't Like that's, uh, if I were, if I I, I would say like the, I think the Um, and so that's one. One advantage to, to also running on top we can, I dunno, like I had to, I had to some IP filtering or something, right? Like, oh, we want all requests to Like I can slam that on Uh, and I could put it in there's a way to do it, but it. It, I don't know. For me, the middleware like, little bit more confidence in it. It may, it may just be Um, so the, I don't know. There, there's advantage of like, pooling and some other, some could all be re-implemented as. Functions in remix. Uh, I do think that, like I said, I, I so being able to be able to instantiate you know, keep some stuff in memory and with every request, I think that's nice. Um, that's an advantage of. Uh, advantages of running remix kind of do whatever you want with. It's, I don't have a good, I don't have a have to rewrite a bunch of libraries. Uh, but I do think that, uh, there's break out a remix and say like, I just And it doesn't, it doesn't run through. The whole stack is kind of nice. You said you had some like personal Are those like at all related to the Oh, no. I'm, I, no, I, uh, I mean, I Uh, I, I don't work at FCEs. I don't let the black throw. Yeah. Yeah. Uh, no, I mean, I, I I think it's good. Um, my, my personal preferences of an old guy, maybe the oldest in the how we used to do development, right? Like we write forms and then the forms it would process them and do some stuff. So I did react for one time and making js, OT, APIs and whatever. Uh, but. Remix was kind of like, oh, this is we were writing PHP back in the day. Uh, so it was nostalgia. Yeah. It's a, it's, it's actually, it's like, it it works, it works well, right? It, um, I, I, I really like react. I like doing component driven development. Like I think, I think React is awesome. And so this, it gave me the. Maybe they're like, oh, I can kind of how I used to do servers. And it unfortunately feels like Uh, which actually I, I, yeah. Is the RSC that the React resonating with you at all? Yeah, I mean, I think so. I like, I think that's, It's not as big Um, but I think that it, I I, I, I think, yeah, I think I, I've, I've started, started LM development and doing a lot Um, and so, Uh, that remix So just from like a Oh, I, so I, I, I mean, I, I, I didn't do a huge amount of No. Um, but, uh, yeah, I mean, I think, stuff is, is interesting and I, I'm also skeptical, so, uh, yeah, we'll it's hard to implement and so we'll, one server that ends up implementing platforms that end up implementing it. We'll just have, yeah, I mean, uh, I at one point and that's not a good answer. Uh, yeah, that's cool. Any other questions or discussions? Cool, sweet. Thanks Dustin. Yeah, I'll share the, I'll share those Perfect, thank you. Um, in case you don't know, we do, um, I started recording this, but we do So in case you ever wanna go back and, and always put all the slides So, Um, just so y'all are aware, always looking for speaker slides. I actually have someone No, I'm just kidding. Uh, still apply. I always love to have, I I've had I always would like, um, multiple Um, yeah, he's flying in from But yeah, speaker. Yes. There you go. Um, he said he's, he soft confirmed today. So anyway, that's a lot about something Um, but yeah, if you ever wanna Here's a bunch of ideas to get started Um, you know, Dustin, that was helpful and one I don't think we'd Um, I still have like T rrp, C o which is but still someone talk about T RRP C and Um, it could pretty much This is really, you know, Um, I mean it still should probably That is one requirement. So anyway, uh, if you wanna give a talk, or there is a, um, what do you call it? A form. Sweet. There you go, John. All right. Uh, yeah. Hey, John. There is a, uh, a form on the meetup, gonna be the easiest way for me Um, also, we have built a website. At this point, I don't know if, you've probably heard about this, Um, it's still relatively bare bone, and people just wanna play around. This is really just an opportunity together, is the main reason we do it. Um, And then maybe one day Cause I don't like Meetup, but it really So I don't think I can ever get away a website together, Matt, you know, Um, we only have one lonely write a post creating content. Yeah, just write a post. Um, so just reach out about that. Um, and then finally the next meet up. Ooh, I shouldn't have said next. That is confusing. The, uh, upcoming meetup is, uh, there actually is a next meetup Um, so if you like, next day you really glad I switched to Wednesdays. That would've been super awkward. Uh, like three, four to come. No, I'm just kidding. Um, so yeah, our, our next Um, so if you're not. Too hungover from, um, celebrating Then you should come hang Uh, and yeah, we'll, we'll have a from Texas talking about remix stuff. So thanks again so much for coming. Um, feel free to stick around. I'll be here until. Eight, I don't know what time it is. And ice screen. All right. There we go. It's seven 30. Um, so yeah, feel free to stick around. I'll be here till eight if you want more If there is food, feel free to do that. Um, and then otherwise, yeah, just enjoy