Intro we'll compare Nginx and Traefik, using both from the client side using the p99 percentile, second each proxy can handle, and availability important when the proxy is heavily loaded. and network traffic. Additionally, usage of the backend applications. that applications behind Nginx experience a and Caddy. In this video, I'll explain I run all my tests in AWS, using exactly environments. I use m7a.large instances instances for each application behind each using Graviton instances to deploy monitoring as well as to deploy clients to generate load. So, what is a reverse proxy? It is a server routes all incoming requests to the One of the most important features of a reverse allowing you to dynamically scale your online store might experience high traffic and traffic is low, and you can scale down to 1 or your application without impacting users, which The second function, which I think is also your application behind the reverse proxy without I also frequently terminate TLS at the traffic to the application. If you offloading TLS on the application itself can be certificates regularly, maybe every 60 days. Since clients only interact with reverse exposed to the internet. This reduces the You can also perform caching on the such as static content like And, of course, you can enable compression clients need to download. This decreases Nginx vs Traefik Comparison starting with configuration. Nginx was created a static configuration files. This approach learn and optimize for production use. In the next On the other hand, Traefik has several You can define routes with static files, similar when deploying Traefik with a Docker discover all applications and Second, if you want to secure Nginx with a TLS it's used within your VPC--you'll need to install can automatically handle HTTP-01 or DNS-01 and it will also renew your On the other hand, Traefik has this makes it easier to manage, One thing I really dislike that it doesn't expose metrics for each it would be helpful if it provided HTTP status POST. This feature is only available in the such as parsing access logs or using certain of Nginx. However, metrics are available in the Traefik, on the other hand, natively which you can easily scrape. performance difference between these two proxies, keep in mind, in the cloud, performance directly Also, remember that Nginx can serve both static proxy. Traefik, however, does not support serving those who need that functionality. I'm using the latest versions available at Here is the main Nginx configuration file files are available in my public GitHub in a real production environment, I've enabled Next, we have the proxy configuration itself. using a self-signed certificate and HTTPS, and a more efficient binary protocol. I've like X-Forwarded-For, to provide the real IP typical for reverse proxies. Keep in mind handle most of this by default, but with Nginx, On the other hand, we have Traefik along with I'm not using dynamic configuration; instead, access logs, which are similar to Nginx. If you prefer, you can configure a redirect Now, regarding the file provider, I'm Traefik and providing a self-signed certificate. pretty much the same as Nginx. I'm not biased at favorite proxy i'll be glad to rerun the test. For this test, I'm using AWS and creating Terraform. I provision an m7a.large EC2 instance behind each proxy to route traffic. To run the I also create an EKS cluster with Graviton and deploy Prometheus, Grafana, 1st Test and run the first test. I think one of the most is latency. Right from the start, you can see the test. You don't want your proxies adding We're also measuring the number of On the right hand side, we have CPU usage, which it will lead to higher latency In my previous benchmarks with Nginx, I often experienced much higher load compared to those is that, by default, Nginx does not use keep-alive proxies do. I received a pull request explaining make sure to explicitly enable keep-alive--it Without keep-alive, each time Nginx receives connection to the backend application, Nginx can simply reuse those connections. For some At around 17,000 requests per second, it looks can no longer process all incoming requests. this appears to be the maximum throughput it latency between the two proxies is significant. and Traefik uses slightly more, likely because size is small, so compression isn't enabled, as Now, let's see how much more Nginx can manage. second compared to Traefik's 17,000. By the Nginx are using more CPU simply because Nginx Alright, let's look at each graph over the per second, a critical metric. While it doesn't directly translates to infrastructure cost. Users a more efficient proxy, you could potentially Now, the most important metric for providing a is always better. Overall, Nginx latency is the test. Nginx latency remains very while Traefik's latency starts to increase as soon client side with identical histogram buckets, are accurate and independent of each proxy. CPU usage quickly spikes to 100%, while Nginx Now, let's look at memory usage. It seems that which is likely why its latency memory usage remains relatively flat. is the error rate, or how many client Traefik attempts to process every while Nginx drops a few requests to ensure the look at the percentage, it's only one or two resulting in 99.99% availability, Now, let's check CPU usage for applications behind I used keep-alive, and it's higher at the end As for network traffic, Traefik initially but by the end, Nginx has transmitted we have memory usage for applications behind If you can improve Traefik, I'd be happy share any performance improvements with necessarily to perform better then Nginx, and I'll release an update if that happens. interesting in this playlist. Thank you for