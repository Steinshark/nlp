This is how I would learn code if I could start over. My name is Will. I'm a software engineer at Google, and I share knowledge around coding. In this video, I'm going to break down exactly what I would do if I were starting over as a software engineer. Most importantly, how to become a kind of software engineer that AI cannot replace. There are two kinds of software engineers in this world. The first understands computer science deeply enough to tackle challenging, innovative works that push human limits. The second gets by because they are familiar with certain high level tools so that they can build applications for non technical users. As AI becomes more powerful today, AI can pick up these high level tools quickly. Maybe eventually one day there is no need for human to build up such applications. However, there are always be challenging, complex tasks for human to solve. Since we want to become the kind of software engineer that AI cannot replace. So getting deep into computer science is most important in this journey. With the right mindset, Python would be the first step. It's the easiest programming language for beginners to pick up. Python has simple syntax, beginner friendly document, and large community with plenty of resources. As I learn Python, I will encounter common algorithms and data structure. While many of them are well solved and already included in the Python library, we still need to understand them or at least we know what we don't know. Alongside learning these algorithms, important to get familiar with concept of time and the space complexity. By having a standard way to measure the performance of algorithms, you can easily choose the right one for your applications. One suggestion for learning algorithms is through leetcode. Yes, it's also important for the interviews. Leetcode is actually a good way to practice thinking as a software engineer, some questions on leetcode are particularly important. I would call them root questions. This is because they form the foundation of any other questions. It's a good idea to get familiar with these questions before jumping into others. No worries, I will cover these questions in later videos. By now, I have spent some time coding with Python I will start with a real project. There are many, many things we can do with Python. For example, I can build up web application with Flask or I can write a script to visualize my budget. Most importantly, building things from scratch is satisfying and also educative. With the experience I gained so far, I might hit some issues that I not fully understand how to fix it yet. For example, I might encounter Stackoverflow exception while learning the recursion. This raises questions what is stack, how does it overflow and how can I avoid it? These specific questions introduce us concepts of memory, threads, process and most important Operating system or OS. The OS is fundamental in software world. It manages hardware resources and also serves as a platform on which all other applications can run. In addition to operating system, there are few more topics to explore at this stage. Database, Compiler, Networking. Database is focused on how data is stored. Compilers explain how high level programming languages, like Python, are translated into machine code. Networking shows how interconnected devices are sharing information and resources. There are many excellent lectures online and AI is also a powerful tool to help us ramp up on these topics. Beyond abstract concepts, I would take some hands on practice to make this process more engaging. For example, when discussing atomic transactions in database, I would write a program guarantees atomicity, rather than just reading about it. From this point forward, there is no specific steps to follow. What I can offer is just guidance. You might have noticed that there are many fascinating fields in computer science beyond AI. For example, Computer Graphics aims to simulate physical world. With graphic engine, we can create world class animations and video games. The goal of this stage is to become one of top contributors in one field by doing the things that never have been done before. This expands boundary of human knowledge and this expanded area set me apart from AI. I have talked a lot about how to not replace by AI, but I also need to emphasize that AI is a powerful tool to help us succeed at each step. It can explain concepts in a simple way and also can help us to write some tedious code during implementation. Properly using AI can greatly speed up our learning process. Someone might wonder, if AI already know the answer, why should I learn it by myself? While some questions may already have solutions, that doesn't mean we should stop learning. Solutions always be improved. Without understanding of challenges and solutions that came before, we cannot come up with the better one. I believe the meaning of AI is to help me to become a better software engineer instead of turning me into a real world extension of AI. I hope you all enjoy the coding journey.