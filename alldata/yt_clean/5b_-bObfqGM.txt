I got into programming basically because of a got my student exam, my high school exam, and I was a lousy career and it could be a good hobby so wanted to do something practical and something I signed up with what in Denmark was called Danish word for computer science, I didn't know so I was signed up for this and then I discovered as I thought I was, which happens to most math machine architecture was really fun. I was mostly through my masters in mathematics machine architectures and they had some people working with micro programming and so low level that SOAGEN was assembly code, well a PhD at Cambridge, went there, it worked out got in Denmark because it's a really nice place but kind of specialty. So I've been over specialized, suggested I drop by and talk to them and well computer science and when they gave me an offer doing sort of applied computer science, I started as distributed systems and tools for Yet it all started with um sort of an ignorant One of the things I like about computing and for looking at any field because they already use a thing that keeps me going inside, visit places so I get to CERN and to JPL I was for somebody who was So you can see a lot of things, a lot of That's a very hard question because the industry a fundamental mistake that people are making or computing or I.T or whatever is one thing and try to teach people who are going to engineer same way as people who are making web apps in very different tool chains, very different very different skills. And I think the industry is one thing. And the education, the training should is going I don't know. It's going all over the C++ code in it. The AIML, everybody is studying level of that is C++ too. Is it the same kind of some of the techniques are the same in anything requirements but really large scale AI and and yeah where's it going I think you're probably This has happened before with just about anything same direction, all the startup goes in the same to do with it throw it in so that they have the But when I started in computing, I don't know how I don't think ten thousand. How many millions do scientists and then in addition to that are all and put up web apps, or tools and such.. I don't I think because I had a fairly clear view of what to have something to do with performance and part luck, part good good education I guess. that could do high-level things and low-level use hardware sooner or later and somebody has to and we want to get away from the hardware so we doing that, I then made the decision I wasn't I was going to build a tool for things that and that has been a very successful thing because embedded system has aspects of that and most anything from 40.000-60.000 processor server farm deal with the hardware, you have to abstract from And then C++ grew up at Bell Labs, which at the in the world, there was an amazing range of and a supporting environment. And so instead of I was building a tool. And that the tool had to and so I built something, I see how it works, a little bit to match the needs of people And so it's an evolutionary strategy more or with the fact that it was just me and I didn't so the only way of succeeding was to serve the got a standards committee which makes growth And one of the reasons C++ lasts, is that it's systems that need that kind of stability. So you We don't change dramatically in breaking ways, it old code still works. One of the key ideas is that to build it and then reduce it and so that means style or you may not like or may not be as safe put the old stuff into the new stuff and then that Very uh very interesting idea really especially one researcher to maybe five And not disappearing. Every year there's a to implement it and a couple of hundred dies. but the education and the environment at fundamental design decision for C++ was sound The key to a language succeeding is actually said there's languages designed to solve a problem The latter ones tend to die and certainly C and it also means that they are not as pure and clean features for experts to do expert like things for instance who has never actually had to face are designed, a couple of hundred a year - maybe but getting people to use it is another matter. address the problem better than the existing respond? Will they learn adapt the new techniques? as well as some of the newer languages? And to the point where it is useful for people who You have to have some principles good idea. And you have to have it fairly general like. It has to be something that can survive and heavily on the community. I wasn't very good community, there's not a single user group and But one thing I learned, and I think a got a language, it's only a very small A language is surrounded by things builders, package managers, analyzing software, conferences, and teaching stuff. It's sort of a in it. In the sense that you have the language I had for my talk today a list of about 20 or 25 for a developer to do the job properly. And so I try and set up an organization that would be I never managed that because I never had And you can't have everybody contributing design decisions, make decisions about one person trying to do it on his or her own, So that's sort of for the future. For the past you questions to some of my students, basically to the early 70s and tell Dennis and then after that go to the early 80s But remember that they know the time and the and most of the things we do today couldn't Ritchie who did C, started with a machine with wow listen I got the good stuff. And I actually and so C++ and C grew up in that and those people sort of can't imagine running a languages were designed to handle small things. embedded systems. I talked to a guy the other power surge protection, surge protectors, and Now it is technically not possible to have 8bit it. C++ can touch the hardware so you can you can standard. And there you're back to to the kind In my time, there just wasn't that many specialized in things that people did in Denmark, in Denmark, and a lot of people thought if it A little bit of sort of &quot;not invented here&quot;, not scarce and if you wanted at a university level years for a position to become available. There were several possible places, if you want a Getting into an ivy league might be be difficult there's always a job. Similarly with the job hundreds or maybe a thousand times programmers at the net and with network conferencing and such, friends and colleagues you can talk to, and well remotely. So there's still an ideal to being the uncertain job market, you have startups, startup fails you better be in a place where So people end up in such places but today I was young. There's many more opportunities in look for a nice place physically, a nice place and where there was some community of developers, works that's great because you're now in you can try something else, but that's true for I've been at very nice places, visiting or lived study and I was back as a fellow later. Great The French tried to set up a place at Sophia but then the government changed their meaning and then it was biology and I think it's AI now. your technical area falls away because there's two which has done superb work over the years New Jersey in the U.S where I lived for two reasons to live in New Jersey in my and Bell Labs is not what it used to be anymore balance between life and family and environment Yeah it's hard to give advice. At Um don't over-specialize, don't be too sure that that careers and jobs are a long-term thing. something and then they find that they've spent a that may not have been the right thing and in spent enough time building up friendships I meet a lot of sort of.. I don't know what think that the only thing that matters is their graphics or something like that. And well it but for that and if they do nothing else.. Well if well do Sudoku. You have to communicate and a lot They think that if they can just write the best able to listen, you have to able to communicate and you have to be able to communicate your ideas something about culture and how to express ideas history and on math. Math sharpens your mind, on what's going on in the world, and so don't be be ready for the opportunity, I mean a broad-based you build up when you educate, you're basically can take advantage of an opportunity when it We have lots of opportunities but a lot of them we It was my fairly broad education: I've done I've done multiple languages, I think I knew architecture, I've done operating systems,