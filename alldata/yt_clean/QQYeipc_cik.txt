Hello friends, let's try to understand useEffect useEffect problems. You might think that you important to understand the main concepts of this What's the difference between primitive and use a clean-up function? I'm gonna cover all it's gonna be really helpful and you'll feel more confident when you Okay, as you can see we have a number state. In button that increases this number using a click I'll write here console.log, so whenever we update Like that. Actually, let's write Okay. As you realize, at the beginning it renders It's just because of React.StrictMode in the works as we expected. We are gonna talk about But before, I'll create a useEffect. And I'll see when and how many times it runs. And let's dom manipulation or whatever we want So let's change the title of the page for So, when I click on this button, as you can see, is a really short delay between this number on because useEffect runs after rendering the and only after that runs this effect. Let Essentially we have 3 main elements. and the browser. And in the first render, React! You should render this HTML result. And And React says, Hey Browser! We have some changes those changes and shows them on the screen. And the effect that we give. And the browser takes But there is a problem here on every render. If I create a name state whenever I write something inside this And as you can see the useEffect runs also. But only this number. This is where we should use I'll write an array and inside its dependencies. means, run this function at the beginning, and And right now, as you can it's not gonna run again even if I re-render And sometimes we don't need any dependency Let's say &quot;Title of the app&quot;. And we don't empty array. In this case, it'll run But there is something you need And it's the type of dependency. Let me explain. As you can see we have two states and there and we show this user state here. Name is Let's create 2 buttons. First one will be be updating the selected boolean. Let's create If you don't know why we are updating them like that I highly recommend you to as you can see it works properly. And whenever we change this state, it's gonna Let's try. It's the initial As you can see it works again because the selected is true right now, and useEffect If click again it's still true. But But why is that happening? Let's click here. The true. Nothing has changed, my dependency is still and it's hard to understand for beginners because between primitive and non-primitive data types. Let's say there is a variable which is a string And let's make some comparisons. They both are john. a equals john. And of course, Let's do the same thing for And if I compare them it's gonna be And finally booleans. true equals true, false So those 3 data types are primitives. What about objects? Let's create quickly two I compare them, as you can see it's false. It's refer to different points in the memory, so they You can think like two shopping carts. They inside but their locations are different so carts. And if I refer to exactly the same I'm not creating a new one, I'm Of course, I'm not gonna explain stacks, But you should know that computers compare values boolean, null, or undefined. But when it comes to instead of their content. So we can compare arrays But don't misunderstand here. In React, yes we compare two different arrays like that. It Okay, if we give here variables with but if it's an object or array we have to be there are different options. If you want to what you need in the state. In this case, we user will be changed only if the name or selected it's gonna depend on only these Okay. The name has changed but after because the name is still the same. Let's make What else you can do? you can write here every single primitive Another mistake is to incorrectly Let's say we have a number state again. I'm gonna this number every 1 second. To do that I'll use state like that. If you look here you'll see that If I write here console log. And as you can see there is an infinite loop. is changing. And since the number is again and again. To solve this problem instead of you should use an updating function. I've already And now, it runs only once I say almost because it takes us to another Let's add here any text and save the file. And Whenever I add something else, it gets worse. another interval without cleaning the previous running. Of course, to find out this issue, we this is where React Strict Mode is so important. video. We can test it like that for now. To fix Let me explain how it works. It's pretty easy. When we click on this button it updates if it's true it makes it false again. So every click and it's gonna trigger this useEffect. Like that. In the first render, this effect we can return a clean-up function that runs what we did in the previous useEffect. You mean. Let's demonstrate with console.logs. In and we can make something using toggle or before running this effect again, it's gonna previous interval or event listener or whatever And after cleaning &quot;Okey done! You can run the And when I click, it runs the clean-up function again. And it's extremely useful. It prevents much faster. I'll give some use-cases and you'll example. As I said we, should clean this interval. clearInterval function. Of course, we should pass I'll say const interval and I'm gonna pass it Okay. As you can see after every renders it a place in the memory each time. And another Let's say we have 2 pages. This page includes it shows the posts page and here we There is a fake API and it includes 100 posts. And finally, we are showing the title of looks okey. But actually, there are some and turn on the slow mode. So we can observe Okey. I'm clicking and before fetching data I want another component, it still fetches all these data immediately as soon as we leave the component. a basic example, but for more complex cases with should come here and create a clean-up. And I'll create here a variable. And it's gonna we are gonna subscribe to this API request. And But when we want to cancel it's gonna be say anything. Like isCancelled. It's easier to be false. And in the clean-up function, it's gonna if it's false. Let's try. Right now, everything Let me give you one more example. We have a user id in the URL. If it's users 1 it fetches the so on. Finally, we have the user information user profiles. Basically, when we click them useEffect will fire this function and update the let's see what's gonna happen. I'll turn the slow right after that. And as you can see even if the That is because it's not cancelling and updating It shows us all of them and is pretty annoying. another common naming. unsubscribed false. If &quot;cancelled&quot;. And if we are still subscribed, we'll update the user. You can do the same Okey perfect it shows only one user. By the way, it's not the only way to cancel but if you want to go ahead and create you can use javascript AbortController. It allows at any time. We are gonna use its signal method Basically, when we want to cancel the request, we will be destroyed immediately. Of course, we are Controller and abort. Let's try. As you can see, Perfect. Let's go one step further and write here condition. if the error name is Abort error which If it's something else you can write it directly whatever you want. I'll say todo: handle error. Let's try. I'm clicking. And And if you are using Axios instead of Javascript to axios first. It'll be a get method. I'll delete We don't need a JSON object. It's gonna And I'll delete here and here. Okay. It's really and source. Whenever we want to cancel the request here the cancelToken like that. And finally, from the cancellation or not. If it does, it'll will be in the description below you can check And Perfect. Okay, before ending let's talk about React and &quot;unmounts&quot; or &quot;useEffect runs&quot;, And as you can see it runs only once. But if this strange behaviour occurs. It just acts it doesn't. After React 18, it became one of Some developers got crazy, they thought the new find out some strange solutions. But the answers website. Firstly, there is nothing to worry about, deploy your apps, it's gonna work as you expected. that there is no problem before the production. But since this is a useEffect tutorial, I'll For better understanding, I'm gonna open up again. And if you remember, even if we don't and there is no way to understand We just found out the problem by Let's take the Strict mode back. And right now, as you can see it And I understand that something is wrong. I And if I use the correct version Strict mode tests it for me and it works important to find out bugs, especially in or try to find some weird solutions. Just leave Okay, I think it's enough for today. please like the video. And let me know which hook to follow lama dev's social media accounts. I