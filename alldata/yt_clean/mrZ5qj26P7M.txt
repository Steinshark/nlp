So, like probably many other web developers out there, maybe also like you, I've been using a lot of Tailwind CSS over the past couple of years in most of my projects and side projects. Not so much in my courses for the simple reason that I try to minimize the amount of third-party libraries in there. I want to only use the technology or mostly just the technology about which a course is in the course because every extra third-party library I introduce has the danger of changing which affects the course so that the course may be affected negatively by a library it's not even about. So that's why I'm not really using Tailwind CSS there in my courses but I have been using it a lot in all those side projects, other projects I've been working on. Like many web developers have, I would guess. But recently I started dabbling with Vanilla CSS again. I started using Vanilla CSS in some of those side projects, some projects I really just worked on for fun. I started using Vanilla CSS in there and I am aware that of course there also is more than just Tailwind and Vanilla CSS. You can stop writing your comment. But in this video I want to talk about Tailwind and Vanilla CSS and if it's maybe a good idea again to also re-explore Vanilla CSS and also why it might not be and why many developers don't like writing CSS code. Now of course, first things first, Tailwind CSS is really amazing in my opinion. It's really amazing because it helps you get good results, get good looking websites quickly. The developer experience in my opinion is really great because you don't have to leave your markup. You put all your styles in there. It's really quick to iterate on your styles and to try things out. That's one of the biggest advantages to me to be honest. Though it might not even be the main advantage Tailwind CSS brings to the table because that maybe is that you don't have to write CSS code. You don't have to know CSS or you don't have to know a lot about CSS I guess in order to use Tailwind. You can start styling by just using a bunch of core Tailwind classes, the margin, the padding, the color classes and you'll get good results. And you can dive into the amazing, really amazing Tailwind CSS documentation on their website if you want to learn more. If you want to learn about niche features, niche classes. You can install plug-ins like the typography plug-in to help with styling rendered content like a markdown content you might be rendering. So it's really flexible and at the same time not too hard to get started with. Now I will say that it definitely will help if you do know some CSS because those Tailwind CSS class names of course are inspired by the CSS styling they apply like the flexbox related class names. They do have some relation to the underlying CSS properties that are being targeted. So if you know some CSS, you'll probably have an easier time finding and using the right Tailwind CSS class in the right place. And in addition, if you understand how CSS works or at least the basics of it, you can also save some time because you know that certain kinds of classes will work together just fine. You'll know that certain classes can only be used in nested elements if you have some other class on the parent element. Think about relative and absolute positioning and so on. So that will help but you don't need to be a CSS expert. Now that's however the part where, also in my opinion of course, things get interesting because if you do learn a bit more about CSS, if you do dive a bit deeper into CSS, you'll see that you can do a lot with CSS. And you might be able to do most of these things with Tailwind but not necessarily all things and maybe you don't even know about certain things you can do. But as soon as you start learning more about CSS itself, you'll encounter all these amazing new features that have been added and stabilized. over the last couple of years. And you'll learn that browser support for most of those modern features, like container queries, for example, is really good, actually. So you might be able to use that in your next project. And don't get me wrong, features like container queries are also available through Tailwind, but nonetheless, you might have more control or at a certain point, maybe even an easier time using certain CSS features if you write vanilla CSS code. At least the control part is probably definitely interesting construction, doesn't matter, right? Because of course, if you write all the CSS code on your own, you have full control, you can tweak it much easier than if you're working with those predefined classes and if you try to configure things through the Tailwind config file, which also works, of course. But again, using vanilla CSS might be a bit more efficient there. Now, on the other hand, writing CSS code, of course, has the disadvantage that you'll typically jump between different files. Not necessarily. You might be using a solution like Vue or Astro or some other solution for the other libraries where you can put your markup in the same file as your styles, but in many projects, you'll also have those styles in separate files and you'll need to jump, you'll need to create your own classes and add them to your HTML elements and so on. So it's definitely less convenient than using those pre-built CSS classes and staying in your markup file and working only there. We don't have to argue about that, I guess. Nonetheless, you have more control, you have access to all the CSS features, even features that might not be supported by Tailwind or combinations of features that might not work that well with Tailwind. You will have a broader variety of options if you work with vanilla CSS, in my opinion. Now, you might not need those options, of course, and I'll agree, for many websites, you're fine with just a bunch of base Tailwind CSS classes and the occasional niche feature being used. That might be all you need. Most websites don't need any advanced CSS features. And of course, since many of those advanced features solve problems in an easier way than they were solved in the past, there also typically exist workarounds. There's typically more than one way of achieving a certain look or a certain behavior of an element on a site. And of course, therefore, you might not even care about some of these new features that have been added to CSS. And it's also, of course, true that many web developers just don't like CSS. And I'll agree, it is a super complex language. You can quickly get lost because there's a plethora of properties and values for those properties. And many of these properties have to be used together, so in combination with other properties on other elements, but you have to combine them in the right way. Otherwise, things won't work as expected. Think about flexbox, grids, positioning, and many other things. And that can really be frustrating. Debugging CSS code or styling issues, I should say, can also be super annoying. And in general, we've all been there where some element just won't behave in the way it should behave. It doesn't look the way it should look, and you can't figure out why that's the case. CSS can be annoying. Though, to be fair, you can also end up in such a situation. With Tailwind, it's just probably a bit less likely. And that's, of course, why many people don't like CSS or don't like writing CSS. And that's, of course, fair. You don't have to. You have amazing solutions like Tailwind, or, of course, all those other libraries and frameworks like Bootstrap, Uno CSS, and so on. So you have all that. Nonetheless, when I played around with vanilla CSS, I strangely enjoyed writing that pure vanilla CSS code. I liked the amount of control I had. And, of course, to address the elephant in the room, I liked that my markup was pretty clean again. Because, of course, there's this one thing with Tailwind CSS that you really end up with super long class lists in your markup. So you end up with your markup being cluttered with CSS classes being assigned to some of those elements. That's not necessarily a problem, of course. Auto-formatting helps at least a bit and you get used to it, but I find it strangely satisfying to look at clean code, clean markup code included. So that's of course also something that's nice if you're writing vanilla CSS code. Of course, the downside, as I mentioned before, is that you'll have to constantly jump and switch between your style code and your markup code. You must make sure that you don't forget adding classes to the right places. If you change your markup structure, your styles might break. So there are downsides, absolutely. Nonetheless, you end up with cleaner code there. And I know, I know there are theoretically ways of also reducing the amount of classes you have to add with Tailwind. You could build your own class that combines other Tailwind classes. It does give you all these features, but it's probably fair to say that this is not how you typically use Tailwind and also not how they advocate it through their documentation. And again, it is fine. It doesn't hurt anyone to have all these classes in there. It's just, well, definitely less clean than having less classes there, I guess. It's also funny if you consider the fact that it's not considered a good practice to put inline styles into your markup, but it is considered okay to use these Tailwind classes. And it makes sense. It is not really a fair comparison. These are really different ways of tackling the styling problem, but nonetheless, yeah, having less classes in there is a nice thing to have. Now, I'm not saying, and that's really important to me, I'm not saying that anyone should stop Tailwind CSS. I mean, in general, you should not stop using something you like or you're efficient with just because anyone, including me in the internet tells you, and I'm not even trying to tell you that, I will also continue to use Tailwind CSS in my projects because you can be super efficient with it, and it is super easy to achieve good looking sites with it. I'm just saying that sometimes it can be interesting to go back to the vanilla solution, just as it's sometimes interesting and sometimes also more efficient to use vanilla JavaScript instead of some JavaScript library or framework. It always depends on the use case, and that's maybe the most important point I wanna make here. It definitely never hurts to understand the language or the thing the library you're using does under the hood. It never hurts because ultimately, it also allows you to use that library more efficiently. And if you, for example, learn about a feature like container queries in CSS, you might think, hmm, can I also use that with Tailwind? And yes, you can, and you might find a new way of using Tailwind that makes you even more efficient. So that's also a good thing if you take a look under the hood, and if you try to relearn or revisit the language that's being used under the hood, and you try to catch up with all the recent developments there, because turns out CSS is a super dynamic language. There have been lots of additions, lots of amazing features. Building beautiful and interactive, engaging websites has never been easier in theory because you have all the options you need, I guess. But at the same time, it's also probably never been more overwhelming because you have so many options. And of course, that's where Tailwind and other libraries can help you because they make it a bit easier to use these options. Nonetheless, taking a step back and revisiting the actual language under the hood, at least in my opinion, can sometimes be interesting. But what's your take on that? Are you using some other library? Are you writing just vanilla CSS code? Do you not care about vanilla CSS at all? Let me know. Let me know in the comments, and let me know what you think.