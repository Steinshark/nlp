All right, welcome to the video. My name is we're going to start to talk about graphical kinter, or t kinter. As it's, I guess, called. Python that allows you to create gooeys graphical very quickly. So we're going to start to look very very basics This is going to be a series learn all about it. So before we get started, be sure to smash the like button below, subscribe comm where I have dozens of courses with hundreds code YOUTUBE to get $20 off membership. That's time fee of just $27, which is pretty insane. let's get right into it. Like I said, Python some people call it, I'm probably going to silent. If I call it T canter you know what already have Python installed on your machine. Mac, I'm on a Windows computer. So just sort you already have Python installed. If you it. I'm going to assume you already sort of and make it work without me having to show in here. Here. I have the Sublime Text Editor, you want. I like sublime, it's free. It's open right now. So to start, we need to import lowercase t k i n t r t Kenter. And then we away, let's go ahead and save this file. Let's this to be Python. Okay, so bops up. Let's And I'm going to navigate to my C directory, you you just, you'll remember it, I created this this is where I'm going to save all this stuff. ahead and save it. Okay, so says hello.py straightforward. We're just going to import Now, this allows us to use everything in TK, this. But this is sort of the main way that any other ways, because this is what you're kinter, everything is a widget. There's button a widget. And the first thing you create is like the window. Any graphical user interface if you're on a Windows machine, it's the windows the same kind of, you know, boxy window thing. else. So we call it the root. It's the root k. And that's it. So this has to go first, your program. When you're working with TK, it the first thing that you always do. So create just a very, very simple window, sort So we want it to like say some text, right. hello world or whatever. So we need to create of this series, I'm going to talk about all about them all in great detail. And we'll we're just gonna use the label widget, I'm because it's very simple. I might talk about to create anything is in kinter is really thing and created and then you have to put So the first step, we're just going to create this my label, labor. And then set this equal to it's a label widget. then we want this to go in our root widget, go Hello world. I can type correctly. Alright, a label widget. Now we have to put that widget right. So that's a two step process I was ways that you can put things on the screen look at is pack, we're just gonna pack it of just like packing, you're just shoving It's just sort of, it'll be the size that shoving it in there. And that's what I'm going learned anything else. Primarily, you're gonna And we'll talk about that later, probably now, we're just going to pack this thing in which is my label, and then dot pack. That's call it a text. It's a label called a label, the screen. Right. So that's it. So now the loop. And what an event loop is, when you have a program running, it's always looping what's going on. So as it's looping, you might looping, it notices, oh, the mouse is here. because it's continually looping. If you go you moving towards that button as it's looping, So you have to create that loop. And normally Now, if you're familiar with programming of keep going until something happens, right. program is and then the end. So to do that, widget. And then we want to call it main loop, Right? And that's it. So let's go ahead and We've just created a graphical user interface, visually, you know, Cool, well, it's not that And it's like, what is this 12345 lines of simple. Now, granted, this is a very unsophisticated, away how simple it is to use this key Cantor Right? If you have a bigger program that you lines of code. But everything is a widget. you just define it, and then pack it in there to use this d kinders, which is really cool. we got. I'm pulling up, I have this Git Bash google Git Bash, if you want to use this when that's on your computer or any way that you Windows has a command prompt, it has the PowerShell you're on a Mac or Linux, you could use your change directory into C. gooey. And just to is. So let's just run this file. So I type y. And oh, something happened. object has no l must be lowercase joy. Alright, so go ahead it again. And here we have it's on my other we have it. Put it up here. So this is it. so here it says hello world, because we typed t kinter icon is a fav icon. We can change can see this program has a minimize button works and an X button that works so when we run this again, just for fun. Let's pull this resizes things automatically. In a future resize it. So when you started it doesn't use pack and pack says you know pack this our text widget is only you know what is this widget is only that big. So the window is That's how easy it is. And check it out. I has all the things you would expect, minimize x, right here. What you're doing when you're main loop, this root loop. And that causes in more detail in the next few videos. Alright, program. And we position the stuff on the and easy way to position things, but doesn't I want to talk about the grid system, it's And it's the way you're going to use most from last time. And remember, we use this just going to save as let's save this as a And let's pull up our terminal real quick remember, I'm in C for slash GUI, the director we can pull this over. And you can see here Now the thing to remember about this is, look in the middle. And we can play around with it is. That's one of the nice things about to be. But it doesn't give you a whole lot we're going to go ahead and look at the grid it sounds, it's a grid. So think of all of up and down. And they have rows left to right. you pretty much understand the grid system. numbers. So you would say row zero to put the next row row two, row three, row four. starts with zero. Computers always start with two, column three. That's really all there tricky things you have to know. And we're really, it's not too bad. So let's come over my label, I'm just going to copy and paste And this one, my label two. And we'll keep let's just change it to my name is john elder, in, we want to use the grid system. And it's my label one, and then dot grid, right. So thing here. Let's go my label to dot grid. Now, inside of this parentheses the program where we want these things. So zero. So I'm just going to copy these down and column zero. So they're going to be in will be on bottom. Right? Pretty simple. So and see if it does what we expect. Pull this we go. So here we go. Hello world. And directly notice that the program itself is still just any. We'll talk about that later. But here's this, this stuff doesn't automatically resize, a row zero, column zero, row one, column zero. Let's go ahead and close this. Now let's play So let's say we want let's just change this if we save this back here, and I'm just pressing Okay, so now if we pull this over, we can There we go. So, row zero column and row one. So this is row the rows and the columns all start at zero And this is column one right here, up and you have to realize about this, that kind relative to each other. And what I mean by column one, my name is john elder, let's change pull this back up, first, we need to close Oh, look at that, it's the same as the last come back, come back, it's still just, it column over why we're telling it column five? in column 123, or four. So kintra just ignores you would have to go something like, let's three. And we might just put like nothing, right. And copy and paste. Level three, and we could save this, and let's close this. And now, you can't really tell because it's just nothing in between these two, it's kind of hard to you know, something like this, and saved this now you can really see the difference, right. there's lots of other ways to do this. And courses are the series of videos, I'm going how to position things around using the grid that sort of like a talk, sort of show you very basic fundamentals of it, so you can thing I want to talk about before we end this rid of this and get rid of this. Now, Python D type things with Python. And even though So we don't have to write our code like this. keep track of things. Remember, in the last is a two step process. First, you create the So here, we're creating the things. And here Sure. That's really what you're going to want is object oriented. This dot grid is basically So instead of this, you can just slap this Same thing here. Right? If you're familiar with Ruby programming, you can do in Python, too, because it's object end, put a dot grid. Now if we save this, we get the exact same thing as we would expect. We can do it in one step. That's great, right? we're creating right here. And it's already it even bigger, even harder to read by doing you do. I like cleaner code. And to me doing It's really a personal preference. But I would I just wanted to show you that that's possible and give you a little something to think about. you're building what kind of graphical user a button for something probably lots of buttons. video. So in the last video, we looked at So I'm going to come up here to our grid.py just call this buttons.hi. Okay, so let's just get rid of all of this. Let's get rid in kinter is pretty simple a button like everything a button widget. So let's just call this one And this function right now, inside of here, this. So we want it in root, and then what so like everything, in kinter, once we define up on the screen. So let's just go my button, for example purposes. So go ahead and save And remember, I'm in C forward slash gooey. you know, save these anywhere you want. So pull this over my other monitor. And we see this thing, it doesn't do anything because before we do that, I want to show you one you're defining this thing, you can put a right. So if we save this, come back here can see now the button is disabled, it won't a little bit. So that's kind of cool. One how to actually have these things, do something, the size of these. So we can pad x, and we say 50. Right, sort of an arbitrary thing, pull this over. And you can see now the button right? So the X is sort of horizontal and is left and right. Right. So that's cool. I just put 50. Next, let's go had y equals this, and run it. Pull this over. And so you to tell. See, if I click it, there we go. let's see, just for fun, let's get rid of it and run it. So okay, so it's a tall skinny button, I don't the truth, you're probably never going to may just for you know, aesthetic reasons sometimes smaller. So that's how you do that. So we can disable and enable with the state. Now do we get a button to do something in kinter? very easy. What we do is create a function, So let's say we're creating a function here. a function like any other function in Python. anything you want. So let's create, remember there we go. And we want it to be in root. type, there we go. Look, I clicked now we need to put it on the screen. So let's system is better. But this is just for example, anyway. So that's good to go. So as you know, it gets called. And that's not a kinter thing. an object oriented programming thing. So you line, it executes this line, it sees this it into memory. So then later on, if you want but it doesn't actually do anything. And we we can run this and let's pull this guy back nothing actually happens because we're not tell us execute is really, really simple. name the function my click So if we save this, You click this, oh, look, I clicked a button, it keeps putting it up on the screen. That's really doesn't matter what you want the button right, and you've got a submit button to submit thing, we're just going to create a function. code to do whatever you want to do. But just here's something to sort of keep in mind. quick, and close it. Now normally, when you those things like right here, we're calling parentheses when we did the grid stuff, we that, right, so anytime in Python, when you like that, it's just normal. But here, you think this is gonna work. My, No, it doesn't. it ran it automatically. So it already has button, it doesn't execute it again, like gonna forget and do that. Because what you're you call a function as a programmer, as a need to put these little parentheses. So if get an error just won't work, right, as we of there when you're using the command buttons. can also change the color of buttons. It's who changes the colors? But I think it's fg try. Let's change this to blue. I'm not even But since we're playing with buttons here, this in parentheses, maybe. Let's save this and actually tried this. Yes. So here we have of cool. Now that's f g for foreground color. And let's go red. It's gonna be pretty ugly, think. Yeah. Pull this over now. So now the why you would want to do that. But if you did, you could do that. And and old color. I'm not sure. Let's see. Let's play around here. I don't this? That is, so we got to close this program like that worked. Is that a white button that I think that's why Yeah. It's the only hex one? fff. fff. Whoa, boy, I don't know. What is 000000? Is that black? I can't remember. I think I might be black. hex color codes in there. So that's handy. you know, doing CSS and you're used to using hex color codes, those color codes right there can use those in this fg and bg. So that's buttons buttons are pretty simple and straightforward. we'll use buttons a lot in the coming videos. than this my click function that we use right purposes, to show you how to call a function this video, we're going to talk about input Let's just run this real quick to refresh we get this little button If we click it, kind of cool, but we want to expand on this a webform you know where a box you can type Whatever we type into that thing, so that's go ahead and close this, pull our text our kinter, we use not an input widget, which But it's called an entry widget, we're entering let's save this as entry.pi. So we want to going to call this E, E for entry. So E equals this to be in route. Now there's a whole bunch and things. And we'll talk about that in just just e pack this guy in here. And go ahead gonna pull up my thing here, and let's run that I use, you can use any terminal, I'm where I'm saving all of these files for this you know, we've got this box, we can type anything with this. This is from the last got an input box, that's kind of cool. Before So we can immediately change the size of this with before, I think, and I'm just going to and run it. You can see now our input box want, you can do that. Pretty simple. Let's color in the same way that we change the button go BG equals, you know, I don't know, blue, Now the boxes blue, and stuff we type is black, floats your boat, we can also do foreground instance. There we go. Save this, run it. text inside is white. Okay, that's kind of get rid of that. Because that is just ugly. width. So let's say I don't know, five. So can you tell if you see the border as sort why you would want to do that. But if you So those are sort of the there's other parameters really talk about them because they're, they're Google if you're really interested. But now can we do with text that's been entered into entry widget? How do we actually do stuff pull an E dot get, and this get function gets So let's, let's use this with our button. Instead, let's change this to enter your name, this my click function to fire. So we've got click. And now so when we click the button, When we click the button? Well, let's go. the text. Let's just type in that e dot get run it and see if that works. This over. Alright, So it's kind of cool that we can do sort of want to get crazy, we can type in you know, it. And this is just pure Python. This is concatenate concatenate, you know, smush, do that. So let's run this. Somebody is texting Right. So that's kind of cool. We can also is getting a little crazy, right? So right if we want, we can say, we can call a Hello then the text Hello. And then we can concatenate And then down here, we don't really talk to this about this in your text fields, as long as they're not. them in quotation marks, it's just a string, But if you're like this, it's a variable. your name, john. Older, fancy, let's do the we keep doing this, cool. So pretty simple, that. Now, one last little thing that I didn't then now we want to give us an index number only one, there's only one box, it's the zero value, we can say, enter your name. Right. will put some default text inside of the text you go to like a web form, it'll say, you supposed to type in your email, or whatever want to do something like that. You can run right? So then you would want to do that. Hello, john. So pretty, pretty simple, pretty has been so far in TK, enter. So now, all input boxes, we can enter data in, we can you know, programmatically behind the scenes, in. So we've got really the basis, the fundamentals program do except for taking data, do stuff everything you need to know to do that with Python. So very, very simple, very straightforward, a fully functioning program that actually it just enters a name onto the screen. But really make any kind of program you want, program, well enter the stock quote, right, quote, right, we save it, run it again. Enter Facebook, and then click the button, it says, programmatically behind the scenes to instead to take that Facebook stock, quote, connect bring it back in put, put the current stock to do that. In fact, we're going to start we play around with this. That's really, really really cool programs with this. In this video, we're going to put everything create a very, very simple calculator. This this video. And you can see all it does is It doesn't subtract, multiply divide yet, I just want to do the very basics, get the going on, just do a simple addition, and things in this video, we may have to break it up you can see this is just a very, very basic, a couple of videos ago, it's not fancy looking. like we learned how to do in the last video, program we can build it and should be cool. yesterday and let's just save this as calculate looked at this yet, but you see up here As go ahead and close this. And to change that then dot title. And then just type in whatever let it work. Okay, so right off the bat, we already used in the past, to get rid of this anything anymore, we're going to be using entry text box that we used in the last video, I want to make this with 35. And let's give so now we want to slap that up on the screen. to do. And we want this in the very first column. The very first column, and now we're gonna a column all span of three. And that's because underneath and each button will be in a column. So we this entry field to span all three of those, that in the last video or not. But you can, this some padding, we want to go pad x equals, Okay, so let's save this. And let's just run Just to see if it worked Python calc, you It says simple calculator. It says enter your take that off here. Alright, so so so far, rid of this. There we go. In fact, we can don't need that. Okay, so now, we need 12345678, rid of this. Okay, so let's go, let's call will be button to button three, button four And so we want this to be a button. And we of the button to say one. All right, now we pad x. And let's give this a 40. And let's these any size you want. Now, we're going call this button ad. Right. So we need to create a button JOHN. Let's just put that for now. Okay, so that right? Well, 10 actually, because we need come through here and this will be button and six button seven. Very exciting, right, go through here and change them 23456789 and Pretty simple. We also need, let's see, we and it clear the screen button. But we'll start slapping these up onto the screen. Now, that comes with the computer. And you can then end with 123. So we want to do sort of So and let's come out here and say, put the buttons go define buttons. So it's good to comment see. Okay, so let's go button underscore whoops, And now We want this to go row equals column So button 123456789. All right, so let's just go 23456789. And I guess we need Zero. Okay, so where do we want these to go in the Those go on the bottom. Let's start at the eight, and nine. So 789, that'll be a row row, and then column, column zero, column go 012012. Okay, so four, or five, six, those row two, two, and two. And finally, the last 433, and three, finally, then we want row this and run this guy and see how that looks. from the old. Let's pull this back up. Where rid of that. Alright, save this. And run this The buttons don't actually do anything yet, like a calculator, right? Not bad. So what we want now is to, let's say, We want to button. And we also need an addition button. Let's go back up here. And let's create button this. And so we want this to have an addition And actually, we need to change the padding because So it's 39 instead of 40. So that works. Let's And I'm going to do the same thing. But for And we want to make this long button. So we're what that means in just a second. So we have button. Now we need a button underscore clear. we want this to say clear. And we want this there instead of 91. Because when it was 91, these characters. So taking that into account. size you want. Make it look however you want. So we want LET'S GO button Clear button. Add button. dot what was the other one add clear oh and Boom, boom. Okay, so now where do we want button dot add. We want this on row equals to it. We want what? button equal maybe. So And then here below, we want row. What are row four, I guess. And then column equals I'm starting to lose track here. Let's close is not what we want is gone wrong here. So So let's see what I did here in the code. are on the same? Let's run it again. I've Let's just do that right now. So zero and And then add an equal or both on row five. Hmm, what has gone wrong here? Oh, I know. we need to put call spans of two into each column span we need to do the same thing for needs a paste the same columns man to and cost of entry as well. So okay, save this. will do the trick. Boom, awesome. So now, of these buttons actually do anything. So through here, here we have button add, let's to be a button click right, that makes more oops, go through here, change these real quick. Um, um, um, um, um, um, okay, so and then button, click. Okay, so when this gets clicked, a parameter through here. And let's, let's pass a parameter into a function. Normally, know, and then and do that, right. But you If you remember back, when we first learned these buttons like that, but you can't do what we need to do is something called a lambda, then lambda and then a colon. And then you go through here, and change each of these more. Now what we want to pass into each one of So for button one, we want to pass in one these will deal with later. So now, let's And then just First things first, we want And then we want to insert so he dot insert, that number was on to the thing, right? And save this and run it and see if that worked. do like a bigger number 55 that becomes a problem, right? We can only sort of enter one thing at a time with our code here. So it's pretty simple. we can just go. We could just leave it like may not even work, I'm not sure. Let's see. to put in the number. Let's close this and 108 108. Well, it says 801. Right. So we need we want to look at button click, and, oops, to insert the number plus whatever's already let's put, let's call it current, the current equal to e dot get. Remember, we learned how we can kind of combine these. So we want the current, and then plus number. Now, this gets but it also adds right, so if we're talking these are strings and not integers. So I'm And we can make sure that this is a string to absolutely make sure as a string, because come down here, you can see these numbers, this, we can leave it like this. And we wouldn't is a string. So however you want to do this, put it like this. So let's go ahead and do there's going to be a problem. And you'll say we want 15, one, five, it becomes 151. it's not deleting what's in there first, which new number on. That makes sense. So to do this current variable, and we don't really have just put a dot get right here. And that way. Before we do that, we need to sort of Oops, we want to delete if I could type. There in there. So we've done this before we just work. Let's run this again. Let's run it. Hopefully this will do it. So 105. Right, do we want to do next? Well, let's clear button. knock that out real quick. This is really here, right? So we just need to put this in Clear button. And right now it's calling button right. Now we need to create this function. define button clear. You don't need to pass anything we need to do is e dot delete. So let's save So we're getting 555896 clear. I didn't work huh? Your button object is not callable. Oh, you thing. We can just go command equals player. pull this over. 5058 clear 666985 there. Okay, so that seems to So what do we want to do next? Well, let's dive into these two. Now this gets a little of different ways you could do this. And, lot of thought into it, I just did with the you could probably do it more elegantly. But we need to do is come down to our Add button. let's change this to button dot add. Alright, so we need to define button underscore, write that. Now. Here's the process, like, talk about my logic here. So let's say we we do that, when we click the two, it needs it needs to remember that we put two in there, clear this so that we can type in the next it has to take whatever we've written in the it remembered from the first time. That makes it has to remember to, because then when we and add it to that first thing. And since can't really be passed from function to function, add function and the equal function. So how a global variable. So that's what I'm going over to our source code, go come back. There we go. So our button add. One thing we need to do is pass a number, number somebody types in, right. So over here, Or we could come up here and instead of passing that number, get so I think instead, yeah, let's do that. We'll up as I go. Okay, so instead of this whole because we're not going to pass anything. Okay, so let's call this first underscore And then we need to make sure that it's a a bit. Right? Now, we need to create a global of first number, I'm just going to call this we need to then assign something oops, changed. Okay, so now we need to assign that something. we need to make sure this is an integer, and f num is a global, we can use it outside of let's go ahead and then clear that text box. the same thing we've done before he delete this and run it. We won't be able to see if working. Let's see, at least so if we go five working. So now, the only thing that's left let's come down here to our lambda section. from button. Click to Buttons equal. And same through a lambda, we just call the button define button underscore equal. Okay, so what do we want to do? Well, first And let's call this second underscore number, So this is going to whoops, this is going in the text box, right? So now we need to to make sure. And that there's nothing sitting variable called answer. Well, we don't even sort of E insert, let's go e dot insert. We've now what do we want to insert? Well, we want to insert num plus. Let's say make sure this is a variable. So if num is our global, from our button, again, we could just do this he can get, instead in a variable, it's easier to read, come back Okay, so let's save this and run it. I have but it should. So let's go five plus two, it should be seven, equals 10 plus eight equals 18. Clear? eight plus two equals 10. simple calculators, just doing one stupid do all the other things subtract, it becomes equal to button. And if we look at our code, know if you're subtracting or adding or multiplying? it know? So now, when we go say five plus two, we hit sign knows to add, because that's the only we're going to build out different buttons and when that happens, so if we go two, times will the equal to button No, we want to actually That's the real big thing we need to look already sort of seen the solution. When we thing, we're going to create a new global, pass multiplication, we're gonna pass whatever do an if statement just to go through the do this, if it's subtraction, do that, etc. of more buttons. So I'm just going to copy we need three more. So let's call one of them. what happened there, multiply and then divide. need button, let's call it button, subtract, button. Divide, right. Okay, so we need to sign, we need subtraction. Let's use this let's go that that's the sort of divide sign now we need to come down here to our grid equal to that's row five. So it looks like dot grid, and then we want row one, row six, span. So I'm just going to copy this two times. next one, let's go. Multiply. And this one column two. Okay, so let's save this. Oh, we need to create these button, subtract, Let's just go button subtract. For now let's actually, we can just copy this whole thing. multiply and hear what divide sounds about. a run, just to see that, you know, oops, actually, it again. Oops, button, subtract invalid syntax. got the Define. It's Friday people. That's Alright, save. Now let's run this. All right. to be a bit bigger. Let's just do that. So So subtract, or we add, subtract padding, what you do with kinter. You kind of mess go 41. There we go. Save this. So run. Okay, so not great. And there's a lot of space there. So instead of 39, let's go 40. And let's go All right, that's looking much better. Things the divide one just to see, or anyone. lucky Okay, that's looking pretty good. I think we'll don't do anything yet. We need to actually let's go up here to our button add right. to global, and we want to call it math. And addition. Right? So everything else pretty up here. And let's just copy all of this to let's call this subtraction. But everything so. Finally, not finally. But for multiply. for division. Let's call this division. Okay, sort of play around with our, what do we call What's the equal to button equal? So where this is what it used to be right? We just the same. And then we delete, which probably will stay the same. And then we insert first number and then whatever the second right? Obviously, we can't do that anymore. division, multiplication, subtraction, or do we do that? Well, we need a basic if statement. to equal to signs for conditional statements, addition. And then, if that's the case, we add the two together and then pop it up on So let's just copy this a few more times. So addition? Let's call this one subtract. More duplication, you can see how the text editors need this one too many. Okay, so subtraction, we're going to multiply, and for division, we're going to think that'll work. Let's fire this thing Almost certainly something. So let's go two times five equals 10. Yes, that works. Let's to work. And let's go 10. pips, clear 10 divided converting this to a float, which is kind you clear this and go 10 divided by three, a decimal number, so it converts it to a float I think that works. Right. Now, this is ugly, of thought into making it look good. But you different sizes, different colors, you know, with Windows. Right? So maybe, as we haven't will talk about that in the coming up videos this if you can, for the most part, right? other things here. There's square root, there's of stuff. So maybe, as an exercise, see if like this. That'd be kind of cool. All right. guy, and not really a design guy. So mine the functionality, how to do these things way, there's probably lots of different ways But just off the top of my head, I was like, and easy, right? So that's what we did, created look at icons, images and exit buttons using our calculator app, let's create a new file. startup code that we've always used. And let's to save this as doesn't really matter? Let's you'll notice I put the title as learn to now the first thing we want to do is add an run this real quick. So let's go Python will little feather, that's an icon, right? That's of every program you've ever seen. So here's icon up there. Here's our Sublime Text Editor. type programs have little icons at the top. icon, which is an Ico file dot Ico, it's basically and width and height, or 32 by 32 or 64. By usually you create them using Photoshop or create them. In this video. I'm gonna assume how do you use it? Well, it's pretty easy. it right underneath the title. Let's just that's what we're calling an icon bitmap. the location of the file. Now I'm going to gooey, I put it in the same directory. And I called files. So if we save this, and run it, let's kotomi icon, this is the same icon that I called a fav icon. In real life using programs very simple. Very, very easy to do. And that's now very quickly talk about an exit button. But it's really easy. Let's just create a call a button quit. And it's going to be a we want to put it on our route thing. And type exit program. Alright, and now the command root instance of this TK class that we've right? You just throw a root dot quit Python do object oriented things like putting a dot you do that. So now we can just go button, so let's save this and run it. Boom, grab it and pull it over. So he says have, if we click it, boom, the program ends. Very, all I'll say about that. Let's push this down using images and using images. At first, it's some things, and you have to do some stuff. images. And you don't have to import anything, two image types. gif, gi F, which nobody uses even remember p n m or something like that never going to use it. So to use real images a whole other module, and then do some a little pi L and pi L stands for Python image library. So there's a new one called pillow, it's a going to use pillow, and we need to install L. I'm not sure why that is kind of weird. import. And then the thing but it's not. It we want to import image t k, capital T, lowercase we reference it. But we have to still now on the command line. And we install this like PIP is the Python package manager thing, right it means you didn't install Python correctly. Python, there's a little screen that pops to path and you need to check that box. If will work. So if this doesn't work for you, back and re install it and check that box. windows. And you'll see a tutorial on how to install pillow p i ll o w capital P, I think Yeah, so I've already installed it. So I'm installed, you will get something else that up on the screen like you know downloading installed by running Pip. Pip freeze if our things I have installed, there is pillow right clear the screen here. So now we've installed program here. How do we actually use this thing? Well, it's but just this is like one extra step. It's I'm going to call it image IMG Or let's just an image, TK, dot photo image, right. So that's Like with button, we call the button. Here this thing here. And then inside of that we're we want to go image dot open, because we're whatever your thing is. Now, I have a picture GUI directory. So if we pull this up, so this kintra files and right, so here's that icon and here's aspin, I saved it into this folder. to put this stuff on there. In fact, I really I just did it to show you. So since it's in program, we could just leave it like this. a two step process, we define the thing, and is a three step three step process, we define else. And then we put that something else about every widget in kinter, I think I think the background of a button of a text box, use, I'm just gonna call this my label, create and set this equal to a label, we've done a little bit different. We're just gonna go image equals, we've sort of defined this label, now we need we can go my, my label dot pack, pack it up go ahead and run this guy. There we go. Now, of me and my Husky aspirin, she is hurricane. easy to add images to your In this video, And it's just it's a pretty simple Image Viewer. around through different pictures, we can when we get towards the end. And it's pretty this is basically just the code that we worked up on the screen, the big change I made was our gooey directory. And the reason why I of images in this program. So when you have to create a separate folder for those images. is just images. And I've put a bunch of images, I've got five of them. And we'll take a look let's save this new file as what viewer that and see what we have. We just have it looks even to put the exit button there. So let's do that in just a minute. So in the last video, we just had one image, one image. And that's just this image right So I'm just going to copy this, and let's to name them image 12345, just to make it aspirin one, aspirin two, and then me one. Me too. And me three, if I can type three. Alright, of scroll through things. But in Python, a that's what I thought we would do here. And And then set this equal to and it's just going underscore image one and I'm just going to then we need to change this to 234, and five. If we want to access an item in the list from list. And then the number of the thing and the zero with item. This is the first item, for instance, this one, that would be 012, easy way to sort of scroll through any sort a list. And this will make it a lot easier the buttons, we'll just, we'll just access easy. So okay, so we've got this my label one, since we changed the name of this. And Since we're doing more than one thing, let's column equals zero. So we want this to be go columns span equals three. And the reason the image, we're gonna have three buttons, button. And each of those buttons will be span all of those columns. So okay, that's as well. We want to create our buttons right we'll see why in just a minute here. So what and a forward button and an exit button. So equal to a button. We want it in route and think. Now we're gonna have a command for So let's go this and this. So this, let's call exit program. And for here, we want the how to do this in a previous video. And then us to forward. And we want this to have arrows going forward. And like But we'll mess with those in a minute. Now back dot grid. And then what row equals one, zero, so below that is row one. And so button one column equals one. And then finally, button to be row equals one and column equals to quick run. Make sure we didn't mess anything in Vegas. Okay, so we got exit program. I change that. Right now. Nothing happens, the change this real quick to exit. Oops, maybe spelled right exit program lowercase. we need to start kind of building in the functionality is we're going to create a couple of functions and a back function. And actually, let's just right under the label grid, let's say we want define forward. If I could type, and let's call this return something. Okay, so we've button. And let's add these commands. Man through these buttons because every time we the next one. So we're going to start out time we click the button, we need to add one, need to do a lambda, lamb da, we've learned through a button command, you have to do a call this back. And we're going to pass something forward button, let's go command equals lamb, and then something. Okay, so what do we want the first time, we don't need to pass anything And let's just call back. Why is that, because time, it'll already be on the first image. So we don't need to pass anything in that this. But the forward one, we want to pass just a minute. But think it through like the So we want to the back button, or we want So we're just gonna pass two, right? So up to build this out. So what do we want to call what we call it. Now, we need to do things function. And we've done this in the past do that again this time. So let's call it have three things my label, global, button, going to do the same thing in our back functions. right. So you'll see exactly why we do this now the first thing we want to do when this that's already there and get rid of it, right. show up. But right now, the last image is want that we want the first image to disappear. forget, it's just an internal function that of something. So our images in my label, so the screen. So let's save this and just see real quick. So let's pull this up. So here's the first So so far, so good. That seems to work. Now, should be. So that's my underscore label. And it's going to be we're just going to define it's image equals now What image do we want? our list of images, or image list list. So Well, when we first click the button, we're passing number two. But we don't want the next number number. So that's plus oops, plus one. So plus one, which in this case, is going to Okay, so we passed into you would think we list, start at zero. So the second item in first item. So since we passed two in here, if item, which is the second is very confusing, right? Okay, so that works. Now. We need to, image on the screen. So let's see if it does. not work. Why not? Oh, because we defined on the screen yet, right? So we can just come going to always be the same, right? So okay, run it and see why I like to run things as Boom. All right, that works. Okay, so far, Next button, again, it didn't go forward, it's got the old one on there, the two, right, right here. Let's call spacer button, underscore And that, oops, that equals what a button just redefined the the text to equal to put two forward arrows, type lamb, da, there we go. Lambda, we want it to be whatever this number was. plus one, why because it's the four button. And every to the next image to be sort of ready to go. image will be ready to go in the button itself. need to do button underscore back, we need to update the Back button as well. So that's And the command is going to be lambda MBDA. to spell lambda back. And then here, it's But we want the previous one, right. So instead work. Now, oops, we need to actually put those to see button back button forward. Just copy Right? back and button forward. Alright, so Boom, boom, boom, boom, up. Last one, it disappeared. to do something to see Hey, is it the last it right, so that you can't click to the sixth So we're going to need to do that. Let's just Let's go if and then image underscore number that we're passing in the image number, right? underscore forward to equal let's just define things, and the state equals disabled. Alright, worked. Boom, over, so first image, second And sure enough, it's been disabled. And we we need to work on this button. We haven't our forward button is completely done. So grab this grid forget because the same thing to delete whatever image is there before we grab all the stuff from up here. And paste. We just need to make a few changes. So my yes. The button forward will stay the same that Because let's see, let's look at our defined forward We're taking whatever image number and subtracting one. Now, if we click it again, we need to the same, I think. Yeah. All right. So then screen like we've done before. So I can copy this and run it. See if that worked. We went through that fast, but right off the bat, this is not disabled, we do that a second. So forward, back up, that has gone wrong here. Back image number nine. Back takes zero positional arguments, but one was in there, okay. And pass that that variable. forward, forward, forward, forward, back, we do that, it starts at the end. So we need that. So let's come down here to the very back button. Let's just go state equals disabled. So now, right off the bat, it's disabled, so it won't Now, if we come back here, back Back, back, So what we need to do is the same thing we So let's pull it right in here. And go if double equal to sign is what you use for a is one, which is the first one, then our button equals, just find this thing again, root, the text disabled. Okay, so save this. Give it one disabled. Here we go. All whoops, where'd end that wants to say, Well, if we go back, Okay, well, that seems to be working. And quickly, you might have to go back and watch the the main things to sort of keep in mind list. And if you're familiar with lists, it's t kinter. about this. And every time we click going to create a little counter and just it up on the screen. Forget the one that was before this is new. Everything else we've already learned except for that little thing that button, we just need to update the buttons, that these updated buttons will work outside Pretty straightforward. Granted, this is a a nice little exercise, and yeah, pretty fun. And bar here at the bottom that sort of updates status bar is actually fairly simple. We're labels in the past lots of times we know how twist to it. We're going to add a few new to sort of Make it look like a status label order to sort of stick it to the bottom of just create a new label, I'm going to call then we want this to be in route and we want Okay, so let's go ahead and save this. And new file, and I just copied all the text from go back and watch it to see where all this we're just going to save it in our GUI directory, so right off the bat looking at this, this of five, how do we know there's five images? And we know there's five of them. But it's there are, if your program has hundreds of to go through and count them all by hand. you're adding more images as you go, you're to figure out a way to do this programmatically So what we can do is we can call the Len function thing. And what thing Well, we can just take on it. So let's just do that, let's concatenate we just pass in image underscore list. Right? because this returns a number, because it's know, items are in this list. And there are a number to a string. And this is what that convert this to a string. So we can call the pass that in. Okay, so that should work. Yeah, if it worked correctly. I'm gonna go down dot grid. And we want this to be in row one, and column equals zero. And we want this to span all this and run it, make sure it worked correctly. so python status.pi. pull this up. And okay, five images. But you know, nothing happens Also it's down here at the bottom, but it's border or anything like that. So we need to come back up here to the top where we've defined we want to create a background or a background function of the widget and set this equal look like it's sunken down a little bit, because little bit. So we can call relief, R e, l, want this to be sunken. Right. So let's save if it worked. Okay, it's definitely got a you'll notice it is there's some space between didn't tell you about it. So to get that I our program. And I found the last button button give it that little 10 pixels or whatever, close this. And let's see, let's just take You can see it scrunched right up there. So to add this back and save it. So okay, so right in the middle. So how do we stretch Well, we need to add something called sticky and other videos yet, but the grid system impact system them. And it's based on sort of a compass is up South is down, East would be to the we can, we could tell this to stretch in any So that's from west to east. So to do that, we go w plus e, right? Let's save this and run it. See what that did. Okay, so very cool. It's stretched all the So how do we change that? Well, we come up of things here, we can anchor this, underscore, this in a direction, so we want it to be on So if we save this and run it, we can see, sure enough, now it's over here. just change this to W for West, save it and And pretty simple. So let's go ahead and exit like it the other way. So I put it on East. we want it to be, it's anchored in the right functionality. So I'm going to copy this. a button, either the forward button or the So I'm going to paste this in here. I'm also grab this because we want this to update whenever So we need to paste that in here. Okay, so It's showing image one of whatever. Now this But this part does not. So I'm going to delete And we want to concatenate a couple of things. to output whatever number that we're currently number, we passed it into this function at we're already passing that number in. So I just paste that in here. But remember, again, and you can't concatenate and an integer with this to a string using the str function. We should work. Let's save this and run it just mistakes. So I like to run things often. So update. So we need to fix that, obviously. And to we just made to the forward button, just need going to copy this come down to the back function, And if I was a good coder, I'd put some comments, right. But I'm not particularly a good coder let's save this and run it. And hopefully. So if we go forward, we're on image two, if we go back back to or on image five of five, if we then go back at least one way to create a status bar. It's really simply and really easily. The programming straightforward. Really, the big thing that else this border thing and the relief thing and the but those are just basic label things really. very cool. I want to show you how to use frames with kinter and Python. Okay, so I've got a new file open code that all of our projects start with and frame.pi? Just frame. Okay, so frame.pi. Now, a frame is just what it sounds like it's a a label on it or not. And it's just sort of app. So you might have different sections And a frame is a good way to do that. So frames like all the other widgets, and we create widgets. So I'm just going to call this frame, called the actual term is a label frame. Right? want the text to equal. This is my frame, this some padding, let's go pad x equals five, with these patterns in a minute to show you this on the screen. So let's go frame. And let's give this some padding. So pad x equals see sort of exactly what this does, with the in a little bit, once we get this thing built, see if we save this, I don't think this will anything in the frame yet. But we can run my C four slash gooey directory where we've this frame.py. Run it. Yeah, so we pull this we haven't put anything in the frame. So that's do anything we want. Whenever we put anything of showing you how to do this, I'm just going it B. So button. This is a button widget. we want not now normally, we would say put now we don't want it in route, we want it we were saying put this in the frame, right. same, we could just go text equals, don't want to add this to a thing, we could just come back here and run this guy. And here this is my frame. And inside of it is a button do anything, because we didn't tell it to it. So notice this frame. That's kind of cool. Now let's play around with this. Remember, for the frame itself. And then when we packed this. Let's pull up the code again. pull this up here. You'll notice when we packed it, when we pack the frame for pad x and pad wide. And we've done pad the y axis. And you notice that's on the outside put five and you can see that's like that. go head x 100 and pad y 100 really make this and run it again. And you notice, boom. You know packs it inside of the the outside container do the opposite. But that back and let's say 50 run this again. That's a little better. So that's really all you have to keep in mind when we create any widgets. It's always a then we put it on the screen. So in this one when we give that thing padding that goes it on the screen, and that pad x and pad y keep that in mind. Now the last thing I want is kind of weird, right? So check this out. we don't care, right? Otherwise, we use a thing about pack and grid is you can't do or grid and grid. So you notice here, we did that's not necessarily true anymore, you can we can go grid, row equals zero column equals get an error if we did this. But now we pull this over, and boom, it works. Now it's positioned thing in there. But we can create another time, so we could go, I don't know be too. And write, or here, don't click here or here. one and column equals one. So we want down boom, you see, sure enough, we can play around though for the frame itself, we packed it. definitely keep in mind. Now, one last thing, have one actual other last thing. And that's we can actually get rid of that as well, just right here. remove it completely. And of a cleaner look, right? Very cool. So think going to use them all the time. I mean, there's of your screen that you want to sort of keep this side and a frame and all the form things have another frame where there's images or out visually is always a good idea. And that's I'm going to talk about radio buttons, which text next to them. They're used for forms And they're a little bit trickier than some past. So we'll go ahead and take a look at file, I call it radio.pi, I saved it into our code in the past. And this is just the in all the other courses to create just a what we're gonna use is a radio button widget. And then much like some of the other ones And then for the text, we go equals. Let's little bit different. We're going to create variables, hinter variables, they're slightly show you exactly what the difference is in variable to each of these buttons, so that if somebody clicks on the button that gets put into the variable. stuff, you know with it in the future based clicked. So this will make sense in just a our right, you can call it anything you want. is option one. So when somebody clicks on option one, you can put anything you want, to need to do some other stuff to this, but to pack this on the screen. Usually we do create the thing and then one to put it on we can do this all in one line just by going work Alright, so I'm going to just copy this one, option two, and the value from this will onto the screen. So let's see, I think that define this variable. So like I said, this variables are a little bit different. They you would a Python variable. But here, we we've assigned to it is either a one or a So the variable needs to be an integer variable, if we want to do number of things. So we're function, and this function allows kinter variable. So when we click on a thing, it'll in the past with other things, in order to we call our dot get, remember, we want to get whatever the variable a different radio button, we want to be able these instead of just regular Python variables. So let's see, we have one, we have two this, If we wanted to pass a string into this, we of integer, it's str variable. It's a string to do integers. And after I do this one, I'll a couple of ways to do it. And we'll see this. up our thing here. And let's run radio.pi. is not defined that I spoke button wrong. this, come back here and run it again. Okay, one and option two. And this works, but it really tell if we've done anything, right. so that we confirm, confirm that we did this label, let's just call it my label, and set route. And we want the text to equal what to go my label dot pack. Okay, so let's save reason. And we'll see. Right off the bat, set this yet. And we can if we want, so we go our dot set. And inside here we could say and run it, you remember these Python or these kinter variables, you at that in a prior video. Because see, now That's what happens when you set it. Alright, because we haven't created a function to update that and do that right now. So let's create clicked, I don't know, doesn't really matter. And now here, we want we want to pass no value. And now this will of these is clicked, we need to pass that And we've seen this already in the past by buttons and do that so we can go command and de we've done this in the past. And so what do we want to pass in here are our back Are you it. Right. So instead of here we go our dot get copy this whole thing and paste it onto the other radio button as I did that right? Certainly all get jumbled on two, because we've set it to be two. If on two, again, two appears. Very cool, pretty a button real quick. Let's just throw a button button. It's in root, and the text equals I'm just going to copy this whole thing. It's That is, right. Yep, I'm just counting parentheses. ups, button, hack parts, save this and run it, boom, it goes to one, two, we click it how you do that. Now, in the future, anytime we can by either calling our dot get, or if whatever value we passed in whatever keyword to do it. And this works, right. But these And you may not want to do all 10 of these, a loop in order to do this. And so that's not so quickly, it might take a bit. So I'm out those. And leave this for now. So what I'm gonna call this modes. And inside here, some topples for the radio buttons that we oh, I don't know four of them. Okay, now inside just gonna copy these and paste, paste. So place online or something. And we want to we want on which type of topping we want on our pizza. what cheese, mushroom. What's another type then. So this is the thing that's going to value that we're going to pass in here it and two. And instead of numbers, that's this Let's do strings this time. So I'm just going same thing as the thing. Oops, copy, paste, it modes because it's the it's a mode of a want. If you wanted to call it toppings you we'll see why in just a second. So now let's Now, just like in the last time, we need to of calling it our What should we call, it's variable. str. think that'll work. Actually, pizza. Yeah, let's do that. And we want to to what let's make the first one pepperoni. things and put them on the screen. So I'm it's just a basic loop, right. And we want like we did last time. And then we want this we created a text, a variable and a value, the text will equal text, because we're calling text. In our loop capitalized modes. So we're going to loop to take each of these values. So this will one text and mode. So this will be text and will be mode, this will be text, and this Right here, text equals to text, right? And this thing right here, right? And we want the value in that variable to this thing in this thing, right? So okay, there we go. And that should work. Right? actually, we need to change this also. This this and see if this works. Oh, we got an blah. Oh, I misspelled a variable. What line? eligible. variable. There we go. Cannot type on a Friday. You kidding me? Okay, so now we see. We've got pepperoni, cheese, mushroom, and Because we set that when we started, if we cheese, I click boom, she's notice it's not time around, we didn't put a command. Like actual button, we're not doing that this time, done it once. Now we're just doing it when see. Let's just take this and go anchor equals Let's close actually. See, these are all centered, right? We close they're all anchored to the west to the left, of this pepperoni too, because we don't really label. Like we can just get rid of this if Label. Alright, so save this, run it one last click mushroom, onion, click onion. So this do it. Just doing a simple loop. It's easier button things. We could have done that too, bit easier. And like I said, I call this modes, this to toppings. Right? And instead of mode, And we change it here to topping. Save this. something up there. Cheese, boom cheese mushroom, pretty straightforward. on talking about creating file, I call it message.py. And I've just always have. So a message box is just a little a couple of buttons Yes or No? Okay, cancel gonna use these a lot for a lot. Different import a module to use this. So we're going idea to spell import correctly. And we want right. So to do this, there's actually several just create a button. Let's go button. And to be I don't know, pop up. And then let's we actually want to call a command. So when And let's call this pop up. Right? So now we need to create a pop up function. So let's we want to create a message box. Now, there you can create. And I'm going to go through basic one is show info. And this one is an puts up some text on the screen. So the first and the first one is the title bar that you this is my pop up. Right. And then the next the actual pop up. So let's just type hello So let's save this, head over to our C forward these files. And let's run this message dot today. forgot our parentheses. Okay, so save clear the screen because he wants to look we done here? button. Text, man. All kinds of errors this morning. Alright, it one more time, clear this screen. It actually little app here. Oops, it disappeared on me. this boom, here's our little pop up. And you And then the actual thing itself says hello to it, because this is an info, showing info. So that's pretty much it. And it's pretty there are several different types of boxes in this comment. And these are the different show warning, show error, ask question asked, of these, we just changed this a little bit to do a show warning. We can save this and up. And then it says hello world. But now little warning thing. Now I'm going to turn up my volume. And if that sort of error sound? here that that comes with a warning that didn't close this. Take a look at the next one. So and run this again. Pull it over. Did you hear that? Brown? That's the error So that's the error one. Close this. And let's Boom. Pull this over. Okay, so now it just Right? So if we click Yes, nothing happens. you in a little bit what how to do things or cancel or, or any of that stuff just as was asked question. And so now let's try ask save, run. Oh, okay or cancel, right? And again, we'll a bit. Was that and what's less lat left finally asked Yes, we get yes or no. Okay, so that's cool. But now how So what we can do here is take this whole we can call this variable, anything I'm going equal to that. Now, we can actually print And once we know what it is, we can do an stuff depending on that. So let's create a we want the text to equal response. Now let's say this. And we've got the Ask Yes, or no Pull this over, see a pop up? Yes or no? So kind of interesting, right? If we click No, this and pull up our thing. Now we know what So we can go if response equals and you need not assigning we're comparing, then we can let's click there. Let's type in. you clicked. No. Let's save this and run it. And pull this over. So hello, world. Yes. zero, you click No. So let's pull this back interesting. Now, that's for ask ask Yes, going to comment that out this stuff and undo very quickly. So ask, OK, cancel. Save this. Run it again. pop up, okay, or cancel. So if we click OK, we get cancel also returns a one or a zero. Right? a look at this one. Save it. pop up. Yes. No. If we click Yes, it returns So that's kind of cool. So now, if we want to change this to Yes. Right. In fact, let's just run this to make Save this, run it again. Zoom pop up. Yes. you clicked Yes. pop up. quickly, again, let's comment this out. comment, rest of the show air. Save and Run. I could think this is a better way. Because in the this, you need to be able to figure out how on your own. And this is how you do it. So interesting. What else do we have? Show error Save and Run This over hello world, okay, it returns Okay. it and run it, bring it over, pop up, okay, easy to create message boxes. And there's want to create a message box for any number In this video, I want to show you how to create new windows just basically had one big window, we've had But as far as like creating a whole new window, you're going to need to do that, in some point base.pi. And it just has the same, you know, throughout this series. And so what we want how do we do that? Well, you notice up until just shows one big window on the screen. And to want to add a different type of window if you do a drop down thing, whatever. How it, I'm going to call it top and set that level function. So if we save this and run this is our main window, there's nothing in you can tell the difference because the icon the kinter default icon, whereas this one that's not that great. There we go. Come back. Close this. Now, anytime you want to do something it after this. So you know, if we wanted a Now normally, we would put this in root right? ad so we can designate different windows that world, whatever. And then let's just pack quick. head back over here and run it. Oh, t i do that a lot, I think seems like at least that. Okay, so now we have our main thing. window says hello world. So you can you can we could put an image in there. Remember a So we could go let's get rid of this. And equal to image TK dot photo, image. And then I think we had, we had a directory called I had this assmann dot png picture. So we a my underscore label e L and just set this label want this to be in top and we want the image on the screen. Okay, so that should work. Boom, we get our first normal window with window. Man Aspen little yawning here. So which is the same title as this one, we can can just copy these two things for the title right under here. And instead of root here, So if we save this, come back over here, run We get our main window and we get our second window and it has the is what it said before so let's change that All right. Very creative. Alright, so now So that's kind of cool, I guess. But chances are, you every time you open your program, you want a drop down or click a link or do something Right. So how do we do that? Well, let's create call button, we want this in route, we want window. And then we want the command to be what open. Okay, so now we need an open function, method, open that file. Now inside of here is where we want all this over. Oops, go. That seems like it should sort of won't. I'll show you just now what back over here and run it again. Oh, you know Back, it's, we're having a day here in Vegas, brain is just not woken up yet today. So save main window. It has a button, I misspelled second window opens. But check this out the what actually happened here is all of our variable. And we're setting it equal to this We need this to be a global variable, because like this, with a second window, Python sees it gets swept up in the Python garbage collection, to do is called Global for my image. And now we get this guy, if we click it, boom, sure one of those weird things. I'm not even exactly You just, it just does. Notice when we did of this function, it worked just fine. Because So the local variable works in the main window, you open this top level window. Alright, so can go button to equals button. And we want close window. How do we do that? Well, we I think we looked at destroy a few videos have to make sure and designate that we want back over here and run it. Oops, drag this a third time, I've got to pack the button. one of those days here in Vegas, cloudy Vegas window. When we do that, we get the second as our image as this button, we close it, There it is, again, close it, like an open we go. So that's pretty much it pretty simple. of this TK function at the same time. Instead, what TK enter calls the second window that The only thing to really worry about is this of here, and it doesn't work, try adding whatever they'll likely fix it. But pretty simple. the file dialog box to open files, no matter Okay, so you've got your program, you want file, anything at all. How do you do that You just use something called a file dialog. but we need to import it. So from TK enter, just call route dot file name. Now I should just return the name of the file and the location got these images in our gooi slash images colon, slash images slash Aspen, one dot png, can then open that file in your program programmatically. things first, let's just look at this dialog open file name, right. And then inside of things. First, we need to tell it what directory directory Do you want to be showing, so you you want. So if you just want the C directory, slash images. We do that right? So then we want title. And now this it'll have a little caption title at the top, select a file. That's good. And now, we need So, you know, you could just put all the files, PNG files because we want to open a PNG file, images, you might have GIF images, GIF images, images, whatever, you can designate that here. plural, I spell it right file types, there you want. And inside of here, we can designate by putting them in parentheses, and then separating see, is that the right number of parentheses? want, I don't know, PNG files. Yeah, PNG files. and that'll pop up in a drop down box. And need to tell it, what type of file and PNGs is basically saying open any files with that So that's it for PNG, if we want to then designate see, again, just type in a little description, type of file. This is this just wildcard we So we would go any name, dot, any extension, and then Okay, I think that's right. I get parentheses, but I think we close them all. it. I should mention I named this file file.pi. code that we always start out with. You're back over here and run this guy. Oops, what Of course I did. File dialog. There we go. over. And when I did, it just automatically in C four slash gooey, forward slash images, we have all these PNG files. These are the viewer several videos ago. So I'm just going PNG files, or all files that comes from this files and we can type anything at all we want, Your code. I'm back. Actually, there we go. If we click here for the only thing we have here are PNG files. let's change this to JPG and then let's change save this and run it again. And boom, it pops it's calling the default is the first one And when there are no JPEG files in this directory, pop up, right? So if we click this, it closes, real quick and see what what happens when just return this root file name thing in a equals set it as a label, we want it in route. let's just pack this on the screen real quick. files, we want all files, let's call Aspen it just returns the location Aspen two, right. that, if you want to, for instance, open that, okay, because we know the location. And now how to open images. several videos ago when built. So we use proper code here is this want my underscore, image equals image TK TK dot photo image. There we go turn blue And we want what do we want to open we want name, right? So now we go my image label, to put it in route, we could just go image we want to pack this on the screen real quick. And we get JPG all files. Let's open Aspen thoughts that look weird? Oh, lowercase. Okay. All right. So let's save so we want all files, we want to ask bend. thing. It's also listed that because we have cool. Now, one thing that you'll notice is the file dialog box right away. And that's around with that a little bit. Let's create to a button. And we want this in route. And want the command to equal open. Now we need function. And inside of here, I'm just gonna over. Okay, so remember, when we open an image a global for its variable. So my underscore to hack this guy. Okay, so let's save this up somehow. Let's see how I did it. Your object has no idea. What do we do? Let's right, get rid of that. Save it. See I told getting crazy. Let's clear this screen. Run So we pulled This over, we got the button box pops up. We call all files here, open on the screen here, we don't necessarily have That's pretty cool. So very easy, very simple to open any kind of we've already worked with images before. So can do a PDF file, you can do an HTML file, open it and put its contents on the screen, open dialog, this file dialog thing. And it's remember is just that it's not opening the the location, it's allowing you to click a the location. Once you have that location, already learned how in the past for is opening paste out the contents in a big label. If pretty cool. Okay, so sliders, what am I talking slider that goes down at the bottom or on a web page, or like right here, you know, kinter and graphical user interfaces. So that's a file called slider.py, I have just the basic this entire series. And so let's create our going to use the scale widget, which is weird, I have no idea. But they've called it scale. or horizontal, left and right and the default gonna do that one. First, I'm gonna call it And we do it like we've done all the widgets the only real thing you need to tell it is your slider to go from zero to 100, from 50 whatever range, you have to designate that but the from needs a forum and an underscore, if we leave off the underscore, you can see an error right away. So I have no idea why you need to designate the two. And notice make sense. I mean, let's be consistent here, let's go what 200, I don't know. And now we just go vertical dot pack to put that you pack it on its own line. You don't have so often in the past, for some reason you why in just a second. Okay, so slider and run it. And when we do that, we get this to look at, but you can change the graphical border, all the stuff we looked at how to can do that in the same way. Okay, so that's down. That's the default, we can also go horizontal. And that's going to be a scale. You know what, And right here, we just add another attribute, the screen. And we want this to be horizontal. And likewise, we want to pack this guy on over here. Run this guy again. Zoom, whoo, we get this horizontal widget. All right, really quickly. We haven't I think we looked But up here we can designate how big we want dot geometry. And then say if we want 400 back here and run it again. You can see now bit bigger, gives us some room. I'll just these sliders, they slide they return numbers. exactly what they're going to do, they're slid to. And we can get that number. By calling labels, I believe in the past. So we would to slap this into a label, we could go I don't splat, right LA, b, e, l, there we go. And equal this. And we want to pack this on the see this zero label right here. Now if we So if we want to do that, we need to kind of a label, let's create a button and let's and root and the text is click me. And the And we want to pack this up here, let's create this slide function. this. Okay, so every time we press the button, quick. Just to make sure this is working. to 103. If we click me, boom, 103 188, boom, you want to do with that, that is up to you, we want to resize this, right? We could do up. Because we got this root geometry right our thing here. And instead of, say, 400, dot get. This is an integer, and this needs thing in a string function. And that'll allow so that almost works. But we need to change into our function here. So if we save this they pull it up and see here. So if we bring work like that. So it's changed the 138. horizontally, go 179. And that works 200. All right. Cool. we want to save this and run it, come back change this to 200, boom, we can go back to could do the same thing for this if we wanted what about just moving the slider and having too. It's a little trickier. But let's take we want to just use the slider. So we'll stick into that. And we could send that command And then Okay, so that should work. Now, this will We need to pass something from here. We need reason. So let's save this and run it just to work. Like I said earlier. Yeah, we get the problem. I was thinking I've the reason function is below this. So if we copy this, will go away, but it will get a different see. Yeah, so we got all these errors. So the commission And, but it, it's not sending our slide function won't pick up with the we do that, for some reason, just a weird that? We just come over to slide and let's Well, I don't know. Far very variable. I don't know, save this. maybe not. run it and see. Um, yeah. See, look what happens when we're at very touchy, right? Now, if we go 300, it's it starts to resize. And that resizing makes the best way to do things, right. Unless you you can't even use your arrow. So yeah, that's a button. But if you want to do that that in, var value or any just any variable at I guess you would call it gets passed into really like doing that. But you could now use both of the sliders. So we could go here call the string function. And inside of here dot get? Okay, I think that should work. We got to There we go. Oh, on 18 horizontal dot pack. pack. Recall that pack. missing a lot that Now. I'm just playing at this point. This let's move this to 118 and 147. Boom, now back to 400. By 118, we could change this And that works. need to change this to 400 I think so that you do that. So sliders pretty simple. All use these for all kinds of different things can change the display of this, make them the length of them. And all that stuff in in the past pretty simple. Okay, so checkboxes, are those like round buttons that like lets are square boxes, and they're more just like, buttons. But there's a couple of little tricky bit weird. So we're going to take a look at just call it check.py. I'm going to save it basic starter code that we've been using forever. a counter variable, just like we did with a little bit different. In order to get their call like the variable name dot get, if you name dot set, you know, we've looked at these var. And it's we just go var equals and then declare the kind of variable that you want. So we want this to variables, you could have integer variables, but in this case we want and we're going to reason why we want int is because when you that you're assigning to it behind the scenes means you've checked it and zero means you are numbers. They're integers. So we use int I'm just going to call it C for checkbox, box button, I can spell. And the same thing as always, put the text as anything you want. check this the value of the variable name that we're use our var variable, so we just type in a var. Now there's a couple other things you those in just a second. But just for right on the screen. Now. I mean, we can save this high. Pull this over. And you know, we can actually doing anything, right. So to actually just create a little variable real quick here. said variable, label one label, and I set a text we want set equal to var dot get want could just pack it on the screen. And I think and come back here and run it, this is not it's unchecked, and it's zero. If we check create some sort of function in order to do Just to see. Let's back up. And what let's and route and the text equals show selection. to have a command equals to show, let's just function. And we can just change this to this. this function, and it'll show this and update pack this guy on the screen. always forget So check this box, I dare you show selections works. And that's how you do that. So that's Now we can get into some other weird little we're having fun here. But I mentioned at we can change this to string var. And if we can change that if we want, we can have the it to pizza, if you check the box, right? the box, it could be you know, john, like do that down here, when you create your checkbox, it, just by defining the on value. And then value equals off, right. So if we check the box, now, instead of it being Now instead of it being zero, it'll be off. but we can't run into some problems. And let's Remember, we've up here we've changed this is no longer zero or one it's on or off. And to change our variable to a string variable. going to get some problems here. First thing checked by default. And before it wasn't checked if we click this, nothing happens. Right? then click it now it says off. If we check is going on here? Well, I don't know. This is a little glitch. I've discovered I what what in the world is going on here. It's there's space here, right? But I have no idea by default. And we don't really want that. to right up here at the top, when you first on this screen, we can use something called Right, and that does exactly what it sounds save this and run it, this over the first default, which is good. Now, if we click this, if we uncheck it, and click it is on right weird is going on. And that works. And now time, start off the bat by checking it. And But just is one of those weird little kinter on off, that's pretty cool. Like I said earlier, call the on value. Pizza. And the off value. hamburger? I don't know. I dare you pizza amberger. You know, like, Well, you know, come back over here. And let's size. Right. So and then here are string are could say, Would you like to Super Size your right. So have you got an app where you're your order, you could check this and boom, like that. So those are checkboxes, an awful some little bit of differences, specifically that. I have no idea why that's the case. So Alright, drop down boxes, what am I talking you click the little drop down box box opens, the thing, and that's that, well, basically down box is basically something called an to do that, let's go create a variable. And we looked at in the last video. So there's notice that so it's just option, we need to this in route. And just like with the checkboxes, you know, whatever we check in the boxes, in the box we select, that will be assigned we want, or we can call it clicked, whatever of here, the next thing is to sort of designate Tuesday. And you just separate these with Friday. All right, so now we just dropped this clicked variable, we need to actually this is a kinter variable. So it's a little whether it's a string variable or an integer strings. So we're going to use a string variable. And that's it. All right, so this will work. starter code we've been using. And I'm saving it won't show a default value, as you'll see right off the bat, pull this over, you can items, but if you click on it, and then select We need an actual default item. So how do know, we've played with these variables, these set. So in this case we want to set and then just call Monday here. So if we save this, it. Now, pull this over, boom, it says Monday right so how do we get the selection and use it boxes in the last video, we can just access my button. And that's a button and it's in And let's give this a command equals show up here at the top, we can define show. And then let's go my label equals label. And to equal. Now we're gonna want this clicked, And then we want to pack this on the screen. one too. And I'll always forget that. Okay, Okay, so show selection, boom, Monday, Thursday, Friday, wow. Okay. So that's how you do that. Now, once you've you want with it, right? one little thing sort of designating what options we want to show up in the menu. And that's okay, it works. your drop down that you want. And this is of doing it like this, we can actually just It's called options. And it's just a regular print in and paste in these items. So here, line, because that's what we like to do with can, instead of putting all of these guys Now, one thing we have to do that's a little to put a star in front of it. So all right this, we set it equal to Monday, we can now sequel to options, and then just pick an item, That's just a Python list, the zeroeth item that's a little nicer way to do that. So sort So if we save this, back here and run it again, now it's been created as a list. Why would later on, if we wanted to add Saturday, right? you just go right to the list, it's easier And then everything just works. So if we save Saturday's there Saturday. So pretty simple, Like I said to the checkboxes, we're using of way. And we're showing them in the same created and click get. This is a little different, begin with. So that's kind of fun. And that's up until now, we've been having some fun with of program vastly improves the sort of power with databases we just can't do without. So you're going to need a database. So we're with kinter. So we're gonna use the sequel So it's super easy to use, most people don't not very powerful. It's not like MySQL or test projects, hobby projects, things like really easy to learn how to use MySQL and of switch over if you need something more program, all we have to do is import it. And import this, all we have to do is type in SQL lite database in our program. Very cool. start using it. So I've created a new file starter code that we've been using forever. a database or connect to one that already same. So let's go create a database or connect to the database. And so we just create a variable call it con short for connection. And we're Connect. And then inside of here, we just connect to or create. So I think in the next sort of address book app. Right? So let's book. That dB. So this doesn't exist exist But like I said, if it doesn't already exist, actually save it in whatever directory we're our code in these videos in the GUI directory, in the GUI directory, super easy, super cool. a cursor. And a cursor is sort of like the the database. So anytime we want to execute we send it off, and it does, it comes back thing we just create a variable I'm going lot. So I don't want to type out cursor every of you lazy people that are just as lazy as I guess. So let's go create cursor. Okay. we want to commit those changes to the database. do that, we just go con dot commit. So let's we're done, we always want to close our connection. program ends, our connection closes automatically. do to explicitly close your database connection. Okay, so we've got our cursor, we've got our you know anything about databases, you know, tables inside that do all the work hold all interacting with. And think of a table as we just need to designate what those columns that becomes a new row, right. So things like those are all columns in the database table. those columns. And so that's what we're going so to do that, we use our cursor, we always to the database, we're executing some sort to go execute here. And then inside of here, Query Language, SQL commands to do whatever create a table now, usually, you just put commands. But since we're creating a table lot of stuff for us to type here, I'm gonna just six quotation marks instead, open and allows us to do stuff on multiple lines. Otherwise, on one line. So what we want to do is create So let's call our table addresses. Right. to just designate the different columns that And now we need to designate the data type. cool thing about SQL lite is it only has five text, integers, which are whole numbers 1015 2795, that sort of thing? No, which means and blobs are like image files, video files, usually have a lot more data types and it's use Here's a few write text and numbers basically. is we have first name, we want last underscore the address, and that's text. And you notice that's pretty simple address. Let's go city, And let's go zip code. And that's going to we want to put a comma at the end of that. And boom, there we go. Now we could have used long line, it's really hard to read, this those triple quotation marks. Okay, so I misspelled was hard. Execute. There we go. Okay, so we our table one time, we need to commit those gonna save this, head over to our terminal run it, this box pops up. There's nothing So we can just go ahead and close it. And into my C drive and look at gooey, you see exists it created for us inside of it, presumably we won't really know till the next video when not it worked to find out if it did work, code right there. So in the next video, we'll and stuff. So we can type in people and their should be cool. I should mention very quickly, sequel lite with Python. So if you really check that out is $29 for the course. But using that coupon code, YouTube, you get all you'll get this one for free. And it has it's has all the stuff and in much greater detail, these videos right here, I'm just going to more later if you want. But definitely worth database stuff. In this video, we want to the things that allow us to type in entries good stuff. We got our database.py file from created the database, we have our cursor, out the table because we don't want to recreate we just need to do it one time. So now we we want to look at in this video. So the first that we can type information into. So we want state and zip code. And we're gonna use entry We've done this in previous videos, so you a look back at the older videos. So I'm going call it's an entry widget. And we want it say 30 ish, it's probably good. And we need name dot grid. And we don't want to pack this stuff here. So we don't want to really just bit more sort of options to place them exactly the grid system. So we want this to be in And for this one, oh, first, let me just copy also going to put excuse me a pad x of say need one for last name, address, city, state So last name, address, city state zip. And to L name. This one will change to address City, city and state and state. And finally, zip code in column one because we need to put text you know boxes which so it's probably changed about it, it's a good thing to think these Alright, so the first one is in row zero, So that's row one, row two, row three, row right, we can put these all back together say create text boxes. Alright, so like I And, let's see, let's just go let's call him course, going to be a label. And we want it name. And that should work. Now we want to grid. And we want this to be row equals zero, we just need one now for last name, address, and change these again. So address label and state label, very exciting label as zip code, label, and or, and five, and up here, we just need to bear with me, city. The joys of Kansas State. together, I just put line spaces just so it's typing them. Okay, so now, we also need buttons, a submit button. Right? Okay. So let's call going to be a button. And it's going to be Add record to database works. And we want this to have a command and let's so we want Submit button dot grid. And where six, because under underneath there, and column want this to span across both columns. So else do we want, I probably want to put some that'll put it down a little. And I want pad it over a little bit. And I want iPad X to bit. Okay, so I think that will work. Now let's kind of head up here, somewhere up here. Looks good. And let's go create submit function, let's just return it for now. Actually, let's stuff into the text boxes, and click the button text boxes then to clear so then we can afterwards want that information to just be sitting there. Call the actual name of the entry widget dot we just do this for each one first name, last time. Fun work of typing these and over and code. Alright, so let's save this and run Pull it over, and it's looking pretty good. then click this button, boom, it disappears. what do we want to do, we need to actually we type into the database itself. So the first to your database and create a cursor inside I'm not really sure why that is, but it is let's head down to the bottom here and grab and close our connection, we need to do that over. Okay, so now, how do we actually submit from our form? Right? Okay, so let's go insert into table. Right. And just to add to create a table, we're going to again, our cursors, just what we do. So we're going the table that we want address says, right, we use this doc type, string, thing, Doc string I want to use placeholder variables, just by just creating sort of dummy variables, with a colon. So I'm going to name these the anything you want, but it makes sense to name underscore last name, apps, we need a colon, address, comma, colon, city, period, a co Now, at the end of this, we need to, oops, come down. Now inside of here, we need to create a almost it's just this. And Python dictionaries have dummy variable. and the value will be whatever's Pretty simple. So let's go. f underscore name, and you separate them with colons. And then and set them well entry widgets are like kinter what we're going to do. So let's go f underscore on the next line, we just go through and do underscore name dot get very exciting work then what city colon, city dot get. And then state, colon, State DOT get. And get. And this is the last one. So we don't are these. So if you named these up here, we just happen to name them the same as we because that kind of makes sense. All right, make this look better. Okay, so if we save it worked. Now, we're not going to be able to see if functionality to output the stuff from the can see if we get an error. So let's go john, in Chicago years and years ago, live in Vegas Pretty cool. So add record, boom, it disappeared. up here. So we can assume that it added the we need to create a button to actually pull it on the screen. So we can see whether or down here. And let's just create a query button. button. And this is a button, we want it in root and we want the text to good. And we want to give this a command of function. And we want to query underscore row seven now, column equals zero. And again, let's go pad y equals 10. And pad x equals equals 137, which I happen to know is, is quick and just look at this, we can see up that function real quick. So whatever we call underneath our submit guy, submit function, go define query, qu, er y. And let's just that. run this again. Boom, now, what did sometimes. Column span. That's ugly typo. time's the charm, and boom, so that button one. And of course, it doesn't do anything Okay, so querying the database, we haven't really talked Again, let's come up to our submit guy. And database again. And we still need to commit There we go. Okay, so to query the database, it's pretty execute like always, so it's that C dot execute, to run some SQL SQL command, we want to execute select. So we want to select and what do we So the star means everything. And we want So one more thing we want to do is, in most a primary key for each record. And a primary you know, every single entry you make, it's three, it creates it for you. So we don't really cool. But it kind of ignores it, since you specifically tell it to print that number. is. So we want to select everything. And the for. I don't even remember at this point, the primary key, right? So primary keys are later on. If you want to delete a record, there might be 20 records of somebody named So you can delete record number 87, for instance, ID of 87. So that's what that's used for. here, want to select everything and our IDs called fetch also see, fetch all and fetch all of the records. Now you can do fetch one, first record, you can do fetch many. And then want to fetch 50. For instance, we don't want So normally, you could just print out, see, this is kinter. And print doesn't really work and kind of print that onto the screen. But that, well, actually, instead of using CDF so that we can then put that variable into call this records and set that equal to that. print it to the screen in our app, but it the app. So let's run this real quick just already put in and back over, run it again. And if we click Show records, nothing happens. record appears. And you'll notice these brackets, a Python list. And inside of that list, there tupple, you can access each of these things item in list and the tupple, 12345, and then of course, do anything we want with this information, the screen however we want. So what exactly Well, instead of only that print there for now, But since we just have one record, let's go. Let's what do we want to call this. So we've called and records. Right. And then we want to let's we want that to plus equal out whatever is a tupple, inside of it, the zeroeth item of call the zeroeth item will change this in first time we do this, since there's only want to sort of print out record, right, which is the item in the loop that to concatenate and then put a line break. And the reason why I want to do this And we want each item that gets printed out line break in here. Now, this is a problem you can see one of these a couple of these a string with an integer. So we actually need is not too hard, we can just wrap this whole outside of this loop, we want to create a So we're making a query and set that equal label. And then it's in route and the text we want we actually need to before we start looping, equal to nothing since we're not function go loop through results. So finally, we need out, and I think we're in row eight. Now, down here and look. So row seven is the last thing we did. So equals zero, and we need to column span this will work. So if we save this and run it again. On each line, we get an item in that tupple with these things. Okay, so that works with have more than one record. So let's create Let's go Bob Smith. He lives at 20. East, cedar, cedar street? I don't know. St. Louis, MO, Missouri. What's the zip code? Is there this to the record, boom, it disappears. If let's close this. And we can see, whoops, going on there? Oh, that's from the first time we click the button. this loop, we're calling the zeroeth item here's our list. And there are two items in And then there's a comma. And then here's item two. So we're calling zero with item. So that's the only thing it to do that. So let's just take this off, and we save this, and run it, let's clear the records, boom, now we get each tupple printed inside of there. That's in our records. Then key the O ID. So there's one, there's two. from just regular Python, how to do stuff we want. And it's still printing this out of this print thing right here. I'll just this code later, but down here, let's see out anything we want. So each record is an has item numbers tupple numbers, right. So is the first name. So if we just do that, first names printed. JOHN and Bob. Right. we want. With this, we can concatenate some again. And then let's just grab this whole thing and paste it and then concatenate the line Okay, instead of record, the zeroeth item, last name, excuse me, save this, run it again. Hold on over show records. JOHN elder Bob cool. If we add another person, Tina Miller, I don't And I don't know what's a good town, New York, code is there. If we add this boom, that disappears. Miller pops right on up. So like I said, you to leave that to you. I'm just showing you things. There's 1000 ways you can create reports That's the beauty of Python and kinter. So video, we need to build a thing in here to Smith. There's no way to do that yet. So we'll if you're interested in this database stuffs, over to my website, coding me calm, I just This is just pure SQL lite and Python. And $29. Of course, you can sign up for total I'm always going on about and you'll pay just one, which is better than one course for 29. coupon code. Some people don't understand great detail really go in in more detail than going to show you some basic stuff right now. at that course to learn, you know in depth going to take a look at how to delete a record quick and show you what we have so far. So click the Add button, it adds it, we can show Miller, we can, you know, configure this to just to make it easier, we've just put the go ahead and add the user ID number, that because we're going to need that in a minute is. So let's pull our code back up. And go where we're outputting. The result on the record, the zeroeth item of the list, I guess, name, I believe the the ID is the sixth or concatenating. And let's add another space, want to copy all of this. In between these, the fifth or the sixth. Let's try the sixth real quick. Hold on this over show records. Okay, that was right. So now that's cool. That works. Let's see, we can not work, but let's add another plus. And a backslash T stands for tab, if we want to that. And give it a look. This may or may okay, because sometimes if these don't line too much or not enough. So okay, so we now ID at the top here, we could put a little, name, or a little field that says name, and something, we'll just leave it like this for up here. This is bothering me, it's shoved a little bit, we can add some padding to this. text box here real quick. I'm just going to we have, here we go text boxes. So first name, that equal to no we haven't done this before, to add padding to one side. So I just want add 10 to the top. And then I can go comma So we'll do that. And we could just copy this I want to do the same thing to the label. save this and run it just to see what we have it's fun. Okay, that looks a little better. all line up. So okay, now we want to talk the Show records, we have these records, right, we want to delete them. Now there's a couple can look for a specific record, and then say is important. So if we said search for john But there may be four or five john elders a common name elders, fairly common, you know, your database. So if you say delete Bob Smith, single Bob Smith in your database. And you by this o ID, this primary key number is user in our database only has one specific unique of Tina Miller, she's number three. If we Miller, which is what we want. So how do we database? Well, it's pretty simple. And we up here to the top of our thing, and let's so let's define our function and let's call probably good. Now inside of here, we want to do all the is connect to our database and create a cursor. and close We can just paste these in here. So how do we do this? Well, it's pretty simple. our cursor, and we execute a command, as we've is delete from and then name the table that our table, his address is right. And then clause, and it's just a sequel clause. So designate the column that you want to search. O ID equals and then what? What do we want? All right. Now I'm seeing this does not look marks. Okay. That's right, delete from your placeholder. Now we can do the same thing. and then put quotes. Well, we need single JOHN, right, we could do that. But like I said, that'll and delete every single john in our database. want is Oh, ID equals place, holder. Now we'll a bit. So what we need now is in our app, of the ID number that we want to delete, and go do that real quick. And let's just come let's go create. Well, see, we have some more down here. Yeah, let's just delete button. And let's just copy all of Let's call it delete button. Anything here, This is what we're on. There was a row eight let's try that we're in row nine column span this is going to be. But the command we want funk function we created. All the way up here, So let's change this to delete. Record. So to see if the formatting is correct. It's bit bigger, so I'll probably knock off what? it again. This is just for show basically. one more. So 136, save that. Run it. Okay, that's pretty, pretty good. Now we need label and a box that says, you know, ID number gonna add these think right here. So let's Right here. Let's go delete. underscore box. it's an entry box and it's in root and the we can go delete underscore box dot grid. Let's go. Row equals nine, column equals one. Okay, label for the same guy. Let's go delete underscore equals Label. And that's in route and the do it out like that ID number. work. And again, underscore box label, dot grid equals row one, no, zero, right. So now we have to, let's change since we put these two rows above, n. Okay, I think that worked. Let's save this okay. And it is not everything's all sort row, obviously, doi. Alright, so this should button to row 10. All right, it's Monday morning, Monday morning in Vegas. Alright, that's better. IDs, sort of, kind what do we want? What do we have it before explicit in what's going on here. Okay, our good. So now we want to be able to, you up, we're probably going to want to change that right now. The fun with Cantor. So that So instead of row a, we want row 11. Now, is working. Okay, the good stuff in this video. down below there, you might want to play with there's more space in between these two than you might want to do that. I'll just leave padding in this stuff if you like, right, do that right now. Why not doing all the things our delete. And here, we'll just go what pad label. Where's the actual delete box right run it again. Okay, it's looking a little to fix our delete record button to actually do that later. actually delete one later, to get a little crazy. Alright, so when we command, or the Delete function, which is And we want to get rid of this placeholder. want to what we're going to do is come down let's say delete box entry. And we're going to get that is going to be to go delete box dot get like to actually do is concatenate that on afterwards. run it and pull this over, we can show our If we show the records, again, some weird Now if we close this and run it again. Sure is gone. And it was just that easy. So pretty which is the primary key that we've talked on here. Now this is a string. Now this is So you would think it would need to be an on here. So for some reason, with the kinter, and it will still deleted even though the you delete from a table. Not too bad. And to update a record. So we have these things we change that, we'll look at how to do that look at how to edit or update a record. And pops up that has all of the updating editing more stuff onto this screen, which is starting it all on the screen have the record update complicated. Plus, it allows us to create how to do that several videos ago. So if you the playlist. So first things first, I'm going from now on, if we want to delete a thing, If we want to edit it, we select it and click that, that word right there from Delete to it is right here. And let's go select I guess. Okay, and if this is the first time you're on on all the videos up until now. So you're how we made all this stuff. So now let's create another button right below this update button. I think update would be a good And let's change this from delete button to like. And it's going to be row 11. Now, in the output on row 11. So we need to probably That will work. Alright, so instead of select or edit record. and edit is smaller than delete. bigger 145 ish. Probably will work. Alright, to see if if that worked. Close it, run it a smidge smaller maybe. And if we click Show that that's looking good. So yeah, let's change that from what was that? 145 to 144. too big maybe? on 43. I don't know I'm just that looks better. So now that changes delete Where's that? That is the delete it right here. Select ID it a quick look one more time. Okay, so now Oh, that's why this should still say delete going on this morning. Alright, so delete run it one more time. Hopefully we got it could select whatever. If we wanted to delete it, we click this button, we haven't actually go ahead and do that right now. Or at least we created this update button. I just copied want that. Let's go. Edit. Yeah, that sounds of our program. And any old were really let's Let's say create. Edit function to up date. A record. Okay. So, like I said earlier, we want to just going to come to the top of our program. we can just paste it right in here and make What do we want to call this? Let's call it route guys, editor and the title let's say edit or update I keep using both of those it to make sure that worked. After the day work or not. Okay, so here we go, new window the same size as our old one. So that's good. we want the same boxes and labels to show can, you know, edit those if we like. So I'm those boxes here, we're just going to copy our editor function. I'm just going to paste and make sure it's all tabbed over. And since keep the name the same. But I'm always kind confusing. So I'm going to go underscore editor editor. Oh, I'm just gonna use the mouse, and paste every single thing. And we could to be changing the labels or anything, so don't need the Delete box, we can get rid Okay, now, these, we want them to show up create a thing, we always specify right here So we need to change each of these editor, same thing with the labels. Um, okay, so that looks pretty good. Let's go sure everything's coming along correctly. now we want a button underneath that says we can click the button to save those changes. going to come down here to all of our other and bring it back up to our edit function. Now, we don't necessarily have to do all these keep all my code sorted together. And we want edited record. Okay, so we want to save record. needs to be six. And let's give that let's right. So let's save this and run it just worked. Edit record did not work. Alright, what do in editor, of course. So save that, run it again. See that worked. Edit record. coming right along. Now. Next, we need to call it these fields, with whatever record Edit, this will pop up. And it will have record each of these boxes, right? So how do we do we've done many, many things in the past, we want to copy this stuff, basically. Yeah, copy all the top of our function here, I'm going to as always connect to our database, create everything. We don't necessarily need the is from addresses. But now we need to designate let's create a variable for that field. Let's equal to what? Well when we run this thing they come down here and get the name of that delete box, right where it says select ID, I guess is this guy. Let's copy this back that into a variable. And so we get that remember, And now we can take this and reference it. where Oh, ID equals, and then let's just concatenate Yeah. Okay. So now, we want to sort of cycle through the result, things in one of those in each of those boxes, before, we use the for loop. So we went, let's go loop through results. So here, we can go each item that comes out of here is a list name, the first item is the second name, the zip code, right? So we can print out each using an insert command for our boxes, right. dot insert, right, and then we have to put when we learned how to do entry boxes, right, thing, right. So we could just do this for last name, address, city state zip code. So address, city, state zip code, right. And then we need to change actually, we don't need this code, I just, query, we're just pulling out each of these here, here and here. Okay, so we can get rid to do, we've got these boxes created. And need to put this underneath. Whoops, get the put that underneath these boxes. Okay, so ahead and run it. See how we did. So we need to edit Tina Miller, she is number three, the new box pops up and her stuff is all listed haven't actually built it to do anything yet. record when we press it. So let's come down of this, we have our actual button here. And that's no good, we need to create a new function this update. And that should be okay. And And let's just define update. And we don't we've done, always we need to do a database to paste that in here. And like always, we say, close our connection, commit any changes we that's in those those fields. So well first, our update guy, and like I said, we want to the I think it's the query, know the submit this code to clear the boxes on the original paste that in here. Because we definitely we've closed our connection. Now these boxes our edit field. And our boxes are f name, dash editor, agile everything dash editor. all this in. Oh, you know what, we don't really do that. Anyway, we just want to close the window, and we're done. And that should be about what code we need to actually update know if we looked at this before, but we want we want to use these triple quotes, so that doc strings, or doc types I can ever remember know, you can look it up doesn't matter, three, marks to close is what we're looking at. So we want to update our table, which is addresses then we want to set. And now we need to designate first created our table, we named these columns, use down here. So we're gonna go first underscore you'll see what this colon first is in just separating each of these with a comma, address city, state equals colon state. And finally, code. Right? Okay, now, we don't need a comma for and we need to continue on with our SQL statement. and then you set certain columns, where certain put a where clause in here, where now Oh, colon o ID. And then the three ending quotes. we're saying is, the record we pulled up has three, right? So we're saying update these for each one, where our primary key or row a second here. In our case, it'll be three but if you were updating, updating record 27. But it'll, it'll find that out on its command. That's, that does the things. But things are. Right? We have to tell our code, we do that just right after the comma here, this up. And inside of this dictionary, we key value pair of the dictionary, this, these or a quote, first. You don't put the colon a colon afterward because it's a dictionary. a dictionary. Now, we need to just say, what will be if we go down to our edit would be this right and we need to dot get that now We also need to make a quick change to being used inside this function, if we want make these global. So let's go create global just going to for each of these, we just type all we have to do. So let me just copy and city state zip code. And then we can just city underscore, editor, state, underscore so save that, that will work. Now we can use now all we have to do is just kind of go through again, that's this guy right here. colon, get. As we've gotten things a lot, we get address. And that's address underscore editor city underscore editor dot get. And state colon state underscore editor dot get. And zip code, which is zip code underscore editor dot get. that is O ID, colon. Let's call this record Now this we need to designate up here. So let's go box dot get. And that is if you think way back in the first just run this real quick and see here. So records, and we type a thing in here, this so we need to get three which is the primary that's going to be all the way down here with button, it's going to be the box. So it's not right here, delete box. All right. Copy And that's just this right here. Delete box. tack this on here is because we're Oh ID is to define that. And that's where we do that order. So we have first last address, city here. First, last address, city state zip But that's what you sort of do. So okay, so SQL statement, update addresses set each of the primary key. And then down here, you just way you do it. When you have multiple things past, I don't know if we looked at update series, but you don't have to do all of this but in this case, we're updating many columns. So Alright, let's save this. And let's give And we have show records, Tina Miller three. not 21 Tina Avenue. It's 121 Tina Street. we can close this. Now if we want to edit it's 21 teen Street. All right, so it actually did it now, it doesn't actually, disappear. So how do we do that? We can just close, we can just go What did we call this So much code going on, I'm losing track of Edit command or edit function, which is this Okay, so that's the name of it. So in our update dot destroy, is that the command we want? think maybe, alright, let's save this and Alright, so three, edit record. change this Save it, that did not work. editor is not defined. Well, let's make this mobile editor that do it. Try to get. Alright, so select ID three, edit record. save it, boom, it disappears, we're going to open it back to street, save the record, boom, it it's back to St. Alright, so that is looking better. looking stuff, we could just change this to this if So when we edit, instead of 400 by 600, let's try 400 by 400. Let's run this again. Three at record. That's a little bit better. point, three edit record. And that's a little in this video, we're going to build this very app with kinter and Python. And in the next bit more interesting. In this video, we're to a third party API, grab some weather data, the screen, think air quality, think like I love to hike in the mountains around here, bad ozone day could really sort of affect want to check the smog and the air quality website, let me see if I can pull it up here, code and get the current, you know air quality we have moderate this unhealthy for sensitive and you know, Run for your lives. So we're now it's green 38. If it was moderate, this this would be red, etc. So we're going to few videos. Now, there's an API that comes So that's really what we're going to be learning internet with a kinter project. So you know, if you learn how to connect to them from kinter, not interested in air quality, that's no big to learn how to connect to API's, and stuff check out air now.gov. And I should mention as we build this thing a little bit more interesting. We'll make where you can look up specific zip codes and video. We're just going to connect to this first thing you want to do is head over to website where they have the API stuff, and an air now API account, click this link, and you just have to fill it out with your email that you can click to, you know, prove your do that. Once you've done that, come back Go, and you'll see this page. So go to the web we can see the forecast or we can see the You can do it by lonneke, longitude and latitude. and longitude. Let's see you can do it by I'm not really sure what that is. We just a look at the documentation here. This is to read through here, it'll return that our know, in Rs, here, it says Las Vegas, it returns coming from. It also returns the state, you I don't really care. So I didn't put that That's interesting, right? If you need to project, and you just don't want to mess with can enter a zip code into this thing, it will be a good lookup tool for you in the future. the Aqa This is the actual number. Now this return the aq II which is this, which is an ozone level particles, pm 10, and particles, the size of the particles. So these are particles unit of measure they use, and this is 2.5. on here, there's a frequently asked questions, here fact, your frequently asked questions, We don't really care what else category number, unhealthy, you know, Run for your life numbers here. So that's cool. Okay, so that's the have to create a query, so they have a little your zip code, put the radius you want, I'm you select what kind of data you want to receive. use JSON, when you're getting API data. So you can grab this and use it, you can also going to return if you're interested in that. we're good to go now. So I'm gonna head back over, I've just created same sort of starter code that we've always though, to 400 by 50. So it's smaller, right? our URL just for future reference. Okay, so now we want to talk about how exactly do you Wide Web, the wild wild web, and then bring your project? Well, there's lots of different called requests. And it is. Let's just import plural, we also need to decode the stuff that as JSON. So we need to use and we need to comes with Python. But requests does not so our C gooey directory where we've been doing we just want to pip install requests. Now already got this. But you probably don't, it will download and install really all we need in order to start using surprised just how easy this is. So what we I'm going to call it a pri request is that's to be a requests dot get. And then oops, we want to spell request right requests, right? We're going to get, and then we just that we created just a minute ago. And you my API key. I'm going to delete it as soon work for you go ahead and sign up for your Well, it put it in it. See, it's right here. But we're logged in here. So it knows who we are. puts it in there for us. So that's very cool. All right, pull this back up. Okay, so we're almost there. Now, we want You call it anything you want and set it equal in whatever content we got from this. So we much it. Right? Actually, I'm gonna change now, we need to do something else, we need to set try we want to put this in a try block, right? exception. So let's go accept. Call an exception, There we go. And inside of here, let's say API to just gonna do is we're gonna say, hey, go back, get this. Actually, we should probably just put all Right. So basically, we're gonna say, hey, Once you get it, try and parse it, you know, a Python usable thing. If there's a problem, goes wrong, throw an error, where instead So then when we put API onto the screen, it'll now let's just create a label, let's call so to see this just kinter label, and so we to equal a p i. And that's pretty much it pack that onto the screen. So let's just go and save this. And I think that will do for let's run this Python weather app by invalid Obviously. Alright, so save that. Let's try box, right? And let's make this bigger as in here. It's just kind of spewed up onto Well, it's just this exact stuff, right? It's And we know that because it has square brackets of the list is a Python dictionary. And we So I'm just going to copy this real quick. just going to create a new file real quick square brackets on the outside. So that's on the inside. But let's look through here item, right? So we have an opening squiggly is the second list item. So let's go through bracket. And here's the third list item. Now, API data. You're going to see how it gets it out. Because no two API's return data in some return them as lists, some return them seeing here. You just have to look through it is, so we're seeing a list with three items first item? Well, remember Python lists start So there's three items, but they start at Oops. Right here, right? This is the first look through these things, they're all the returning the aq II the average of all three first one here is just returning ozone. The no PMI 2.5, you see right here, and the third yet, right there. So for me, I don't really count, you know, little bits, little particles those, you can grab those. So we just want right? So to get that scrubber code here. our label API, just the whole API, we can zeroeth item, we can save this, and let's No, no fix that. I must have accidentally deleted it. Okay, so save that Alright, let's try this again. Now, it's kind of hard to tell. But we only hours observed, we don't care reporting area notice the category number itself is another So we'll have to play with that a little bit. want, we actually just want? Well, we want we want the actual aq II, and we're gonna let's grab the reporting area. How do we just just drill down even further, and inside of we save this, let's run this guy. Boom, we have just Las Vegas, right? If we area, we go aq II. Now aq II is the actual index or whatever. And right now we can see Look at our code here. The other one was category. back, you remember, this one was a little different, and the name. We don't know, we don't care to say good air quality. If we return one, So how do we get the name? Well, let's see. these guys along, right. And boom, we get But now, this is all we don't want to keep just kind of weird. So let's come up here. go city equals and let's go eight. Let's go do we call this category? equals, and we'll these actually. So the city was what was that that and the quality was just a cue, I believe. Let me check to make sure. Yeah, recording Okay, aq II and category name. Okay, so we've it like this, let's just sort of What how first one we want is city. And then let's quality. And concatenate again, and we want the quality. And this needs to be a string because we're quick wrap this in a string function. We could this is fine, too. So air quality. And what just finally put the category for now, just to make sure we got it right it see what errors I made? Because I always air quality. 38. Good. Alright, so we're getting this a little bit more. Now, I'm going to change the font size of our label, just by stuff, you just type in font. And now we can That's all right. I think so I want font size See how that looks. Okay, so Las Vegas air quality 38. Good. This around with this just a little bit. As I like of 50, let's try 40. I don't know. All right, that looks better. I think now, want this thing to change color based on that. So I'll just start to do that in this video. for now, just at the end of this in our label, just type in background and set that equal to decide what color to put in there based now, I'm just going to put green, just to look nice. Okay, so that's starting to look we go. There's white around the edges and to be changed as well. So we could do that for right now is just to come up here to our can go route dot configure, and then just For now, we use hex color codes in the future. it one more time. All right, so now we have Las Vegas air quality of this if we wanted to, or like right here later anyway. So we'll just leave like this this video. Now, let's look at this one more easy, right? We're connecting to a third party requests, which we PIP installed. Right telling back here and, you know, convert it from JSON apart and slapped it into a label just that about Python. You know, if you do use like stuff from an API with node can be kind of gets crazy. This is just as easy as can be. giving us a shot. Alright guys, in the last app here we can look up the air quality in video, we want to expand on that and change this very basic app built right now and it see in Vegas, it's 36 and that's good. And if this is a different color? If we Go back orange, red looks like purple and Maroon maybe. if you're 101 to 150, or orange, if you're 151 to 200, you're unhealthy. If and above that your, you know, Run for your to change colors. And based on what these able to knock this out in just a couple of do this. So head back over to our code. And you didn't see that video, look in the playlist So one thing I'm going to do very quickly, this and put it inside of our trial loop because Well, you know, if it tries to find this data, then it's gonna throw another error down here, variables in there and they don't exist. So okay, go ahead and do that. Next, we need is, you know, if the category is good, show you know, etc, etc. So let's just go ahead thing we're, we're looking at here, we're going to return the category name, which is etc. So if category equals and make sure you here, right? So if it equals good, and what app here is this right here, good, whatever website, good, moderate USG. The only difference the whole string of unhealthy for sensitive change here. But otherwise, we're just going of these category names into our little if good, we need our colon, then let's create set that equal to some color, right? So we in just a minute. But this is going to be use the word green, we're gonna use color but we'll just leave it as green for now. if statement. And another if statement for creating a bunch of if statements, we're going lF category equals, what's the next one's moderate, V equals moderate, be sure to capitalize it. then, let's just grab this. And I'm just going to copy and paste there are we've got two so two, so we got 1234 more to go. So I'm just make sure your tabs are lined up. I'll show we go. Four. I think that's right. Notice tabs. Notice these are not spaces, like if not what we want. We want tabs, everything here. This is a tab as well. Notice it's not sensitives. Very important. So okay, so now, moderate, what's the next one, USG, so this is unhealthy for sensitive groups. So Was that copy that and paste that in? Alright, unhealthy. Okay. Then the next one is very unhealthy. Notice the capitalizations, very unhealthy. cod spell that I'm just gonna copy. This one let's pull this up. Boom, hazardous no space Well, there's an easy way to pick the colors. instance, I'm just going to pick this one Let's do hazard. I don't know exactly what here, and then drag and click this Now right this, I don't know about Chrome, you can view shows you the color that it is right here, of copy this. And write in there, paste that and pasted all those little things in here. each of these. So this one's good. Good is You can see there's two colors here, the background color, because the colors are all the same, okay, this one is moderate. Oops, come back, come back. Where's our moderate right there. So unhealthy Go there we go. And the next one is this guy, which is unhealthy. which is right here. Copy, Paste, copy, paste, apparently, I don't know what all these colors go. Alright, so let's save this now. We're done, but now we need to come through here did our label in the last video, we put the that, we need to do this new weather color make sure not to do it inside the quotation So okay, that's almost done. Now, we also background of the actual app itself, we need But now we need to move this because Python the top and it comes down. And when it gets variable. We haven't created it yet. Above to change this actually need to just move of our try loop. Because again, if it tries an error, it won't, they won't throw up this which case, this won't throw an error. So and save this. Now. I don't know if this is moving parts. Well, let's give it a try. Let's you can see that you probably can't tell, than just calling green. And that's great. So let's go hunting for another town or city this out. Click on here. We're at Cincinnati. Um, doesn't help us any. Let's try up here. what's through here. Salmon. All right. So good. Copy this, go to Google and type in zip codes because is. Alright, so that is 83814. So let's put this is hard coded into our URL here, which a little search function, a little search now, we just hard code that in. And let's time and see if it changes to says 32. Hmm, try that again. says it's 60 Oh, that's the forecast current. go to grangeville. I don't know if that is. 8353. Zero. All right, so let's try this guy. Just copy Still good. Thing lies. I think the different The problem this is doing some other different radius. let's keep looking. We got nothing but time on our hands. Right? and oh, a bunch of once yellow, Baton Rouge, So let's try Baton Rouge. zip code. punches, zip codes, let's pick one. Fingers Like. And yes, we have moderate, which if we look Our app is yellow. And all right, pretty good. know, Python, if statement, right? We're gonna kind of cool. We look through here again, or if statement. Very cool. The only thing is we change this, we move labels and to our try block as well. Other going to add a search functionality. So we having the zip code hard coded in. What we we can enter in a zip code, press a button in. So pretty easy to do that. And we've looked boxes, whatever you want to call them in previous and look through the playlist. That's in the up that video. So let's just come down here on the last couple of videos, our weather.py I'm just going to create a label. And we can call it I don't know, let's call zip. And going to be in route, right. So that's really pack. To just pack this on the screen. And bit more interesting with the layout. Right on the screen just to get the functionality go Submit button or zip button. And that's that in route. And the text, probably spot Let's go look up zip code, I guess. And it zip lookup function. Now we don't have a zip a second. So let's go zip button dot pack. Now we need to create this zip lookup functions. go create zip code lookup function. So we I don't need to really pass anything. So what go zip. So let's just inside of here, let's looks right. So let's save this come over And you can see we need to do some resizing here. So all right, So I'm just gonna come up here and let's just this comeback runner app again. Alright, so we've got the current that's hard type stuffs stuff and it doesn't actually here just to make sure this is working. So here. Let's call zip label AB equals, this is going to be a label. And going to equal. Let's just go zip dot get. screen. Okay, so let's save this and run it So we can type in 90210. Boom, it pops up. that. Yeah, but we can click keep clicking because we've packed everything right. So So instead of that, let's really quickly just change everything grid. And then well, let's start here are want this to be rho equals zero ups, no quotation gonna copy this and then our button, let's one. And inside of our thing here, we want row one, column zero, let's give this a column span both of those. Well. Yeah, let's, let's give that a try. Now, all of this stuff, right? Because we don't want to hard code up whenever we press the button to look up of look through here and scrap all of this, put it inside of here. So let's say we need over so Okay, so try and accept or lined up. Okay, that's looking good. So now, down here, to be row equals. What are we on now? One, well, actually, we just want this right anymore. or this or this. We just did this form thing was working. Now, this is what's so now we need to change our API call, right? mark. Now we need to concatenate and we want whatever we put in the form, right? And we and then quotation marks so that looks good. I screwed this up at all, or very well might gray because there is no color because we up 90210 Beverly Hills, north northwest coastal notice everything changed to green, which North Las Vegas airport, I don't know why the you can see it just put it on top of it. That's very interesting. We can mess with is working now. And that's what we want. So, It's not lined up, right. This looks kind bit right now. I'm not going to get into it in the next video. But for now, just a quick go back and find our button and our entry. Let's go west, plus East plus North plus south. If we save this, let's run this guy again, out, it looks the same. But if we get 90210 it and it sort of going the length of whatever this to 89129, still stays the same. Let's Okay, so it's this size. Now, if we change a little bit, because this got bigger. And one overlaps at all. So it looks like it's Like I said, In the next video, okay, so coming this doesn't look great, but we'll work on video, or so, all we really want now is just works correctly. So 60610, my old Chicago apparently. So alright. In this video, I want graphs, right? Python for data analysis is all that stuff. And you always want to create into Python for data analysis. In this video, gonna use matplotlib, but I'm not really going going to sort of assume you already know what we're doing with them. And in this video, we have, manipulating it with those libraries, screen with a graph or a chart or something to show you how to do that in kinter. Right. take very long at all. So first things, first, is what we're going to use to mess with the to throw up the graph on the screen. So we let's head back over to our terminal. And same directory we've been in throughout this quickly pip install NumPy. And it downloads want to pip install mat plot lib. That's doing the screen. Now let's head back over to our plots.py. It's just the same starter code by 200. If we save this, there's nothing really to see we can run this one go Python plots.pi, by 200, or whatever. I designated that as NumPy and matplotlib into our program here. let's just call us as NP. This allows us to it that way. And we also want import mat plot plots as PLT. So that's all we have to do using them. So let's come down here. And let's graph, or graph. And let's do this. And inside really quickly that we can use to make a graph CVS CSV file or something if you have data, So I'm just going to make some up. And let's to set this equal, we're just gonna make some gonna call numpy.random.we want a normal distribution. comment below, I'll make some videos on NumPy we want to say, Alright, let's create some Let's say the average price of a house is is I don't know 25,000. And then we want to Let's say we want, I don't know 5000 data want a normal distribution. We want to generate order to actually graph this, let's say we charts that go up and down, that show a distribution, You know, we, we call it as PLT, so we can dot hist, right. And what we want is house we just created. And let's just plot it right. many bins we want. So let's say we want 50 much it. So we've created this thing. Now PLT dot show, right? So if we save this and right? We run it on the server, nothing has happened. Because call the function, right. So we need to create So if we hit the button, the thing pops up, equals, let's call this a button. And it's thing here. Right. And let's say the text we want to call the command equals graph. does not spell right gra p, h. Okay, there right. And we don't have to pass anything and it's going to generate this thing. So dot pack this guy onto the screen. And that back over here and run this. Oh, my button, my batoon my button. Alright, save this. Try we've got a thing, if we click graph it, it have this histogram, which is very cool. And move my mouse around, the x and y axis is down here, change to tell me exactly where houses that were average of $200,000. So you So that makes sense. And the standard deviation 25, down another 25, down, another 25 up another our code called for a normal distribution, can kind of zoom in here, right? We can do can click home to go back. See, we can pan can click this button and we get these sliders this if we want to. I don't know why you would And just that easy. Right? Click Reset goes this boom, a whole save dialog box pops up. don't have to write any save code or anything. very cool. And yeah, so you know, we can change again. Oops, close this first. Boom. Right there's only 12345678. Well, 910 I guess, it. We could say 200 bands, right? save this we get all kinds of like much finer detail. Even though we're changing the bend size. time because every time we run this we're be slightly different, obviously. But yeah, easy to use graphs with kinter out. There's try pie. Let's get rid of this. Just I'm not beforehand, but it might work. Let's try this it to create some data. So it's taken a little There's so many points, though, that it's, close this. So we can head over to Google charts, maybe. And here's some sample plots, do. Here's the one we did histogram dot hist, fun. bar charts, and you can click on each And it will tell you exactly the dot pie inside want to put in your pie chart, and you can customize go back and look at the histogram, where did We'll see. x, that's the data that was our house prices, equal. We didn't put Ben Zico we just put the number to the density and all these different things we can't find one other one that will work I don't know if there is one. Polar let's let's try polar. I don't know what that is So save this. Come back over here. Renee again. it looks cool, right? So I just that easy gonna get into the data science of this the just gonna assume you kind of already know matplotlib and you can do the same thing with stuff. And that's cool. So that's all for the like button below subscribe to the channel coupon code YOUTUBE to get $20 off membership hundreds of videos and the PDFs of all my students learning to code just like you. My see in the next video.