What would you say is the moral of the story? Open source is most successful when OpenShift started 2010. There was this divide in the There was all the really simple modern apps and And we came in from the perspective of And so we were kind of getting tugged We started with simple apps in OpenShift but the more general problem that would bring We wanted to use Docker within OpenShift. But it's still not enough, right? get a reproducible unit of software. But how do you get those chunks three bits of software and bring them together? We'd reached out through one You know, 'this container space is getting 'Is there anything that you're interested Clayton was looking to redesign the next version of OpenShift, what Which, you know, Docker was initially created multi-language Platform as a Service engine open source project and Red Hat product. We actually got, very quickly got an email back which says, 'We don't know. We can kind They kind of walked us through this demo at the time--they didn't really have a name. And this is based on what we and we're thinking about open sourcing it. I was interested. It wasn't impressive. The idea of working like something that was from scratch but so we were interested and we were excited but they're a little wishy-washy. Google was like, 'well, we don't know whether We don't know. It's a little... We're just not sure.' So we were like, probably our I guess we're just going to announce that the next Mesos isn't really designed around Docker, but An internal phrase we use sometimes Meaning maybe we bit off more than we could chew. It's hard to know that this We want to take these crown jewels and open we'll make it up in volume so to speak, and but the volume comes from managing the We had the code available but getting permission to release it as part of so after we got the okay to open source, now it was time to actually start Luckily we engaged with many people We want to work together. Two weeks before Dockercon, my boss Matt Hicks, I think he texted me. He's like, 'so Google just got back to us And so we typed, we said: 'yeah, sure we're in.' And so I think the next day, they I was either the first or the second external because I had access to a few others Clayton just showed up and he just He helped us get the you know, a lot of the code into proper 'yeah we really do like this and that really became a big part of what you I can't wait to see all of you at Dockercon and see the just amazing incredible creative and everything that people in We actually open sourced the repos on the that keynote was the announcement of Kubernetes Now we're releasing something It is yet another orchestration That is not a bad thing. As Solomon, said there are many and important area and an area And I'm not going to give a demo, sadly I only have 25 minutes, but Craig and Brendan are gonna At two o'clock, you can go see that session. Now the reason to do an open source release right so i'm going to talk a little bit about some of the ideas in it and then you can get This was it. This was our big moment, right? We had something that we were pretty embarrassed but that's when you're supposed to launch, right so we got out there and with Eric We obviously wanted, we're doing orchestrations we going to have an API for managing the cluster. We announced June 10th at Dockercon, which is the day I created my Twitter account. With these container technologies, it's the first to package up their application If I recall there were five or six other container Some were proprietary and The same day? The same day. Every big startup I felt like had and half of them were announced at Dockercon 2014. We all split up and went to Dockercon and we were you know texting 'oh so-and-so just released this, oh facebook just There was two ballrooms and so it was, Google announces Kubernetes. Startup announces container Facebook was there talking about Tupperware. Heroku was there I believe. Some of the Heroku guys were there talking Startup announces Docker monitoring solutions. Startup announces new business around Everybody had the same idea. This was not a brand new idea. But there was a tension this net new thing that was almost more and there were times where there were It was like, Like, Google's stealing Docker's thunder. Docker's swarm project libswarm at that time, it was a library for starting Its commits went to zero the And that kind of set in motion some of that like, that tension that played out Which was this young startup super huge community traction, really and then the project that I I think docker is great, but Kubernetes was about the application. It was about enterprise. It was--for us--it was very much the how do you streamline building And that larger vision at Dockercon, I think it ran headlong into And it got really awkward after that. I think we are on the verge of and I really look forward to making a Thank you so much. Google was in a war about cloud and that I was working as an engineer with other engineers. Engineers are not so much about Most of them were really about tech merits and about the quality of what There was no such thing as politics There was corporate politics above and, of course, eventually it started crippling into To understand the way that and Mesos were competing with each other, you know back at this time, I think but on a technical level I think it's important Kubernetes and Mesos and Dockerswarm Kubernetes, our focus was on a really clean API that fit the way of being able to deal with scheduling containers Mesos, the focus was on the scheduler and Mesos had a very, very sophisticated scheduler terms of the way that they distributed that Dockerswarm, on the other hand, starting out they computer and once you introduce networks, different scheduling constraints, there ended up were made in Dockerswarm to have that initial Kubernetes is what you would build if I doubt anyone had the same level I'm at CoreOS and we have this thing called fleet and we have our vision for We have another startup around the corner container orchestration called swarm Mesosphere that has a successful orchestration and so there's a new entrant. There's this thing called Kubernetes Luckily I was working at a and so I was just contributing at night time. My contributions were about making sure that and at the same time I noticed that I was 'there's this new thing. Here's how it works.' There's a tool called flannel that to implement this with Kubernetes. There was another startup at the time Kismtic. And I think Kismatic, Patrick they knew that Kubernetes was that was going to stick around for a little while and so Patrick and team put up the money to and they asked if I would a lot of people knew me from talking in the space. So our next session before lunch, we're and so now I'm on this stage Maybe we have three or four hundred people 'what is this Kubernetes thing that we keep And so I think the attraction kind of, 'crowned by the community' This project that we put out. I started to get a lot of I remember the Google team was just like, 'hey, how about Google?' And I thought about it for a while? And it was a natural fit. And I remember being honoured to I was able to meet people where they and then invite them to contribute. At the time Kubernetes was open sourced, we didn't take it for granted that the thing That original release was really raw. I mean, you know it's there in the GitHub history. You can go take a look at it. There was a lot of duct tape and So we set ourselves a really ambitious goal. We want to GA this thing a year from now, right? Okay, let's let's start working on 1.0 I have never in my career It's kind of like just, you have the baby, and you and you never feel tired, put all the effort into it. You worry about the sometimes, maybe a little bit In the first two years of the project, I got The fact that we open sourced it so early You have to work hard to think outside Google, outside Red Hat to help. At 1.0 it was going to be for web app That's it. Anything else we're not focusing on. Back burner. Take it off the plate. 'How little can we get away with?' was our theme. There's a lot of conversations in 'developer and application focused' mindset kind of clashing with the 'how to We just had to draw the line about what was going so there was a lot not done. There was this fear that was too complex. Docker swarm was much simpler, Mesos was more powerful. It could scale to thousands of nodes and Kubernetes I think at the Andrew Spyker was kicking the tires of and concluded that it wasn't mature enough. It didn't scale and Netflix chose Mesos and other large because it was more mature, it existed for a few If you want a technology to be ubiquitous, if you want a technology if you want a technology that you can actually create that alloy that's stronger than it needs to be held under At the beginning it was just a promise right? We will put this in a foundation. The project was actually in a community contributor license agreement was people had to basically give Google That put off a lot of people. As we started looking for partners to was still dominated by Google, despite it still gave folks a lot of pause. Many large companies do not like their employees signing a competitor's That was the context where you know did a lot of coalition building to eventually form the the Cloud We set a hard milestone for 1.0 to and also as it turns out CNCF. It was probably the most Was was trying to bootstrap and interests in getting something There was about six months of essentially, like, bootstrapping work of trying It was announced June 2015 at OSCON. It's clear that we need to start working as we looked at the 1.0 point of as we're looking at the future of this project, it My idea at the time was like, Like even though you know Mesos Kubernetes has opinion something There's usually some common interest like is attached to a container. Let's make that work and so I convinced Ben There was a bunch of other folks so we had this like good mix of folks from different overlapping and to kind of start the organisation. We were able to secure a pretty rich Getting that to happen was maybe the most All the technology aside, without that, I And so we believe it's going to take mind with Linux Foundation and a broad array of industry partners we're announcing the which will be charted to take Kubernetes and ultimately progress the agenda of We built the organisation around This was work that was done by what we and that was the group that was early, and then myself added to that, to try because there reached a point not easy to figure out how to get something done. And you know, you just had to go And that wasn't fair. It wasn't well documented. The challenge then was: how do you take this fragile community, and slide a sort of governance If you want to build a Conway's law suggests that you need so we pushed very hard to have that distributed We saw this great inflection point of interest and out to more open governance, and as we moved the more larger companies were able to participate and at that point it really became a exercise and taking the community as the more than anything else and We didn't have a manager actually even. So Tim and I were in Mountain View at the time and Craig, Joe and Brendan were in Seattle, and we all reported to like different managers for My first time at Google was mid-February 2016. From a Kubernetes timeline, the The thing that was obvious and clear is Everybody had been working 16 hour It was like 24/7 job. You know people would ping you Customers calling. The build is The work actually never stops. By the end of 2016, we were having between 700 It was clear that, with the way We will burn ourselves. Chen knew that what we were doing was It was great when it was five or six people. She knew that she needed to grow this organisation if we were going to keep on So I think the first phase, coming in as I first wanted just to stabilize and that idea that we are not going but we are actually going to think about was, I think, a critical point That idea actually evolved later on She was very deliberate about responsibilities to which site had which and how we were going to grow the team It was also time to focus a little and now we had real customers. We had people who were actually Big video games you might have played and we needed to focus on making sure We learned that Niantic was And so very quickly we got in the folks over at Niantic about how it was going, what were they doing, what could we do to help them out, how is Kubernetes fitting their problem. They ran Pokemon Go on one big cluster Once it launched, they actually experienced 50 times the We sort of went into... I won't say panic mode but near panic mode as we tried to figure out how we because the game was just They were just pushing the You're like an engineer on the team, you're on We see the entire world going with their phones like please stop playing. We are not ready for that. What was amazing, was that we This was a huge deal. We all felt great about it. Definitely validation of what we were doing. The idea that we were able to game expand everywhere and meet the demand You build something, you're not but then you have this amazing foundation I hate the term the 'container what were people going to use Niantic took a big bet on Kubernetes but You couldn't read a blog site without The container wars began the day And it was interesting because it It felt like tension about what's on top. The container wars were complicated a fight over orchestration, the things There's a lot of value in Look into any kind of marketing materials--our somebody who's proud of saying that we are That you never think about. Everybody wants to own the user experience. Everybody wants to be on top of kind of race that happened during this Docker era, about who owns the developer Who owns the mindset of the engineers ultimately, because this is where the value really is People were fighting over what should be How to define applications? And a lot I think the mistake that was made early on is people thought there was If you looked at Kubernetes Linux was at the bottom still. Docker was the container runtime. SCD is where we stored everything. It looked like it was a big of the entire industry at the time, I think that was the missed opportunity, so I think the tension was people Whoever won the Orchestration Wars would somehow We couldn't have done Kubernetes without Docker. Like it just would not have been a Something else would have happened, and You know the world loves drama and I don't think there was nearly as At the end of the day, everything in CNCF, we brought in both Container and we also pushed to standardise It became a standard. For a good three years or four years, every day was, 'is Docker going 'Is AWS going to suddenly adopt Kubernetes?' At every Dockercon, we're like, 'is someone And then one day, Solomon We built Docker on top of Kubernetes and we're gonna announce it at Dockercon Can you be there? Docker announced that they were going to in addition to Dockerswarm, but I think they recognized that this And so Brendan and I were and it was really a cool moment we stopped pulling against each 2017, a lot of competitors embraced Kubernetes. Mesos, Docker, Pivotal. And really near the end of 2017, Back then, when joining AWS would seriously have a Kubernetes offering. For the longest time, Amazon and so, to see it come full have Amazon supporting, it was one of the largest that Kubernetes was really here to stay. And now Kubernetes seems to be the de facto You know, when we saw Mesospheres when we saw Docker start to introduce it really kind of closed out that arc, but there were a lot of highlights at every It was a phenomenal experience. In the end, I think Kubernetes won in part because and it just kept marching along with and that rate of change kind Back then most of the things who even knew that the tech--and Yes, in a sense Kubernetes managed to capture the but they never really captured the nobody really is but Docker right now, and that's still I think one of the and we're not done yet. And Docker as a company today decided to focus on the developer experience side of I'm seeing Kubernetes being used in To see like, wow I hadn't even thought It's clear that Kubernetes is going to take on what any of us really imagined Things cannot repeat. I think we were just lucky to have The Container Wars benefit from the fact that but the truth is there was no zero-sum game. The best ideas from that race are still and they're consolidated so far into the but the truth is there's going to be Maybe it's some serverless component. Maybe it's a different way of thinking about and typically the higher you get, gives freedom and sometimes become simpler, so I think this is just the latest checkpoint, but whatever war people were fighting