Hi everyone. My name is Patrick Akil, and for today's episode, I had Kyle Cook on from Web Dev Simplified. We go over his journey on how he started more on the backend side and moved his way to the frontend side and now teaching full time through YouTube. We go over how to start when you want to start in programing as well as React and the future of the ecosystem there. I put all his socials in the description below. Check him out. And with that being said, enjoy the episode. Beyond Coding. Yeah 100%. I mean, like you said, it's like anything like when I was learning how to program, there's like the exact same thing. It was just like I would just always be building projects and eventually I just kind of learned how to program. How did you. Because, man, I always had trouble figuring out which projects to build, but you had no problem figuring out, like, little smaller projects to work on. I, i don't want to say I had no problem. I actually had the problem I had was the opposite of most people, where I had like a thousand ideas of projects I wanted to build. And I was like, okay, I want to build this, I want to build this, I want to build this. And I realized I was like, okay, this is to advance this is to advance this or to advance. And usually without end up doing is building something I thought I could do, realize it was too advanced and I was just like, Screw it, I'm just going to do it anyway. And I would usually get it like 80% of the way done and then start something else. Like, I never finished anything. I got almost everything, you know, 80, 90% of the way there. And then I would just jump to something else because it seemed more interesting at the time. Yeah. Yeah. And was it I mean, I'm assuming it was because you enjoyed it, right? Not because you wanted to get like a portfolio and because of work. I didn't even have an idea of a portfolio like I was in school. I was just like, I want to do this. This is cool. This is cool. I like this. I'm like, Oh, I'm interested in this topic. I'm going to build a project based on that topic. And then when it came time to make my portfolio, I was like, I have a lot of projects that percent complete. I got this. Very good on portfolios. I was like, Oh, I have like a back and built for this cool project, but that's not going to do anything on portfolio. Yeah, that's, that's really admirable because I always was like, damn, I need, I need a portfolio. I don't know what projects to build on and when I'm like, okay, a cool project, let me write that down. I never actually got to. Yeah, I mean, I have a massive list of projects I never got to even now, like I'm doing YouTube stuff and I'm like, Oh, you know, this would be a really cool project like Build Out, but I'm like, What am I going to have time to do? Like all these cool project ideas on top of YouTube videos and all the other stuff. It's like, I just don't have time for most of them. Yeah, I get that because I was wondering, you actually started out with like a computer science background. Did I did I get that correct? Yeah. Let's go to school. So originally I applied to school as a mechanical engineer because I was into engineering, math, science, that kind of stuff. And then my senior year of high school, I took an underwater robotics class, which is like the weirdest thing ever. I moved to Delaware my senior year from like the Midwest, so I moved to the coast and had this underwater robotics class. I was like, That sounds awesome. I'm taking that. And it was mostly mechanical engineering. You know, we're like building this robot. But there was a one week section of the class where we did programing and we programed on this, like microchip kind of thing. The programing language was literally called basic, I think, but it was like it wasn't like visual basic. It was a different thing. It was like basic, but it was like a chip set language and it was very basic. I mean, it was super simple, but I was super enthralled. I was like, Wow, this is the coolest thing ever. I wrote like four lines of code in this robot moved. Like, that's the coolest thing in the entire world. Yeah. So as soon as that happened, I switched my major. Before I even went to school, I was like, I'm doing computer engineering instead of mechanical engineering. Just on that engineering mindset, I would have done computer science if I knew, but I went computer engineering saw the business so cool. And yeah, that's pretty much what started me on the programing path. And then when I was in school, you know, I learned computer engineering, which is a lot of hardware and not as much software as I would have liked. You know, I don't care at all about the hardware side of things, but I spent a ton of time learning about it. Yeah, yeah. Web development was the thing that really sparked my interest in school, so I just taught myself on the side. I watched tons of YouTube videos from like, you know, Brad Traverse and people like that and just learned how to become a web mostly from school because from online, because there's only one class in my entire school that was web development based. Yeah. And I couldn't take it until I think my senior year of college. And at that point I'd already learned all this stuff the class taught me. So it was like the complete waste of time because I was like, Oh, this is this. I've been doing this for years now. Yeah, that's really cool. I've never. So most of the people I talked to don't have a traditional like software engineering background. And even computer engineering is more adjacent to I would say it's a software engineering background. It's more closer to that because as you mentioned, having Web development in kind of a third year. But if you think about your educational journey, like there's a lot of it come to practice in what you do now or is it just it was just education and from then you moved on? Yeah, I would say that what I learned in school, like the first year of my college degree, was really useful because I learned like the fundamentals of programing, like we learned C and Java and like my first semester. Yeah. And it was really useful and like teaching me just basic programing language concepts like for loops, conditional statements like all the things that every programing language has. Like that was really useful and kind of learning some of the back and stuff of like how memory works and stuff like that. I mean, I don't really use much of that because I write mostly in JavaScript and you don't have to worry about that kind of thing. Yeah, but just knowing about it was helpful. But I would say every class after like the first year, if not even just the first semester I felt was pretty much I don't want to say useless, but it wasn't that useful because a lot of it is like hardware based or it's going to be, you know, like things that I don't actually use in a day to day is like a web developer because I feel like hard core computer science, they focus a lot on like theory and they focus a lot on like algorithms and those kind of things just don't come into play nearly as much when you're doing Y development, especially frontend web development. So most of what I learned was from just using YouTube and blog articles in the actual school degree really only helped me with that like initial jumpstart. I feel it, but the rest of it, especially with what I do on YouTube, like I don't use any of it anymore. Exactly. I mean, I love that you taught yourself through YouTube and through all the like various free means that are out there, like blog posts, YouTube videos, what else do we have? I mean, podcasts are there as well nowadays, a lot more. Yeah, podcasts are a big thing now. Like I didn't even know about podcasting back when I was learning. It was mostly just like YouTube and lots and lots of blog articles. That's pretty much how I learned. Mostly, exactly. It's like there's something distinct with this community that we just take everything we know and just put it out there for free, for others to share and to build upon right. And through that, you kind of hone your skills as well and get better at your craft, which is really cool. Yeah, yeah. Go ahead. Oh, no, no, no. I was just going to say like a lot of people don't realize how much you can learn for free. I get asked all the time like, Oh, what is the best course for X topic? Or Is this course good? Is this course good? And I always say like, I don't know. Like when I learned I didn't buy a single course, I just did it all for free online. Like, sure, I paid for school, which helped with some of it, but like I just learned it all online for free. Like you can learn all that you need to online as long as you have the time that that's like the biggest thing is you just need a lot of time to sift through everything. Yeah. Yeah. Like, are you alone with that? Like, there's a lot, especially nowadays. Content is like there's a lot of quantity. You just have to find the quality and. Yeah, definitely. Got it coming out of university then or college. I don't know which one or even the distinction in the U.S., but getting into your first job, was it in web dev as well or how did that go? Yeah. So the thing that actually got me into web development was I kind of had to jump back to when I was in school my sophomore year. I went to the career fair and I was looking for an internship and I found an internship at a company and it was partially web development, partially like database related. But we were doing like we were I think we're coding in Visual Basic actually is what we were working in. So like not a super common language, but it was working on web development concepts. So like there's HTML, CSS has JavaScript and then visual basic for like the backend stuff. Yeah. And I really enjoyed that and that's kind of what kickstarted me on the like frontend development web development space. And like I learned a lot about CSC back then, like I was super into CSS and that kind of stuff, not as much the other stuff, but I was really into it. So then when I was looking for jobs, I was really looking for jobs in that web development space. So I applied to like four or five jobs at the career fair when I went. And I'm like, okay, here are some local web development companies that I'd want to work at. And the job I ended up getting was actually working at Ruby on Rails. So they were in the web development space. But as a little more in back end focus and front end focus, yeah. And it was like an agency style company and I ended up getting that job there and I was, I really enjoyed it. So like straight out of college, I had a job in, you know, like that back end ish. We did some front end too, but it was a pretty backend, heavy like agency style job. Yeah. Very nice. I like I mean the company I joined through, I wouldn't call it an agency was more a consultancies, the company I'm in now. KBIA But we had kind of an agency model in. Customers would come to us with kind of an idea or even a concept that they would like a product of or a proof of concept of. And we would help them through the ideation and the actual implementation in which I got to do a lot of kind of smaller projects, even longer term. But in a very short time period where I got to touch on a lot of different technologies and all the different languages and through that grow kind of exponentially, which is really cool. Yeah, that's something I really liked about like the agency experience. Like, it's definitely not for everyone. Yeah, because it's, it's kind of a different experience, but it's nice because you get to touch on a lot of different projects. Like I mostly worked on longer term projects. Like I would say when I was there, I probably did like four different projects in the time I was there. So like almost one project a year essentially. Yeah, but it was just nice, you know, that jump between different things because it wasn't always like, okay, I was on one project for a year, then another for a year. Like I would sometimes have two different projects going or so I kind of swap between them where I'd have like one going for a while and then it would take a break because it was a seasonal based product and I would do something else and then come back that seasonal project. So it was kind of just nice to have variety even though is in the same language like we always did Ruby on Rails, it was just nice because even the same language, you get a lot of differences between different projects and different, you know, products that you're building. Yeah, it's interesting that you mentioned Ruby on Rails and kind of the role was more oriented towards back end, even though there were like frontend components in there as well. Because I sift through your YouTube and what you do now is mainly I mean more so frontend focus, right? How was that transition. So, so actually the main reason why I do mostly frontend and JavaScript related content on my YouTube channel is because of when I was working in this company, I was doing your mostly back and stuff, but we had front end stuff. Like I would work and react a little bit. I would work in JavaScript and just CSS and those are the things that I enjoyed most when I was learning web development. Yeah. So I was like, You know what? I'm going to make this programing YouTube channel. I could make it YouTube channel and cover Ruby on Rails, which I'm pretty good at. Or I could, you know, dove into JavaScript and react and see assets, which I'm like, not bad at, but I'm not amazing at those things. And I wanted to do those because those are the things that interested in me the most. And it was like, Well, if I'm working on Ruby on Rails 8 hours a day at my job, I don't really want to spend 4 hours when I get home making YouTube videos on YouTube videos or something else that's interesting to me. So I was like, okay, I'm going to do a lot of friends and stuff. And my people would even ask me to make Ruby on Rails content. I'm like, I don't want to do that. I do that all day at work. I don't want to do it anymore. Like it's fun, but I can only do so much in one day. So that's essentially why I do frontend development on my channel, just kind of just grew from there. That's really cool. I, I love they said, no, no, no. That's, that's some work stuff right there. He would do exactly what I love. Yeah, but isn't it kind of scary because I mean, through that process, you were you were allowing yourself to grow and learn and kind of evaluate technologies in there as well. But you immediately put it all on YouTube, right, for others to consume and to learn from as well. But if you're not like asking for it, I was assuming that you were more confident, maybe the Ruby on Rails stuff versus the more frontend related stuff. You didn't have a problem like putting out any of the frontend stuff initially. Yeah. So my front end knowledge like when I worked at my previous company as an intern, we did jQuery exclusively. I'm slightly embarrassed to admit I didn't even know there's a difference between jQuery and JavaScript because I was throwing in straight to jQuery. Like that was the first thing I learned before I learned any JavaScript. So I thought they were just kind of the same thing. I thought like one was built on top of the other, like they were the same thing. I didn't realize until years later that they were different things. Yeah, so it was a little bit intimidating for me to jump into, you know, building these JavaScript videos because I had a jQuery foundation, but I didn't have solid JavaScript foundation, so I kind of had to learn a lot of those JavaScript skills, even though there's a lot of relation between jQuery and JavaScript, just building things out using pure JavaScript was kind of a challenge for me at first, and it was nice being able to do these videos because I would kind of have to learn these topics. I would figure them all out and then I could make a video on it. And if you can make a video where you teach someone something, even if you just like write a blog article, any time you teach someone something, you have to understand it really well because as you're teaching it to someone, they're going to have questions. Or if you're like making a prerecorded video or blog article, you're going to think like, okay, they're probably going to ask why this thing happens or why this works this way. And you need to know why that works that way in order to explain it. So you really need to learn something at like a fundamental level, because I could do super basic JavaScript stuff before, but I couldn't tell you why everything worked the way it did until I started making videos on it. And I had to ask myself, okay, why does this work this way? People are going to ask that. I need to know why this works that way. Yeah, I mean, that makes a lot of sense, right? You feel responsible in teaching in that way as well. So when questions come, you don't just want to be like, well, I don't know. And then that's the end of it. You still want to be able to help them with the questions that they have then. But just the. And I think. Sorry, go ahead. No, I just can say, I think one of the most important concepts with teaching is not necessarily waiting for people to ask you questions, but thinking of the questions they're going to ask ahead of time. Because if you want to be an effective teacher, you need to know the five most common questions someone's going to ask you. So when you're writing your content and making your content, you can already answer those questions before they even have a chance to answer or ask them to, you know, and that really, I think, helps elevate whatever you're teaching and it helps elevate you because you have to learn those things yourself. Yeah, that's a that's a great point, actually. I mean, it doesn't matter what you're teaching or even what you're presenting, if you can figure out what the audience is going to ask, anticipate and already answer that throughout your explanation, man, you're giving a great explanation. Then. Yeah, yeah. That's why I think that people that are new to something, not like completely fresh, but people that are newer to something are better at explaining it than experts. Because an expert doesn't remember what the questions they asked when they were learning where. Yeah. So they explain it in a way that they're like, Oh, well, of course you already know what that means. I've known that for 20 years, you know, but most people don't know what that means right away. So if you just learned something a week ago, you're probably better at explaining it to someone that's known it for months. Yeah. Yeah, exactly right. If it's if it's been something you've been doing year in, year out, I mean, it's kind of fitting in your routine, right? Things that might be obvious to you might not be obvious to someone that's new or fresh or it just the starter in that way. So you kind of obfuscate that in the way you communicate or the way you explain things, and then things don't make quite as much sense for you as it does to someone else. Yeah, one thing when I was learning and I found a lot of like, you know, YouTube channels and blog articles, they would use a lot of really big words. And I could understand some of these big words cause I had that computer engineering background. So they pounded big, complicated words into my mind for four years. But like a lot of people that are learning this on their own, they don't have a dictionary definition for all the crazy complex, you know, like, you know, words like memorization. Like what? That just sounds like memorization and spelled wrong, you know, like people don't know what that means, that you have to be able to explain things in ways that are easy to understand for everyone, not just people that have, you know, that strong background of jargon. Yeah, yeah. I completely align with that. I want to touch on what you said earlier in jQuery, JavaScript and even Java when I started out. I mean, I had some programing courses in university, but the one course that I had was web development and it was teach yourself how to make this website. You can pick from these designs and that sort of stuff. So I looked online and everything kind of looks the same and I was like, What is this different? Is Java different from JavaScript than even jQuery? What is that like? Teaching yourself how to do those things is really just diving down the rabbit hole, trying out things and figuring out yourself what the differences are. And when you when you use a what and what was actually the distinction there? I'd love to know if you were to go back or even if you were to start now with regards to teaching yourself, I mean, front end or back at you can pick a language, but how would you start teaching yourself how to code if you were to start right now? I mean, obviously I would just buy all of my own course, all my videos. Look at that small plug. No, seriously, what I would I would do is I would try to experiment with lots of different like sectors, because first I would do my research to figure out what are the fields in whatever case you care about. Like let's say you're interested in learning how to program, but you don't know what you want to do. Like maybe you want to do web development, game development, desktop development you don't really know. So I would research what the different fields out there are, try to figure out them, just like watch some explainer videos. There's a lot of them out there and then think, okay, what are the things that most interest me? Like, Oh, this one kind of sounds interesting or this one sounds interesting. Then I would dove a little deeper. Okay, figure out what that topic's all about. Like, okay, I'm interested in web development or game development. Learn a little bit more about what those entail. Like, okay, web development, you're going to be using JavaScript at some point in your web development journey or accessing game development, maybe unity like is the most popular game engine. So you kind of get these ideas of what these tools are and then just go ahead and start learning the very basics of them and try to just build something, see if you enjoy it. Like don't go super deep into it, just like super basic Gainesville, my project build like Pong for example, or build, you know, like a to do this application something really basic and see is this something that even enjoy because you may get a year into learning about development only to realize you know what game development sounded more interesting to me. I should I wish I knew that a year ago. So if you just kind of experiment spend, you know, a month or two months experimenting with like three or four different topics that really interest you throughout what you actually like doing. And maybe you realize, okay, I like web development. Now, you figure out, do you want front end or back end? And again, do that experimentation phase and it may take longer to get to the point of being proficient as a developer. Yeah, but you're going to know that you're in a field that you really enjoy because you may spend a year going to web development only to realize you really don't like it that much. And that's a really terrible feeling to think you wasted a year of your life and something you really don't even enjoy. Yeah, I get that. I like that. You start it with the domains, right? Whether it's game development or web development or like even embedded stuff, stuff like that, Iot things, it starts with that, right? Because you can jump into a technology and then figure out what you can do with that. But then you're very much technology focused and then the switch to a different technology is going to seem very daunting, right? Because you finally mastered or learned this, this technology became outdated. So starting with the domain and figuring out from there, okay, what do I then need to learn from a technical level to be proficient within this domain, right, to get the stuff done. But if I'm looking at myself and even my journey, it can be quite daunting, right? Let's say I want to start in the game industry or even vet what development? If I'm starting with a web page and I have to build in like a log in form or even a To-Do app, it can seem like quite a lot when you're starting out this kind of big thing and everything is kind of interrelated and everything is kind of has to make sense together. How do you make things small enough for you to actually be able to start and make progress in there as well? Yeah, so this is a great question. Probably one of the biggest problems I find that people run into, you know, I teach a lot of people and a lot of them come to me, they're like, I don't know how to get started. Like I can follow along with every tutorial out there, but as soon as I build the project my own, it's just a blank text editor. I just stare at it and I have no idea where to get started. Yeah. So I think the biggest thing is once you learn that the super basic is programing like, you know, variables, conditionals like loops, like the basic building blocks of programing. You are comfortable, you can start building projects, but you don't know where to get started. I recommend always starting with a really small project. If you think it's doable, make it 50% smaller because then it's actually probably going to be within your skill set. You always overestimate what you can do, but then on top of that, take this project like let's say it is a to do list application and break it down into every single component. So I think if you're a user of this web application, what are the things that you can do? So on a to do list application, you can add it to do, you can check market to do to say it's complete, you can delete it to do, you can edit it to do. So you have like these different ways that a user can interact with your web page and then think, okay, I want to build out all these different interactions. What do I need? So for someone to enter to do, I'm going to need to have an input box on my page. So already you have an input element you can add to your HTML page. You probably need a button so that they could submit that and create it. And you're going to need some way to listen to when they create that. So you're going to need some type of form event listener to listen for when they create that to do item. So you kind of have like a checklist of different things you need to do in your mind. And instead of immediately jumping in and starting to write code, I recommend writing out in like English pseudocode even what you think you need to do. So write out all these steps in English and then from there it's really easy to plug in the actual different code elements because you have in your mind, you're like, okay, I know what ifs, so I know what event listeners are. I know these different things. So you can just read your English and you can say, Okay, I need a way to enter data boom input element. I need a way to listen for when they submit that data. Okay, I have an event listener for that. So you have all these different things that you can kind of connect to those English words, which are much easier than saying, okay, I want to create a to do list application. Like that's super overwhelming, but I need to add an input element to my page. Anyone can do that. Yeah, I really like that because I mean, I think back to my own journey in when I started out, I would jump right in, right? Just write, write code, see what works, what doesn't work, trying to figure out how to make this thing happen on the fly. And I mean, I started especially my job here actually looking at my colleagues and how they approach things because they would have kind of a feature that I would be like, How the hell do you do this? Or I have no clue. Like even starting out and they would write things on paper or they would kind of high over explain to me, okay, these things need to happen. And it wasn't even code. And I was like, okay, that that does make sense, right? Because if all of those things come together, then we do have this kind of added feature in that way. But that wasn't that had nothing to do with coding in and of its own. Right. That's just kind of structuring your thoughts in a way that makes sense chronologically and even being able to explain that to someone else, for them to understand and then also to think it makes sense or even to kind of go back on things and discuss things and then we implement because then the implementation is way more smooth. We have kind of a checklist of things we want to go through. We do all of that and then it comes together. You have it. And that's my that was a shift in thinking, at least for me. Yeah. Yeah, I 100% agree. Like I think that learning to program is like two parts. There's the actual code like learning, you know, ifs and for loops and those kind of things. And then there's actually learning how to think like a developer, how to break down a big problem into a much smaller problem. That I think is the skill that a lot of people skip over. They're like, okay, I want to learn how to code. I'm going to learn the coding part. But they skip over all of the actual thinking part and that's the part where they get stuck. They're like, Okay, how do I build this project now? Because you never actually learned how to think like a developer and how to break these big problems down. And if you can break them down like you mentioned, it makes the implementation an absolute breeze because all you're doing is just taking all this knowledge and your brain and just barking it out onto a page following essentially a list of instructions. Yeah, I like I like that you distinguish in, in thinking like a developer. But for me what was really hard is when it actually clicked, when I saw the differences in thinking steps was always when I collaborated with someone else, right? Someone that was a bit more senior than me and was educating me and guiding me through that journey in there as well. I think when you're starting out on your own, you very much focus on how do I get this done before you try and figure out your own thoughts, or even most often you don't even get a feedback on on your approach and how you did things rather than what you actually did. Mm hmm. Yeah. No. If you can find someone that is even just a week ahead of you in, like, learning to program, I think that's a really important skill. I know it's not always possible to find someone, but if you can find someone that really helps with accelerating your learning process, you can kind of, you know, jump ideas often be like, hey, does this make sense? Does this make sense? But even if you can't find that the idea of rubber ducky, which is essentially where you just talk to a rubber duck or to like a stuffed teddy bear or to the wall or to yourself and just explain the problem you're having. A lot of times just the idea of verbally explaining what you're trying to do. You can already see what the issue is that you're running into. Like if you don't know how to implement something, explain what the different steps of the problem are. And a lot of times that'll, you know, light enlighten you on what the actual problem you're running into. So I recommend doing that a lot for people that are stuck on something. Just write it down or speak to it with someone or just know nothing. Speak to yourself. And a lot of times that'll actually fix the problem for you. Yeah, yeah. It's an interesting thing in a lot of the things are in your head, right? And they can be very unstructured. So for you to be able to communicate that to either someone else or in your case, a rubber duck or yourself, it doesn't even matter. The act of structuring your inner thoughts and being able to externalize them, right, writing them down or communicating them verbally, it helps with your thinking process and all of a sudden it will click and you will figure out kind of what the next step where the missing pieces there. No. Yeah. When I when I worked at my my last company, it was a small company. So it was just me and my boss were the only two that worked in the office where I worked. And there be many times where he'd be like, Hey, Kyle, can you come over here for a second? So I'd walk over and he'd be like, I got a question on, you know, X, Y and Z technology. I'm like, I've never used this. I don't know anything about this. He's like, I don't care. You're just a rubber duck right now. I just need to, like, talk to someone and have, like, just some feedback. I just need to talk this out. And, like, it's easier when there's someone there is like, okay, that's cool. I can do that. I can listen and not know anything. And half the time he'd be talking to me, and all of a sudden, like mid-sentence he'd be like, Okay, I got it. And that would be it, you know? So it's just kind of funny to think that, you know, you can talk to someone who literally knows nothing about what you're trying to do and that may solve the problem for you. Yeah, yeah. There's a funny word in it, Dutch, which I haven't really found the right translation. It's called spotter, and it's similar to sparring in a in kind of a boxing ring. But you do that when you just need to kind of mirror information to someone either rubber ducking or for them to actually also give you feedback in that way for you to structure your thoughts. Right. And it doesn't have to be related to programing. It can be something that happened in real life that you just want to spar about. I still don't know the right translation, but we use that very often. Nice. Yeah, for sure. I lost my train of thought, actually, because we started out kind of Ruby on Rails and you went to YouTube and you wanted to teach yourself or even educate others with regards to Frontier Technologies. But when did you actually decide to do YouTube full time? Like, did it just take off? And you were like, Oh yeah, this is my thing. We're going to do this full time. Yeah, when that that's. A good question. So it's kind of two parts. It almost happened at the very start and at the very end it kind of took off. So when I started the YouTube channel, I in 100% intentionally it was like, okay, I want to make this a business that eventually I can do as a full time job. So in order to come up with my channel name, actually, this is kind of a funny story. I was like, I want to have a dot com domain name associated with my channel name. So instead of just creating a YouTube channel name, having or whatever it was, I went to like, you know, some domain website. I was just typing in different things that sounded interesting. I was like, web dev, dev, easy, web dev, this web dev, whatever, you know, development, whatever what? Because I knew I wanted to be world development based. And finally, I've landed on Web Dev Simplified. I was like, okay, that domain is not taken. It doesn't cost me $1,000,000. Like every other domain. Every other. One. Yeah. So I was like, okay, that's what I'm going to do. So that's the entire reason my channel is called Web Dev Simplified because I was like, It makes sense because my goal was to kind of like make things simple and easy to understand. So like I was already kind of on that like terminology, but as soon as I found that domain name wasn't taking it, it only cost like $10. I was like, Okay, bye. That's exactly what I want. Got it. And my channel, literally same day after I bought it. And just the act of buying the domain name. I mean, it was literally like $10, but the act of putting down money, it made me more serious about the project cause I probably would have at some point quit. But having that $10 I put down, I was okay. I'm actually dedicated to doing this, and that really helped push me through like the beginning stages, because the beginning is so hard because you don't know anything. It takes forever to build a video. You release a video and one person watches it and they downvote it until you suck it, take it, super demoralize or skinning. Yeah. So that putting that $10 down really helped because I'm like, okay, I've put some skin in the game even though it's only $10, like my blizzard brain was like, I've put something into this, I need to contribute to it. Yeah. And then from there, it started to slowly grow, you know, and after about a year, I think I was at about 10,000 subscribers. So it was pretty good growth for a year. And I had a little bit of, you know, spikes around that time. And then the big thing was when COVID hit, a lot of people, you know, they were at home, they had more time at home. They had either lost their job or they're worried about losing their job. So a lot of people came to YouTube for entertainment, but also a lot of people came to YouTube to learn a new skill, a skill that could be used for a remote job. And probably the easiest and best skill to learn for that is, you know, web development of some form. So I saw a huge growth in my channel around that time. You know, that April, March time period I think was around 2020 when all that started and it started to continue to grow. And I was already at a point where I was thinking about quitting my job because I was like, okay, I can kind of see this starting to it doesn't overtake my income, but I can see eventually, maybe a year or two from now, this would overtake my full time income on my job. So I was like already on the fence and thinking about quitting and then COVID came in. Might, you know, YouTube channel started skyrocketing even more than before. So I told my boss I was like, Hey, how would you feel about me going part time? Think I want to go part time for a few months, see if this continues to go in, then maybe I'll quit. Is that. Yeah, that's fine. We'll support you. Like they were very supportive, so. Yeah, that's 100% cool. Yeah. So I went part time and I was able to even keep like my health benefits and stuff so super useful. But I was only working like 20 hours a week so I could dedicate a lot of time on YouTube. And within just one month of being part time, I realized I was like, okay, this is way better. I need to do this full time. So I told my bosses like, Hey, I know I told you I'd be here for a few months, part time, but like, I think I need to be done at the end of this month. Like, I don't want to miss this opportunity. So I was like, I'm quitting. And I think it was July 2020 when I quit. So it was the very end of June. So I started July. So almost exactly two years after I started my channel, I quit, went full time and yeah, I wasn't making my full time income. I wasn't making the same amount I was at my full time job, but I saw the potential. Like I was like, okay, I think this can, you know, even overtake my full time job. So I need to jump on this now before the opportunity passes me. That's awesome, man. That's really cool. I love the the little start, the little investment. That was also a huge investment in your mind. You're like, I already invested like we have to make this through. A We have to actually start, right? Because I think starting in most cases is the biggest obstacle you have. Once you get the ball rolling and once you kind of found your routine, find your rhythm, that is good, right? Then you're like, okay, we have these kind of things, X amount of things. I already have thoughts aligned. I know how to make the video, I know how to structure it. I actually have consistent C in the days that I upload, so then you have a rhythm. But the hardest thing I think still starting and actually doing the yeah. Yeah. I think another thing that really helps this is for any skill of, you know, starting a YouTube channel, starting anything, even just learning to code is have some people that depend on you. One thing that really helped me was I was part of a Discord Channel for game development actually at the time, but there's a few people on there that were interested in learning WebGL. I mean, they'd ask me questions because they knew I was, you know, skilled in that department. So I started making videos and I was like, Hey, why don't you guys check out these videos? There's like five people or whatever. So I'd be able to get like five views on these videos. And, you know, these people were like, Oh, you know, it's really helped. I really like that. I'm looking forward to the next one and just having that commitment where these people were like actually looking for it, even it was only a couple of people looking forward to a new video. It really helped motivate me cause I was like, Man, it's been like two weeks since my last video. These people are really hoping for a new video. Like, I really need to get in there and just grind through. Like, I remember one of the first videos I did, it was maybe like, I don't know. And within the first ten videos I did is the first video I ever did that did well. I was just it was a get tutorial and I was just grinding through this video. I think it was like one or two in the morning when I finished the video because the editing process took so long and I just posted that video, I went to bed. The nice thing was that my job had flexible hours, so I was like, I am sleeping in tomorrow. I don't normally stay up that late. And I went to bed and the next morning I woke up and I looked at my phone to see how the video did. It had 9000 views and I was like, my previous best video was like eight views. So I was like, What the heck they're saying? So that really helped motivate me to like, I got a decent number of subscribers, like maybe 100 subscribers off of it, but they never came back and watching the video essentially. But like just that little bit of motivation, like the fact that I was motivated to help these individual people let me to grind, you know, into two and to make this video. And that video ended up doing really well, which help motivate me further. So just it's kind like a snowball effect at that point. Yeah. Yeah. I mean, I've heard this as well can Kenji said that he came on my podcast and he says like, motivation is pretty fickle and it depends on the person. But once you feel responsible also for others and others expect something of you. That can be one of the biggest motivators you can find, right? Because you feel accountable, you feel responsible, not just for yourself, because, I mean, letting yourself down is way easier than letting others down. So eventually you're delivering, you find your way and that and that. Yeah, I think that always stuck with me. Yeah. Well, really cool, man. I, I wonder if you've seen this as well, because when I started on web development, I mean, that was when like at a university and we did a lot of BHP, not so much evangelists but among yourselves as well. Then I did mostly back and stuff actually almost exclusively a little bit of you because that was the framework we used. But then I came into a role and it was almost completely react and I didn't actually start off understanding JavaScript until after I did most of the React components and React functionality and stuff like that. Because React was just a bit easier to understand that I didn't really have to figure out what happens under the hood, and I did enjoy it because it was component structure. A lot of things made sense kind of conceptually in my head. I could understand how things fit together and you have some functionality here and there. So I never actually bothered with the vanilla Java script until just recently where I have a project which is a lot of static HTML templates go as a back in English HTML and then just vanilla JavaScript over there when we need it. But I think a lot of people start out with a framework, whether it's Vue, whether it's even Angular or mostly React is what I've seen. I think they start out with that because I think I don't know, might be easier. What's your take on that? Yeah, I think a lot of people start with something like React because they see that jobs out there are all looking for acts that like, okay, if I want a job, I need to learn, react. Yeah. And then they also see that like all these YouTube videos coming out around React, everybody's talking about React, everybody's doing React projects like it just seems like React is the way to go. And I think even some people don't even realize like how much it's built on JavaScript, so they just kind of jump into React or maybe they'll learn a little bit of JavaScript or like, okay, I learned the basics. Now I'm jumping into React because I want to be able to do cool real world things because, you know, playing JavaScript is just the thing of the past, you know, it's like kind of like the Jay Corey of today is like, Oh Jay. Cause the thing in the past people think JavaScript, that thing in the past because React is replacing it. But I think it's really important that you understand the core of JavaScript. Like I tell everyone that's trying to learn, react or take my react course. I was like, I have a list of JavaScript concepts. I was like, You need to learn all of these concepts before you even bother with React because it's going to make your life so much easier. You know, it's not a hard list. I mean, it'll probably take you a month, two months to learn through all of these different concepts. But then when you go to learn, react, react is going to be a breeze because a lot of people that get tripped up and react get tripped up on JavaScript concepts, not react concepts are like, Oh, what is this import export stuff? Or Why is it when you pass, you know, an arrow function to a component, you know, like on click event, like they kind of aren't really sure how passing functions work. So they get confused by that kind of thing, like passing by reference versus value versus calling the function versus just passing the name of the function. Those kinds of things trip up a lot of people that don't learn the fundamentals of JavaScript first. So I'm just like, learn these fundamentals. It's going to take you a month or two. It's probably not going to be the most fun thing in the world because fundamentals always suck. Yeah, but when you go to learn, react, instead of taking four months to learn React, it'll take you one month to learn React because you're going to know all the JavaScript stuff. All you need to learn is react stuff and react is pretty small, you know, comparatively to JavaScript. Yeah, exactly. I also had to backtrack because I was like this. This doesn't make sense. And then when I actually figured out how to do it, I was like, None of this stuff is react based. Like, these are more fundamental things that I just didn't know and I learned on the fly. You can do that as well. But when you start out with a foundational base, it makes adding on top of that I think a lot easier. Have it really? That wasn't my journey. Yeah. No, I've always found that learning something on the fly, it's fun because you get to start building stuff immediately. Yeah, but I find and it may seem really fast at first because I'm like, Oh man, I got this to do list already. Like, this is crazy. If I spent two months learning JavaScript, I would not have this by now. Yeah, but then as you go, as the time compounds that you still keep skipping these fundamentals, you start to realize that, okay, things are starting to take me longer than everyone around me. Like, why is that? I feel like I have a good understanding of this. We are lacking those fundamentals. It's kind of the same thing about learning an instrument that we talked about earlier. It's like if you're trying to learn an instrument to be able to play music, you can skip the fundamentals and go straight into playing songs into you're going to start to learn songs quicker than if you started with the fundamentals. You're going to struggle with certain things because you don't have those fundamental skills in place. So if you learn those fundamentals first and then start going to learning songs, you'll be the one of those songs faster. I think it's the exact same thing with, you know, learning concepts versus learning how to build projects. Yeah, yeah. That's a great example. It's very similar to that. And even that was kind of relatable to my own experience where I was like, Okay, I get a lot of things done right? And that is so satisfying getting the thing done that you need done, except when you're a bit slower than other people and other people are like, Why? Why is this guy taking so slow? Or What's wrong here? Or even internally? I'm like, okay, this should be simple, yet I can't figure out this small thing. And sure, I can google it here and there, but at some point I'm like, I've Google this so many times that I should actually like figure out how this works before continuing, because this is something foundational, this is something recurring, and this is something that's lacking in my current skill set. So then you figure it out and you. Are, I think the. Sorry, continue. Go ahead. I was gonna say I think the thing that a lot of people run into is like, it's fine to do this kind of stuff where you learn on the fly and you're just like experimenting with things. But after you're done with the experiment and go back and think, What did I struggle with? What did I not really understand? Like you may be able to the code, you copied it from StackOverflow and it worked. But why did it work? Try to ask yourself why. And if you can't answer, go back and try to learn that thing. And it may take a little longer at first, but by doing that, it'll make your future projects better so you can kind of get the best of both worlds. So you can start with building something complex. And when you run into an issue where you don't understand why something works, just look it up after the fact or look it up later. And that's going to really help build your concept based skills as well as you'll be able to build projects. Yeah, I love that. I'd love to touch on stuff that's a bit more, I don't know, like more advanced, maybe in React specifically because when you got the basics down, what what do people struggle with next? Is it more like getting your components to render as efficiently as possible or state management or even kind of lazy loading your stuff? What do you think are more advanced topics that people kind of struggle with? Yeah, I think some of the more advanced concepts people struggle with is just the conceptual model of React. So React is very declarative while, you know, learning normal JavaScript is not at all declarative. So kind of switching your mindset from this imperative mindset to a declarative mindset where you realize like, okay, when I change state, it's going to render my component and I don't have access to that new state until after my component renders. And like how the use effect hook is going to work within all of these different state updates and like how the component lifecycle works. These things I think are confusing for a lot of people because when you learn normal JavaScript, those are not concepts you learn. You don't care about declarative stuff. Everything's imperative. Like you have an event listening. When you click on it, it fires this function and then you change the variables and then you have to manually update everything while with React, you change your state and then everything reruns again all the way from the top, which is 100% different than how normal JavaScript works. So I think we were rewiring your brain in that way is what a lot of people struggle with, because I find when I get asked questions a lot, it's like updating the state variable and I tried to use it after that and it didn't update. It's like, well, you had to wait for your component to re render or they look at their use effectively like why is my use effect not working? Oh, you forgot this dependency. Because you know, when this thing change, you need to make sure you account for that. So I think these are not quite like super advanced concepts. It's more like that intermediate level, like you understand react, but you don't understand why everything's working. I think those are the biggest problems people run into. Yeah, now you get that GitHub as well. I've seen a lot of stuff. I mean, a lot of stuff is evolving very fast, especially in the JavaScript ecosystem, but also in the React ecosystem. I've played around with Gatsby and I've even done some next year stuff as well. What's your take on the frameworks that are popping up and that are kind of using elements of react to kind of enhance their own structure in there as well? I think they're great honestly. Like my blog article, I used to have it written using Gatsby. I ended up switching over to Astro eventually because I had some problems with Gatsby that just wasn't working right. I don't know if there's a me problem or Gatsby problem. I just was like, I'm such an actor. I don't really care figuring this out. I spent too long trying to figure it out, but like things like next gen. Yes. And there's even frameworks like Redwood and Bullets. I think those are reactive based as well, or maybe their own ambiguous application of things. But like I really like this because it takes away some of the hard stuff of react like server side rendering and page routing. Those kind of things just aren't fun to do and they're very difficult to do sometimes. So having this framework next chance to just take care of all that for you I think is really useful. And they're not so prescriptive like a Ruby on Rails where it's like, you must do it this way. They're very ended like reactors, but they just give you a few extra guide rails that make those decisions and those, you know, boilerplate code things a little bit easier to work with. Yeah, yeah, I agree. I really enjoyed Gatsby when it worked. And then I think, I mean, we used images that were a bit too too big and then we had a plug in that kind of reformatted all the images and then all of a sudden their build took way too long. And on that list I built didn't take it anymore. And yet then it wasn't fun anymore. But when it works, it is great. And I mean, I love using it. Additionally with either a verse or a net the fly. So even deploying your thing and giving it to users in the end makes it so much easier. And I love that we're getting more and more tools that make things simpler. I just wonder where it goes. Is it eventually going to be one framework or are we always going to have choices and kind of opinionated frameworks? And you get to pick and choose from there and is it going to be I mean, we have react, we have you angular element I don't know svelte is also they're kind of popping up here and there does it there's one every day, I'm sure, at least. So I just don't know where it's going. I love to have your take on that as well. I personally feel like it'll kind of end up like the the view react frontend framework space where there's going to be maybe one that's probably more popular than the rest. Like right now, I would say next year is kind of that one where it's like it kind of does everything well enough and it's probably the most popular one out there. And then I think there's going to be other options that are a little bit more specialized, like Astro or Gatsby. They're more specialized in what they do like they're more focused on building out like statically rendered pages, like they could do other things. But I'd say that's really rare. They're specialized in. Yeah. And then on top of that, there's going to be even further things. So like next year is kind of like built on top of React and then there's going to be things like Blitz and Redwood that are going to be built on next year or like the next version of next year, the things that really take it to the next step. Or it's like, okay, we thought of all the things for you, we're going to give you an opinionated way to do things. I think that's actually the way that JavaScript is going to go, because a lot of people are fed up with having to make all the decisions themselves, like why does not have routing decision? Why does it not have this built in? Like, why do I need to include all these libraries? I think people are getting to the point where they're like, okay, I just want to use next chapter. I just want to use this. And it's going to just do all of this for me and I can write my code and not worry about thinking about which one of the 74 different libraries am I going to use. Yeah. Yeah, I like that. I, I mean, it's part of where, why I am a fan of go because it's a language and all of the things are in that language that I usually would use. I really have to think of when I introduce a dependency because a lot of things are already implemented through that. I can make APIs, I can make my services, I can hook my front end to it, and I can even do a lot of static HTML templating. I now have a stack where it's exactly like that, a lot of back end static HTML templates, a little bit of vanilla JavaScript in there and bull Myers's CSS framework. And it runs like a train like it does exactly what it needs to and it's super performant and everything kind of comes out of the box. But JavaScript in and of its own wasn't quite like that. React took it one step further and still on top of that we're building and now we have next year and still on top of that we're building. So I like, I like the thought of just getting the technology that as a tool and having enough tools in that toolbox or the technology that as a toolbox and having enough tools in that toolbox to do whatever you need to with regards to web development or pick a toolbox that is kind of apt, whatever you need to do, whether it's building an e-commerce or even building some other thing, I like having a toolbox that's kind of varies various enough and I don't have to keep trying to figure out which tool fits in here and which one it's maintained still, which one can I use and which one is not going to like break my shins on the long run? Yeah. No, I honestly think that the future is going to be like a Ruby on Rails style JavaScript framework. I just think something like that is going to happen. Like we're already starting to see that with like Bullets and Redwood. They're kind of like pushing themselves towards that territory. And I think if something like that becomes good enough that it's usable by people like, you know, becomes 1.0, and it's got a lot of features I think that could be the next big thing that really like takes over next. It doesn't maybe take it over, but it's like, you know, another option besides next it's like, hey, do you have, you know, just a basic write application like everybody else is building use this framework because it's going to make it so easy. That was my favorite thing about Ruby on Rails. It's like if you're building just a basic CRUD application, which is 90% applications, like it's so easy and so quick. And I think if we get something like that for the front end as well with JavaScript and React, it's going to be a game changer. Yeah, yeah, I agree. I'd love to know your take on full stack development as well as kind of a final touch because you've done both back end as well as Frontend. And for me coming out from a kind of a same journey as you, I go into the front end and it was more as like a sink or swim I guess because I actually needed to deliver stuff and teach myself on the fly as well. But in there I was like many people that are really have a good understanding of both concepts, write a lot of things back out related and a lot of the things frontend related. Those are rare. Usually I find people that can make stuff happen on the frontend or can make stuff happen on the backend and that are really apt on the other side. But what I see on the market is a lot of people also ask for that full stack roll or even full stack with DevOps experience or even taking a step further and knowing a lot about cloud and security and even test development and everything like that. Like it's a whole package. And I get that if JavaScript and react and the frameworks that we use are simpler and things are a bit more established than opinionated, then you don't really have as much choices anymore. So it kind of becomes more tangible and things are still within your grasp when you want to be effective. But as it is now, I think it's it's a big ask sometimes to allow people or to ask from people to be apt in a lot of technologies. And I feel like sometimes we even keep asking more on top of that, right? Because you also companies also ask for years of experience both in the front end, both in the back end for technologies that are, for example, years old. And they ask for ten years of experience in that technology. It's a bit ridiculous sometimes how that comes across because as a full stack developer still like a realistic thing. Your take, what are your thoughts on that? Yeah. So I would say if you asked me this question like five or ten years ago, I'd say, yeah, it's it's a reasonable thing to ask because your project is going to have a focus in one way or the other. Most projects are either going to be more complex in the front end or more complex in the back end unless you get to like the scale of like Facebook, where it's complex everywhere. But at that point you don't have full stack engineers, you have hundreds of each part, you know, you have hundreds of front and hundreds of back end developers. You don't have to worry about front end or full stack engineers, but most of the projects aren't massive projects. I feel like five, ten years ago it was 100% possible because you could be specialized in one area and you can have enough knowledge in the other area to get the thing done. And I think now the front end has gotten a lot more complex than it used to be. It used to just be JavaScript, HTML, CSS, now you have react, now you got next year, which pushes you even into the back end a little bit. You have you felt you have all these different frameworks and they keep getting more and more complex and it gets harder and harder for someone to be specialized, like in the back end with enough front end knowledge to get things done. As these more complex frameworks come out, it's definitely possible, but I think if you're a company, you'd be better off hiring a dedicated back end and a dedicated frontend developer than hiring one full stack developer to try to take both those roles because they're going to be better at one versus the other and they're just going to lack in that one department. You can't be an expert in both because it takes so long to learn all the skills needed. And even if you become an expert in back end and an expert in front end five years from now, whichever one you do more you're going to become an expert in, and then things in the other department are going to change, especially if you can back on Frontend. It's going to be way different in five years than it is now. So like you're no longer to be an expert in that area because you spent more time on one specialty than another. I think it's important for people to have an understanding of both backend and front end if possible. It makes you more valuable developer because you can understand if you're a frontend developer what the struggles of the back end are and like what isn't is not possible. Yeah, you don't need to be an expert. You don't need to be the person doing both the front and the back end. Yeah, yeah, I agree. I like being able to both to a point where I can be effective. Right. And if I if our frontend guy that's really specialized and knows a lot about the frontend ecosystem is gone, we can still continue as a team, right, because we fill those gaps in that way. But if it comes to making our front end application very performance or the bundle size a lot smaller with a lot of tree shaking and different package management things in there as well, I would love some of that specialized than that because that right now is not really what I'm what I'm comfortable in. But that's also where a team comes in, right where you have those specialties and they come together and you can make decisions as a team because in the end, I think you're also responsible and accountable as a team for that, for the end result, right? So if you can align on your specialties in that way or kind of fill those gaps, rather, I think you can be very effective in a. Yeah, I agree. Like when I worked at the agency, some of the projects I worked on were smaller projects, so I may be the only developer on that project. So I had to fill both the back end and the front end role and even sometimes the DevOps role, which I would always try my best to push off on someone because I hate that section of, Hey, come on, I'm so bad at it. Like TerraForm Config Files are the worst thing I've ever seen in my entire life. Like, I was like, Oh, I almost want to quit now. Just terrifying. But like, I feel like if you're on a small team like that and you're working on a smaller project where it's small enough you can be one developer, it's probably fine if you do both the back end and the front end. It's not going to be perfect in either section, but it's going to be good enough. And if you're the only developer, it probably doesn't matter as much because the project is probably going to be small enough. It's okay if it's not 100% performant on the back end or 100% performant on the front end. But once you start to scale up beyond that kind of level, I think it's really important that you go and you become proficient in just one of those sectors, which is why if you learn only frontend development, you can still find a job. Even if places are asking for a full stack developer, I think they're trying to find something that doesn't exist and they'll kind of realize if they hire someone as a full stack developer that they're actually just, you know, a front end developer with some backend knowledge or back in developer, some frontend knowledge and not a full, full stack developer. Yeah, yeah. Like that. I mean the key thing there is you can get it working on a smaller scale, but once you want to scale to I mean just throw a number out there, hundreds of thousands of users, millions of users, multitudes of millions of users. Then it becomes a lot more preferable that you have people that are specialized in optimizing things, right? Whether it's front end or back end or more of the DevOps side of things as well, your platform and your infrastructure, it makes more sense because those smaller optimization wins, those smaller efficiencies will have huge effects on your actual applications or your actual user experience in that way as well. And that is in the end, what you want to optimize. So optimizing your technology through that will optimize your user experience. And that's I mean, that's what we're doing it for, right? For the people that love using whatever we're building. 100%. Like I think people focus too much on performance when the scale is small and not enough when the scale is large, like when you're only serving 100 people, you don't need to have Facebook levels of performance. It doesn't matter if it takes them a little bit of time to access your website because it's so small, it's probably not going to make a big impact when you have a million people access your website every day, like every millisecond, that performance is going to make a huge difference on like your server costs and your server load and the experience for the user. Like even if you can shave ten milliseconds off a million request, that's a huge amount of server cost that you're saving because you don't have to make those 10 million or it is 100 million milliseconds. That's a lot of time. I don't want to do the math, but that's a lot of money. You could be saving. And also your users are going to see that difference. Yeah, yeah, I completely align with that. I really enjoyed this conversation. Kyle, is there anything you still want to share in there? I'm I would say if you're just starting out learning, don't focus and worry too much about, you know, the technologies and things like that. Learn, you know, the concepts like programing, concepts, how to think like a programmer. Those are the skills that you can transfer anywhere. Like it doesn't matter if you learn, react, JavaScript, angular back end stuff, game development. If you understand how to think like a developer and you understand the different programing concepts, those are transferable between every language in between any different specialty. So learning those skills is the most important, I think, and most people flip it where they think that those are less important than learning how to actually code. Yeah, yeah. I completely agree with that as well. Cool. Thanks, everyone. We're going to rounded off here Kyle Cook, Web dev Simplified. I'm going to put all his links in the description below. Check him out, let him know you came from our show. And with that being said, thanks for listening. We'll see you on the next one.