ERYN: Hello! Can you hear me? Oh, there we are, you can hear me now. That is going to get weird. That is a lot of pressure to not say the wrong [laughter] giving the talk -- Now You're The Tech Lead, Subtitle, &quot;what is our job, even?&quot; [laughter] it's also really tactical. It's also I want to give some stuff, because stuff, right? So normally I give this talk and it's for know what they're getting into or they got doing the job that they're tech leads in hell. We'll talk about some technical stuff because to be able to work on teams. So I'm Eryn. I'm a PHP developer which means I'm a big I'm a technical lead, which means I like to agent. I'm going to talk about clients, I'm going You might not have those at your job. If you don't have those, that is fine. Because you have something similar. So when I say client, if you don't have actual hear users, hear whichever one is appropriate When I say hours or budget, just think of do this in some sort of timeline or you're So it might not be as official or as specific So you, like I said, you maybe have recently You aren't a tech lead yet, but you think you paid to come to this conference, spoiler Because that's really nerdy and I love you [laughter] to improve. So that's probably most of us in this room adjacent to it. But there's a lot of ambiguity aren't this Not everybody even uses it, right? So let's settle this and fix that and know A tech lead is the owner of a technological of the project team. So I really like the first half of this. Because that's what differentiates what we Or just being a senior engineer. So product owner, they may advocate for the or the use cases, but they're not going to Project manager is making sure that we get They care very much about the brass tacks talking to the client, perhaps, some places places not. Oh, hey! You saw nothing. [laughter] is not going to worry about the technical team can do that part, because they're not And a senior dev is worried about those technical the whole project. They're really focused on perhaps a very difficult in which they are the masters of the details. This looks a little different everywhere you Not everyone even uses this term and places So some cases it's a job title. In a lot of places it's more of a project project but you're just a person on this other Maybe it's more of a continual management Every place is going to have a different set and there's the specific stuff that we're Maybe you deliver senior-level architecture You have to write requirements -- oh, I said You have to make sure those requirements are But then there's the things that you are not The intangibles of this job. Saying no to scope creep. Settling disputes between two developers who That's the stuff that they don't tell you job that you're doing. It can be hard to reconcile all of these different different organizations that we might do it get it done, in one talk. With one set of ideas and definitions and The bottom line is that at the end of the a team. And the one thing that is consistent on every ever, no exceptions, is that there are people And people are pretty -- we're similar in Which means we're hackable. Which is good. Because we like that. So we can talk about the psychology of humans. We can talk about the psychology of groups. Camille talked about a lot of that in her There are things that you can do, that regardless agile or water fall or whatever you are, you So I'm going to distill this down. We're going to achieve tech lead mastery in Facilitate: Help your team do their job. Advocate: Keep the big picture in mind the And motivate: Guide your team to the best We're going to get into the details of each This is regardless of your technological situation, So facilitate. Your job is to help other people do their because there aren't necessarily obvious metrics. You aren't necessarily looking at your own That you've written. You're doing something a lot more intangible You're helping other people get their work Always be asking yourself what's next. What is my team going to need next from me? So if there's a roadblock, you move it. If somebody can't get their done that's when figure what's up with the UX. It looks weird to me, I totally agree. But that's firefighting if you only wait until What you want to do is look ahead and perceive This is a Minnesota phrase that I learned. I live in Minneapolis now but I'm from Chicago culture there from a self-side Irish, very One thing about Minnesotans, asking for something to anticipate what their needs are. So true story, I was at my brother-in-law's eating them and they're delicious and they're of water and he is standing there with the I was just going to ask you for that. And he's like, of course, pretzels are salty! [laughter] in, so whatever, I guess it wasn't that bad. So you want to cultivate that same sense of You want to say what's going to happen before to a client's FTP server on Friday, don't Just ping the admin Tuesday. Look ahead. Get it figured out. It's a great sin to leave somebody blocked. So the only way that you can make sure that Otherwise you're going to be constantly behind Oh, yeah, let's do it. So tactic No. 1 to make it happen: Use tickets, the room just got really excited. But seriously I love estimates and I love make decisions and data helps us have arguments if you just have a general gut feeling that one thing, but if you can sit down and look that you have that are, you know, you need going to get it done until August, that is by. That's not something that someone can push Like, no, these are facts. What are we gonna do with them. So it helps us have productive decisions and do to get the project moving. Your job now is to be interrupted. That's just reality. So what you have to do is figure out when the thing for them, and when is it appropriate frustrating to get interrupted because the You lose your train of thought. You have to switch tasks but in the overall ten minutes to ask you, takes you ten minutes to get back to them. That's 30 minutes. If it would have taken them two hours to solve Your job is to be interrupted now. Sorry. But it's for the health of the team and it's So you need to know all of the answers, or Because you're going to get interrupted a You're going to have people coming to you the resource on the project, right? So you're going to have P MS and management of things are and QA and the customer support is always broken. You're going to get interrupted all the time you work somewhere because you accumulate with you and decided that you're super-smart It's a problem that only gets worse. So you just have to accept that that's part So know everything, or at least know where Teach them how to fish. That is fine. You always want to be evaluating any request now, in 10 minutes, this afternoon, next week of the organization. This is a fantastic quote from a man who will He made that really clear. It's fine to admit not knowing something, I don't know, should Burt joyfully from your you can ask for advice. That's OK. In fact, it's recommended. You should really ask for advice. But when your job is now the person who gets of the project, you don't get to say, &quot;Not You're now responsible for making sure that needs to be or that that person who has that What's cool, though, is we can use it as a For example, I at the agency I was at was sporadically. Because I had to advise clients, who's hosting do. So I had to be able to speak intelligently one implementing it so I was just going to me sound smart? Because I kind of know but I don't really I could always have gone back to ask them to learn more about that thing and so instead was the answer, explain that to me. And people would explain more things to me OK, that's job security. So use these opportunities to learn lots of So second, to get things done right, you need Your job is to advocate for whatever is not If you're talking to your devs and they want client, for the users, for the people who who are going to maintain it afterwards. But if you're talking to management, and they're tests? You know, can't you -- lots of terrible things. Now you're advocating for the devs. Now you're in the room saying no, we can't, And no matter who you're talking to, you're If you're in an agency setting or something internal stakeholders, maybe it's that manager it, I don't care if it's harder or technically You need to advocate for the project. Push back on that. Sometimes you have to say no. So you need to have the 10,000-foot view in what to do on the ground because when you're way to be successful in those split-second more importantly, why. Because you want to trust your developers stuff, right? I mean they're smart, that's why they work They're probably smart. They're smart, OK? And you want to trust them and let them fill you need to know the why. So when they say, well, if we ... no, and here's why. Because developers, most humans, but especially little logical, work a lot better if you give Just saying yes or no doesn't work. And you all know that, because you're also And you're smart people and you're people So if we give people the context, they can However, you're only human. So you can't actually know everything. So write everything down. Everything. Send meeting recaps, send emails that recap especially send recaps of any conversation can make your life harder. This is how we avoid groundhog's day meeting Which is where you go into a meeting and you and figuring out the details and it is agonizing by the end of it no one has strong opinions to something that you agree works and next [laughter] It's especially effective with the kind of the kinds of managers who like to decree how Because if you can show somebody not only back against that. Or they can, but they need to have reasons. They can't just change with the wind. So this stuff can really save your bacon, talking in terms of hours and money and things sanity. Because nobody can stand those meetings. So here's how to advocate when you're talking Talking to developers. Developers love, love to do things right. There are degrees of correctness to everything, So if the developer wants to rip the most it's not going to actually get reused, that's Everybody likes to write reusable code, and [laughter] that literally no one else is going to use, So push back in those moments. Have a sense of scope. Don't be scared to say no. In fact, I got kind of a reputation for always out of scope and one day one of my team members this idea, I was thinking if we did this, thing and no, we're not going to use it right so I'm not even going to ask you and he walked I was so proud! That was a good moment, guys. So push back. It's OK. When you're talking to management, use those you have set up. When they want something faster, give them Don't say, no. Say no, but ... no, we can't do that, but Or no, we can't do that, but if you bought then we could at least see. No, we can't do that, but give me a week for is that person is going to decide, either I don't want to pay for it. So when you give an answer back that they So make sure you walk into those things with Make it impersonal. Bring in facts, push back, be firm, but you we are all developers and we all want to do And there are tradeoffs. Any software has tradeoffs. So don't push back on everything management If you do that, you are going to get a reputation So don't forget that stuff. With clients, again, you need to be able to Whether it's clients, stakeholders, users, that's not happening, is the right thing to Just say no to feature creep. That is advocating for the project. One way to make sure this doesn't happen is You have requirements, right? You have user stories or requirements or you [laughter] If not, that's another talk that I would be But make sure that you're not adding too much, be saying no, no, no, always be comparing, Coffee is for shippers. And you'll never ship if you keep letting Finally, to get things done, you need to motivate So tech leads, we have a little bit of telling-people-what-to-do not managerial. And yet we still have to get people to do That sounds like a problem, but it's actually you can't fall back on being a dictator. Fall back on hierarchy. You have to actually motivate people. It's not as hard as it sounds. But I don't want to scare you, but tech leading that you were avoiding that whole thing by Sorry. But it's the good kind. It's the best kind of management. It is empowering people through leadership and that is what every manager should be. The first key to this is your attitude. You're going to set the tone for the project. You're going to set the tone for the team. So if you're negative all the time, your team If you're not confident, your team is not Whatever you are is the ceiling. Your team can't be more optimistic, more confident, So you need to figure out how to be the wall then just splashes off and keeps your developers Absorb the crazy. Let everybody else feel calm and confident. Another big part of this is you can't -- you've So like, we all need to blow off steam sometimes, steam, then you're in trouble, because that That becomes something where it's us versus Where whoever it is you're always blowing This is basic human psychology, this is tribalism. Don't encourage it. We all need to let it go sometimes, but be with a very deliberate audience, and don't Get it off your chest, but then move on because solutions. So it feels good, but it's not productive. One of my favorite ways to motivate people, So here's the thing: Lots of research has salaries, more PTO, free beer, free cake, work. It is a very, very short and fleeting returns. The best motivator is intrinsic motivation. It's when people motivate themselves and want So passive-aggressive whiteboarding is a way Here's an example. I had a kind of a big project, where there and me, and we had a lot of work to do and really nervous and one of the developers was By the way, I sign NDAs so a lot of my stories a thing and. So one of the developers would be like hey, cool. And that, like, that's it, like, what do you You're at an impasse, so what I did was I write that? And he's like, sure. So I went to a room and he started whiteboarding And I was like, what about? And he's like, yup, nope, got that covered. And then I said about what about -- and that the realization and like the dread that just and I was like, yeah, I've been saying that Because getting somebody to walk through that hearts, his own brain, he logically had gotten me just telling him he would come back and So passive-aggressive whiteboarding is a fantastic that you already know they haven't settled And you're not writing the code. I'm really selling this job, aren't I? That's a rough place to be in because you power, but you're going to be in trouble if do. So motivation is a big part of this. You getting people motivated properly to do together, that helps so much. So does the advocating, so you're putting yourselves up for success. You're creating a situation where you can But another really important part of this As a tech lead, as that senior developer, you are going to be looking for the last 10%. So developers are really good about getting which is actually 50% of the project. [laughter] because they're unhappy, because it took them done. So to mitigate risk in those situations, to their work. This is another form of passive-aggressive it, can you demo it for me because when they commit a file or they just didn't finish the getting the backend working, stuff just becomes my bad, let me go finish it. So that's a really good way to mitigate risk. The best way is to go after the parts of the lessly chase down answers until you aren't You want the easy win, you just want to dive not quite sure how it works yet, but you'll It's some other third party integration you It's the new hotness JavaScript stack that you have to use but you don't know anything It's a lot of things, but it's that black When you sit down and look at a project be is and charge head first into it. The less you want to do part of a project, So focus on those things, and just tear them until you know what you're looking at and Because those are the places where you have You may think it's a known unknown. The unknown unknown is everything that you So dive into those things. And focus on being the catalyst that makes of the different parts and the way that they it will take care of itself. Last note: I want to be straight up. It can be hard to code when you're a tech Once you're doing some leadership, it is tricky. Because coders work on the maker's schedule, But tech leads, you shift to a manager's schedule. You're interruptible. Your job is to be interrupted. Your job is to help other people get their don't get to program as much anymore, and in there, but you're never going to code as And you need to accept it and your management push back on it until it is. And if this breaks your heart, maybe this I mean not this conference. This conference is great. [laughter] not your thing, and that's OK. But to end on a downer note: do to try to mitigate this, to try to pull be effective for your team and also not go So advocate, facilitate, motivate, and kick Thank you! [applause]