[MUSIC PLAYING] BRYAN YU: All right. Welcome back, everyone, to Web So last time, we took a look at two can be used to design web pages. HTML, we used in order to describe to decide what content we want and then CSS, we used of the page, what color we wanted to run things as well. Today, we're going to turn that we can use as we begin to and in particular, we're going to and what Git is is it is a version programs necessarily, to use as we begin to develop web applications over So what is Git going to enable us to do? Well, it's going to First and foremost, what Git that's going to allow us to, first, keep So once upon a time, was starting to develop I remember working on a file, and I might have wanted to save the old and then just make changes to the Especially if you have of your code in various different just starts to become a nightmare. So what Git is going to enable us that we make to our code. So we might create a file initially, as we make changes, add to we can save snapshots, so to of our code at different that we can quickly and easily that we've made to that code. Additionally, Git is for us to synchronize code In larger scale web just one person who's working Usually, you're working with a all in the same application, And one definitely tricky is figuring out how to synchronize If I make a change on my I want to make sure that my colleagues and get access to the latest And then I want to be able to that the people I'm So we need some way to keep is going to enable us to do that. What we're going to effectively have in we're going to call a and both I and someone I'm working might both be able to get access the same files in the same state. And if ever I and the other person we can each make changes to those files, pushing them back up to so that the server will have the of this code. Then after that, after we've both then we can both pull so to speak, in order to get access so that no matter what, so long as that my partner has, we can use so that I have access to my colleague's Git also enables us to do For example, Git allows us without removing access to the original. So for example, you might imagine that I might want to try making if they're quite going to work. So I want to test those want to lose access to my original just in case something goes wrong. So what Git enables us to do to code on a separate such that later, once we're happy we can merge those changes back into being able to test those changes before that we want to make. And finally, one powerful feature is the ability to revert back So you might imagine in the situation and I realize that actually, what I'm Git enables us to say, you know what? This most recent change isn't I would like to revert back to a And Git makes it very easy to go So the goal for today is going to to learn the various different will be quite popular go about working on web any other code-related project, allows a number of useful features to work on larger and larger projects. But ultimately, as we begin they need to be stored that we're able to download such that me and a partner on the same files and the same we need to host our get code somewhere. And there are a number of different but one of the most popular GitHub is a website that all the repository is, as a folder that holds a whole bunch So we're going to host this code and then on our computer, we'll be able and manipulate those the files that are within them. So let's go ahead and and see how we can go ahead and create If you don't already you can create one by and signing up for an account for free. And I'll now go to GitHub.com/new. GitHub.com/new is the page I go to if I And so let's take a look at what I need The first thing I need to do So in this case, I'm just going You can give it any name you doesn't collide with other repository GitHub optionally lets me provide I'll just say, Web Programming And then GitHub gives me the choice, do such that anyone can see the repository? Not everyone can necessarily but it's publicly available if and try it out. Public means that anyone can access it. Or private, meaning, by default, but I can choose if I would like other and I can select which individuals. For now, I'll go ahead and and I'll go down here and click on in order to make this new repository. So I click the Create Repository button. And here it is. This is the GitHub's repository notice that there's a but there are no files, when I first created my an empty repository with nothing in it. So what I'd like to do now is onto my own computer, an HTML file that contains some HTML So, how am I going to do that? Well, in order to do that, we're going command that's going to be involved git clone is a command to take a repository from the internet So you'll need to have Git You can install it on any Mac or PC what you're going to do is, on you'll run it git clone, followed that you're trying to download. So you might imagine that and up here is some server where GitHub, for example, is one such And up there is the repository other folders with other files that that you care about downloading. So if I run git clone followed by the effect of that is that the get downloaded onto my computer, now have a copy of everything inside of that Git repository. So now that we know how to clone a We've just created a and now let me go into my to clone this repository, so that and I can begin to make So I'll go into my terminal now, and And the first thing is I'm going to need the So if I go back into is that it gives me an HTTPS link in So there are a couple of different ways of ways to authenticate myself. One is using HTTPS, involve like a username have to type in, in that these are my GitHub credentials. Alternatively, if you're this is another method You can give GitHub your public SSH but no need to worry as familiar with that technology. The key here is that URL that corresponds to my repository. So I'm going to copy that URL, I'll type git clone, and then that I would like to clone I'll go ahead and press Return. It says I'm cloning into a directory you appear to have cloned It's saying that's a because I know that I've cloned an empty brand-new. And now I can type the The ls command in the and effectively what all of the files that are all the files and of my lecture1 directory, a fancy name for folder. So I'll type ls, and I now have a folder called hello I didn't have before. I'll go ahead and move In order to change into a directory Cd stands for change directory. And so if I type cd hello, I will now And if I type ls, nothing inside of this hello this repository was empty. I cloned it, and there So now I'd like to actually put The repository is only useful and keeping track of the changes So I'll go ahead and actually try now The first thing I'll do And we could create a new file but on the terminal, for creating a new file called touch. So in the terminal, I can type touch is create a new file called hello.html. And if I type ls, I can see that indeed Now inside of my hello open up this directory in the Again, I'm using VS Code. And let me now add just I'll just add a simple HTML page, where I give it a header, and inside the body of the Same HTML page we've now, just now inside of this repository. Of course, I haven't yet made I haven't said that I want to save And the repository isn't keeping track I need to tell Git that this that I would like to keep track of, And in the world of Git we When I say, I am making would like to save the current and folders and other assets that and basically take a snapshot such that later I might be But in order to do that, there So the first step we need to So we saw that git clone was the to clone a repository, take a repository The next command we'll take a look And what git add is to let us tell Git that I to track the next time I make a commit to say a snapshot of all these files, such that And in order to do that, I need to So if, for example, I and I'd like to tell Git I can run a command like git add, foo.py or .html or whatever And then Git will that right now, we've added foo.py. This is now a file that will be So why are these two separate steps? Well, one reason you might working on a lot of different files, and there are only three that I'm I don't want to just say save and I might want to say that you know what? These are the only three files that and the other ones I'm still working on. So it gives us that ability to let me explicitly say that I want to the next time I make of the files, for example, though want to add all of the files, and So let's go ahead and try that. We'll go back to our repository where and now what I'd like would like to add the hello.html So inside of my terminal, I'll now say-- again, I have a hello.html file here-- I'll say git add, And you'll notice that so far, because so far, I haven't I've just said that I would that the next time I say save, the it is going to keep track of the So how do I actually make a commit? How do I actually say, save Well, that's going to be one more Git When I say, git commit, I'm going to like to save a snapshot of the keeping track of any of the changes that I've added using git add. And the way we run it is by running in quotation marks, a message. And this message is known and what it is is it's a or whatever your language you've made in this most recent as you work on a big project, you're as you make lots of You'll commit and commit you make to the project. And you might want to refer but it's only valuable identify in which commit you made So by providing some English to yourself-- such that later you can and know that, all right, at this this is the change that I made to keep track of all the changes that repository. So when you type git commit followed something like, &quot;I added And when you do, Git is going to save a right now, keeping track of that used to exist there So let's try and actually how that's actually going to work. So we've already added the to say add the hello.html track of, but now when and we can make additional I can go back into the terminal and then I can specify some English description of what it is And what I did was I So I'm just going to say, I That was the change I made I'll go ahead and press Return. And here's what it's telling me. It's telling me one file has been So Git keeps track of changes have been added or have been deleted or removed. And in this case, it's telling me there because previously, and now a file that has And now I have saved hello.html So now you might imagine if I go back and refresh it, that maybe but I refresh, and nothing I don't see my hello.html file. And that's because here I'm missing before my changes Recall that when I ran the to clone the repository from GitHub, and I ran git clone it to onto my own computer, and when I ran or I ran git commit to say, I I was always making those changes only I was never affecting anything The changes I was making were If I want to push those then I'm going to need And in fact, we can see what's currently using a command called git status. And what git status will do is, happening inside of my repository. So, for example, if I were run the command git status, then and tell me that I'm more on branches later-- but then it's saying, my branch is So this is a long-winded way of the repository-- the version is ahead of the origin the version of the repository that I have one commit that the And it's helpfully telling push to publish your local commits. get push of the command that I would like to take my changes and push them up to GitHub so So after we've checked our we can use the command git push to say made, when I run git push, those so GitHub has access to all of So let's try those two to see what's currently going on inside to say, I would like to now so that the online has the same contents as the All right. So in my terminal now, and I see that I am on branch And it's a slightly different is nothing currently but the key here is that git push to, say, take that I have made to my repository and So I'll type git push, is it's going to compress and it's going to push it And now, if I go back to GitHub's and refresh the page, I'll see that I And so this is what GitHub's user It gives me a few pieces of information. It's telling me, for example, that to the repository-- that's that is on one branch, so if I've only but we'll see how to And, in particular, the files that currently exist that right now I have this hello.html and, in particular, next to it is from the most recent time that I touched telling me that I added the commit that affected hello.html. And if I were now to to actually see what's inside of that I wrote in the file before. I see !DOCTYPE html, and page that we've seen So I made the change on my own computer, so they're now inside That's now public, if they wanted to collaborate on clone it to their own computer, and So now we can explore how we might to this web page as well. So if, for example, I wanted to add a I might at the top of the body &quot;Welcome to my website!&quot; And now if I, just for good to see what it looks like, this is And now I've made changes to that have not yet been saved, and I git status is your go-to for going on inside of your repository. So here we see &quot;Changes which is a fancy way of saying, but I haven't said I would like to It's telling me that but it's not something going to keep track of the So if I want to save hello.html then I'll first need to and then I could run git commit. But there's actually a If you want to add all of the and commit at the same time, Remember, before we just used -am means git commit all of the a for all-- and also provide a message. So you can combine the git into just a single step by saying, that I've changed, and then What exactly did I change? I added a heading. I'll go ahead and press Return. It's kept track of the changed one file with one insertion. All I did was add one And now if I run git status, it's and I am ahead of origin master-- origin master being by one commit, that I commit, but right now, on it's still showing the In order to take my changes and make sure they're updated on push those changes up to I can now refresh the page see that GitHub now has the latest It now has this h1. It says, &quot;Welcome to my website!&quot; So that's git push now, would like to take the changes that and push them up to some remote for example. But we can also go in the opposite way. You might imagine that maybe is more recent than the version that I I would like to download the latest currently exists on GitHub. And in order to do that, we can How does that work? Well, when I run git pull, is the opposite of what git push did. While git push took my changes on my git pull, we'll say, take the changes and go ahead and pull the so that I and my local have access to the latest version on GitHub. And we can demonstrate if I go back and take a look because on GitHub, I to edit files using GitHub's interface. So I'm going to simulate someone else Maybe someone else so they add an h2 that says, And then, they can This is sort of a graphical equivalent that we provided before. They can say, &quot;Added So this is another way to edit a Git it inside of GitHub's interface. So GitHub allows you and then add or modify So now the version on GitHub is that we have on our computer, here I only see the h1, was just added, because it's a have access to. But if I want to download that is inside my terminal, I can say and all right. It's updated one file. It's made some changes. And so now, if I go notice that automatically I now I now have this h2 that says &quot;Hello!&quot; because I've pulled the latest So via combination of I can make changes to my code and also get access to the already is on GitHub. But as we do this, you could run into some sort of problem. In particular, we might if I've been making changes working on my same project has also What happens if we both make and then try to sync What's going to happen? Well, we're going to run because I've made that my colleague has been making is called a merge to merge my changes with the we run into a situation where They're two different need to figure out how to when we run into this sort of conflict. So here's what's going to happen. If ever we run into this it is generally going to happen if I from elsewhere. So let's say I run git pull, but something that is online that of the repository. What I'll get is a message like this. Some conflict saying, Merge You need to fix the conflicts So what might those conflicts look like? Well, generally, the file is going Git is automatically going to to describe the things that and it's a lot of cryptic but we can distill it down Everything in between these here are your changes, made on my version of the conflicting with some other changes. Everything between these down here are the remote that I'm trying to pull in that I've currently been working on. And then this sequence here is the hash of So every comment gets a hash, just that is likely to be unique that helps and Git will automatically generate and we'll see in a moment how you can But here again, it's just this is the commit that is causing the In order to address this merge first need to remove all of exist in the text file want as the resolution of the conflict. So maybe I want to keep maybe I want to keep the remote version were already on GitHub, want to combine them in I, the programmer get I get to look at my version and decide how I want to I'll remove any of the blank lines this is what I want the merged So let's now take a look at an to see how one might arise, go going about dealing with a So I, on my computer now, I'm going I'm going to say, add One exclamation point wasn't enough. I'll add in a second and I'll go ahead and I'll say git commit -am and I'll go ahead and I've saved this new But I'm not going to push the code yet. Instead, what I'm going to working on the same file. Maybe someone else on GitHub For this h1, what we'd add some style to it with let's give it a color So they've added some CSS. We'll go ahead and What did they do? They added some style. And we'll commit those changes. And now what we've to be a merge conflict, has made a change to this line of this particular h1 tag, have also made a change to the same And Git entirely operates in terms Given that we both made Git going to have a very what to do in this scenario. So here in my terminal, I'll because I want to pull in those I'll see that, all right, CONFLICT: There was a merge The automatic merge failed, try to merge files but sometimes it can't, so now and then commit the results. So let's go ahead and look at and what you'll notice is a and my text editor just so so that I can see them but this is just highlighting It's not actually part But you'll notice all of these arrows, and in between, here is of code, the line of code with the extra Down below, here is the of the same code, the version that trying to pull in. This is the version that says, of the inline style for And now what I need to out how to merge these two together. How do I want to resolve this conflict? Well, in this particular to resolve this conflict by just If the person on GitHub wanted to add and I wanted the extra I can go ahead and just add and then get rid of my version, and then So go ahead and remove those. I basically modify the file until I think that, all wanted to resolve the conflict. One person added color. One person then added punctuation. The way to resolve it in this But here is where some The human programmer doesn't need how exactly do we want How do we want to figure out how and merge them all together? But once we're satisfied with it, we I can say git commit -am and all right, we fixed And now, if I push those results and I refresh the page, I now see with the h1 that has both the inline because I've resolved and then I've pushed that information There are a couple of other Git commands I mean, there are many, but right now, the first git log is useful if you ever need that you've made to your track of all of the made in this particular repository. All you need to do is and Git will spit out that look like this, describing each It'll tell you what the that you can reference it more easily, it will tell you the date on and it will also tell So if you need to very quickly look back added or who added this you can just look through the git And then you'll know which Also helpful is if you made a change that you want to go back to a previous commit. Then, in that case, you to git reset, which has a number of but git reset in effect will take and revert it back to an older state So a couple of ways you You can do git reset --hard, meaning and then you can plug in a commit hash. So git log, as you might gave you the commit hashes for each If I want to go back to one particular and then the commit hash and I'll go back to that commit. Alternatively, I could say something And recall that origin/master that's currently on GitHub. So if I want to take my current and reset it back to then I can use a command So you run git reset, and that will reset the current state of it was in previously. And there are a number as well, that can be begin working with larger but these are some of the most use the most often are just adding git commit to say, I I would like to save the current and pull to be able to upload changes made to your repository; and then some and status, just to give you information and get you back to an older state But as we begin to work especially as we begin to work you may find that just change after another isn't nearly as And so we can explore what might where you begin making some changes So let's imagine you make your you make some additional you realize you want to start working that you've been working on. So you start working you continue working but then you realize there was a bug in the original and you want to go but now we're sort of in a tricky but we're in the middle of So what do we do? We could go back to this but then what happens The problem is that this structure-- it is very linear. It only goes one after And oftentimes, when you're it's not going to operate You're not always working on follows the thing before it. You might be fixing multiple bugs and you want some way of being simultaneously and to easily And so that is where Branches are Git's way of of the repository at the same time. And so you might imagine a situation You make your first commit, you start and when you decide working on a new feature, for example, after another after another on I can create a new branch. I can branch off and say, you know what? Let's create a new branch and start and then keep working on And if I realize later on know what, there was a bug I can go back to this commit and and fix that bug. And now I have two different might have different code on it, one of which I've been working Generally, each of those So the master branch which is generally going to contain of your code. And as you're working on newer you might have some feature on some other feature, for example. And at any given time though, your focus and where your focus is, what the is, is designated by So if HEAD is pointing your repository right now is working on But you can change the head. You can switch what branch and you can check out and say, let's look at that branch, And you can begin working by switching where your head is, and then back again. And only when you're satisfied, that and this feature is in a satisfactory we can merge those so that everything comes back onto now has all of the latest code. And that's the real power to say that I would like to be working and be working on a feature version of the code. So, let's now take a look at an example So here in my hello.html file, I've I added the color of blue. And let's say that I would I would like to move the styling and I'd instead like to move it up because we decided earlier that was page like this. I could make those changes if I expect I might be I could move on to a different branch, in order to work on these new changes. And so here are some of the key If I type git branch, that will and what branches So here, for example, I see that I just have a and the star on the that this is the branch the only branch that there is. If I want to check out a new and if it's a new branch, I'll the name of the new branch. And I'll call the new going to be making some style So I typed git checkout -b style, I have switched to a And now, if I type git see that now I have two branches. I have the master branch, which is and now I have the this new branch which I am on on the left-hand side. So now that I'm on this new branch, that I want, and nothing what is on the master branch, so So I can say, all right, let's and let's add a style I can say that I would like my h1 to So I've made a whole would like to now commit those changes. I'll say git commit That's the change that I've made. But I've only made those Again, if I run git branch, on the style branch, where I've here to the top of my page, but I can git checkout allows me to We used to git checkout but if you're switching to a I can just say git checkout to switch my current branch from the So I run git checkout master. Now I'm on the master branch. And now you'll see, if now I'm back to the inline up here in the head section of the page. If I check out the style branch again, Now I have the style code up here and not inline. So these changes have only been So now I'll check out master again. And maybe I want to make some Maybe I realized that I want to You know what? Two exclamation points with too many. We'll remove-- now we just have one. And now we'll commit these changes. I'll say git commit and And now I've removed the punctuation So this master branch now has just but it still does have So now what I'd like to do that I made from the other branch. I'd like to take what I was and merge it into this current version And in order to do that, the command So git merge. Notice that I am currently on the merge and then style, that is going to and attempt to merge it And what we'll find is we're able but there's a merge conflict. Now this won't happen all Sometimes, Git will be that if one change has been and one change has been made to those changes back together, Git automatically. But in this case, that wasn't branch and my master branch made and we'll see why if I go back here. You'll notice that in we do see this style tag No problems, no conflict lines that have been added to this The conflict comes up in my version on the master mark, whereas in the which we can see here by the word So we need to resolve these somehow. And what I'll ultimately do markers or the conflict I would like for the updated not to have the inline styling, and So I have now made those changes, and now I can commit. I fixed the merge conflicts. And that's the general workflow now of When you're working might branch off in like to work on a different You'll make changes, make commits, and when you're satisfied with those that you want them to be, you in to the original Sometimes you'll have to deal with merge And if you're careful about and trying to be careful not to make in two different places, you can reduce a merge conflict, quite smart about how it tries to And finally, we'll take a look specifically that can begin to work on larger projects pieces, the first of which is So let's go to a GitHub repository for Bootstrap, for example. So Bootstrap, which is the CSS library is a library that gives us easy access features, and the entire all of the code for Bootstrap to look at, and more importantly, that it's not just one person that's but it's a community-driven repository adding new features, and making and collaborating on them by taking And so if you find a Git repository or if you want other people to be one thing you can do is fork We mean making your own copy And so up here in the upper is a button called Fork, and we can have already forked made a copy of the repository And so we could fork it ourselves just and then getting our own that we can then clone and The reason we might do that is while it is public, doesn't That would be probably could just update Bootstrap's is copy the code, make a fork of push and pull to it. And then, when you feel like you've like to send back to what's called a pull request, that pulled in to Bootstrap's code. And we can look, for example, It looks like right now there There are 71 people that or made some changes and you can submit a pull would like to take those changes and actual code, and the Bootstrap's code in this can review those pull requests, provide and then when everyone's satisfied, into Bootstrap's actual code. And this is one of the key the ability for multiple people to and for a community to be able on figuring out what changes how to improve upon and make it better moving forward. And one final thing is an additional feature GitHub Pages is a free to be able to quickly and CSS, and maybe even a and deploy it to the internet And anyone with a GitHub account website for free. And in order to do so-- we can demonstrate it now-- all you need to do in GitHub is that we'll call-- it should generally be your user name, for your GitHub Pages site, You'll just have to manually And we'll go ahead and If you create a get up repository it will automatically be and what that means is that I can So I can say git clone, I've cloned an empty repository, and add some files to it. I can say, let's add, by default, and I'll create an HTML file. That is my site. And the body of it will just say, So something like But it can certainly be more Inside my terminal, I will and I'll make a commit. And often, the first commit, write &quot;First commit,&quot; so that and then I'll push those So if you push your changes to a .github.io, then if you take a look you'll see that GitHub Pages is And now if I click on this you'll see deployed to the internet, and see it. They'll see a big heading that says because this is the way the browser pushed to my GitHub Pages repository. And the advantage of very easy now to be able to All I need to do is if I make a new push that change to GitHub, and when to my GitHub Pages repository, then in the world can access by going And this allows you to leverage the ability to branch, the ability to page at different times, and revert as well. So all in all, Git has given us that's given us the ability now to be keep track of any keep track of when a piece of code is and look at old versions and in particular, it's given and work together with such that we can be working on and someone else working can also be working on multiple parts of and it's very easy then to sync up And so Git is a very popular the world of web programming, dealing with any kind of larger project, on the same thing enable us to more easily over the course of this term. Next time, we'll take a look at Python, languages that we'll use as we continue more sophisticated web applications. I'll see you then.