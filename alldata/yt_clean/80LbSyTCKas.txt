Hi, I'm Steve Smith and I'm going to about his book, &quot;The Fundamentals of Software between 2000 and 2010. Dave won't like transformative for me, not just but also how to manage people, how to be always really grateful to Dave for what when the GOTO folks said we'd like to talk to Dave We'll get into why I think it's such an important do you want to say who you are, in case someone's Hi, everyone. My name is Dave and consultant. As Steve said, we worked building one of the world's highest performance fun. I also run a YouTube channel, which is and I write books. The book is &quot;Modern Software you misspoke the title. It's Oh, I'm sorry. Not off to a very good start. So, developer,&quot; heh? Because I stopped calling Well, I might be a fraud, but I do enough of it. I I can't remember... I'm waiting for my kids call myself a developer again. The thing ever since I saw the early drafts this anymore. I remember when I started you know, we first met in 2000 and started there were loads of books like this around. There little bit by 2008 but were still really popular, Cockburn books, there were the Mary Poppendieck high level at what the nature of engineering I actually met Alistair Cockburn I think and the first thing I said was thanks very somebody remembered it. He just went, &quot;I'm amazed that was such a big deal. That kind of steered my I think this book is the same, it will steer engineering. So, it just feels strange, there's book in the last five years, ten years... have any idea... what are your thoughts on why I don't know the answer to why they're not as them as being as common. And I think they're I think. I recently did... sorry, I'm advertising video on my YouTube channel about books before about a bunch of other books. But one of the through and looking at this, was all of the books I think that technology-specific books have have a short time horizon. If I'm honest, they're you know, how to actually call this thing, this or whatever else. It's the sort of stuff I'm on the whole, these days, or you know, play with so, I think they're the kinds One of my favorite books, my top one in my book that talks about design in the abstract, of a particular technology. I think that's one of misunderstanding what software development is Carpenters, yes, they can wield their tools with their job is the production of chairs or doors programming, or programming tools, or programming Java programmer, I am not a C++ programmer, I'm some outcome with software, and you choose choose the problem to meet the tool. And so, that talk about that part of the problem, the structure our work in ways that are going to allow are the things that interest me, and certainly, See, it's funny, you mentioned The Blue Book and loving it. And I remember at LMAX, a and said, you really need to understand this where there isn't domain-driven design, not just It's almost like that book needs a new version. another try. Actually, I might do that. I know that when I delivery,&quot; I chose an abstract idea and went very of the reviewers and some readers came back and this isn't technical enough, almost. One &quot;Can you just tell me about the product I need there is no product. I know, but I had to add a bit at the end people were moaning. So, have you had fluff, how does this actually work for me when Not quite, no. So, I haven't The only negative feedback that I've had so far It cycles around because all of the ideas that are so it's difficult... So, my book divides the that to do a great job of software engineering, become experts at learning, and so we need And we also need to be experts at managing because the systems that we build these days are We need to be able to be good at both of those are pretty fundamental. They're things like modularity, cohesion, coupling, and these are all deeply interlinked ideas. So, the ways in which these interact with one another, to the organizational structures that we create around the systems that we build to implement But it is a book of ideas rather than at the end of this, you're not going to be Well actually, I think you could. any technology better after you read this book if I use the principles in these books to influence this is pervasive across nearly everything that I do in terms of managing information, I think. a marketing guide. Or when I'm writing a book or a blog or with home stuff? Optimize for learning and effective goals, I think. The I've spoken to so many companies about it so often see is, in the last two years less so, but a one, probably, put them on a shelf in the office, then there's no kind of time invested in bringing talks about is after there's a production incident about, and ask questions and learn from it. That doesn't happen. It gets written document, and no one learns anything from what information to decode, if you put the time it's one of those things where if you and if you do it, it's hard to understand explaining something that you've done... that I find it quite hard to say to people have you to me it's so natural, it's hard for me I think there are lots of different dimensions iteration, then what iteration, the way in definitions of iteration say about repeating a set I think there are two aspects to iteration. So, if whatever that might be, it could be a commercial brings, it could be the number of users that you you want it to be this fast, or this easy to work any of those sorts of things in one great step just ridiculous, really, to imagine that. So you're going to navigate towards it. to get really, really good at those repeating feedback so that we can try stuff, and we and use continuous delivery deployment pipelines where we are at any point, those sorts of things. function. How do I measure whether I'm closer things, if you have the ability to iterate, and each small step you're closer or further from your just start off in a random direction, you don't understand how you get to the destination. You try further away from my goal, and you discard the the steps that get you closer, and ultimately, That's how evolution works. That's how science sorts of things matter. You can't discard the can achieve anything complex in its absence. counter that in terms of, you know, what's the so the alternative is kind of what we tried for not being able to successfully discard, A Waterfall approach kind of starts off with the sufficient detail to form a plan to get you that at some level, it puts a limit on the Because you've got to understand the insufficient going to get to you to the target. An iterative Elon Musk is currently building spaceships in how to do that. They still don't know how to do do to achieve that. He starts off with the vaguest get me closer to being able to get people I was thinking about what you said it's fun to dump on Waterfall, but I guess the that foolish pursuit of perfection. It's that idiotic idea that we the bridge analogy today in a government report we're building technology services, and I find it I find it hard to believe that we're still that software is ever feature-complete is or... and eventually, you might retire that or you're dying as a business because you You're just assuming, you know, we can be to ops forever to run it into the ground because do anything with it. But one thing I see that's really painful hand something over to another team so they iterating on site for so long, and .they're this is where the learning ends. We're We've built it perfectly, it's all not what... and it's what users want. We haven't Yes. That's part of the need for your product direction and so as well. like continuous delivery and deployment pipelines is because of what it gives to the business. It business, and so experiment with business value that we are bringing. If we can work so that allows us to make a change, and change going to stop doing that, or this looks like... so let's do more of that. We can observe those learnings. We can take those learning to organize our work to achieve them. Which is There are a number of different aspects work experimentally, we've got to say what our our hypothesis, we got to figure out what feedback We've got to control the variables so that we So, we can apply those sorts of ideas to product that we're trying to achieve, and we can learn becomes... these sorts of ideas I think become I think, deeply profound in terms of their terms of starting out without really knowing the the difference. It seems to me, without sounding Enlightenment. It was the idea of stopping relying from on high, to starting out by assuming that being suspicious of your own ideas, and testing Well, I'm up for half an hour talk about think it really comes back, like, being humble, and having learning, and Maybe the person telling me all this stuff doesn't having a hypothesis before making a change, it's I'm going to blaze in, I know what to do... you start out and you're like I know nothing. developer, at least to me, I was like, I know I was like, I know absolutely nothing. I know some stuff now, and what I don't Yes. people, for example, if they don't say, &quot;I If they say, &quot;I don't know, and I know how to find that's exactly what I wanted to hear. I know you talk a lot about TDD as an example of it's really effective, it works really well. One much, which is a real shame, is acceptance a developer or a business analyst sitting down, because you haven't built the thing yet, and then that test is red or ignored, and then once That was such a powerful tool we used at LMAX, so and HMRC, I think we used it there. It just BDD and SB, whatever? But the idea of I'm for the next week or so by writing down the the new functionality will be delivered, and then work on it iteratively and keep building it, keep never took off in the way TDD did. I don't Yes. I think this fits into this kind of experimentally, then you want to be able to, as be able to do is that you want to build your model so you're going to have some kind of idea of that might be. The next step that you want to take come up with an experiment. You're going to make see these results. If I'm writing software that able to find a book, put it in my shopping cart, I could write a specification in those terms that and then I can do the work underneath until that and we've got our results. We've passed, and we've got acceptance from test-driven It's one of the things that land most in terms of coaching people to do a better job. for a while now, and it just works. It just I think if you get to the philosophy of what's what we're doing is that we've just been a little as an experiment. Each change to our product, organization or our culture we're going to going to think, well, what does this mean? Where we'd like to take? How would we understand that whether we've made that step or not, and so on? the size of a feedback loop that you can create you can really drive down that feedback ATDD, maybe a minute or less. But there are as small a feedback loop as you would like. I love getting to go to conferences and running conferences myself that you only get to figure out what people actually want. I'd be get around feedback loops that can't be smaller. to drive down that feedback loop between incident to speed up that feedback. Simulating an One thing I do, actually, with that large annual feedback from people who actually know conferences year, they understand you can only do so much in try to drive down feedback when there's having feedback in seconds or minutes? where creativity matters. One of the sometimes when talking about these sorts of and people start to imagine bureaucracy. You people imagine that bridge-building is some kind bureaucratic process. It couldn't be further the first-ever kind of a bridge, it's going to to be feedback, and you're going to be learning quite the converse, that one of the most creative If you think about engineering in the context, that landed on Mars, or Elon Musk with his you know, building, you know, the that are pretty much unprecedented. technical practicalities of physics or computer certainly an active creation. So, if you want to creative point of view, then If I value the speed of feedback highly enough, prepared to sacrifice to get it? And that's part think we should, we should be valuing these ideas So as you say, feedback is vitally important. One of the areas where I'm doing a organizations that are building medical devices. devices are constrained by a regulatory regime. If they're constrained by a regulatory regime that it's been evaluated by an external third party for to continuous delivery. So, how do you is actually not about releasing often, it's you can optimize to be released so your software and you find ways in which you're able to release a non-clinical setting, into a university that's like that, where you can use... you can try In the example of the conference that you were you know, how could you fake the fact of you could maybe gather feedback on individual of feedback at different levels of granularity. or something, then you... or any, you know, lot of testing and simulation because that's going iterate more quickly, and get feedback more the first Mac, when Apple was building the first large-scale commercial use of application-specific conscious design decision because it meant that the first Apple Mac. So, these things are a matter of creativity about the experiments that feedback, to iterate more quickly. And then, you in which you kind of, you know, deal with the I was just thinking now about years ago, I a good cause where once, you know, once a year, for charity, so their website traffic is just sharp peak. The guy I spoke to was saying, how do to him, why don't you run Comic Relief internally Get people into that mindset of we've got the software. I don't know if they actually did Iff you remember when we built you're not allowed to... The financial regulators They frown on that kind of thing So when we built ours, if you remember, We took the afternoon off, and everybody played the system, in the company, with fake money. We learned loads from those little experiments. tester made all the money. And he had a really technology. I had forgotten about that. Man, he wiped me out every time. All right, let's talk a bit more about one thing that's happened with the cloud that's that we have has been taken away from us, which focus more on higher-order functions. Yet what offset where people are building and championing out to be more complex than ever expected. when it came out, I remember saying this thing's and it solves a load of problems with us having we were kind of like, after a year or two, my wow, this thing is taking a lot of effort And then it obviously moved into AWS and we solved. After a few months, there's still creeping out. When you're at scale with, like, the amount of BAU work people are doing seems to astonishing to me. But what are your thoughts on around managing complexity for the cloud age, and someone's just running it for us, but the logic they've actually tried to implement? of the cloud age, I think that's a function for probably longer than that. Which is... I think get over-fixated on the technology and the tools, mutual friend of ours recently, Martin Thompson, his clients when they're looking at improving is to try and spot the business problem in that is spent by software is in the accidental the problems that we're trying to solve. reminds me of something you taught there's a business story trying to get out. Yes. performance profile, there's a business problem. it's so neg-... the time spent actually is so tiny, you can't see it usually... nor the time spent logging or, you There are other ways of organizing software where and the cloud starts to help us to do some of talk about in my book about managing complexity abstraction, and coupling. Modularity, we want that we can deal with more independently of one about trying to make changing one part of the system, fundamentally. I would kind of argue that of what a design is for, you know? The design us to continue to be able to make progress, So if we're talking about modularity, and so is the separation of concerns. If you want system is focused on doing one thing. If buy a book and store the book in the database, separate those two things out and deal with them system to make it testable, deployable, and so on, that is more modular, better composed. I had a code examples that demonstrate these, the ideas at one point, I wanted to consciously write some I started writing... As a demonstrator, I could started off writing the code the way that I always and I couldn't write code that was bad enough test-driven development. It was impossible. If problems that I was trying to demonstrate. I instead on a different way of doing things. complexity intrudes. I think of the accidentals... I want to try and push the accidental and I'm going to try and architect and design testing to drive the design of my system, tends to force me to do that because those the actual core of the logic is easy, it's to test Yeah, no, I'm just thinking of adapters as an LMAX, we had a really, really hard divide Yes. messaging code into the dot domain package because Like, if you wanted to use that, you had to go of really, enabling constraints forced you to how do you separate, you know, the business logic The book I consistently recommend to everyone is Dr. Nicole Forsgren's book &quot;Accelerate,&quot; and There was one surprise in Nichole's book for me, continuous delivery and success was loosely Which, given what we know, it seems ludicrous that biggest predictor would be continuous integration. once if everyone's checking into mainline at thing that everyone just kind of hones in on. But services are set up, I think it's testament One thing I consistently see at introduce a new feature into a product, you know? And people will say to me, oh, you know, get these things to work better has you considered doing some DDD, and thinking will own this one thing within a boundary, this I think that touches on several problems. One of that engineering is an important idea. We've kind in our discipline, and we've talked a little we either assume that engineering means a kind of other hand, we assume that engineering just means Engineering in other disciplines is basically to produce better software faster, whatever that I'm talking about is the stuff that Now, one of the things that you just that Forsgren and colleagues talk about, is one of of those teams. The ability of those teams to make parts of the organization, so autonomy of the a development organization that is modular, and encapsulated within a team. That means that of concerns so that each... the thinking of to be an information processing unit that's more And so, the architecture of our system is mirrored sometimes think about than even Conway's Law. There are, at the roots, there are some really, I think, profound ideas. You know, when we you know, feedback is vitally important. and efficiency of feedback is the way of their engines, it's like balancing a broom, The modularity of our teams is one of the tools these are the tools, the tools that we can use to And if we use them as guidelines in whatever it or defining what the boundaries for a team focused on and so on, these are the tools Yes. When I look at modularity, cohesion, and separation of concerns, team design, as well as service design. One of the other signals I look for have really stupid names, like we're the or we're the... what I see the other day? you know? That suggests to me straight away that it does not have sole ownership of a thing that you have, I don't know, four or ten more teams to give them ridiculous names because they have function, you know, you own this, you're empowered As a result, companies will say to me, &quot;It's teams, Steve,&quot; and I'm kind of sat there thinking, Can you just go down to one, and then move all the other teams over. I mean, how often company, and the company is, like, &quot;Dave, we've and you're like, but you can't because you're things are just going to break louder and quicker. One of the reasons, one of the many reasons is that the stuff that we do is bloody difficult. particularly with a big team, is an incredibly to try and marshal these armies of intelligent and all of the pieces need to work together. at the limits of the kind of human I think. So, we need to use a tool... we need to It is very difficult, but if there's one thing hopefully, it's that we need to Because you're shooting yourself in the we're going to run everything in, I don't know, we stay cloud-neutral. So, we're not looking to extra complexity, you'd have to be scanning weeks When you could just take any provider, pick one just do all of it for me, and I'm going to think my teams and services for success. Teams didn't was that phrase in British politics years ago? Yes. I think that's incredibly common. patterns of doing things. I'll quote a fairly the author of &quot;The Mythical Man-Month&quot; wrote a &quot;There's no silver bullet.&quot; And in which 10X improvements in software development that, There's nothing that's going to give you I think that's fair that there might not be any bullets. There are bullets that are, you know, We know that Waterfall just doesn't work, we building teams with hundreds and hundreds thing doesn't work. We know these things. We we know... there are things that we know. So at software development, there's no 10X for you a 10-times improvement. But there are loads the time where I could give them 10X like that. If where you can get more than 10 times improvement. continues to be right all these years later, wouldn't recommend one thing to them, right, I would recommend a whole bunch of things, but that would give them a 10X improvement for many version control, you're going to get 10-times version control. Forsgren has talked about for so many years, which has companies that aren't storing code in version people you meet and talk to in IT aren't the people in the worst of situations are in basements yelling at them and they're like, can we please Yes. Yes. Very occasionally, I still meet So, there's a lot of stuff that we know... So, don't think as an industry we've been very good ideas. We just kind of build this ever-expanding the crap ones. That's partly because we don't Yes, and there's also the I'm old enough now to see people doing stuff, Yes. version control and when I say to people there'll people look at me as if I'm cuckoo. They're like, about the last one". "We said Subversion was Steve". I'm like, but we've all centralized in that? All we've got now is cheaper I saw a funny video on YouTube yesterday, as monorepos. Which I think is fair enough. I think But it just amused me, though that's another Oh, tes. sound like a grumpy old minger, we should... Yes. But I had me and a Canadian guy, Derrick Lewis, lots of clever packages import rules, and I can't remember. It was a long time ago now. We only had two teams, three teams at one point. the only companies that have monorepos working and money in that custom tooling to make it work, they don't work. Of course, they don't, because years of organizational toil tied into recommend a monorepo to anyone now because I I think the time you have to put into it to separation of concerns. With monorepo, separation Yes. I will have to convince you over a beer You can try. You won't persuade me of that. it will be really good... no, no, it won't. You're If there was one tool if I put a gun to you to and it's not a version control tool, what would people are going to want to hear something, they're going to want to hear Kotlin or something that, but you could recommend Trisha's book. No, I do still use IntelliJ, but I wouldn't because I don't believe this is about tool some genuinely great software developers during some of them not. My observation is that if a language or a toolset that they'd never It's not about the tools. The tools are important, and you can do a bad job with any it's the way in which you wield ultimately understand and solve the problems solve using tools better, that's not the answer. we have made progress with the tools. You was the first IDE that really started supporting simple way, that allowed that to become One of the attributes of the way that the importance of making progress in small steps. you must make progress in small steps to Tools that allow you to do that kind of thing but there isn't some tool that's going I know. I know. I wanted to wave I agree. I do think that in the last 10 years me for a magic word, and when I say those magic I've let them down, or that I'm keeping a secret there's no... you know? You're right, you got first thing about .NET, but given enough time, know how to test, I know how to think, I know contact if you want it done in a day, but if you I guess when I think about it, I think So with Git, it did fix some things that I think about two years ago, I went to meet Kubernetes, and they started talking about GKE. and say, thank you, Google, for GKE, and I was The thing before G Docs was terrible. They seemed maybe a developer still, was thinking G Suites that I recommend to everyone where the tool before disappoint me now. Even something like IntelliJ Kotlin has its flaws. I wanted to love Kotlin, another language tomorrow, Dave. They keep coming. invented in the '50s because I remember a couple of years ago, you were and I'm really excited it happened. What happens ahh to kind of book like I'm watching everything, what comes after this now? Because you've really big book that kind of we what are you going to build on top of this? I think that I hope that the ideas in this book parts of the discipline, and help them to build adopt the kind of approach that I describe you know, dealing with it more efficiently. I I am increasingly moving towards the direction, because I don't write software professionally I'm doing it to demonstrate ideas or to a similar light to people, you know, the science I'm talking about it, describing it... Dave Farley: I think it's an important thing so I'm doing that. I want to be able to try and in a way that is genuinely helpful to them. But to try and move... People talk about post-agile flush, and I think that's a mistake. I think from the kind of plans approaches that think agile was a necessary step, but it's not Newtonian mechanics with general relativity. built on... you know, it explains everything that Newton mechanics was correct within that frame but what comes after that? I think I'm not a big fan of the craft. I think it gave looking back to what was before, the Software correct, but not correct enough. The I think, is because underneath, there's this kind some scientific ideas. I think that if a little bit, focus on it a little bit more I want to try and communicate that. So, ideally, I'd like people in universities to start that I'm talking about. Because at the moment, I couldn't, if I'm honest, I couldn't see the science or software engineering, and somebody that validity as a software developer. I would probably probably better at problem-solving than somebody time. You'd have to brainwash them to kind of work organization. But at the moment, our educational effectively trained to do great jobs. I'm not saying anything like that, but we're too focused on tools and technologies and so on, those kinds of things, I think. I don't know whether I've got another book in where I'm thinking... Yes, I'm pleased to have written it, new at the moment. But one day I might. I enjoy having written,&quot; which is definitely big ideas in your head in one book. I think it's think people don't realize, you know? But I'm not rag you deliberately shoved in front of me, that like Craftsmanship, and... About Dan North saying craftsmen are romantics Like, craftsmanship, please, I'm stopping... no, no, no, we're not going up to? Let's maybe wrap up with something going to mention DevOps, because that would people would be throwing stones at me next time so, if we just think about the time between book, because they're the two big books of yours, on lead pub, which I thought was awesome. Aside like between the two books, like, what big really surprised you? So, I'll give an example. &quot;Who would have known that You Build It You And now, I'm so far into that I find it as almost around engineering and around delivery of that was the thing that I would kind of really really homed in, like, incidence as a tool emerged between the two books in our industry I thought it would be, and you know, it does an No, I wouldn't say nothing. I think we do make don't think that we make as very often. I think that it's usually smaller The one that you rolled out is the obvious one, idea in the cloud that I think is important. And there's more to do, but it is to separate I think that one of, you know... there are some I think some of the big ideas have been yet. One of those, to me, is actor-based where we met and we worked together, it was telecoms exchanges are built with actors, and they been kind of a minority sport for a long time, I next steps rather than what's happening now. And than anything else that I know, it gives you more from the essential complexity, so it's a natural In terms of, I think, looking back, it's hard because I'm not... I suppose I'm unusual different technologies. I tend to use and do quite a lot of work myself on some things. about an open source producer who's sabotaged his of change because I probably wouldn't be using stuff I was using would be bigger, and would be what are the big steps? I don't really care very evolution of languages is not a huge bit. I think and I think that, you know, you know, an important... you know, one of the big it's been around for longer than that. because Jez Humble famously said to me. I think that the tooling around continuous has dramatically improved. And I think maybe is important is that we now assume, on the that things like version control, or the ability which was something that Jez and I &quot;Continuous Delivery&quot; book, that we didn't... a good enough job on those things. And some Yeah, and the ISE has come a huge way, and I think to, like, operational concerns. Okay, shall we wrap up? What's the... what's take from this book, Dave? I think I know what The one message that I'd like people to take a creative act, and that engineering is creativity. And I don't think we but I think it's true. If you wanted one it's working in small steps. You know, make progress in small steps, sustain and support your ability to do that. I like that. That's nice, yeah, thinking about the well, it's goodbye for me, and it's... this sounds Thank you very much. for complete software delivery. It provides and DevOps teams to release applications Thanks.