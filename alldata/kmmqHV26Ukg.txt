hey a community Spotlight outperforming rust DNA sequencing parsing benchmarks by 50% with Mojo okay look at this this is my guest blog by Muhammad Mauk Mohammad uh is the creator of Mojo fast trim a Mojo Community project Mohammad received 100x benchmarks improvements over Python and 50% improvement over the fastest implementation in Rust by the way it's not surprising if you're doing DN DNA stuff you know for a fact you know for a 100% fact that there's a for Loop in there you can't you can't just be writing for Loop in Python okay you can't be writing four Loops in Python okay that's not that's not what Python's for he learned the language quickly cool story bro and it only took 200 lines of code for the first implementation read on for details for the extra optimizations he's applied to beat the fastest existing benchmarks learned yeah learned is past tense it's past tense learning he learned it imagine showing something as fast but comparing it to python yeah dude Python's crazy that's a crazy one the era of big data in bioinformatics the challenge of for bioinformatics in modern day are rooted in Big Data manipulation thousands of multi-million dollar DNA sequence machines are working non-stop thousands of multi-million dollar that is like that's a crazy statement billions of dollars most people say billions but man this is thousands of multi-millions non-stop in fields of Bio uh biotechnology medicine and biomed research the annual sequencing data size is expected to be up to 40 exabytes of raw sequences by 2025 that's 20x the data uploaded to YouTube Every year that's a lot of data that's a lot of data so this makes sense a 1% Improvement is insane that's it's a lot that's a lot of data uh While most of the final analysis is carried out in high level languages like Python and R the world of bioinformatics is powered by an underlying uh under layer of black magic highly optimized tools written in C C++ and Java say what now that pre-process and summarize large amount of raw data Java did some did someone just sneak in a garbage collected language uh this creates two World a two world problem or at least it's not a three body problem where bioin uh bioinformaticians uh who are not skilled in low-level languages are prohibited from understanding customizing and implementing low-level oper uh operations yeah uh I'm pretty sure if you're a bioinformatician which sounds like a madeup word you could probably learn a low-level language that's I mean literally smart people suffering from skill issues that's how I read that statement is literally just like due to skill issues in addition typical bioinformatic pipelines are a mixture of bash Python scripts called into pre-compiled binaries along with analysis logic itself it's be it's becoming increasingly complex and frustrating for a new and experience bio bioinformaticians this is the same issue that a community AI is facing skill issues skill issues and tooling issues Mojo one tool to rule them all I first heard about Mojo from a demo video by Jeremy Harward its value offer is simple a pythonic language that allows the programmer that is a strange phrase that I just said a pythonic language by the way the idea that we're going that there is a class of languages called the pythonic languages I mean I've heard the term c-based or ml-based but I've never heard pythonic based that is like it's Unique it's a unique way to describe a language uh that allows programmers to optimize a at a much lower level to unify the fragmentation in fields such as AI learning Mojo was relatively easy for me coming from the python I got used to the extra syntax in only a few days I decided to try Mojo in a serious project for low-level bioinformatic task the fast Q parsing and quality trimming fast Q is a basic format for most DNA sequence operations incorporating both the Geon the genomic sequence and confidence scores in the machine in each base call it is a simple format to parse with most records looking like this I I really do hope that he used a a regx to parse this you know what I mean you know what I mean yeah definitely 100 too soon too soon Cloud Flare still reeling uh however typical uncompressed files are one to 50 gigabytes uh an average sequence heavy study could generate uh north of a one terabyte for a single file performance is critical in parsing and data manipulation I tried to I tried to write a simple parser that would read a chunk of file as a string split the string on new line separators take four uh take each four lines validate that they are consistent and correct uh fast Q record and return it rinse and repeat until reaching end of file okay seems reasonable on the first try Mojo fast trim achieved 8X the performance of Python's seek iio I was pleasantly surprised with the development time my code was still pythonic by the way if you use this word in a stack Overflow question you will get more up votes just so you know I did try to Farm Credit One Time concise at around 200 lines and using features the average python developer would understand in quality trimming where lowquality bases are removed from each read it achieves 50 to 80% % of the industry standard uh tool cat Adept that was a surprising level of performance for development time I put into the project is X or why more pythonic idiomatic rust canonical JavaScript dude idiomatic I just hate that word it just makes me want to die uh going down the optimization Rabbit Hole uh the most powerful benefit of Mo Mojo is that it gives you access to low-level optimizations the nent state of Mojo standard Library meant that I had to write test and Benchmark some functions from the ground up Mojo's first class support of sim D nuts uh vectorization was really helpful and surprisingly intuitive nent yeah nent means like early on state right isn't that just means early uh especially of the process of organization just coming into existence or beginning to display signs of future potential nent it's what smart people say instead of early you know like like I would just say the early state of Mojo but some people use the nent state of no because you are smarter if you use bigger words here is the implementation of the vectorized version of the function to find the index of a new line separated in Mojo okay always in line all right do a little bit this love the dtype got to get that dtype uh in tensor T generic T chart int 10 start int zero int four I and range all right start in tensor Char return okay I mean that's very simple code to I mean I can pretty much guess everything but I don't know what a tensor is I I I don't know what that data type is but okay simd vectorization all right all right oh gosh here we go all right same same same header simd width equals simd width of T length equals element start this align start math okay okay for record aligned with simd load okay we load it up we mask for this one and re uh mask reduce or all I I I don't know what those two mean but we're doing we're doing a little something in here tensor is a faty ml array okay okay interesting bit mask I know it's doing a bit mask but I don't know what it means to do the mask right I don't know how V equals Char reduce or I don't know how this is a mask right I don't I I don't I don't there's some there's some operation here that is happening that I don't I don't know what it means you know what I mean like the equal sign is not just like a simple equal sign it's it it must do an equal sign across a vector is that what it's doing and if any of those a reduce or just simply means I assume to go across that vector and see if there if any of it's true right is that is that what it's doing yeah across all elements okay yeah got it got it okay the vectorization version loads 32 elements of int 8 and checks the presence of a new line uh separator using a few operations in the following graph you can see the effect of s vectorization it provides a 4X speed up with the average of 3.2 similarly uh simd storing and loading from tensors provid substantial performance gain nice this is good this is this I mean that looks great the nanc means that I think you're probably measuring it too explicitly this feels kind of uh dangerous anyways in addition I explored optimizations from cc++ implementations I was concerned that no explicit memory buffer was allocated for the loaded chunks but Mojo compiler was already taking care of that and avoiding new memory allocations okay nice nice you like the white lines in the background yeah they're beautiful I like the white lines as well implementation of those optimizations resulted in 3x speed up and Mojo fast trim was on average 24x more performant than Python's SE iio in addition due to the control over reference and value semantics in Mojo I applied the fast parser version of the parser nice uh no memory copies are made during parsing and the individual reads are passed around references to the chunk uh to loaded Chunk in memory this approach implemented in Rust NE needletail parser although Mojo is still very young language my implementation was 50% faster than rust implementation on Apple silicon and 100x faster than seio I mean yeah he ran it once and that's that's cool I'm not going to lie to you you know do I I mean usually whenever you see local benchmarks you should just take this as a uh Direction not necessarily truth right this sounds like a skill issue well I mean they're saying they used the exact same they used all the same techniques that uh oh my goodness how how how do I leave this I'm pressing escape help me I'm pressing escape help me uh contrl C control d uh okay we got it I had to click I had to just click it turns out um please don't make models that pop up like that okay that's really annoying just just don't do that don't don't don't do that okay stop being clever because you're not clever uh for python programmers wanting to write more performant code Mojo is a great tool to try and easy to learn however the language and the ecosystem is still growing I had to use print to bugging to gain insight into the bugs I was encountering the debugger is still in preview and undocumented although they tell me it will be officially launching soon in conclusion I think Mojo can be a radical change for a wide range of python trained scientists and researchers across many fields by the way this is I saw an article I saw let's see on Twitter who said this um let's go uh Luca what's his name Luca who wrote the rust the rust in production book what's his last name Luca what Luca Paul Luca Paul Luca Paul Luca Paul Luca Paul he said something that I thought was really interesting um this right here rust is the Dark Horse of AI a few are talking about it yet almost everyone is using it the efficiency and fearless concurrency do matter when processing data of pades uh I think this is where he's going to go wrong honestly uh what I mean by that is that if Mojo is true I think Mojo will win just hands down and the reason why Mojo will win is because you don't change the Paradigm of any already acclimated and proficient individual does that make sense you just have to learn a slight bit more and you get immediately amazing performance and if it even is remotely on par with rust like within a error rate which they will clearly calculate it just means that they're going to use they're going to just use that I saw that tweet this morning and and my my first thought was I wonder how this is like I wonder what's going to be going on with uh with Mojo versus this I mean obviously Luca is an extremely talented engineer I don't even know why I'm not following him very very talented engineer very great I love his book he has one of the best rust books I've ever read in my lifetime which is zero to production I'm look I'm Shilling it he doesn't even know I'm Shilling it great book honestly it's a great book uh so I mean I trust that he's he's very smart about his opinions but uh I just don't see uh rust tooling is far superior it it could very well be but you still got to you still have to make the assumption that if given a choice make your codee as fast and learn virtually nothing new or make your code as fast and learn an entire new everything what do you think people are going to pick you got to also remember that AI is like uh John carac just said this here John carac just said this uh John carac Hero by the way great guy absolutely think he's one of just one of the best uh he just said it was like a big one here I retweeted it I retweeted it he twe dude the man tweets like I do can you just can you just shut up and let me find what you're trying to say so when he comes down to here working on AI I have literally written hund little literally hundreds of little experiments more individual programs than I had in Prior two decades so he's working in Ai and he's written more in the last little bit of time than he did in the two decades previously for these little tools and these little individual programs and so the reason why I bring this up is that if you want rust if you think rust is going to be the successful one the reality is that this is the primary Moe of operation and so if Mojo compiles fast and it looks like a language you're already familiar with and it is really close to being of the same speed I just I I just don't see how you're going to make the cell I just don't I just don't see how you're going to make that cell no cost of admission it wins yeah anyways science labs are not uh fo uh going to switch to rust quickly yeah because the problem is Russ rust big sale which people often misunderstand is not Fearless concurrency I do not think the currency is that great yes it's somewhat Fearless but it's not Fearless because it's just Arc mutex everything or or or atomics or you have to protect it in a certain kind of way right the thing that's going to make it the thing that makes Russ so good is that it has all this memory safety and when you're doing a bunch of this ml stuff I don't think memory safety is your Chief concern it's just being able to process quick enough is your like a quick efficient easy experimentation and being able to process fast enough right like to me that's that's just says like that's that's not that's that's not necessarily a highly aligned rust or uh that it doesn't it doesn't feel like rust is highly aligned with what ml needs it's mostly aligned and it could get there rust has amazing macro system and it could most certainly get there but I'm not sure if it will get there in the sense that if it has Mo like I just don't think it's like quite the right use case uh which is let's see hold on Mojo uses mlir successor to llvm which is specifically optimized for ML Tas so it makes sense it' be faster yeah this makes this also makes perfect sense it's a compiler and everything designed to be fast for this one task right anyways super cool uh I mean I thought this I I think this is really interesting I think people should think about this stuff a lot more um oh no uh they do no checks yeah but that's that's that's a benefit you can do no checks I'm the author of fastq parsing Library uh let's see and the maintainer of the Julia Rex engine oh you got to like link me to the one that I I don't really want to do I have to read all this like hey I'm happy for you uh the thing is is that if you don't do any checks but your program runs successfully and correctly every time then I don't care if they are identical operations and at the end of the day they both do that then yeah all right the tldr tldr is that Mojo implementation is fast because it essentially a meem Char M cars four times per read uh to find a new line without any kind of validation or further checking uh the M car is manually implemented by loading simd vectors and comparing uh to a zero yeah to a 10 effectively and continuing uh if the result is all zeros this is not Ser let's see this is not a serious fast CU parser it cuts so many corners that it uh doesn't really make it comparable to other parsers although I'm not crazy about needl Tal's somewhat similar approach either okay I mean that's that's cool okay so reasonable can we all agree that that's that that that's a reasonable take so let let me ask you this one let's say that when it's all done it's all said and done Mojo is within spitting de distance of rust do you think it's going to do you think it's going to be a problem I mean and also he and also the author did say that after finding the new lines he does a postline processing to validate it Mojo is a stupid name Mojo is a stupid name I'll give you that rust is also a stupid name because it's named after a fungus not the stuff on metal and everyone thinks it's named after the stuff on metal so I mean really if you think about it go is the only normally named language JavaScript is a stupid name Julia doesn't make any sense okay I I am curious though I am curious what because you know how many times have you seen this by the way how many times have you seen effectively this where someone sells a faster version of something that's not fully complete right like so bun bun does this with their asnc handling in node there's a lot more Hooks and stuff involved in async handling that bun simply doesn't have and then bun sells itself as being a faster version of node but it just simply doesn't do the same checks like this is a pretty this is a pretty old uh programmer Pastime which is pretty interesting I implemented the same algorithm in less than 100 lines in Julia and were 60% faster than the provided needletail Benchmark beating Mojo I'm confident it could be done in Rust too interesting so Julia is really trying to get in here isn't it a skill issue okay well I mean this is all interesting so it sounds like I mean it honestly sounds like we got Julia in the mix Julia is the one that does the full implementation and the rest cut Corners yet they're still used and people accept them so I'm not I'm not perfectly I I don't understand this does that make sense I don't understand the fact that this needle Tales has a similar approach and it's used like what's the what's the point what are these checks doing that uh these checks aren't doing that make it okay I don't I I don't quite get it it sounds like bioinformaticians aren't good developers who would have thought that Julia yeah Julia uh yeah Chris lner has a respect for Julia dude everyone that I know that does Julia loves Julia that's all I know anyways this is super interesting I mean it goes to show it dude we see this you see this over and over again that anytime you see a benchmark just be wary about it I mean I think that's the biggest takeaway when someone says something is 50% faster than another thing you got to remember that at the end of the day you can do any type of low-level operation in Rust you can do the same low-level operations in C therefore there really shouldn't be a difference in speed unless if there's some sort of uh compiler like difference right or how it's being translated different right like that's they're all technically going down to like the same level where it doesn't make sense like you you can never say that go will be as fast as rust or JavaScript will be as fast as go or Ruby is is neat like you can never say any of those things because they each have their own like kind of they each have their own bands of of runtime is saying 10x faster the most realistic estimate of every single case being 50% faster yeah that's the Dax tweet I I believe that's the Dax tweet or his co-founder tweet which is when something is when something is 10x faster you say it's 10x faster when something's 100x faster you say it's 10x faster when something is 50% faster you say it's 10x faster and if if something's half the speed you say it's 10x faster you just say Universal as a developer you just say 10x faster yeah but goes pretty damn close to rust Andy it's not damn close it's it's not for simple stuff sure but once you start getting into a bunch of object allocations and deallocations it is different it's it's it's it's different and that's fine right that's fine it's close it's very close I wouldn't say it's close enough that's that's a statement that has no meaning because you has to Define you have to define the task in which you're doing something with anyways I like this article it was interesting good thought experiment good thing to remember I think is really cool to see where Mojo is going to go I think everybody should be excited where Mojo's going not necessarily the specifics we're seeing right now uh you know in the next five years will you just hear everybody talking about Mo Mojo you very well could like that very well could be the future is that Mojo is the new one that everybody talks about or maybe they just call that python I don't know the name is the primagen