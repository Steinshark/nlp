in this video we're going to be talking about a concept called fuzzing in Python and it's essentially a way to brute force and test your code Until It Breaks so it's actually a really interesting concept and it has a really interesting name so I thought this would be a great concept to share on this channel now to understand fuzzing you do need to be aware of the basic concepts of unit testing or just testing code in general because fuzzing is used mostly with testing and it's going to test a function with a lot of different inputs Until It Breaks so what I'm going to do in this lesson is show you a sample script of fuzzing so that you can use it in the future in case you want to test your functions so first we're going to import random and we're going to import string now there are packages out there that do fuzzing for you but we're going to create a custom implementation which is a lot simpler and in a future video we will probably go over one of the packages but in this case we're going to first create a function that generates a random string so Generate random string and it's going to take a length of type integer and it's going to return to us a string now we need to define the characters of type string which is going to equal string dot ashy characters plus string dot digits plus string dot punctuation so those are the characters we want to use when we are testing our strings the more variety of characters you have the bigger the chances that you might be able to break your function but include all the characters that you're expecting to use in your function then we need to create a result string so result string of type string is going to equal an empty string dot join and we're going to call random choice to get a random character from the characters and add the characters for underscore in range of the length and then we're going to return the result string now if we actually use this function and we print the generated string of let's say 10 characters and run this you should get something back like this which can almost be seen as a random password generator so that's the first function we need for this all to work next we're going to create the fuzzer so here we'll type in Def fuzzer and we will return a string and the fuzzer is going to be a generator because we want to generate unlimited or indefinite amounts of these random strings until one of them actually breaks the program and it's not really convenient to create a huge list so we're going to create these elements one at a time so here we'll type in while true we're going to yield the Generate random string and we need to type in random dot random integer from the range of 1 to 100 so these strings can be as short as one character and can be as long as 100 so that's going to be the fuzzer that we will be using next we need a function that we're actually going to test and this can be any function you want but it does require an input and an output So Def sample function which will take a string or an input string if I can spell that input string of type string and it will return to us an integer so the first thing we'll do in here is try the following code and we're going to type in if three exclamation marks in input string then we're going to raise an exception and we're going to pretend that this is something that breaks our program and here we will type in that input but if it does not run into this error we're going to return 0 because the function exited successfully then we also need to accept so we're going to accept the exception as e and here we can print that there was an error so we know what it is and the error is going to be the error message then we will return one because it was not a successful function execution so again fuzzing is going to help us put an indefinite amount of inputs into this function so we can test it until we break it and the point of fuzzing is to Brute Force ear functions until you break them because sometimes it's not that easy when you're creating unit tests to know exactly what will break it so you might have maybe four or five test cases for a function but you might be missing one or two scenarios so fuzzing is a great technique for trying to break your code even further so you can avoid having these issues further on down the line now let's create a main function where we can put all this code together so you can actually see it in action and first we're going to have I of type integer which will just be looped through so for input string in faza so we're going to retrieve one element at a time indefinitely we're going to increment I and this is not needed this is just for me to show you how many times we've looped through this and we will type in that the result of type int is going to equal the sample function with the input string so each time we Loop through this we are grabbing an input from the fuzzer or actually a random string that we have generated that can be between 1 and 100 characters long so we're going to do that indefinitely until we break this function and the way we know we broke it is if the result is equal to 1 that we can print that first this was a run number I so we have a good idea on how many times it ran and because it's going to be the input string so we actually know which input broke our function then we need to break out of this and finish the loop so we can exit the program then all we have to do inside here is call Main but with all that being put into place we are now able to test the sample function an indefinite amount of times Until It Breaks and in this example it's going to break as soon as we run into three exclamation marks so as soon as the program generates a random string with three exclamation marks in a row it's going to break our program and if we run this it's going to run for a few seconds and we're going to get the error back that there was a bad input and it's also going to tell us the cause so at run 13 478 we had this input string and inside this input string we generated a random group of characters that had the three exclamation marks in there which is something that broke our program and each time we run this we're going to get a different result because of course running into three exclamation marks depends highly on chance but it does happen and it will crash our program for some reason if we do that so it's good that we use the fuzzer to catch that and this is a very simple example just to demonstrate how you can use fuzzing of course your functions might be a bit more complex but it can be a very good idea to test your functions via fuzzing if you want to make sure that they are robust and can handle any kind of input in any kind of scenario but with that being said that's actually all I wanted to cover in today's lesson I do want to mention though that I've recently created an Instagram page dedicated to python tips and tricks I'll be posting a lot of videos there and a lot of good advice when programming with python so do check it out I left a link in the description box down below I would be happy to see you there because it will help you master python one day at a time and you will learn some really cool tips and tricks that you can use in the future when you are programming so with all that being said as always thanks for watching and I'll see you in the next video