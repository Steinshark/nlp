let's do this one why no build system this is actually something I'm very interested in so when I I used to work a lot on Chrome Dev tools and one of the big things about Chrome Dev tools is that there was no build system effective there was no transpilation stage there's only literally catting some files in a certain order to deliver a singular artifact I thought hopefully I'm gonna like this right there's no way I'm gonna have a good time with this uh it's j it's just JavaScript gross like I only use it typescript I surprisingly found it pretty dang okay right the amount of time the amount of concentration and things that go on when you don't have a separate build system is really nice right it's really really nice I genuinely liked it yeah I built a lot of things for Chrome Dev tools for Netflix right I've overridden it uh helped communicate with it uh built-in CSS selectors for rectangles we draw on the screen um did some other things uh voice voice to text stuff uh just building in all the Chrome Dev stuff like read because we just we you know we have V8 in in the television and so it's like well we got to build out the Chrome developer or the Chrome debugger protocol the CDP right so I've helped on some of that it was a lot of fun it was neat it was good times Netflix by the way all right so why does the htmx not have a build step a reoccurring question from some htmx contributors is why hmx isn't written in typescript or for that matter why HTML lacks any build Step at all the full HTML source is a single 3500 line Javascript file okay if you want to contribute it to htmx you do so by modifying the htmx file the same file that gets sent to the browser in production give or take minification and compression this feels completely backwards can we all agree this feels like a literal backwards world right this feels backwards it feels backwards why though I do not speak for the hdmax project but I've made a few non-trivial contributions to it and I have been a vocal advocate for retaining this no build step every time the issue has arisen from my perspective here's why htmx does not have a build step right once run forever okay okay let them cook hey let him cook also hdmax is still like the greatest UI Library I've ever used um the best reason to write a library in plain JavaScript is that it lasts forever this is arguably javascript's single most underrated feature while I'm sure there are some Corner cases JavaScript from 1999 that ran a Netscape Navigator that will that will run unaltered alongside modern code and Google Chrome downloaded yesterday that is true for a few programming environments it's certainly not true for python or Java or C which have all had versioning mechanisms where opting for new feature language features will force you off some deprecated apis of course most people's experience with JavaScript is that it ages like milk reopening a node repository after three months you'll find that your project is mirried in a flurry of security warnings backward incompatible Library upgrades and a front-end framework whose culture Peak was the exact moment you started the project and is now widely considered detected as someone who's lived through classes higher ordered components the beginning of functional components use effect um uh should component update as someone who's been through a lot of just react changes this emotionally hits in a place in which is painful and tender okay it's still tender to this day I'm still tender okay tender okay tender moments tenderly uh who's the blame for this situation remember that time they decided we're going to run use effect twice in debugging and debug mode I'm still tender like again once again I'm now tender I'm just I'm thinking of all the things that have emotionally caused me problems throughout my entire lifetime and this is one of them who's to blame for this situation uh is for someone else to decide but in any case you can eliminate this entire uh problem class by not having any dependencies Beyond JavaScript runtime okay that's actually a pretty fair statement I I agree with what's being said uh a popular way to write JavaScript today is to compile it from typescript which I use frequently as an example because typescript is probably the best reason to use a build system I'd agree I'd agree that typescript is probably the best reason to do it uh the obviously using the LSP is incredible right it just works way way better than anything else but you also have to I guess you do have uh you do have Js docs these days that's been something I really want to invest more time into is figuring out a good set of like Lewis snips for a little code Snippets and um and JS doc stuff and see can I create something that I can just run in node always that just works you know what I mean they use a htmx DTS instead of okay okay that's also kind of an interesting approach I you know every single time I use DTS it always ends up being a pain in the ass at some point there's something I do wrong some build system that just does not work anyways whatever whatever slow down typescript does not run natively in the web browser so typescript code is not protected by ecmas fanatical Devotion to backwards compatibility like any dependency new major typescript versions are not guaranteed to be backwards compatible with the previous ones they might be but if they aren't then you need to do maintenance if you want to use modern development tool chain maintenance is a cost paid for with labor an open source code bases are the projects that can least afford to pay it it's a great statement right here this is a great this is a great statement right here opting not to use a build step drastically minimizes the labor required to keep htmx up to date this experience has been borne out by intercooler.js the predecessor to HDMX which is maintained indefinitely with as I understand very little effort when hmx1o was released typescript was at version 4-1 with intercooler released typescript was pre 1.0 with code written in those typescript versions compile unmodified in today's typescript compiler version 5 1 at the time of this writing Maybe maybe not but hmx is written in JavaScript with no dependency so it'll run unmodified for as long as web browsers remain relevant let the browser vendors do the hard work for you this is an extremely compelling case so there is something I I do want to say something about all of this it's good you know something that I've really struggled with as somebody who's had to developed a few tools inside of Netflix is that there's kind of like these three stages that you have uh you have like a nice build system that can kind of keep things running live updating all that and it works pretty good and that's very very nice and you build it you run it you're using the compiled version as Source maps and everything is great and so I like that I'm happy about it sometimes I use TS node or swc to run like a quick version when I don't want to do any building or anything and just run the thing itself also really really nice but at the end of the day you deliver some sort of executable and that thing goes and it runs and you get these errors in which are the minified code and Source maps are a lot more confusing to include when it comes to executables and all that and it just becomes this it just becomes really annoying like there is something about this everything they're saying for a sufficiently small tool that I could almost find myself liking like for me to actually commit to doing a three thousand four thousand line file feels emotionally painful but there's also part of me that there's other pain in the asses that do exist right and so if you have good navigation is it better it could be it very well could be I guess I'd have to rethink about a way to do something like Harpoon right in-file markers would become increasingly important um we'll see I'd have to really think about this uh I just don't know yet I don't know it it feels very contrarian to my opinions on software but I do want to be real for a second just because something feels contrarian doesn't mean it's worse or better documents symbols yeah but I don't want to have to I don't like fuzzy finding every time I want to go somewhere I I like things that are a little bit better than that right I like to be able to have like a marker that sticks with the function that moves but there's this idea that when something is different than what is considered like modern or good it's therefore bad um or if it's considered outside of what you're really used to it's considered non-dx but often you know there's this there's this experience where when you try something new like a good example is just getting good at Vim right uh getting good at Vim it makes no sense why you should ever want to use this right it doesn't make any sense at all to enjoy Vim from just like a purely outside looking never had any experience in it but once you use it you realize by going contrary to what is natural which is to use a mouse which is to navigate and you know you don't have a keyboard Centric thing it's very unnatural to think that way it's much more obvious to go I want to click here I want to edit here I want to click here I want to edit here right like that kind of experience is a much more natural and obvious way you'd want to edit a file and so by undoing that you actually get huge gains and so as all things natural the best you know how often should you re-evaluate what you think is best I don't know you know because right it's it's very hard for me to go against The typescript Experience just because of how good a lot of things are with it and how many times my bacon gets saved but is there better Alternatives like you said there's a DTS file inside the htmx thing that makes it pretty much work maybe maybe that's the experience I'm looking for is the JavaScript DTX kind of you know in between maybe it is JS docs maybe there's something that just makes life a lot better I don't know yet right like I I do need to invest in this more I need to build a real project using a jsdoc but I've just been honestly I've just been too afraid to commit to it with work just because it's a lot of work when you need to undo something you know what I mean yeah it is true that the typescript developer experience DX is better than the JavaScript developer experience in many respects it is not true that typescript DX is better in every respect and the tendency of software Engineers to view progress as a uh teleology of capability rather than the choices with trade-offs sometimes blinds them to the cost paid for the DS aspects like they like I feel like maybe I'm just such a boomer at heart and that's the way that's the reason why I love htmx maybe that's why maybe that's why maybe I'm just too much of a boomer uh for instance a small trade-off you make for using typescript is that compiling uh it takes time and you have to wait for it to recompile to test a change usually this cost is negligible and well worth paying but it is a but it is nonetheless a cost this is true a more significant cost for using typescript is that code running in the browser is not the code you wrote which makes the browser developer tools harder to use when you use typescript code uh throws an exception you have to figure out the Stacked Trace with JavaScript line numbers and JavaScript function signatures and so forth maps to typescript code you wrote you can you know you can use maps but I've I've not 100 had a great experience with maps and I think everybody can agree to that Maps work most the time but there's time when Maps don't work and they're super annoying and then yes then you also have like webpack which webpack has an entire other ecosystem going on there that can also be kind of a pain in the ass when your uh JavaScript code throws an exception you can click straight through to the source code read the thing you wrote set a breakpoint the debugger this is tremendous DX for many younger web developers who have never worked this way can be a revelatory experience I've had some issues at times in which can be a huge annoyance right build step Advocates point out that typescript can generate sword there's me I'm making the argument for you which tells your browser what typescript corresponds to what JavaScript and that's true but now you have another thing to keep track of the typescript you wrote the JavaScript it generated The Source map that connects those two the hot reloading development server you're now depending uh dependent on will keep these things up to date for your local host but what about your staging server what about it in production what about it in CI bugs that appear in these environments will be harder to track down because you've lost a lot of information about where they come from unless if you have to build an entire system around it to keep track of builds and the maps and be able to actually have something that can go between them betwixt them we've built things like this at Netflix to be able to translate these things on the Fly by looking up Source Maps blah blah blah blah these are all solvable problems but they are problems you've created they are a cost this is a good point people don't consider this uh as like a thing the hdmax uh webpack I've used webpack the problem with Vite the problem with vita is say you want to make an extreme you want to make a single compilation item right you want to make a single bundle of typescript the problem is what does Vite use as its entry point in index.html what happen if you don't want an index.html what happened if you that's not what you need I find that to be one of those I I've looked a few times and I couldn't find anything that's like just build me a file that's named the same every single time I just want the thing I want bundle.js just make it happen Vite is all web it kind of like it's not really the thing you want you know what I mean right has a library mode yes yeah I just haven't figured out the library mode uh and I just needed something within like three seconds and so I just went and did a quick little thing I've used roll up a bunch roll up seems like a very great Library experience because it has all the things you need being able to interact and all that and it's pretty fast I I end up using roll up quite a bit uh the hmx DX is very simple your browser loads a single file uh which in every environment is the exact same file you wrote the trade-off required to maintain that experience are real but they are trade-offs that make sense for this project I think that's true I think that if you can say that your project is limited in size and scope which 3000 lines is not a big project it's a pretty small project overall you know what I mean enforce Clarity modulization is one of the honking great ideas of software modules make it possible to solve incredibly complex Problems by breaking down the code into well-contained substructures that solve smaller problems modules are really useful sometimes however you want to solve simple problems or at least relatively simple problems in those cases it can be helpful not to use the building blocks of more complex software lest you emulate their complexity without creating uh with without creating commiserate uh commiserate value commiserate value I don't know what that word means what the heck commensurate commensurate corresponding and size or degree in portion it's too sophisticated for me this is not grug commensurate I kept saying commezery commiserate a commensurate uh value uh this is not grub written okay this is not for my grub my grub brain okay new word unlocked I know I have a new word it feels really exciting I'm going to use it again commensurate um at its core htmx solves a relatively simple problem it adds a handful of attributes to HTML that makes it easier to replace Dom elements using the declare declarative character of hypertext requiring that htmx remain in a single file again around 3 500 lines of code and forces a degree of intention to on the library there is a real pressure when working on the HTML source to justify the addition of new code a pressure which maintains an equilibrium of relative simplicity huh I never really thought about that but yeah I could imagine that as you have a larger file the pushback on adding features and new things is heavy right like why would you want to expand that it's kind of an interesting little little observation I'm not saying it's good I'm just saying it's an interesting observation while the DX costs are obvious there is also surprising DX benefits if you search a function name in The Source value uh instantly find every invocation of that function yep so you don't necessarily have to have an LSP to find everything that has to do with it this also mitigates the need for more advanced code inspection the lack of places for functionality to hide makes working on HDMX a lot more approachable far far more complex projects use aspects of this approach as well squeal light compiles from a single file Source amalgamation though they use separate files for development they're not crazy which makes hacking on it significantly easier you could never build the Linux kernel this way but hdmax is not the Linux kernel Fair costs like any technological decision uh technology decision choosing a to forego a build step has advantages and disadvantages it's important to analogy acknowledge those trade-offs so that you can make an informed decision and revisit that decision if some of the benefits or costs no longer apply which is the advantage of writing plain JavaScript in mind let's consider some of those pain points introduced I'm very curious if they can really give me something good that makes it compelling to do this because right now I'm having a hard time saying like I like the things you've said so far but it's not compelling enough for me to do a single file for some small projects that are less than a thousand lines of code right it's not compelling enough for me yet though I do start every project in a single file and usually grow to like 400 lines before I go I hate this and I break it off into many little ones um maybe I just don't have a good workflow for single files maybe I just haven't thought about that enough you know what I mean I don't know typescript is a strict superset of JavaScript and our let's see and some of the features it adds are very useful typescript has types which makes your IDE better at suggesting code and pointing out where you might have used methods incorrectly the tools for automatically renaming and refactoring code are much more reliable for typescript than they are for JavaScript the htmx code does have to be written in JavaScript though because browsers run JavaScript and as long as JavaScript is dynamically typed the trade-offs required to get true static typing in the htmx source code are not worth it hdmax users can still have the advantage of typed apis declared with DOT TTS files okay well that's nice like that is one thing that's really interesting users get all the benefits of types implementers get none of the benefits but I still I still think doc files are a real win here it seems like doc files are the real win here because doc files do work with TS server and you have generics and doc files uh they are they're stripped out on minification so it kind of seems like there is like a real win here with J stock future versions of htmx might use doc I swear this is not pre-read uh to get some of the same guarantees without the build step other libraries like svelte has been trending in this direction as well in part due to the debugging friction that typescript files introduce I agree we read this and I completely agree with Rich on it uh no es6 because htmx maintains support for Internet Explorer 11 and because it does not have a build step on every let's see every line of hmx uh has to be written in ie11 compatible JavaScript which means no es6 I wonder if they'll drop that because that seems like you could get a much smaller artifact avoiding es5 right and Oddities of Internet Explorer 11. maybe there is something there maybe a suggestion maybe I'd throw this out to the htmx people maybe just maybe there's a way you could figure out how to have a build system specifically for IE 11 versus ie12 or whatever Edge htmx2 will drop by 11. awesome I like to hear that yeah I know to see the problem is Banks and stuff like that they're very far behind and so you can't just make these decisions I know people look at that trivially and say oh why would you ever do that the problem is not you it's other people right when people uh like me say that JavaScript is pretty good now they're usually referring to the language features that are introduced with es6 like async await Anonymous functions uh that must be a that must be a missed a typo it's not Anonymous functions you must be saying Lambda functions and function a functional array methods like map and 4-H none of which can be used in hmx source code uh while this is incredibly annoying and practice is not a huge impediment to the lack of some nice language features doesn't prevent you from writing code with functional paradigms would it be nice uh not to write some custom for each method of course but until all the browsers targeted by htmx support es6 it's not hard to supplement es5 with the fewer helper functions yeah this is true if you are used to es6 you'll automatically write better es5 that's fine IE support is going to be dropped in hmx2 at which point es6 will be allowed in the source code that will probably dramatically reduce the size no modules in court this point is obvious but it's well worth restating uh the aspect Source would be a lot tidier if we could split it into modules there are other factors that affect code quality besides tidiness but to the extent that htmx source is is high quality is not because it is tidy this makes doing certain things with hmx very difficult the ideal morph algorithm might be included in htmx2 core but it's also maintained as a separate package so that people can use Dom morphing algorithm without using htmx I don't know this one I don't know the ideal morph algorithm if the core could uh include multiple files one could easily accomplish this with any number of mirroring schemes such as git sub modules oof I always have I do every time I swear git sub modules are the greatest idea and the worst idea same time uh but the source uh but the chorus a single file so the idiomorph code will have to live there as well okay okay I really don't know how I feel yet about everything it's just that this is a very compelling thought so far for me right this essay it might be better titled why hmx doesn't have a build step right now as previously mentioned circumstances change and these trade-offs can be Revisited at any time one issue we're exploring at the moment has to do with releases when hmx cuts a release it uses a few different shell commands to populate the disk directory with minified and compressed versions of htmx.js patents are welcome to point out this is obviously uh that this is obviously and in some sense a build step patents showing their pet entry uh in the future we might expand that script to Auto generate the universal module definition or we might have a new distribution uh needs that require an even more involved setup who knows yep one of the core values of hmx is that it gives you the choice in a web development ecosystem that has the last decade been dominated by an increasingly complex JavaScript stack once you no longer have an enormous code base of front-end JavaScript there is far less pressure to adopt JavaScript on the back end this is observation like I want you to take a moment and think about this very very it's a very very subtle point but it's a very very true point right I I will tell you that now that I've built a couple small applications with htmx I have genuinely enjoyed the experience and I think that there's a lot of places I think there's most applications could use htmx more than they could use anything else and it has nothing to do with I don't want to write front-end code it has everything that has to do with I want to manage state in a sensible insane manner um you can write back-ends in Python go and even node.js and it doesn't matter to htmx every mainstream language has mature solutions for formatting HTML this is a principle of hypermedia on whatever you'd like howl I like that principle writing JavaScript with no build process is one of the options available to you once you no longer require an xjs or sveldkit to manage your spiraling complexity of a spa Frameworks that choice makes sense for HTML htmx development today and may make no sense for for your app too I like it I like it this is this is a very cool take icy cold right it's just like it may make sense for us it may not make sense for you so maybe you don't want to adopt this but overall here we're at here are here we are right I like this is front end the HTML stuff it is spell Kit's pretty simple I'd agree with that it's not that I don't want front-end code uh it's I don't want to write stupid front-end code yeah yeah I get that as well but I think the truest part of this is has everything to do with complexity of State Management and the solutions around it people don't realize exactly how much effort they put into State management using any of these applications there's there's just thousands of lines devoted to libraries to attempt to make State Management easier where you put all of your business logic in a series of functions and that's how you get stuff out just so it can be clean inside of a render function it's like you have to recreate because no matter what you do at the end of the day you have to recreate and duplicate logic all over the place a good example of this is like a delete button how do you know a user should be able to delete say a certain post um while the simplified way is that the server says okay I'm going to do a search I'm going to check for ownership when I find ownership I'm going to send down a can delete variable or a you know Boolean value then the front end is going to have an if can delete I will then add this button now just just remember that is a duplication of logic because the back end has to go can the user delete yes they can here's your signal for it the front end goes can you delete yes you can here's your signal for it they're doing the same logic they're just doing it in two different places representing it in two different views and so there's a lot of complexity around that and so it's just something to think about um oh no it's just something I think about a lot um of are we really doing the right thing and I feel like hmx is a very refreshing view on it modern front-end uh code continuously uh duplicates a lot of stuff for no real reason it makes um a lot more sense just to render The View as a template I do actually agree with this and that's what makes htmx is so appealing is that you can do a lot of that really quick I hate how react moves in favor of writing more business logic and components squeal components is garbage yeah I've been meaning to catch a live stream dig the YouTube content and also land it in software from a similar trajectory my man the name is I do like HDMX a gen