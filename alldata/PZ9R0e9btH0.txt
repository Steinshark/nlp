welcome everyone uh thank you for attending my talk uh the talk is called uh the floor is lava and it's about a journey I guess over the past year and a half of of trying to to teach C plus plus and trying to figure out what to teach and what not to teach and I tend to get a little bit meta and this talk kind of goes into all of my neuroses I guess around this so if you if you tend to go to my talks they often have lots of pictures and lots of graffiti and things like that this talk will have none of that and the reason for that is that um I decided to do it in reveal Js and uh I'm not really good at reveal.js but I needed to do data visualization so hopefully everything will work so the so uh for people who are not familiar the floor is lava is a children's game I don't know if you have it in your all of your countries but it's basically uh you pretend that the floor is lava and then you kind of jump from place to place and and the idea here is can we do we have enough safe places to jump uh in in C plus plus for it to be possible for a beginner to not fall into lava so uh about a year and a half ago I I dm'd uh and I asked them so do you want to make a training at teaching C plus plus I think he has regretted it multiple times since he is uh he is absolutely brilliant he's in the French national body uh he is currently in the Hawaii on vacation after the standardization meeting he is a client maintainer and so he's he's the one that knows C plus really well I'm really good at emulating being the student so so we made uh two trainings the first one is called uh mod C plus plus fundamentals and the idea of this one was that we were going to teach people who didn't know any C plus plus but they knew how to program so so we're thinking people who know Javas C sharp something like that and then we're going to try to teach them C plus plus but it's going to be just two days um then so so so it became a question of what are we going to teach them and how are we going to teach them and so the whole training is based around a game because we wanted to make something non-trivial and something that wasn't finished and so they would have plenty of opportunities to do stuff uh but at the same time it's only two days and you can only cover so much and for most of you you know that learning C plus plus is more like a a lifetime process than something you do in two days right and so so the question becomes how how do we do that and then we followed up this and we made another two-day training which is called C plus plus intermediate and that was that was kind of thinking okay you know C plus plus you know ish you've had some experience you've been working with it for a while okay let's let's level you up a little bit so they both of these trainers are not Advanced trainings uh they they are for the the absolute beginner and then like someone who wants to get to the intermediate stage um so the the question then became slowly but surely over like this period of time that how do you teach a programming language when the floor is lava when there's so many things that you don't want to teach there's so many things that you don't want your students to do but at the same time they have to be able to code right so so trying to to find your way in this landscape became sort of like a problem I kept thinking about and the thing is then it comes to the question do we even know what is lava and and we'll talk I will use the word lava all the time and I and we will get to it I made many many polls and I use the word lava and I have never defined what lava is and I I'm not going to Define it to you either uh so so my my theory is that you know in your art what is lava uh when you look at C plus and I can show you a couple of things you will be able to say that is definitely lava and that is definitely not lava and and so what I'm going for here is kind of a community gut feeling uh about where we want to go but the thing is do we even know what is lava so if we take a bunch of of features in C plus plus and and these are our features in C plus plus like look I played um I made I made I was working on this talk and my son comes to me and he goes mommy can I play with your game and I was like no it's not a game it's a serious work thing and he goes like okay mommy can I play with your serious work thing and I was like okay and then he starts to go and he was like Mommy I was like yeah it's like it has Collision detection and I was like yeah Mommy it's a game um so so this is my game um but but again so so we can take lots of features uh in C plus plus and then we can color them for lava right so so now we have like some things are our lava some things are definitely not lava but does it really get us to where we want to go [Music] um and and I I can't kind of concluded that it wasn't enough uh just to say this is love and this is not lava because a lot of things that are not lava are not beginner material um and then I was wondering maybe there are some lava things that you actually need to know so this became also like a meta problem so so what if all of the lava is actually just anti-patterns and you should never do them like maybe maybe all of the lava in the language are just uh stuff you shouldn't do you know that's possible maybe maybe this is like stuff that is deprecated is still in the language it still compiles but you should not do that uh and then if that's true then you can just skip it we can just pretend it's not there and just like we'll teach the other stuff the good things uh or maybe maybe the lava is only for advanced specialized use cases like not my job like somebody else's job like somebody who works on a compiler or in the standard library or something um and basically who knows what stood launder does anyway and okay one person two two people and and what is subsumption right ah there you go but who really needs to know maybe maybe there's ton of things in this language that we don't actually need to know and then it doesn't really matter if it's love or if it's not lava because it's not for us but the hope is and I think I think as a community we have wanted to believe that there is a modern subset of C plus plus that is safe for some value of safe right we want to believe that it is possible to to whittle down C plus plus to as a little bit of a bubble and within that bubble we are relatively okay and if we just stay inside of that bubble we're good and I think every single company tries to do this to a certain extent or even down to a team level we're saying in this team we don't do stood launder you know what I mean you you set limits for what we what what is too advanced or too dangerous for us but for teaching this becomes an issue because C plus plus is vast and if I'm going to teach I'm teaching lots of people from different companies and and what what am I going to pick into my my subset uh and the thing is if you're going to teach an introduction to C plus plus then you have to choose you have to choose because you only have a limited amount of time and and whatever you choose like that what they learn in the beginning is going to be what they're going to base everything on that they learn from now on so it should be solid and and that that is super important for their own learning to make make future things make sense but it is also because they will be somebody's colleague one day somebody will have to deal with the code that they produce and not only that they will have to deal with the feedback on the code that they write and I want that to be a good experience I don't want them to go and try to write C plus plus and get really bad feedback I want even if what they write is very simple I want people to say yeah okay that's good you know it's fine it's not a problem and then C plus is really really easy to to like we tend to call it shoot yourself in the foot there we go um and the thing is the the people that I'm that I'm teaching they don't know any C plus plus at all and they're coming from some kind of background uh and and they're going to try to map the concepts from that background and depending on that background that will make things easier or harder um but they need to learn enough like in those two days remember in those two days I have to teach them enough so that they can be productive that they can actually go and write code that will run uh so it's not a theoretical concept I need them to have and and that suddenly requires a great deal of things you you have to be able to compile you have to be able to to understand uh error messages right you have to be able to add functions add files to the compilation and there's you have to be able to navigate the code base you have to understand the code that is there suddenly it becomes a lot to cover in two days and so we can try to you know do this as an exercise we're going to draw some lines in the sand and we're just going to Divine this is the minimum viable subset of C plus plus given this you can program C plus plus and it might not be the optimal it might not be what what your intermediate colleague or your Advanced colleague can do but it will be something that works but how do we Define that uh because you know these are great ideas but how how do we go about trying to suss these things out so so we we have to have some criteria we have to decide what is what is going to be the selection criteria for the features and the language and and the processes that we we we use so I I decided on three so the first one was it should be mostly harmless so so this is basically saying that if we're going to pick a feature we want it to to to not have sharp edges if we can avoid it uh so so sometimes you just can't avoid it and you just have to go there but we're gonna try not to have any of those so mostly harmless uh it has to be useful there's no point in teaching something that is something you will never use in real life just because it's not lava that's it's a useless exercise so so teach things that are actually useful and they will have a use for in their jobs uh so that they get skills that they need so that they can become productive we have limited time there's no reason to waste it on silliness um but it also has to be relevant to their current level so when they are at work these are people who don't know anything so they're going to be juniors in their teams and so so they're not going to be the one that is going to be tasked with uh hopefully with version version 2-0 of of their internal standard Library you know these that's not what these people are going to be doing most likely they're going to make small changes in existing code maybe make something simple right so so they don't have to learn a very complicated Niche things because they're not going to be tasked with doing very complicated Niche things hopefully and and C plus plus has a culture but I I would say every programming language has a culture and this is something that I I I've spoken about before in previous talks and I don't think we appreciate it enough so so one time many years ago I had a colleague and I and he was programming in a new programming language I don't even remember what it was and I asked him how did you learn and he said I read the grammar and then I started programming foreign and and at the time I was like whoa you know that was very impressive and now I think that's a mistake we make that we think and that that that's enough but if you if you have ever tried to just sit down and write Python and then show it to a python programmer that they are invisible pain right and it's like it's like you can see they're they're hurting and and and and and that is something that and and people will use like fancy words for it and I'll go like this is not idiomatic python uh and I have figured out what they mean by that that means you have an accent in this code um I have I have accents in code I I Once Upon Time tried to write a pearl Pearl programmers looked at and goes Patricia what what is this and I'll go like don't hurt me but it works and they were like it looks like C and I'm like yes but I know C um so I had a strong C accent in Pearl I I I've seen uh Java code written by C plus plus programmers very strong C plus plus accent in in the Java code and and we we do that we bring the culture we know and the programming paradigms and how we do things we bring them to new language and it shows right so if we're going to teach C plus plus then we have to try to integrate them into the culture as well and the culture in C plus plus isn't necessarily well defined but it does exist and so there is no definite list on what the sharp edges in C plus plus are some people have been trying to catalog at least parts of it like shafika Moore has been trying to catalog all of the undefined behavior in the world um but but there is no definite list of these are the bad things right but I think we kind of know so that's what I was kind of hoping when I started this that I could figure out by asking in the community I could try to figure out through our kind of collective Consciousness uh what what this is and and of course I did this in in the traditional uh C plus plus way through Twitter polls so so in this this talk all of my visualizations is based on massage data which was gathered from Twitter polls for science right uh I had thousands of replies on these Twitter polls it was insane I spammed everybody's feed I think half of the C plus plus Community probably that hadn't already muted me probably did at this point um but but we did learn things there was there was value from the pain so if any of you ever voted in any of these Twitter polls this is the result so because we have this data of course it must be visualized and therefore this type of talk uh so so this is a reveal.js and underneath I'm using uh D3 which is a JavaScript framework for doing data visualization so we're going to I'm going to try to visualize things in different ways so the lava is going to be the representation of like the harmlessness aspect uh so we have not lava leads to Lava and lava um then we we can do the categorization we can color up all of the features but it's not enough right so we have to figure out how useful it is so I have I've just split this up into what is necessary uh so so things you absolutely need to know to to be productive uh what is useful so things are you know good to know what's going to help you well-rounded it's like yeah we're getting into a little bit of an esoteric knowledge here but you know it's good to know you're probably going to use it occasionally and then you have specialized and it's it's most people won't need it right but at the same time what is considered to be necessary or well-rounded will depend on what level you're at and so so if you are an absolute beginner what it what is what is necessary to know as a beginner will be different from what it is when you're an intermediate or Advanced right so we can put all of these things together so we're going to use the two axes for for uh for this beginner intermediate and advanced and then necessary useful well-rounded and specialized and then we're going to use color for lava and hopefully combining these things together will give us some some knowledge or more questions possibly both um so we can take these wonderful C plus plus features and and then we can color for lava um then we can try to rank them by utility so so up here at the top let's see if I can point yeah so up here at the top we had the necessary stuff and down here at the bottom we have the specialized stuff so what we can tell just by looking at this is that there's a lot of green um in the necessary portion very little Love Actually which was interesting and the lava is very bottom heavy so it's very much like specialized knowledge and you might not actually need to know a lot of lava or use it in your day-to-day job okay but we Rank by utility but let's do group it by by level so on the on the left hand side here we have the beginners and so and it's still spread out so what we can see with the beginners is that a lot of the knowledge that we expect them to to gain is very much in the necessary and useful categories so so so by the time you kind of graduate through the necessary and useful categories you're probably going to be moving over to like an intermediate level and what we can see with the intermediate level the the middle bit here is that it's a little bit more like you know there's there's still a lot of things that are not lava but there are some lava things and there's a lot of things that lead to Lava and then when we look at at Advanced it's basically all specialized knowledge and this probably will fit with your experience from your companies is that you will have a few people in your company that know like the really deep nitty-gritty weird stuff and you'd probably don't need more than a few and and whenever something gets really really tricky you go and ask one of those people and they will work for two weeks and commit two lines of code uh but they will be two lines you could have never written you know so so so so back again to to never like use lines of code written to to measure value right they will write a very long commit message though so um so let's look at what is in this because so far I'm kind of just treated these as bubbles and and process them this way but let's see what these bubbles actually contain so so before I do that let's let's note that the interesting features it's mostly not lava and it's mostly necessary and useful so uh these so I'll I'll read these but I won't do it for intermediate and advances I'll probably just mention a few okay so we have so these are from the poles so we have IO stream past parameter by reference pragma once Asam Auto C style for Loops clang format clang tidy class const debuggers enumclass equals default keep allocation includes inline iterators Lambda capture rough previous talk lambdas um msan namespaces object oriented programming package manager pass parameter by cost reference past parameter by value references return by value short circuit Boolean Expressions sine integers sign integer addition and multiplication stack allocations stood array stood optional stood size stood strings stood unique pointers did vectors STL algorithms string literals with no suffix struct and of ubisan and values and warnings um so this is kind of the chunk that people ended up like pushing up into that corner what is beginner and what is necessary uh I'm going to think more about this later in the talk but I'll just list up the the rest so it gets a little bit more um this so this is where we get to to useful I I think some of these things will will change uh so one of the things that we have let's see here is the fmt libraries here but as we get uh stood printers did format and people start using it then I think it will disappear and but that will come up here um some things that here you have import and I think also maybe as we are starting to use modules more than that probably will change um I I also like the fact that some things people just decide it's like sign integer uh there was a lot of discussion about sign integer is it bad or is it not bad and people like you just have to use it just so so this is there are lots of things here that are actually controversial here for example pragma once and I'll talk about that later as well is non-standard but it's still here right so even if we have kind of split this up it doesn't necessarily bring us where we need to go one of the things I want to point out of course is that this bottom uh this this bottom thing right down here this is this is a specialized knowledge especially this is empty for beginner so it basically means that you know by the time you've gotten to this point you are moving on to intermediate and you don't need specialized knowledge in the beginner stage of your learning which kind of makes sense um okay so let's look at what is intermediate and this is a mixed bag because it has a lot of different things and it's also spread out through the utility ranks here so I'm but it's already leaning towards specialized let's see I think I have to use the keyboard for this just to fill it in so we can talk about it oh no here we go all right um so already uh if you want to be a beginner intermediate if you want to so if you wanted the necessary qualifications for being an intermediate is having an understanding of globals and Define Behavior new and delete cmake one definition Rule and static um so and then it kind of goes more and more towards C so you can find here and so this is the the specialized knowledge for intermediate there's a lot of C stuff uh we're also getting into to uh concurrency uh and and shared pointers here so it's it's interesting I can see how this would be intermediate uh when we get to Advanced it starts getting weird so so the first first so so notice here as as opposed to to uh to the beginner Advanced does not have a necessary useful like nobody the everything here is either well-rounded or specialized like the if you're in the advanced category the the stuff knowledge that you have added is weird stuff right or the first here the the well-rounded is not so weird you have stood forward which is a little bit weird but it's not too weird um but then we get to like the icky Parts like Avi and flexible I remember which made lots of people it's non-standard Patricia and stood on auto pointer it's deprecating um stood launder who knows you know okay who knows who knows what stood launder does okay so two hands and and two people going like this okay okay who have used it in production code one person okay so so so probably not like super necessary for your job um knowing that the the stood Vector bull is a thing is is apparently considered to be specialized esoteric knowledge which is probably fair I guess Union uh variable uh length array is here uh enable shared from this which Olaf was like what people don't know that um and uh yeah placement new pointer provenance that's like a thing that like Library like standard Library writers talk about uh spiname address of Deco Valerie strict aliasing rules subsumption uh trivially movable or copyable and type traits Okay so most likely a lot of these things are not familiar to you unless you are like of the very few people who do these kinds of things um many of them maybe you've heard of them but you've never actually used them or know what they are for so so the the good thing is I can tell you you probably don't need to so so so these are things that are relevant if you work on the standard Library probably or if you work in some kind of similar capacity but for straight up normal application programmers you probably will never use any of this about some of this um the thing the thing that got a little bit meta about this Twitter polls so for people who haven't like made a lot of Twitter polls uh what you want is you want people to vote for like what they think but a lot of people don't know and so when they don't know if you don't have an option for them to see the answers they're just going to vote for random stuff right so I didn't want that in my in my in my data I wanted people to vote lava leads to Lava not lava right so to get away from this I added an option show the results and that's just basically so that people who are curious can see the results without skewing my data that was that was the plan turns out that showed the results became its own information channel that was an intended and I called that what and that's when when people were like is it lava and they were like I don't know what it is I cannot tell you if it's lava and so so so some of the the most what answers uh that show me the results one by a gigantic margin like for some of these like 85 percent voted for show me the results so so so the large majority of the community had no idea what this thing was and they were they did not know if it was lava or not um so so then I tried a different visualization so here the size of the size of the the ball is is is determined by by how many people asked uh show me the results so how many people went what I don't know what is that and so you can see that it's very unevenly distributed like some things people are very you know it's like oh yes this is good this is bad they had like they had a very strong opinion and for some of these people I'm not sure what it is maybe it's good um so what are like the top three what so I've mentioned uh a couple already so so subsumption stood launder and flexible I remember we're the biggest what's um but then it's also interesting to see what is the least what like what are the features that people were the most comfortable having an opinion on um so we have debuggers overloading undefined Behavior manual memory management C hash Define globals struct namespaces pointer arithmetic and bitwise operations and these were things that people were like I can confidently have an opinion on these things and they are varying you know varying things some of them were like lava somewhere them were not lava but people felt confident that I know what it is and I have an opinion and that's also kind of important I think because if we don't as as a lot of these people who who were voting have been programming in c plus plus for a long time if you don't know what something is it might not be that important um so that also became a thing that I I started to wonder if that was actually some a way to I should consider okay so then I tried a different way of visualizing things and so I call this the atlas and so so here I'm trying to to to uh to to pull all my little balls into into different uh corners and so I'll show you and then I'll show you on the next slide and then I'll go back so you kind of understand what it does okay so like that so now I spread them all into different places and I'm gonna go back to show you what these places mean so on the on the left hand side you have a lot of like C features so we have like C we have pointers manual memory management macros UV casts and you also have the console like writing to the console which is has been you know tricky in our history and then we have you know smart pointers which are kind of like vaguely related here to memory manual memory management in the middle we have C plus pluses like slime in the middle and this is when I say C plus plus here is language features so so so not the standard library but language features and then when I say parameters on top that's both parameter passing and return values and on the bottom I say threads but it's like anything concurrency right uh on the on the top right part that's that's compile time programming templates template meta programming and then of course the standard Library um and then in the middle there we have object oriented programming in containers and then in the bottom right corner we have build tools and other types of tools so sanitizers linkers uh any kind of of client format those types of things that we use um so if we take all of the things that the beginners are supposed to know that we want to teach them then they kind of spread out like this and one thing that is interesting to see is that on the on the left hand side here where we had all of the C things there's very little we don't we we don't actually want to teach see apparently as a community which all credit to Kate Gregory who had stopped teaching c talk many years ago um and we and there's a strong focus on learning language features and and how to do parameter passing so it's very heavy in the middle here and a lot down in tools and and this kind of makes sense we want them to be able to to write programs right uh and so we're thinking more application programming and they have to be able to to build they probably need dependencies and you know now we have actually like two contenders for dependency managers well yeah I have like 10 but like two big ones [Music] um and so there's there's this is the kind of spread but you also have up here in the standard library and down here in containers but this is mostly to use the standard library and use containers right okay so the full app list when you take in everything it looks like this so this is all of the features but spread out in the same kind of grouping and what we can see is a lot of what we consider to be Lava is in like the C adjacent territory and and there's you know the most of the rest of it is green so that's quite interesting and especially down here in tools I I was I was expecting people to be more skeptical but people seem to be very um uh very happy with and and encouraging and people using more tools so if we go back to the to the beginners the beginners are not supposed to learn much on the left hand side here we don't want them we don't want to show them our our our nastiness right away like this is like we're hiding our our things for our beginners uh but at a certain point you have to learn and so uh let's see we'll do it like this so here we have the intermediate so now we've gotten past you where you've been like a starting off as a programmer for a while and and then now you're getting the more complicated tasks so what are people expecting you to learn and it's definitely now filling in on the sea stuff and by now people expect you to already know all of this stuff like all of the tools and all of those things how to make classes there's most of this they expect you to know already and it's filling into what you are supposed to learn about templates so now you're getting to maybe you have to understand how to read them and write simpler templates um and they kind of by now I expect you to know most of the language but you have now concurrency becomes a thing that you might become responsible for and then we go to Advanced or let's let's do this so you get the wonderful animation there you go um so when you come to advance is basically we're just teaching the rest of the lava like the stuff that you didn't do in intermediate we're just gonna go there with all of these things which I'm sure this one over here is probably stood launder right um and and the good thing I think from all of this um because okay so so I've visualized this in many different ways and and and what I'm what I'm trying to find out is if are there any insights basically do we know something as a community that we can use to narrow down what to teach and there seems to be an area of C plus plus that we feel is appropriate for beginners and that is mostly not lava so that's a good thing um but the thing is that the the the one that I kept coming back to because you know we didn't have enough categories to classify the data so I have to you know make it make it more complicated is it enough because one of the things that I started worrying about is that we don't want to teach some things that we think are icky but that they actually need to know and there are specifically um two different situa situations in teaching that um that made me think about this um yeah oh yeah because we have to have the rules so the rules for the training and I was very strict in enforcing the rules when we were making the training nothing is Magic if we teach it they have to understand how it works so I don't want people to go like I don't know I just like okay so so one thing I've heard lots of people do like in the beginning when they don't understand um uh like pointers they go like and I just put in more stars and more refs until it works it's true um but the thing is I don't want that you know I don't want I I don't want it there to be magic and so so the rule the rule in the training was if you can't use it if you don't teach it so nothing in the code base nothing on the sides nothing we can talk about anything if we didn't teach it so that they understood what it means and this can make it creates an interesting restriction but it also meant that some things we had to put in because we had to explain it or else there would be magic um so the first one is inline and odr so so first round we did not teach inline and odr uh and and now if we go to the data the day the data the community also says that one definition rules is intermediate level we don't expect beginners to know about One definition rule uh interestingly enough big inline is classified as beginner um and the thing is we didn't teach it first first version of the training we didn't teach in line we didn't teach uh odr what happened in the training was that they had to write a function they wrote it in the header file and then it didn't link and then they go why doesn't it link and then somebody said ah I put an inline there and now it works and and that becomes a problem because back to the thing is nothing is Magic right you can't you can't use it if you don't teach it and so we actually went and I think I have it here we actually this is like just one out of many slides where we try to explain uh odr and I didn't none of us wanted to do this but the the we could have maybe gotten away with it uh in the training itself if stood ABS was const expert in C plus plus 20 which it is not it is in C plus plus 23 and we were not using C plus plus 23 and so and one of the functions that they had to do how to stood up so they couldn't use const expert on it and then suddenly we were having to say you have to use inline and what does inline do well it definitely doesn't necessarily do any inlining uh which is great it's like static it's like we have a keyword we're just going to use it you know C plus plus 26 is coming we can do co-static it's still open you know um anyway okay so back to to this so we ended up teaching in line and odr uh even though we didn't want to um and so that becomes back again to the problem of of is it enough like we want maybe we as a community want to pretend that the subset exists much more than it actually exists uh and and maybe we're not aware of where we're actually pulling in complexity uh for beginners uh because we haven't really thought about it because as intermediate or Advanced people we know these things so we don't think about them another thing and and I I kind of touched on it earlier is header guards versus pragma ones so pragma ones is non-standard but basically supported in pretty much every compiler right um header guards that is like the standard way to do things the thing is if I'm going to teach if I'm going to teach you header words what do I have to teach you I have to teach you define I have to teach you if deaths suddenly I have to teach you macros right I I could keep I could keep the preprocessor out of this to a certain extent by just saying oh no the pre-processor is the thing that resolves your includes right and and it has this pragma fanciness and I don't have to talk about it any more than that but the moment we introduce header guards suddenly we have to talk about macros and if deaths and all of those things I don't want to teach that so no header words teaching pragma ones from the beginning and if you look at it from the results the community agrees the community says pragma once is beginner heterosis intermediate together with macros which actually means that right now the community as a whole we seem to agree that the non-standard way is the way that we should be teaching which is interesting okay so let's go back to the beginner because the beginner we I separated so we have this is this is this is our student hopefully going through learning the necessary the useful the well-rounded and the specialized and we turned out we figured out that there is no specialized knowledge for beginners and almost everything is up there necessary and useful um so so this is this is the beginner but what if we just take the begin like the the the the the necessary parts of beginner so this is a quite small set and and we looked at it earlier and I'll put it up again so you can see it that's my going to be my ending slide in a second um but this doesn't look half bad I think what it needs uh is is is well is I want to say well-roundedness but I've already used that term uh you need to make sure it is complete because you need to have enough teach enough features for someone to be able to program and and I I think we try to skip some things because we don't want to talk about it like odr right or like inline but the thing is a beginner student is going to do these things they're going to get a Linker error poor souls and they they have barely heard the word Linker uh so so so you will have to you will have to add things even if you don't want to just to make sure that they understand what they're doing with the little subset that they're working with So based on the all of our Twitter polls um this is what we teach uh when the floor is lava so that was my talk thank you so much [Applause] so we have lots of time for questions and I'm sure there there are questions people take pictures okay I will walk away so there you go it's a good thing you're taking a picture because I still haven't figured out how to make the PDF um apparently I can just add PDF at the end of the URL I'm not sure um yes questions yes uh yes so a lot of the really advanced stuff is c yeah and this is about teaching people coming from another language yes so the people coming from if you had a class specifically aimed at people coming from from C to C plus plus would you change the scope of what is lava and what is Advanced actually I think I wouldn't and maybe even more because that's the problem and like like I think right now if you're going to learn uh the the type of C plus plus that that is kind of being considered to be like good right now and coming from C is going to be in many cases a disadvantage uh so it's funny that that I think right now if you were coming to Modern sleep as well as like post C plus 20 with ranges and modules and things like that if you're coming from kotlin you're probably better off and and and because and and that's really hard and because we don't want you to do manual memory management we so so so knowing manual memory management and being good at it is is not an advantage it means that you are probably overthinking things and making and and being too concerned by doing something really efficient and so so so I would say just pretend you don't know NAC and now we're going to do this this is how you are not allowed and that's one of the things in the project there's not a single pointer they get a project it's a game it's a Pac-Man game you can walk around in it it's controlled by arrow keys there's not a single pointer in the entire project there's not a single new or delete in the entire project and they're not allowed to do it and and so so bringing people into that and saying okay it is a constructed environment in a teaching and situation uh but to say you you are not allowed to do these things no pointers for you no my luck no free no new no delete I don't want even a shared pointer in there go right and it's going to be different and in my experience also C programmers might get a little bit annoyed but but we're trying to teach C plus plus and then we just have to be honest about that that what C plus plus is trying to be is not C with classes um yeah did that answer your question okay thank you yes okay um I've seen a lot of people being confused by what are L values L values and things like that and based on what you said it's something that you can easily have in the error message so if nothing is Magic did you teach that also and I think it doesn't appear as a language feature in your presentation no uh so uh well um stood move and L value and R value we teach it in the intermediate class and I think probably that's necessary because one of the things that is hard even when you take away manual memory management and simple plus so we've taken that away that's one of the really hard things we're taking that away all the pointers very very hard for most people to understand but we have this this concept of copy semantics and that is very fundamental to how C plus plus works and to understand moves semantics you basically have to understand copy semantics and copy semantics and dealing with values can be very difficult if you're coming from language which has like basic types and everything is a reference and and so I think bringing our value references into that is just too difficult uh so so I think you have to have a solid understanding of what a reference is and what a const reference is and what a value is and is only once you have that solidified that you can actually move uh I'm sorry you can actually go over to learning move does that make sense that's that's my that's my opinion at least yeah so you have to you have to draw a line between something will still be magic you can have this error but no no basically it's there's no move for you everything is copied you get to that point then you go like oh so I don't have to copy and then suddenly you know the world opens up for you but until then uh you can live in a mental model that everything is a copy and in that works uh and then later on they get to a point where like oh okay there's I when they want to level up and then we can get into that but even in move semantics can be very complicated um the book is what like almost 300 pages long um so it's it's non-trivial so you still have to cut that down even for intermediate so I would say understanding deeply and fully uh most semantics is Advanced and especially and I would say probably even like stood forward is advanced so it's uh it's a topic that kind of goes across may I ask another question yeah um what version of super Spruce was the Twitter polls based on did you stop at 17 or higher I know I I so so I didn't say at the time so but where I did it now in it was in in August I guess uh so so uh C plus plus 20 I would say uh was uh the I don't think anybody cared about C plus plus 23 at that time outside of the committee sorry apologies I'm wondering if you had another category to categorize every feature by like maybe everything is April 2020 is lava I don't know that may be interesting so so one of the things that is is interesting uh is that you saw some things uh being categorized as as as more um more specialized knowledge that probably will end up being not that like one of the things that uh let's see I don't uh I have to go back okay give me a second I can go back uh here no here does that work okay so so some things here I found interesting so so here for example you have null pointer so so for some reason we think it's fine that null pointer is something we want to teach to beginners but we're not going to teach them pointers so which is again like a like a thing where I feel like people you know like don't categorize on on on things you like and things you don't like categorize them what is useful for this this this kind of uh person and so but also here you have import here whereas probably if and when we get used to working with modules import is probably going to be uh a you know a necessary thing for beginners to understand I don't remember exactly what your question was it was maybe I would be interested in some days we was also categorized by the previous version or if maybe like you said this will evolve with yeah I I think I I think we will involve as we as as we change how we program we will evolve some things like for example we don't have have a shared pointer here whereas I think if you'd ask this question like five years ago or something people would put sharepointer in here but now sharepointer is considered to be very Advanced and should only be used in certain specific cases um but we didn't necessarily have that Community knowledge five years ago so I think we also change over time as we have experience yeah thank you yeah is this one oh yes I want to try this a bit to Nico's keynote this morning and ask about your experience in teaching a beginner course about const shallowness const propagation how is this topic surfacing on the radar in your trainings do you find this difficult to real um convey do you avoid the topic can you avoid the topic how do your students recover after finding out the details now the thing is that is it's sort of like that the fundamental issue here you don't want to teach all the details you want to teach enough so that people will have an intuition that is is correct even if they don't necessarily have like all of the details they will have a correct intuition like one of one of the things that that this is for the intermediate training so so I I talked about subsumption right um so so I me and current time we spent like a whole day on this assumption so this is this is a thing with Concepts um so and and it is it is something you don't need to know but we needed to understand it deeply to figure out how we're going to teach it and so what we basically ended up with we're going to teach it as an intuition and so when it comes to Consciousness a lot of programming languages have the I uh um some kind of idea around immutability and they have an intuition around immutability and and there is a a tradition in in many programming languages to Aspire to have immutability and and so it's generally fine to describe a const reference to being uh to being an immutable a immutable view or a mutable access I can't use the word view in C plus plus anymore but you know to to an object where you can only use the const parts of it and it's just and this is this is something that doesn't exist in other languages but if you tell them that then go like oh okay so I can use that just as like the other one except only the cons things and they're like yes because they're beginners you want to give them an intuition and not necessarily like understanding reading the standard um did that answer the question partially partially I was interested a bit on on exploring the shallowness of constancy no I I think I think okay so it's okay so this this is one of the things that is with C plus plus is that you can have this is a very specific thing to C plus plus you can have someone come pitch to a conference that they're going to do a three-hour presentation on signed integers okay this is and and not only will they get the talk accepted of three hours talking about signed integers but the room will be packed okay this does not happen in other programming languages so so so we are we there are so many so many chronic cases to almost anything and and we have a tendency to nerd out in all of those corners and that is not appropriate for teaching they need to have because then what am I going to do am I going to spend three three hours of two days to talk about a niche topic that doesn't really matter it's it's it's a waste of time and they won't even understand it and all I've done is scare them so so instead I'm going to tell them here are tools right I'm going to say we're going to always have clang tidy integrated into IDE and it's going to say stuff to us and then we'll have a little bubble and squiggly lines and fix-ups and all these things we're going to be running our debug builds with address sanitizer on and it's going to give you stack traces and the things and it's going to tell you what's wrong I I so instead of teaching them all of the scary Corners I'm going to give them tools that will give them better feedback uh that's my personal opinion yeah so first of all great presentation a great use of data um not very Advanced myself but it was super insightful my question is kind of related to the last one so um you give the students some training and then on their happy Island they will write good code but that's not what happens right they go to a company and the first two lines of code they write is not a standalone program it's somewhere with the other code um and this is kind of like an overdose of caffeine maybe and then something doesn't work and they go to stack Overflow and then it's like steroids and they can't handle it so um shouldn't you give them like a No-No list as well so don't use I don't know unsigned integer macros raw pointers until you you have a driver's license for that or something like that I I think it's a little bit like like likes telling people don't think about an elephant uh now it's everything you know that's the only thing um so so instead I'm I'm teaching uh by omission and but I'm also telling them we're admitting things uh and and and when they show up in their code base they're going to they're going to see some things we all have seen some things and and uh and then they come and so so I've had a few rounds of students that have taken the fundamentals training then they've gone and and been programmers in their teams and they come to back like six months later and do the intermediate training and that's very interesting because they were like it's like it's like I had a few people who came and they were in acute code base and I did not teach them pointers remember and they come back and they're like oh boy I was like yeah yeah that's you know but but then they had to learn that but they had a sense uh or at least I hope uh of of what is considered to be modern C plus plus and and that is an aesthetic again back to what is idiomatic what is what is the culture what will people look at and think is pretty and not pretty it's not about I can't even make code that works can you make code that makes your your colleagues not cringe which is which is which is not a tool supported thing uh mostly I guess clang tidy can cover some of that um so so I get I the the point is again time is limited right so you have to choose what goes in what goes out and what you hope is that they're going to have a sense of what modern C plus plus looks like that they have an aesthetic for it if that makes sense uh thank you so much for this speech and for the data processing yeah um my question is maybe a little out of scope uh there was a question about transitioning from C to C plus plus and you were also saying about bringing some um accent to from other languages but uh is it actually possible to start with staples bus so to start with this beginner non-lava uh part or maybe it's not a good language at all for that and you should start for some with some other okay so so some people think so some people think it's possible a lot of universities think it's possible I don't think it's possible including mine uh and the reason why I I say I don't think it's possible is because just understanding programming as it is is mind-blowing enough to just I'm going to write words here and then some execution is going to go through and jump around and do there's so many mind-bending things about just understanding programming in general and then I'm going to throw like you know like use after free at you it's just it's a little bit too much I I think so so I think it's better to start with a higher uh or a safer language but I would say I would I would actually say go for a language that has more of a modern uh style to it so so for example so I mentioned kotlin I think kotlin is is great in that it will give you that stream the Java stream like thing which will help you with ranges I think if you're coming with kotlin and you're going to program modern C plus plus is it ranges is going to be much easier for you than it is for somebody coming from C right so so it has to do with having a mental model for how how one does this type of programming and you can practice that and save her ways yeah okay thank you can I ask one more questions um yeah there were all these um things that people chose for love and love Etc and you also said that some of them have dependencies like you can't tell about include guards without telling about macros so basically it's a great it's another graph and uh probably all intermediate part must must not uh all beginner part must not depend on intermediate part and probably there is also some dependency cycle how do you work with that maybe there are some it's it's hard it's hard and you have to make these choices like like the fact that we suddenly decided we're going to teach odr and we're going to teach in line uh even though we didn't want to and also the choice that we're going to do a program once and because we don't want to teach macros and you kind of have to make those choices I'm not we don't teach null pointer in the beginner training because why would they have a null pointer now if I'm going to explain a null pointer I have to explain pointers I don't want to explain pointers so we're not going to have no pointer see you have to make those kinds of choices yeah it's but you're right it's a graph but I haven't tried to graph it hey um hopefully it's a really short one okay because he had two questions and you've been waiting a long time is it okay one question really short okay yeah okay so thanks for collecting the data and for the nice animations um now I'm wondering if you're still teaching this or if you can book yeah yeah you're teaching that was that an online course or something no no we teach uh mostly we can teach it online but we teach it for companies so so yeah just reach out and we can book it for your company yeah okay there we go thank you