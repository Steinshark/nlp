uh I love this this clearly is Chad jied where's this guy even looking uh learn to code the slow way all right first off I do want every last person here to know that this is a boot dodev sponsored article read uh Wags Lane as he is named inside this chat oh so aptly named somewhere in here he was just talking is an awesome Dev he's created an awesome uh website for learning how to become a better backend developer and it's kind of gamified and it makes it more fun as sellout hey you're not allowed to call me a sellout seller uh but this is an ad always have been I try to always be very upfront about that so you never feel like you've been bamboozled I'm not going to work it in at the end we're doing it up front all right let's do that ever since starting boot. deev I FL I've been flooded with what I call quicksand questions oo ooh on the surface a quicksand question seems like a good question if you could answer it it would catapult you from where you are night shift at Wendy's Drive-In to where you want to be telling your friends that you work at Netflix by the way I can tell you this much you never tell your friends I can tell you don't work at Netflix cuz you never tell your friends you work at Netflix you know why cuz in IRL when you say you work at Netflix you know what you get hey you get a free subscription you know what Netflix should do you know what they should do hey sit down I'm G to tell you what Netflix's business plan for 2025 should be trust me this is a great one every effing time you know what I say to people in real life oh where do you work oh I work at a startup oh what do you do tech tech for TVs oh cool that sounds hard yeah it's pretty hard honestly that's it I I literally never tell people because it is just the worst experience quick standand questions are all about finding shortcuts I need a developer job in three months what's the best way to do that ooh I like this I've seen you laid out 20 courses in your backend learning path but wink wink which ones can I skip oo I like this quicksand questions it reminds me of I believe Mary says this in Lord of the Rings book one which is uh shortcuts lead to Long delays shortcuts lead to Long delays I absolutely have always like loved this phrase Pippen Pippen says it it wasn't Mario's Pippen you dummy okay anyways I've always loved that that phrase because it's so much of of software engineering is attempting fool overtook fool overtook uh is attempting to shortcut things and I argue that don't ever shortcut whole asset instead work harder instead of trying to you know work harder instead of work SM or work smarter instead of harder people use that expression to shortcut all the time right you should work smart be smart but you got to you got a full asset stop half-assing right uh what's wrong with shortcuts now I want to be clear there is absolutely nothing wrong with wanting to take the shorter path toward a career goal this is true uh that's called wisdom you take the path you take the shortest and most direct path to the place you want to be absolutely anything else would be insanity if there was a pill to turn you into a senior developer overnight I'd encourage you to pop that sucker good advice in theory educational Min maxing seems like a solid strategy but in practice it doesn't uh it just doesn't work why because the destination is unknown Dyer's algorithm is great if you know where you're going if you don't you need something else it's a fact no one knows where they're going uh okay interesting let's flip find out the tech scene is a cluster Aster of complexity I learned like 10 different programming languages in college and even three years into my degree I still don't know that I ended up working as a backend engineer ready and go or I still don't know uh why that I ended up okay uh I interviewed for all sorts of nonsense from embedded systems to frontend development yeah turns out my prologue classes didn't help much in my first interview but you know what it didn't hurt and now when someone says it's a declarative system my facial expression doesn't betray my ignorance is a declarative system I know this that's I that's actually that's actually that's actually pretty good this this is a fact like that's why I you know again I we just got done explaining this via excal draw right we just got done talking about this via excal draw but having a breath like it's good to have that good T curve right you want a a Mastery you want to start developing a Mastery in something but I think people pick the first thing as the thing they're going to master and then their Tac curve well it doesn't look much like a t curve you know what I mean it doesn't have much of a t it's more of like a just like a just like a little bit of an ey it's you know and it's just like I learned the first thing and now that's the only thing I'm going to do where you should try a bunch of stuff I think it just genuinely helps talk about stuff and when people perceive you as someone who can talk about a lot of things you just get way more uh credibility and people will trust what you say a lot more it's it's wild if you knew exactly what concepts you need to master to pass your first interview then you you could might or you might be able come on Lane what is this you might be able to find an effective shortcut the trouble is there is no precise subset of knowledge that will always be enough to pass every possible first interview exactly this is why I don't like there's a lot of people right now discouraging Le code saying oh you don't need to do Le code or saying how much it is you know what I say it's part of that secret handshake baby I don't know what the handshake is going to be but it's part of it do a little bit of leak Cod get kind of good at it you know why in case they decide the toss a leak code question at you you're already prepared because you've done 20 of them you don't need to do 900 of them maybe 20 30 40 spend a weekend get to know it you know every company has their own janky text act this is a fact of life every pm has their own vision of agile this is a fact every hiring manager has their own seven-step interview process facts every job requirement uh requires different bits of arcade knowledge facts you have no idea what you're uh you'll be doing dayto day at your first job when you start when you are starting to learn to code I hear people say things like I never even use my DSA skills at work and upon further inspection it turns out they are a WordPress developer don't dunk on Lambo Lang okay you can't you're not allowed to do that and also literally yesterday I used a data structure and algorithm from my time learning algorithms uh it's actually super important to have these in your back pocket because when you get presented a problem that's extremely hard there can be a solution that's trivial but if you're unable to know if you don't even have the language to describe the set of problems you're looking at you are literally Reinventing it so I shouldn't be interested in the shortest path you you should it's just not where you think it uh you'll find it the shortest path to a job as a programmer does not involve minimizing the the amount of things you need to learn and build that sort of thinking results in a much longer more mentally exhausting Journey something like this jump directly into web framework probably nextjs uh since your basic AF yep got him find you have a talent for building to-do apps realize you can't build a hello world without a tutorial attempt to remedy that by doing more tutorials read on Twitter that actually rust is the best language admit defeat at the hands of the borrow Checker repeat steps one through four end times where N is a D4 roll times your stubbornness you just gave the seven steps to tutorial hell right here this is actually super beautiful it's super beautiful because you should be able to write or at least conceptually have 30 to 50% of what nextjs does in your head like filebase routing just take a second to think about what it's actually doing why is that only in JavaScript or it's a pre-compile step in other languages just take take a second to think about that what are they doing well they're using FS to crawl your repo's file system and build the paths out as URLs and literally probably putting it on an Express app right that's like that's what it's doing it's just doing the express for you it's not like crazy just something to think about it's Apache and it's first version boom goes the D it's literally a patch it's an HT access where it's generated based on a file Tree on the find command all right the shortest path or at least the shorter path usually looks like this learn core programming CS Concepts in some language tentatively decide on the kind of programming you want to do front end backend mobile Etc learn the fundamentals of that kind of programming and Technologies is well suited for it never stop learning and building while you search for a job I would yes and so a big thing I would add on there is when building builds something that you want to use I think that is a huge just a huge requirement and then I would also toss in build things in areas that you don't know a lot about CLI tools are one of the easiest ones understand the CLI right build projects to gain a basic foundation and when you get stuck don't look for a tutorial Google your way into the building meaning that you could look for a tutorial how to create a to-do app in spelt okay fine how about how do I color a Square okay that's how I color a square in HTML all right how do I how do I get data in spelt okay this is how I get data okay how do I make a connection to turo this is how I make a connection to serso okay I think I could do this like extend your ideas you know what I mean don't look for the tutorial build the tutorial yourself uh you could use chat GPT but I I I worry about falling into the tutorial hell state right which is that you're not actually step by step learning how to solve a problem by Googling instead you have the seven steps it takes to build something in which they're hiding the 600 steps they took to get there from you the real thing is is that people screw up here here here here here here oh got one good step in here here here here one good step here here here here here here one good step here and then the tutorial is a b c and you're like oh it's that easy you missed the learning tutorials aren't for learning they're for seeing how someone else does something they that's what they're for so you should already know how to honestly I get way more out of a tutorial when I already know how to build it then I can go oh their steps are different oh I wonder how they got there oh this is what it does differently this makes sense don't get me wrong this second path still isn't short programming isn't easy sorry if you were told it was but if you're willing to put in the effort you can avoid an aimless uh stroll through the Ninth Circle of tutorial hell absolutely which is also very cold don't be scared of work folks spend eons trying to find the shortest learning path or trying to avoid learning things that they'll never use again they're fine wasting months or Years Learning absolutely nothing to avoid any unnecessary work why not bite the bullet and risk spending a few days learning something that's not directly applicable to the job you'll eventually land the point of I mean my personal point of learning or growing is to explore the things that interest me you know what I mean the things that interest me are the ones that are going to get me to keep going those are the things that are going to make me learn One Step more let's be a bajillion percent honest some folks are looking for good oldfashioned get rich quick scheme after a few weeks of struggling with loops they'll give up and purchase an AI crypto trading bot on fiver don't be like those folks becoming a software engineer is not a get quit rich quick scheme it's a get upper CL upper middle class slow scheme it's actually this a great statement get statistically above median income but it also takes 10 years of really hard effort to get somewhere where you get something uh the trick to making it you actually have to get good so instead of copy pasting half-hazard from stack Overflow to fix the next era you encounter takeing extra minutes to figure out what it means I can't begin to tell you how many PRS I've reviewed that fix something but are just patch of a patch because the dev never gred the underlying problem for example an X Java Dev it's always a Java Dev finds some finds that sometimes this function in go panics send email so they go straight to Google and find that panicky and go can be solved with a recover so they open a poll request B bam B bam okay this kind of works but a better developer would try to understand and fix the underlying problem in the code they would add nil checks or just stop using pointers altogether for this function real talk that is great I've been guilty of I I've been guilty of this we've all been guilty of this sometimes it's easier just to take this step it just is and sometimes for your job you have to take that step so learning when to do which one is also a skill even onto itself right sometimes you just have to be like hey yo to fix this properly is like two weeks worth of work to fix it now is a Friday afternoon mentality it's it's true though sometimes the Friday afternoon mentality is the greater of the two you want to have a bias towards becoming better not reaching the end oo I love that there is there isn't an end there's too much to learn out there the scope of all of the software engineering is larger than the scope of your last program's Global name space facts it's not the advice you wanted getting fit giving up addiction building a business and yes getting your first Dev jobs are all hard don't make it harder on yourself by wasting your time searching for shortcuts learn Evergreen foundational stuff build uh projects that interest you and you'll be amazed how far you can get in the last year or two of consistent effort this is really good I like this thank you for this Elaine this was a great article I actually this was actually this is just 10 out of 10 advice okay this is why again I I do recommend boot. Dev remember I make courses on frontend master so technically this would be like a direct competitor in some sense they're really good I really trust what Lane has to say and I think that you should go and check them out okay even though this is an ad I actually believe that because Lane's a badass the name is the primagen